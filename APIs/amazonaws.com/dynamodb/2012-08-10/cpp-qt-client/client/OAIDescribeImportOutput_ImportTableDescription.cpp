/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImportOutput_ImportTableDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImportOutput_ImportTableDescription::OAIDescribeImportOutput_ImportTableDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImportOutput_ImportTableDescription::OAIDescribeImportOutput_ImportTableDescription() {
    this->initializeModel();
}

OAIDescribeImportOutput_ImportTableDescription::~OAIDescribeImportOutput_ImportTableDescription() {}

void OAIDescribeImportOutput_ImportTableDescription::initializeModel() {

    m_import_arn_isSet = false;
    m_import_arn_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_s3_bucket_source_isSet = false;
    m_s3_bucket_source_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_input_format_isSet = false;
    m_input_format_isValid = false;

    m_input_format_options_isSet = false;
    m_input_format_options_isValid = false;

    m_input_compression_type_isSet = false;
    m_input_compression_type_isValid = false;

    m_table_creation_parameters_isSet = false;
    m_table_creation_parameters_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_processed_size_bytes_isSet = false;
    m_processed_size_bytes_isValid = false;

    m_processed_item_count_isSet = false;
    m_processed_item_count_isValid = false;

    m_imported_item_count_isSet = false;
    m_imported_item_count_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;
}

void OAIDescribeImportOutput_ImportTableDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImportOutput_ImportTableDescription::fromJsonObject(QJsonObject json) {

    m_import_arn_isValid = ::OpenAPI::fromJsonValue(m_import_arn, json[QString("ImportArn")]);
    m_import_arn_isSet = !json[QString("ImportArn")].isNull() && m_import_arn_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("ImportStatus")]);
    m_import_status_isSet = !json[QString("ImportStatus")].isNull() && m_import_status_isValid;

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("TableId")]);
    m_table_id_isSet = !json[QString("TableId")].isNull() && m_table_id_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_s3_bucket_source_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_source, json[QString("S3BucketSource")]);
    m_s3_bucket_source_isSet = !json[QString("S3BucketSource")].isNull() && m_s3_bucket_source_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("ErrorCount")]);
    m_error_count_isSet = !json[QString("ErrorCount")].isNull() && m_error_count_isValid;

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("CloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("CloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_input_format_isValid = ::OpenAPI::fromJsonValue(m_input_format, json[QString("InputFormat")]);
    m_input_format_isSet = !json[QString("InputFormat")].isNull() && m_input_format_isValid;

    m_input_format_options_isValid = ::OpenAPI::fromJsonValue(m_input_format_options, json[QString("InputFormatOptions")]);
    m_input_format_options_isSet = !json[QString("InputFormatOptions")].isNull() && m_input_format_options_isValid;

    m_input_compression_type_isValid = ::OpenAPI::fromJsonValue(m_input_compression_type, json[QString("InputCompressionType")]);
    m_input_compression_type_isSet = !json[QString("InputCompressionType")].isNull() && m_input_compression_type_isValid;

    m_table_creation_parameters_isValid = ::OpenAPI::fromJsonValue(m_table_creation_parameters, json[QString("TableCreationParameters")]);
    m_table_creation_parameters_isSet = !json[QString("TableCreationParameters")].isNull() && m_table_creation_parameters_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_processed_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_processed_size_bytes, json[QString("ProcessedSizeBytes")]);
    m_processed_size_bytes_isSet = !json[QString("ProcessedSizeBytes")].isNull() && m_processed_size_bytes_isValid;

    m_processed_item_count_isValid = ::OpenAPI::fromJsonValue(m_processed_item_count, json[QString("ProcessedItemCount")]);
    m_processed_item_count_isSet = !json[QString("ProcessedItemCount")].isNull() && m_processed_item_count_isValid;

    m_imported_item_count_isValid = ::OpenAPI::fromJsonValue(m_imported_item_count, json[QString("ImportedItemCount")]);
    m_imported_item_count_isSet = !json[QString("ImportedItemCount")].isNull() && m_imported_item_count_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("FailureCode")]);
    m_failure_code_isSet = !json[QString("FailureCode")].isNull() && m_failure_code_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("FailureMessage")]);
    m_failure_message_isSet = !json[QString("FailureMessage")].isNull() && m_failure_message_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImportOutput_ImportTableDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_import_arn_isSet) {
        obj.insert(QString("ImportArn"), ::OpenAPI::toJsonValue(m_import_arn));
    }
    if (m_import_status.isSet()) {
        obj.insert(QString("ImportStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("TableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_s3_bucket_source.isSet()) {
        obj.insert(QString("S3BucketSource"), ::OpenAPI::toJsonValue(m_s3_bucket_source));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("ErrorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_input_format.isSet()) {
        obj.insert(QString("InputFormat"), ::OpenAPI::toJsonValue(m_input_format));
    }
    if (m_input_format_options.isSet()) {
        obj.insert(QString("InputFormatOptions"), ::OpenAPI::toJsonValue(m_input_format_options));
    }
    if (m_input_compression_type.isSet()) {
        obj.insert(QString("InputCompressionType"), ::OpenAPI::toJsonValue(m_input_compression_type));
    }
    if (m_table_creation_parameters.isSet()) {
        obj.insert(QString("TableCreationParameters"), ::OpenAPI::toJsonValue(m_table_creation_parameters));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_processed_size_bytes_isSet) {
        obj.insert(QString("ProcessedSizeBytes"), ::OpenAPI::toJsonValue(m_processed_size_bytes));
    }
    if (m_processed_item_count_isSet) {
        obj.insert(QString("ProcessedItemCount"), ::OpenAPI::toJsonValue(m_processed_item_count));
    }
    if (m_imported_item_count_isSet) {
        obj.insert(QString("ImportedItemCount"), ::OpenAPI::toJsonValue(m_imported_item_count));
    }
    if (m_failure_code_isSet) {
        obj.insert(QString("FailureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("FailureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    return obj;
}

QString OAIDescribeImportOutput_ImportTableDescription::getImportArn() const {
    return m_import_arn;
}
void OAIDescribeImportOutput_ImportTableDescription::setImportArn(const QString &import_arn) {
    m_import_arn = import_arn;
    m_import_arn_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_import_arn_Set() const{
    return m_import_arn_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_import_arn_Valid() const{
    return m_import_arn_isValid;
}

OAIImportStatus OAIDescribeImportOutput_ImportTableDescription::getImportStatus() const {
    return m_import_status;
}
void OAIDescribeImportOutput_ImportTableDescription::setImportStatus(const OAIImportStatus &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_import_status_Valid() const{
    return m_import_status_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::getTableArn() const {
    return m_table_arn;
}
void OAIDescribeImportOutput_ImportTableDescription::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::getTableId() const {
    return m_table_id;
}
void OAIDescribeImportOutput_ImportTableDescription::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_table_id_Valid() const{
    return m_table_id_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::getClientToken() const {
    return m_client_token;
}
void OAIDescribeImportOutput_ImportTableDescription::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIImportTableDescription_S3BucketSource OAIDescribeImportOutput_ImportTableDescription::getS3BucketSource() const {
    return m_s3_bucket_source;
}
void OAIDescribeImportOutput_ImportTableDescription::setS3BucketSource(const OAIImportTableDescription_S3BucketSource &s3_bucket_source) {
    m_s3_bucket_source = s3_bucket_source;
    m_s3_bucket_source_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_s3_bucket_source_Set() const{
    return m_s3_bucket_source_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_s3_bucket_source_Valid() const{
    return m_s3_bucket_source_isValid;
}

qint32 OAIDescribeImportOutput_ImportTableDescription::getErrorCount() const {
    return m_error_count;
}
void OAIDescribeImportOutput_ImportTableDescription::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAIDescribeImportOutput_ImportTableDescription::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

OAIInputFormat OAIDescribeImportOutput_ImportTableDescription::getInputFormat() const {
    return m_input_format;
}
void OAIDescribeImportOutput_ImportTableDescription::setInputFormat(const OAIInputFormat &input_format) {
    m_input_format = input_format;
    m_input_format_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_input_format_Set() const{
    return m_input_format_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_input_format_Valid() const{
    return m_input_format_isValid;
}

OAIImportTableDescription_InputFormatOptions OAIDescribeImportOutput_ImportTableDescription::getInputFormatOptions() const {
    return m_input_format_options;
}
void OAIDescribeImportOutput_ImportTableDescription::setInputFormatOptions(const OAIImportTableDescription_InputFormatOptions &input_format_options) {
    m_input_format_options = input_format_options;
    m_input_format_options_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_input_format_options_Set() const{
    return m_input_format_options_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_input_format_options_Valid() const{
    return m_input_format_options_isValid;
}

OAIInputCompressionType OAIDescribeImportOutput_ImportTableDescription::getInputCompressionType() const {
    return m_input_compression_type;
}
void OAIDescribeImportOutput_ImportTableDescription::setInputCompressionType(const OAIInputCompressionType &input_compression_type) {
    m_input_compression_type = input_compression_type;
    m_input_compression_type_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_input_compression_type_Set() const{
    return m_input_compression_type_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_input_compression_type_Valid() const{
    return m_input_compression_type_isValid;
}

OAIImportTableDescription_TableCreationParameters OAIDescribeImportOutput_ImportTableDescription::getTableCreationParameters() const {
    return m_table_creation_parameters;
}
void OAIDescribeImportOutput_ImportTableDescription::setTableCreationParameters(const OAIImportTableDescription_TableCreationParameters &table_creation_parameters) {
    m_table_creation_parameters = table_creation_parameters;
    m_table_creation_parameters_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_table_creation_parameters_Set() const{
    return m_table_creation_parameters_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_table_creation_parameters_Valid() const{
    return m_table_creation_parameters_isValid;
}

QDateTime OAIDescribeImportOutput_ImportTableDescription::getStartTime() const {
    return m_start_time;
}
void OAIDescribeImportOutput_ImportTableDescription::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeImportOutput_ImportTableDescription::getEndTime() const {
    return m_end_time;
}
void OAIDescribeImportOutput_ImportTableDescription::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDescribeImportOutput_ImportTableDescription::getProcessedSizeBytes() const {
    return m_processed_size_bytes;
}
void OAIDescribeImportOutput_ImportTableDescription::setProcessedSizeBytes(const qint32 &processed_size_bytes) {
    m_processed_size_bytes = processed_size_bytes;
    m_processed_size_bytes_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_processed_size_bytes_Set() const{
    return m_processed_size_bytes_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_processed_size_bytes_Valid() const{
    return m_processed_size_bytes_isValid;
}

qint32 OAIDescribeImportOutput_ImportTableDescription::getProcessedItemCount() const {
    return m_processed_item_count;
}
void OAIDescribeImportOutput_ImportTableDescription::setProcessedItemCount(const qint32 &processed_item_count) {
    m_processed_item_count = processed_item_count;
    m_processed_item_count_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_processed_item_count_Set() const{
    return m_processed_item_count_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_processed_item_count_Valid() const{
    return m_processed_item_count_isValid;
}

qint32 OAIDescribeImportOutput_ImportTableDescription::getImportedItemCount() const {
    return m_imported_item_count;
}
void OAIDescribeImportOutput_ImportTableDescription::setImportedItemCount(const qint32 &imported_item_count) {
    m_imported_item_count = imported_item_count;
    m_imported_item_count_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_imported_item_count_Set() const{
    return m_imported_item_count_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_imported_item_count_Valid() const{
    return m_imported_item_count_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::getFailureCode() const {
    return m_failure_code;
}
void OAIDescribeImportOutput_ImportTableDescription::setFailureCode(const QString &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIDescribeImportOutput_ImportTableDescription::getFailureMessage() const {
    return m_failure_message;
}
void OAIDescribeImportOutput_ImportTableDescription::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIDescribeImportOutput_ImportTableDescription::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

bool OAIDescribeImportOutput_ImportTableDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_format_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_creation_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImportOutput_ImportTableDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
