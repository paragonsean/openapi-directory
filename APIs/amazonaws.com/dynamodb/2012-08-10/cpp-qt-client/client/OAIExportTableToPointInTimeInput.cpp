/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportTableToPointInTimeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportTableToPointInTimeInput::OAIExportTableToPointInTimeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportTableToPointInTimeInput::OAIExportTableToPointInTimeInput() {
    this->initializeModel();
}

OAIExportTableToPointInTimeInput::~OAIExportTableToPointInTimeInput() {}

void OAIExportTableToPointInTimeInput::initializeModel() {

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_export_time_isSet = false;
    m_export_time_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_bucket_owner_isSet = false;
    m_s3_bucket_owner_isValid = false;

    m_s3_prefix_isSet = false;
    m_s3_prefix_isValid = false;

    m_s3_sse_algorithm_isSet = false;
    m_s3_sse_algorithm_isValid = false;

    m_s3_sse_kms_key_id_isSet = false;
    m_s3_sse_kms_key_id_isValid = false;

    m_export_format_isSet = false;
    m_export_format_isValid = false;
}

void OAIExportTableToPointInTimeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportTableToPointInTimeInput::fromJsonObject(QJsonObject json) {

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_export_time_isValid = ::OpenAPI::fromJsonValue(m_export_time, json[QString("ExportTime")]);
    m_export_time_isSet = !json[QString("ExportTime")].isNull() && m_export_time_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("S3Bucket")]);
    m_s3_bucket_isSet = !json[QString("S3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_bucket_owner_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_owner, json[QString("S3BucketOwner")]);
    m_s3_bucket_owner_isSet = !json[QString("S3BucketOwner")].isNull() && m_s3_bucket_owner_isValid;

    m_s3_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_prefix, json[QString("S3Prefix")]);
    m_s3_prefix_isSet = !json[QString("S3Prefix")].isNull() && m_s3_prefix_isValid;

    m_s3_sse_algorithm_isValid = ::OpenAPI::fromJsonValue(m_s3_sse_algorithm, json[QString("S3SseAlgorithm")]);
    m_s3_sse_algorithm_isSet = !json[QString("S3SseAlgorithm")].isNull() && m_s3_sse_algorithm_isValid;

    m_s3_sse_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_s3_sse_kms_key_id, json[QString("S3SseKmsKeyId")]);
    m_s3_sse_kms_key_id_isSet = !json[QString("S3SseKmsKeyId")].isNull() && m_s3_sse_kms_key_id_isValid;

    m_export_format_isValid = ::OpenAPI::fromJsonValue(m_export_format, json[QString("ExportFormat")]);
    m_export_format_isSet = !json[QString("ExportFormat")].isNull() && m_export_format_isValid;
}

QString OAIExportTableToPointInTimeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportTableToPointInTimeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_export_time_isSet) {
        obj.insert(QString("ExportTime"), ::OpenAPI::toJsonValue(m_export_time));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_s3_bucket_isSet) {
        obj.insert(QString("S3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_bucket_owner_isSet) {
        obj.insert(QString("S3BucketOwner"), ::OpenAPI::toJsonValue(m_s3_bucket_owner));
    }
    if (m_s3_prefix_isSet) {
        obj.insert(QString("S3Prefix"), ::OpenAPI::toJsonValue(m_s3_prefix));
    }
    if (m_s3_sse_algorithm.isSet()) {
        obj.insert(QString("S3SseAlgorithm"), ::OpenAPI::toJsonValue(m_s3_sse_algorithm));
    }
    if (m_s3_sse_kms_key_id_isSet) {
        obj.insert(QString("S3SseKmsKeyId"), ::OpenAPI::toJsonValue(m_s3_sse_kms_key_id));
    }
    if (m_export_format.isSet()) {
        obj.insert(QString("ExportFormat"), ::OpenAPI::toJsonValue(m_export_format));
    }
    return obj;
}

QString OAIExportTableToPointInTimeInput::getTableArn() const {
    return m_table_arn;
}
void OAIExportTableToPointInTimeInput::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIExportTableToPointInTimeInput::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

QDateTime OAIExportTableToPointInTimeInput::getExportTime() const {
    return m_export_time;
}
void OAIExportTableToPointInTimeInput::setExportTime(const QDateTime &export_time) {
    m_export_time = export_time;
    m_export_time_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_export_time_Set() const{
    return m_export_time_isSet;
}

bool OAIExportTableToPointInTimeInput::is_export_time_Valid() const{
    return m_export_time_isValid;
}

QString OAIExportTableToPointInTimeInput::getClientToken() const {
    return m_client_token;
}
void OAIExportTableToPointInTimeInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIExportTableToPointInTimeInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIExportTableToPointInTimeInput::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIExportTableToPointInTimeInput::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIExportTableToPointInTimeInput::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAIExportTableToPointInTimeInput::getS3BucketOwner() const {
    return m_s3_bucket_owner;
}
void OAIExportTableToPointInTimeInput::setS3BucketOwner(const QString &s3_bucket_owner) {
    m_s3_bucket_owner = s3_bucket_owner;
    m_s3_bucket_owner_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_s3_bucket_owner_Set() const{
    return m_s3_bucket_owner_isSet;
}

bool OAIExportTableToPointInTimeInput::is_s3_bucket_owner_Valid() const{
    return m_s3_bucket_owner_isValid;
}

QString OAIExportTableToPointInTimeInput::getS3Prefix() const {
    return m_s3_prefix;
}
void OAIExportTableToPointInTimeInput::setS3Prefix(const QString &s3_prefix) {
    m_s3_prefix = s3_prefix;
    m_s3_prefix_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_s3_prefix_Set() const{
    return m_s3_prefix_isSet;
}

bool OAIExportTableToPointInTimeInput::is_s3_prefix_Valid() const{
    return m_s3_prefix_isValid;
}

OAIS3SseAlgorithm OAIExportTableToPointInTimeInput::getS3SseAlgorithm() const {
    return m_s3_sse_algorithm;
}
void OAIExportTableToPointInTimeInput::setS3SseAlgorithm(const OAIS3SseAlgorithm &s3_sse_algorithm) {
    m_s3_sse_algorithm = s3_sse_algorithm;
    m_s3_sse_algorithm_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_s3_sse_algorithm_Set() const{
    return m_s3_sse_algorithm_isSet;
}

bool OAIExportTableToPointInTimeInput::is_s3_sse_algorithm_Valid() const{
    return m_s3_sse_algorithm_isValid;
}

QString OAIExportTableToPointInTimeInput::getS3SseKmsKeyId() const {
    return m_s3_sse_kms_key_id;
}
void OAIExportTableToPointInTimeInput::setS3SseKmsKeyId(const QString &s3_sse_kms_key_id) {
    m_s3_sse_kms_key_id = s3_sse_kms_key_id;
    m_s3_sse_kms_key_id_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_s3_sse_kms_key_id_Set() const{
    return m_s3_sse_kms_key_id_isSet;
}

bool OAIExportTableToPointInTimeInput::is_s3_sse_kms_key_id_Valid() const{
    return m_s3_sse_kms_key_id_isValid;
}

OAIExportFormat OAIExportTableToPointInTimeInput::getExportFormat() const {
    return m_export_format;
}
void OAIExportTableToPointInTimeInput::setExportFormat(const OAIExportFormat &export_format) {
    m_export_format = export_format;
    m_export_format_isSet = true;
}

bool OAIExportTableToPointInTimeInput::is_export_format_Set() const{
    return m_export_format_isSet;
}

bool OAIExportTableToPointInTimeInput::is_export_format_Valid() const{
    return m_export_format_isValid;
}

bool OAIExportTableToPointInTimeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_sse_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_sse_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportTableToPointInTimeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_arn_isValid && m_s3_bucket_isValid && true;
}

} // namespace OpenAPI
