/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactGetItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactGetItem::OAITransactGetItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactGetItem::OAITransactGetItem() {
    this->initializeModel();
}

OAITransactGetItem::~OAITransactGetItem() {}

void OAITransactGetItem::initializeModel() {

    m_get_isSet = false;
    m_get_isValid = false;
}

void OAITransactGetItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactGetItem::fromJsonObject(QJsonObject json) {

    m_get_isValid = ::OpenAPI::fromJsonValue(m_get, json[QString("Get")]);
    m_get_isSet = !json[QString("Get")].isNull() && m_get_isValid;
}

QString OAITransactGetItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactGetItem::asJsonObject() const {
    QJsonObject obj;
    if (m_get.isSet()) {
        obj.insert(QString("Get"), ::OpenAPI::toJsonValue(m_get));
    }
    return obj;
}

OAITransactGetItem_Get OAITransactGetItem::getGet() const {
    return m_get;
}
void OAITransactGetItem::setGet(const OAITransactGetItem_Get &get) {
    m_get = get;
    m_get_isSet = true;
}

bool OAITransactGetItem::is_get_Set() const{
    return m_get_isSet;
}

bool OAITransactGetItem::is_get_Valid() const{
    return m_get_isValid;
}

bool OAITransactGetItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_get.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactGetItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_get_isValid && true;
}

} // namespace OpenAPI
