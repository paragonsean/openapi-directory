/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGlobalTableOutput_GlobalTableDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGlobalTableOutput_GlobalTableDescription::OAICreateGlobalTableOutput_GlobalTableDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGlobalTableOutput_GlobalTableDescription::OAICreateGlobalTableOutput_GlobalTableDescription() {
    this->initializeModel();
}

OAICreateGlobalTableOutput_GlobalTableDescription::~OAICreateGlobalTableOutput_GlobalTableDescription() {}

void OAICreateGlobalTableOutput_GlobalTableDescription::initializeModel() {

    m_replication_group_isSet = false;
    m_replication_group_isValid = false;

    m_global_table_arn_isSet = false;
    m_global_table_arn_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_global_table_status_isSet = false;
    m_global_table_status_isValid = false;

    m_global_table_name_isSet = false;
    m_global_table_name_isValid = false;
}

void OAICreateGlobalTableOutput_GlobalTableDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGlobalTableOutput_GlobalTableDescription::fromJsonObject(QJsonObject json) {

    m_replication_group_isValid = ::OpenAPI::fromJsonValue(m_replication_group, json[QString("ReplicationGroup")]);
    m_replication_group_isSet = !json[QString("ReplicationGroup")].isNull() && m_replication_group_isValid;

    m_global_table_arn_isValid = ::OpenAPI::fromJsonValue(m_global_table_arn, json[QString("GlobalTableArn")]);
    m_global_table_arn_isSet = !json[QString("GlobalTableArn")].isNull() && m_global_table_arn_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("CreationDateTime")]);
    m_creation_date_time_isSet = !json[QString("CreationDateTime")].isNull() && m_creation_date_time_isValid;

    m_global_table_status_isValid = ::OpenAPI::fromJsonValue(m_global_table_status, json[QString("GlobalTableStatus")]);
    m_global_table_status_isSet = !json[QString("GlobalTableStatus")].isNull() && m_global_table_status_isValid;

    m_global_table_name_isValid = ::OpenAPI::fromJsonValue(m_global_table_name, json[QString("GlobalTableName")]);
    m_global_table_name_isSet = !json[QString("GlobalTableName")].isNull() && m_global_table_name_isValid;
}

QString OAICreateGlobalTableOutput_GlobalTableDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGlobalTableOutput_GlobalTableDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_replication_group.isSet()) {
        obj.insert(QString("ReplicationGroup"), ::OpenAPI::toJsonValue(m_replication_group));
    }
    if (m_global_table_arn_isSet) {
        obj.insert(QString("GlobalTableArn"), ::OpenAPI::toJsonValue(m_global_table_arn));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("CreationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_global_table_status.isSet()) {
        obj.insert(QString("GlobalTableStatus"), ::OpenAPI::toJsonValue(m_global_table_status));
    }
    if (m_global_table_name_isSet) {
        obj.insert(QString("GlobalTableName"), ::OpenAPI::toJsonValue(m_global_table_name));
    }
    return obj;
}

QList OAICreateGlobalTableOutput_GlobalTableDescription::getReplicationGroup() const {
    return m_replication_group;
}
void OAICreateGlobalTableOutput_GlobalTableDescription::setReplicationGroup(const QList &replication_group) {
    m_replication_group = replication_group;
    m_replication_group_isSet = true;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_replication_group_Set() const{
    return m_replication_group_isSet;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_replication_group_Valid() const{
    return m_replication_group_isValid;
}

QString OAICreateGlobalTableOutput_GlobalTableDescription::getGlobalTableArn() const {
    return m_global_table_arn;
}
void OAICreateGlobalTableOutput_GlobalTableDescription::setGlobalTableArn(const QString &global_table_arn) {
    m_global_table_arn = global_table_arn;
    m_global_table_arn_isSet = true;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_global_table_arn_Set() const{
    return m_global_table_arn_isSet;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_global_table_arn_Valid() const{
    return m_global_table_arn_isValid;
}

QDateTime OAICreateGlobalTableOutput_GlobalTableDescription::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAICreateGlobalTableOutput_GlobalTableDescription::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

OAIGlobalTableStatus OAICreateGlobalTableOutput_GlobalTableDescription::getGlobalTableStatus() const {
    return m_global_table_status;
}
void OAICreateGlobalTableOutput_GlobalTableDescription::setGlobalTableStatus(const OAIGlobalTableStatus &global_table_status) {
    m_global_table_status = global_table_status;
    m_global_table_status_isSet = true;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_global_table_status_Set() const{
    return m_global_table_status_isSet;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_global_table_status_Valid() const{
    return m_global_table_status_isValid;
}

QString OAICreateGlobalTableOutput_GlobalTableDescription::getGlobalTableName() const {
    return m_global_table_name;
}
void OAICreateGlobalTableOutput_GlobalTableDescription::setGlobalTableName(const QString &global_table_name) {
    m_global_table_name = global_table_name;
    m_global_table_name_isSet = true;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_global_table_name_Set() const{
    return m_global_table_name_isSet;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::is_global_table_name_Valid() const{
    return m_global_table_name_isValid;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replication_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGlobalTableOutput_GlobalTableDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
