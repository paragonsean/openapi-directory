/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTableInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTableInput::OAIImportTableInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTableInput::OAIImportTableInput() {
    this->initializeModel();
}

OAIImportTableInput::~OAIImportTableInput() {}

void OAIImportTableInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_s3_bucket_source_isSet = false;
    m_s3_bucket_source_isValid = false;

    m_input_format_isSet = false;
    m_input_format_isValid = false;

    m_input_format_options_isSet = false;
    m_input_format_options_isValid = false;

    m_input_compression_type_isSet = false;
    m_input_compression_type_isValid = false;

    m_table_creation_parameters_isSet = false;
    m_table_creation_parameters_isValid = false;
}

void OAIImportTableInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTableInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_s3_bucket_source_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_source, json[QString("S3BucketSource")]);
    m_s3_bucket_source_isSet = !json[QString("S3BucketSource")].isNull() && m_s3_bucket_source_isValid;

    m_input_format_isValid = ::OpenAPI::fromJsonValue(m_input_format, json[QString("InputFormat")]);
    m_input_format_isSet = !json[QString("InputFormat")].isNull() && m_input_format_isValid;

    m_input_format_options_isValid = ::OpenAPI::fromJsonValue(m_input_format_options, json[QString("InputFormatOptions")]);
    m_input_format_options_isSet = !json[QString("InputFormatOptions")].isNull() && m_input_format_options_isValid;

    m_input_compression_type_isValid = ::OpenAPI::fromJsonValue(m_input_compression_type, json[QString("InputCompressionType")]);
    m_input_compression_type_isSet = !json[QString("InputCompressionType")].isNull() && m_input_compression_type_isValid;

    m_table_creation_parameters_isValid = ::OpenAPI::fromJsonValue(m_table_creation_parameters, json[QString("TableCreationParameters")]);
    m_table_creation_parameters_isSet = !json[QString("TableCreationParameters")].isNull() && m_table_creation_parameters_isValid;
}

QString OAIImportTableInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTableInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_s3_bucket_source.isSet()) {
        obj.insert(QString("S3BucketSource"), ::OpenAPI::toJsonValue(m_s3_bucket_source));
    }
    if (m_input_format.isSet()) {
        obj.insert(QString("InputFormat"), ::OpenAPI::toJsonValue(m_input_format));
    }
    if (m_input_format_options.isSet()) {
        obj.insert(QString("InputFormatOptions"), ::OpenAPI::toJsonValue(m_input_format_options));
    }
    if (m_input_compression_type.isSet()) {
        obj.insert(QString("InputCompressionType"), ::OpenAPI::toJsonValue(m_input_compression_type));
    }
    if (m_table_creation_parameters.isSet()) {
        obj.insert(QString("TableCreationParameters"), ::OpenAPI::toJsonValue(m_table_creation_parameters));
    }
    return obj;
}

QString OAIImportTableInput::getClientToken() const {
    return m_client_token;
}
void OAIImportTableInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIImportTableInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIImportTableInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIImportTableInput_S3BucketSource OAIImportTableInput::getS3BucketSource() const {
    return m_s3_bucket_source;
}
void OAIImportTableInput::setS3BucketSource(const OAIImportTableInput_S3BucketSource &s3_bucket_source) {
    m_s3_bucket_source = s3_bucket_source;
    m_s3_bucket_source_isSet = true;
}

bool OAIImportTableInput::is_s3_bucket_source_Set() const{
    return m_s3_bucket_source_isSet;
}

bool OAIImportTableInput::is_s3_bucket_source_Valid() const{
    return m_s3_bucket_source_isValid;
}

OAIInputFormat OAIImportTableInput::getInputFormat() const {
    return m_input_format;
}
void OAIImportTableInput::setInputFormat(const OAIInputFormat &input_format) {
    m_input_format = input_format;
    m_input_format_isSet = true;
}

bool OAIImportTableInput::is_input_format_Set() const{
    return m_input_format_isSet;
}

bool OAIImportTableInput::is_input_format_Valid() const{
    return m_input_format_isValid;
}

OAIImportTableInput_InputFormatOptions OAIImportTableInput::getInputFormatOptions() const {
    return m_input_format_options;
}
void OAIImportTableInput::setInputFormatOptions(const OAIImportTableInput_InputFormatOptions &input_format_options) {
    m_input_format_options = input_format_options;
    m_input_format_options_isSet = true;
}

bool OAIImportTableInput::is_input_format_options_Set() const{
    return m_input_format_options_isSet;
}

bool OAIImportTableInput::is_input_format_options_Valid() const{
    return m_input_format_options_isValid;
}

OAIInputCompressionType OAIImportTableInput::getInputCompressionType() const {
    return m_input_compression_type;
}
void OAIImportTableInput::setInputCompressionType(const OAIInputCompressionType &input_compression_type) {
    m_input_compression_type = input_compression_type;
    m_input_compression_type_isSet = true;
}

bool OAIImportTableInput::is_input_compression_type_Set() const{
    return m_input_compression_type_isSet;
}

bool OAIImportTableInput::is_input_compression_type_Valid() const{
    return m_input_compression_type_isValid;
}

OAIImportTableInput_TableCreationParameters OAIImportTableInput::getTableCreationParameters() const {
    return m_table_creation_parameters;
}
void OAIImportTableInput::setTableCreationParameters(const OAIImportTableInput_TableCreationParameters &table_creation_parameters) {
    m_table_creation_parameters = table_creation_parameters;
    m_table_creation_parameters_isSet = true;
}

bool OAIImportTableInput::is_table_creation_parameters_Set() const{
    return m_table_creation_parameters_isSet;
}

bool OAIImportTableInput::is_table_creation_parameters_Valid() const{
    return m_table_creation_parameters_isValid;
}

bool OAIImportTableInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_format_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_creation_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTableInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_source_isValid && m_input_format_isValid && m_table_creation_parameters_isValid && true;
}

} // namespace OpenAPI
