/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeysAndAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeysAndAttributes::OAIKeysAndAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeysAndAttributes::OAIKeysAndAttributes() {
    this->initializeModel();
}

OAIKeysAndAttributes::~OAIKeysAndAttributes() {}

void OAIKeysAndAttributes::initializeModel() {

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_attributes_to_get_isSet = false;
    m_attributes_to_get_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;

    m_projection_expression_isSet = false;
    m_projection_expression_isValid = false;

    m_expression_attribute_names_isSet = false;
    m_expression_attribute_names_isValid = false;
}

void OAIKeysAndAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeysAndAttributes::fromJsonObject(QJsonObject json) {

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("Keys")]);
    m_keys_isSet = !json[QString("Keys")].isNull() && m_keys_isValid;

    m_attributes_to_get_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_get, json[QString("AttributesToGet")]);
    m_attributes_to_get_isSet = !json[QString("AttributesToGet")].isNull() && m_attributes_to_get_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;

    m_projection_expression_isValid = ::OpenAPI::fromJsonValue(m_projection_expression, json[QString("ProjectionExpression")]);
    m_projection_expression_isSet = !json[QString("ProjectionExpression")].isNull() && m_projection_expression_isValid;

    m_expression_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_expression_attribute_names, json[QString("ExpressionAttributeNames")]);
    m_expression_attribute_names_isSet = !json[QString("ExpressionAttributeNames")].isNull() && m_expression_attribute_names_isValid;
}

QString OAIKeysAndAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeysAndAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_keys.isSet()) {
        obj.insert(QString("Keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_attributes_to_get.isSet()) {
        obj.insert(QString("AttributesToGet"), ::OpenAPI::toJsonValue(m_attributes_to_get));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    if (m_projection_expression_isSet) {
        obj.insert(QString("ProjectionExpression"), ::OpenAPI::toJsonValue(m_projection_expression));
    }
    if (m_expression_attribute_names.isSet()) {
        obj.insert(QString("ExpressionAttributeNames"), ::OpenAPI::toJsonValue(m_expression_attribute_names));
    }
    return obj;
}

QList OAIKeysAndAttributes::getKeys() const {
    return m_keys;
}
void OAIKeysAndAttributes::setKeys(const QList &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIKeysAndAttributes::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIKeysAndAttributes::is_keys_Valid() const{
    return m_keys_isValid;
}

QList OAIKeysAndAttributes::getAttributesToGet() const {
    return m_attributes_to_get;
}
void OAIKeysAndAttributes::setAttributesToGet(const QList &attributes_to_get) {
    m_attributes_to_get = attributes_to_get;
    m_attributes_to_get_isSet = true;
}

bool OAIKeysAndAttributes::is_attributes_to_get_Set() const{
    return m_attributes_to_get_isSet;
}

bool OAIKeysAndAttributes::is_attributes_to_get_Valid() const{
    return m_attributes_to_get_isValid;
}

bool OAIKeysAndAttributes::getConsistentRead() const {
    return m_consistent_read;
}
void OAIKeysAndAttributes::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIKeysAndAttributes::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIKeysAndAttributes::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

QString OAIKeysAndAttributes::getProjectionExpression() const {
    return m_projection_expression;
}
void OAIKeysAndAttributes::setProjectionExpression(const QString &projection_expression) {
    m_projection_expression = projection_expression;
    m_projection_expression_isSet = true;
}

bool OAIKeysAndAttributes::is_projection_expression_Set() const{
    return m_projection_expression_isSet;
}

bool OAIKeysAndAttributes::is_projection_expression_Valid() const{
    return m_projection_expression_isValid;
}

QMap OAIKeysAndAttributes::getExpressionAttributeNames() const {
    return m_expression_attribute_names;
}
void OAIKeysAndAttributes::setExpressionAttributeNames(const QMap &expression_attribute_names) {
    m_expression_attribute_names = expression_attribute_names;
    m_expression_attribute_names_isSet = true;
}

bool OAIKeysAndAttributes::is_expression_attribute_names_Set() const{
    return m_expression_attribute_names_isSet;
}

bool OAIKeysAndAttributes::is_expression_attribute_names_Valid() const{
    return m_expression_attribute_names_isValid;
}

bool OAIKeysAndAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_get.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeysAndAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keys_isValid && true;
}

} // namespace OpenAPI
