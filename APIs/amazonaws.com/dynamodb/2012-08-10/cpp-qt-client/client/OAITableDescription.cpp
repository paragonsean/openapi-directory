/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableDescription::OAITableDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableDescription::OAITableDescription() {
    this->initializeModel();
}

OAITableDescription::~OAITableDescription() {}

void OAITableDescription::initializeModel() {

    m_attribute_definitions_isSet = false;
    m_attribute_definitions_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_table_status_isSet = false;
    m_table_status_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_table_size_bytes_isSet = false;
    m_table_size_bytes_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_billing_mode_summary_isSet = false;
    m_billing_mode_summary_isValid = false;

    m_local_secondary_indexes_isSet = false;
    m_local_secondary_indexes_isValid = false;

    m_global_secondary_indexes_isSet = false;
    m_global_secondary_indexes_isValid = false;

    m_stream_specification_isSet = false;
    m_stream_specification_isValid = false;

    m_latest_stream_label_isSet = false;
    m_latest_stream_label_isValid = false;

    m_latest_stream_arn_isSet = false;
    m_latest_stream_arn_isValid = false;

    m_global_table_version_isSet = false;
    m_global_table_version_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_restore_summary_isSet = false;
    m_restore_summary_isValid = false;

    m_sse_description_isSet = false;
    m_sse_description_isValid = false;

    m_archival_summary_isSet = false;
    m_archival_summary_isValid = false;

    m_table_class_summary_isSet = false;
    m_table_class_summary_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;
}

void OAITableDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableDescription::fromJsonObject(QJsonObject json) {

    m_attribute_definitions_isValid = ::OpenAPI::fromJsonValue(m_attribute_definitions, json[QString("AttributeDefinitions")]);
    m_attribute_definitions_isSet = !json[QString("AttributeDefinitions")].isNull() && m_attribute_definitions_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_table_status_isValid = ::OpenAPI::fromJsonValue(m_table_status, json[QString("TableStatus")]);
    m_table_status_isSet = !json[QString("TableStatus")].isNull() && m_table_status_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("CreationDateTime")]);
    m_creation_date_time_isSet = !json[QString("CreationDateTime")].isNull() && m_creation_date_time_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_table_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_table_size_bytes, json[QString("TableSizeBytes")]);
    m_table_size_bytes_isSet = !json[QString("TableSizeBytes")].isNull() && m_table_size_bytes_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("TableId")]);
    m_table_id_isSet = !json[QString("TableId")].isNull() && m_table_id_isValid;

    m_billing_mode_summary_isValid = ::OpenAPI::fromJsonValue(m_billing_mode_summary, json[QString("BillingModeSummary")]);
    m_billing_mode_summary_isSet = !json[QString("BillingModeSummary")].isNull() && m_billing_mode_summary_isValid;

    m_local_secondary_indexes_isValid = ::OpenAPI::fromJsonValue(m_local_secondary_indexes, json[QString("LocalSecondaryIndexes")]);
    m_local_secondary_indexes_isSet = !json[QString("LocalSecondaryIndexes")].isNull() && m_local_secondary_indexes_isValid;

    m_global_secondary_indexes_isValid = ::OpenAPI::fromJsonValue(m_global_secondary_indexes, json[QString("GlobalSecondaryIndexes")]);
    m_global_secondary_indexes_isSet = !json[QString("GlobalSecondaryIndexes")].isNull() && m_global_secondary_indexes_isValid;

    m_stream_specification_isValid = ::OpenAPI::fromJsonValue(m_stream_specification, json[QString("StreamSpecification")]);
    m_stream_specification_isSet = !json[QString("StreamSpecification")].isNull() && m_stream_specification_isValid;

    m_latest_stream_label_isValid = ::OpenAPI::fromJsonValue(m_latest_stream_label, json[QString("LatestStreamLabel")]);
    m_latest_stream_label_isSet = !json[QString("LatestStreamLabel")].isNull() && m_latest_stream_label_isValid;

    m_latest_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_latest_stream_arn, json[QString("LatestStreamArn")]);
    m_latest_stream_arn_isSet = !json[QString("LatestStreamArn")].isNull() && m_latest_stream_arn_isValid;

    m_global_table_version_isValid = ::OpenAPI::fromJsonValue(m_global_table_version, json[QString("GlobalTableVersion")]);
    m_global_table_version_isSet = !json[QString("GlobalTableVersion")].isNull() && m_global_table_version_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("Replicas")]);
    m_replicas_isSet = !json[QString("Replicas")].isNull() && m_replicas_isValid;

    m_restore_summary_isValid = ::OpenAPI::fromJsonValue(m_restore_summary, json[QString("RestoreSummary")]);
    m_restore_summary_isSet = !json[QString("RestoreSummary")].isNull() && m_restore_summary_isValid;

    m_sse_description_isValid = ::OpenAPI::fromJsonValue(m_sse_description, json[QString("SSEDescription")]);
    m_sse_description_isSet = !json[QString("SSEDescription")].isNull() && m_sse_description_isValid;

    m_archival_summary_isValid = ::OpenAPI::fromJsonValue(m_archival_summary, json[QString("ArchivalSummary")]);
    m_archival_summary_isSet = !json[QString("ArchivalSummary")].isNull() && m_archival_summary_isValid;

    m_table_class_summary_isValid = ::OpenAPI::fromJsonValue(m_table_class_summary, json[QString("TableClassSummary")]);
    m_table_class_summary_isSet = !json[QString("TableClassSummary")].isNull() && m_table_class_summary_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("DeletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("DeletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;
}

QString OAITableDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_definitions.isSet()) {
        obj.insert(QString("AttributeDefinitions"), ::OpenAPI::toJsonValue(m_attribute_definitions));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_table_status.isSet()) {
        obj.insert(QString("TableStatus"), ::OpenAPI::toJsonValue(m_table_status));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("CreationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_table_size_bytes_isSet) {
        obj.insert(QString("TableSizeBytes"), ::OpenAPI::toJsonValue(m_table_size_bytes));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("TableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_billing_mode_summary.isSet()) {
        obj.insert(QString("BillingModeSummary"), ::OpenAPI::toJsonValue(m_billing_mode_summary));
    }
    if (m_local_secondary_indexes.isSet()) {
        obj.insert(QString("LocalSecondaryIndexes"), ::OpenAPI::toJsonValue(m_local_secondary_indexes));
    }
    if (m_global_secondary_indexes.isSet()) {
        obj.insert(QString("GlobalSecondaryIndexes"), ::OpenAPI::toJsonValue(m_global_secondary_indexes));
    }
    if (m_stream_specification.isSet()) {
        obj.insert(QString("StreamSpecification"), ::OpenAPI::toJsonValue(m_stream_specification));
    }
    if (m_latest_stream_label_isSet) {
        obj.insert(QString("LatestStreamLabel"), ::OpenAPI::toJsonValue(m_latest_stream_label));
    }
    if (m_latest_stream_arn_isSet) {
        obj.insert(QString("LatestStreamArn"), ::OpenAPI::toJsonValue(m_latest_stream_arn));
    }
    if (m_global_table_version_isSet) {
        obj.insert(QString("GlobalTableVersion"), ::OpenAPI::toJsonValue(m_global_table_version));
    }
    if (m_replicas.isSet()) {
        obj.insert(QString("Replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_restore_summary.isSet()) {
        obj.insert(QString("RestoreSummary"), ::OpenAPI::toJsonValue(m_restore_summary));
    }
    if (m_sse_description.isSet()) {
        obj.insert(QString("SSEDescription"), ::OpenAPI::toJsonValue(m_sse_description));
    }
    if (m_archival_summary.isSet()) {
        obj.insert(QString("ArchivalSummary"), ::OpenAPI::toJsonValue(m_archival_summary));
    }
    if (m_table_class_summary.isSet()) {
        obj.insert(QString("TableClassSummary"), ::OpenAPI::toJsonValue(m_table_class_summary));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("DeletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    return obj;
}

QList OAITableDescription::getAttributeDefinitions() const {
    return m_attribute_definitions;
}
void OAITableDescription::setAttributeDefinitions(const QList &attribute_definitions) {
    m_attribute_definitions = attribute_definitions;
    m_attribute_definitions_isSet = true;
}

bool OAITableDescription::is_attribute_definitions_Set() const{
    return m_attribute_definitions_isSet;
}

bool OAITableDescription::is_attribute_definitions_Valid() const{
    return m_attribute_definitions_isValid;
}

QString OAITableDescription::getTableName() const {
    return m_table_name;
}
void OAITableDescription::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAITableDescription::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAITableDescription::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QList OAITableDescription::getKeySchema() const {
    return m_key_schema;
}
void OAITableDescription::setKeySchema(const QList &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAITableDescription::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAITableDescription::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

OAITableStatus OAITableDescription::getTableStatus() const {
    return m_table_status;
}
void OAITableDescription::setTableStatus(const OAITableStatus &table_status) {
    m_table_status = table_status;
    m_table_status_isSet = true;
}

bool OAITableDescription::is_table_status_Set() const{
    return m_table_status_isSet;
}

bool OAITableDescription::is_table_status_Valid() const{
    return m_table_status_isValid;
}

QDateTime OAITableDescription::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAITableDescription::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAITableDescription::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAITableDescription::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

OAITableDescription_ProvisionedThroughput OAITableDescription::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAITableDescription::setProvisionedThroughput(const OAITableDescription_ProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAITableDescription::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAITableDescription::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

qint32 OAITableDescription::getTableSizeBytes() const {
    return m_table_size_bytes;
}
void OAITableDescription::setTableSizeBytes(const qint32 &table_size_bytes) {
    m_table_size_bytes = table_size_bytes;
    m_table_size_bytes_isSet = true;
}

bool OAITableDescription::is_table_size_bytes_Set() const{
    return m_table_size_bytes_isSet;
}

bool OAITableDescription::is_table_size_bytes_Valid() const{
    return m_table_size_bytes_isValid;
}

qint32 OAITableDescription::getItemCount() const {
    return m_item_count;
}
void OAITableDescription::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAITableDescription::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAITableDescription::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QString OAITableDescription::getTableArn() const {
    return m_table_arn;
}
void OAITableDescription::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAITableDescription::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAITableDescription::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

QString OAITableDescription::getTableId() const {
    return m_table_id;
}
void OAITableDescription::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAITableDescription::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAITableDescription::is_table_id_Valid() const{
    return m_table_id_isValid;
}

OAITableDescription_BillingModeSummary OAITableDescription::getBillingModeSummary() const {
    return m_billing_mode_summary;
}
void OAITableDescription::setBillingModeSummary(const OAITableDescription_BillingModeSummary &billing_mode_summary) {
    m_billing_mode_summary = billing_mode_summary;
    m_billing_mode_summary_isSet = true;
}

bool OAITableDescription::is_billing_mode_summary_Set() const{
    return m_billing_mode_summary_isSet;
}

bool OAITableDescription::is_billing_mode_summary_Valid() const{
    return m_billing_mode_summary_isValid;
}

QList OAITableDescription::getLocalSecondaryIndexes() const {
    return m_local_secondary_indexes;
}
void OAITableDescription::setLocalSecondaryIndexes(const QList &local_secondary_indexes) {
    m_local_secondary_indexes = local_secondary_indexes;
    m_local_secondary_indexes_isSet = true;
}

bool OAITableDescription::is_local_secondary_indexes_Set() const{
    return m_local_secondary_indexes_isSet;
}

bool OAITableDescription::is_local_secondary_indexes_Valid() const{
    return m_local_secondary_indexes_isValid;
}

QList OAITableDescription::getGlobalSecondaryIndexes() const {
    return m_global_secondary_indexes;
}
void OAITableDescription::setGlobalSecondaryIndexes(const QList &global_secondary_indexes) {
    m_global_secondary_indexes = global_secondary_indexes;
    m_global_secondary_indexes_isSet = true;
}

bool OAITableDescription::is_global_secondary_indexes_Set() const{
    return m_global_secondary_indexes_isSet;
}

bool OAITableDescription::is_global_secondary_indexes_Valid() const{
    return m_global_secondary_indexes_isValid;
}

OAITableDescription_StreamSpecification OAITableDescription::getStreamSpecification() const {
    return m_stream_specification;
}
void OAITableDescription::setStreamSpecification(const OAITableDescription_StreamSpecification &stream_specification) {
    m_stream_specification = stream_specification;
    m_stream_specification_isSet = true;
}

bool OAITableDescription::is_stream_specification_Set() const{
    return m_stream_specification_isSet;
}

bool OAITableDescription::is_stream_specification_Valid() const{
    return m_stream_specification_isValid;
}

QString OAITableDescription::getLatestStreamLabel() const {
    return m_latest_stream_label;
}
void OAITableDescription::setLatestStreamLabel(const QString &latest_stream_label) {
    m_latest_stream_label = latest_stream_label;
    m_latest_stream_label_isSet = true;
}

bool OAITableDescription::is_latest_stream_label_Set() const{
    return m_latest_stream_label_isSet;
}

bool OAITableDescription::is_latest_stream_label_Valid() const{
    return m_latest_stream_label_isValid;
}

QString OAITableDescription::getLatestStreamArn() const {
    return m_latest_stream_arn;
}
void OAITableDescription::setLatestStreamArn(const QString &latest_stream_arn) {
    m_latest_stream_arn = latest_stream_arn;
    m_latest_stream_arn_isSet = true;
}

bool OAITableDescription::is_latest_stream_arn_Set() const{
    return m_latest_stream_arn_isSet;
}

bool OAITableDescription::is_latest_stream_arn_Valid() const{
    return m_latest_stream_arn_isValid;
}

QString OAITableDescription::getGlobalTableVersion() const {
    return m_global_table_version;
}
void OAITableDescription::setGlobalTableVersion(const QString &global_table_version) {
    m_global_table_version = global_table_version;
    m_global_table_version_isSet = true;
}

bool OAITableDescription::is_global_table_version_Set() const{
    return m_global_table_version_isSet;
}

bool OAITableDescription::is_global_table_version_Valid() const{
    return m_global_table_version_isValid;
}

QList OAITableDescription::getReplicas() const {
    return m_replicas;
}
void OAITableDescription::setReplicas(const QList &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAITableDescription::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAITableDescription::is_replicas_Valid() const{
    return m_replicas_isValid;
}

OAITableDescription_RestoreSummary OAITableDescription::getRestoreSummary() const {
    return m_restore_summary;
}
void OAITableDescription::setRestoreSummary(const OAITableDescription_RestoreSummary &restore_summary) {
    m_restore_summary = restore_summary;
    m_restore_summary_isSet = true;
}

bool OAITableDescription::is_restore_summary_Set() const{
    return m_restore_summary_isSet;
}

bool OAITableDescription::is_restore_summary_Valid() const{
    return m_restore_summary_isValid;
}

OAITableDescription_SSEDescription OAITableDescription::getSseDescription() const {
    return m_sse_description;
}
void OAITableDescription::setSseDescription(const OAITableDescription_SSEDescription &sse_description) {
    m_sse_description = sse_description;
    m_sse_description_isSet = true;
}

bool OAITableDescription::is_sse_description_Set() const{
    return m_sse_description_isSet;
}

bool OAITableDescription::is_sse_description_Valid() const{
    return m_sse_description_isValid;
}

OAITableDescription_ArchivalSummary OAITableDescription::getArchivalSummary() const {
    return m_archival_summary;
}
void OAITableDescription::setArchivalSummary(const OAITableDescription_ArchivalSummary &archival_summary) {
    m_archival_summary = archival_summary;
    m_archival_summary_isSet = true;
}

bool OAITableDescription::is_archival_summary_Set() const{
    return m_archival_summary_isSet;
}

bool OAITableDescription::is_archival_summary_Valid() const{
    return m_archival_summary_isValid;
}

OAITableDescription_TableClassSummary OAITableDescription::getTableClassSummary() const {
    return m_table_class_summary;
}
void OAITableDescription::setTableClassSummary(const OAITableDescription_TableClassSummary &table_class_summary) {
    m_table_class_summary = table_class_summary;
    m_table_class_summary_isSet = true;
}

bool OAITableDescription::is_table_class_summary_Set() const{
    return m_table_class_summary_isSet;
}

bool OAITableDescription::is_table_class_summary_Valid() const{
    return m_table_class_summary_isValid;
}

bool OAITableDescription::getDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAITableDescription::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAITableDescription::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAITableDescription::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

bool OAITableDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_mode_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_secondary_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_secondary_indexes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_stream_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_table_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archival_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_class_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
