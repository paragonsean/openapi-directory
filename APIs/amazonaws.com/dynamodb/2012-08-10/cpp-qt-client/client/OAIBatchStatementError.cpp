/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchStatementError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchStatementError::OAIBatchStatementError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchStatementError::OAIBatchStatementError() {
    this->initializeModel();
}

OAIBatchStatementError::~OAIBatchStatementError() {}

void OAIBatchStatementError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;
}

void OAIBatchStatementError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchStatementError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;
}

QString OAIBatchStatementError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchStatementError::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_item.isSet()) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    return obj;
}

OAIBatchStatementErrorCodeEnum OAIBatchStatementError::getCode() const {
    return m_code;
}
void OAIBatchStatementError::setCode(const OAIBatchStatementErrorCodeEnum &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBatchStatementError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBatchStatementError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIBatchStatementError::getMessage() const {
    return m_message;
}
void OAIBatchStatementError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBatchStatementError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBatchStatementError::is_message_Valid() const{
    return m_message_isValid;
}

QMap OAIBatchStatementError::getItem() const {
    return m_item;
}
void OAIBatchStatementError::setItem(const QMap &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIBatchStatementError::is_item_Set() const{
    return m_item_isSet;
}

bool OAIBatchStatementError::is_item_Valid() const{
    return m_item_isValid;
}

bool OAIBatchStatementError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchStatementError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
