# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGlobalTableInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_table_name: str=None, replication_group: List=None):
        """CreateGlobalTableInput - a model defined in OpenAPI

        :param global_table_name: The global_table_name of this CreateGlobalTableInput.
        :param replication_group: The replication_group of this CreateGlobalTableInput.
        """
        self.openapi_types = {
            'global_table_name': str,
            'replication_group': List
        }

        self.attribute_map = {
            'global_table_name': 'GlobalTableName',
            'replication_group': 'ReplicationGroup'
        }

        self._global_table_name = global_table_name
        self._replication_group = replication_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGlobalTableInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGlobalTableInput of this CreateGlobalTableInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_table_name(self):
        """Gets the global_table_name of this CreateGlobalTableInput.


        :return: The global_table_name of this CreateGlobalTableInput.
        :rtype: str
        """
        return self._global_table_name

    @global_table_name.setter
    def global_table_name(self, global_table_name):
        """Sets the global_table_name of this CreateGlobalTableInput.


        :param global_table_name: The global_table_name of this CreateGlobalTableInput.
        :type global_table_name: str
        """
        if global_table_name is None:
            raise ValueError("Invalid value for `global_table_name`, must not be `None`")

        self._global_table_name = global_table_name

    @property
    def replication_group(self):
        """Gets the replication_group of this CreateGlobalTableInput.


        :return: The replication_group of this CreateGlobalTableInput.
        :rtype: List
        """
        return self._replication_group

    @replication_group.setter
    def replication_group(self, replication_group):
        """Sets the replication_group of this CreateGlobalTableInput.


        :param replication_group: The replication_group of this CreateGlobalTableInput.
        :type replication_group: List
        """
        if replication_group is None:
            raise ValueError("Invalid value for `replication_group`, must not be `None`")

        self._replication_group = replication_group
