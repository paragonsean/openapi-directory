# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTableInputProvisionedThroughput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read_capacity_units: int=None, write_capacity_units: int=None):
        """UpdateTableInputProvisionedThroughput - a model defined in OpenAPI

        :param read_capacity_units: The read_capacity_units of this UpdateTableInputProvisionedThroughput.
        :param write_capacity_units: The write_capacity_units of this UpdateTableInputProvisionedThroughput.
        """
        self.openapi_types = {
            'read_capacity_units': int,
            'write_capacity_units': int
        }

        self.attribute_map = {
            'read_capacity_units': 'ReadCapacityUnits',
            'write_capacity_units': 'WriteCapacityUnits'
        }

        self._read_capacity_units = read_capacity_units
        self._write_capacity_units = write_capacity_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTableInputProvisionedThroughput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTableInput_ProvisionedThroughput of this UpdateTableInputProvisionedThroughput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_capacity_units(self):
        """Gets the read_capacity_units of this UpdateTableInputProvisionedThroughput.


        :return: The read_capacity_units of this UpdateTableInputProvisionedThroughput.
        :rtype: int
        """
        return self._read_capacity_units

    @read_capacity_units.setter
    def read_capacity_units(self, read_capacity_units):
        """Sets the read_capacity_units of this UpdateTableInputProvisionedThroughput.


        :param read_capacity_units: The read_capacity_units of this UpdateTableInputProvisionedThroughput.
        :type read_capacity_units: int
        """
        if read_capacity_units is None:
            raise ValueError("Invalid value for `read_capacity_units`, must not be `None`")

        self._read_capacity_units = read_capacity_units

    @property
    def write_capacity_units(self):
        """Gets the write_capacity_units of this UpdateTableInputProvisionedThroughput.


        :return: The write_capacity_units of this UpdateTableInputProvisionedThroughput.
        :rtype: int
        """
        return self._write_capacity_units

    @write_capacity_units.setter
    def write_capacity_units(self, write_capacity_units):
        """Sets the write_capacity_units of this UpdateTableInputProvisionedThroughput.


        :param write_capacity_units: The write_capacity_units of this UpdateTableInputProvisionedThroughput.
        :type write_capacity_units: int
        """
        if write_capacity_units is None:
            raise ValueError("Invalid value for `write_capacity_units`, must not be `None`")

        self._write_capacity_units = write_capacity_units
