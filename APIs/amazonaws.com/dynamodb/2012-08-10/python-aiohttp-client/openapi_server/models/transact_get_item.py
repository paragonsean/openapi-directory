# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transact_get_item_get import TransactGetItemGet
from openapi_server import util


class TransactGetItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, get: TransactGetItemGet=None):
        """TransactGetItem - a model defined in OpenAPI

        :param get: The get of this TransactGetItem.
        """
        self.openapi_types = {
            'get': TransactGetItemGet
        }

        self.attribute_map = {
            'get': 'Get'
        }

        self._get = get

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactGetItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactGetItem of this TransactGetItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def get(self):
        """Gets the get of this TransactGetItem.


        :return: The get of this TransactGetItem.
        :rtype: TransactGetItemGet
        """
        return self._get

    @get.setter
    def get(self, get):
        """Sets the get of this TransactGetItem.


        :param get: The get of this TransactGetItem.
        :type get: TransactGetItemGet
        """
        if get is None:
            raise ValueError("Invalid value for `get`, must not be `None`")

        self._get = get
