# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_status import ImportStatus
from openapi_server.models.import_table_description_input_format_options import ImportTableDescriptionInputFormatOptions
from openapi_server.models.import_table_description_s3_bucket_source import ImportTableDescriptionS3BucketSource
from openapi_server.models.import_table_description_table_creation_parameters import ImportTableDescriptionTableCreationParameters
from openapi_server.models.input_compression_type import InputCompressionType
from openapi_server.models.input_format import InputFormat
from openapi_server import util


class ImportTableDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, import_arn: str=None, import_status: ImportStatus=None, table_arn: str=None, table_id: str=None, client_token: str=None, s3_bucket_source: ImportTableDescriptionS3BucketSource=None, error_count: int=None, cloud_watch_log_group_arn: str=None, input_format: InputFormat=None, input_format_options: ImportTableDescriptionInputFormatOptions=None, input_compression_type: InputCompressionType=None, table_creation_parameters: ImportTableDescriptionTableCreationParameters=None, start_time: datetime=None, end_time: datetime=None, processed_size_bytes: int=None, processed_item_count: int=None, imported_item_count: int=None, failure_code: str=None, failure_message: str=None):
        """ImportTableDescription - a model defined in OpenAPI

        :param import_arn: The import_arn of this ImportTableDescription.
        :param import_status: The import_status of this ImportTableDescription.
        :param table_arn: The table_arn of this ImportTableDescription.
        :param table_id: The table_id of this ImportTableDescription.
        :param client_token: The client_token of this ImportTableDescription.
        :param s3_bucket_source: The s3_bucket_source of this ImportTableDescription.
        :param error_count: The error_count of this ImportTableDescription.
        :param cloud_watch_log_group_arn: The cloud_watch_log_group_arn of this ImportTableDescription.
        :param input_format: The input_format of this ImportTableDescription.
        :param input_format_options: The input_format_options of this ImportTableDescription.
        :param input_compression_type: The input_compression_type of this ImportTableDescription.
        :param table_creation_parameters: The table_creation_parameters of this ImportTableDescription.
        :param start_time: The start_time of this ImportTableDescription.
        :param end_time: The end_time of this ImportTableDescription.
        :param processed_size_bytes: The processed_size_bytes of this ImportTableDescription.
        :param processed_item_count: The processed_item_count of this ImportTableDescription.
        :param imported_item_count: The imported_item_count of this ImportTableDescription.
        :param failure_code: The failure_code of this ImportTableDescription.
        :param failure_message: The failure_message of this ImportTableDescription.
        """
        self.openapi_types = {
            'import_arn': str,
            'import_status': ImportStatus,
            'table_arn': str,
            'table_id': str,
            'client_token': str,
            's3_bucket_source': ImportTableDescriptionS3BucketSource,
            'error_count': int,
            'cloud_watch_log_group_arn': str,
            'input_format': InputFormat,
            'input_format_options': ImportTableDescriptionInputFormatOptions,
            'input_compression_type': InputCompressionType,
            'table_creation_parameters': ImportTableDescriptionTableCreationParameters,
            'start_time': datetime,
            'end_time': datetime,
            'processed_size_bytes': int,
            'processed_item_count': int,
            'imported_item_count': int,
            'failure_code': str,
            'failure_message': str
        }

        self.attribute_map = {
            'import_arn': 'ImportArn',
            'import_status': 'ImportStatus',
            'table_arn': 'TableArn',
            'table_id': 'TableId',
            'client_token': 'ClientToken',
            's3_bucket_source': 'S3BucketSource',
            'error_count': 'ErrorCount',
            'cloud_watch_log_group_arn': 'CloudWatchLogGroupArn',
            'input_format': 'InputFormat',
            'input_format_options': 'InputFormatOptions',
            'input_compression_type': 'InputCompressionType',
            'table_creation_parameters': 'TableCreationParameters',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'processed_size_bytes': 'ProcessedSizeBytes',
            'processed_item_count': 'ProcessedItemCount',
            'imported_item_count': 'ImportedItemCount',
            'failure_code': 'FailureCode',
            'failure_message': 'FailureMessage'
        }

        self._import_arn = import_arn
        self._import_status = import_status
        self._table_arn = table_arn
        self._table_id = table_id
        self._client_token = client_token
        self._s3_bucket_source = s3_bucket_source
        self._error_count = error_count
        self._cloud_watch_log_group_arn = cloud_watch_log_group_arn
        self._input_format = input_format
        self._input_format_options = input_format_options
        self._input_compression_type = input_compression_type
        self._table_creation_parameters = table_creation_parameters
        self._start_time = start_time
        self._end_time = end_time
        self._processed_size_bytes = processed_size_bytes
        self._processed_item_count = processed_item_count
        self._imported_item_count = imported_item_count
        self._failure_code = failure_code
        self._failure_message = failure_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTableDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportTableDescription of this ImportTableDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def import_arn(self):
        """Gets the import_arn of this ImportTableDescription.


        :return: The import_arn of this ImportTableDescription.
        :rtype: str
        """
        return self._import_arn

    @import_arn.setter
    def import_arn(self, import_arn):
        """Sets the import_arn of this ImportTableDescription.


        :param import_arn: The import_arn of this ImportTableDescription.
        :type import_arn: str
        """

        self._import_arn = import_arn

    @property
    def import_status(self):
        """Gets the import_status of this ImportTableDescription.


        :return: The import_status of this ImportTableDescription.
        :rtype: ImportStatus
        """
        return self._import_status

    @import_status.setter
    def import_status(self, import_status):
        """Sets the import_status of this ImportTableDescription.


        :param import_status: The import_status of this ImportTableDescription.
        :type import_status: ImportStatus
        """

        self._import_status = import_status

    @property
    def table_arn(self):
        """Gets the table_arn of this ImportTableDescription.


        :return: The table_arn of this ImportTableDescription.
        :rtype: str
        """
        return self._table_arn

    @table_arn.setter
    def table_arn(self, table_arn):
        """Sets the table_arn of this ImportTableDescription.


        :param table_arn: The table_arn of this ImportTableDescription.
        :type table_arn: str
        """

        self._table_arn = table_arn

    @property
    def table_id(self):
        """Gets the table_id of this ImportTableDescription.


        :return: The table_id of this ImportTableDescription.
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this ImportTableDescription.


        :param table_id: The table_id of this ImportTableDescription.
        :type table_id: str
        """

        self._table_id = table_id

    @property
    def client_token(self):
        """Gets the client_token of this ImportTableDescription.


        :return: The client_token of this ImportTableDescription.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this ImportTableDescription.


        :param client_token: The client_token of this ImportTableDescription.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def s3_bucket_source(self):
        """Gets the s3_bucket_source of this ImportTableDescription.


        :return: The s3_bucket_source of this ImportTableDescription.
        :rtype: ImportTableDescriptionS3BucketSource
        """
        return self._s3_bucket_source

    @s3_bucket_source.setter
    def s3_bucket_source(self, s3_bucket_source):
        """Sets the s3_bucket_source of this ImportTableDescription.


        :param s3_bucket_source: The s3_bucket_source of this ImportTableDescription.
        :type s3_bucket_source: ImportTableDescriptionS3BucketSource
        """

        self._s3_bucket_source = s3_bucket_source

    @property
    def error_count(self):
        """Gets the error_count of this ImportTableDescription.


        :return: The error_count of this ImportTableDescription.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this ImportTableDescription.


        :param error_count: The error_count of this ImportTableDescription.
        :type error_count: int
        """

        self._error_count = error_count

    @property
    def cloud_watch_log_group_arn(self):
        """Gets the cloud_watch_log_group_arn of this ImportTableDescription.


        :return: The cloud_watch_log_group_arn of this ImportTableDescription.
        :rtype: str
        """
        return self._cloud_watch_log_group_arn

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, cloud_watch_log_group_arn):
        """Sets the cloud_watch_log_group_arn of this ImportTableDescription.


        :param cloud_watch_log_group_arn: The cloud_watch_log_group_arn of this ImportTableDescription.
        :type cloud_watch_log_group_arn: str
        """

        self._cloud_watch_log_group_arn = cloud_watch_log_group_arn

    @property
    def input_format(self):
        """Gets the input_format of this ImportTableDescription.


        :return: The input_format of this ImportTableDescription.
        :rtype: InputFormat
        """
        return self._input_format

    @input_format.setter
    def input_format(self, input_format):
        """Sets the input_format of this ImportTableDescription.


        :param input_format: The input_format of this ImportTableDescription.
        :type input_format: InputFormat
        """

        self._input_format = input_format

    @property
    def input_format_options(self):
        """Gets the input_format_options of this ImportTableDescription.


        :return: The input_format_options of this ImportTableDescription.
        :rtype: ImportTableDescriptionInputFormatOptions
        """
        return self._input_format_options

    @input_format_options.setter
    def input_format_options(self, input_format_options):
        """Sets the input_format_options of this ImportTableDescription.


        :param input_format_options: The input_format_options of this ImportTableDescription.
        :type input_format_options: ImportTableDescriptionInputFormatOptions
        """

        self._input_format_options = input_format_options

    @property
    def input_compression_type(self):
        """Gets the input_compression_type of this ImportTableDescription.


        :return: The input_compression_type of this ImportTableDescription.
        :rtype: InputCompressionType
        """
        return self._input_compression_type

    @input_compression_type.setter
    def input_compression_type(self, input_compression_type):
        """Sets the input_compression_type of this ImportTableDescription.


        :param input_compression_type: The input_compression_type of this ImportTableDescription.
        :type input_compression_type: InputCompressionType
        """

        self._input_compression_type = input_compression_type

    @property
    def table_creation_parameters(self):
        """Gets the table_creation_parameters of this ImportTableDescription.


        :return: The table_creation_parameters of this ImportTableDescription.
        :rtype: ImportTableDescriptionTableCreationParameters
        """
        return self._table_creation_parameters

    @table_creation_parameters.setter
    def table_creation_parameters(self, table_creation_parameters):
        """Sets the table_creation_parameters of this ImportTableDescription.


        :param table_creation_parameters: The table_creation_parameters of this ImportTableDescription.
        :type table_creation_parameters: ImportTableDescriptionTableCreationParameters
        """

        self._table_creation_parameters = table_creation_parameters

    @property
    def start_time(self):
        """Gets the start_time of this ImportTableDescription.


        :return: The start_time of this ImportTableDescription.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ImportTableDescription.


        :param start_time: The start_time of this ImportTableDescription.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ImportTableDescription.


        :return: The end_time of this ImportTableDescription.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ImportTableDescription.


        :param end_time: The end_time of this ImportTableDescription.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def processed_size_bytes(self):
        """Gets the processed_size_bytes of this ImportTableDescription.


        :return: The processed_size_bytes of this ImportTableDescription.
        :rtype: int
        """
        return self._processed_size_bytes

    @processed_size_bytes.setter
    def processed_size_bytes(self, processed_size_bytes):
        """Sets the processed_size_bytes of this ImportTableDescription.


        :param processed_size_bytes: The processed_size_bytes of this ImportTableDescription.
        :type processed_size_bytes: int
        """

        self._processed_size_bytes = processed_size_bytes

    @property
    def processed_item_count(self):
        """Gets the processed_item_count of this ImportTableDescription.


        :return: The processed_item_count of this ImportTableDescription.
        :rtype: int
        """
        return self._processed_item_count

    @processed_item_count.setter
    def processed_item_count(self, processed_item_count):
        """Sets the processed_item_count of this ImportTableDescription.


        :param processed_item_count: The processed_item_count of this ImportTableDescription.
        :type processed_item_count: int
        """

        self._processed_item_count = processed_item_count

    @property
    def imported_item_count(self):
        """Gets the imported_item_count of this ImportTableDescription.


        :return: The imported_item_count of this ImportTableDescription.
        :rtype: int
        """
        return self._imported_item_count

    @imported_item_count.setter
    def imported_item_count(self, imported_item_count):
        """Sets the imported_item_count of this ImportTableDescription.


        :param imported_item_count: The imported_item_count of this ImportTableDescription.
        :type imported_item_count: int
        """

        self._imported_item_count = imported_item_count

    @property
    def failure_code(self):
        """Gets the failure_code of this ImportTableDescription.


        :return: The failure_code of this ImportTableDescription.
        :rtype: str
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this ImportTableDescription.


        :param failure_code: The failure_code of this ImportTableDescription.
        :type failure_code: str
        """

        self._failure_code = failure_code

    @property
    def failure_message(self):
        """Gets the failure_message of this ImportTableDescription.


        :return: The failure_message of this ImportTableDescription.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this ImportTableDescription.


        :param failure_message: The failure_message of this ImportTableDescription.
        :type failure_message: str
        """

        self._failure_message = failure_message
