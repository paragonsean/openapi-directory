# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_status import BackupStatus
from openapi_server.models.backup_type import BackupType
from openapi_server import util


class CreateBackupOutputBackupDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_arn: str=None, backup_name: str=None, backup_size_bytes: int=None, backup_status: BackupStatus=None, backup_type: BackupType=None, backup_creation_date_time: datetime=None, backup_expiry_date_time: datetime=None):
        """CreateBackupOutputBackupDetails - a model defined in OpenAPI

        :param backup_arn: The backup_arn of this CreateBackupOutputBackupDetails.
        :param backup_name: The backup_name of this CreateBackupOutputBackupDetails.
        :param backup_size_bytes: The backup_size_bytes of this CreateBackupOutputBackupDetails.
        :param backup_status: The backup_status of this CreateBackupOutputBackupDetails.
        :param backup_type: The backup_type of this CreateBackupOutputBackupDetails.
        :param backup_creation_date_time: The backup_creation_date_time of this CreateBackupOutputBackupDetails.
        :param backup_expiry_date_time: The backup_expiry_date_time of this CreateBackupOutputBackupDetails.
        """
        self.openapi_types = {
            'backup_arn': str,
            'backup_name': str,
            'backup_size_bytes': int,
            'backup_status': BackupStatus,
            'backup_type': BackupType,
            'backup_creation_date_time': datetime,
            'backup_expiry_date_time': datetime
        }

        self.attribute_map = {
            'backup_arn': 'BackupArn',
            'backup_name': 'BackupName',
            'backup_size_bytes': 'BackupSizeBytes',
            'backup_status': 'BackupStatus',
            'backup_type': 'BackupType',
            'backup_creation_date_time': 'BackupCreationDateTime',
            'backup_expiry_date_time': 'BackupExpiryDateTime'
        }

        self._backup_arn = backup_arn
        self._backup_name = backup_name
        self._backup_size_bytes = backup_size_bytes
        self._backup_status = backup_status
        self._backup_type = backup_type
        self._backup_creation_date_time = backup_creation_date_time
        self._backup_expiry_date_time = backup_expiry_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackupOutputBackupDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackupOutput_BackupDetails of this CreateBackupOutputBackupDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_arn(self):
        """Gets the backup_arn of this CreateBackupOutputBackupDetails.


        :return: The backup_arn of this CreateBackupOutputBackupDetails.
        :rtype: str
        """
        return self._backup_arn

    @backup_arn.setter
    def backup_arn(self, backup_arn):
        """Sets the backup_arn of this CreateBackupOutputBackupDetails.


        :param backup_arn: The backup_arn of this CreateBackupOutputBackupDetails.
        :type backup_arn: str
        """
        if backup_arn is None:
            raise ValueError("Invalid value for `backup_arn`, must not be `None`")

        self._backup_arn = backup_arn

    @property
    def backup_name(self):
        """Gets the backup_name of this CreateBackupOutputBackupDetails.


        :return: The backup_name of this CreateBackupOutputBackupDetails.
        :rtype: str
        """
        return self._backup_name

    @backup_name.setter
    def backup_name(self, backup_name):
        """Sets the backup_name of this CreateBackupOutputBackupDetails.


        :param backup_name: The backup_name of this CreateBackupOutputBackupDetails.
        :type backup_name: str
        """
        if backup_name is None:
            raise ValueError("Invalid value for `backup_name`, must not be `None`")

        self._backup_name = backup_name

    @property
    def backup_size_bytes(self):
        """Gets the backup_size_bytes of this CreateBackupOutputBackupDetails.


        :return: The backup_size_bytes of this CreateBackupOutputBackupDetails.
        :rtype: int
        """
        return self._backup_size_bytes

    @backup_size_bytes.setter
    def backup_size_bytes(self, backup_size_bytes):
        """Sets the backup_size_bytes of this CreateBackupOutputBackupDetails.


        :param backup_size_bytes: The backup_size_bytes of this CreateBackupOutputBackupDetails.
        :type backup_size_bytes: int
        """

        self._backup_size_bytes = backup_size_bytes

    @property
    def backup_status(self):
        """Gets the backup_status of this CreateBackupOutputBackupDetails.


        :return: The backup_status of this CreateBackupOutputBackupDetails.
        :rtype: BackupStatus
        """
        return self._backup_status

    @backup_status.setter
    def backup_status(self, backup_status):
        """Sets the backup_status of this CreateBackupOutputBackupDetails.


        :param backup_status: The backup_status of this CreateBackupOutputBackupDetails.
        :type backup_status: BackupStatus
        """
        if backup_status is None:
            raise ValueError("Invalid value for `backup_status`, must not be `None`")

        self._backup_status = backup_status

    @property
    def backup_type(self):
        """Gets the backup_type of this CreateBackupOutputBackupDetails.


        :return: The backup_type of this CreateBackupOutputBackupDetails.
        :rtype: BackupType
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this CreateBackupOutputBackupDetails.


        :param backup_type: The backup_type of this CreateBackupOutputBackupDetails.
        :type backup_type: BackupType
        """
        if backup_type is None:
            raise ValueError("Invalid value for `backup_type`, must not be `None`")

        self._backup_type = backup_type

    @property
    def backup_creation_date_time(self):
        """Gets the backup_creation_date_time of this CreateBackupOutputBackupDetails.


        :return: The backup_creation_date_time of this CreateBackupOutputBackupDetails.
        :rtype: datetime
        """
        return self._backup_creation_date_time

    @backup_creation_date_time.setter
    def backup_creation_date_time(self, backup_creation_date_time):
        """Sets the backup_creation_date_time of this CreateBackupOutputBackupDetails.


        :param backup_creation_date_time: The backup_creation_date_time of this CreateBackupOutputBackupDetails.
        :type backup_creation_date_time: datetime
        """
        if backup_creation_date_time is None:
            raise ValueError("Invalid value for `backup_creation_date_time`, must not be `None`")

        self._backup_creation_date_time = backup_creation_date_time

    @property
    def backup_expiry_date_time(self):
        """Gets the backup_expiry_date_time of this CreateBackupOutputBackupDetails.


        :return: The backup_expiry_date_time of this CreateBackupOutputBackupDetails.
        :rtype: datetime
        """
        return self._backup_expiry_date_time

    @backup_expiry_date_time.setter
    def backup_expiry_date_time(self, backup_expiry_date_time):
        """Sets the backup_expiry_date_time of this CreateBackupOutputBackupDetails.


        :param backup_expiry_date_time: The backup_expiry_date_time of this CreateBackupOutputBackupDetails.
        :type backup_expiry_date_time: datetime
        """

        self._backup_expiry_date_time = backup_expiry_date_time
