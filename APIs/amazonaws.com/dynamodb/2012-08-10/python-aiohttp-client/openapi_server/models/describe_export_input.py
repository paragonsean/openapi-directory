# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeExportInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_arn: str=None):
        """DescribeExportInput - a model defined in OpenAPI

        :param export_arn: The export_arn of this DescribeExportInput.
        """
        self.openapi_types = {
            'export_arn': str
        }

        self.attribute_map = {
            'export_arn': 'ExportArn'
        }

        self._export_arn = export_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeExportInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeExportInput of this DescribeExportInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_arn(self):
        """Gets the export_arn of this DescribeExportInput.


        :return: The export_arn of this DescribeExportInput.
        :rtype: str
        """
        return self._export_arn

    @export_arn.setter
    def export_arn(self, export_arn):
        """Sets the export_arn of this DescribeExportInput.


        :param export_arn: The export_arn of this DescribeExportInput.
        :type export_arn: str
        """
        if export_arn is None:
            raise ValueError("Invalid value for `export_arn`, must not be `None`")

        self._export_arn = export_arn
