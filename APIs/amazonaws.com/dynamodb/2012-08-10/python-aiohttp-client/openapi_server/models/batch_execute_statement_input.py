# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_consumed_capacity import ReturnConsumedCapacity
from openapi_server import util


class BatchExecuteStatementInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, statements: List=None, return_consumed_capacity: ReturnConsumedCapacity=None):
        """BatchExecuteStatementInput - a model defined in OpenAPI

        :param statements: The statements of this BatchExecuteStatementInput.
        :param return_consumed_capacity: The return_consumed_capacity of this BatchExecuteStatementInput.
        """
        self.openapi_types = {
            'statements': List,
            'return_consumed_capacity': ReturnConsumedCapacity
        }

        self.attribute_map = {
            'statements': 'Statements',
            'return_consumed_capacity': 'ReturnConsumedCapacity'
        }

        self._statements = statements
        self._return_consumed_capacity = return_consumed_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchExecuteStatementInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchExecuteStatementInput of this BatchExecuteStatementInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def statements(self):
        """Gets the statements of this BatchExecuteStatementInput.


        :return: The statements of this BatchExecuteStatementInput.
        :rtype: List
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this BatchExecuteStatementInput.


        :param statements: The statements of this BatchExecuteStatementInput.
        :type statements: List
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")

        self._statements = statements

    @property
    def return_consumed_capacity(self):
        """Gets the return_consumed_capacity of this BatchExecuteStatementInput.


        :return: The return_consumed_capacity of this BatchExecuteStatementInput.
        :rtype: ReturnConsumedCapacity
        """
        return self._return_consumed_capacity

    @return_consumed_capacity.setter
    def return_consumed_capacity(self, return_consumed_capacity):
        """Sets the return_consumed_capacity of this BatchExecuteStatementInput.


        :param return_consumed_capacity: The return_consumed_capacity of this BatchExecuteStatementInput.
        :type return_consumed_capacity: ReturnConsumedCapacity
        """

        self._return_consumed_capacity = return_consumed_capacity
