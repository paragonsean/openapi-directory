# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_global_secondary_index_action_provisioned_throughput import CreateGlobalSecondaryIndexActionProvisionedThroughput
from openapi_server import util


class UpdateGlobalSecondaryIndexAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_name: str=None, provisioned_throughput: CreateGlobalSecondaryIndexActionProvisionedThroughput=None):
        """UpdateGlobalSecondaryIndexAction - a model defined in OpenAPI

        :param index_name: The index_name of this UpdateGlobalSecondaryIndexAction.
        :param provisioned_throughput: The provisioned_throughput of this UpdateGlobalSecondaryIndexAction.
        """
        self.openapi_types = {
            'index_name': str,
            'provisioned_throughput': CreateGlobalSecondaryIndexActionProvisionedThroughput
        }

        self.attribute_map = {
            'index_name': 'IndexName',
            'provisioned_throughput': 'ProvisionedThroughput'
        }

        self._index_name = index_name
        self._provisioned_throughput = provisioned_throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGlobalSecondaryIndexAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGlobalSecondaryIndexAction of this UpdateGlobalSecondaryIndexAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_name(self):
        """Gets the index_name of this UpdateGlobalSecondaryIndexAction.


        :return: The index_name of this UpdateGlobalSecondaryIndexAction.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this UpdateGlobalSecondaryIndexAction.


        :param index_name: The index_name of this UpdateGlobalSecondaryIndexAction.
        :type index_name: str
        """
        if index_name is None:
            raise ValueError("Invalid value for `index_name`, must not be `None`")

        self._index_name = index_name

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this UpdateGlobalSecondaryIndexAction.


        :return: The provisioned_throughput of this UpdateGlobalSecondaryIndexAction.
        :rtype: CreateGlobalSecondaryIndexActionProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this UpdateGlobalSecondaryIndexAction.


        :param provisioned_throughput: The provisioned_throughput of this UpdateGlobalSecondaryIndexAction.
        :type provisioned_throughput: CreateGlobalSecondaryIndexActionProvisionedThroughput
        """
        if provisioned_throughput is None:
            raise ValueError("Invalid value for `provisioned_throughput`, must not be `None`")

        self._provisioned_throughput = provisioned_throughput
