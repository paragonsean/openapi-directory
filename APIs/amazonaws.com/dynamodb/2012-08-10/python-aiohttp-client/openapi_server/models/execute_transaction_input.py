# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_consumed_capacity import ReturnConsumedCapacity
from openapi_server import util


class ExecuteTransactionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transact_statements: List=None, client_request_token: str=None, return_consumed_capacity: ReturnConsumedCapacity=None):
        """ExecuteTransactionInput - a model defined in OpenAPI

        :param transact_statements: The transact_statements of this ExecuteTransactionInput.
        :param client_request_token: The client_request_token of this ExecuteTransactionInput.
        :param return_consumed_capacity: The return_consumed_capacity of this ExecuteTransactionInput.
        """
        self.openapi_types = {
            'transact_statements': List,
            'client_request_token': str,
            'return_consumed_capacity': ReturnConsumedCapacity
        }

        self.attribute_map = {
            'transact_statements': 'TransactStatements',
            'client_request_token': 'ClientRequestToken',
            'return_consumed_capacity': 'ReturnConsumedCapacity'
        }

        self._transact_statements = transact_statements
        self._client_request_token = client_request_token
        self._return_consumed_capacity = return_consumed_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteTransactionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteTransactionInput of this ExecuteTransactionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transact_statements(self):
        """Gets the transact_statements of this ExecuteTransactionInput.


        :return: The transact_statements of this ExecuteTransactionInput.
        :rtype: List
        """
        return self._transact_statements

    @transact_statements.setter
    def transact_statements(self, transact_statements):
        """Sets the transact_statements of this ExecuteTransactionInput.


        :param transact_statements: The transact_statements of this ExecuteTransactionInput.
        :type transact_statements: List
        """
        if transact_statements is None:
            raise ValueError("Invalid value for `transact_statements`, must not be `None`")

        self._transact_statements = transact_statements

    @property
    def client_request_token(self):
        """Gets the client_request_token of this ExecuteTransactionInput.


        :return: The client_request_token of this ExecuteTransactionInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this ExecuteTransactionInput.


        :param client_request_token: The client_request_token of this ExecuteTransactionInput.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def return_consumed_capacity(self):
        """Gets the return_consumed_capacity of this ExecuteTransactionInput.


        :return: The return_consumed_capacity of this ExecuteTransactionInput.
        :rtype: ReturnConsumedCapacity
        """
        return self._return_consumed_capacity

    @return_consumed_capacity.setter
    def return_consumed_capacity(self, return_consumed_capacity):
        """Sets the return_consumed_capacity of this ExecuteTransactionInput.


        :param return_consumed_capacity: The return_consumed_capacity of this ExecuteTransactionInput.
        :type return_consumed_capacity: ReturnConsumedCapacity
        """

        self._return_consumed_capacity = return_consumed_capacity
