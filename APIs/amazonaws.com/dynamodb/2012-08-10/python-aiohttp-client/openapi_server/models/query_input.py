# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_operator import ConditionalOperator
from openapi_server.models.return_consumed_capacity import ReturnConsumedCapacity
from openapi_server.models.select import Select
from openapi_server import util


class QueryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, index_name: str=None, select: Select=None, attributes_to_get: List=None, limit: int=None, consistent_read: bool=None, key_conditions: Dict=None, query_filter: Dict=None, conditional_operator: ConditionalOperator=None, scan_index_forward: bool=None, exclusive_start_key: Dict=None, return_consumed_capacity: ReturnConsumedCapacity=None, projection_expression: str=None, filter_expression: str=None, key_condition_expression: str=None, expression_attribute_names: Dict=None, expression_attribute_values: Dict=None):
        """QueryInput - a model defined in OpenAPI

        :param table_name: The table_name of this QueryInput.
        :param index_name: The index_name of this QueryInput.
        :param select: The select of this QueryInput.
        :param attributes_to_get: The attributes_to_get of this QueryInput.
        :param limit: The limit of this QueryInput.
        :param consistent_read: The consistent_read of this QueryInput.
        :param key_conditions: The key_conditions of this QueryInput.
        :param query_filter: The query_filter of this QueryInput.
        :param conditional_operator: The conditional_operator of this QueryInput.
        :param scan_index_forward: The scan_index_forward of this QueryInput.
        :param exclusive_start_key: The exclusive_start_key of this QueryInput.
        :param return_consumed_capacity: The return_consumed_capacity of this QueryInput.
        :param projection_expression: The projection_expression of this QueryInput.
        :param filter_expression: The filter_expression of this QueryInput.
        :param key_condition_expression: The key_condition_expression of this QueryInput.
        :param expression_attribute_names: The expression_attribute_names of this QueryInput.
        :param expression_attribute_values: The expression_attribute_values of this QueryInput.
        """
        self.openapi_types = {
            'table_name': str,
            'index_name': str,
            'select': Select,
            'attributes_to_get': List,
            'limit': int,
            'consistent_read': bool,
            'key_conditions': Dict,
            'query_filter': Dict,
            'conditional_operator': ConditionalOperator,
            'scan_index_forward': bool,
            'exclusive_start_key': Dict,
            'return_consumed_capacity': ReturnConsumedCapacity,
            'projection_expression': str,
            'filter_expression': str,
            'key_condition_expression': str,
            'expression_attribute_names': Dict,
            'expression_attribute_values': Dict
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'index_name': 'IndexName',
            'select': 'Select',
            'attributes_to_get': 'AttributesToGet',
            'limit': 'Limit',
            'consistent_read': 'ConsistentRead',
            'key_conditions': 'KeyConditions',
            'query_filter': 'QueryFilter',
            'conditional_operator': 'ConditionalOperator',
            'scan_index_forward': 'ScanIndexForward',
            'exclusive_start_key': 'ExclusiveStartKey',
            'return_consumed_capacity': 'ReturnConsumedCapacity',
            'projection_expression': 'ProjectionExpression',
            'filter_expression': 'FilterExpression',
            'key_condition_expression': 'KeyConditionExpression',
            'expression_attribute_names': 'ExpressionAttributeNames',
            'expression_attribute_values': 'ExpressionAttributeValues'
        }

        self._table_name = table_name
        self._index_name = index_name
        self._select = select
        self._attributes_to_get = attributes_to_get
        self._limit = limit
        self._consistent_read = consistent_read
        self._key_conditions = key_conditions
        self._query_filter = query_filter
        self._conditional_operator = conditional_operator
        self._scan_index_forward = scan_index_forward
        self._exclusive_start_key = exclusive_start_key
        self._return_consumed_capacity = return_consumed_capacity
        self._projection_expression = projection_expression
        self._filter_expression = filter_expression
        self._key_condition_expression = key_condition_expression
        self._expression_attribute_names = expression_attribute_names
        self._expression_attribute_values = expression_attribute_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryInput of this QueryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this QueryInput.


        :return: The table_name of this QueryInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this QueryInput.


        :param table_name: The table_name of this QueryInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def index_name(self):
        """Gets the index_name of this QueryInput.


        :return: The index_name of this QueryInput.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this QueryInput.


        :param index_name: The index_name of this QueryInput.
        :type index_name: str
        """

        self._index_name = index_name

    @property
    def select(self):
        """Gets the select of this QueryInput.


        :return: The select of this QueryInput.
        :rtype: Select
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this QueryInput.


        :param select: The select of this QueryInput.
        :type select: Select
        """

        self._select = select

    @property
    def attributes_to_get(self):
        """Gets the attributes_to_get of this QueryInput.


        :return: The attributes_to_get of this QueryInput.
        :rtype: List
        """
        return self._attributes_to_get

    @attributes_to_get.setter
    def attributes_to_get(self, attributes_to_get):
        """Sets the attributes_to_get of this QueryInput.


        :param attributes_to_get: The attributes_to_get of this QueryInput.
        :type attributes_to_get: List
        """

        self._attributes_to_get = attributes_to_get

    @property
    def limit(self):
        """Gets the limit of this QueryInput.


        :return: The limit of this QueryInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryInput.


        :param limit: The limit of this QueryInput.
        :type limit: int
        """

        self._limit = limit

    @property
    def consistent_read(self):
        """Gets the consistent_read of this QueryInput.


        :return: The consistent_read of this QueryInput.
        :rtype: bool
        """
        return self._consistent_read

    @consistent_read.setter
    def consistent_read(self, consistent_read):
        """Sets the consistent_read of this QueryInput.


        :param consistent_read: The consistent_read of this QueryInput.
        :type consistent_read: bool
        """

        self._consistent_read = consistent_read

    @property
    def key_conditions(self):
        """Gets the key_conditions of this QueryInput.


        :return: The key_conditions of this QueryInput.
        :rtype: Dict
        """
        return self._key_conditions

    @key_conditions.setter
    def key_conditions(self, key_conditions):
        """Sets the key_conditions of this QueryInput.


        :param key_conditions: The key_conditions of this QueryInput.
        :type key_conditions: Dict
        """

        self._key_conditions = key_conditions

    @property
    def query_filter(self):
        """Gets the query_filter of this QueryInput.


        :return: The query_filter of this QueryInput.
        :rtype: Dict
        """
        return self._query_filter

    @query_filter.setter
    def query_filter(self, query_filter):
        """Sets the query_filter of this QueryInput.


        :param query_filter: The query_filter of this QueryInput.
        :type query_filter: Dict
        """

        self._query_filter = query_filter

    @property
    def conditional_operator(self):
        """Gets the conditional_operator of this QueryInput.


        :return: The conditional_operator of this QueryInput.
        :rtype: ConditionalOperator
        """
        return self._conditional_operator

    @conditional_operator.setter
    def conditional_operator(self, conditional_operator):
        """Sets the conditional_operator of this QueryInput.


        :param conditional_operator: The conditional_operator of this QueryInput.
        :type conditional_operator: ConditionalOperator
        """

        self._conditional_operator = conditional_operator

    @property
    def scan_index_forward(self):
        """Gets the scan_index_forward of this QueryInput.


        :return: The scan_index_forward of this QueryInput.
        :rtype: bool
        """
        return self._scan_index_forward

    @scan_index_forward.setter
    def scan_index_forward(self, scan_index_forward):
        """Sets the scan_index_forward of this QueryInput.


        :param scan_index_forward: The scan_index_forward of this QueryInput.
        :type scan_index_forward: bool
        """

        self._scan_index_forward = scan_index_forward

    @property
    def exclusive_start_key(self):
        """Gets the exclusive_start_key of this QueryInput.


        :return: The exclusive_start_key of this QueryInput.
        :rtype: Dict
        """
        return self._exclusive_start_key

    @exclusive_start_key.setter
    def exclusive_start_key(self, exclusive_start_key):
        """Sets the exclusive_start_key of this QueryInput.


        :param exclusive_start_key: The exclusive_start_key of this QueryInput.
        :type exclusive_start_key: Dict
        """

        self._exclusive_start_key = exclusive_start_key

    @property
    def return_consumed_capacity(self):
        """Gets the return_consumed_capacity of this QueryInput.


        :return: The return_consumed_capacity of this QueryInput.
        :rtype: ReturnConsumedCapacity
        """
        return self._return_consumed_capacity

    @return_consumed_capacity.setter
    def return_consumed_capacity(self, return_consumed_capacity):
        """Sets the return_consumed_capacity of this QueryInput.


        :param return_consumed_capacity: The return_consumed_capacity of this QueryInput.
        :type return_consumed_capacity: ReturnConsumedCapacity
        """

        self._return_consumed_capacity = return_consumed_capacity

    @property
    def projection_expression(self):
        """Gets the projection_expression of this QueryInput.


        :return: The projection_expression of this QueryInput.
        :rtype: str
        """
        return self._projection_expression

    @projection_expression.setter
    def projection_expression(self, projection_expression):
        """Sets the projection_expression of this QueryInput.


        :param projection_expression: The projection_expression of this QueryInput.
        :type projection_expression: str
        """

        self._projection_expression = projection_expression

    @property
    def filter_expression(self):
        """Gets the filter_expression of this QueryInput.


        :return: The filter_expression of this QueryInput.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this QueryInput.


        :param filter_expression: The filter_expression of this QueryInput.
        :type filter_expression: str
        """

        self._filter_expression = filter_expression

    @property
    def key_condition_expression(self):
        """Gets the key_condition_expression of this QueryInput.


        :return: The key_condition_expression of this QueryInput.
        :rtype: str
        """
        return self._key_condition_expression

    @key_condition_expression.setter
    def key_condition_expression(self, key_condition_expression):
        """Sets the key_condition_expression of this QueryInput.


        :param key_condition_expression: The key_condition_expression of this QueryInput.
        :type key_condition_expression: str
        """

        self._key_condition_expression = key_condition_expression

    @property
    def expression_attribute_names(self):
        """Gets the expression_attribute_names of this QueryInput.


        :return: The expression_attribute_names of this QueryInput.
        :rtype: Dict
        """
        return self._expression_attribute_names

    @expression_attribute_names.setter
    def expression_attribute_names(self, expression_attribute_names):
        """Sets the expression_attribute_names of this QueryInput.


        :param expression_attribute_names: The expression_attribute_names of this QueryInput.
        :type expression_attribute_names: Dict
        """

        self._expression_attribute_names = expression_attribute_names

    @property
    def expression_attribute_values(self):
        """Gets the expression_attribute_values of this QueryInput.


        :return: The expression_attribute_values of this QueryInput.
        :rtype: Dict
        """
        return self._expression_attribute_values

    @expression_attribute_values.setter
    def expression_attribute_values(self, expression_attribute_values):
        """Sets the expression_attribute_values of this QueryInput.


        :param expression_attribute_values: The expression_attribute_values of this QueryInput.
        :type expression_attribute_values: Dict
        """

        self._expression_attribute_values = expression_attribute_values
