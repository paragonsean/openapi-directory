# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Get(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: Dict=None, table_name: str=None, projection_expression: str=None, expression_attribute_names: Dict=None):
        """Get - a model defined in OpenAPI

        :param key: The key of this Get.
        :param table_name: The table_name of this Get.
        :param projection_expression: The projection_expression of this Get.
        :param expression_attribute_names: The expression_attribute_names of this Get.
        """
        self.openapi_types = {
            'key': Dict,
            'table_name': str,
            'projection_expression': str,
            'expression_attribute_names': Dict
        }

        self.attribute_map = {
            'key': 'Key',
            'table_name': 'TableName',
            'projection_expression': 'ProjectionExpression',
            'expression_attribute_names': 'ExpressionAttributeNames'
        }

        self._key = key
        self._table_name = table_name
        self._projection_expression = projection_expression
        self._expression_attribute_names = expression_attribute_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Get':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get of this Get.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this Get.


        :return: The key of this Get.
        :rtype: Dict
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Get.


        :param key: The key of this Get.
        :type key: Dict
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def table_name(self):
        """Gets the table_name of this Get.


        :return: The table_name of this Get.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this Get.


        :param table_name: The table_name of this Get.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def projection_expression(self):
        """Gets the projection_expression of this Get.


        :return: The projection_expression of this Get.
        :rtype: str
        """
        return self._projection_expression

    @projection_expression.setter
    def projection_expression(self, projection_expression):
        """Sets the projection_expression of this Get.


        :param projection_expression: The projection_expression of this Get.
        :type projection_expression: str
        """

        self._projection_expression = projection_expression

    @property
    def expression_attribute_names(self):
        """Gets the expression_attribute_names of this Get.


        :return: The expression_attribute_names of this Get.
        :rtype: Dict
        """
        return self._expression_attribute_names

    @expression_attribute_names.setter
    def expression_attribute_names(self, expression_attribute_names):
        """Sets the expression_attribute_names of this Get.


        :param expression_attribute_names: The expression_attribute_names of this Get.
        :type expression_attribute_names: Dict
        """

        self._expression_attribute_names = expression_attribute_names
