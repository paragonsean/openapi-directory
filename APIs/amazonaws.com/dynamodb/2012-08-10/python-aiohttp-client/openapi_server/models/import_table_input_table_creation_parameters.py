# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_mode import BillingMode
from openapi_server.models.provisioned_throughput import ProvisionedThroughput
from openapi_server.models.sse_specification import SSESpecification
from openapi_server import util


class ImportTableInputTableCreationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, attribute_definitions: List=None, key_schema: List=None, billing_mode: BillingMode=None, provisioned_throughput: ProvisionedThroughput=None, sse_specification: SSESpecification=None, global_secondary_indexes: List=None):
        """ImportTableInputTableCreationParameters - a model defined in OpenAPI

        :param table_name: The table_name of this ImportTableInputTableCreationParameters.
        :param attribute_definitions: The attribute_definitions of this ImportTableInputTableCreationParameters.
        :param key_schema: The key_schema of this ImportTableInputTableCreationParameters.
        :param billing_mode: The billing_mode of this ImportTableInputTableCreationParameters.
        :param provisioned_throughput: The provisioned_throughput of this ImportTableInputTableCreationParameters.
        :param sse_specification: The sse_specification of this ImportTableInputTableCreationParameters.
        :param global_secondary_indexes: The global_secondary_indexes of this ImportTableInputTableCreationParameters.
        """
        self.openapi_types = {
            'table_name': str,
            'attribute_definitions': List,
            'key_schema': List,
            'billing_mode': BillingMode,
            'provisioned_throughput': ProvisionedThroughput,
            'sse_specification': SSESpecification,
            'global_secondary_indexes': List
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'attribute_definitions': 'AttributeDefinitions',
            'key_schema': 'KeySchema',
            'billing_mode': 'BillingMode',
            'provisioned_throughput': 'ProvisionedThroughput',
            'sse_specification': 'SSESpecification',
            'global_secondary_indexes': 'GlobalSecondaryIndexes'
        }

        self._table_name = table_name
        self._attribute_definitions = attribute_definitions
        self._key_schema = key_schema
        self._billing_mode = billing_mode
        self._provisioned_throughput = provisioned_throughput
        self._sse_specification = sse_specification
        self._global_secondary_indexes = global_secondary_indexes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTableInputTableCreationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportTableInput_TableCreationParameters of this ImportTableInputTableCreationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this ImportTableInputTableCreationParameters.


        :return: The table_name of this ImportTableInputTableCreationParameters.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ImportTableInputTableCreationParameters.


        :param table_name: The table_name of this ImportTableInputTableCreationParameters.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def attribute_definitions(self):
        """Gets the attribute_definitions of this ImportTableInputTableCreationParameters.


        :return: The attribute_definitions of this ImportTableInputTableCreationParameters.
        :rtype: List
        """
        return self._attribute_definitions

    @attribute_definitions.setter
    def attribute_definitions(self, attribute_definitions):
        """Sets the attribute_definitions of this ImportTableInputTableCreationParameters.


        :param attribute_definitions: The attribute_definitions of this ImportTableInputTableCreationParameters.
        :type attribute_definitions: List
        """
        if attribute_definitions is None:
            raise ValueError("Invalid value for `attribute_definitions`, must not be `None`")

        self._attribute_definitions = attribute_definitions

    @property
    def key_schema(self):
        """Gets the key_schema of this ImportTableInputTableCreationParameters.


        :return: The key_schema of this ImportTableInputTableCreationParameters.
        :rtype: List
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this ImportTableInputTableCreationParameters.


        :param key_schema: The key_schema of this ImportTableInputTableCreationParameters.
        :type key_schema: List
        """
        if key_schema is None:
            raise ValueError("Invalid value for `key_schema`, must not be `None`")

        self._key_schema = key_schema

    @property
    def billing_mode(self):
        """Gets the billing_mode of this ImportTableInputTableCreationParameters.


        :return: The billing_mode of this ImportTableInputTableCreationParameters.
        :rtype: BillingMode
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode):
        """Sets the billing_mode of this ImportTableInputTableCreationParameters.


        :param billing_mode: The billing_mode of this ImportTableInputTableCreationParameters.
        :type billing_mode: BillingMode
        """

        self._billing_mode = billing_mode

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this ImportTableInputTableCreationParameters.


        :return: The provisioned_throughput of this ImportTableInputTableCreationParameters.
        :rtype: ProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this ImportTableInputTableCreationParameters.


        :param provisioned_throughput: The provisioned_throughput of this ImportTableInputTableCreationParameters.
        :type provisioned_throughput: ProvisionedThroughput
        """

        self._provisioned_throughput = provisioned_throughput

    @property
    def sse_specification(self):
        """Gets the sse_specification of this ImportTableInputTableCreationParameters.


        :return: The sse_specification of this ImportTableInputTableCreationParameters.
        :rtype: SSESpecification
        """
        return self._sse_specification

    @sse_specification.setter
    def sse_specification(self, sse_specification):
        """Sets the sse_specification of this ImportTableInputTableCreationParameters.


        :param sse_specification: The sse_specification of this ImportTableInputTableCreationParameters.
        :type sse_specification: SSESpecification
        """

        self._sse_specification = sse_specification

    @property
    def global_secondary_indexes(self):
        """Gets the global_secondary_indexes of this ImportTableInputTableCreationParameters.


        :return: The global_secondary_indexes of this ImportTableInputTableCreationParameters.
        :rtype: List
        """
        return self._global_secondary_indexes

    @global_secondary_indexes.setter
    def global_secondary_indexes(self, global_secondary_indexes):
        """Sets the global_secondary_indexes of this ImportTableInputTableCreationParameters.


        :param global_secondary_indexes: The global_secondary_indexes of this ImportTableInputTableCreationParameters.
        :type global_secondary_indexes: List
        """

        self._global_secondary_indexes = global_secondary_indexes
