# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_view_type import StreamViewType
from openapi_server import util


class StreamSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_enabled: bool=None, stream_view_type: StreamViewType=None):
        """StreamSpecification - a model defined in OpenAPI

        :param stream_enabled: The stream_enabled of this StreamSpecification.
        :param stream_view_type: The stream_view_type of this StreamSpecification.
        """
        self.openapi_types = {
            'stream_enabled': bool,
            'stream_view_type': StreamViewType
        }

        self.attribute_map = {
            'stream_enabled': 'StreamEnabled',
            'stream_view_type': 'StreamViewType'
        }

        self._stream_enabled = stream_enabled
        self._stream_view_type = stream_view_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamSpecification of this StreamSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_enabled(self):
        """Gets the stream_enabled of this StreamSpecification.


        :return: The stream_enabled of this StreamSpecification.
        :rtype: bool
        """
        return self._stream_enabled

    @stream_enabled.setter
    def stream_enabled(self, stream_enabled):
        """Sets the stream_enabled of this StreamSpecification.


        :param stream_enabled: The stream_enabled of this StreamSpecification.
        :type stream_enabled: bool
        """
        if stream_enabled is None:
            raise ValueError("Invalid value for `stream_enabled`, must not be `None`")

        self._stream_enabled = stream_enabled

    @property
    def stream_view_type(self):
        """Gets the stream_view_type of this StreamSpecification.


        :return: The stream_view_type of this StreamSpecification.
        :rtype: StreamViewType
        """
        return self._stream_view_type

    @stream_view_type.setter
    def stream_view_type(self, stream_view_type):
        """Sets the stream_view_type of this StreamSpecification.


        :param stream_view_type: The stream_view_type of this StreamSpecification.
        :type stream_view_type: StreamViewType
        """

        self._stream_view_type = stream_view_type
