# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_table_input_input_format_options import ImportTableInputInputFormatOptions
from openapi_server.models.import_table_input_s3_bucket_source import ImportTableInputS3BucketSource
from openapi_server.models.import_table_input_table_creation_parameters import ImportTableInputTableCreationParameters
from openapi_server.models.input_compression_type import InputCompressionType
from openapi_server.models.input_format import InputFormat
from openapi_server import util


class ImportTableInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, s3_bucket_source: ImportTableInputS3BucketSource=None, input_format: InputFormat=None, input_format_options: ImportTableInputInputFormatOptions=None, input_compression_type: InputCompressionType=None, table_creation_parameters: ImportTableInputTableCreationParameters=None):
        """ImportTableInput - a model defined in OpenAPI

        :param client_token: The client_token of this ImportTableInput.
        :param s3_bucket_source: The s3_bucket_source of this ImportTableInput.
        :param input_format: The input_format of this ImportTableInput.
        :param input_format_options: The input_format_options of this ImportTableInput.
        :param input_compression_type: The input_compression_type of this ImportTableInput.
        :param table_creation_parameters: The table_creation_parameters of this ImportTableInput.
        """
        self.openapi_types = {
            'client_token': str,
            's3_bucket_source': ImportTableInputS3BucketSource,
            'input_format': InputFormat,
            'input_format_options': ImportTableInputInputFormatOptions,
            'input_compression_type': InputCompressionType,
            'table_creation_parameters': ImportTableInputTableCreationParameters
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            's3_bucket_source': 'S3BucketSource',
            'input_format': 'InputFormat',
            'input_format_options': 'InputFormatOptions',
            'input_compression_type': 'InputCompressionType',
            'table_creation_parameters': 'TableCreationParameters'
        }

        self._client_token = client_token
        self._s3_bucket_source = s3_bucket_source
        self._input_format = input_format
        self._input_format_options = input_format_options
        self._input_compression_type = input_compression_type
        self._table_creation_parameters = table_creation_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTableInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportTableInput of this ImportTableInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this ImportTableInput.


        :return: The client_token of this ImportTableInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this ImportTableInput.


        :param client_token: The client_token of this ImportTableInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def s3_bucket_source(self):
        """Gets the s3_bucket_source of this ImportTableInput.


        :return: The s3_bucket_source of this ImportTableInput.
        :rtype: ImportTableInputS3BucketSource
        """
        return self._s3_bucket_source

    @s3_bucket_source.setter
    def s3_bucket_source(self, s3_bucket_source):
        """Sets the s3_bucket_source of this ImportTableInput.


        :param s3_bucket_source: The s3_bucket_source of this ImportTableInput.
        :type s3_bucket_source: ImportTableInputS3BucketSource
        """
        if s3_bucket_source is None:
            raise ValueError("Invalid value for `s3_bucket_source`, must not be `None`")

        self._s3_bucket_source = s3_bucket_source

    @property
    def input_format(self):
        """Gets the input_format of this ImportTableInput.


        :return: The input_format of this ImportTableInput.
        :rtype: InputFormat
        """
        return self._input_format

    @input_format.setter
    def input_format(self, input_format):
        """Sets the input_format of this ImportTableInput.


        :param input_format: The input_format of this ImportTableInput.
        :type input_format: InputFormat
        """
        if input_format is None:
            raise ValueError("Invalid value for `input_format`, must not be `None`")

        self._input_format = input_format

    @property
    def input_format_options(self):
        """Gets the input_format_options of this ImportTableInput.


        :return: The input_format_options of this ImportTableInput.
        :rtype: ImportTableInputInputFormatOptions
        """
        return self._input_format_options

    @input_format_options.setter
    def input_format_options(self, input_format_options):
        """Sets the input_format_options of this ImportTableInput.


        :param input_format_options: The input_format_options of this ImportTableInput.
        :type input_format_options: ImportTableInputInputFormatOptions
        """

        self._input_format_options = input_format_options

    @property
    def input_compression_type(self):
        """Gets the input_compression_type of this ImportTableInput.


        :return: The input_compression_type of this ImportTableInput.
        :rtype: InputCompressionType
        """
        return self._input_compression_type

    @input_compression_type.setter
    def input_compression_type(self, input_compression_type):
        """Sets the input_compression_type of this ImportTableInput.


        :param input_compression_type: The input_compression_type of this ImportTableInput.
        :type input_compression_type: InputCompressionType
        """

        self._input_compression_type = input_compression_type

    @property
    def table_creation_parameters(self):
        """Gets the table_creation_parameters of this ImportTableInput.


        :return: The table_creation_parameters of this ImportTableInput.
        :rtype: ImportTableInputTableCreationParameters
        """
        return self._table_creation_parameters

    @table_creation_parameters.setter
    def table_creation_parameters(self, table_creation_parameters):
        """Sets the table_creation_parameters of this ImportTableInput.


        :param table_creation_parameters: The table_creation_parameters of this ImportTableInput.
        :type table_creation_parameters: ImportTableInputTableCreationParameters
        """
        if table_creation_parameters is None:
            raise ValueError("Invalid value for `table_creation_parameters`, must not be `None`")

        self._table_creation_parameters = table_creation_parameters
