# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KinesisStreamingDestinationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, stream_arn: str=None):
        """KinesisStreamingDestinationInput - a model defined in OpenAPI

        :param table_name: The table_name of this KinesisStreamingDestinationInput.
        :param stream_arn: The stream_arn of this KinesisStreamingDestinationInput.
        """
        self.openapi_types = {
            'table_name': str,
            'stream_arn': str
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'stream_arn': 'StreamArn'
        }

        self._table_name = table_name
        self._stream_arn = stream_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KinesisStreamingDestinationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KinesisStreamingDestinationInput of this KinesisStreamingDestinationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this KinesisStreamingDestinationInput.


        :return: The table_name of this KinesisStreamingDestinationInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this KinesisStreamingDestinationInput.


        :param table_name: The table_name of this KinesisStreamingDestinationInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this KinesisStreamingDestinationInput.


        :return: The stream_arn of this KinesisStreamingDestinationInput.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this KinesisStreamingDestinationInput.


        :param stream_arn: The stream_arn of this KinesisStreamingDestinationInput.
        :type stream_arn: str
        """
        if stream_arn is None:
            raise ValueError("Invalid value for `stream_arn`, must not be `None`")

        self._stream_arn = stream_arn
