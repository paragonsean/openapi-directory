# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumed_capacity_table import ConsumedCapacityTable
from openapi_server import util


class ScanOutputConsumedCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, capacity_units: float=None, read_capacity_units: float=None, write_capacity_units: float=None, table: ConsumedCapacityTable=None, local_secondary_indexes: Dict=None, global_secondary_indexes: Dict=None):
        """ScanOutputConsumedCapacity - a model defined in OpenAPI

        :param table_name: The table_name of this ScanOutputConsumedCapacity.
        :param capacity_units: The capacity_units of this ScanOutputConsumedCapacity.
        :param read_capacity_units: The read_capacity_units of this ScanOutputConsumedCapacity.
        :param write_capacity_units: The write_capacity_units of this ScanOutputConsumedCapacity.
        :param table: The table of this ScanOutputConsumedCapacity.
        :param local_secondary_indexes: The local_secondary_indexes of this ScanOutputConsumedCapacity.
        :param global_secondary_indexes: The global_secondary_indexes of this ScanOutputConsumedCapacity.
        """
        self.openapi_types = {
            'table_name': str,
            'capacity_units': float,
            'read_capacity_units': float,
            'write_capacity_units': float,
            'table': ConsumedCapacityTable,
            'local_secondary_indexes': Dict,
            'global_secondary_indexes': Dict
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'capacity_units': 'CapacityUnits',
            'read_capacity_units': 'ReadCapacityUnits',
            'write_capacity_units': 'WriteCapacityUnits',
            'table': 'Table',
            'local_secondary_indexes': 'LocalSecondaryIndexes',
            'global_secondary_indexes': 'GlobalSecondaryIndexes'
        }

        self._table_name = table_name
        self._capacity_units = capacity_units
        self._read_capacity_units = read_capacity_units
        self._write_capacity_units = write_capacity_units
        self._table = table
        self._local_secondary_indexes = local_secondary_indexes
        self._global_secondary_indexes = global_secondary_indexes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanOutputConsumedCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanOutput_ConsumedCapacity of this ScanOutputConsumedCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this ScanOutputConsumedCapacity.


        :return: The table_name of this ScanOutputConsumedCapacity.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ScanOutputConsumedCapacity.


        :param table_name: The table_name of this ScanOutputConsumedCapacity.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def capacity_units(self):
        """Gets the capacity_units of this ScanOutputConsumedCapacity.


        :return: The capacity_units of this ScanOutputConsumedCapacity.
        :rtype: float
        """
        return self._capacity_units

    @capacity_units.setter
    def capacity_units(self, capacity_units):
        """Sets the capacity_units of this ScanOutputConsumedCapacity.


        :param capacity_units: The capacity_units of this ScanOutputConsumedCapacity.
        :type capacity_units: float
        """

        self._capacity_units = capacity_units

    @property
    def read_capacity_units(self):
        """Gets the read_capacity_units of this ScanOutputConsumedCapacity.


        :return: The read_capacity_units of this ScanOutputConsumedCapacity.
        :rtype: float
        """
        return self._read_capacity_units

    @read_capacity_units.setter
    def read_capacity_units(self, read_capacity_units):
        """Sets the read_capacity_units of this ScanOutputConsumedCapacity.


        :param read_capacity_units: The read_capacity_units of this ScanOutputConsumedCapacity.
        :type read_capacity_units: float
        """

        self._read_capacity_units = read_capacity_units

    @property
    def write_capacity_units(self):
        """Gets the write_capacity_units of this ScanOutputConsumedCapacity.


        :return: The write_capacity_units of this ScanOutputConsumedCapacity.
        :rtype: float
        """
        return self._write_capacity_units

    @write_capacity_units.setter
    def write_capacity_units(self, write_capacity_units):
        """Sets the write_capacity_units of this ScanOutputConsumedCapacity.


        :param write_capacity_units: The write_capacity_units of this ScanOutputConsumedCapacity.
        :type write_capacity_units: float
        """

        self._write_capacity_units = write_capacity_units

    @property
    def table(self):
        """Gets the table of this ScanOutputConsumedCapacity.


        :return: The table of this ScanOutputConsumedCapacity.
        :rtype: ConsumedCapacityTable
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this ScanOutputConsumedCapacity.


        :param table: The table of this ScanOutputConsumedCapacity.
        :type table: ConsumedCapacityTable
        """

        self._table = table

    @property
    def local_secondary_indexes(self):
        """Gets the local_secondary_indexes of this ScanOutputConsumedCapacity.


        :return: The local_secondary_indexes of this ScanOutputConsumedCapacity.
        :rtype: Dict
        """
        return self._local_secondary_indexes

    @local_secondary_indexes.setter
    def local_secondary_indexes(self, local_secondary_indexes):
        """Sets the local_secondary_indexes of this ScanOutputConsumedCapacity.


        :param local_secondary_indexes: The local_secondary_indexes of this ScanOutputConsumedCapacity.
        :type local_secondary_indexes: Dict
        """

        self._local_secondary_indexes = local_secondary_indexes

    @property
    def global_secondary_indexes(self):
        """Gets the global_secondary_indexes of this ScanOutputConsumedCapacity.


        :return: The global_secondary_indexes of this ScanOutputConsumedCapacity.
        :rtype: Dict
        """
        return self._global_secondary_indexes

    @global_secondary_indexes.setter
    def global_secondary_indexes(self, global_secondary_indexes):
        """Sets the global_secondary_indexes of this ScanOutputConsumedCapacity.


        :param global_secondary_indexes: The global_secondary_indexes of this ScanOutputConsumedCapacity.
        :type global_secondary_indexes: Dict
        """

        self._global_secondary_indexes = global_secondary_indexes
