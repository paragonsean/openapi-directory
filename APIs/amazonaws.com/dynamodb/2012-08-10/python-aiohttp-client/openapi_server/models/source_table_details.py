# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_mode import BillingMode
from openapi_server.models.source_table_details_provisioned_throughput import SourceTableDetailsProvisionedThroughput
from openapi_server import util


class SourceTableDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, table_id: str=None, table_arn: str=None, table_size_bytes: int=None, key_schema: List=None, table_creation_date_time: datetime=None, provisioned_throughput: SourceTableDetailsProvisionedThroughput=None, item_count: int=None, billing_mode: BillingMode=None):
        """SourceTableDetails - a model defined in OpenAPI

        :param table_name: The table_name of this SourceTableDetails.
        :param table_id: The table_id of this SourceTableDetails.
        :param table_arn: The table_arn of this SourceTableDetails.
        :param table_size_bytes: The table_size_bytes of this SourceTableDetails.
        :param key_schema: The key_schema of this SourceTableDetails.
        :param table_creation_date_time: The table_creation_date_time of this SourceTableDetails.
        :param provisioned_throughput: The provisioned_throughput of this SourceTableDetails.
        :param item_count: The item_count of this SourceTableDetails.
        :param billing_mode: The billing_mode of this SourceTableDetails.
        """
        self.openapi_types = {
            'table_name': str,
            'table_id': str,
            'table_arn': str,
            'table_size_bytes': int,
            'key_schema': List,
            'table_creation_date_time': datetime,
            'provisioned_throughput': SourceTableDetailsProvisionedThroughput,
            'item_count': int,
            'billing_mode': BillingMode
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'table_id': 'TableId',
            'table_arn': 'TableArn',
            'table_size_bytes': 'TableSizeBytes',
            'key_schema': 'KeySchema',
            'table_creation_date_time': 'TableCreationDateTime',
            'provisioned_throughput': 'ProvisionedThroughput',
            'item_count': 'ItemCount',
            'billing_mode': 'BillingMode'
        }

        self._table_name = table_name
        self._table_id = table_id
        self._table_arn = table_arn
        self._table_size_bytes = table_size_bytes
        self._key_schema = key_schema
        self._table_creation_date_time = table_creation_date_time
        self._provisioned_throughput = provisioned_throughput
        self._item_count = item_count
        self._billing_mode = billing_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceTableDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceTableDetails of this SourceTableDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this SourceTableDetails.


        :return: The table_name of this SourceTableDetails.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this SourceTableDetails.


        :param table_name: The table_name of this SourceTableDetails.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def table_id(self):
        """Gets the table_id of this SourceTableDetails.


        :return: The table_id of this SourceTableDetails.
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this SourceTableDetails.


        :param table_id: The table_id of this SourceTableDetails.
        :type table_id: str
        """
        if table_id is None:
            raise ValueError("Invalid value for `table_id`, must not be `None`")

        self._table_id = table_id

    @property
    def table_arn(self):
        """Gets the table_arn of this SourceTableDetails.


        :return: The table_arn of this SourceTableDetails.
        :rtype: str
        """
        return self._table_arn

    @table_arn.setter
    def table_arn(self, table_arn):
        """Sets the table_arn of this SourceTableDetails.


        :param table_arn: The table_arn of this SourceTableDetails.
        :type table_arn: str
        """

        self._table_arn = table_arn

    @property
    def table_size_bytes(self):
        """Gets the table_size_bytes of this SourceTableDetails.


        :return: The table_size_bytes of this SourceTableDetails.
        :rtype: int
        """
        return self._table_size_bytes

    @table_size_bytes.setter
    def table_size_bytes(self, table_size_bytes):
        """Sets the table_size_bytes of this SourceTableDetails.


        :param table_size_bytes: The table_size_bytes of this SourceTableDetails.
        :type table_size_bytes: int
        """

        self._table_size_bytes = table_size_bytes

    @property
    def key_schema(self):
        """Gets the key_schema of this SourceTableDetails.


        :return: The key_schema of this SourceTableDetails.
        :rtype: List
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this SourceTableDetails.


        :param key_schema: The key_schema of this SourceTableDetails.
        :type key_schema: List
        """
        if key_schema is None:
            raise ValueError("Invalid value for `key_schema`, must not be `None`")

        self._key_schema = key_schema

    @property
    def table_creation_date_time(self):
        """Gets the table_creation_date_time of this SourceTableDetails.


        :return: The table_creation_date_time of this SourceTableDetails.
        :rtype: datetime
        """
        return self._table_creation_date_time

    @table_creation_date_time.setter
    def table_creation_date_time(self, table_creation_date_time):
        """Sets the table_creation_date_time of this SourceTableDetails.


        :param table_creation_date_time: The table_creation_date_time of this SourceTableDetails.
        :type table_creation_date_time: datetime
        """
        if table_creation_date_time is None:
            raise ValueError("Invalid value for `table_creation_date_time`, must not be `None`")

        self._table_creation_date_time = table_creation_date_time

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this SourceTableDetails.


        :return: The provisioned_throughput of this SourceTableDetails.
        :rtype: SourceTableDetailsProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this SourceTableDetails.


        :param provisioned_throughput: The provisioned_throughput of this SourceTableDetails.
        :type provisioned_throughput: SourceTableDetailsProvisionedThroughput
        """
        if provisioned_throughput is None:
            raise ValueError("Invalid value for `provisioned_throughput`, must not be `None`")

        self._provisioned_throughput = provisioned_throughput

    @property
    def item_count(self):
        """Gets the item_count of this SourceTableDetails.


        :return: The item_count of this SourceTableDetails.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this SourceTableDetails.


        :param item_count: The item_count of this SourceTableDetails.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def billing_mode(self):
        """Gets the billing_mode of this SourceTableDetails.


        :return: The billing_mode of this SourceTableDetails.
        :rtype: BillingMode
        """
        return self._billing_mode

    @billing_mode.setter
    def billing_mode(self, billing_mode):
        """Sets the billing_mode of this SourceTableDetails.


        :param billing_mode: The billing_mode of this SourceTableDetails.
        :type billing_mode: BillingMode
        """

        self._billing_mode = billing_mode
