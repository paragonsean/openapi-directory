# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_time_to_live_input_time_to_live_specification import UpdateTimeToLiveInputTimeToLiveSpecification
from openapi_server import util


class UpdateTimeToLiveInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, time_to_live_specification: UpdateTimeToLiveInputTimeToLiveSpecification=None):
        """UpdateTimeToLiveInput - a model defined in OpenAPI

        :param table_name: The table_name of this UpdateTimeToLiveInput.
        :param time_to_live_specification: The time_to_live_specification of this UpdateTimeToLiveInput.
        """
        self.openapi_types = {
            'table_name': str,
            'time_to_live_specification': UpdateTimeToLiveInputTimeToLiveSpecification
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'time_to_live_specification': 'TimeToLiveSpecification'
        }

        self._table_name = table_name
        self._time_to_live_specification = time_to_live_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTimeToLiveInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTimeToLiveInput of this UpdateTimeToLiveInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this UpdateTimeToLiveInput.


        :return: The table_name of this UpdateTimeToLiveInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this UpdateTimeToLiveInput.


        :param table_name: The table_name of this UpdateTimeToLiveInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def time_to_live_specification(self):
        """Gets the time_to_live_specification of this UpdateTimeToLiveInput.


        :return: The time_to_live_specification of this UpdateTimeToLiveInput.
        :rtype: UpdateTimeToLiveInputTimeToLiveSpecification
        """
        return self._time_to_live_specification

    @time_to_live_specification.setter
    def time_to_live_specification(self, time_to_live_specification):
        """Sets the time_to_live_specification of this UpdateTimeToLiveInput.


        :param time_to_live_specification: The time_to_live_specification of this UpdateTimeToLiveInput.
        :type time_to_live_specification: UpdateTimeToLiveInputTimeToLiveSpecification
        """
        if time_to_live_specification is None:
            raise ValueError("Invalid value for `time_to_live_specification`, must not be `None`")

        self._time_to_live_specification = time_to_live_specification
