# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transact_write_item_condition_check import TransactWriteItemConditionCheck
from openapi_server.models.transact_write_item_delete import TransactWriteItemDelete
from openapi_server.models.transact_write_item_put import TransactWriteItemPut
from openapi_server.models.transact_write_item_update import TransactWriteItemUpdate
from openapi_server import util


class TransactWriteItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_check: TransactWriteItemConditionCheck=None, put: TransactWriteItemPut=None, delete: TransactWriteItemDelete=None, update: TransactWriteItemUpdate=None):
        """TransactWriteItem - a model defined in OpenAPI

        :param condition_check: The condition_check of this TransactWriteItem.
        :param put: The put of this TransactWriteItem.
        :param delete: The delete of this TransactWriteItem.
        :param update: The update of this TransactWriteItem.
        """
        self.openapi_types = {
            'condition_check': TransactWriteItemConditionCheck,
            'put': TransactWriteItemPut,
            'delete': TransactWriteItemDelete,
            'update': TransactWriteItemUpdate
        }

        self.attribute_map = {
            'condition_check': 'ConditionCheck',
            'put': 'Put',
            'delete': 'Delete',
            'update': 'Update'
        }

        self._condition_check = condition_check
        self._put = put
        self._delete = delete
        self._update = update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactWriteItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactWriteItem of this TransactWriteItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_check(self):
        """Gets the condition_check of this TransactWriteItem.


        :return: The condition_check of this TransactWriteItem.
        :rtype: TransactWriteItemConditionCheck
        """
        return self._condition_check

    @condition_check.setter
    def condition_check(self, condition_check):
        """Sets the condition_check of this TransactWriteItem.


        :param condition_check: The condition_check of this TransactWriteItem.
        :type condition_check: TransactWriteItemConditionCheck
        """

        self._condition_check = condition_check

    @property
    def put(self):
        """Gets the put of this TransactWriteItem.


        :return: The put of this TransactWriteItem.
        :rtype: TransactWriteItemPut
        """
        return self._put

    @put.setter
    def put(self, put):
        """Sets the put of this TransactWriteItem.


        :param put: The put of this TransactWriteItem.
        :type put: TransactWriteItemPut
        """

        self._put = put

    @property
    def delete(self):
        """Gets the delete of this TransactWriteItem.


        :return: The delete of this TransactWriteItem.
        :rtype: TransactWriteItemDelete
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this TransactWriteItem.


        :param delete: The delete of this TransactWriteItem.
        :type delete: TransactWriteItemDelete
        """

        self._delete = delete

    @property
    def update(self):
        """Gets the update of this TransactWriteItem.


        :return: The update of this TransactWriteItem.
        :rtype: TransactWriteItemUpdate
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this TransactWriteItem.


        :param update: The update of this TransactWriteItem.
        :type update: TransactWriteItemUpdate
        """

        self._update = update
