# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchStatementErrorCodeEnum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CONDITIONALCHECKFAILED = 'ConditionalCheckFailed'
    ITEMCOLLECTIONSIZELIMITEXCEEDED = 'ItemCollectionSizeLimitExceeded'
    REQUESTLIMITEXCEEDED = 'RequestLimitExceeded'
    VALIDATIONERROR = 'ValidationError'
    PROVISIONEDTHROUGHPUTEXCEEDED = 'ProvisionedThroughputExceeded'
    TRANSACTIONCONFLICT = 'TransactionConflict'
    THROTTLINGERROR = 'ThrottlingError'
    INTERNALSERVERERROR = 'InternalServerError'
    RESOURCENOTFOUND = 'ResourceNotFound'
    ACCESSDENIED = 'AccessDenied'
    DUPLICATEITEM = 'DuplicateItem'

    def __init__(self):
        """BatchStatementErrorCodeEnum - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchStatementErrorCodeEnum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchStatementErrorCodeEnum of this BatchStatementErrorCodeEnum.
        """
        return util.deserialize_model(dikt, cls)
