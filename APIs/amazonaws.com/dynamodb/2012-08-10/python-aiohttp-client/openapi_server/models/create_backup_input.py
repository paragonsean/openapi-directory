# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBackupInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, backup_name: str=None):
        """CreateBackupInput - a model defined in OpenAPI

        :param table_name: The table_name of this CreateBackupInput.
        :param backup_name: The backup_name of this CreateBackupInput.
        """
        self.openapi_types = {
            'table_name': str,
            'backup_name': str
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'backup_name': 'BackupName'
        }

        self._table_name = table_name
        self._backup_name = backup_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackupInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackupInput of this CreateBackupInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this CreateBackupInput.


        :return: The table_name of this CreateBackupInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this CreateBackupInput.


        :param table_name: The table_name of this CreateBackupInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def backup_name(self):
        """Gets the backup_name of this CreateBackupInput.


        :return: The backup_name of this CreateBackupInput.
        :rtype: str
        """
        return self._backup_name

    @backup_name.setter
    def backup_name(self, backup_name):
        """Sets the backup_name of this CreateBackupInput.


        :param backup_name: The backup_name of this CreateBackupInput.
        :type backup_name: str
        """
        if backup_name is None:
            raise ValueError("Invalid value for `backup_name`, must not be `None`")

        self._backup_name = backup_name
