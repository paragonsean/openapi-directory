# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replica_description_provisioned_throughput_override import ReplicaDescriptionProvisionedThroughputOverride
from openapi_server.models.replica_status import ReplicaStatus
from openapi_server.models.table_class_summary import TableClassSummary
from openapi_server import util


class ReplicaDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region_name: str=None, replica_status: ReplicaStatus=None, replica_status_description: str=None, replica_status_percent_progress: str=None, kms_master_key_id: str=None, provisioned_throughput_override: ReplicaDescriptionProvisionedThroughputOverride=None, global_secondary_indexes: List=None, replica_inaccessible_date_time: datetime=None, replica_table_class_summary: TableClassSummary=None):
        """ReplicaDescription - a model defined in OpenAPI

        :param region_name: The region_name of this ReplicaDescription.
        :param replica_status: The replica_status of this ReplicaDescription.
        :param replica_status_description: The replica_status_description of this ReplicaDescription.
        :param replica_status_percent_progress: The replica_status_percent_progress of this ReplicaDescription.
        :param kms_master_key_id: The kms_master_key_id of this ReplicaDescription.
        :param provisioned_throughput_override: The provisioned_throughput_override of this ReplicaDescription.
        :param global_secondary_indexes: The global_secondary_indexes of this ReplicaDescription.
        :param replica_inaccessible_date_time: The replica_inaccessible_date_time of this ReplicaDescription.
        :param replica_table_class_summary: The replica_table_class_summary of this ReplicaDescription.
        """
        self.openapi_types = {
            'region_name': str,
            'replica_status': ReplicaStatus,
            'replica_status_description': str,
            'replica_status_percent_progress': str,
            'kms_master_key_id': str,
            'provisioned_throughput_override': ReplicaDescriptionProvisionedThroughputOverride,
            'global_secondary_indexes': List,
            'replica_inaccessible_date_time': datetime,
            'replica_table_class_summary': TableClassSummary
        }

        self.attribute_map = {
            'region_name': 'RegionName',
            'replica_status': 'ReplicaStatus',
            'replica_status_description': 'ReplicaStatusDescription',
            'replica_status_percent_progress': 'ReplicaStatusPercentProgress',
            'kms_master_key_id': 'KMSMasterKeyId',
            'provisioned_throughput_override': 'ProvisionedThroughputOverride',
            'global_secondary_indexes': 'GlobalSecondaryIndexes',
            'replica_inaccessible_date_time': 'ReplicaInaccessibleDateTime',
            'replica_table_class_summary': 'ReplicaTableClassSummary'
        }

        self._region_name = region_name
        self._replica_status = replica_status
        self._replica_status_description = replica_status_description
        self._replica_status_percent_progress = replica_status_percent_progress
        self._kms_master_key_id = kms_master_key_id
        self._provisioned_throughput_override = provisioned_throughput_override
        self._global_secondary_indexes = global_secondary_indexes
        self._replica_inaccessible_date_time = replica_inaccessible_date_time
        self._replica_table_class_summary = replica_table_class_summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaDescription of this ReplicaDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_name(self):
        """Gets the region_name of this ReplicaDescription.


        :return: The region_name of this ReplicaDescription.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this ReplicaDescription.


        :param region_name: The region_name of this ReplicaDescription.
        :type region_name: str
        """

        self._region_name = region_name

    @property
    def replica_status(self):
        """Gets the replica_status of this ReplicaDescription.


        :return: The replica_status of this ReplicaDescription.
        :rtype: ReplicaStatus
        """
        return self._replica_status

    @replica_status.setter
    def replica_status(self, replica_status):
        """Sets the replica_status of this ReplicaDescription.


        :param replica_status: The replica_status of this ReplicaDescription.
        :type replica_status: ReplicaStatus
        """

        self._replica_status = replica_status

    @property
    def replica_status_description(self):
        """Gets the replica_status_description of this ReplicaDescription.


        :return: The replica_status_description of this ReplicaDescription.
        :rtype: str
        """
        return self._replica_status_description

    @replica_status_description.setter
    def replica_status_description(self, replica_status_description):
        """Sets the replica_status_description of this ReplicaDescription.


        :param replica_status_description: The replica_status_description of this ReplicaDescription.
        :type replica_status_description: str
        """

        self._replica_status_description = replica_status_description

    @property
    def replica_status_percent_progress(self):
        """Gets the replica_status_percent_progress of this ReplicaDescription.


        :return: The replica_status_percent_progress of this ReplicaDescription.
        :rtype: str
        """
        return self._replica_status_percent_progress

    @replica_status_percent_progress.setter
    def replica_status_percent_progress(self, replica_status_percent_progress):
        """Sets the replica_status_percent_progress of this ReplicaDescription.


        :param replica_status_percent_progress: The replica_status_percent_progress of this ReplicaDescription.
        :type replica_status_percent_progress: str
        """

        self._replica_status_percent_progress = replica_status_percent_progress

    @property
    def kms_master_key_id(self):
        """Gets the kms_master_key_id of this ReplicaDescription.


        :return: The kms_master_key_id of this ReplicaDescription.
        :rtype: str
        """
        return self._kms_master_key_id

    @kms_master_key_id.setter
    def kms_master_key_id(self, kms_master_key_id):
        """Sets the kms_master_key_id of this ReplicaDescription.


        :param kms_master_key_id: The kms_master_key_id of this ReplicaDescription.
        :type kms_master_key_id: str
        """

        self._kms_master_key_id = kms_master_key_id

    @property
    def provisioned_throughput_override(self):
        """Gets the provisioned_throughput_override of this ReplicaDescription.


        :return: The provisioned_throughput_override of this ReplicaDescription.
        :rtype: ReplicaDescriptionProvisionedThroughputOverride
        """
        return self._provisioned_throughput_override

    @provisioned_throughput_override.setter
    def provisioned_throughput_override(self, provisioned_throughput_override):
        """Sets the provisioned_throughput_override of this ReplicaDescription.


        :param provisioned_throughput_override: The provisioned_throughput_override of this ReplicaDescription.
        :type provisioned_throughput_override: ReplicaDescriptionProvisionedThroughputOverride
        """

        self._provisioned_throughput_override = provisioned_throughput_override

    @property
    def global_secondary_indexes(self):
        """Gets the global_secondary_indexes of this ReplicaDescription.


        :return: The global_secondary_indexes of this ReplicaDescription.
        :rtype: List
        """
        return self._global_secondary_indexes

    @global_secondary_indexes.setter
    def global_secondary_indexes(self, global_secondary_indexes):
        """Sets the global_secondary_indexes of this ReplicaDescription.


        :param global_secondary_indexes: The global_secondary_indexes of this ReplicaDescription.
        :type global_secondary_indexes: List
        """

        self._global_secondary_indexes = global_secondary_indexes

    @property
    def replica_inaccessible_date_time(self):
        """Gets the replica_inaccessible_date_time of this ReplicaDescription.


        :return: The replica_inaccessible_date_time of this ReplicaDescription.
        :rtype: datetime
        """
        return self._replica_inaccessible_date_time

    @replica_inaccessible_date_time.setter
    def replica_inaccessible_date_time(self, replica_inaccessible_date_time):
        """Sets the replica_inaccessible_date_time of this ReplicaDescription.


        :param replica_inaccessible_date_time: The replica_inaccessible_date_time of this ReplicaDescription.
        :type replica_inaccessible_date_time: datetime
        """

        self._replica_inaccessible_date_time = replica_inaccessible_date_time

    @property
    def replica_table_class_summary(self):
        """Gets the replica_table_class_summary of this ReplicaDescription.


        :return: The replica_table_class_summary of this ReplicaDescription.
        :rtype: TableClassSummary
        """
        return self._replica_table_class_summary

    @replica_table_class_summary.setter
    def replica_table_class_summary(self, replica_table_class_summary):
        """Sets the replica_table_class_summary of this ReplicaDescription.


        :param replica_table_class_summary: The replica_table_class_summary of this ReplicaDescription.
        :type replica_table_class_summary: TableClassSummary
        """

        self._replica_table_class_summary = replica_table_class_summary
