# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.global_secondary_index_description_provisioned_throughput import GlobalSecondaryIndexDescriptionProvisionedThroughput
from openapi_server.models.global_secondary_index_projection import GlobalSecondaryIndexProjection
from openapi_server.models.index_status import IndexStatus
from openapi_server import util


class GlobalSecondaryIndexDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_name: str=None, key_schema: List=None, projection: GlobalSecondaryIndexProjection=None, index_status: IndexStatus=None, backfilling: bool=None, provisioned_throughput: GlobalSecondaryIndexDescriptionProvisionedThroughput=None, index_size_bytes: int=None, item_count: int=None, index_arn: str=None):
        """GlobalSecondaryIndexDescription - a model defined in OpenAPI

        :param index_name: The index_name of this GlobalSecondaryIndexDescription.
        :param key_schema: The key_schema of this GlobalSecondaryIndexDescription.
        :param projection: The projection of this GlobalSecondaryIndexDescription.
        :param index_status: The index_status of this GlobalSecondaryIndexDescription.
        :param backfilling: The backfilling of this GlobalSecondaryIndexDescription.
        :param provisioned_throughput: The provisioned_throughput of this GlobalSecondaryIndexDescription.
        :param index_size_bytes: The index_size_bytes of this GlobalSecondaryIndexDescription.
        :param item_count: The item_count of this GlobalSecondaryIndexDescription.
        :param index_arn: The index_arn of this GlobalSecondaryIndexDescription.
        """
        self.openapi_types = {
            'index_name': str,
            'key_schema': List,
            'projection': GlobalSecondaryIndexProjection,
            'index_status': IndexStatus,
            'backfilling': bool,
            'provisioned_throughput': GlobalSecondaryIndexDescriptionProvisionedThroughput,
            'index_size_bytes': int,
            'item_count': int,
            'index_arn': str
        }

        self.attribute_map = {
            'index_name': 'IndexName',
            'key_schema': 'KeySchema',
            'projection': 'Projection',
            'index_status': 'IndexStatus',
            'backfilling': 'Backfilling',
            'provisioned_throughput': 'ProvisionedThroughput',
            'index_size_bytes': 'IndexSizeBytes',
            'item_count': 'ItemCount',
            'index_arn': 'IndexArn'
        }

        self._index_name = index_name
        self._key_schema = key_schema
        self._projection = projection
        self._index_status = index_status
        self._backfilling = backfilling
        self._provisioned_throughput = provisioned_throughput
        self._index_size_bytes = index_size_bytes
        self._item_count = item_count
        self._index_arn = index_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalSecondaryIndexDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalSecondaryIndexDescription of this GlobalSecondaryIndexDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_name(self):
        """Gets the index_name of this GlobalSecondaryIndexDescription.


        :return: The index_name of this GlobalSecondaryIndexDescription.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this GlobalSecondaryIndexDescription.


        :param index_name: The index_name of this GlobalSecondaryIndexDescription.
        :type index_name: str
        """

        self._index_name = index_name

    @property
    def key_schema(self):
        """Gets the key_schema of this GlobalSecondaryIndexDescription.


        :return: The key_schema of this GlobalSecondaryIndexDescription.
        :rtype: List
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this GlobalSecondaryIndexDescription.


        :param key_schema: The key_schema of this GlobalSecondaryIndexDescription.
        :type key_schema: List
        """

        self._key_schema = key_schema

    @property
    def projection(self):
        """Gets the projection of this GlobalSecondaryIndexDescription.


        :return: The projection of this GlobalSecondaryIndexDescription.
        :rtype: GlobalSecondaryIndexProjection
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this GlobalSecondaryIndexDescription.


        :param projection: The projection of this GlobalSecondaryIndexDescription.
        :type projection: GlobalSecondaryIndexProjection
        """

        self._projection = projection

    @property
    def index_status(self):
        """Gets the index_status of this GlobalSecondaryIndexDescription.


        :return: The index_status of this GlobalSecondaryIndexDescription.
        :rtype: IndexStatus
        """
        return self._index_status

    @index_status.setter
    def index_status(self, index_status):
        """Sets the index_status of this GlobalSecondaryIndexDescription.


        :param index_status: The index_status of this GlobalSecondaryIndexDescription.
        :type index_status: IndexStatus
        """

        self._index_status = index_status

    @property
    def backfilling(self):
        """Gets the backfilling of this GlobalSecondaryIndexDescription.


        :return: The backfilling of this GlobalSecondaryIndexDescription.
        :rtype: bool
        """
        return self._backfilling

    @backfilling.setter
    def backfilling(self, backfilling):
        """Sets the backfilling of this GlobalSecondaryIndexDescription.


        :param backfilling: The backfilling of this GlobalSecondaryIndexDescription.
        :type backfilling: bool
        """

        self._backfilling = backfilling

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this GlobalSecondaryIndexDescription.


        :return: The provisioned_throughput of this GlobalSecondaryIndexDescription.
        :rtype: GlobalSecondaryIndexDescriptionProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this GlobalSecondaryIndexDescription.


        :param provisioned_throughput: The provisioned_throughput of this GlobalSecondaryIndexDescription.
        :type provisioned_throughput: GlobalSecondaryIndexDescriptionProvisionedThroughput
        """

        self._provisioned_throughput = provisioned_throughput

    @property
    def index_size_bytes(self):
        """Gets the index_size_bytes of this GlobalSecondaryIndexDescription.


        :return: The index_size_bytes of this GlobalSecondaryIndexDescription.
        :rtype: int
        """
        return self._index_size_bytes

    @index_size_bytes.setter
    def index_size_bytes(self, index_size_bytes):
        """Sets the index_size_bytes of this GlobalSecondaryIndexDescription.


        :param index_size_bytes: The index_size_bytes of this GlobalSecondaryIndexDescription.
        :type index_size_bytes: int
        """

        self._index_size_bytes = index_size_bytes

    @property
    def item_count(self):
        """Gets the item_count of this GlobalSecondaryIndexDescription.


        :return: The item_count of this GlobalSecondaryIndexDescription.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this GlobalSecondaryIndexDescription.


        :param item_count: The item_count of this GlobalSecondaryIndexDescription.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def index_arn(self):
        """Gets the index_arn of this GlobalSecondaryIndexDescription.


        :return: The index_arn of this GlobalSecondaryIndexDescription.
        :rtype: str
        """
        return self._index_arn

    @index_arn.setter
    def index_arn(self, index_arn):
        """Sets the index_arn of this GlobalSecondaryIndexDescription.


        :param index_arn: The index_arn of this GlobalSecondaryIndexDescription.
        :type index_arn: str
        """

        self._index_arn = index_arn
