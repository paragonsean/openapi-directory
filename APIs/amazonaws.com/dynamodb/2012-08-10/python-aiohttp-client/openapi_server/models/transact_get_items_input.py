# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_consumed_capacity import ReturnConsumedCapacity
from openapi_server import util


class TransactGetItemsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transact_items: List=None, return_consumed_capacity: ReturnConsumedCapacity=None):
        """TransactGetItemsInput - a model defined in OpenAPI

        :param transact_items: The transact_items of this TransactGetItemsInput.
        :param return_consumed_capacity: The return_consumed_capacity of this TransactGetItemsInput.
        """
        self.openapi_types = {
            'transact_items': List,
            'return_consumed_capacity': ReturnConsumedCapacity
        }

        self.attribute_map = {
            'transact_items': 'TransactItems',
            'return_consumed_capacity': 'ReturnConsumedCapacity'
        }

        self._transact_items = transact_items
        self._return_consumed_capacity = return_consumed_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactGetItemsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactGetItemsInput of this TransactGetItemsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transact_items(self):
        """Gets the transact_items of this TransactGetItemsInput.


        :return: The transact_items of this TransactGetItemsInput.
        :rtype: List
        """
        return self._transact_items

    @transact_items.setter
    def transact_items(self, transact_items):
        """Sets the transact_items of this TransactGetItemsInput.


        :param transact_items: The transact_items of this TransactGetItemsInput.
        :type transact_items: List
        """
        if transact_items is None:
            raise ValueError("Invalid value for `transact_items`, must not be `None`")

        self._transact_items = transact_items

    @property
    def return_consumed_capacity(self):
        """Gets the return_consumed_capacity of this TransactGetItemsInput.


        :return: The return_consumed_capacity of this TransactGetItemsInput.
        :rtype: ReturnConsumedCapacity
        """
        return self._return_consumed_capacity

    @return_consumed_capacity.setter
    def return_consumed_capacity(self, return_consumed_capacity):
        """Sets the return_consumed_capacity of this TransactGetItemsInput.


        :param return_consumed_capacity: The return_consumed_capacity of this TransactGetItemsInput.
        :type return_consumed_capacity: ReturnConsumedCapacity
        """

        self._return_consumed_capacity = return_consumed_capacity
