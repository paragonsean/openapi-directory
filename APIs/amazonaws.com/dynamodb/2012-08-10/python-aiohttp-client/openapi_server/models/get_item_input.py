# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_consumed_capacity import ReturnConsumedCapacity
from openapi_server import util


class GetItemInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, key: Dict=None, attributes_to_get: List=None, consistent_read: bool=None, return_consumed_capacity: ReturnConsumedCapacity=None, projection_expression: str=None, expression_attribute_names: Dict=None):
        """GetItemInput - a model defined in OpenAPI

        :param table_name: The table_name of this GetItemInput.
        :param key: The key of this GetItemInput.
        :param attributes_to_get: The attributes_to_get of this GetItemInput.
        :param consistent_read: The consistent_read of this GetItemInput.
        :param return_consumed_capacity: The return_consumed_capacity of this GetItemInput.
        :param projection_expression: The projection_expression of this GetItemInput.
        :param expression_attribute_names: The expression_attribute_names of this GetItemInput.
        """
        self.openapi_types = {
            'table_name': str,
            'key': Dict,
            'attributes_to_get': List,
            'consistent_read': bool,
            'return_consumed_capacity': ReturnConsumedCapacity,
            'projection_expression': str,
            'expression_attribute_names': Dict
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'key': 'Key',
            'attributes_to_get': 'AttributesToGet',
            'consistent_read': 'ConsistentRead',
            'return_consumed_capacity': 'ReturnConsumedCapacity',
            'projection_expression': 'ProjectionExpression',
            'expression_attribute_names': 'ExpressionAttributeNames'
        }

        self._table_name = table_name
        self._key = key
        self._attributes_to_get = attributes_to_get
        self._consistent_read = consistent_read
        self._return_consumed_capacity = return_consumed_capacity
        self._projection_expression = projection_expression
        self._expression_attribute_names = expression_attribute_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetItemInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetItemInput of this GetItemInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this GetItemInput.


        :return: The table_name of this GetItemInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this GetItemInput.


        :param table_name: The table_name of this GetItemInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def key(self):
        """Gets the key of this GetItemInput.


        :return: The key of this GetItemInput.
        :rtype: Dict
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GetItemInput.


        :param key: The key of this GetItemInput.
        :type key: Dict
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def attributes_to_get(self):
        """Gets the attributes_to_get of this GetItemInput.


        :return: The attributes_to_get of this GetItemInput.
        :rtype: List
        """
        return self._attributes_to_get

    @attributes_to_get.setter
    def attributes_to_get(self, attributes_to_get):
        """Sets the attributes_to_get of this GetItemInput.


        :param attributes_to_get: The attributes_to_get of this GetItemInput.
        :type attributes_to_get: List
        """

        self._attributes_to_get = attributes_to_get

    @property
    def consistent_read(self):
        """Gets the consistent_read of this GetItemInput.


        :return: The consistent_read of this GetItemInput.
        :rtype: bool
        """
        return self._consistent_read

    @consistent_read.setter
    def consistent_read(self, consistent_read):
        """Sets the consistent_read of this GetItemInput.


        :param consistent_read: The consistent_read of this GetItemInput.
        :type consistent_read: bool
        """

        self._consistent_read = consistent_read

    @property
    def return_consumed_capacity(self):
        """Gets the return_consumed_capacity of this GetItemInput.


        :return: The return_consumed_capacity of this GetItemInput.
        :rtype: ReturnConsumedCapacity
        """
        return self._return_consumed_capacity

    @return_consumed_capacity.setter
    def return_consumed_capacity(self, return_consumed_capacity):
        """Sets the return_consumed_capacity of this GetItemInput.


        :param return_consumed_capacity: The return_consumed_capacity of this GetItemInput.
        :type return_consumed_capacity: ReturnConsumedCapacity
        """

        self._return_consumed_capacity = return_consumed_capacity

    @property
    def projection_expression(self):
        """Gets the projection_expression of this GetItemInput.


        :return: The projection_expression of this GetItemInput.
        :rtype: str
        """
        return self._projection_expression

    @projection_expression.setter
    def projection_expression(self, projection_expression):
        """Sets the projection_expression of this GetItemInput.


        :param projection_expression: The projection_expression of this GetItemInput.
        :type projection_expression: str
        """

        self._projection_expression = projection_expression

    @property
    def expression_attribute_names(self):
        """Gets the expression_attribute_names of this GetItemInput.


        :return: The expression_attribute_names of this GetItemInput.
        :rtype: Dict
        """
        return self._expression_attribute_names

    @expression_attribute_names.setter
    def expression_attribute_names(self, expression_attribute_names):
        """Sets the expression_attribute_names of this GetItemInput.


        :param expression_attribute_names: The expression_attribute_names of this GetItemInput.
        :type expression_attribute_names: Dict
        """

        self._expression_attribute_names = expression_attribute_names
