# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_values_on_condition_check_failure import ReturnValuesOnConditionCheckFailure
from openapi_server import util


class ParameterizedStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, statement: str=None, parameters: List=None, return_values_on_condition_check_failure: ReturnValuesOnConditionCheckFailure=None):
        """ParameterizedStatement - a model defined in OpenAPI

        :param statement: The statement of this ParameterizedStatement.
        :param parameters: The parameters of this ParameterizedStatement.
        :param return_values_on_condition_check_failure: The return_values_on_condition_check_failure of this ParameterizedStatement.
        """
        self.openapi_types = {
            'statement': str,
            'parameters': List,
            'return_values_on_condition_check_failure': ReturnValuesOnConditionCheckFailure
        }

        self.attribute_map = {
            'statement': 'Statement',
            'parameters': 'Parameters',
            'return_values_on_condition_check_failure': 'ReturnValuesOnConditionCheckFailure'
        }

        self._statement = statement
        self._parameters = parameters
        self._return_values_on_condition_check_failure = return_values_on_condition_check_failure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterizedStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterizedStatement of this ParameterizedStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def statement(self):
        """Gets the statement of this ParameterizedStatement.


        :return: The statement of this ParameterizedStatement.
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this ParameterizedStatement.


        :param statement: The statement of this ParameterizedStatement.
        :type statement: str
        """
        if statement is None:
            raise ValueError("Invalid value for `statement`, must not be `None`")

        self._statement = statement

    @property
    def parameters(self):
        """Gets the parameters of this ParameterizedStatement.


        :return: The parameters of this ParameterizedStatement.
        :rtype: List
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ParameterizedStatement.


        :param parameters: The parameters of this ParameterizedStatement.
        :type parameters: List
        """

        self._parameters = parameters

    @property
    def return_values_on_condition_check_failure(self):
        """Gets the return_values_on_condition_check_failure of this ParameterizedStatement.


        :return: The return_values_on_condition_check_failure of this ParameterizedStatement.
        :rtype: ReturnValuesOnConditionCheckFailure
        """
        return self._return_values_on_condition_check_failure

    @return_values_on_condition_check_failure.setter
    def return_values_on_condition_check_failure(self, return_values_on_condition_check_failure):
        """Sets the return_values_on_condition_check_failure of this ParameterizedStatement.


        :param return_values_on_condition_check_failure: The return_values_on_condition_check_failure of this ParameterizedStatement.
        :type return_values_on_condition_check_failure: ReturnValuesOnConditionCheckFailure
        """

        self._return_values_on_condition_check_failure = return_values_on_condition_check_failure
