# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scan_output_consumed_capacity import ScanOutputConsumedCapacity
from openapi_server import util


class ScanOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List=None, count: int=None, scanned_count: int=None, last_evaluated_key: Dict=None, consumed_capacity: ScanOutputConsumedCapacity=None):
        """ScanOutput - a model defined in OpenAPI

        :param items: The items of this ScanOutput.
        :param count: The count of this ScanOutput.
        :param scanned_count: The scanned_count of this ScanOutput.
        :param last_evaluated_key: The last_evaluated_key of this ScanOutput.
        :param consumed_capacity: The consumed_capacity of this ScanOutput.
        """
        self.openapi_types = {
            'items': List,
            'count': int,
            'scanned_count': int,
            'last_evaluated_key': Dict,
            'consumed_capacity': ScanOutputConsumedCapacity
        }

        self.attribute_map = {
            'items': 'Items',
            'count': 'Count',
            'scanned_count': 'ScannedCount',
            'last_evaluated_key': 'LastEvaluatedKey',
            'consumed_capacity': 'ConsumedCapacity'
        }

        self._items = items
        self._count = count
        self._scanned_count = scanned_count
        self._last_evaluated_key = last_evaluated_key
        self._consumed_capacity = consumed_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanOutput of this ScanOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this ScanOutput.


        :return: The items of this ScanOutput.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ScanOutput.


        :param items: The items of this ScanOutput.
        :type items: List
        """

        self._items = items

    @property
    def count(self):
        """Gets the count of this ScanOutput.


        :return: The count of this ScanOutput.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ScanOutput.


        :param count: The count of this ScanOutput.
        :type count: int
        """

        self._count = count

    @property
    def scanned_count(self):
        """Gets the scanned_count of this ScanOutput.


        :return: The scanned_count of this ScanOutput.
        :rtype: int
        """
        return self._scanned_count

    @scanned_count.setter
    def scanned_count(self, scanned_count):
        """Sets the scanned_count of this ScanOutput.


        :param scanned_count: The scanned_count of this ScanOutput.
        :type scanned_count: int
        """

        self._scanned_count = scanned_count

    @property
    def last_evaluated_key(self):
        """Gets the last_evaluated_key of this ScanOutput.


        :return: The last_evaluated_key of this ScanOutput.
        :rtype: Dict
        """
        return self._last_evaluated_key

    @last_evaluated_key.setter
    def last_evaluated_key(self, last_evaluated_key):
        """Sets the last_evaluated_key of this ScanOutput.


        :param last_evaluated_key: The last_evaluated_key of this ScanOutput.
        :type last_evaluated_key: Dict
        """

        self._last_evaluated_key = last_evaluated_key

    @property
    def consumed_capacity(self):
        """Gets the consumed_capacity of this ScanOutput.


        :return: The consumed_capacity of this ScanOutput.
        :rtype: ScanOutputConsumedCapacity
        """
        return self._consumed_capacity

    @consumed_capacity.setter
    def consumed_capacity(self, consumed_capacity):
        """Sets the consumed_capacity of this ScanOutput.


        :param consumed_capacity: The consumed_capacity of this ScanOutput.
        :type consumed_capacity: ScanOutputConsumedCapacity
        """

        self._consumed_capacity = consumed_capacity
