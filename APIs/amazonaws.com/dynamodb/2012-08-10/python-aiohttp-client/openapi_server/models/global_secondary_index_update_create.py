# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_global_secondary_index_action_projection import CreateGlobalSecondaryIndexActionProjection
from openapi_server.models.create_global_secondary_index_action_provisioned_throughput import CreateGlobalSecondaryIndexActionProvisionedThroughput
from openapi_server import util


class GlobalSecondaryIndexUpdateCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_name: str=None, key_schema: List=None, projection: CreateGlobalSecondaryIndexActionProjection=None, provisioned_throughput: CreateGlobalSecondaryIndexActionProvisionedThroughput=None):
        """GlobalSecondaryIndexUpdateCreate - a model defined in OpenAPI

        :param index_name: The index_name of this GlobalSecondaryIndexUpdateCreate.
        :param key_schema: The key_schema of this GlobalSecondaryIndexUpdateCreate.
        :param projection: The projection of this GlobalSecondaryIndexUpdateCreate.
        :param provisioned_throughput: The provisioned_throughput of this GlobalSecondaryIndexUpdateCreate.
        """
        self.openapi_types = {
            'index_name': str,
            'key_schema': List,
            'projection': CreateGlobalSecondaryIndexActionProjection,
            'provisioned_throughput': CreateGlobalSecondaryIndexActionProvisionedThroughput
        }

        self.attribute_map = {
            'index_name': 'IndexName',
            'key_schema': 'KeySchema',
            'projection': 'Projection',
            'provisioned_throughput': 'ProvisionedThroughput'
        }

        self._index_name = index_name
        self._key_schema = key_schema
        self._projection = projection
        self._provisioned_throughput = provisioned_throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalSecondaryIndexUpdateCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalSecondaryIndexUpdate_Create of this GlobalSecondaryIndexUpdateCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_name(self):
        """Gets the index_name of this GlobalSecondaryIndexUpdateCreate.


        :return: The index_name of this GlobalSecondaryIndexUpdateCreate.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this GlobalSecondaryIndexUpdateCreate.


        :param index_name: The index_name of this GlobalSecondaryIndexUpdateCreate.
        :type index_name: str
        """
        if index_name is None:
            raise ValueError("Invalid value for `index_name`, must not be `None`")

        self._index_name = index_name

    @property
    def key_schema(self):
        """Gets the key_schema of this GlobalSecondaryIndexUpdateCreate.


        :return: The key_schema of this GlobalSecondaryIndexUpdateCreate.
        :rtype: List
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this GlobalSecondaryIndexUpdateCreate.


        :param key_schema: The key_schema of this GlobalSecondaryIndexUpdateCreate.
        :type key_schema: List
        """
        if key_schema is None:
            raise ValueError("Invalid value for `key_schema`, must not be `None`")

        self._key_schema = key_schema

    @property
    def projection(self):
        """Gets the projection of this GlobalSecondaryIndexUpdateCreate.


        :return: The projection of this GlobalSecondaryIndexUpdateCreate.
        :rtype: CreateGlobalSecondaryIndexActionProjection
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this GlobalSecondaryIndexUpdateCreate.


        :param projection: The projection of this GlobalSecondaryIndexUpdateCreate.
        :type projection: CreateGlobalSecondaryIndexActionProjection
        """
        if projection is None:
            raise ValueError("Invalid value for `projection`, must not be `None`")

        self._projection = projection

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this GlobalSecondaryIndexUpdateCreate.


        :return: The provisioned_throughput of this GlobalSecondaryIndexUpdateCreate.
        :rtype: CreateGlobalSecondaryIndexActionProvisionedThroughput
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this GlobalSecondaryIndexUpdateCreate.


        :param provisioned_throughput: The provisioned_throughput of this GlobalSecondaryIndexUpdateCreate.
        :type provisioned_throughput: CreateGlobalSecondaryIndexActionProvisionedThroughput
        """

        self._provisioned_throughput = provisioned_throughput
