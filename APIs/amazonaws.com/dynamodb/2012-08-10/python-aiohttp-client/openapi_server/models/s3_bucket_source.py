# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3BucketSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_bucket_owner: str=None, s3_bucket: str=None, s3_key_prefix: str=None):
        """S3BucketSource - a model defined in OpenAPI

        :param s3_bucket_owner: The s3_bucket_owner of this S3BucketSource.
        :param s3_bucket: The s3_bucket of this S3BucketSource.
        :param s3_key_prefix: The s3_key_prefix of this S3BucketSource.
        """
        self.openapi_types = {
            's3_bucket_owner': str,
            's3_bucket': str,
            's3_key_prefix': str
        }

        self.attribute_map = {
            's3_bucket_owner': 'S3BucketOwner',
            's3_bucket': 'S3Bucket',
            's3_key_prefix': 'S3KeyPrefix'
        }

        self._s3_bucket_owner = s3_bucket_owner
        self._s3_bucket = s3_bucket
        self._s3_key_prefix = s3_key_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3BucketSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3BucketSource of this S3BucketSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_bucket_owner(self):
        """Gets the s3_bucket_owner of this S3BucketSource.


        :return: The s3_bucket_owner of this S3BucketSource.
        :rtype: str
        """
        return self._s3_bucket_owner

    @s3_bucket_owner.setter
    def s3_bucket_owner(self, s3_bucket_owner):
        """Sets the s3_bucket_owner of this S3BucketSource.


        :param s3_bucket_owner: The s3_bucket_owner of this S3BucketSource.
        :type s3_bucket_owner: str
        """

        self._s3_bucket_owner = s3_bucket_owner

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this S3BucketSource.


        :return: The s3_bucket of this S3BucketSource.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this S3BucketSource.


        :param s3_bucket: The s3_bucket of this S3BucketSource.
        :type s3_bucket: str
        """
        if s3_bucket is None:
            raise ValueError("Invalid value for `s3_bucket`, must not be `None`")

        self._s3_bucket = s3_bucket

    @property
    def s3_key_prefix(self):
        """Gets the s3_key_prefix of this S3BucketSource.


        :return: The s3_key_prefix of this S3BucketSource.
        :rtype: str
        """
        return self._s3_key_prefix

    @s3_key_prefix.setter
    def s3_key_prefix(self, s3_key_prefix):
        """Sets the s3_key_prefix of this S3BucketSource.


        :param s3_key_prefix: The s3_key_prefix of this S3BucketSource.
        :type s3_key_prefix: str
        """

        self._s3_key_prefix = s3_key_prefix
