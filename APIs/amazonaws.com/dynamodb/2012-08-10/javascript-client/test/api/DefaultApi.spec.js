/**
 * Amazon DynamoDB
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.</p> <p>With DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the Amazon Web Services Management Console to monitor resource utilization and performance metrics.</p> <p>DynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an Amazon Web Services Region, providing built-in high availability and data durability.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonDynamoDb);
  }
}(this, function(expect, AmazonDynamoDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonDynamoDb.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchExecuteStatement', function() {
      it('should call batchExecuteStatement successfully', function(done) {
        //uncomment below and update the code to test batchExecuteStatement
        //instance.batchExecuteStatement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetItem', function() {
      it('should call batchGetItem successfully', function(done) {
        //uncomment below and update the code to test batchGetItem
        //instance.batchGetItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchWriteItem', function() {
      it('should call batchWriteItem successfully', function(done) {
        //uncomment below and update the code to test batchWriteItem
        //instance.batchWriteItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackup', function() {
      it('should call createBackup successfully', function(done) {
        //uncomment below and update the code to test createBackup
        //instance.createBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGlobalTable', function() {
      it('should call createGlobalTable successfully', function(done) {
        //uncomment below and update the code to test createGlobalTable
        //instance.createGlobalTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTable', function() {
      it('should call createTable successfully', function(done) {
        //uncomment below and update the code to test createTable
        //instance.createTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackup', function() {
      it('should call deleteBackup successfully', function(done) {
        //uncomment below and update the code to test deleteBackup
        //instance.deleteBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteItem', function() {
      it('should call deleteItem successfully', function(done) {
        //uncomment below and update the code to test deleteItem
        //instance.deleteItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTable', function() {
      it('should call deleteTable successfully', function(done) {
        //uncomment below and update the code to test deleteTable
        //instance.deleteTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBackup', function() {
      it('should call describeBackup successfully', function(done) {
        //uncomment below and update the code to test describeBackup
        //instance.describeBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContinuousBackups', function() {
      it('should call describeContinuousBackups successfully', function(done) {
        //uncomment below and update the code to test describeContinuousBackups
        //instance.describeContinuousBackups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeContributorInsights', function() {
      it('should call describeContributorInsights successfully', function(done) {
        //uncomment below and update the code to test describeContributorInsights
        //instance.describeContributorInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEndpoints', function() {
      it('should call describeEndpoints successfully', function(done) {
        //uncomment below and update the code to test describeEndpoints
        //instance.describeEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeExport', function() {
      it('should call describeExport successfully', function(done) {
        //uncomment below and update the code to test describeExport
        //instance.describeExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGlobalTable', function() {
      it('should call describeGlobalTable successfully', function(done) {
        //uncomment below and update the code to test describeGlobalTable
        //instance.describeGlobalTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGlobalTableSettings', function() {
      it('should call describeGlobalTableSettings successfully', function(done) {
        //uncomment below and update the code to test describeGlobalTableSettings
        //instance.describeGlobalTableSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImport', function() {
      it('should call describeImport successfully', function(done) {
        //uncomment below and update the code to test describeImport
        //instance.describeImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeKinesisStreamingDestination', function() {
      it('should call describeKinesisStreamingDestination successfully', function(done) {
        //uncomment below and update the code to test describeKinesisStreamingDestination
        //instance.describeKinesisStreamingDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLimits', function() {
      it('should call describeLimits successfully', function(done) {
        //uncomment below and update the code to test describeLimits
        //instance.describeLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTable', function() {
      it('should call describeTable successfully', function(done) {
        //uncomment below and update the code to test describeTable
        //instance.describeTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTableReplicaAutoScaling', function() {
      it('should call describeTableReplicaAutoScaling successfully', function(done) {
        //uncomment below and update the code to test describeTableReplicaAutoScaling
        //instance.describeTableReplicaAutoScaling(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTimeToLive', function() {
      it('should call describeTimeToLive successfully', function(done) {
        //uncomment below and update the code to test describeTimeToLive
        //instance.describeTimeToLive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableKinesisStreamingDestination', function() {
      it('should call disableKinesisStreamingDestination successfully', function(done) {
        //uncomment below and update the code to test disableKinesisStreamingDestination
        //instance.disableKinesisStreamingDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableKinesisStreamingDestination', function() {
      it('should call enableKinesisStreamingDestination successfully', function(done) {
        //uncomment below and update the code to test enableKinesisStreamingDestination
        //instance.enableKinesisStreamingDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('executeStatement', function() {
      it('should call executeStatement successfully', function(done) {
        //uncomment below and update the code to test executeStatement
        //instance.executeStatement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('executeTransaction', function() {
      it('should call executeTransaction successfully', function(done) {
        //uncomment below and update the code to test executeTransaction
        //instance.executeTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportTableToPointInTime', function() {
      it('should call exportTableToPointInTime successfully', function(done) {
        //uncomment below and update the code to test exportTableToPointInTime
        //instance.exportTableToPointInTime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItem', function() {
      it('should call getItem successfully', function(done) {
        //uncomment below and update the code to test getItem
        //instance.getItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importTable', function() {
      it('should call importTable successfully', function(done) {
        //uncomment below and update the code to test importTable
        //instance.importTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBackups', function() {
      it('should call listBackups successfully', function(done) {
        //uncomment below and update the code to test listBackups
        //instance.listBackups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContributorInsights', function() {
      it('should call listContributorInsights successfully', function(done) {
        //uncomment below and update the code to test listContributorInsights
        //instance.listContributorInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExports', function() {
      it('should call listExports successfully', function(done) {
        //uncomment below and update the code to test listExports
        //instance.listExports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGlobalTables', function() {
      it('should call listGlobalTables successfully', function(done) {
        //uncomment below and update the code to test listGlobalTables
        //instance.listGlobalTables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImports', function() {
      it('should call listImports successfully', function(done) {
        //uncomment below and update the code to test listImports
        //instance.listImports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTables', function() {
      it('should call listTables successfully', function(done) {
        //uncomment below and update the code to test listTables
        //instance.listTables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsOfResource', function() {
      it('should call listTagsOfResource successfully', function(done) {
        //uncomment below and update the code to test listTagsOfResource
        //instance.listTagsOfResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putItem', function() {
      it('should call putItem successfully', function(done) {
        //uncomment below and update the code to test putItem
        //instance.putItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('query', function() {
      it('should call query successfully', function(done) {
        //uncomment below and update the code to test query
        //instance.query(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreTableFromBackup', function() {
      it('should call restoreTableFromBackup successfully', function(done) {
        //uncomment below and update the code to test restoreTableFromBackup
        //instance.restoreTableFromBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreTableToPointInTime', function() {
      it('should call restoreTableToPointInTime successfully', function(done) {
        //uncomment below and update the code to test restoreTableToPointInTime
        //instance.restoreTableToPointInTime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scan', function() {
      it('should call scan successfully', function(done) {
        //uncomment below and update the code to test scan
        //instance.scan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactGetItems', function() {
      it('should call transactGetItems successfully', function(done) {
        //uncomment below and update the code to test transactGetItems
        //instance.transactGetItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactWriteItems', function() {
      it('should call transactWriteItems successfully', function(done) {
        //uncomment below and update the code to test transactWriteItems
        //instance.transactWriteItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContinuousBackups', function() {
      it('should call updateContinuousBackups successfully', function(done) {
        //uncomment below and update the code to test updateContinuousBackups
        //instance.updateContinuousBackups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContributorInsights', function() {
      it('should call updateContributorInsights successfully', function(done) {
        //uncomment below and update the code to test updateContributorInsights
        //instance.updateContributorInsights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGlobalTable', function() {
      it('should call updateGlobalTable successfully', function(done) {
        //uncomment below and update the code to test updateGlobalTable
        //instance.updateGlobalTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGlobalTableSettings', function() {
      it('should call updateGlobalTableSettings successfully', function(done) {
        //uncomment below and update the code to test updateGlobalTableSettings
        //instance.updateGlobalTableSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateItem', function() {
      it('should call updateItem successfully', function(done) {
        //uncomment below and update the code to test updateItem
        //instance.updateItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTable', function() {
      it('should call updateTable successfully', function(done) {
        //uncomment below and update the code to test updateTable
        //instance.updateTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTableReplicaAutoScaling', function() {
      it('should call updateTableReplicaAutoScaling successfully', function(done) {
        //uncomment below and update the code to test updateTableReplicaAutoScaling
        //instance.updateTableReplicaAutoScaling(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTimeToLive', function() {
      it('should call updateTimeToLive successfully', function(done) {
        //uncomment below and update the code to test updateTimeToLive
        //instance.updateTimeToLive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
