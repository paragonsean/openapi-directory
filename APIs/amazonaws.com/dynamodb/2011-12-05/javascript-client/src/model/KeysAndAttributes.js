/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Key from './Key';

/**
 * The KeysAndAttributes model module.
 * @module model/KeysAndAttributes
 * @version 2011-12-05
 */
class KeysAndAttributes {
    /**
     * Constructs a new <code>KeysAndAttributes</code>.
     * @alias module:model/KeysAndAttributes
     * @param keys {Array.<module:model/Key>} 
     */
    constructor(keys) { 
        
        KeysAndAttributes.initialize(this, keys);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keys) { 
        obj['Keys'] = keys;
    }

    /**
     * Constructs a <code>KeysAndAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeysAndAttributes} obj Optional instance to populate.
     * @return {module:model/KeysAndAttributes} The populated <code>KeysAndAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeysAndAttributes();

            if (data.hasOwnProperty('Keys')) {
                obj['Keys'] = ApiClient.convertToType(data['Keys'], [Key]);
            }
            if (data.hasOwnProperty('AttributesToGet')) {
                obj['AttributesToGet'] = ApiClient.convertToType(data['AttributesToGet'], ['String']);
            }
            if (data.hasOwnProperty('ConsistentRead')) {
                obj['ConsistentRead'] = ApiClient.convertToType(data['ConsistentRead'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeysAndAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeysAndAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeysAndAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Keys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Keys'])) {
                throw new Error("Expected the field `Keys` to be an array in the JSON data but got " + data['Keys']);
            }
            // validate the optional field `Keys` (array)
            for (const item of data['Keys']) {
                Key.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AttributesToGet'])) {
            throw new Error("Expected the field `AttributesToGet` to be an array in the JSON data but got " + data['AttributesToGet']);
        }

        return true;
    }


}

KeysAndAttributes.RequiredProperties = ["Keys"];

/**
 * @member {Array.<module:model/Key>} Keys
 */
KeysAndAttributes.prototype['Keys'] = undefined;

/**
 * List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.
 * @member {Array.<String>} AttributesToGet
 */
KeysAndAttributes.prototype['AttributesToGet'] = undefined;

/**
 * If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.
 * @member {Boolean} ConsistentRead
 */
KeysAndAttributes.prototype['ConsistentRead'] = undefined;






export default KeysAndAttributes;

