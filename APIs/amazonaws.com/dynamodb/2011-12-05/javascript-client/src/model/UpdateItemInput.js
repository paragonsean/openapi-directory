/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValueUpdate from './AttributeValueUpdate';
import ExpectedAttributeValue from './ExpectedAttributeValue';
import Key from './Key';
import ReturnValue from './ReturnValue';

/**
 * The UpdateItemInput model module.
 * @module model/UpdateItemInput
 * @version 2011-12-05
 */
class UpdateItemInput {
    /**
     * Constructs a new <code>UpdateItemInput</code>.
     * @alias module:model/UpdateItemInput
     * @param tableName {String} 
     * @param key {module:model/Key} 
     * @param attributeUpdates {Object.<String, module:model/AttributeValueUpdate>} Map of attribute name to the new value and action for the update. The attribute names specify the attributes to modify, and cannot contain any primary key attributes.
     */
    constructor(tableName, key, attributeUpdates) { 
        
        UpdateItemInput.initialize(this, tableName, key, attributeUpdates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tableName, key, attributeUpdates) { 
        obj['TableName'] = tableName;
        obj['Key'] = key;
        obj['AttributeUpdates'] = attributeUpdates;
    }

    /**
     * Constructs a <code>UpdateItemInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateItemInput} obj Optional instance to populate.
     * @return {module:model/UpdateItemInput} The populated <code>UpdateItemInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateItemInput();

            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('Key')) {
                obj['Key'] = Key.constructFromObject(data['Key']);
            }
            if (data.hasOwnProperty('AttributeUpdates')) {
                obj['AttributeUpdates'] = ApiClient.convertToType(data['AttributeUpdates'], {'String': AttributeValueUpdate});
            }
            if (data.hasOwnProperty('Expected')) {
                obj['Expected'] = ApiClient.convertToType(data['Expected'], {'String': ExpectedAttributeValue});
            }
            if (data.hasOwnProperty('ReturnValues')) {
                obj['ReturnValues'] = ReturnValue.constructFromObject(data['ReturnValues']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateItemInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateItemInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateItemInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `Key`
        if (data['Key']) { // data not null
          Key.validateJSON(data['Key']);
        }

        return true;
    }


}

UpdateItemInput.RequiredProperties = ["TableName", "Key", "AttributeUpdates"];

/**
 * @member {String} TableName
 */
UpdateItemInput.prototype['TableName'] = undefined;

/**
 * @member {module:model/Key} Key
 */
UpdateItemInput.prototype['Key'] = undefined;

/**
 * Map of attribute name to the new value and action for the update. The attribute names specify the attributes to modify, and cannot contain any primary key attributes.
 * @member {Object.<String, module:model/AttributeValueUpdate>} AttributeUpdates
 */
UpdateItemInput.prototype['AttributeUpdates'] = undefined;

/**
 * Designates an attribute for a conditional modification. The <code>Expected</code> parameter allows you to provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute has a particular value before modifying it.
 * @member {Object.<String, module:model/ExpectedAttributeValue>} Expected
 */
UpdateItemInput.prototype['Expected'] = undefined;

/**
 * @member {module:model/ReturnValue} ReturnValues
 */
UpdateItemInput.prototype['ReturnValues'] = undefined;






export default UpdateItemInput;

