/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';
import ComparisonOperator from './ComparisonOperator';

/**
 * The Condition model module.
 * @module model/Condition
 * @version 2011-12-05
 */
class Condition {
    /**
     * Constructs a new <code>Condition</code>.
     * @alias module:model/Condition
     * @param comparisonOperator {module:model/ComparisonOperator} 
     */
    constructor(comparisonOperator) { 
        
        Condition.initialize(this, comparisonOperator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comparisonOperator) { 
        obj['ComparisonOperator'] = comparisonOperator;
    }

    /**
     * Constructs a <code>Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Condition} obj Optional instance to populate.
     * @return {module:model/Condition} The populated <code>Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Condition();

            if (data.hasOwnProperty('AttributeValueList')) {
                obj['AttributeValueList'] = ApiClient.convertToType(data['AttributeValueList'], [AttributeValue]);
            }
            if (data.hasOwnProperty('ComparisonOperator')) {
                obj['ComparisonOperator'] = ComparisonOperator.constructFromObject(data['ComparisonOperator']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Condition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Condition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['AttributeValueList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AttributeValueList'])) {
                throw new Error("Expected the field `AttributeValueList` to be an array in the JSON data but got " + data['AttributeValueList']);
            }
            // validate the optional field `AttributeValueList` (array)
            for (const item of data['AttributeValueList']) {
                AttributeValue.validateJSON(item);
            };
        }

        return true;
    }


}

Condition.RequiredProperties = ["ComparisonOperator"];

/**
 * A list of attribute values to be used with a comparison operator for a scan or query operation. For comparisons that require more than one value, such as a <code>BETWEEN</code> comparison, the AttributeValueList contains two attribute values and the comparison operator.
 * @member {Array.<module:model/AttributeValue>} AttributeValueList
 */
Condition.prototype['AttributeValueList'] = undefined;

/**
 * @member {module:model/ComparisonOperator} ComparisonOperator
 */
Condition.prototype['ComparisonOperator'] = undefined;






export default Condition;

