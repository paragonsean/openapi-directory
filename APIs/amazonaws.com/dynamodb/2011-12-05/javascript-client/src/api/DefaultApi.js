/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchGetItemInput from '../model/BatchGetItemInput';
import BatchGetItemOutput from '../model/BatchGetItemOutput';
import BatchWriteItemInput from '../model/BatchWriteItemInput';
import BatchWriteItemOutput from '../model/BatchWriteItemOutput';
import CreateTableInput from '../model/CreateTableInput';
import CreateTableOutput from '../model/CreateTableOutput';
import DeleteItemInput from '../model/DeleteItemInput';
import DeleteItemOutput from '../model/DeleteItemOutput';
import DeleteTableInput from '../model/DeleteTableInput';
import DeleteTableOutput from '../model/DeleteTableOutput';
import DescribeTableInput from '../model/DescribeTableInput';
import DescribeTableOutput from '../model/DescribeTableOutput';
import GetItemInput from '../model/GetItemInput';
import GetItemOutput from '../model/GetItemOutput';
import ListTablesInput from '../model/ListTablesInput';
import ListTablesOutput from '../model/ListTablesOutput';
import PutItemInput from '../model/PutItemInput';
import PutItemOutput from '../model/PutItemOutput';
import QueryInput from '../model/QueryInput';
import QueryOutput from '../model/QueryOutput';
import ScanInput from '../model/ScanInput';
import ScanOutput from '../model/ScanOutput';
import UpdateItemInput from '../model/UpdateItemInput';
import UpdateItemOutput from '../model/UpdateItemOutput';
import UpdateTableInput from '../model/UpdateTableInput';
import UpdateTableOutput from '../model/UpdateTableOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2011-12-05
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetItem operation.
     * @callback module:api/DefaultApi~batchGetItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the attributes for multiple items from multiple tables using their primary keys.</p> <p>The maximum number of item attributes that can be retrieved for a single operation is 100. Also, the number of items retrieved is constrained by a 1 MB the size limit. If the response size limit is exceeded or a partial result is returned due to an internal processing failure, Amazon DynamoDB returns an <code>UnprocessedKeys</code> value so you can retry the operation starting with the next item to get.</p> <p>Amazon DynamoDB automatically adjusts the number of items returned per page to enforce this limit. For example, even if you ask to retrieve 100 items, but each individual item is 50k in size, the system returns 20 items and an appropriate <code>UnprocessedKeys</code> value so you can get the next page of results. If necessary, your application needs its own logic to assemble the pages of results into one set.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetItemInput} batchGetItemInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [requestItems] Pagination token
     * @param {module:api/DefaultApi~batchGetItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetItemOutput}
     */
    batchGetItem(xAmzTarget, batchGetItemInput, opts, callback) {
      opts = opts || {};
      let postBody = batchGetItemInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetItem");
      }
      // verify the required parameter 'batchGetItemInput' is set
      if (batchGetItemInput === undefined || batchGetItemInput === null) {
        throw new Error("Missing the required parameter 'batchGetItemInput' when calling batchGetItem");
      }

      let pathParams = {
      };
      let queryParams = {
        'RequestItems': opts['requestItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetItemOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.BatchGetItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchWriteItem operation.
     * @callback module:api/DefaultApi~batchWriteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchWriteItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Allows to execute a batch of Put and/or Delete Requests for many tables in a single call. A total of 25 requests are allowed.</p> <p>There are no transaction guarantees provided by this API. It does not allow conditional puts nor does it support return values.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchWriteItemInput} batchWriteItemInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchWriteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchWriteItemOutput}
     */
    batchWriteItem(xAmzTarget, batchWriteItemInput, opts, callback) {
      opts = opts || {};
      let postBody = batchWriteItemInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchWriteItem");
      }
      // verify the required parameter 'batchWriteItemInput' is set
      if (batchWriteItemInput === undefined || batchWriteItemInput === null) {
        throw new Error("Missing the required parameter 'batchWriteItemInput' when calling batchWriteItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchWriteItemOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.BatchWriteItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTable operation.
     * @callback module:api/DefaultApi~createTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds a new table to your account.</p> <p>The table name must be unique among those associated with the AWS Account issuing the request, and the AWS Region that receives the request (e.g. <code>us-east-1</code>).</p> <p>The <code>CreateTable</code> operation triggers an asynchronous workflow to begin creating the table. Amazon DynamoDB immediately returns the state of the table (<code>CREATING</code>) until the table is in the <code>ACTIVE</code> state. Once the table is in the <code>ACTIVE</code> state, you can perform data plane operations.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTableInput} createTableInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTableOutput}
     */
    createTable(xAmzTarget, createTableInput, opts, callback) {
      opts = opts || {};
      let postBody = createTableInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTable");
      }
      // verify the required parameter 'createTableInput' is set
      if (createTableInput === undefined || createTableInput === null) {
        throw new Error("Missing the required parameter 'createTableInput' when calling createTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTableOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.CreateTable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:api/DefaultApi~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a single item in a table by primary key.</p> <p>You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteItemInput} deleteItemInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteItemOutput}
     */
    deleteItem(xAmzTarget, deleteItemInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteItemInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteItem");
      }
      // verify the required parameter 'deleteItemInput' is set
      if (deleteItemInput === undefined || deleteItemInput === null) {
        throw new Error("Missing the required parameter 'deleteItemInput' when calling deleteItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.DeleteItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTable operation.
     * @callback module:api/DefaultApi~deleteTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a table and all of its items.</p> <p>If the table is in the <code>ACTIVE</code> state, you can delete it. If a table is in <code>CREATING</code> or <code>UPDATING</code> states then Amazon DynamoDB returns a <code>ResourceInUseException</code>. If the specified table does not exist, Amazon DynamoDB returns a <code>ResourceNotFoundException</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTableInput} deleteTableInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTableOutput}
     */
    deleteTable(xAmzTarget, deleteTableInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteTableInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTable");
      }
      // verify the required parameter 'deleteTableInput' is set
      if (deleteTableInput === undefined || deleteTableInput === null) {
        throw new Error("Missing the required parameter 'deleteTableInput' when calling deleteTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteTableOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.DeleteTable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTable operation.
     * @callback module:api/DefaultApi~describeTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves information about the table, including the current status of the table, the primary key schema and when the table was created.</p> <p>If the table does not exist, Amazon DynamoDB returns a <code>ResourceNotFoundException</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTableInput} describeTableInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTableOutput}
     */
    describeTable(xAmzTarget, describeTableInput, opts, callback) {
      opts = opts || {};
      let postBody = describeTableInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTable");
      }
      // verify the required parameter 'describeTableInput' is set
      if (describeTableInput === undefined || describeTableInput === null) {
        throw new Error("Missing the required parameter 'describeTableInput' when calling describeTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTableOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.DescribeTable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItem operation.
     * @callback module:api/DefaultApi~getItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a set of Attributes for an item that matches the primary key.</p> <p>The <code>GetItem</code> operation provides an eventually-consistent read by default. If eventually-consistent reads are not acceptable for your application, use <code>ConsistentRead</code>. Although this operation might take longer than a standard read, it always returns the last updated value.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetItemInput} getItemInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetItemOutput}
     */
    getItem(xAmzTarget, getItemInput, opts, callback) {
      opts = opts || {};
      let postBody = getItemInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getItem");
      }
      // verify the required parameter 'getItemInput' is set
      if (getItemInput === undefined || getItemInput === null) {
        throw new Error("Missing the required parameter 'getItemInput' when calling getItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetItemOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.GetItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTables operation.
     * @callback module:api/DefaultApi~listTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTablesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a paginated list of table names created by the AWS Account of the caller in the AWS Region (e.g. <code>us-east-1</code>).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTablesInput} listTablesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [exclusiveStartTableName] Pagination token
     * @param {module:api/DefaultApi~listTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTablesOutput}
     */
    listTables(xAmzTarget, listTablesInput, opts, callback) {
      opts = opts || {};
      let postBody = listTablesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTables");
      }
      // verify the required parameter 'listTablesInput' is set
      if (listTablesInput === undefined || listTablesInput === null) {
        throw new Error("Missing the required parameter 'listTablesInput' when calling listTables");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'ExclusiveStartTableName': opts['exclusiveStartTableName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTablesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.ListTables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putItem operation.
     * @callback module:api/DefaultApi~putItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new item, or replaces an old item with a new item (including all the attributes).</p> <p>If an item already exists in the specified table with the same primary key, the new item completely replaces the existing item. You can perform a conditional put (insert a new item if one with the specified primary key doesn't exist), or replace an existing item if it has certain attribute values.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutItemInput} putItemInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutItemOutput}
     */
    putItem(xAmzTarget, putItemInput, opts, callback) {
      opts = opts || {};
      let postBody = putItemInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putItem");
      }
      // verify the required parameter 'putItemInput' is set
      if (putItemInput === undefined || putItemInput === null) {
        throw new Error("Missing the required parameter 'putItemInput' when calling putItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutItemOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.PutItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/DefaultApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the values of one or more items and its attributes by primary key (composite primary key, only).</p> <p>Narrow the scope of the query using comparison operators on the <code>RangeKeyValue</code> of the composite key. Use the <code>ScanIndexForward</code> parameter to get results in forward or reverse order by range key.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/QueryInput} queryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [exclusiveStartKey] Pagination token
     * @param {module:api/DefaultApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryOutput}
     */
    query(xAmzTarget, queryInput, opts, callback) {
      opts = opts || {};
      let postBody = queryInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling query");
      }
      // verify the required parameter 'queryInput' is set
      if (queryInput === undefined || queryInput === null) {
        throw new Error("Missing the required parameter 'queryInput' when calling query");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'ExclusiveStartKey': opts['exclusiveStartKey']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.Query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scan operation.
     * @callback module:api/DefaultApi~scanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScanOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves one or more items and its attributes by performing a full scan of a table.</p> <p>Provide a <code>ScanFilter</code> to get more specific results.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ScanInput} scanInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [exclusiveStartKey] Pagination token
     * @param {module:api/DefaultApi~scanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScanOutput}
     */
    scan(xAmzTarget, scanInput, opts, callback) {
      opts = opts || {};
      let postBody = scanInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling scan");
      }
      // verify the required parameter 'scanInput' is set
      if (scanInput === undefined || scanInput === null) {
        throw new Error("Missing the required parameter 'scanInput' when calling scan");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'ExclusiveStartKey': opts['exclusiveStartKey']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScanOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.Scan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:api/DefaultApi~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Edits an existing item's attributes.</p> <p>You can perform a conditional update (insert a new attribute name-value pair if it doesn't exist, or replace an existing name-value pair if it has certain expected attribute values).</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateItemInput} updateItemInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateItemOutput}
     */
    updateItem(xAmzTarget, updateItemInput, opts, callback) {
      opts = opts || {};
      let postBody = updateItemInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateItem");
      }
      // verify the required parameter 'updateItemInput' is set
      if (updateItemInput === undefined || updateItemInput === null) {
        throw new Error("Missing the required parameter 'updateItemInput' when calling updateItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateItemOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.UpdateItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTable operation.
     * @callback module:api/DefaultApi~updateTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the provisioned throughput for the given table.</p> <p>Setting the throughput for a table helps you manage performance and is part of the Provisioned Throughput feature of Amazon DynamoDB.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTableInput} updateTableInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTableOutput}
     */
    updateTable(xAmzTarget, updateTableInput, opts, callback) {
      opts = opts || {};
      let postBody = updateTableInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTable");
      }
      // verify the required parameter 'updateTableInput' is set
      if (updateTableInput === undefined || updateTableInput === null) {
        throw new Error("Missing the required parameter 'updateTableInput' when calling updateTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTableOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DynamoDB_20111205.UpdateTable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
