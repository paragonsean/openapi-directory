/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonDynamoDb);
  }
}(this, function(expect, AmazonDynamoDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonDynamoDb.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchGetItem', function() {
      it('should call batchGetItem successfully', function(done) {
        //uncomment below and update the code to test batchGetItem
        //instance.batchGetItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchWriteItem', function() {
      it('should call batchWriteItem successfully', function(done) {
        //uncomment below and update the code to test batchWriteItem
        //instance.batchWriteItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTable', function() {
      it('should call createTable successfully', function(done) {
        //uncomment below and update the code to test createTable
        //instance.createTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteItem', function() {
      it('should call deleteItem successfully', function(done) {
        //uncomment below and update the code to test deleteItem
        //instance.deleteItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTable', function() {
      it('should call deleteTable successfully', function(done) {
        //uncomment below and update the code to test deleteTable
        //instance.deleteTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTable', function() {
      it('should call describeTable successfully', function(done) {
        //uncomment below and update the code to test describeTable
        //instance.describeTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItem', function() {
      it('should call getItem successfully', function(done) {
        //uncomment below and update the code to test getItem
        //instance.getItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTables', function() {
      it('should call listTables successfully', function(done) {
        //uncomment below and update the code to test listTables
        //instance.listTables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putItem', function() {
      it('should call putItem successfully', function(done) {
        //uncomment below and update the code to test putItem
        //instance.putItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('query', function() {
      it('should call query successfully', function(done) {
        //uncomment below and update the code to test query
        //instance.query(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scan', function() {
      it('should call scan successfully', function(done) {
        //uncomment below and update the code to test scan
        //instance.scan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateItem', function() {
      it('should call updateItem successfully', function(done) {
        //uncomment below and update the code to test updateItem
        //instance.updateItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTable', function() {
      it('should call updateTable successfully', function(done) {
        //uncomment below and update the code to test updateTable
        //instance.updateTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
