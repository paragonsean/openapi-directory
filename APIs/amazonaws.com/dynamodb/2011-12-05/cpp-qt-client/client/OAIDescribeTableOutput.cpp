/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTableOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTableOutput::OAIDescribeTableOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTableOutput::OAIDescribeTableOutput() {
    this->initializeModel();
}

OAIDescribeTableOutput::~OAIDescribeTableOutput() {}

void OAIDescribeTableOutput::initializeModel() {

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIDescribeTableOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTableOutput::fromJsonObject(QJsonObject json) {

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;
}

QString OAIDescribeTableOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTableOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_table.isSet()) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

OAITableDescription OAIDescribeTableOutput::getTable() const {
    return m_table;
}
void OAIDescribeTableOutput::setTable(const OAITableDescription &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIDescribeTableOutput::is_table_Set() const{
    return m_table_isSet;
}

bool OAIDescribeTableOutput::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIDescribeTableOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTableOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
