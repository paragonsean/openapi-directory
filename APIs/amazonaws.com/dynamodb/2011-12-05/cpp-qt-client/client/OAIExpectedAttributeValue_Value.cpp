/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpectedAttributeValue_Value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpectedAttributeValue_Value::OAIExpectedAttributeValue_Value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpectedAttributeValue_Value::OAIExpectedAttributeValue_Value() {
    this->initializeModel();
}

OAIExpectedAttributeValue_Value::~OAIExpectedAttributeValue_Value() {}

void OAIExpectedAttributeValue_Value::initializeModel() {

    m_s_isSet = false;
    m_s_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_b_isSet = false;
    m_b_isValid = false;

    m_ss_isSet = false;
    m_ss_isValid = false;

    m_ns_isSet = false;
    m_ns_isValid = false;

    m_bs_isSet = false;
    m_bs_isValid = false;
}

void OAIExpectedAttributeValue_Value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpectedAttributeValue_Value::fromJsonObject(QJsonObject json) {

    m_s_isValid = ::OpenAPI::fromJsonValue(m_s, json[QString("S")]);
    m_s_isSet = !json[QString("S")].isNull() && m_s_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("N")]);
    m_n_isSet = !json[QString("N")].isNull() && m_n_isValid;

    m_b_isValid = ::OpenAPI::fromJsonValue(m_b, json[QString("B")]);
    m_b_isSet = !json[QString("B")].isNull() && m_b_isValid;

    m_ss_isValid = ::OpenAPI::fromJsonValue(m_ss, json[QString("SS")]);
    m_ss_isSet = !json[QString("SS")].isNull() && m_ss_isValid;

    m_ns_isValid = ::OpenAPI::fromJsonValue(m_ns, json[QString("NS")]);
    m_ns_isSet = !json[QString("NS")].isNull() && m_ns_isValid;

    m_bs_isValid = ::OpenAPI::fromJsonValue(m_bs, json[QString("BS")]);
    m_bs_isSet = !json[QString("BS")].isNull() && m_bs_isValid;
}

QString OAIExpectedAttributeValue_Value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpectedAttributeValue_Value::asJsonObject() const {
    QJsonObject obj;
    if (m_s_isSet) {
        obj.insert(QString("S"), ::OpenAPI::toJsonValue(m_s));
    }
    if (m_n_isSet) {
        obj.insert(QString("N"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_b_isSet) {
        obj.insert(QString("B"), ::OpenAPI::toJsonValue(m_b));
    }
    if (m_ss.isSet()) {
        obj.insert(QString("SS"), ::OpenAPI::toJsonValue(m_ss));
    }
    if (m_ns.isSet()) {
        obj.insert(QString("NS"), ::OpenAPI::toJsonValue(m_ns));
    }
    if (m_bs.isSet()) {
        obj.insert(QString("BS"), ::OpenAPI::toJsonValue(m_bs));
    }
    return obj;
}

QString OAIExpectedAttributeValue_Value::getS() const {
    return m_s;
}
void OAIExpectedAttributeValue_Value::setS(const QString &s) {
    m_s = s;
    m_s_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_s_Set() const{
    return m_s_isSet;
}

bool OAIExpectedAttributeValue_Value::is_s_Valid() const{
    return m_s_isValid;
}

QString OAIExpectedAttributeValue_Value::getN() const {
    return m_n;
}
void OAIExpectedAttributeValue_Value::setN(const QString &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_n_Set() const{
    return m_n_isSet;
}

bool OAIExpectedAttributeValue_Value::is_n_Valid() const{
    return m_n_isValid;
}

QString OAIExpectedAttributeValue_Value::getB() const {
    return m_b;
}
void OAIExpectedAttributeValue_Value::setB(const QString &b) {
    m_b = b;
    m_b_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_b_Set() const{
    return m_b_isSet;
}

bool OAIExpectedAttributeValue_Value::is_b_Valid() const{
    return m_b_isValid;
}

QList OAIExpectedAttributeValue_Value::getSs() const {
    return m_ss;
}
void OAIExpectedAttributeValue_Value::setSs(const QList &ss) {
    m_ss = ss;
    m_ss_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_ss_Set() const{
    return m_ss_isSet;
}

bool OAIExpectedAttributeValue_Value::is_ss_Valid() const{
    return m_ss_isValid;
}

QList OAIExpectedAttributeValue_Value::getNs() const {
    return m_ns;
}
void OAIExpectedAttributeValue_Value::setNs(const QList &ns) {
    m_ns = ns;
    m_ns_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_ns_Set() const{
    return m_ns_isSet;
}

bool OAIExpectedAttributeValue_Value::is_ns_Valid() const{
    return m_ns_isValid;
}

QList OAIExpectedAttributeValue_Value::getBs() const {
    return m_bs;
}
void OAIExpectedAttributeValue_Value::setBs(const QList &bs) {
    m_bs = bs;
    m_bs_isSet = true;
}

bool OAIExpectedAttributeValue_Value::is_bs_Set() const{
    return m_bs_isSet;
}

bool OAIExpectedAttributeValue_Value::is_bs_Valid() const{
    return m_bs_isValid;
}

bool OAIExpectedAttributeValue_Value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpectedAttributeValue_Value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
