/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchWriteItemOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchWriteItemOutput::OAIBatchWriteItemOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchWriteItemOutput::OAIBatchWriteItemOutput() {
    this->initializeModel();
}

OAIBatchWriteItemOutput::~OAIBatchWriteItemOutput() {}

void OAIBatchWriteItemOutput::initializeModel() {

    m_responses_isSet = false;
    m_responses_isValid = false;

    m_unprocessed_items_isSet = false;
    m_unprocessed_items_isValid = false;
}

void OAIBatchWriteItemOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchWriteItemOutput::fromJsonObject(QJsonObject json) {

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("Responses")]);
    m_responses_isSet = !json[QString("Responses")].isNull() && m_responses_isValid;

    m_unprocessed_items_isValid = ::OpenAPI::fromJsonValue(m_unprocessed_items, json[QString("UnprocessedItems")]);
    m_unprocessed_items_isSet = !json[QString("UnprocessedItems")].isNull() && m_unprocessed_items_isValid;
}

QString OAIBatchWriteItemOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchWriteItemOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_responses.isSet()) {
        obj.insert(QString("Responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    if (m_unprocessed_items.isSet()) {
        obj.insert(QString("UnprocessedItems"), ::OpenAPI::toJsonValue(m_unprocessed_items));
    }
    return obj;
}

QMap OAIBatchWriteItemOutput::getResponses() const {
    return m_responses;
}
void OAIBatchWriteItemOutput::setResponses(const QMap &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAIBatchWriteItemOutput::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAIBatchWriteItemOutput::is_responses_Valid() const{
    return m_responses_isValid;
}

QMap OAIBatchWriteItemOutput::getUnprocessedItems() const {
    return m_unprocessed_items;
}
void OAIBatchWriteItemOutput::setUnprocessedItems(const QMap &unprocessed_items) {
    m_unprocessed_items = unprocessed_items;
    m_unprocessed_items_isSet = true;
}

bool OAIBatchWriteItemOutput::is_unprocessed_items_Set() const{
    return m_unprocessed_items_isSet;
}

bool OAIBatchWriteItemOutput::is_unprocessed_items_Valid() const{
    return m_unprocessed_items_isValid;
}

bool OAIBatchWriteItemOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprocessed_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchWriteItemOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
