/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionedThroughputDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionedThroughputDescription::OAIProvisionedThroughputDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionedThroughputDescription::OAIProvisionedThroughputDescription() {
    this->initializeModel();
}

OAIProvisionedThroughputDescription::~OAIProvisionedThroughputDescription() {}

void OAIProvisionedThroughputDescription::initializeModel() {

    m_last_increase_date_time_isSet = false;
    m_last_increase_date_time_isValid = false;

    m_last_decrease_date_time_isSet = false;
    m_last_decrease_date_time_isValid = false;

    m_number_of_decreases_today_isSet = false;
    m_number_of_decreases_today_isValid = false;

    m_read_capacity_units_isSet = false;
    m_read_capacity_units_isValid = false;

    m_write_capacity_units_isSet = false;
    m_write_capacity_units_isValid = false;
}

void OAIProvisionedThroughputDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionedThroughputDescription::fromJsonObject(QJsonObject json) {

    m_last_increase_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_increase_date_time, json[QString("LastIncreaseDateTime")]);
    m_last_increase_date_time_isSet = !json[QString("LastIncreaseDateTime")].isNull() && m_last_increase_date_time_isValid;

    m_last_decrease_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_decrease_date_time, json[QString("LastDecreaseDateTime")]);
    m_last_decrease_date_time_isSet = !json[QString("LastDecreaseDateTime")].isNull() && m_last_decrease_date_time_isValid;

    m_number_of_decreases_today_isValid = ::OpenAPI::fromJsonValue(m_number_of_decreases_today, json[QString("NumberOfDecreasesToday")]);
    m_number_of_decreases_today_isSet = !json[QString("NumberOfDecreasesToday")].isNull() && m_number_of_decreases_today_isValid;

    m_read_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_read_capacity_units, json[QString("ReadCapacityUnits")]);
    m_read_capacity_units_isSet = !json[QString("ReadCapacityUnits")].isNull() && m_read_capacity_units_isValid;

    m_write_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_write_capacity_units, json[QString("WriteCapacityUnits")]);
    m_write_capacity_units_isSet = !json[QString("WriteCapacityUnits")].isNull() && m_write_capacity_units_isValid;
}

QString OAIProvisionedThroughputDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionedThroughputDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_last_increase_date_time_isSet) {
        obj.insert(QString("LastIncreaseDateTime"), ::OpenAPI::toJsonValue(m_last_increase_date_time));
    }
    if (m_last_decrease_date_time_isSet) {
        obj.insert(QString("LastDecreaseDateTime"), ::OpenAPI::toJsonValue(m_last_decrease_date_time));
    }
    if (m_number_of_decreases_today_isSet) {
        obj.insert(QString("NumberOfDecreasesToday"), ::OpenAPI::toJsonValue(m_number_of_decreases_today));
    }
    if (m_read_capacity_units_isSet) {
        obj.insert(QString("ReadCapacityUnits"), ::OpenAPI::toJsonValue(m_read_capacity_units));
    }
    if (m_write_capacity_units_isSet) {
        obj.insert(QString("WriteCapacityUnits"), ::OpenAPI::toJsonValue(m_write_capacity_units));
    }
    return obj;
}

QDateTime OAIProvisionedThroughputDescription::getLastIncreaseDateTime() const {
    return m_last_increase_date_time;
}
void OAIProvisionedThroughputDescription::setLastIncreaseDateTime(const QDateTime &last_increase_date_time) {
    m_last_increase_date_time = last_increase_date_time;
    m_last_increase_date_time_isSet = true;
}

bool OAIProvisionedThroughputDescription::is_last_increase_date_time_Set() const{
    return m_last_increase_date_time_isSet;
}

bool OAIProvisionedThroughputDescription::is_last_increase_date_time_Valid() const{
    return m_last_increase_date_time_isValid;
}

QDateTime OAIProvisionedThroughputDescription::getLastDecreaseDateTime() const {
    return m_last_decrease_date_time;
}
void OAIProvisionedThroughputDescription::setLastDecreaseDateTime(const QDateTime &last_decrease_date_time) {
    m_last_decrease_date_time = last_decrease_date_time;
    m_last_decrease_date_time_isSet = true;
}

bool OAIProvisionedThroughputDescription::is_last_decrease_date_time_Set() const{
    return m_last_decrease_date_time_isSet;
}

bool OAIProvisionedThroughputDescription::is_last_decrease_date_time_Valid() const{
    return m_last_decrease_date_time_isValid;
}

qint32 OAIProvisionedThroughputDescription::getNumberOfDecreasesToday() const {
    return m_number_of_decreases_today;
}
void OAIProvisionedThroughputDescription::setNumberOfDecreasesToday(const qint32 &number_of_decreases_today) {
    m_number_of_decreases_today = number_of_decreases_today;
    m_number_of_decreases_today_isSet = true;
}

bool OAIProvisionedThroughputDescription::is_number_of_decreases_today_Set() const{
    return m_number_of_decreases_today_isSet;
}

bool OAIProvisionedThroughputDescription::is_number_of_decreases_today_Valid() const{
    return m_number_of_decreases_today_isValid;
}

qint32 OAIProvisionedThroughputDescription::getReadCapacityUnits() const {
    return m_read_capacity_units;
}
void OAIProvisionedThroughputDescription::setReadCapacityUnits(const qint32 &read_capacity_units) {
    m_read_capacity_units = read_capacity_units;
    m_read_capacity_units_isSet = true;
}

bool OAIProvisionedThroughputDescription::is_read_capacity_units_Set() const{
    return m_read_capacity_units_isSet;
}

bool OAIProvisionedThroughputDescription::is_read_capacity_units_Valid() const{
    return m_read_capacity_units_isValid;
}

qint32 OAIProvisionedThroughputDescription::getWriteCapacityUnits() const {
    return m_write_capacity_units;
}
void OAIProvisionedThroughputDescription::setWriteCapacityUnits(const qint32 &write_capacity_units) {
    m_write_capacity_units = write_capacity_units;
    m_write_capacity_units_isSet = true;
}

bool OAIProvisionedThroughputDescription::is_write_capacity_units_Set() const{
    return m_write_capacity_units_isSet;
}

bool OAIProvisionedThroughputDescription::is_write_capacity_units_Valid() const{
    return m_write_capacity_units_isValid;
}

bool OAIProvisionedThroughputDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_increase_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_decrease_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_decreases_today_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionedThroughputDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
