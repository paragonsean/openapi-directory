/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetItemInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetItemInput::OAIGetItemInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetItemInput::OAIGetItemInput() {
    this->initializeModel();
}

OAIGetItemInput::~OAIGetItemInput() {}

void OAIGetItemInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_attributes_to_get_isSet = false;
    m_attributes_to_get_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;
}

void OAIGetItemInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetItemInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_attributes_to_get_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_get, json[QString("AttributesToGet")]);
    m_attributes_to_get_isSet = !json[QString("AttributesToGet")].isNull() && m_attributes_to_get_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;
}

QString OAIGetItemInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetItemInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key.isSet()) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_attributes_to_get.size() > 0) {
        obj.insert(QString("AttributesToGet"), ::OpenAPI::toJsonValue(m_attributes_to_get));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    return obj;
}

QString OAIGetItemInput::getTableName() const {
    return m_table_name;
}
void OAIGetItemInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIGetItemInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIGetItemInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIKey OAIGetItemInput::getKey() const {
    return m_key;
}
void OAIGetItemInput::setKey(const OAIKey &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGetItemInput::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGetItemInput::is_key_Valid() const{
    return m_key_isValid;
}

QList<QString> OAIGetItemInput::getAttributesToGet() const {
    return m_attributes_to_get;
}
void OAIGetItemInput::setAttributesToGet(const QList<QString> &attributes_to_get) {
    m_attributes_to_get = attributes_to_get;
    m_attributes_to_get_isSet = true;
}

bool OAIGetItemInput::is_attributes_to_get_Set() const{
    return m_attributes_to_get_isSet;
}

bool OAIGetItemInput::is_attributes_to_get_Valid() const{
    return m_attributes_to_get_isValid;
}

bool OAIGetItemInput::isConsistentRead() const {
    return m_consistent_read;
}
void OAIGetItemInput::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIGetItemInput::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIGetItemInput::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

bool OAIGetItemInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_get.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetItemInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
