/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableDescription::OAITableDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableDescription::OAITableDescription() {
    this->initializeModel();
}

OAITableDescription::~OAITableDescription() {}

void OAITableDescription::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_table_status_isSet = false;
    m_table_status_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;

    m_table_size_bytes_isSet = false;
    m_table_size_bytes_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;
}

void OAITableDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableDescription::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_table_status_isValid = ::OpenAPI::fromJsonValue(m_table_status, json[QString("TableStatus")]);
    m_table_status_isSet = !json[QString("TableStatus")].isNull() && m_table_status_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("CreationDateTime")]);
    m_creation_date_time_isSet = !json[QString("CreationDateTime")].isNull() && m_creation_date_time_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;

    m_table_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_table_size_bytes, json[QString("TableSizeBytes")]);
    m_table_size_bytes_isSet = !json[QString("TableSizeBytes")].isNull() && m_table_size_bytes_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;
}

QString OAITableDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_table_status.isSet()) {
        obj.insert(QString("TableStatus"), ::OpenAPI::toJsonValue(m_table_status));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("CreationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    if (m_table_size_bytes_isSet) {
        obj.insert(QString("TableSizeBytes"), ::OpenAPI::toJsonValue(m_table_size_bytes));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    return obj;
}

QString OAITableDescription::getTableName() const {
    return m_table_name;
}
void OAITableDescription::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAITableDescription::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAITableDescription::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIKeySchema OAITableDescription::getKeySchema() const {
    return m_key_schema;
}
void OAITableDescription::setKeySchema(const OAIKeySchema &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAITableDescription::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAITableDescription::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

OAITableStatus OAITableDescription::getTableStatus() const {
    return m_table_status;
}
void OAITableDescription::setTableStatus(const OAITableStatus &table_status) {
    m_table_status = table_status;
    m_table_status_isSet = true;
}

bool OAITableDescription::is_table_status_Set() const{
    return m_table_status_isSet;
}

bool OAITableDescription::is_table_status_Valid() const{
    return m_table_status_isValid;
}

QDateTime OAITableDescription::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAITableDescription::setCreationDateTime(const QDateTime &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAITableDescription::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAITableDescription::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

OAIProvisionedThroughputDescription OAITableDescription::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAITableDescription::setProvisionedThroughput(const OAIProvisionedThroughputDescription &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAITableDescription::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAITableDescription::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

qint32 OAITableDescription::getTableSizeBytes() const {
    return m_table_size_bytes;
}
void OAITableDescription::setTableSizeBytes(const qint32 &table_size_bytes) {
    m_table_size_bytes = table_size_bytes;
    m_table_size_bytes_isSet = true;
}

bool OAITableDescription::is_table_size_bytes_Set() const{
    return m_table_size_bytes_isSet;
}

bool OAITableDescription::is_table_size_bytes_Valid() const{
    return m_table_size_bytes_isValid;
}

qint32 OAITableDescription::getItemCount() const {
    return m_item_count;
}
void OAITableDescription::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAITableDescription::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAITableDescription::is_item_count_Valid() const{
    return m_item_count_isValid;
}

bool OAITableDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
