/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryInput::OAIQueryInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryInput::OAIQueryInput() {
    this->initializeModel();
}

OAIQueryInput::~OAIQueryInput() {}

void OAIQueryInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_attributes_to_get_isSet = false;
    m_attributes_to_get_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_hash_key_value_isSet = false;
    m_hash_key_value_isValid = false;

    m_range_key_condition_isSet = false;
    m_range_key_condition_isValid = false;

    m_scan_index_forward_isSet = false;
    m_scan_index_forward_isValid = false;

    m_exclusive_start_key_isSet = false;
    m_exclusive_start_key_isValid = false;
}

void OAIQueryInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_attributes_to_get_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_get, json[QString("AttributesToGet")]);
    m_attributes_to_get_isSet = !json[QString("AttributesToGet")].isNull() && m_attributes_to_get_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_hash_key_value_isValid = ::OpenAPI::fromJsonValue(m_hash_key_value, json[QString("HashKeyValue")]);
    m_hash_key_value_isSet = !json[QString("HashKeyValue")].isNull() && m_hash_key_value_isValid;

    m_range_key_condition_isValid = ::OpenAPI::fromJsonValue(m_range_key_condition, json[QString("RangeKeyCondition")]);
    m_range_key_condition_isSet = !json[QString("RangeKeyCondition")].isNull() && m_range_key_condition_isValid;

    m_scan_index_forward_isValid = ::OpenAPI::fromJsonValue(m_scan_index_forward, json[QString("ScanIndexForward")]);
    m_scan_index_forward_isSet = !json[QString("ScanIndexForward")].isNull() && m_scan_index_forward_isValid;

    m_exclusive_start_key_isValid = ::OpenAPI::fromJsonValue(m_exclusive_start_key, json[QString("ExclusiveStartKey")]);
    m_exclusive_start_key_isSet = !json[QString("ExclusiveStartKey")].isNull() && m_exclusive_start_key_isValid;
}

QString OAIQueryInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_attributes_to_get.size() > 0) {
        obj.insert(QString("AttributesToGet"), ::OpenAPI::toJsonValue(m_attributes_to_get));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_hash_key_value.isSet()) {
        obj.insert(QString("HashKeyValue"), ::OpenAPI::toJsonValue(m_hash_key_value));
    }
    if (m_range_key_condition.isSet()) {
        obj.insert(QString("RangeKeyCondition"), ::OpenAPI::toJsonValue(m_range_key_condition));
    }
    if (m_scan_index_forward_isSet) {
        obj.insert(QString("ScanIndexForward"), ::OpenAPI::toJsonValue(m_scan_index_forward));
    }
    if (m_exclusive_start_key.isSet()) {
        obj.insert(QString("ExclusiveStartKey"), ::OpenAPI::toJsonValue(m_exclusive_start_key));
    }
    return obj;
}

QString OAIQueryInput::getTableName() const {
    return m_table_name;
}
void OAIQueryInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIQueryInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIQueryInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QList<QString> OAIQueryInput::getAttributesToGet() const {
    return m_attributes_to_get;
}
void OAIQueryInput::setAttributesToGet(const QList<QString> &attributes_to_get) {
    m_attributes_to_get = attributes_to_get;
    m_attributes_to_get_isSet = true;
}

bool OAIQueryInput::is_attributes_to_get_Set() const{
    return m_attributes_to_get_isSet;
}

bool OAIQueryInput::is_attributes_to_get_Valid() const{
    return m_attributes_to_get_isValid;
}

qint32 OAIQueryInput::getLimit() const {
    return m_limit;
}
void OAIQueryInput::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryInput::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryInput::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIQueryInput::isConsistentRead() const {
    return m_consistent_read;
}
void OAIQueryInput::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIQueryInput::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIQueryInput::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

bool OAIQueryInput::getCount() const {
    return m_count;
}
void OAIQueryInput::setCount(const bool &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIQueryInput::is_count_Set() const{
    return m_count_isSet;
}

bool OAIQueryInput::is_count_Valid() const{
    return m_count_isValid;
}

OAIQueryInput_HashKeyValue OAIQueryInput::getHashKeyValue() const {
    return m_hash_key_value;
}
void OAIQueryInput::setHashKeyValue(const OAIQueryInput_HashKeyValue &hash_key_value) {
    m_hash_key_value = hash_key_value;
    m_hash_key_value_isSet = true;
}

bool OAIQueryInput::is_hash_key_value_Set() const{
    return m_hash_key_value_isSet;
}

bool OAIQueryInput::is_hash_key_value_Valid() const{
    return m_hash_key_value_isValid;
}

OAIQueryInput_RangeKeyCondition OAIQueryInput::getRangeKeyCondition() const {
    return m_range_key_condition;
}
void OAIQueryInput::setRangeKeyCondition(const OAIQueryInput_RangeKeyCondition &range_key_condition) {
    m_range_key_condition = range_key_condition;
    m_range_key_condition_isSet = true;
}

bool OAIQueryInput::is_range_key_condition_Set() const{
    return m_range_key_condition_isSet;
}

bool OAIQueryInput::is_range_key_condition_Valid() const{
    return m_range_key_condition_isValid;
}

bool OAIQueryInput::getScanIndexForward() const {
    return m_scan_index_forward;
}
void OAIQueryInput::setScanIndexForward(const bool &scan_index_forward) {
    m_scan_index_forward = scan_index_forward;
    m_scan_index_forward_isSet = true;
}

bool OAIQueryInput::is_scan_index_forward_Set() const{
    return m_scan_index_forward_isSet;
}

bool OAIQueryInput::is_scan_index_forward_Valid() const{
    return m_scan_index_forward_isValid;
}

OAIQueryInput_ExclusiveStartKey OAIQueryInput::getExclusiveStartKey() const {
    return m_exclusive_start_key;
}
void OAIQueryInput::setExclusiveStartKey(const OAIQueryInput_ExclusiveStartKey &exclusive_start_key) {
    m_exclusive_start_key = exclusive_start_key;
    m_exclusive_start_key_isSet = true;
}

bool OAIQueryInput::is_exclusive_start_key_Set() const{
    return m_exclusive_start_key_isSet;
}

bool OAIQueryInput::is_exclusive_start_key_Valid() const{
    return m_exclusive_start_key_isValid;
}

bool OAIQueryInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_get.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_key_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_key_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_index_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_start_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_hash_key_value_isValid && true;
}

} // namespace OpenAPI
