/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryInput.h
 *
 * 
 */

#ifndef OAIQueryInput_H
#define OAIQueryInput_H

#include <QJsonObject>

#include "OAIQueryInput_ExclusiveStartKey.h"
#include "OAIQueryInput_HashKeyValue.h"
#include "OAIQueryInput_RangeKeyCondition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQueryInput_HashKeyValue;
class OAIQueryInput_RangeKeyCondition;
class OAIQueryInput_ExclusiveStartKey;

class OAIQueryInput : public OAIObject {
public:
    OAIQueryInput();
    OAIQueryInput(QString json);
    ~OAIQueryInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    QList<QString> getAttributesToGet() const;
    void setAttributesToGet(const QList<QString> &attributes_to_get);
    bool is_attributes_to_get_Set() const;
    bool is_attributes_to_get_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    bool isConsistentRead() const;
    void setConsistentRead(const bool &consistent_read);
    bool is_consistent_read_Set() const;
    bool is_consistent_read_Valid() const;

    bool getCount() const;
    void setCount(const bool &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    OAIQueryInput_HashKeyValue getHashKeyValue() const;
    void setHashKeyValue(const OAIQueryInput_HashKeyValue &hash_key_value);
    bool is_hash_key_value_Set() const;
    bool is_hash_key_value_Valid() const;

    OAIQueryInput_RangeKeyCondition getRangeKeyCondition() const;
    void setRangeKeyCondition(const OAIQueryInput_RangeKeyCondition &range_key_condition);
    bool is_range_key_condition_Set() const;
    bool is_range_key_condition_Valid() const;

    bool getScanIndexForward() const;
    void setScanIndexForward(const bool &scan_index_forward);
    bool is_scan_index_forward_Set() const;
    bool is_scan_index_forward_Valid() const;

    OAIQueryInput_ExclusiveStartKey getExclusiveStartKey() const;
    void setExclusiveStartKey(const OAIQueryInput_ExclusiveStartKey &exclusive_start_key);
    bool is_exclusive_start_key_Set() const;
    bool is_exclusive_start_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    QList<QString> m_attributes_to_get;
    bool m_attributes_to_get_isSet;
    bool m_attributes_to_get_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    bool m_consistent_read;
    bool m_consistent_read_isSet;
    bool m_consistent_read_isValid;

    bool m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    OAIQueryInput_HashKeyValue m_hash_key_value;
    bool m_hash_key_value_isSet;
    bool m_hash_key_value_isValid;

    OAIQueryInput_RangeKeyCondition m_range_key_condition;
    bool m_range_key_condition_isSet;
    bool m_range_key_condition_isValid;

    bool m_scan_index_forward;
    bool m_scan_index_forward_isSet;
    bool m_scan_index_forward_isValid;

    OAIQueryInput_ExclusiveStartKey m_exclusive_start_key;
    bool m_exclusive_start_key_isSet;
    bool m_exclusive_start_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryInput)

#endif // OAIQueryInput_H
