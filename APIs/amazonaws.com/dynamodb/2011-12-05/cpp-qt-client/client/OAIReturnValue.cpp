/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnValue::OAIReturnValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnValue::OAIReturnValue() {
    this->initializeModel();
}

OAIReturnValue::~OAIReturnValue() {}

void OAIReturnValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReturnValue::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReturnValue::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnValue::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALL_OLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnValue::ALL_OLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATED_OLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnValue::UPDATED_OLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALL_NEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnValue::ALL_NEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATED_NEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReturnValue::UPDATED_NEW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReturnValue::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReturnValue::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReturnValue::NONE:
            val = "NONE";
            break;
        case eOAIReturnValue::ALL_OLD:
            val = "ALL_OLD";
            break;
        case eOAIReturnValue::UPDATED_OLD:
            val = "UPDATED_OLD";
            break;
        case eOAIReturnValue::ALL_NEW:
            val = "ALL_NEW";
            break;
        case eOAIReturnValue::UPDATED_NEW:
            val = "UPDATED_NEW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReturnValue::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReturnValue::eOAIReturnValue OAIReturnValue::getValue() const {
    return m_value;
}

void OAIReturnValue::setValue(const OAIReturnValue::eOAIReturnValue& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReturnValue::isSet() const {
    
    return m_value_isSet;
}

bool OAIReturnValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
