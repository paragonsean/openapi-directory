/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTableInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTableInput::OAICreateTableInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTableInput::OAICreateTableInput() {
    this->initializeModel();
}

OAICreateTableInput::~OAICreateTableInput() {}

void OAICreateTableInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_provisioned_throughput_isSet = false;
    m_provisioned_throughput_isValid = false;
}

void OAICreateTableInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTableInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_provisioned_throughput_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput, json[QString("ProvisionedThroughput")]);
    m_provisioned_throughput_isSet = !json[QString("ProvisionedThroughput")].isNull() && m_provisioned_throughput_isValid;
}

QString OAICreateTableInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTableInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_provisioned_throughput.isSet()) {
        obj.insert(QString("ProvisionedThroughput"), ::OpenAPI::toJsonValue(m_provisioned_throughput));
    }
    return obj;
}

QString OAICreateTableInput::getTableName() const {
    return m_table_name;
}
void OAICreateTableInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAICreateTableInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAICreateTableInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIKeySchema OAICreateTableInput::getKeySchema() const {
    return m_key_schema;
}
void OAICreateTableInput::setKeySchema(const OAIKeySchema &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAICreateTableInput::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAICreateTableInput::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

OAIProvisionedThroughput OAICreateTableInput::getProvisionedThroughput() const {
    return m_provisioned_throughput;
}
void OAICreateTableInput::setProvisionedThroughput(const OAIProvisionedThroughput &provisioned_throughput) {
    m_provisioned_throughput = provisioned_throughput;
    m_provisioned_throughput_isSet = true;
}

bool OAICreateTableInput::is_provisioned_throughput_Set() const{
    return m_provisioned_throughput_isSet;
}

bool OAICreateTableInput::is_provisioned_throughput_Valid() const{
    return m_provisioned_throughput_isValid;
}

bool OAICreateTableInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTableInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_key_schema_isValid && m_provisioned_throughput_isValid && true;
}

} // namespace OpenAPI
