/**
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutItemInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutItemInput::OAIPutItemInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutItemInput::OAIPutItemInput() {
    this->initializeModel();
}

OAIPutItemInput::~OAIPutItemInput() {}

void OAIPutItemInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_expected_isSet = false;
    m_expected_isValid = false;

    m_return_values_isSet = false;
    m_return_values_isValid = false;
}

void OAIPutItemInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutItemInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;

    m_expected_isValid = ::OpenAPI::fromJsonValue(m_expected, json[QString("Expected")]);
    m_expected_isSet = !json[QString("Expected")].isNull() && m_expected_isValid;

    m_return_values_isValid = ::OpenAPI::fromJsonValue(m_return_values, json[QString("ReturnValues")]);
    m_return_values_isSet = !json[QString("ReturnValues")].isNull() && m_return_values_isValid;
}

QString OAIPutItemInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutItemInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_item.size() > 0) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_expected.size() > 0) {
        obj.insert(QString("Expected"), ::OpenAPI::toJsonValue(m_expected));
    }
    if (m_return_values.isSet()) {
        obj.insert(QString("ReturnValues"), ::OpenAPI::toJsonValue(m_return_values));
    }
    return obj;
}

QString OAIPutItemInput::getTableName() const {
    return m_table_name;
}
void OAIPutItemInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIPutItemInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIPutItemInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QMap<QString, OAIAttributeValue> OAIPutItemInput::getItem() const {
    return m_item;
}
void OAIPutItemInput::setItem(const QMap<QString, OAIAttributeValue> &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPutItemInput::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPutItemInput::is_item_Valid() const{
    return m_item_isValid;
}

QMap<QString, OAIExpectedAttributeValue> OAIPutItemInput::getExpected() const {
    return m_expected;
}
void OAIPutItemInput::setExpected(const QMap<QString, OAIExpectedAttributeValue> &expected) {
    m_expected = expected;
    m_expected_isSet = true;
}

bool OAIPutItemInput::is_expected_Set() const{
    return m_expected_isSet;
}

bool OAIPutItemInput::is_expected_Valid() const{
    return m_expected_isValid;
}

OAIReturnValue OAIPutItemInput::getReturnValues() const {
    return m_return_values;
}
void OAIPutItemInput::setReturnValues(const OAIReturnValue &return_values) {
    m_return_values = return_values;
    m_return_values_isSet = true;
}

bool OAIPutItemInput::is_return_values_Set() const{
    return m_return_values_isSet;
}

bool OAIPutItemInput::is_return_values_Valid() const{
    return m_return_values_isValid;
}

bool OAIPutItemInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutItemInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_item_isValid && true;
}

} // namespace OpenAPI
