/*
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provisioned throughput reserves the required read and write resources for your table in terms of &lt;code&gt;ReadCapacityUnits&lt;/code&gt; and &lt;code&gt;WriteCapacityUnits&lt;/code&gt;. Values for provisioned throughput depend upon your expected read/write rates, item size, and consistency. Provide the expected number of read and write operations, assuming an item size of 1k and strictly consistent reads. For 2k item size, double the value. For 3k, triple the value, etc. Eventually-consistent reads consume half the resources of strictly consistent reads.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:23.573914-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisionedThroughput {
  public static final String SERIALIZED_NAME_READ_CAPACITY_UNITS = "ReadCapacityUnits";
  @SerializedName(SERIALIZED_NAME_READ_CAPACITY_UNITS)
  private Integer readCapacityUnits;

  public static final String SERIALIZED_NAME_WRITE_CAPACITY_UNITS = "WriteCapacityUnits";
  @SerializedName(SERIALIZED_NAME_WRITE_CAPACITY_UNITS)
  private Integer writeCapacityUnits;

  public ProvisionedThroughput() {
  }

  public ProvisionedThroughput readCapacityUnits(Integer readCapacityUnits) {
    this.readCapacityUnits = readCapacityUnits;
    return this;
  }

  /**
   * Get readCapacityUnits
   * @return readCapacityUnits
   */
  @javax.annotation.Nonnull
  public Integer getReadCapacityUnits() {
    return readCapacityUnits;
  }

  public void setReadCapacityUnits(Integer readCapacityUnits) {
    this.readCapacityUnits = readCapacityUnits;
  }


  public ProvisionedThroughput writeCapacityUnits(Integer writeCapacityUnits) {
    this.writeCapacityUnits = writeCapacityUnits;
    return this;
  }

  /**
   * Get writeCapacityUnits
   * @return writeCapacityUnits
   */
  @javax.annotation.Nonnull
  public Integer getWriteCapacityUnits() {
    return writeCapacityUnits;
  }

  public void setWriteCapacityUnits(Integer writeCapacityUnits) {
    this.writeCapacityUnits = writeCapacityUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionedThroughput provisionedThroughput = (ProvisionedThroughput) o;
    return Objects.equals(this.readCapacityUnits, provisionedThroughput.readCapacityUnits) &&
        Objects.equals(this.writeCapacityUnits, provisionedThroughput.writeCapacityUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readCapacityUnits, writeCapacityUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionedThroughput {\n");
    sb.append("    readCapacityUnits: ").append(toIndentedString(readCapacityUnits)).append("\n");
    sb.append("    writeCapacityUnits: ").append(toIndentedString(writeCapacityUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReadCapacityUnits");
    openapiFields.add("WriteCapacityUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReadCapacityUnits");
    openapiRequiredFields.add("WriteCapacityUnits");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionedThroughput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionedThroughput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionedThroughput is not found in the empty JSON string", ProvisionedThroughput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionedThroughput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionedThroughput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisionedThroughput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReadCapacityUnits`
      Integer.validateJsonElement(jsonObj.get("ReadCapacityUnits"));
      // validate the required field `WriteCapacityUnits`
      Integer.validateJsonElement(jsonObj.get("WriteCapacityUnits"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionedThroughput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionedThroughput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionedThroughput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionedThroughput.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionedThroughput>() {
           @Override
           public void write(JsonWriter out, ProvisionedThroughput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionedThroughput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisionedThroughput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionedThroughput
   * @throws IOException if the JSON string is invalid with respect to ProvisionedThroughput
   */
  public static ProvisionedThroughput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionedThroughput.class);
  }

  /**
   * Convert an instance of ProvisionedThroughput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

