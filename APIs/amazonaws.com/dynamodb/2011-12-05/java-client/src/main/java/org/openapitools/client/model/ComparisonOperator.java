/*
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &lt;p&gt;A comparison operator is an enumeration of several operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;EQ&lt;/code&gt; for &lt;em&gt;equal&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;NE&lt;/code&gt; for &lt;em&gt;not equal&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;IN&lt;/code&gt; checks for exact matches.&lt;/li&gt; &lt;li&gt;&lt;code&gt;LE&lt;/code&gt; for &lt;em&gt;less than or equal to&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;LT&lt;/code&gt; for &lt;em&gt;less than&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;GE&lt;/code&gt; for &lt;em&gt;greater than or equal to&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;GT&lt;/code&gt; for &lt;em&gt;greater than&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;BETWEEN&lt;/code&gt; for &lt;em&gt;between&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;NOT_NULL&lt;/code&gt; for &lt;em&gt;exists&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;NULL&lt;/code&gt; for &lt;em&gt;not exists&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;CONTAINS&lt;/code&gt; for substring or value in a set.&lt;/li&gt; &lt;li&gt;&lt;code&gt;NOT_CONTAINS&lt;/code&gt; for absence of a substring or absence of a value in a set.&lt;/li&gt; &lt;li&gt;&lt;code&gt;BEGINS_WITH&lt;/code&gt; for a substring prefix.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Scan operations support all available comparison operators.&lt;/p&gt; &lt;p&gt;Query operations support a subset of the available comparison operators: EQ, LE, LT, GE, GT, BETWEEN, and BEGINS_WITH.&lt;/p&gt;
 */
@JsonAdapter(ComparisonOperator.Adapter.class)
public enum ComparisonOperator {
  
  EQ("EQ"),
  
  NE("NE"),
  
  IN("IN"),
  
  LE("LE"),
  
  LT("LT"),
  
  GE("GE"),
  
  GT("GT"),
  
  BETWEEN("BETWEEN"),
  
  NOT_NULL("NOT_NULL"),
  
  NULL("NULL"),
  
  CONTAINS("CONTAINS"),
  
  NOT_CONTAINS("NOT_CONTAINS"),
  
  BEGINS_WITH("BEGINS_WITH");

  private String value;

  ComparisonOperator(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ComparisonOperator fromValue(String value) {
    for (ComparisonOperator b : ComparisonOperator.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ComparisonOperator> {
    @Override
    public void write(final JsonWriter jsonWriter, final ComparisonOperator enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ComparisonOperator read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ComparisonOperator.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ComparisonOperator.fromValue(value);
  }
}

