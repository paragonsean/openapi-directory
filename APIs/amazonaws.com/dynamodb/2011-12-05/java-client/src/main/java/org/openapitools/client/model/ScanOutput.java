/*
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.ScanOutputLastEvaluatedKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScanOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:23.573914-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScanOutput {
  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Map<String, AttributeValue>> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_SCANNED_COUNT = "ScannedCount";
  @SerializedName(SERIALIZED_NAME_SCANNED_COUNT)
  private Integer scannedCount;

  public static final String SERIALIZED_NAME_LAST_EVALUATED_KEY = "LastEvaluatedKey";
  @SerializedName(SERIALIZED_NAME_LAST_EVALUATED_KEY)
  private ScanOutputLastEvaluatedKey lastEvaluatedKey;

  public static final String SERIALIZED_NAME_CONSUMED_CAPACITY_UNITS = "ConsumedCapacityUnits";
  @SerializedName(SERIALIZED_NAME_CONSUMED_CAPACITY_UNITS)
  private Double consumedCapacityUnits;

  public ScanOutput() {
  }

  public ScanOutput items(List<Map<String, AttributeValue>> items) {
    this.items = items;
    return this;
  }

  public ScanOutput addItemsItem(Map<String, AttributeValue> itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<Map<String, AttributeValue>> getItems() {
    return items;
  }

  public void setItems(List<Map<String, AttributeValue>> items) {
    this.items = items;
  }


  public ScanOutput count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public ScanOutput scannedCount(Integer scannedCount) {
    this.scannedCount = scannedCount;
    return this;
  }

  /**
   * Get scannedCount
   * @return scannedCount
   */
  @javax.annotation.Nullable
  public Integer getScannedCount() {
    return scannedCount;
  }

  public void setScannedCount(Integer scannedCount) {
    this.scannedCount = scannedCount;
  }


  public ScanOutput lastEvaluatedKey(ScanOutputLastEvaluatedKey lastEvaluatedKey) {
    this.lastEvaluatedKey = lastEvaluatedKey;
    return this;
  }

  /**
   * Get lastEvaluatedKey
   * @return lastEvaluatedKey
   */
  @javax.annotation.Nullable
  public ScanOutputLastEvaluatedKey getLastEvaluatedKey() {
    return lastEvaluatedKey;
  }

  public void setLastEvaluatedKey(ScanOutputLastEvaluatedKey lastEvaluatedKey) {
    this.lastEvaluatedKey = lastEvaluatedKey;
  }


  public ScanOutput consumedCapacityUnits(Double consumedCapacityUnits) {
    this.consumedCapacityUnits = consumedCapacityUnits;
    return this;
  }

  /**
   * The number of Capacity Units of the provisioned throughput of the table consumed during the operation. &lt;code&gt;GetItem&lt;/code&gt;, &lt;code&gt;BatchGetItem&lt;/code&gt;, &lt;code&gt;BatchWriteItem&lt;/code&gt;, &lt;code&gt;Query&lt;/code&gt;, and &lt;code&gt;Scan&lt;/code&gt; operations consume &lt;code&gt;ReadCapacityUnits&lt;/code&gt;, while &lt;code&gt;PutItem&lt;/code&gt;, &lt;code&gt;UpdateItem&lt;/code&gt;, and &lt;code&gt;DeleteItem&lt;/code&gt; operations consume &lt;code&gt;WriteCapacityUnits&lt;/code&gt;.
   * @return consumedCapacityUnits
   */
  @javax.annotation.Nullable
  public Double getConsumedCapacityUnits() {
    return consumedCapacityUnits;
  }

  public void setConsumedCapacityUnits(Double consumedCapacityUnits) {
    this.consumedCapacityUnits = consumedCapacityUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanOutput scanOutput = (ScanOutput) o;
    return Objects.equals(this.items, scanOutput.items) &&
        Objects.equals(this.count, scanOutput.count) &&
        Objects.equals(this.scannedCount, scanOutput.scannedCount) &&
        Objects.equals(this.lastEvaluatedKey, scanOutput.lastEvaluatedKey) &&
        Objects.equals(this.consumedCapacityUnits, scanOutput.consumedCapacityUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, count, scannedCount, lastEvaluatedKey, consumedCapacityUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanOutput {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    scannedCount: ").append(toIndentedString(scannedCount)).append("\n");
    sb.append("    lastEvaluatedKey: ").append(toIndentedString(lastEvaluatedKey)).append("\n");
    sb.append("    consumedCapacityUnits: ").append(toIndentedString(consumedCapacityUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Items");
    openapiFields.add("Count");
    openapiFields.add("ScannedCount");
    openapiFields.add("LastEvaluatedKey");
    openapiFields.add("ConsumedCapacityUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanOutput is not found in the empty JSON string", ScanOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull() && !jsonObj.get("Items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
      }
      // validate the optional field `Count`
      if (jsonObj.get("Count") != null && !jsonObj.get("Count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Count"));
      }
      // validate the optional field `ScannedCount`
      if (jsonObj.get("ScannedCount") != null && !jsonObj.get("ScannedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ScannedCount"));
      }
      // validate the optional field `LastEvaluatedKey`
      if (jsonObj.get("LastEvaluatedKey") != null && !jsonObj.get("LastEvaluatedKey").isJsonNull()) {
        ScanOutputLastEvaluatedKey.validateJsonElement(jsonObj.get("LastEvaluatedKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanOutput>() {
           @Override
           public void write(JsonWriter out, ScanOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanOutput
   * @throws IOException if the JSON string is invalid with respect to ScanOutput
   */
  public static ScanOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanOutput.class);
  }

  /**
   * Convert an instance of ScanOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

