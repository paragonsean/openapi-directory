/*
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExpectedAttributeValueValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:23.573914-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpectedAttributeValueValue {
  public static final String SERIALIZED_NAME_S = "S";
  @SerializedName(SERIALIZED_NAME_S)
  private String S;

  public static final String SERIALIZED_NAME_N = "N";
  @SerializedName(SERIALIZED_NAME_N)
  private String N;

  public static final String SERIALIZED_NAME_B = "B";
  @SerializedName(SERIALIZED_NAME_B)
  private String B;

  public static final String SERIALIZED_NAME_S_S = "SS";
  @SerializedName(SERIALIZED_NAME_S_S)
  private List SS;

  public static final String SERIALIZED_NAME_N_S = "NS";
  @SerializedName(SERIALIZED_NAME_N_S)
  private List NS;

  public static final String SERIALIZED_NAME_B_S = "BS";
  @SerializedName(SERIALIZED_NAME_B_S)
  private List BS;

  public ExpectedAttributeValueValue() {
  }

  public ExpectedAttributeValueValue S(String S) {
    this.S = S;
    return this;
  }

  /**
   * Get S
   * @return S
   */
  @javax.annotation.Nullable
  public String getS() {
    return S;
  }

  public void setS(String S) {
    this.S = S;
  }


  public ExpectedAttributeValueValue N(String N) {
    this.N = N;
    return this;
  }

  /**
   * Get N
   * @return N
   */
  @javax.annotation.Nullable
  public String getN() {
    return N;
  }

  public void setN(String N) {
    this.N = N;
  }


  public ExpectedAttributeValueValue B(String B) {
    this.B = B;
    return this;
  }

  /**
   * Get B
   * @return B
   */
  @javax.annotation.Nullable
  public String getB() {
    return B;
  }

  public void setB(String B) {
    this.B = B;
  }


  public ExpectedAttributeValueValue SS(List SS) {
    this.SS = SS;
    return this;
  }

  /**
   * Get SS
   * @return SS
   */
  @javax.annotation.Nullable
  public List getSS() {
    return SS;
  }

  public void setSS(List SS) {
    this.SS = SS;
  }


  public ExpectedAttributeValueValue NS(List NS) {
    this.NS = NS;
    return this;
  }

  /**
   * Get NS
   * @return NS
   */
  @javax.annotation.Nullable
  public List getNS() {
    return NS;
  }

  public void setNS(List NS) {
    this.NS = NS;
  }


  public ExpectedAttributeValueValue BS(List BS) {
    this.BS = BS;
    return this;
  }

  /**
   * Get BS
   * @return BS
   */
  @javax.annotation.Nullable
  public List getBS() {
    return BS;
  }

  public void setBS(List BS) {
    this.BS = BS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpectedAttributeValueValue expectedAttributeValueValue = (ExpectedAttributeValueValue) o;
    return Objects.equals(this.S, expectedAttributeValueValue.S) &&
        Objects.equals(this.N, expectedAttributeValueValue.N) &&
        Objects.equals(this.B, expectedAttributeValueValue.B) &&
        Objects.equals(this.SS, expectedAttributeValueValue.SS) &&
        Objects.equals(this.NS, expectedAttributeValueValue.NS) &&
        Objects.equals(this.BS, expectedAttributeValueValue.BS);
  }

  @Override
  public int hashCode() {
    return Objects.hash(S, N, B, SS, NS, BS);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpectedAttributeValueValue {\n");
    sb.append("    S: ").append(toIndentedString(S)).append("\n");
    sb.append("    N: ").append(toIndentedString(N)).append("\n");
    sb.append("    B: ").append(toIndentedString(B)).append("\n");
    sb.append("    SS: ").append(toIndentedString(SS)).append("\n");
    sb.append("    NS: ").append(toIndentedString(NS)).append("\n");
    sb.append("    BS: ").append(toIndentedString(BS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S");
    openapiFields.add("N");
    openapiFields.add("B");
    openapiFields.add("SS");
    openapiFields.add("NS");
    openapiFields.add("BS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpectedAttributeValueValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpectedAttributeValueValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpectedAttributeValueValue is not found in the empty JSON string", ExpectedAttributeValueValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpectedAttributeValueValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpectedAttributeValueValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S`
      if (jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S"));
      }
      // validate the optional field `N`
      if (jsonObj.get("N") != null && !jsonObj.get("N").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("N"));
      }
      // validate the optional field `B`
      if (jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("B"));
      }
      // validate the optional field `SS`
      if (jsonObj.get("SS") != null && !jsonObj.get("SS").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SS"));
      }
      // validate the optional field `NS`
      if (jsonObj.get("NS") != null && !jsonObj.get("NS").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NS"));
      }
      // validate the optional field `BS`
      if (jsonObj.get("BS") != null && !jsonObj.get("BS").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BS"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpectedAttributeValueValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpectedAttributeValueValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpectedAttributeValueValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpectedAttributeValueValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpectedAttributeValueValue>() {
           @Override
           public void write(JsonWriter out, ExpectedAttributeValueValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpectedAttributeValueValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpectedAttributeValueValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpectedAttributeValueValue
   * @throws IOException if the JSON string is invalid with respect to ExpectedAttributeValueValue
   */
  public static ExpectedAttributeValueValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpectedAttributeValueValue.class);
  }

  /**
   * Convert an instance of ExpectedAttributeValueValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

