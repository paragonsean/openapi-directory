/*
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Key;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetItemInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:23.573914-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetItemInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Key key;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_GET = "AttributesToGet";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_GET)
  private List<String> attributesToGet = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  private Boolean consistentRead;

  public GetItemInput() {
  }

  public GetItemInput tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public GetItemInput key(Key key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nonnull
  public Key getKey() {
    return key;
  }

  public void setKey(Key key) {
    this.key = key;
  }


  public GetItemInput attributesToGet(List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
    return this;
  }

  public GetItemInput addAttributesToGetItem(String attributesToGetItem) {
    if (this.attributesToGet == null) {
      this.attributesToGet = new ArrayList<>();
    }
    this.attributesToGet.add(attributesToGetItem);
    return this;
  }

  /**
   * List of &lt;code&gt;Attribute&lt;/code&gt; names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.
   * @return attributesToGet
   */
  @javax.annotation.Nullable
  public List<String> getAttributesToGet() {
    return attributesToGet;
  }

  public void setAttributesToGet(List<String> attributesToGet) {
    this.attributesToGet = attributesToGet;
  }


  public GetItemInput consistentRead(Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * If set to &lt;code&gt;true&lt;/code&gt;, then a consistent read is issued. Otherwise eventually-consistent is used.
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetItemInput getItemInput = (GetItemInput) o;
    return Objects.equals(this.tableName, getItemInput.tableName) &&
        Objects.equals(this.key, getItemInput.key) &&
        Objects.equals(this.attributesToGet, getItemInput.attributesToGet) &&
        Objects.equals(this.consistentRead, getItemInput.consistentRead);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, key, attributesToGet, consistentRead);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetItemInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    attributesToGet: ").append(toIndentedString(attributesToGet)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableName");
    openapiFields.add("Key");
    openapiFields.add("AttributesToGet");
    openapiFields.add("ConsistentRead");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TableName");
    openapiRequiredFields.add("Key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetItemInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetItemInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetItemInput is not found in the empty JSON string", GetItemInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetItemInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetItemInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetItemInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the required field `Key`
      Key.validateJsonElement(jsonObj.get("Key"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("AttributesToGet") != null && !jsonObj.get("AttributesToGet").isJsonNull() && !jsonObj.get("AttributesToGet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributesToGet` to be an array in the JSON string but got `%s`", jsonObj.get("AttributesToGet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetItemInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetItemInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetItemInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetItemInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetItemInput>() {
           @Override
           public void write(JsonWriter out, GetItemInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetItemInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetItemInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetItemInput
   * @throws IOException if the JSON string is invalid with respect to GetItemInput
   */
  public static GetItemInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetItemInput.class);
  }

  /**
   * Convert an instance of GetItemInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

