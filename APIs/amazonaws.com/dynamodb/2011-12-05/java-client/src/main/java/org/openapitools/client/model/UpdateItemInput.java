/*
 * Amazon DynamoDB
 * <p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective non-relational database service.</p> <p>Amazon DynamoDB removes traditional scalability limitations on data storage while maintaining low latency and predictable performance.</p>
 *
 * The version of the OpenAPI document: 2011-12-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AttributeValueUpdate;
import org.openapitools.client.model.ExpectedAttributeValue;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.ReturnValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateItemInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:23.573914-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateItemInput {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Key key;

  public static final String SERIALIZED_NAME_ATTRIBUTE_UPDATES = "AttributeUpdates";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_UPDATES)
  private Map<String, AttributeValueUpdate> attributeUpdates = new HashMap<>();

  public static final String SERIALIZED_NAME_EXPECTED = "Expected";
  @SerializedName(SERIALIZED_NAME_EXPECTED)
  private Map<String, ExpectedAttributeValue> expected = new HashMap<>();

  public static final String SERIALIZED_NAME_RETURN_VALUES = "ReturnValues";
  @SerializedName(SERIALIZED_NAME_RETURN_VALUES)
  private ReturnValue returnValues;

  public UpdateItemInput() {
  }

  public UpdateItemInput tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public UpdateItemInput key(Key key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nonnull
  public Key getKey() {
    return key;
  }

  public void setKey(Key key) {
    this.key = key;
  }


  public UpdateItemInput attributeUpdates(Map<String, AttributeValueUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
    return this;
  }

  public UpdateItemInput putAttributeUpdatesItem(String key, AttributeValueUpdate attributeUpdatesItem) {
    if (this.attributeUpdates == null) {
      this.attributeUpdates = new HashMap<>();
    }
    this.attributeUpdates.put(key, attributeUpdatesItem);
    return this;
  }

  /**
   * Map of attribute name to the new value and action for the update. The attribute names specify the attributes to modify, and cannot contain any primary key attributes.
   * @return attributeUpdates
   */
  @javax.annotation.Nonnull
  public Map<String, AttributeValueUpdate> getAttributeUpdates() {
    return attributeUpdates;
  }

  public void setAttributeUpdates(Map<String, AttributeValueUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
  }


  public UpdateItemInput expected(Map<String, ExpectedAttributeValue> expected) {
    this.expected = expected;
    return this;
  }

  public UpdateItemInput putExpectedItem(String key, ExpectedAttributeValue expectedItem) {
    if (this.expected == null) {
      this.expected = new HashMap<>();
    }
    this.expected.put(key, expectedItem);
    return this;
  }

  /**
   * Designates an attribute for a conditional modification. The &lt;code&gt;Expected&lt;/code&gt; parameter allows you to provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute has a particular value before modifying it.
   * @return expected
   */
  @javax.annotation.Nullable
  public Map<String, ExpectedAttributeValue> getExpected() {
    return expected;
  }

  public void setExpected(Map<String, ExpectedAttributeValue> expected) {
    this.expected = expected;
  }


  public UpdateItemInput returnValues(ReturnValue returnValues) {
    this.returnValues = returnValues;
    return this;
  }

  /**
   * Get returnValues
   * @return returnValues
   */
  @javax.annotation.Nullable
  public ReturnValue getReturnValues() {
    return returnValues;
  }

  public void setReturnValues(ReturnValue returnValues) {
    this.returnValues = returnValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateItemInput updateItemInput = (UpdateItemInput) o;
    return Objects.equals(this.tableName, updateItemInput.tableName) &&
        Objects.equals(this.key, updateItemInput.key) &&
        Objects.equals(this.attributeUpdates, updateItemInput.attributeUpdates) &&
        Objects.equals(this.expected, updateItemInput.expected) &&
        Objects.equals(this.returnValues, updateItemInput.returnValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, key, attributeUpdates, expected, returnValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateItemInput {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    attributeUpdates: ").append(toIndentedString(attributeUpdates)).append("\n");
    sb.append("    expected: ").append(toIndentedString(expected)).append("\n");
    sb.append("    returnValues: ").append(toIndentedString(returnValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableName");
    openapiFields.add("Key");
    openapiFields.add("AttributeUpdates");
    openapiFields.add("Expected");
    openapiFields.add("ReturnValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TableName");
    openapiRequiredFields.add("Key");
    openapiRequiredFields.add("AttributeUpdates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateItemInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateItemInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateItemInput is not found in the empty JSON string", UpdateItemInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateItemInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateItemInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateItemInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the required field `Key`
      Key.validateJsonElement(jsonObj.get("Key"));
      // validate the optional field `ReturnValues`
      if (jsonObj.get("ReturnValues") != null && !jsonObj.get("ReturnValues").isJsonNull()) {
        ReturnValue.validateJsonElement(jsonObj.get("ReturnValues"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateItemInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateItemInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateItemInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateItemInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateItemInput>() {
           @Override
           public void write(JsonWriter out, UpdateItemInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateItemInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateItemInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateItemInput
   * @throws IOException if the JSON string is invalid with respect to UpdateItemInput
   */
  public static UpdateItemInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateItemInput.class);
  }

  /**
   * Convert an instance of UpdateItemInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

