openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>Amazon DynamoDB is a fast, highly scalable, highly available, cost-effective\
    \ non-relational database service.</p> <p>Amazon DynamoDB removes traditional\
    \ scalability limitations on data storage while maintaining low latency and predictable\
    \ performance.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon DynamoDB
  version: 2011-12-05
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: dynamodb
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dynamodb-2011-12-05.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: false
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/dynamodb/
servers:
- description: The DynamoDB multi-region endpoint
  url: "http://dynamodb.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The DynamoDB multi-region endpoint
  url: "https://dynamodb.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The DynamoDB endpoint for China (Beijing) and China (Ningxia)
  url: "http://dynamodb.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The DynamoDB endpoint for China (Beijing) and China (Ningxia)
  url: "https://dynamodb.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=DynamoDB_20111205.BatchGetItem:
    post:
      description: "<p>Retrieves the attributes for multiple items from multiple tables\
        \ using their primary keys.</p> <p>The maximum number of item attributes that\
        \ can be retrieved for a single operation is 100. Also, the number of items\
        \ retrieved is constrained by a 1 MB the size limit. If the response size\
        \ limit is exceeded or a partial result is returned due to an internal processing\
        \ failure, Amazon DynamoDB returns an <code>UnprocessedKeys</code> value so\
        \ you can retry the operation starting with the next item to get.</p> <p>Amazon\
        \ DynamoDB automatically adjusts the number of items returned per page to\
        \ enforce this limit. For example, even if you ask to retrieve 100 items,\
        \ but each individual item is 50k in size, the system returns 20 items and\
        \ an appropriate <code>UnprocessedKeys</code> value so you can get the next\
        \ page of results. If necessary, your application needs its own logic to assemble\
        \ the pages of results into one set.</p>"
      operationId: batch_get_item
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination token
        explode: true
        in: query
        name: RequestItems
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.BatchGetItem
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetItemInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetItemOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.BatchWriteItem:
    post:
      description: <p>Allows to execute a batch of Put and/or Delete Requests for
        many tables in a single call. A total of 25 requests are allowed.</p> <p>There
        are no transaction guarantees provided by this API. It does not allow conditional
        puts nor does it support return values.</p>
      operationId: batch_write_item
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.BatchWriteItem
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchWriteItemInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchWriteItemOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.CreateTable:
    post:
      description: "<p>Adds a new table to your account.</p> <p>The table name must\
        \ be unique among those associated with the AWS Account issuing the request,\
        \ and the AWS Region that receives the request (e.g. <code>us-east-1</code>).</p>\
        \ <p>The <code>CreateTable</code> operation triggers an asynchronous workflow\
        \ to begin creating the table. Amazon DynamoDB immediately returns the state\
        \ of the table (<code>CREATING</code>) until the table is in the <code>ACTIVE</code>\
        \ state. Once the table is in the <code>ACTIVE</code> state, you can perform\
        \ data plane operations.</p>"
      operationId: create_table
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.CreateTable
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTableOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.DeleteItem:
    post:
      description: "<p>Deletes a single item in a table by primary key.</p> <p>You\
        \ can perform a conditional delete operation that deletes the item if it exists,\
        \ or if it has an expected attribute value.</p>"
      operationId: delete_item
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.DeleteItem
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteItemInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteItemOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionalCheckFailedException'
          description: ConditionalCheckFailedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.DeleteTable:
    post:
      description: "<p>Deletes a table and all of its items.</p> <p>If the table is\
        \ in the <code>ACTIVE</code> state, you can delete it. If a table is in <code>CREATING</code>\
        \ or <code>UPDATING</code> states then Amazon DynamoDB returns a <code>ResourceInUseException</code>.\
        \ If the specified table does not exist, Amazon DynamoDB returns a <code>ResourceNotFoundException</code>.</p>"
      operationId: delete_table
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.DeleteTable
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTableInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTableOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.DescribeTable:
    post:
      description: "<p>Retrieves information about the table, including the current\
        \ status of the table, the primary key schema and when the table was created.</p>\
        \ <p>If the table does not exist, Amazon DynamoDB returns a <code>ResourceNotFoundException</code>.</p>"
      operationId: describe_table
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.DescribeTable
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTableInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTableOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.GetItem:
    post:
      description: "<p>Retrieves a set of Attributes for an item that matches the\
        \ primary key.</p> <p>The <code>GetItem</code> operation provides an eventually-consistent\
        \ read by default. If eventually-consistent reads are not acceptable for your\
        \ application, use <code>ConsistentRead</code>. Although this operation might\
        \ take longer than a standard read, it always returns the last updated value.</p>"
      operationId: get_item
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.GetItem
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetItemInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.ListTables:
    post:
      description: Retrieves a paginated list of table names created by the AWS Account
        of the caller in the AWS Region (e.g. <code>us-east-1</code>).
      operationId: list_tables
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: Limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: ExclusiveStartTableName
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.ListTables
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTablesInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.PutItem:
    post:
      description: "<p>Creates a new item, or replaces an old item with a new item\
        \ (including all the attributes).</p> <p>If an item already exists in the\
        \ specified table with the same primary key, the new item completely replaces\
        \ the existing item. You can perform a conditional put (insert a new item\
        \ if one with the specified primary key doesn't exist), or replace an existing\
        \ item if it has certain attribute values.</p>"
      operationId: put_item
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.PutItem
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutItemInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutItemOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionalCheckFailedException'
          description: ConditionalCheckFailedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.Query:
    post:
      description: "<p>Gets the values of one or more items and its attributes by\
        \ primary key (composite primary key, only).</p> <p>Narrow the scope of the\
        \ query using comparison operators on the <code>RangeKeyValue</code> of the\
        \ composite key. Use the <code>ScanIndexForward</code> parameter to get results\
        \ in forward or reverse order by range key.</p>"
      operationId: query
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: Limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: ExclusiveStartKey
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.Query
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.Scan:
    post:
      description: <p>Retrieves one or more items and its attributes by performing
        a full scan of a table.</p> <p>Provide a <code>ScanFilter</code> to get more
        specific results.</p>
      operationId: scan
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: Limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: ExclusiveStartKey
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.Scan
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.UpdateItem:
    post:
      description: "<p>Edits an existing item's attributes.</p> <p>You can perform\
        \ a conditional update (insert a new attribute name-value pair if it doesn't\
        \ exist, or replace an existing name-value pair if it has certain expected\
        \ attribute values).</p>"
      operationId: update_item
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.UpdateItem
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateItemOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionalCheckFailedException'
          description: ConditionalCheckFailedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionedThroughputExceededException'
          description: ProvisionedThroughputExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestLimitExceeded'
          description: RequestLimitExceeded
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=DynamoDB_20111205.UpdateTable:
    post:
      description: <p>Updates the provisioned throughput for the given table.</p>
        <p>Setting the throughput for a table helps you manage performance and is
        part of the Provisioned Throughput feature of Amazon DynamoDB.</p>
      operationId: update_table
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - DynamoDB_20111205.UpdateTable
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableInput'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTableOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    BatchGetItemOutput:
      example:
        UnprocessedKeys: ""
        Responses:
          key:
            Items:
            - null
            - null
            ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Responses:
          additionalProperties:
            $ref: '#/components/schemas/BatchResponse'
          description: Table names and the respective item attributes from the tables.
          title: Responses
          type: object
        UnprocessedKeys:
          allOf:
          - $ref: '#/components/schemas/BatchGetRequestMap'
          - description: "Contains a map of tables and their respective keys that\
              \ were not processed with the current response, possibly due to reaching\
              \ a limit on the response size. The <code>UnprocessedKeys</code> value\
              \ is in the same form as a <code>RequestItems</code> parameter (so the\
              \ value can be provided directly to a subsequent <code>BatchGetItem</code>\
              \ operation). For more information, see the above <code>RequestItems</code>\
              \ parameter."
          title: UnprocessedKeys
      title: BatchGetItemOutput
      type: object
    BatchGetItemInput:
      example:
        RequestItems:
          key:
            Keys:
            - HashKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
              RangeKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
            - HashKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
              RangeKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
            - HashKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
              RangeKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
            - HashKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
              RangeKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
            - HashKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
              RangeKeyElement:
                SS: ""
                BS: ""
                B: ""
                S: ""
                NS: ""
                "N": ""
            AttributesToGet:
            - null
            - null
            ConsistentRead: true
      properties:
        RequestItems:
          additionalProperties:
            $ref: '#/components/schemas/KeysAndAttributes'
          description: "A map of the table name and corresponding items to get by\
            \ primary key. While requesting items, each table name can be invoked\
            \ only once per operation."
          maxProperties: 100
          minProperties: 1
          title: RequestItems
          type: object
      required:
      - RequestItems
      title: BatchGetItemInput
      type: object
    ProvisionedThroughputExceededException: {}
    ResourceNotFoundException: {}
    RequestLimitExceeded: {}
    InternalServerError: {}
    BatchWriteItemOutput:
      description: A container for <code>BatchWriteItem</code> response
      example:
        UnprocessedItems: ""
        Responses: ""
      properties:
        Responses:
          allOf:
          - $ref: '#/components/schemas/BatchWriteResponseMap'
          - description: The response object as a result of <code>BatchWriteItem</code>
              call. This is essentially a map of table name to <code>ConsumedCapacityUnits</code>.
          title: Responses
        UnprocessedItems:
          allOf:
          - $ref: '#/components/schemas/BatchWriteItemRequestMap'
          - description: The Items which we could not successfully process in a <code>BatchWriteItem</code>
              call is returned as <code>UnprocessedItems</code>
          title: UnprocessedItems
      title: BatchWriteItemOutput
      type: object
    BatchWriteItemInput:
      example:
        RequestItems: ""
      properties:
        RequestItems:
          allOf:
          - $ref: '#/components/schemas/BatchWriteItemRequestMap'
          - description: A map of table name to list-of-write-requests. Used as input
              to the <code>BatchWriteItem</code> API call
          title: RequestItems
      required:
      - RequestItems
      title: BatchWriteItemInput
      type: object
    LimitExceededException: {}
    CreateTableOutput:
      example:
        TableDescription:
          TableName: ""
          CreationDateTime: 2000-01-23T04:56:07.000+00:00
          TableSizeBytes: 5
          TableStatus: CREATING
          ItemCount: 5
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            LastDecreaseDateTime: 2000-01-23T04:56:07.000+00:00
            ReadCapacityUnits: 1
            LastIncreaseDateTime: 2000-01-23T04:56:07.000+00:00
            NumberOfDecreasesToday: 1
          KeySchema:
            HashKeyElement:
              AttributeType: ""
              AttributeName: ""
            RangeKeyElement:
              AttributeType: ""
              AttributeName: ""
      properties:
        TableDescription:
          $ref: '#/components/schemas/TableDescription'
      title: CreateTableOutput
      type: object
    CreateTableInput:
      example:
        TableName: ""
        ProvisionedThroughput:
          WriteCapacityUnits: ""
          ReadCapacityUnits: ""
        KeySchema:
          HashKeyElement:
            AttributeType: ""
            AttributeName: ""
          RangeKeyElement:
            AttributeType: ""
            AttributeName: ""
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table you want to create. Allowed characters\
              \ are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code>\
              \ (underscore), <code>-</code> (hyphen) and <code>.</code> (period)."
          title: TableName
        KeySchema:
          $ref: '#/components/schemas/KeySchema'
        ProvisionedThroughput:
          $ref: '#/components/schemas/ProvisionedThroughput'
      required:
      - KeySchema
      - ProvisionedThroughput
      - TableName
      title: CreateTableInput
      type: object
    ResourceInUseException: {}
    DeleteItemOutput:
      example:
        Attributes: ""
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeMap'
          - description: "If the <code>ReturnValues</code> parameter is provided as\
              \ <code>ALL_OLD</code> in the request, Amazon DynamoDB returns an array\
              \ of attribute name-value pairs (essentially, the deleted item). Otherwise,\
              \ the response contains an empty set."
          title: Attributes
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: DeleteItemOutput
      type: object
    DeleteItemInput:
      example:
        TableName: ""
        Expected:
          key:
            Exists: ""
            Value:
              SS: ""
              BS: ""
              B: ""
              S: ""
              NS: ""
              "N": ""
        Key:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        ReturnValues: NONE
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table in which you want to delete an item.\
              \ Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,\
              \ <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code>\
              \ (period)."
          title: TableName
        Key:
          $ref: '#/components/schemas/Key'
        Expected:
          additionalProperties:
            $ref: '#/components/schemas/ExpectedAttributeValue'
          description: "Designates an attribute for a conditional modification. The\
            \ <code>Expected</code> parameter allows you to provide an attribute name,\
            \ and whether or not Amazon DynamoDB should check to see if the attribute\
            \ has a particular value before modifying it."
          title: Expected
          type: object
        ReturnValues:
          $ref: '#/components/schemas/ReturnValue'
      required:
      - Key
      - TableName
      title: DeleteItemInput
      type: object
    ConditionalCheckFailedException: {}
    DeleteTableOutput:
      example:
        TableDescription:
          TableName: ""
          CreationDateTime: 2000-01-23T04:56:07.000+00:00
          TableSizeBytes: 5
          TableStatus: CREATING
          ItemCount: 5
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            LastDecreaseDateTime: 2000-01-23T04:56:07.000+00:00
            ReadCapacityUnits: 1
            LastIncreaseDateTime: 2000-01-23T04:56:07.000+00:00
            NumberOfDecreasesToday: 1
          KeySchema:
            HashKeyElement:
              AttributeType: ""
              AttributeName: ""
            RangeKeyElement:
              AttributeType: ""
              AttributeName: ""
      properties:
        TableDescription:
          $ref: '#/components/schemas/TableDescription'
      title: DeleteTableOutput
      type: object
    DeleteTableInput:
      example:
        TableName: ""
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table you want to delete. Allowed characters\
              \ are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code>\
              \ (underscore), <code>-</code> (hyphen) and <code>.</code> (period)."
          title: TableName
      required:
      - TableName
      title: DeleteTableInput
      type: object
    DescribeTableOutput:
      example:
        Table:
          TableName: ""
          CreationDateTime: 2000-01-23T04:56:07.000+00:00
          TableSizeBytes: 5
          TableStatus: CREATING
          ItemCount: 5
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            LastDecreaseDateTime: 2000-01-23T04:56:07.000+00:00
            ReadCapacityUnits: 1
            LastIncreaseDateTime: 2000-01-23T04:56:07.000+00:00
            NumberOfDecreasesToday: 1
          KeySchema:
            HashKeyElement:
              AttributeType: ""
              AttributeName: ""
            RangeKeyElement:
              AttributeType: ""
              AttributeName: ""
      properties:
        Table:
          $ref: '#/components/schemas/TableDescription'
      title: DescribeTableOutput
      type: object
    DescribeTableInput:
      example:
        TableName: ""
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table you want to describe. Allowed characters\
              \ are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code>\
              \ (underscore), <code>-</code> (hyphen) and <code>.</code> (period)."
          title: TableName
      required:
      - TableName
      title: DescribeTableInput
      type: object
    GetItemOutput:
      example:
        Item: ""
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Item:
          allOf:
          - $ref: '#/components/schemas/AttributeMap'
          - description: Contains the requested attributes.
          title: Item
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: GetItemOutput
      type: object
    GetItemInput:
      example:
        TableName: ""
        AttributesToGet:
        - null
        - null
        Key:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        ConsistentRead: true
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table in which you want to get an item.\
              \ Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,\
              \ <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code>\
              \ (period)."
          title: TableName
        Key:
          $ref: '#/components/schemas/Key'
        AttributesToGet:
          description: "List of <code>Attribute</code> names. If attribute names are\
            \ not specified then all attributes will be returned. If some attributes\
            \ are not found, they will not appear in the result."
          items:
            $ref: '#/components/schemas/AttributeName'
          minItems: 1
          title: AttributeNameList
          type: array
        ConsistentRead:
          description: "If set to <code>true</code>, then a consistent read is issued.\
            \ Otherwise eventually-consistent is used."
          title: ConsistentRead
          type: boolean
      required:
      - Key
      - TableName
      title: GetItemInput
      type: object
    ListTablesOutput:
      example:
        TableNames:
        - null
        - null
        LastEvaluatedTableName: ""
      properties:
        TableNames:
          items:
            $ref: '#/components/schemas/TableName'
          title: TableNames
          type: array
        LastEvaluatedTableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the last table in the current list. Use this\
              \ value as the <code>ExclusiveStartTableName</code> in a new request\
              \ to continue the list until all the table names are returned. If this\
              \ value is null, all table names have been returned."
          title: LastEvaluatedTableName
      title: ListTablesOutput
      type: object
    ListTablesInput:
      example:
        Limit: 8
        ExclusiveStartTableName: ""
      properties:
        ExclusiveStartTableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table that starts the list. If you already\
              \ ran a <code>ListTables</code> operation and received a <code>LastEvaluatedTableName</code>\
              \ value in the response, use that value here to continue the list."
          title: ExclusiveStartTableName
        Limit:
          description: A number of maximum table names to return.
          maximum: 100
          minimum: 1
          title: Limit
          type: integer
      title: ListTablesInput
      type: object
    PutItemOutput:
      example:
        Attributes: ""
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeMap'
          - description: "Attribute values before the put operation, but only if the\
              \ <code>ReturnValues</code> parameter is specified as <code>ALL_OLD</code>\
              \ in the request."
          title: Attributes
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: PutItemOutput
      type: object
    PutItemInput:
      example:
        TableName: ""
        Item:
          key:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        Expected:
          key:
            Exists: ""
            Value:
              SS: ""
              BS: ""
              B: ""
              S: ""
              NS: ""
              "N": ""
        ReturnValues: NONE
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table in which you want to put an item.\
              \ Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,\
              \ <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code>\
              \ (period)."
          title: TableName
        Item:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
          description: "A map of the attributes for the item, and must include the\
            \ primary key values that define the item. Other attribute name-value\
            \ pairs can be provided for the item."
          title: Item
          type: object
        Expected:
          additionalProperties:
            $ref: '#/components/schemas/ExpectedAttributeValue'
          description: "Designates an attribute for a conditional modification. The\
            \ <code>Expected</code> parameter allows you to provide an attribute name,\
            \ and whether or not Amazon DynamoDB should check to see if the attribute\
            \ has a particular value before modifying it."
          title: Expected
          type: object
        ReturnValues:
          $ref: '#/components/schemas/ReturnValue'
      required:
      - Item
      - TableName
      title: PutItemInput
      type: object
    QueryOutput:
      example:
        Items:
        - null
        - null
        Count: ""
        LastEvaluatedKey:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Items:
          items:
            $ref: '#/components/schemas/AttributeMap'
          title: ItemList
          type: array
        Count:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: Number of items in the response.
          title: Count
        LastEvaluatedKey:
          $ref: '#/components/schemas/QueryOutput_LastEvaluatedKey'
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: QueryOutput
      type: object
    QueryInput:
      example:
        TableName: ""
        ScanIndexForward: ""
        RangeKeyCondition:
          ComparisonOperator: EQ
          AttributeValueList:
          - SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          - SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        HashKeyValue:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        ExclusiveStartKey:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        AttributesToGet:
        - null
        - null
        Limit: ""
        Count: ""
        ConsistentRead: true
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table in which you want to query. Allowed\
              \ characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,\
              \ <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code>\
              \ (period)."
          title: TableName
        AttributesToGet:
          description: "List of <code>Attribute</code> names. If attribute names are\
            \ not specified then all attributes will be returned. If some attributes\
            \ are not found, they will not appear in the result."
          items:
            $ref: '#/components/schemas/AttributeName'
          minItems: 1
          title: AttributeNameList
          type: array
        Limit:
          allOf:
          - $ref: '#/components/schemas/PositiveIntegerObject'
          - description: "The maximum number of items to return. If Amazon DynamoDB\
              \ hits this limit while querying the table, it stops the query and returns\
              \ the matching values up to the limit, and a <code>LastEvaluatedKey</code>\
              \ to apply in a subsequent operation to continue the query. Also, if\
              \ the result set size exceeds 1MB before Amazon DynamoDB hits this limit,\
              \ it stops the query and returns the matching values, and a <code>LastEvaluatedKey</code>\
              \ to apply in a subsequent operation to continue the query."
          title: Limit
        ConsistentRead:
          description: "If set to <code>true</code>, then a consistent read is issued.\
            \ Otherwise eventually-consistent is used."
          title: ConsistentRead
          type: boolean
        Count:
          allOf:
          - $ref: '#/components/schemas/BooleanObject'
          - description: "If set to <code>true</code>, Amazon DynamoDB returns a total\
              \ number of items that match the query parameters, instead of a list\
              \ of the matching items and their attributes. Do not set <code>Count</code>\
              \ to <code>true</code> while providing a list of <code>AttributesToGet</code>,\
              \ otherwise Amazon DynamoDB returns a validation error."
          title: Count
        HashKeyValue:
          $ref: '#/components/schemas/QueryInput_HashKeyValue'
        RangeKeyCondition:
          $ref: '#/components/schemas/QueryInput_RangeKeyCondition'
        ScanIndexForward:
          allOf:
          - $ref: '#/components/schemas/BooleanObject'
          - description: "Specifies forward or backward traversal of the index. Amazon\
              \ DynamoDB returns results reflecting the requested order, determined\
              \ by the range key. The default value is <code>true</code> (forward)."
          title: ScanIndexForward
        ExclusiveStartKey:
          $ref: '#/components/schemas/QueryInput_ExclusiveStartKey'
      required:
      - HashKeyValue
      - TableName
      title: QueryInput
      type: object
    ScanOutput:
      example:
        Items:
        - null
        - null
        Count: ""
        ScannedCount: ""
        LastEvaluatedKey:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Items:
          items:
            $ref: '#/components/schemas/AttributeMap'
          title: ItemList
          type: array
        Count:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: Number of items in the response.
          title: Count
        ScannedCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: "Number of items in the complete scan before any filters\
              \ are applied. A high <code>ScannedCount</code> value with few, or no,\
              \ <code>Count</code> results indicates an inefficient <code>Scan</code>\
              \ operation."
          title: ScannedCount
        LastEvaluatedKey:
          $ref: '#/components/schemas/ScanOutput_LastEvaluatedKey'
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: ScanOutput
      type: object
    ScanInput:
      example:
        TableName: ""
        ScanFilter: ""
        ExclusiveStartKey:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        AttributesToGet:
        - null
        - null
        Limit: ""
        Count: ""
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table in which you want to scan. Allowed\
              \ characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,\
              \ <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code>\
              \ (period)."
          title: TableName
        AttributesToGet:
          description: "List of <code>Attribute</code> names. If attribute names are\
            \ not specified then all attributes will be returned. If some attributes\
            \ are not found, they will not appear in the result."
          items:
            $ref: '#/components/schemas/AttributeName'
          minItems: 1
          title: AttributeNameList
          type: array
        Limit:
          allOf:
          - $ref: '#/components/schemas/PositiveIntegerObject'
          - description: "The maximum number of items to return. If Amazon DynamoDB\
              \ hits this limit while scanning the table, it stops the scan and returns\
              \ the matching values up to the limit, and a <code>LastEvaluatedKey</code>\
              \ to apply in a subsequent operation to continue the scan. Also, if\
              \ the scanned data set size exceeds 1 MB before Amazon DynamoDB hits\
              \ this limit, it stops the scan and returns the matching values up to\
              \ the limit, and a <code>LastEvaluatedKey</code> to apply in a subsequent\
              \ operation to continue the scan."
          title: Limit
        Count:
          allOf:
          - $ref: '#/components/schemas/BooleanObject'
          - description: "If set to <code>true</code>, Amazon DynamoDB returns a total\
              \ number of items for the <code>Scan</code> operation, even if the operation\
              \ has no matching items for the assigned filter. Do not set <code>Count</code>\
              \ to <code>true</code> while providing a list of <code>AttributesToGet</code>,\
              \ otherwise Amazon DynamoDB returns a validation error."
          title: Count
        ScanFilter:
          allOf:
          - $ref: '#/components/schemas/FilterConditionMap'
          - description: Evaluates the scan results and returns only the desired values.
          title: ScanFilter
        ExclusiveStartKey:
          $ref: '#/components/schemas/ScanInput_ExclusiveStartKey'
      required:
      - TableName
      title: ScanInput
      type: object
    UpdateItemOutput:
      example:
        Attributes: ""
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeMap'
          - description: "A map of attribute name-value pairs, but only if the <code>ReturnValues</code>\
              \ parameter is specified as something other than <code>NONE</code> in\
              \ the request."
          title: Attributes
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: UpdateItemOutput
      type: object
    UpdateItemInput:
      example:
        TableName: ""
        Expected:
          key:
            Exists: ""
            Value:
              SS: ""
              BS: ""
              B: ""
              S: ""
              NS: ""
              "N": ""
        Key:
          HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        AttributeUpdates:
          key:
            Action: ADD
            Value:
              SS: ""
              BS: ""
              B: ""
              S: ""
              NS: ""
              "N": ""
        ReturnValues: NONE
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table in which you want to update an item.\
              \ Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>,\
              \ <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code>\
              \ (period)."
          title: TableName
        Key:
          $ref: '#/components/schemas/Key'
        AttributeUpdates:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValueUpdate'
          description: "Map of attribute name to the new value and action for the\
            \ update. The attribute names specify the attributes to modify, and cannot\
            \ contain any primary key attributes."
          title: AttributeUpdates
          type: object
        Expected:
          additionalProperties:
            $ref: '#/components/schemas/ExpectedAttributeValue'
          description: "Designates an attribute for a conditional modification. The\
            \ <code>Expected</code> parameter allows you to provide an attribute name,\
            \ and whether or not Amazon DynamoDB should check to see if the attribute\
            \ has a particular value before modifying it."
          title: Expected
          type: object
        ReturnValues:
          $ref: '#/components/schemas/ReturnValue'
      required:
      - AttributeUpdates
      - Key
      - TableName
      title: UpdateItemInput
      type: object
    UpdateTableOutput:
      example:
        TableDescription:
          TableName: ""
          CreationDateTime: 2000-01-23T04:56:07.000+00:00
          TableSizeBytes: 5
          TableStatus: CREATING
          ItemCount: 5
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            LastDecreaseDateTime: 2000-01-23T04:56:07.000+00:00
            ReadCapacityUnits: 1
            LastIncreaseDateTime: 2000-01-23T04:56:07.000+00:00
            NumberOfDecreasesToday: 1
          KeySchema:
            HashKeyElement:
              AttributeType: ""
              AttributeName: ""
            RangeKeyElement:
              AttributeType: ""
              AttributeName: ""
      properties:
        TableDescription:
          $ref: '#/components/schemas/TableDescription'
      title: UpdateTableOutput
      type: object
    UpdateTableInput:
      example:
        TableName: ""
        ProvisionedThroughput:
          WriteCapacityUnits: ""
          ReadCapacityUnits: ""
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: "The name of the table you want to update. Allowed characters\
              \ are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code>\
              \ (underscore), <code>-</code> (hyphen) and <code>.</code> (period)."
          title: TableName
        ProvisionedThroughput:
          $ref: '#/components/schemas/ProvisionedThroughput'
      required:
      - ProvisionedThroughput
      - TableName
      title: UpdateTableInput
      type: object
    AttributeAction:
      description: "The type of action for an item update operation. Only use the\
        \ add action for numbers or sets; the specified value is added to the existing\
        \ value. If a set of values is specified, the values are added to the existing\
        \ set. Adds the specified attribute. If the attribute exists, it is replaced\
        \ by the new value. If no value is specified, this removes the attribute and\
        \ its value. If a set of values is specified, then the values in the specified\
        \ set are removed from the old set."
      enum:
      - ADD
      - PUT
      - DELETE
      title: AttributeAction
      type: string
    AttributeValue:
      description: "AttributeValue can be <code>String</code>, <code>Number</code>,\
        \ <code>Binary</code>, <code>StringSet</code>, <code>NumberSet</code>, <code>BinarySet</code>."
      example:
        SS: ""
        BS: ""
        B: ""
        S: ""
        NS: ""
        "N": ""
      properties:
        S:
          allOf:
          - $ref: '#/components/schemas/StringAttributeValue'
          - description: Strings are Unicode with UTF-8 binary encoding. The maximum
              size is limited by the size of the primary key (1024 bytes as a range
              part of a key or 2048 bytes as a single part hash key) or the item size
              (64k).
          title: S
        "N":
          allOf:
          - $ref: '#/components/schemas/NumberAttributeValue'
          - description: Numbers are positive or negative exact-value decimals and
              integers. A number can have up to 38 digits precision and can be between
              10^-128 to 10^+126.
          title: "N"
        B:
          allOf:
          - $ref: '#/components/schemas/BinaryAttributeValue'
          - description: Binary attributes are sequences of unsigned bytes.
          title: B
        SS:
          allOf:
          - $ref: '#/components/schemas/StringSetAttributeValue'
          - description: A set of strings.
          title: SS
        NS:
          allOf:
          - $ref: '#/components/schemas/NumberSetAttributeValue'
          - description: A set of numbers.
          title: NS
        BS:
          allOf:
          - $ref: '#/components/schemas/BinarySetAttributeValue'
          - description: A set of binary attributes.
          title: BS
      title: AttributeValue
      type: object
    AttributeMap:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
      title: AttributeMap
      type: object
    AttributeName:
      maxLength: 65535
      title: AttributeName
      type: string
    AttributeNameList:
      description: "List of <code>Attribute</code> names. If attribute names are not\
        \ specified then all attributes will be returned. If some attributes are not\
        \ found, they will not appear in the result."
      items:
        $ref: '#/components/schemas/AttributeName'
      minItems: 1
      title: AttributeNameList
      type: array
    AttributeValueUpdate:
      description: "Specifies the attribute to update and how to perform the update.\
        \ Possible values: <code>PUT</code> (default), <code>ADD</code> or <code>DELETE</code>."
      example:
        Action: ADD
        Value:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      properties:
        Value:
          $ref: '#/components/schemas/AttributeValue'
        Action:
          $ref: '#/components/schemas/AttributeAction'
      title: AttributeValueUpdate
      type: object
    AttributeUpdates:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValueUpdate'
      description: "Map of attribute name to the new value and action for the update.\
        \ The attribute names specify the attributes to modify, and cannot contain\
        \ any primary key attributes."
      title: AttributeUpdates
      type: object
    StringAttributeValue:
      title: StringAttributeValue
      type: string
    NumberAttributeValue:
      title: NumberAttributeValue
      type: string
    BinaryAttributeValue:
      title: BinaryAttributeValue
      type: string
    StringSetAttributeValue:
      items:
        $ref: '#/components/schemas/StringAttributeValue'
      type: array
    NumberSetAttributeValue:
      items:
        $ref: '#/components/schemas/NumberAttributeValue'
      type: array
    BinarySetAttributeValue:
      items:
        $ref: '#/components/schemas/BinaryAttributeValue'
      type: array
    AttributeValueList:
      description: "A list of attribute values to be used with a comparison operator\
        \ for a scan or query operation. For comparisons that require more than one\
        \ value, such as a <code>BETWEEN</code> comparison, the AttributeValueList\
        \ contains two attribute values and the comparison operator."
      items:
        $ref: '#/components/schemas/AttributeValue'
      title: AttributeValueList
      type: array
    BatchGetRequestMap:
      additionalProperties:
        $ref: '#/components/schemas/KeysAndAttributes'
      description: "A map of the table name and corresponding items to get by primary\
        \ key. While requesting items, each table name can be invoked only once per\
        \ operation."
      maxProperties: 100
      minProperties: 1
      title: RequestItems
      type: object
    BatchGetResponseMap:
      additionalProperties:
        $ref: '#/components/schemas/BatchResponse'
      description: Table names and the respective item attributes from the tables.
      title: Responses
      type: object
    KeysAndAttributes:
      example:
        Keys:
        - HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        - HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        - HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        - HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        - HashKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
          RangeKeyElement:
            SS: ""
            BS: ""
            B: ""
            S: ""
            NS: ""
            "N": ""
        AttributesToGet:
        - null
        - null
        ConsistentRead: true
      properties:
        Keys:
          items:
            $ref: '#/components/schemas/Key'
          maxItems: 100
          minItems: 1
          title: KeyList
          type: array
        AttributesToGet:
          description: "List of <code>Attribute</code> names. If attribute names are\
            \ not specified then all attributes will be returned. If some attributes\
            \ are not found, they will not appear in the result."
          items:
            $ref: '#/components/schemas/AttributeName'
          minItems: 1
          title: AttributeNameList
          type: array
        ConsistentRead:
          description: "If set to <code>true</code>, then a consistent read is issued.\
            \ Otherwise eventually-consistent is used."
          title: ConsistentRead
          type: boolean
      required:
      - Keys
      title: KeysAndAttributes
      type: object
    BatchResponse:
      description: "The item attributes from a response in a specific table, along\
        \ with the read resources consumed on the table during the request."
      example:
        Items:
        - null
        - null
        ConsumedCapacityUnits: 0.8008281904610115
      properties:
        Items:
          items:
            $ref: '#/components/schemas/AttributeMap'
          title: ItemList
          type: array
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: BatchResponse
      type: object
    ItemList:
      items:
        $ref: '#/components/schemas/AttributeMap'
      title: ItemList
      type: array
    ConsumedCapacityUnits:
      description: "The number of Capacity Units of the provisioned throughput of\
        \ the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
        \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code> operations\
        \ consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>, <code>UpdateItem</code>,\
        \ and <code>DeleteItem</code> operations consume <code>WriteCapacityUnits</code>."
      format: double
      title: ConsumedCapacityUnits
      type: number
    BatchWriteItemRequestMap:
      additionalProperties:
        $ref: '#/components/schemas/WriteRequests'
      description: "<p>A map of table name to list-of-write-requests.</p> <p>Key:\
        \ The table name corresponding to the list of requests</p> <p>Value: Essentially\
        \ a list of request items. Each request item could contain either a <code>PutRequest</code>\
        \ or <code>DeleteRequest</code>. Never both.</p>"
      maxProperties: 25
      minProperties: 1
      type: object
    BatchWriteResponseMap:
      additionalProperties:
        $ref: '#/components/schemas/BatchWriteResponse'
      type: object
    WriteRequests:
      items:
        $ref: '#/components/schemas/WriteRequest'
      maxItems: 25
      minItems: 1
      title: WriteRequests
      type: array
    BatchWriteResponse:
      properties:
        ConsumedCapacityUnits:
          description: "The number of Capacity Units of the provisioned throughput\
            \ of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>,\
            \ <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code>\
            \ operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>,\
            \ <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume\
            \ <code>WriteCapacityUnits</code>."
          format: double
          title: ConsumedCapacityUnits
          type: number
      title: BatchWriteResponse
      type: object
    BooleanObject:
      type: boolean
    ComparisonOperator:
      description: "<p>A comparison operator is an enumeration of several operations:</p>\
        \ <ul> <li><code>EQ</code> for <em>equal</em>.</li> <li><code>NE</code> for\
        \ <em>not equal</em>.</li> <li><code>IN</code> checks for exact matches.</li>\
        \ <li><code>LE</code> for <em>less than or equal to</em>.</li> <li><code>LT</code>\
        \ for <em>less than</em>.</li> <li><code>GE</code> for <em>greater than or\
        \ equal to</em>.</li> <li><code>GT</code> for <em>greater than</em>.</li>\
        \ <li><code>BETWEEN</code> for <em>between</em>.</li> <li><code>NOT_NULL</code>\
        \ for <em>exists</em>.</li> <li><code>NULL</code> for <em>not exists</em>.</li>\
        \ <li><code>CONTAINS</code> for substring or value in a set.</li> <li><code>NOT_CONTAINS</code>\
        \ for absence of a substring or absence of a value in a set.</li> <li><code>BEGINS_WITH</code>\
        \ for a substring prefix.</li> </ul> <p>Scan operations support all available\
        \ comparison operators.</p> <p>Query operations support a subset of the available\
        \ comparison operators: EQ, LE, LT, GE, GT, BETWEEN, and BEGINS_WITH.</p>"
      enum:
      - EQ
      - NE
      - IN
      - LE
      - LT
      - GE
      - GT
      - BETWEEN
      - NOT_NULL
      - "NULL"
      - CONTAINS
      - NOT_CONTAINS
      - BEGINS_WITH
      title: ComparisonOperator
      type: string
    Condition:
      properties:
        AttributeValueList:
          description: "A list of attribute values to be used with a comparison operator\
            \ for a scan or query operation. For comparisons that require more than\
            \ one value, such as a <code>BETWEEN</code> comparison, the AttributeValueList\
            \ contains two attribute values and the comparison operator."
          items:
            $ref: '#/components/schemas/AttributeValue'
          title: AttributeValueList
          type: array
        ComparisonOperator:
          $ref: '#/components/schemas/ComparisonOperator'
      required:
      - ComparisonOperator
      title: Condition
      type: object
    ConsistentRead:
      description: "If set to <code>true</code>, then a consistent read is issued.\
        \ Otherwise eventually-consistent is used."
      title: ConsistentRead
      type: boolean
    TableName:
      maxLength: 255
      minLength: 3
      pattern: "[a-zA-Z0-9_.-]+"
      title: TableName
      type: string
    KeySchema:
      description: "The KeySchema identifies the primary key as a one attribute primary\
        \ key (hash) or a composite two attribute (hash-and-range) primary key. Single\
        \ attribute primary keys have one index value: a <code>HashKeyElement</code>.\
        \ A composite hash-and-range primary key contains two attribute values: a\
        \ <code>HashKeyElement</code> and a <code>RangeKeyElement</code>."
      example:
        HashKeyElement:
          AttributeType: ""
          AttributeName: ""
        RangeKeyElement:
          AttributeType: ""
          AttributeName: ""
      properties:
        HashKeyElement:
          $ref: '#/components/schemas/KeySchema_HashKeyElement'
        RangeKeyElement:
          $ref: '#/components/schemas/KeySchema_RangeKeyElement'
      required:
      - HashKeyElement
      title: KeySchema
      type: object
    ProvisionedThroughput:
      description: "Provisioned throughput reserves the required read and write resources\
        \ for your table in terms of <code>ReadCapacityUnits</code> and <code>WriteCapacityUnits</code>.\
        \ Values for provisioned throughput depend upon your expected read/write rates,\
        \ item size, and consistency. Provide the expected number of read and write\
        \ operations, assuming an item size of 1k and strictly consistent reads. For\
        \ 2k item size, double the value. For 3k, triple the value, etc. Eventually-consistent\
        \ reads consume half the resources of strictly consistent reads."
      example:
        WriteCapacityUnits: ""
        ReadCapacityUnits: ""
      properties:
        ReadCapacityUnits:
          allOf:
          - $ref: '#/components/schemas/PositiveLongObject'
          - description: "<code>ReadCapacityUnits</code> are in terms of strictly\
              \ consistent reads, assuming items of 1k. 2k items require twice the\
              \ <code>ReadCapacityUnits</code>. Eventually-consistent reads only require\
              \ half the <code>ReadCapacityUnits</code> of stirctly consistent reads."
          title: ReadCapacityUnits
        WriteCapacityUnits:
          allOf:
          - $ref: '#/components/schemas/PositiveLongObject'
          - description: "<code>WriteCapacityUnits</code> are in terms of strictly\
              \ consistent reads, assuming items of 1k. 2k items require twice the\
              \ <code>WriteCapacityUnits</code>."
          title: WriteCapacityUnits
      required:
      - ReadCapacityUnits
      - WriteCapacityUnits
      title: ProvisionedThroughput
      type: object
    TableDescription:
      example:
        TableName: ""
        CreationDateTime: 2000-01-23T04:56:07.000+00:00
        TableSizeBytes: 5
        TableStatus: CREATING
        ItemCount: 5
        ProvisionedThroughput:
          WriteCapacityUnits: 1
          LastDecreaseDateTime: 2000-01-23T04:56:07.000+00:00
          ReadCapacityUnits: 1
          LastIncreaseDateTime: 2000-01-23T04:56:07.000+00:00
          NumberOfDecreasesToday: 1
        KeySchema:
          HashKeyElement:
            AttributeType: ""
            AttributeName: ""
          RangeKeyElement:
            AttributeType: ""
            AttributeName: ""
      properties:
        TableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: The name of the table being described.
          title: TableName
        KeySchema:
          $ref: '#/components/schemas/KeySchema'
        TableStatus:
          $ref: '#/components/schemas/TableStatus'
        CreationDateTime:
          format: date-time
          title: Date
          type: string
        ProvisionedThroughput:
          $ref: '#/components/schemas/ProvisionedThroughputDescription'
        TableSizeBytes:
          title: Long
          type: integer
        ItemCount:
          title: Long
          type: integer
      title: TableDescription
      type: object
    Date:
      format: date-time
      title: Date
      type: string
    Key:
      description: The primary key that uniquely identifies each item in a table.
        A primary key can be a one attribute (hash) primary key or a two attribute
        (hash-and-range) primary key.
      example:
        HashKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        RangeKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      properties:
        HashKeyElement:
          $ref: '#/components/schemas/Key_HashKeyElement'
        RangeKeyElement:
          $ref: '#/components/schemas/Key_RangeKeyElement'
      required:
      - HashKeyElement
      title: Key
      type: object
    ExpectedAttributeMap:
      additionalProperties:
        $ref: '#/components/schemas/ExpectedAttributeValue'
      description: "Designates an attribute for a conditional modification. The <code>Expected</code>\
        \ parameter allows you to provide an attribute name, and whether or not Amazon\
        \ DynamoDB should check to see if the attribute has a particular value before\
        \ modifying it."
      title: Expected
      type: object
    ReturnValue:
      description: "<p>Use this parameter if you want to get the attribute name-value\
        \ pairs before or after they are modified. For <code>PUT</code> operations,\
        \ the possible parameter values are <code>NONE</code> (default) or <code>ALL_OLD</code>.\
        \ For update operations, the possible parameter values are <code>NONE</code>\
        \ (default) or <code>ALL_OLD</code>, <code>UPDATED_OLD</code>, <code>ALL_NEW</code>\
        \ or <code>UPDATED_NEW</code>.</p> <ul> <li><code>NONE</code>: Nothing is\
        \ returned.</li> <li><code>ALL_OLD</code>: Returns the attributes of the item\
        \ as they were before the operation.</li> <li><code>UPDATED_OLD</code>: Returns\
        \ the values of the updated attributes, only, as they were before the operation.</li>\
        \ <li><code>ALL_NEW</code>: Returns all the attributes and their new values\
        \ after the operation.</li> <li><code>UPDATED_NEW</code>: Returns the values\
        \ of the updated attributes, only, as they are after the operation.</li> </ul>"
      enum:
      - NONE
      - ALL_OLD
      - UPDATED_OLD
      - ALL_NEW
      - UPDATED_NEW
      title: ReturnValue
      type: string
    DeleteRequest:
      description: A container for a Delete BatchWrite request
      properties:
        Key:
          $ref: '#/components/schemas/DeleteRequest_Key'
      required:
      - Key
      title: DeleteRequest
      type: object
    ExpectedAttributeValue:
      description: "Allows you to provide an attribute name, and whether or not Amazon\
        \ DynamoDB should check to see if the attribute value already exists; or if\
        \ the attribute value exists and has a particular value before changing it."
      example:
        Exists: ""
        Value:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      properties:
        Value:
          $ref: '#/components/schemas/ExpectedAttributeValue_Value'
        Exists:
          allOf:
          - $ref: '#/components/schemas/BooleanObject'
          - description: Specify whether or not a value already exists for the attribute
              name-value pair.
          title: Exists
      title: ExpectedAttributeValue
      type: object
    FilterConditionMap:
      additionalProperties:
        $ref: '#/components/schemas/Condition'
      type: object
    Integer:
      type: integer
    KeyList:
      items:
        $ref: '#/components/schemas/Key'
      maxItems: 100
      minItems: 1
      title: KeyList
      type: array
    KeySchemaElement:
      description: <code>KeySchemaElement</code> is the primary key (hash or hash-and-range)
        structure for the table.
      properties:
        AttributeName:
          allOf:
          - $ref: '#/components/schemas/KeySchemaAttributeName'
          - description: The <code>AttributeName</code> of the <code>KeySchemaElement</code>.
          title: AttributeName
        AttributeType:
          allOf:
          - $ref: '#/components/schemas/ScalarAttributeType'
          - description: The <code>AttributeType</code> of the <code>KeySchemaElement</code>
              which can be a <code>String</code> or a <code>Number</code>.
          title: AttributeType
      required:
      - AttributeName
      - AttributeType
      title: KeySchemaElement
      type: object
    KeySchemaAttributeName:
      maxLength: 255
      minLength: 1
      type: string
    ScalarAttributeType:
      enum:
      - S
      - "N"
      - B
      title: ScalarAttributeType
      type: string
    ListTablesInputLimit:
      description: A number of maximum table names to return.
      maximum: 100
      minimum: 1
      title: Limit
      type: integer
    TableNameList:
      items:
        $ref: '#/components/schemas/TableName'
      title: TableNames
      type: array
    Long:
      title: Long
      type: integer
    PositiveIntegerObject:
      minimum: 1
      type: integer
    PositiveLongObject:
      minimum: 1
      title: PositiveLongObject
      type: integer
    ProvisionedThroughputDescription:
      example:
        WriteCapacityUnits: 1
        LastDecreaseDateTime: 2000-01-23T04:56:07.000+00:00
        ReadCapacityUnits: 1
        LastIncreaseDateTime: 2000-01-23T04:56:07.000+00:00
        NumberOfDecreasesToday: 1
      properties:
        LastIncreaseDateTime:
          format: date-time
          title: Date
          type: string
        LastDecreaseDateTime:
          format: date-time
          title: Date
          type: string
        NumberOfDecreasesToday:
          minimum: 1
          title: PositiveLongObject
          type: integer
        ReadCapacityUnits:
          minimum: 1
          title: PositiveLongObject
          type: integer
        WriteCapacityUnits:
          minimum: 1
          title: PositiveLongObject
          type: integer
      title: ProvisionedThroughputDescription
      type: object
    PutItemInputAttributeMap:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
      description: "A map of the attributes for the item, and must include the primary\
        \ key values that define the item. Other attribute name-value pairs can be\
        \ provided for the item."
      title: Item
      type: object
    PutRequest:
      description: A container for a Put BatchWrite request
      properties:
        Item:
          allOf:
          - $ref: '#/components/schemas/PutItemInputAttributeMap'
          - description: The item to put
          title: Item
      required:
      - Item
      title: PutRequest
      type: object
    String:
      type: string
    TableStatus:
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - ACTIVE
      title: TableStatus
      type: string
    WriteRequest:
      description: This structure is a Union of PutRequest and DeleteRequest. It can
        contain exactly one of <code>PutRequest</code> or <code>DeleteRequest</code>.
        Never Both. This is enforced in the code.
      properties:
        PutRequest:
          $ref: '#/components/schemas/PutRequest'
        DeleteRequest:
          $ref: '#/components/schemas/DeleteRequest'
      title: WriteRequest
      type: object
    QueryOutput_LastEvaluatedKey:
      allOf:
      - $ref: '#/components/schemas/Key'
      - description: "Primary key of the item where the query operation stopped, inclusive\
          \ of the previous result set. Use this value to start a new operation excluding\
          \ this value in the new request. The <code>LastEvaluatedKey</code> is null\
          \ when the entire query result set is complete (i.e. the operation processed\
          \ the \"last page\")."
      example:
        HashKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        RangeKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      title: QueryOutput_LastEvaluatedKey
    QueryInput_HashKeyValue:
      allOf:
      - $ref: '#/components/schemas/AttributeValue'
      - description: Attribute value of the hash component of the composite primary
          key.
      example:
        SS: ""
        BS: ""
        B: ""
        S: ""
        NS: ""
        "N": ""
      title: QueryInput_HashKeyValue
    QueryInput_RangeKeyCondition:
      allOf:
      - $ref: '#/components/schemas/Condition'
      - description: A container for the attribute values and comparison operators
          to use for the query.
      example:
        ComparisonOperator: EQ
        AttributeValueList:
        - SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        - SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      title: QueryInput_RangeKeyCondition
    QueryInput_ExclusiveStartKey:
      allOf:
      - $ref: '#/components/schemas/Key'
      - description: Primary key of the item from which to continue an earlier query.
          An earlier query might provide this value as the <code>LastEvaluatedKey</code>
          if that query operation was interrupted before completing the query; either
          because of the result set size or the <code>Limit</code> parameter. The
          <code>LastEvaluatedKey</code> can be passed back in a new query request
          to continue the operation from that point.
      example:
        HashKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        RangeKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      title: QueryInput_ExclusiveStartKey
    ScanOutput_LastEvaluatedKey:
      allOf:
      - $ref: '#/components/schemas/Key'
      - description: Primary key of the item where the scan operation stopped. Provide
          this value in a subsequent scan operation to continue the operation from
          that point. The <code>LastEvaluatedKey</code> is null when the entire scan
          result set is complete (i.e. the operation processed the "last page").
      example:
        HashKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        RangeKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      title: ScanOutput_LastEvaluatedKey
    ScanInput_ExclusiveStartKey:
      allOf:
      - $ref: '#/components/schemas/Key'
      - description: Primary key of the item from which to continue an earlier scan.
          An earlier scan might provide this value if that scan operation was interrupted
          before scanning the entire table; either because of the result set size
          or the <code>Limit</code> parameter. The <code>LastEvaluatedKey</code> can
          be passed back in a new scan request to continue the operation from that
          point.
      example:
        HashKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
        RangeKeyElement:
          SS: ""
          BS: ""
          B: ""
          S: ""
          NS: ""
          "N": ""
      title: ScanInput_ExclusiveStartKey
    KeySchema_HashKeyElement:
      allOf:
      - $ref: '#/components/schemas/KeySchemaElement'
      - description: "A hash key element is treated as the primary key, and can be\
          \ a string or a number. Single attribute primary keys have one index value.\
          \ The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>,\
          \ <code>NumberSet</code>."
      example:
        AttributeType: ""
        AttributeName: ""
      title: KeySchema_HashKeyElement
    KeySchema_RangeKeyElement:
      allOf:
      - $ref: '#/components/schemas/KeySchemaElement'
      - description: "A range key element is treated as a secondary key (used in conjunction\
          \ with the primary key), and can be a string or a number, and is only used\
          \ for hash-and-range primary keys. The value can be <code>String</code>,\
          \ <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
      example:
        AttributeType: ""
        AttributeName: ""
      title: KeySchema_RangeKeyElement
    Key_HashKeyElement:
      allOf:
      - $ref: '#/components/schemas/AttributeValue'
      - description: "A hash key element is treated as the primary key, and can be\
          \ a string or a number. Single attribute primary keys have one index value.\
          \ The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>,\
          \ <code>NumberSet</code>."
      example:
        SS: ""
        BS: ""
        B: ""
        S: ""
        NS: ""
        "N": ""
      title: Key_HashKeyElement
    Key_RangeKeyElement:
      allOf:
      - $ref: '#/components/schemas/AttributeValue'
      - description: "A range key element is treated as a secondary key (used in conjunction\
          \ with the primary key), and can be a string or a number, and is only used\
          \ for hash-and-range primary keys. The value can be <code>String</code>,\
          \ <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
      example:
        SS: ""
        BS: ""
        B: ""
        S: ""
        NS: ""
        "N": ""
      title: Key_RangeKeyElement
    DeleteRequest_Key:
      allOf:
      - $ref: '#/components/schemas/Key'
      - description: The item's key to be delete
      title: DeleteRequest_Key
    ExpectedAttributeValue_Value:
      allOf:
      - $ref: '#/components/schemas/AttributeValue'
      - description: Specify whether or not a value already exists and has a specific
          content for the attribute name-value pair.
      example:
        SS: ""
        BS: ""
        B: ""
        S: ""
        NS: ""
        "N": ""
      title: ExpectedAttributeValue_Value
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
