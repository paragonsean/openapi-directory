# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_input_exclusive_start_key import QueryInputExclusiveStartKey
from openapi_server.models.query_input_hash_key_value import QueryInputHashKeyValue
from openapi_server.models.query_input_range_key_condition import QueryInputRangeKeyCondition
from openapi_server import util


class QueryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, attributes_to_get: List[str]=None, limit: int=None, consistent_read: bool=None, count: bool=None, hash_key_value: QueryInputHashKeyValue=None, range_key_condition: QueryInputRangeKeyCondition=None, scan_index_forward: bool=None, exclusive_start_key: QueryInputExclusiveStartKey=None):
        """QueryInput - a model defined in OpenAPI

        :param table_name: The table_name of this QueryInput.
        :param attributes_to_get: The attributes_to_get of this QueryInput.
        :param limit: The limit of this QueryInput.
        :param consistent_read: The consistent_read of this QueryInput.
        :param count: The count of this QueryInput.
        :param hash_key_value: The hash_key_value of this QueryInput.
        :param range_key_condition: The range_key_condition of this QueryInput.
        :param scan_index_forward: The scan_index_forward of this QueryInput.
        :param exclusive_start_key: The exclusive_start_key of this QueryInput.
        """
        self.openapi_types = {
            'table_name': str,
            'attributes_to_get': List[str],
            'limit': int,
            'consistent_read': bool,
            'count': bool,
            'hash_key_value': QueryInputHashKeyValue,
            'range_key_condition': QueryInputRangeKeyCondition,
            'scan_index_forward': bool,
            'exclusive_start_key': QueryInputExclusiveStartKey
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'attributes_to_get': 'AttributesToGet',
            'limit': 'Limit',
            'consistent_read': 'ConsistentRead',
            'count': 'Count',
            'hash_key_value': 'HashKeyValue',
            'range_key_condition': 'RangeKeyCondition',
            'scan_index_forward': 'ScanIndexForward',
            'exclusive_start_key': 'ExclusiveStartKey'
        }

        self._table_name = table_name
        self._attributes_to_get = attributes_to_get
        self._limit = limit
        self._consistent_read = consistent_read
        self._count = count
        self._hash_key_value = hash_key_value
        self._range_key_condition = range_key_condition
        self._scan_index_forward = scan_index_forward
        self._exclusive_start_key = exclusive_start_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryInput of this QueryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this QueryInput.


        :return: The table_name of this QueryInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this QueryInput.


        :param table_name: The table_name of this QueryInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def attributes_to_get(self):
        """Gets the attributes_to_get of this QueryInput.

        List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.

        :return: The attributes_to_get of this QueryInput.
        :rtype: List[str]
        """
        return self._attributes_to_get

    @attributes_to_get.setter
    def attributes_to_get(self, attributes_to_get):
        """Sets the attributes_to_get of this QueryInput.

        List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.

        :param attributes_to_get: The attributes_to_get of this QueryInput.
        :type attributes_to_get: List[str]
        """
        if attributes_to_get is not None and len(attributes_to_get) < 1:
            raise ValueError("Invalid value for `attributes_to_get`, number of items must be greater than or equal to `1`")

        self._attributes_to_get = attributes_to_get

    @property
    def limit(self):
        """Gets the limit of this QueryInput.


        :return: The limit of this QueryInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryInput.


        :param limit: The limit of this QueryInput.
        :type limit: int
        """

        self._limit = limit

    @property
    def consistent_read(self):
        """Gets the consistent_read of this QueryInput.

        If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.

        :return: The consistent_read of this QueryInput.
        :rtype: bool
        """
        return self._consistent_read

    @consistent_read.setter
    def consistent_read(self, consistent_read):
        """Sets the consistent_read of this QueryInput.

        If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.

        :param consistent_read: The consistent_read of this QueryInput.
        :type consistent_read: bool
        """

        self._consistent_read = consistent_read

    @property
    def count(self):
        """Gets the count of this QueryInput.


        :return: The count of this QueryInput.
        :rtype: bool
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this QueryInput.


        :param count: The count of this QueryInput.
        :type count: bool
        """

        self._count = count

    @property
    def hash_key_value(self):
        """Gets the hash_key_value of this QueryInput.


        :return: The hash_key_value of this QueryInput.
        :rtype: QueryInputHashKeyValue
        """
        return self._hash_key_value

    @hash_key_value.setter
    def hash_key_value(self, hash_key_value):
        """Sets the hash_key_value of this QueryInput.


        :param hash_key_value: The hash_key_value of this QueryInput.
        :type hash_key_value: QueryInputHashKeyValue
        """
        if hash_key_value is None:
            raise ValueError("Invalid value for `hash_key_value`, must not be `None`")

        self._hash_key_value = hash_key_value

    @property
    def range_key_condition(self):
        """Gets the range_key_condition of this QueryInput.


        :return: The range_key_condition of this QueryInput.
        :rtype: QueryInputRangeKeyCondition
        """
        return self._range_key_condition

    @range_key_condition.setter
    def range_key_condition(self, range_key_condition):
        """Sets the range_key_condition of this QueryInput.


        :param range_key_condition: The range_key_condition of this QueryInput.
        :type range_key_condition: QueryInputRangeKeyCondition
        """

        self._range_key_condition = range_key_condition

    @property
    def scan_index_forward(self):
        """Gets the scan_index_forward of this QueryInput.


        :return: The scan_index_forward of this QueryInput.
        :rtype: bool
        """
        return self._scan_index_forward

    @scan_index_forward.setter
    def scan_index_forward(self, scan_index_forward):
        """Sets the scan_index_forward of this QueryInput.


        :param scan_index_forward: The scan_index_forward of this QueryInput.
        :type scan_index_forward: bool
        """

        self._scan_index_forward = scan_index_forward

    @property
    def exclusive_start_key(self):
        """Gets the exclusive_start_key of this QueryInput.


        :return: The exclusive_start_key of this QueryInput.
        :rtype: QueryInputExclusiveStartKey
        """
        return self._exclusive_start_key

    @exclusive_start_key.setter
    def exclusive_start_key(self, exclusive_start_key):
        """Sets the exclusive_start_key of this QueryInput.


        :param exclusive_start_key: The exclusive_start_key of this QueryInput.
        :type exclusive_start_key: QueryInputExclusiveStartKey
        """

        self._exclusive_start_key = exclusive_start_key
