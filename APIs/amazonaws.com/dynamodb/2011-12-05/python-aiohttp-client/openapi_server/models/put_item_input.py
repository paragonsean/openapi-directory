# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_value import AttributeValue
from openapi_server.models.expected_attribute_value import ExpectedAttributeValue
from openapi_server.models.return_value import ReturnValue
from openapi_server import util


class PutItemInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, item: Dict[str, AttributeValue]=None, expected: Dict[str, ExpectedAttributeValue]=None, return_values: ReturnValue=None):
        """PutItemInput - a model defined in OpenAPI

        :param table_name: The table_name of this PutItemInput.
        :param item: The item of this PutItemInput.
        :param expected: The expected of this PutItemInput.
        :param return_values: The return_values of this PutItemInput.
        """
        self.openapi_types = {
            'table_name': str,
            'item': Dict[str, AttributeValue],
            'expected': Dict[str, ExpectedAttributeValue],
            'return_values': ReturnValue
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'item': 'Item',
            'expected': 'Expected',
            'return_values': 'ReturnValues'
        }

        self._table_name = table_name
        self._item = item
        self._expected = expected
        self._return_values = return_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutItemInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutItemInput of this PutItemInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this PutItemInput.


        :return: The table_name of this PutItemInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this PutItemInput.


        :param table_name: The table_name of this PutItemInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def item(self):
        """Gets the item of this PutItemInput.

        A map of the attributes for the item, and must include the primary key values that define the item. Other attribute name-value pairs can be provided for the item.

        :return: The item of this PutItemInput.
        :rtype: Dict[str, AttributeValue]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this PutItemInput.

        A map of the attributes for the item, and must include the primary key values that define the item. Other attribute name-value pairs can be provided for the item.

        :param item: The item of this PutItemInput.
        :type item: Dict[str, AttributeValue]
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def expected(self):
        """Gets the expected of this PutItemInput.

        Designates an attribute for a conditional modification. The <code>Expected</code> parameter allows you to provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute has a particular value before modifying it.

        :return: The expected of this PutItemInput.
        :rtype: Dict[str, ExpectedAttributeValue]
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this PutItemInput.

        Designates an attribute for a conditional modification. The <code>Expected</code> parameter allows you to provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute has a particular value before modifying it.

        :param expected: The expected of this PutItemInput.
        :type expected: Dict[str, ExpectedAttributeValue]
        """

        self._expected = expected

    @property
    def return_values(self):
        """Gets the return_values of this PutItemInput.


        :return: The return_values of this PutItemInput.
        :rtype: ReturnValue
        """
        return self._return_values

    @return_values.setter
    def return_values(self, return_values):
        """Sets the return_values of this PutItemInput.


        :param return_values: The return_values of this PutItemInput.
        :type return_values: ReturnValue
        """

        self._return_values = return_values
