# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_schema import KeySchema
from openapi_server.models.provisioned_throughput_description import ProvisionedThroughputDescription
from openapi_server.models.table_status import TableStatus
from openapi_server import util


class TableDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, key_schema: KeySchema=None, table_status: TableStatus=None, creation_date_time: datetime=None, provisioned_throughput: ProvisionedThroughputDescription=None, table_size_bytes: int=None, item_count: int=None):
        """TableDescription - a model defined in OpenAPI

        :param table_name: The table_name of this TableDescription.
        :param key_schema: The key_schema of this TableDescription.
        :param table_status: The table_status of this TableDescription.
        :param creation_date_time: The creation_date_time of this TableDescription.
        :param provisioned_throughput: The provisioned_throughput of this TableDescription.
        :param table_size_bytes: The table_size_bytes of this TableDescription.
        :param item_count: The item_count of this TableDescription.
        """
        self.openapi_types = {
            'table_name': str,
            'key_schema': KeySchema,
            'table_status': TableStatus,
            'creation_date_time': datetime,
            'provisioned_throughput': ProvisionedThroughputDescription,
            'table_size_bytes': int,
            'item_count': int
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'key_schema': 'KeySchema',
            'table_status': 'TableStatus',
            'creation_date_time': 'CreationDateTime',
            'provisioned_throughput': 'ProvisionedThroughput',
            'table_size_bytes': 'TableSizeBytes',
            'item_count': 'ItemCount'
        }

        self._table_name = table_name
        self._key_schema = key_schema
        self._table_status = table_status
        self._creation_date_time = creation_date_time
        self._provisioned_throughput = provisioned_throughput
        self._table_size_bytes = table_size_bytes
        self._item_count = item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableDescription of this TableDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this TableDescription.


        :return: The table_name of this TableDescription.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this TableDescription.


        :param table_name: The table_name of this TableDescription.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def key_schema(self):
        """Gets the key_schema of this TableDescription.


        :return: The key_schema of this TableDescription.
        :rtype: KeySchema
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this TableDescription.


        :param key_schema: The key_schema of this TableDescription.
        :type key_schema: KeySchema
        """

        self._key_schema = key_schema

    @property
    def table_status(self):
        """Gets the table_status of this TableDescription.


        :return: The table_status of this TableDescription.
        :rtype: TableStatus
        """
        return self._table_status

    @table_status.setter
    def table_status(self, table_status):
        """Sets the table_status of this TableDescription.


        :param table_status: The table_status of this TableDescription.
        :type table_status: TableStatus
        """

        self._table_status = table_status

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this TableDescription.


        :return: The creation_date_time of this TableDescription.
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this TableDescription.


        :param creation_date_time: The creation_date_time of this TableDescription.
        :type creation_date_time: datetime
        """

        self._creation_date_time = creation_date_time

    @property
    def provisioned_throughput(self):
        """Gets the provisioned_throughput of this TableDescription.


        :return: The provisioned_throughput of this TableDescription.
        :rtype: ProvisionedThroughputDescription
        """
        return self._provisioned_throughput

    @provisioned_throughput.setter
    def provisioned_throughput(self, provisioned_throughput):
        """Sets the provisioned_throughput of this TableDescription.


        :param provisioned_throughput: The provisioned_throughput of this TableDescription.
        :type provisioned_throughput: ProvisionedThroughputDescription
        """

        self._provisioned_throughput = provisioned_throughput

    @property
    def table_size_bytes(self):
        """Gets the table_size_bytes of this TableDescription.


        :return: The table_size_bytes of this TableDescription.
        :rtype: int
        """
        return self._table_size_bytes

    @table_size_bytes.setter
    def table_size_bytes(self, table_size_bytes):
        """Sets the table_size_bytes of this TableDescription.


        :param table_size_bytes: The table_size_bytes of this TableDescription.
        :type table_size_bytes: int
        """

        self._table_size_bytes = table_size_bytes

    @property
    def item_count(self):
        """Gets the item_count of this TableDescription.


        :return: The item_count of this TableDescription.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this TableDescription.


        :param item_count: The item_count of this TableDescription.
        :type item_count: int
        """

        self._item_count = item_count
