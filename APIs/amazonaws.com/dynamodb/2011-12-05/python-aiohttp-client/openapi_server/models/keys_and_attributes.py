# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key import Key
from openapi_server import util


class KeysAndAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keys: List[Key]=None, attributes_to_get: List[str]=None, consistent_read: bool=None):
        """KeysAndAttributes - a model defined in OpenAPI

        :param keys: The keys of this KeysAndAttributes.
        :param attributes_to_get: The attributes_to_get of this KeysAndAttributes.
        :param consistent_read: The consistent_read of this KeysAndAttributes.
        """
        self.openapi_types = {
            'keys': List[Key],
            'attributes_to_get': List[str],
            'consistent_read': bool
        }

        self.attribute_map = {
            'keys': 'Keys',
            'attributes_to_get': 'AttributesToGet',
            'consistent_read': 'ConsistentRead'
        }

        self._keys = keys
        self._attributes_to_get = attributes_to_get
        self._consistent_read = consistent_read

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeysAndAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeysAndAttributes of this KeysAndAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keys(self):
        """Gets the keys of this KeysAndAttributes.


        :return: The keys of this KeysAndAttributes.
        :rtype: List[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this KeysAndAttributes.


        :param keys: The keys of this KeysAndAttributes.
        :type keys: List[Key]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")
        if keys is not None and len(keys) > 100:
            raise ValueError("Invalid value for `keys`, number of items must be less than or equal to `100`")
        if keys is not None and len(keys) < 1:
            raise ValueError("Invalid value for `keys`, number of items must be greater than or equal to `1`")

        self._keys = keys

    @property
    def attributes_to_get(self):
        """Gets the attributes_to_get of this KeysAndAttributes.

        List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.

        :return: The attributes_to_get of this KeysAndAttributes.
        :rtype: List[str]
        """
        return self._attributes_to_get

    @attributes_to_get.setter
    def attributes_to_get(self, attributes_to_get):
        """Sets the attributes_to_get of this KeysAndAttributes.

        List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.

        :param attributes_to_get: The attributes_to_get of this KeysAndAttributes.
        :type attributes_to_get: List[str]
        """
        if attributes_to_get is not None and len(attributes_to_get) < 1:
            raise ValueError("Invalid value for `attributes_to_get`, number of items must be greater than or equal to `1`")

        self._attributes_to_get = attributes_to_get

    @property
    def consistent_read(self):
        """Gets the consistent_read of this KeysAndAttributes.

        If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.

        :return: The consistent_read of this KeysAndAttributes.
        :rtype: bool
        """
        return self._consistent_read

    @consistent_read.setter
    def consistent_read(self, consistent_read):
        """Sets the consistent_read of this KeysAndAttributes.

        If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.

        :param consistent_read: The consistent_read of this KeysAndAttributes.
        :type consistent_read: bool
        """

        self._consistent_read = consistent_read
