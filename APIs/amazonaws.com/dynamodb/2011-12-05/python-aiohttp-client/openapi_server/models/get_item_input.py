# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key import Key
from openapi_server import util


class GetItemInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, key: Key=None, attributes_to_get: List[str]=None, consistent_read: bool=None):
        """GetItemInput - a model defined in OpenAPI

        :param table_name: The table_name of this GetItemInput.
        :param key: The key of this GetItemInput.
        :param attributes_to_get: The attributes_to_get of this GetItemInput.
        :param consistent_read: The consistent_read of this GetItemInput.
        """
        self.openapi_types = {
            'table_name': str,
            'key': Key,
            'attributes_to_get': List[str],
            'consistent_read': bool
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'key': 'Key',
            'attributes_to_get': 'AttributesToGet',
            'consistent_read': 'ConsistentRead'
        }

        self._table_name = table_name
        self._key = key
        self._attributes_to_get = attributes_to_get
        self._consistent_read = consistent_read

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetItemInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetItemInput of this GetItemInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this GetItemInput.


        :return: The table_name of this GetItemInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this GetItemInput.


        :param table_name: The table_name of this GetItemInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def key(self):
        """Gets the key of this GetItemInput.


        :return: The key of this GetItemInput.
        :rtype: Key
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GetItemInput.


        :param key: The key of this GetItemInput.
        :type key: Key
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def attributes_to_get(self):
        """Gets the attributes_to_get of this GetItemInput.

        List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.

        :return: The attributes_to_get of this GetItemInput.
        :rtype: List[str]
        """
        return self._attributes_to_get

    @attributes_to_get.setter
    def attributes_to_get(self, attributes_to_get):
        """Sets the attributes_to_get of this GetItemInput.

        List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.

        :param attributes_to_get: The attributes_to_get of this GetItemInput.
        :type attributes_to_get: List[str]
        """
        if attributes_to_get is not None and len(attributes_to_get) < 1:
            raise ValueError("Invalid value for `attributes_to_get`, number of items must be greater than or equal to `1`")

        self._attributes_to_get = attributes_to_get

    @property
    def consistent_read(self):
        """Gets the consistent_read of this GetItemInput.

        If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.

        :return: The consistent_read of this GetItemInput.
        :rtype: bool
        """
        return self._consistent_read

    @consistent_read.setter
    def consistent_read(self, consistent_read):
        """Sets the consistent_read of this GetItemInput.

        If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.

        :param consistent_read: The consistent_read of this GetItemInput.
        :type consistent_read: bool
        """

        self._consistent_read = consistent_read
