# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_value_update import AttributeValueUpdate
from openapi_server.models.expected_attribute_value import ExpectedAttributeValue
from openapi_server.models.key import Key
from openapi_server.models.return_value import ReturnValue
from openapi_server import util


class UpdateItemInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table_name: str=None, key: Key=None, attribute_updates: Dict[str, AttributeValueUpdate]=None, expected: Dict[str, ExpectedAttributeValue]=None, return_values: ReturnValue=None):
        """UpdateItemInput - a model defined in OpenAPI

        :param table_name: The table_name of this UpdateItemInput.
        :param key: The key of this UpdateItemInput.
        :param attribute_updates: The attribute_updates of this UpdateItemInput.
        :param expected: The expected of this UpdateItemInput.
        :param return_values: The return_values of this UpdateItemInput.
        """
        self.openapi_types = {
            'table_name': str,
            'key': Key,
            'attribute_updates': Dict[str, AttributeValueUpdate],
            'expected': Dict[str, ExpectedAttributeValue],
            'return_values': ReturnValue
        }

        self.attribute_map = {
            'table_name': 'TableName',
            'key': 'Key',
            'attribute_updates': 'AttributeUpdates',
            'expected': 'Expected',
            'return_values': 'ReturnValues'
        }

        self._table_name = table_name
        self._key = key
        self._attribute_updates = attribute_updates
        self._expected = expected
        self._return_values = return_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateItemInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateItemInput of this UpdateItemInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table_name(self):
        """Gets the table_name of this UpdateItemInput.


        :return: The table_name of this UpdateItemInput.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this UpdateItemInput.


        :param table_name: The table_name of this UpdateItemInput.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def key(self):
        """Gets the key of this UpdateItemInput.


        :return: The key of this UpdateItemInput.
        :rtype: Key
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UpdateItemInput.


        :param key: The key of this UpdateItemInput.
        :type key: Key
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def attribute_updates(self):
        """Gets the attribute_updates of this UpdateItemInput.

        Map of attribute name to the new value and action for the update. The attribute names specify the attributes to modify, and cannot contain any primary key attributes.

        :return: The attribute_updates of this UpdateItemInput.
        :rtype: Dict[str, AttributeValueUpdate]
        """
        return self._attribute_updates

    @attribute_updates.setter
    def attribute_updates(self, attribute_updates):
        """Sets the attribute_updates of this UpdateItemInput.

        Map of attribute name to the new value and action for the update. The attribute names specify the attributes to modify, and cannot contain any primary key attributes.

        :param attribute_updates: The attribute_updates of this UpdateItemInput.
        :type attribute_updates: Dict[str, AttributeValueUpdate]
        """
        if attribute_updates is None:
            raise ValueError("Invalid value for `attribute_updates`, must not be `None`")

        self._attribute_updates = attribute_updates

    @property
    def expected(self):
        """Gets the expected of this UpdateItemInput.

        Designates an attribute for a conditional modification. The <code>Expected</code> parameter allows you to provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute has a particular value before modifying it.

        :return: The expected of this UpdateItemInput.
        :rtype: Dict[str, ExpectedAttributeValue]
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this UpdateItemInput.

        Designates an attribute for a conditional modification. The <code>Expected</code> parameter allows you to provide an attribute name, and whether or not Amazon DynamoDB should check to see if the attribute has a particular value before modifying it.

        :param expected: The expected of this UpdateItemInput.
        :type expected: Dict[str, ExpectedAttributeValue]
        """

        self._expected = expected

    @property
    def return_values(self):
        """Gets the return_values of this UpdateItemInput.


        :return: The return_values of this UpdateItemInput.
        :rtype: ReturnValue
        """
        return self._return_values

    @return_values.setter
    def return_values(self, return_values):
        """Sets the return_values of this UpdateItemInput.


        :param return_values: The return_values of this UpdateItemInput.
        :type return_values: ReturnValue
        """

        self._return_values = return_values
