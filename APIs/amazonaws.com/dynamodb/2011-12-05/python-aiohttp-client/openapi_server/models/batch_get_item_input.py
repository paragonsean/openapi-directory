# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keys_and_attributes import KeysAndAttributes
from openapi_server import util


class BatchGetItemInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_items: Dict[str, KeysAndAttributes]=None):
        """BatchGetItemInput - a model defined in OpenAPI

        :param request_items: The request_items of this BatchGetItemInput.
        """
        self.openapi_types = {
            'request_items': Dict[str, KeysAndAttributes]
        }

        self.attribute_map = {
            'request_items': 'RequestItems'
        }

        self._request_items = request_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetItemInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetItemInput of this BatchGetItemInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_items(self):
        """Gets the request_items of this BatchGetItemInput.

        A map of the table name and corresponding items to get by primary key. While requesting items, each table name can be invoked only once per operation.

        :return: The request_items of this BatchGetItemInput.
        :rtype: Dict[str, KeysAndAttributes]
        """
        return self._request_items

    @request_items.setter
    def request_items(self, request_items):
        """Sets the request_items of this BatchGetItemInput.

        A map of the table name and corresponding items to get by primary key. While requesting items, each table name can be invoked only once per operation.

        :param request_items: The request_items of this BatchGetItemInput.
        :type request_items: Dict[str, KeysAndAttributes]
        """
        if request_items is None:
            raise ValueError("Invalid value for `request_items`, must not be `None`")
        if request_items is not None and len(request_items) > 100:
            raise ValueError("Invalid value for `request_items`, number of items must be less than or equal to `100`")
        if request_items is not None and len(request_items) < 1:
            raise ValueError("Invalid value for `request_items`, number of items must be greater than or equal to `1`")

        self._request_items = request_items
