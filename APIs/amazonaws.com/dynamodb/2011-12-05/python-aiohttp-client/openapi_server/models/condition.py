# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_value import AttributeValue
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_value_list: List[AttributeValue]=None, comparison_operator: ComparisonOperator=None):
        """Condition - a model defined in OpenAPI

        :param attribute_value_list: The attribute_value_list of this Condition.
        :param comparison_operator: The comparison_operator of this Condition.
        """
        self.openapi_types = {
            'attribute_value_list': List[AttributeValue],
            'comparison_operator': ComparisonOperator
        }

        self.attribute_map = {
            'attribute_value_list': 'AttributeValueList',
            'comparison_operator': 'ComparisonOperator'
        }

        self._attribute_value_list = attribute_value_list
        self._comparison_operator = comparison_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_value_list(self):
        """Gets the attribute_value_list of this Condition.

        A list of attribute values to be used with a comparison operator for a scan or query operation. For comparisons that require more than one value, such as a <code>BETWEEN</code> comparison, the AttributeValueList contains two attribute values and the comparison operator.

        :return: The attribute_value_list of this Condition.
        :rtype: List[AttributeValue]
        """
        return self._attribute_value_list

    @attribute_value_list.setter
    def attribute_value_list(self, attribute_value_list):
        """Sets the attribute_value_list of this Condition.

        A list of attribute values to be used with a comparison operator for a scan or query operation. For comparisons that require more than one value, such as a <code>BETWEEN</code> comparison, the AttributeValueList contains two attribute values and the comparison operator.

        :param attribute_value_list: The attribute_value_list of this Condition.
        :type attribute_value_list: List[AttributeValue]
        """

        self._attribute_value_list = attribute_value_list

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this Condition.


        :return: The comparison_operator of this Condition.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this Condition.


        :param comparison_operator: The comparison_operator of this Condition.
        :type comparison_operator: ComparisonOperator
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")

        self._comparison_operator = comparison_operator
