/**
 * Amazon Pinpoint Email Service
 * <fullname>Amazon Pinpoint Email Service</fullname> <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides information about the Amazon Pinpoint Email API (version 1.0), including supported operations, data types, parameters, and schemas.</p> <p> <a href=\"https://aws.amazon.com/pinpoint\">Amazon Pinpoint</a> is an AWS service that you can use to engage with your customers across multiple messaging channels. You can use Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The Amazon Pinpoint Email API provides programmatic access to options that are unique to the email channel and supplement the options provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\">Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides information about key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply to using the service.</p> <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint for each of these Regions. For a list of all the Regions and endpoints where the API is currently available, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region\">AWS Service Endpoints</a> in the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\">Managing AWS Regions</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones are physically isolated from each other, but are united by private, low-latency, high-throughput, and highly redundant network connections. These Availability Zones enable us to provide very high levels of availability and redundancy, while also minimizing latency. To learn more about the number of Availability Zones that are available in each Region, see <a href=\"http://aws.amazon.com/about-aws/global-infrastructure/\">AWS Global Infrastructure</a>.</p>
 *
 * The version of the OpenAPI document: 2018-07-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeliverabilityTestReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeliverabilityTestReportResponse::OAIGetDeliverabilityTestReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeliverabilityTestReportResponse::OAIGetDeliverabilityTestReportResponse() {
    this->initializeModel();
}

OAIGetDeliverabilityTestReportResponse::~OAIGetDeliverabilityTestReportResponse() {}

void OAIGetDeliverabilityTestReportResponse::initializeModel() {

    m_deliverability_test_report_isSet = false;
    m_deliverability_test_report_isValid = false;

    m_overall_placement_isSet = false;
    m_overall_placement_isValid = false;

    m_isp_placements_isSet = false;
    m_isp_placements_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetDeliverabilityTestReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeliverabilityTestReportResponse::fromJsonObject(QJsonObject json) {

    m_deliverability_test_report_isValid = ::OpenAPI::fromJsonValue(m_deliverability_test_report, json[QString("DeliverabilityTestReport")]);
    m_deliverability_test_report_isSet = !json[QString("DeliverabilityTestReport")].isNull() && m_deliverability_test_report_isValid;

    m_overall_placement_isValid = ::OpenAPI::fromJsonValue(m_overall_placement, json[QString("OverallPlacement")]);
    m_overall_placement_isSet = !json[QString("OverallPlacement")].isNull() && m_overall_placement_isValid;

    m_isp_placements_isValid = ::OpenAPI::fromJsonValue(m_isp_placements, json[QString("IspPlacements")]);
    m_isp_placements_isSet = !json[QString("IspPlacements")].isNull() && m_isp_placements_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetDeliverabilityTestReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeliverabilityTestReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deliverability_test_report.isSet()) {
        obj.insert(QString("DeliverabilityTestReport"), ::OpenAPI::toJsonValue(m_deliverability_test_report));
    }
    if (m_overall_placement.isSet()) {
        obj.insert(QString("OverallPlacement"), ::OpenAPI::toJsonValue(m_overall_placement));
    }
    if (m_isp_placements.isSet()) {
        obj.insert(QString("IspPlacements"), ::OpenAPI::toJsonValue(m_isp_placements));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetDeliverabilityTestReportResponse_DeliverabilityTestReport OAIGetDeliverabilityTestReportResponse::getDeliverabilityTestReport() const {
    return m_deliverability_test_report;
}
void OAIGetDeliverabilityTestReportResponse::setDeliverabilityTestReport(const OAIGetDeliverabilityTestReportResponse_DeliverabilityTestReport &deliverability_test_report) {
    m_deliverability_test_report = deliverability_test_report;
    m_deliverability_test_report_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_deliverability_test_report_Set() const{
    return m_deliverability_test_report_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_deliverability_test_report_Valid() const{
    return m_deliverability_test_report_isValid;
}

OAIGetDeliverabilityTestReportResponse_OverallPlacement OAIGetDeliverabilityTestReportResponse::getOverallPlacement() const {
    return m_overall_placement;
}
void OAIGetDeliverabilityTestReportResponse::setOverallPlacement(const OAIGetDeliverabilityTestReportResponse_OverallPlacement &overall_placement) {
    m_overall_placement = overall_placement;
    m_overall_placement_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_overall_placement_Set() const{
    return m_overall_placement_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_overall_placement_Valid() const{
    return m_overall_placement_isValid;
}

QList OAIGetDeliverabilityTestReportResponse::getIspPlacements() const {
    return m_isp_placements;
}
void OAIGetDeliverabilityTestReportResponse::setIspPlacements(const QList &isp_placements) {
    m_isp_placements = isp_placements;
    m_isp_placements_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_isp_placements_Set() const{
    return m_isp_placements_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_isp_placements_Valid() const{
    return m_isp_placements_isValid;
}

QString OAIGetDeliverabilityTestReportResponse::getMessage() const {
    return m_message;
}
void OAIGetDeliverabilityTestReportResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIGetDeliverabilityTestReportResponse::getTags() const {
    return m_tags;
}
void OAIGetDeliverabilityTestReportResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetDeliverabilityTestReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deliverability_test_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp_placements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeliverabilityTestReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deliverability_test_report_isValid && m_overall_placement_isValid && m_isp_placements_isValid && true;
}

} // namespace OpenAPI
