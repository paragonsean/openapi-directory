# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DailyVolumeVolumeStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inbox_raw_count: int=None, spam_raw_count: int=None, projected_inbox: int=None, projected_spam: int=None):
        """DailyVolumeVolumeStatistics - a model defined in OpenAPI

        :param inbox_raw_count: The inbox_raw_count of this DailyVolumeVolumeStatistics.
        :param spam_raw_count: The spam_raw_count of this DailyVolumeVolumeStatistics.
        :param projected_inbox: The projected_inbox of this DailyVolumeVolumeStatistics.
        :param projected_spam: The projected_spam of this DailyVolumeVolumeStatistics.
        """
        self.openapi_types = {
            'inbox_raw_count': int,
            'spam_raw_count': int,
            'projected_inbox': int,
            'projected_spam': int
        }

        self.attribute_map = {
            'inbox_raw_count': 'InboxRawCount',
            'spam_raw_count': 'SpamRawCount',
            'projected_inbox': 'ProjectedInbox',
            'projected_spam': 'ProjectedSpam'
        }

        self._inbox_raw_count = inbox_raw_count
        self._spam_raw_count = spam_raw_count
        self._projected_inbox = projected_inbox
        self._projected_spam = projected_spam

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyVolumeVolumeStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyVolume_VolumeStatistics of this DailyVolumeVolumeStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inbox_raw_count(self):
        """Gets the inbox_raw_count of this DailyVolumeVolumeStatistics.


        :return: The inbox_raw_count of this DailyVolumeVolumeStatistics.
        :rtype: int
        """
        return self._inbox_raw_count

    @inbox_raw_count.setter
    def inbox_raw_count(self, inbox_raw_count):
        """Sets the inbox_raw_count of this DailyVolumeVolumeStatistics.


        :param inbox_raw_count: The inbox_raw_count of this DailyVolumeVolumeStatistics.
        :type inbox_raw_count: int
        """

        self._inbox_raw_count = inbox_raw_count

    @property
    def spam_raw_count(self):
        """Gets the spam_raw_count of this DailyVolumeVolumeStatistics.


        :return: The spam_raw_count of this DailyVolumeVolumeStatistics.
        :rtype: int
        """
        return self._spam_raw_count

    @spam_raw_count.setter
    def spam_raw_count(self, spam_raw_count):
        """Sets the spam_raw_count of this DailyVolumeVolumeStatistics.


        :param spam_raw_count: The spam_raw_count of this DailyVolumeVolumeStatistics.
        :type spam_raw_count: int
        """

        self._spam_raw_count = spam_raw_count

    @property
    def projected_inbox(self):
        """Gets the projected_inbox of this DailyVolumeVolumeStatistics.


        :return: The projected_inbox of this DailyVolumeVolumeStatistics.
        :rtype: int
        """
        return self._projected_inbox

    @projected_inbox.setter
    def projected_inbox(self, projected_inbox):
        """Sets the projected_inbox of this DailyVolumeVolumeStatistics.


        :param projected_inbox: The projected_inbox of this DailyVolumeVolumeStatistics.
        :type projected_inbox: int
        """

        self._projected_inbox = projected_inbox

    @property
    def projected_spam(self):
        """Gets the projected_spam of this DailyVolumeVolumeStatistics.


        :return: The projected_spam of this DailyVolumeVolumeStatistics.
        :rtype: int
        """
        return self._projected_spam

    @projected_spam.setter
    def projected_spam(self, projected_spam):
        """Sets the projected_spam of this DailyVolumeVolumeStatistics.


        :param projected_spam: The projected_spam of this DailyVolumeVolumeStatistics.
        :type projected_spam: int
        """

        self._projected_spam = projected_spam
