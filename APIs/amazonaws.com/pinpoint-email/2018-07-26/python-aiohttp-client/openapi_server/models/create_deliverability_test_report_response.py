# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deliverability_test_status import DeliverabilityTestStatus
from openapi_server import util


class CreateDeliverabilityTestReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_id: str=None, deliverability_test_status: DeliverabilityTestStatus=None):
        """CreateDeliverabilityTestReportResponse - a model defined in OpenAPI

        :param report_id: The report_id of this CreateDeliverabilityTestReportResponse.
        :param deliverability_test_status: The deliverability_test_status of this CreateDeliverabilityTestReportResponse.
        """
        self.openapi_types = {
            'report_id': str,
            'deliverability_test_status': DeliverabilityTestStatus
        }

        self.attribute_map = {
            'report_id': 'ReportId',
            'deliverability_test_status': 'DeliverabilityTestStatus'
        }

        self._report_id = report_id
        self._deliverability_test_status = deliverability_test_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeliverabilityTestReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeliverabilityTestReportResponse of this CreateDeliverabilityTestReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_id(self):
        """Gets the report_id of this CreateDeliverabilityTestReportResponse.


        :return: The report_id of this CreateDeliverabilityTestReportResponse.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this CreateDeliverabilityTestReportResponse.


        :param report_id: The report_id of this CreateDeliverabilityTestReportResponse.
        :type report_id: str
        """
        if report_id is None:
            raise ValueError("Invalid value for `report_id`, must not be `None`")

        self._report_id = report_id

    @property
    def deliverability_test_status(self):
        """Gets the deliverability_test_status of this CreateDeliverabilityTestReportResponse.


        :return: The deliverability_test_status of this CreateDeliverabilityTestReportResponse.
        :rtype: DeliverabilityTestStatus
        """
        return self._deliverability_test_status

    @deliverability_test_status.setter
    def deliverability_test_status(self, deliverability_test_status):
        """Sets the deliverability_test_status of this CreateDeliverabilityTestReportResponse.


        :param deliverability_test_status: The deliverability_test_status of this CreateDeliverabilityTestReportResponse.
        :type deliverability_test_status: DeliverabilityTestStatus
        """
        if deliverability_test_status is None:
            raise ValueError("Invalid value for `deliverability_test_status`, must not be `None`")

        self._deliverability_test_status = deliverability_test_status
