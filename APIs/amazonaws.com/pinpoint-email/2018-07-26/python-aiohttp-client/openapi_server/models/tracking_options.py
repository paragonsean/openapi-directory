# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrackingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_redirect_domain: str=None):
        """TrackingOptions - a model defined in OpenAPI

        :param custom_redirect_domain: The custom_redirect_domain of this TrackingOptions.
        """
        self.openapi_types = {
            'custom_redirect_domain': str
        }

        self.attribute_map = {
            'custom_redirect_domain': 'CustomRedirectDomain'
        }

        self._custom_redirect_domain = custom_redirect_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackingOptions of this TrackingOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_redirect_domain(self):
        """Gets the custom_redirect_domain of this TrackingOptions.


        :return: The custom_redirect_domain of this TrackingOptions.
        :rtype: str
        """
        return self._custom_redirect_domain

    @custom_redirect_domain.setter
    def custom_redirect_domain(self, custom_redirect_domain):
        """Sets the custom_redirect_domain of this TrackingOptions.


        :param custom_redirect_domain: The custom_redirect_domain of this TrackingOptions.
        :type custom_redirect_domain: str
        """
        if custom_redirect_domain is None:
            raise ValueError("Invalid value for `custom_redirect_domain`, must not be `None`")

        self._custom_redirect_domain = custom_redirect_domain
