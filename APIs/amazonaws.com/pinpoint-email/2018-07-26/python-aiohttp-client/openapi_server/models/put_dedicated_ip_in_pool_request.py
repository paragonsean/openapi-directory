# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutDedicatedIpInPoolRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_pool_name: str=None):
        """PutDedicatedIpInPoolRequest - a model defined in OpenAPI

        :param destination_pool_name: The destination_pool_name of this PutDedicatedIpInPoolRequest.
        """
        self.openapi_types = {
            'destination_pool_name': str
        }

        self.attribute_map = {
            'destination_pool_name': 'DestinationPoolName'
        }

        self._destination_pool_name = destination_pool_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDedicatedIpInPoolRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDedicatedIpInPool_request of this PutDedicatedIpInPoolRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_pool_name(self):
        """Gets the destination_pool_name of this PutDedicatedIpInPoolRequest.

        The name of a dedicated IP pool.

        :return: The destination_pool_name of this PutDedicatedIpInPoolRequest.
        :rtype: str
        """
        return self._destination_pool_name

    @destination_pool_name.setter
    def destination_pool_name(self, destination_pool_name):
        """Sets the destination_pool_name of this PutDedicatedIpInPoolRequest.

        The name of a dedicated IP pool.

        :param destination_pool_name: The destination_pool_name of this PutDedicatedIpInPoolRequest.
        :type destination_pool_name: str
        """
        if destination_pool_name is None:
            raise ValueError("Invalid value for `destination_pool_name`, must not be `None`")

        self._destination_pool_name = destination_pool_name
