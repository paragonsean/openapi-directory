# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_configuration_set_event_destination_request_event_destination import CreateConfigurationSetEventDestinationRequestEventDestination
from openapi_server import util


class CreateConfigurationSetEventDestinationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_destination_name: str=None, event_destination: CreateConfigurationSetEventDestinationRequestEventDestination=None):
        """CreateConfigurationSetEventDestinationRequest - a model defined in OpenAPI

        :param event_destination_name: The event_destination_name of this CreateConfigurationSetEventDestinationRequest.
        :param event_destination: The event_destination of this CreateConfigurationSetEventDestinationRequest.
        """
        self.openapi_types = {
            'event_destination_name': str,
            'event_destination': CreateConfigurationSetEventDestinationRequestEventDestination
        }

        self.attribute_map = {
            'event_destination_name': 'EventDestinationName',
            'event_destination': 'EventDestination'
        }

        self._event_destination_name = event_destination_name
        self._event_destination = event_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationSetEventDestinationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfigurationSetEventDestination_request of this CreateConfigurationSetEventDestinationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_destination_name(self):
        """Gets the event_destination_name of this CreateConfigurationSetEventDestinationRequest.

        <p>The name of an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>

        :return: The event_destination_name of this CreateConfigurationSetEventDestinationRequest.
        :rtype: str
        """
        return self._event_destination_name

    @event_destination_name.setter
    def event_destination_name(self, event_destination_name):
        """Sets the event_destination_name of this CreateConfigurationSetEventDestinationRequest.

        <p>The name of an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>

        :param event_destination_name: The event_destination_name of this CreateConfigurationSetEventDestinationRequest.
        :type event_destination_name: str
        """
        if event_destination_name is None:
            raise ValueError("Invalid value for `event_destination_name`, must not be `None`")

        self._event_destination_name = event_destination_name

    @property
    def event_destination(self):
        """Gets the event_destination of this CreateConfigurationSetEventDestinationRequest.


        :return: The event_destination of this CreateConfigurationSetEventDestinationRequest.
        :rtype: CreateConfigurationSetEventDestinationRequestEventDestination
        """
        return self._event_destination

    @event_destination.setter
    def event_destination(self, event_destination):
        """Sets the event_destination of this CreateConfigurationSetEventDestinationRequest.


        :param event_destination: The event_destination of this CreateConfigurationSetEventDestinationRequest.
        :type event_destination: CreateConfigurationSetEventDestinationRequestEventDestination
        """
        if event_destination is None:
            raise ValueError("Invalid value for `event_destination`, must not be `None`")

        self._event_destination = event_destination
