# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_deliverability_test_report_request_content import CreateDeliverabilityTestReportRequestContent
from openapi_server.models.message_tag import MessageTag
from openapi_server.models.send_email_request_destination import SendEmailRequestDestination
from openapi_server import util


class SendEmailRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_email_address: str=None, destination: SendEmailRequestDestination=None, reply_to_addresses: List[str]=None, feedback_forwarding_email_address: str=None, content: CreateDeliverabilityTestReportRequestContent=None, email_tags: List[MessageTag]=None, configuration_set_name: str=None):
        """SendEmailRequest - a model defined in OpenAPI

        :param from_email_address: The from_email_address of this SendEmailRequest.
        :param destination: The destination of this SendEmailRequest.
        :param reply_to_addresses: The reply_to_addresses of this SendEmailRequest.
        :param feedback_forwarding_email_address: The feedback_forwarding_email_address of this SendEmailRequest.
        :param content: The content of this SendEmailRequest.
        :param email_tags: The email_tags of this SendEmailRequest.
        :param configuration_set_name: The configuration_set_name of this SendEmailRequest.
        """
        self.openapi_types = {
            'from_email_address': str,
            'destination': SendEmailRequestDestination,
            'reply_to_addresses': List[str],
            'feedback_forwarding_email_address': str,
            'content': CreateDeliverabilityTestReportRequestContent,
            'email_tags': List[MessageTag],
            'configuration_set_name': str
        }

        self.attribute_map = {
            'from_email_address': 'FromEmailAddress',
            'destination': 'Destination',
            'reply_to_addresses': 'ReplyToAddresses',
            'feedback_forwarding_email_address': 'FeedbackForwardingEmailAddress',
            'content': 'Content',
            'email_tags': 'EmailTags',
            'configuration_set_name': 'ConfigurationSetName'
        }

        self._from_email_address = from_email_address
        self._destination = destination
        self._reply_to_addresses = reply_to_addresses
        self._feedback_forwarding_email_address = feedback_forwarding_email_address
        self._content = content
        self._email_tags = email_tags
        self._configuration_set_name = configuration_set_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendEmailRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendEmail_request of this SendEmailRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_email_address(self):
        """Gets the from_email_address of this SendEmailRequest.

        The email address that you want to use as the \"From\" address for the email. The address that you specify has to be verified. 

        :return: The from_email_address of this SendEmailRequest.
        :rtype: str
        """
        return self._from_email_address

    @from_email_address.setter
    def from_email_address(self, from_email_address):
        """Sets the from_email_address of this SendEmailRequest.

        The email address that you want to use as the \"From\" address for the email. The address that you specify has to be verified. 

        :param from_email_address: The from_email_address of this SendEmailRequest.
        :type from_email_address: str
        """

        self._from_email_address = from_email_address

    @property
    def destination(self):
        """Gets the destination of this SendEmailRequest.


        :return: The destination of this SendEmailRequest.
        :rtype: SendEmailRequestDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this SendEmailRequest.


        :param destination: The destination of this SendEmailRequest.
        :type destination: SendEmailRequestDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def reply_to_addresses(self):
        """Gets the reply_to_addresses of this SendEmailRequest.

        The \"Reply-to\" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.

        :return: The reply_to_addresses of this SendEmailRequest.
        :rtype: List[str]
        """
        return self._reply_to_addresses

    @reply_to_addresses.setter
    def reply_to_addresses(self, reply_to_addresses):
        """Sets the reply_to_addresses of this SendEmailRequest.

        The \"Reply-to\" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.

        :param reply_to_addresses: The reply_to_addresses of this SendEmailRequest.
        :type reply_to_addresses: List[str]
        """

        self._reply_to_addresses = reply_to_addresses

    @property
    def feedback_forwarding_email_address(self):
        """Gets the feedback_forwarding_email_address of this SendEmailRequest.

        The address that Amazon Pinpoint should send bounce and complaint notifications to.

        :return: The feedback_forwarding_email_address of this SendEmailRequest.
        :rtype: str
        """
        return self._feedback_forwarding_email_address

    @feedback_forwarding_email_address.setter
    def feedback_forwarding_email_address(self, feedback_forwarding_email_address):
        """Sets the feedback_forwarding_email_address of this SendEmailRequest.

        The address that Amazon Pinpoint should send bounce and complaint notifications to.

        :param feedback_forwarding_email_address: The feedback_forwarding_email_address of this SendEmailRequest.
        :type feedback_forwarding_email_address: str
        """

        self._feedback_forwarding_email_address = feedback_forwarding_email_address

    @property
    def content(self):
        """Gets the content of this SendEmailRequest.


        :return: The content of this SendEmailRequest.
        :rtype: CreateDeliverabilityTestReportRequestContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SendEmailRequest.


        :param content: The content of this SendEmailRequest.
        :type content: CreateDeliverabilityTestReportRequestContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def email_tags(self):
        """Gets the email_tags of this SendEmailRequest.

        A list of message tags.

        :return: The email_tags of this SendEmailRequest.
        :rtype: List[MessageTag]
        """
        return self._email_tags

    @email_tags.setter
    def email_tags(self, email_tags):
        """Sets the email_tags of this SendEmailRequest.

        A list of message tags.

        :param email_tags: The email_tags of this SendEmailRequest.
        :type email_tags: List[MessageTag]
        """

        self._email_tags = email_tags

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this SendEmailRequest.

        <p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>

        :return: The configuration_set_name of this SendEmailRequest.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this SendEmailRequest.

        <p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>

        :param configuration_set_name: The configuration_set_name of this SendEmailRequest.
        :type configuration_set_name: str
        """

        self._configuration_set_name = configuration_set_name
