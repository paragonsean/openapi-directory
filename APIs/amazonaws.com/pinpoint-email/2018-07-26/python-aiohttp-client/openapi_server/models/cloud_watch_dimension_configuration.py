# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_value_source import DimensionValueSource
from openapi_server import util


class CloudWatchDimensionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_name: str=None, dimension_value_source: DimensionValueSource=None, default_dimension_value: str=None):
        """CloudWatchDimensionConfiguration - a model defined in OpenAPI

        :param dimension_name: The dimension_name of this CloudWatchDimensionConfiguration.
        :param dimension_value_source: The dimension_value_source of this CloudWatchDimensionConfiguration.
        :param default_dimension_value: The default_dimension_value of this CloudWatchDimensionConfiguration.
        """
        self.openapi_types = {
            'dimension_name': str,
            'dimension_value_source': DimensionValueSource,
            'default_dimension_value': str
        }

        self.attribute_map = {
            'dimension_name': 'DimensionName',
            'dimension_value_source': 'DimensionValueSource',
            'default_dimension_value': 'DefaultDimensionValue'
        }

        self._dimension_name = dimension_name
        self._dimension_value_source = dimension_value_source
        self._default_dimension_value = default_dimension_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchDimensionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchDimensionConfiguration of this CloudWatchDimensionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_name(self):
        """Gets the dimension_name of this CloudWatchDimensionConfiguration.


        :return: The dimension_name of this CloudWatchDimensionConfiguration.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this CloudWatchDimensionConfiguration.


        :param dimension_name: The dimension_name of this CloudWatchDimensionConfiguration.
        :type dimension_name: str
        """
        if dimension_name is None:
            raise ValueError("Invalid value for `dimension_name`, must not be `None`")

        self._dimension_name = dimension_name

    @property
    def dimension_value_source(self):
        """Gets the dimension_value_source of this CloudWatchDimensionConfiguration.


        :return: The dimension_value_source of this CloudWatchDimensionConfiguration.
        :rtype: DimensionValueSource
        """
        return self._dimension_value_source

    @dimension_value_source.setter
    def dimension_value_source(self, dimension_value_source):
        """Sets the dimension_value_source of this CloudWatchDimensionConfiguration.


        :param dimension_value_source: The dimension_value_source of this CloudWatchDimensionConfiguration.
        :type dimension_value_source: DimensionValueSource
        """
        if dimension_value_source is None:
            raise ValueError("Invalid value for `dimension_value_source`, must not be `None`")

        self._dimension_value_source = dimension_value_source

    @property
    def default_dimension_value(self):
        """Gets the default_dimension_value of this CloudWatchDimensionConfiguration.


        :return: The default_dimension_value of this CloudWatchDimensionConfiguration.
        :rtype: str
        """
        return self._default_dimension_value

    @default_dimension_value.setter
    def default_dimension_value(self, default_dimension_value):
        """Sets the default_dimension_value of this CloudWatchDimensionConfiguration.


        :param default_dimension_value: The default_dimension_value of this CloudWatchDimensionConfiguration.
        :type default_dimension_value: str
        """
        if default_dimension_value is None:
            raise ValueError("Invalid value for `default_dimension_value`, must not be `None`")

        self._default_dimension_value = default_dimension_value
