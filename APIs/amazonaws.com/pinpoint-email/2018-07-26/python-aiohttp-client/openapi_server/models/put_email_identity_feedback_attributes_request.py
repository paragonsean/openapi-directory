# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutEmailIdentityFeedbackAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_forwarding_enabled: bool=None):
        """PutEmailIdentityFeedbackAttributesRequest - a model defined in OpenAPI

        :param email_forwarding_enabled: The email_forwarding_enabled of this PutEmailIdentityFeedbackAttributesRequest.
        """
        self.openapi_types = {
            'email_forwarding_enabled': bool
        }

        self.attribute_map = {
            'email_forwarding_enabled': 'EmailForwardingEnabled'
        }

        self._email_forwarding_enabled = email_forwarding_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEmailIdentityFeedbackAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEmailIdentityFeedbackAttributes_request of this PutEmailIdentityFeedbackAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_forwarding_enabled(self):
        """Gets the email_forwarding_enabled of this PutEmailIdentityFeedbackAttributesRequest.

        <p>Sets the feedback forwarding configuration for the identity.</p> <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email.</p> <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).</p>

        :return: The email_forwarding_enabled of this PutEmailIdentityFeedbackAttributesRequest.
        :rtype: bool
        """
        return self._email_forwarding_enabled

    @email_forwarding_enabled.setter
    def email_forwarding_enabled(self, email_forwarding_enabled):
        """Sets the email_forwarding_enabled of this PutEmailIdentityFeedbackAttributesRequest.

        <p>Sets the feedback forwarding configuration for the identity.</p> <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email.</p> <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).</p>

        :param email_forwarding_enabled: The email_forwarding_enabled of this PutEmailIdentityFeedbackAttributesRequest.
        :type email_forwarding_enabled: bool
        """

        self._email_forwarding_enabled = email_forwarding_enabled
