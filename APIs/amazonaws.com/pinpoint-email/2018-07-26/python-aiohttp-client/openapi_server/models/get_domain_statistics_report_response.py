# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_domain_statistics_report_response_overall_volume import GetDomainStatisticsReportResponseOverallVolume
from openapi_server import util


class GetDomainStatisticsReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, overall_volume: GetDomainStatisticsReportResponseOverallVolume=None, daily_volumes: List=None):
        """GetDomainStatisticsReportResponse - a model defined in OpenAPI

        :param overall_volume: The overall_volume of this GetDomainStatisticsReportResponse.
        :param daily_volumes: The daily_volumes of this GetDomainStatisticsReportResponse.
        """
        self.openapi_types = {
            'overall_volume': GetDomainStatisticsReportResponseOverallVolume,
            'daily_volumes': List
        }

        self.attribute_map = {
            'overall_volume': 'OverallVolume',
            'daily_volumes': 'DailyVolumes'
        }

        self._overall_volume = overall_volume
        self._daily_volumes = daily_volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDomainStatisticsReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDomainStatisticsReportResponse of this GetDomainStatisticsReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overall_volume(self):
        """Gets the overall_volume of this GetDomainStatisticsReportResponse.


        :return: The overall_volume of this GetDomainStatisticsReportResponse.
        :rtype: GetDomainStatisticsReportResponseOverallVolume
        """
        return self._overall_volume

    @overall_volume.setter
    def overall_volume(self, overall_volume):
        """Sets the overall_volume of this GetDomainStatisticsReportResponse.


        :param overall_volume: The overall_volume of this GetDomainStatisticsReportResponse.
        :type overall_volume: GetDomainStatisticsReportResponseOverallVolume
        """
        if overall_volume is None:
            raise ValueError("Invalid value for `overall_volume`, must not be `None`")

        self._overall_volume = overall_volume

    @property
    def daily_volumes(self):
        """Gets the daily_volumes of this GetDomainStatisticsReportResponse.


        :return: The daily_volumes of this GetDomainStatisticsReportResponse.
        :rtype: List
        """
        return self._daily_volumes

    @daily_volumes.setter
    def daily_volumes(self, daily_volumes):
        """Sets the daily_volumes of this GetDomainStatisticsReportResponse.


        :param daily_volumes: The daily_volumes of this GetDomainStatisticsReportResponse.
        :type daily_volumes: List
        """
        if daily_volumes is None:
            raise ValueError("Invalid value for `daily_volumes`, must not be `None`")

        self._daily_volumes = daily_volumes
