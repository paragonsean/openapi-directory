# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.warmup_status import WarmupStatus
from openapi_server import util


class DedicatedIp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, warmup_status: WarmupStatus=None, warmup_percentage: int=None, pool_name: str=None):
        """DedicatedIp - a model defined in OpenAPI

        :param ip: The ip of this DedicatedIp.
        :param warmup_status: The warmup_status of this DedicatedIp.
        :param warmup_percentage: The warmup_percentage of this DedicatedIp.
        :param pool_name: The pool_name of this DedicatedIp.
        """
        self.openapi_types = {
            'ip': str,
            'warmup_status': WarmupStatus,
            'warmup_percentage': int,
            'pool_name': str
        }

        self.attribute_map = {
            'ip': 'Ip',
            'warmup_status': 'WarmupStatus',
            'warmup_percentage': 'WarmupPercentage',
            'pool_name': 'PoolName'
        }

        self._ip = ip
        self._warmup_status = warmup_status
        self._warmup_percentage = warmup_percentage
        self._pool_name = pool_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedIp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedIp of this DedicatedIp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this DedicatedIp.


        :return: The ip of this DedicatedIp.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DedicatedIp.


        :param ip: The ip of this DedicatedIp.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def warmup_status(self):
        """Gets the warmup_status of this DedicatedIp.


        :return: The warmup_status of this DedicatedIp.
        :rtype: WarmupStatus
        """
        return self._warmup_status

    @warmup_status.setter
    def warmup_status(self, warmup_status):
        """Sets the warmup_status of this DedicatedIp.


        :param warmup_status: The warmup_status of this DedicatedIp.
        :type warmup_status: WarmupStatus
        """
        if warmup_status is None:
            raise ValueError("Invalid value for `warmup_status`, must not be `None`")

        self._warmup_status = warmup_status

    @property
    def warmup_percentage(self):
        """Gets the warmup_percentage of this DedicatedIp.


        :return: The warmup_percentage of this DedicatedIp.
        :rtype: int
        """
        return self._warmup_percentage

    @warmup_percentage.setter
    def warmup_percentage(self, warmup_percentage):
        """Sets the warmup_percentage of this DedicatedIp.


        :param warmup_percentage: The warmup_percentage of this DedicatedIp.
        :type warmup_percentage: int
        """
        if warmup_percentage is None:
            raise ValueError("Invalid value for `warmup_percentage`, must not be `None`")

        self._warmup_percentage = warmup_percentage

    @property
    def pool_name(self):
        """Gets the pool_name of this DedicatedIp.


        :return: The pool_name of this DedicatedIp.
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this DedicatedIp.


        :param pool_name: The pool_name of this DedicatedIp.
        :type pool_name: str
        """

        self._pool_name = pool_name
