/**
 * Amazon Pinpoint Email Service
 * <fullname>Amazon Pinpoint Email Service</fullname> <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides information about the Amazon Pinpoint Email API (version 1.0), including supported operations, data types, parameters, and schemas.</p> <p> <a href=\"https://aws.amazon.com/pinpoint\">Amazon Pinpoint</a> is an AWS service that you can use to engage with your customers across multiple messaging channels. You can use Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The Amazon Pinpoint Email API provides programmatic access to options that are unique to the email channel and supplement the options provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\">Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides information about key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply to using the service.</p> <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint for each of these Regions. For a list of all the Regions and endpoints where the API is currently available, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region\">AWS Service Endpoints</a> in the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\">Managing AWS Regions</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones are physically isolated from each other, but are united by private, low-latency, high-throughput, and highly redundant network connections. These Availability Zones enable us to provide very high levels of availability and redundancy, while also minimizing latency. To learn more about the number of Availability Zones that are available in each Region, see <a href=\"http://aws.amazon.com/about-aws/global-infrastructure/\">AWS Global Infrastructure</a>.</p>
 *
 * The version of the OpenAPI document: 2018-07-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateConfigurationSetEventDestinationRequest from '../model/CreateConfigurationSetEventDestinationRequest';
import CreateConfigurationSetRequest from '../model/CreateConfigurationSetRequest';
import CreateDedicatedIpPoolRequest from '../model/CreateDedicatedIpPoolRequest';
import CreateDeliverabilityTestReportRequest from '../model/CreateDeliverabilityTestReportRequest';
import CreateDeliverabilityTestReportResponse from '../model/CreateDeliverabilityTestReportResponse';
import CreateEmailIdentityRequest from '../model/CreateEmailIdentityRequest';
import CreateEmailIdentityResponse from '../model/CreateEmailIdentityResponse';
import GetAccountResponse from '../model/GetAccountResponse';
import GetBlacklistReportsResponse from '../model/GetBlacklistReportsResponse';
import GetConfigurationSetEventDestinationsResponse from '../model/GetConfigurationSetEventDestinationsResponse';
import GetConfigurationSetResponse from '../model/GetConfigurationSetResponse';
import GetDedicatedIpResponse from '../model/GetDedicatedIpResponse';
import GetDedicatedIpsResponse from '../model/GetDedicatedIpsResponse';
import GetDeliverabilityDashboardOptionsResponse from '../model/GetDeliverabilityDashboardOptionsResponse';
import GetDeliverabilityTestReportResponse from '../model/GetDeliverabilityTestReportResponse';
import GetDomainDeliverabilityCampaignResponse from '../model/GetDomainDeliverabilityCampaignResponse';
import GetDomainStatisticsReportResponse from '../model/GetDomainStatisticsReportResponse';
import GetEmailIdentityResponse from '../model/GetEmailIdentityResponse';
import ListConfigurationSetsResponse from '../model/ListConfigurationSetsResponse';
import ListDedicatedIpPoolsResponse from '../model/ListDedicatedIpPoolsResponse';
import ListDeliverabilityTestReportsResponse from '../model/ListDeliverabilityTestReportsResponse';
import ListDomainDeliverabilityCampaignsResponse from '../model/ListDomainDeliverabilityCampaignsResponse';
import ListEmailIdentitiesResponse from '../model/ListEmailIdentitiesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutAccountDedicatedIpWarmupAttributesRequest from '../model/PutAccountDedicatedIpWarmupAttributesRequest';
import PutAccountSendingAttributesRequest from '../model/PutAccountSendingAttributesRequest';
import PutConfigurationSetDeliveryOptionsRequest from '../model/PutConfigurationSetDeliveryOptionsRequest';
import PutConfigurationSetReputationOptionsRequest from '../model/PutConfigurationSetReputationOptionsRequest';
import PutConfigurationSetSendingOptionsRequest from '../model/PutConfigurationSetSendingOptionsRequest';
import PutConfigurationSetTrackingOptionsRequest from '../model/PutConfigurationSetTrackingOptionsRequest';
import PutDedicatedIpInPoolRequest from '../model/PutDedicatedIpInPoolRequest';
import PutDedicatedIpWarmupAttributesRequest from '../model/PutDedicatedIpWarmupAttributesRequest';
import PutDeliverabilityDashboardOptionRequest from '../model/PutDeliverabilityDashboardOptionRequest';
import PutEmailIdentityDkimAttributesRequest from '../model/PutEmailIdentityDkimAttributesRequest';
import PutEmailIdentityFeedbackAttributesRequest from '../model/PutEmailIdentityFeedbackAttributesRequest';
import PutEmailIdentityMailFromAttributesRequest from '../model/PutEmailIdentityMailFromAttributesRequest';
import SendEmailRequest from '../model/SendEmailRequest';
import SendEmailResponse from '../model/SendEmailResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateConfigurationSetEventDestinationRequest from '../model/UpdateConfigurationSetEventDestinationRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-07-26
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConfigurationSet operation.
     * @callback module:api/DefaultApi~createConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a configuration set. <i>Configuration sets</i> are groups of rules that you can apply to the emails you send using Amazon Pinpoint. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email. 
     * @param {module:model/CreateConfigurationSetRequest} createConfigurationSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createConfigurationSet(createConfigurationSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationSetRequest;
      // verify the required parameter 'createConfigurationSetRequest' is set
      if (createConfigurationSetRequest === undefined || createConfigurationSetRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationSetRequest' when calling createConfigurationSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~createConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create an event destination. In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p> <p>A single configuration set can include more than one event destination.</p>
     * @param {String} configurationSetName The name of the configuration set that you want to add an event destination to.
     * @param {module:model/CreateConfigurationSetEventDestinationRequest} createConfigurationSetEventDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createConfigurationSetEventDestination(configurationSetName, createConfigurationSetEventDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationSetEventDestinationRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling createConfigurationSetEventDestination");
      }
      // verify the required parameter 'createConfigurationSetEventDestinationRequest' is set
      if (createConfigurationSetEventDestinationRequest === undefined || createConfigurationSetEventDestinationRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationSetEventDestinationRequest' when calling createConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDedicatedIpPool operation.
     * @callback module:api/DefaultApi~createDedicatedIpPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pool of dedicated IP addresses. A pool can include one or more dedicated IP addresses that are associated with your Amazon Pinpoint account. You can associate a pool with a configuration set. When you send an email that uses that configuration set, Amazon Pinpoint sends it using only the IP addresses in the associated pool.
     * @param {module:model/CreateDedicatedIpPoolRequest} createDedicatedIpPoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDedicatedIpPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDedicatedIpPool(createDedicatedIpPoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDedicatedIpPoolRequest;
      // verify the required parameter 'createDedicatedIpPoolRequest' is set
      if (createDedicatedIpPoolRequest === undefined || createDedicatedIpPoolRequest === null) {
        throw new Error("Missing the required parameter 'createDedicatedIpPoolRequest' when calling createDedicatedIpPool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ip-pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeliverabilityTestReport operation.
     * @callback module:api/DefaultApi~createDeliverabilityTestReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeliverabilityTestReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon Pinpoint then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
     * @param {module:model/CreateDeliverabilityTestReportRequest} createDeliverabilityTestReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeliverabilityTestReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeliverabilityTestReportResponse}
     */
    createDeliverabilityTestReport(createDeliverabilityTestReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeliverabilityTestReportRequest;
      // verify the required parameter 'createDeliverabilityTestReportRequest' is set
      if (createDeliverabilityTestReportRequest === undefined || createDeliverabilityTestReportRequest === null) {
        throw new Error("Missing the required parameter 'createDeliverabilityTestReportRequest' when calling createDeliverabilityTestReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeliverabilityTestReportResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailIdentity operation.
     * @callback module:api/DefaultApi~createEmailIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEmailIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email address or domain that you use when you send email. Before you can use an identity to send email with Amazon Pinpoint, you first have to verify it. By verifying an address, you demonstrate that you're the owner of the address, and that you've given Amazon Pinpoint permission to send email from the address.</p> <p>When you verify an email address, Amazon Pinpoint sends an email to the address. Your email address is verified as soon as you follow the link in the verification email. </p> <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your domain. Your domain is verified when Amazon Pinpoint detects these records in the DNS configuration for your domain. It usually takes around 72 hours to complete the domain verification process.</p>
     * @param {module:model/CreateEmailIdentityRequest} createEmailIdentityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEmailIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEmailIdentityResponse}
     */
    createEmailIdentity(createEmailIdentityRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEmailIdentityRequest;
      // verify the required parameter 'createEmailIdentityRequest' is set
      if (createEmailIdentityRequest === undefined || createEmailIdentityRequest === null) {
        throw new Error("Missing the required parameter 'createEmailIdentityRequest' when calling createEmailIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEmailIdentityResponse;
      return this.apiClient.callApi(
        '/v1/email/identities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationSet operation.
     * @callback module:api/DefaultApi~deleteConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete an existing configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
     * @param {String} configurationSetName The name of the configuration set that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfigurationSet(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling deleteConfigurationSet");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~deleteConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param {String} configurationSetName The name of the configuration set that contains the event destination that you want to delete.
     * @param {String} eventDestinationName The name of the event destination that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfigurationSetEventDestination(configurationSetName, eventDestinationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling deleteConfigurationSetEventDestination");
      }
      // verify the required parameter 'eventDestinationName' is set
      if (eventDestinationName === undefined || eventDestinationName === null) {
        throw new Error("Missing the required parameter 'eventDestinationName' when calling deleteConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName,
        'EventDestinationName': eventDestinationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDedicatedIpPool operation.
     * @callback module:api/DefaultApi~deleteDedicatedIpPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dedicated IP pool.
     * @param {String} poolName The name of the dedicated IP pool that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDedicatedIpPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDedicatedIpPool(poolName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling deleteDedicatedIpPool");
      }

      let pathParams = {
        'PoolName': poolName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ip-pools/{PoolName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailIdentity operation.
     * @callback module:api/DefaultApi~deleteEmailIdentityCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an email identity that you previously verified for use with Amazon Pinpoint. An identity can be either an email address or a domain name.
     * @param {String} emailIdentity The identity (that is, the email address or domain) that you want to delete from your Amazon Pinpoint account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEmailIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEmailIdentity(emailIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling deleteEmailIdentity");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/identities/{EmailIdentity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/DefaultApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain information about the email-sending status and capabilities of your Amazon Pinpoint account in the current AWS Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountResponse}
     */
    getAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAccountResponse;
      return this.apiClient.callApi(
        '/v1/email/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlacklistReports operation.
     * @callback module:api/DefaultApi~getBlacklistReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlacklistReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of the blacklists that your dedicated IP addresses appear on.
     * @param {Array.<String>} blacklistItemNames A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or Amazon SES.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBlacklistReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlacklistReportsResponse}
     */
    getBlacklistReports(blacklistItemNames, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blacklistItemNames' is set
      if (blacklistItemNames === undefined || blacklistItemNames === null) {
        throw new Error("Missing the required parameter 'blacklistItemNames' when calling getBlacklistReports");
      }

      let pathParams = {
      };
      let queryParams = {
        'BlacklistItemNames': this.apiClient.buildCollectionParam(blacklistItemNames, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlacklistReportsResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/blacklist-report#BlacklistItemNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationSet operation.
     * @callback module:api/DefaultApi~getConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get information about an existing configuration set, including the dedicated IP pool that it's associated with, whether or not it's enabled for sending email, and more.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
     * @param {String} configurationSetName The name of the configuration set that you want to obtain more information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationSetResponse}
     */
    getConfigurationSet(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling getConfigurationSet");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationSetResponse;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationSetEventDestinations operation.
     * @callback module:api/DefaultApi~getConfigurationSetEventDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationSetEventDestinationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieve a list of event destinations that are associated with a configuration set.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param {String} configurationSetName The name of the configuration set that contains the event destination.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigurationSetEventDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationSetEventDestinationsResponse}
     */
    getConfigurationSetEventDestinations(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling getConfigurationSetEventDestinations");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationSetEventDestinationsResponse;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDedicatedIp operation.
     * @callback module:api/DefaultApi~getDedicatedIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDedicatedIpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a dedicated IP address, including the name of the dedicated IP pool that it's associated with, as well information about the automatic warm-up process for the address.
     * @param {String} IP The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDedicatedIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDedicatedIpResponse}
     */
    getDedicatedIp(IP, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling getDedicatedIp");
      }

      let pathParams = {
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDedicatedIpResponse;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ips/{IP}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDedicatedIps operation.
     * @callback module:api/DefaultApi~getDedicatedIpsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDedicatedIpsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the dedicated IP addresses that are associated with your Amazon Pinpoint account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [poolName] The name of the IP pool that the dedicated IP address is associated with.
     * @param {String} [nextToken] A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the position of the dedicated IP pool in the list of IP pools.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~getDedicatedIpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDedicatedIpsResponse}
     */
    getDedicatedIps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PoolName': opts['poolName'],
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDedicatedIpsResponse;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliverabilityDashboardOptions operation.
     * @callback module:api/DefaultApi~getDeliverabilityDashboardOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeliverabilityDashboardOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see <a href=\"http://aws.amazon.com/pinpoint/pricing/\">Amazon Pinpoint Pricing</a>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeliverabilityDashboardOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeliverabilityDashboardOptionsResponse}
     */
    getDeliverabilityDashboardOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeliverabilityDashboardOptionsResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliverabilityTestReport operation.
     * @callback module:api/DefaultApi~getDeliverabilityTestReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeliverabilityTestReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the results of a predictive inbox placement test.
     * @param {String} reportId A unique string that identifies the predictive inbox placement test.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeliverabilityTestReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeliverabilityTestReportResponse}
     */
    getDeliverabilityTestReport(reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getDeliverabilityTestReport");
      }

      let pathParams = {
        'ReportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeliverabilityTestReportResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/test-reports/{ReportId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainDeliverabilityCampaign operation.
     * @callback module:api/DefaultApi~getDomainDeliverabilityCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainDeliverabilityCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
     * @param {String} campaignId The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainDeliverabilityCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainDeliverabilityCampaignResponse}
     */
    getDomainDeliverabilityCampaign(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getDomainDeliverabilityCampaign");
      }

      let pathParams = {
        'CampaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainDeliverabilityCampaignResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/campaigns/{CampaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainStatisticsReport operation.
     * @callback module:api/DefaultApi~getDomainStatisticsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainStatisticsReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve inbox placement and engagement rates for the domains that you use to send email.
     * @param {String} domain The domain that you want to obtain deliverability metrics for.
     * @param {Date} startDate The first day (in Unix time) that you want to obtain domain deliverability metrics for.
     * @param {Date} endDate The last day (in Unix time) that you want to obtain domain deliverability metrics for. The <code>EndDate</code> that you specify has to be less than or equal to 30 days after the <code>StartDate</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainStatisticsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainStatisticsReportResponse}
     */
    getDomainStatisticsReport(domain, startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainStatisticsReport");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getDomainStatisticsReport");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getDomainStatisticsReport");
      }

      let pathParams = {
        'Domain': domain
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainStatisticsReportResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/statistics-report/{Domain}#StartDate&EndDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailIdentity operation.
     * @callback module:api/DefaultApi~getEmailIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmailIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about a specific identity associated with your Amazon Pinpoint account, including the identity's verification status, its DKIM authentication status, and its custom Mail-From settings.
     * @param {String} emailIdentity The email identity that you want to retrieve details for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEmailIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmailIdentityResponse}
     */
    getEmailIdentity(emailIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling getEmailIdentity");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmailIdentityResponse;
      return this.apiClient.callApi(
        '/v1/email/identities/{EmailIdentity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurationSets operation.
     * @callback module:api/DefaultApi~listConfigurationSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List all of the configuration sets associated with your Amazon Pinpoint account in the current region.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position in the list of configuration sets.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>ListConfigurationSets</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listConfigurationSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationSetsResponse}
     */
    listConfigurationSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationSetsResponse;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDedicatedIpPools operation.
     * @callback module:api/DefaultApi~listDedicatedIpPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDedicatedIpPoolsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the dedicated IP pools that exist in your Amazon Pinpoint account in the current AWS Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate the position in the list of dedicated IP pools.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>ListDedicatedIpPools</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listDedicatedIpPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDedicatedIpPoolsResponse}
     */
    listDedicatedIpPools(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDedicatedIpPoolsResponse;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ip-pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliverabilityTestReports operation.
     * @callback module:api/DefaultApi~listDeliverabilityTestReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeliverabilityTestReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code> operation to view the results.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to indicate the position in the list of predictive inbox placement tests.
     * @param {Number} [pageSize] <p>The number of results to show in a single call to <code>ListDeliverabilityTestReports</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
     * @param {module:api/DefaultApi~listDeliverabilityTestReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeliverabilityTestReportsResponse}
     */
    listDeliverabilityTestReports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDeliverabilityTestReportsResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/test-reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomainDeliverabilityCampaigns operation.
     * @callback module:api/DefaultApi~listDomainDeliverabilityCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainDeliverabilityCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation) for the domain.
     * @param {Date} startDate The first day, in Unix time format, that you want to obtain deliverability data for.
     * @param {Date} endDate The last day, in Unix time format, that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the <code>StartDate</code> parameter.
     * @param {String} subscribedDomain The domain to obtain deliverability data for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that’s returned from a previous call to the <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the position of a campaign in the list of campaigns.
     * @param {Number} [pageSize] The maximum number of results to include in response to a single call to the <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results is larger than the number that you specify in this parameter, the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listDomainDeliverabilityCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainDeliverabilityCampaignsResponse}
     */
    listDomainDeliverabilityCampaigns(startDate, endDate, subscribedDomain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling listDomainDeliverabilityCampaigns");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling listDomainDeliverabilityCampaigns");
      }
      // verify the required parameter 'subscribedDomain' is set
      if (subscribedDomain === undefined || subscribedDomain === null) {
        throw new Error("Missing the required parameter 'subscribedDomain' when calling listDomainDeliverabilityCampaigns");
      }

      let pathParams = {
        'SubscribedDomain': subscribedDomain
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainDeliverabilityCampaignsResponse;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns#StartDate&EndDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEmailIdentities operation.
     * @callback module:api/DefaultApi~listEmailIdentitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEmailIdentitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all of the email identities that are associated with your Amazon Pinpoint account. An identity can be either an email address or a domain. This operation returns identities that are verified as well as those that aren't.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListEmailIdentities</code> to indicate the position in the list of identities.
     * @param {Number} [pageSize] <p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
     * @param {module:api/DefaultApi~listEmailIdentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEmailIdentitiesResponse}
     */
    listEmailIdentities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEmailIdentitiesResponse;
      return this.apiClient.callApi(
        '/v1/email/identities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of the tags (keys and values) that are associated with a specified resource. A <i>tag</i> is a label that you optionally define and associate with a resource in Amazon Pinpoint. Each tag consists of a required <i>tag key</i> and an optional associated <i>tag value</i>. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/v1/email/tags#ResourceArn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountDedicatedIpWarmupAttributes operation.
     * @callback module:api/DefaultApi~putAccountDedicatedIpWarmupAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable the automatic warm-up feature for dedicated IP addresses.
     * @param {module:model/PutAccountDedicatedIpWarmupAttributesRequest} putAccountDedicatedIpWarmupAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountDedicatedIpWarmupAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountDedicatedIpWarmupAttributes(putAccountDedicatedIpWarmupAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountDedicatedIpWarmupAttributesRequest;
      // verify the required parameter 'putAccountDedicatedIpWarmupAttributesRequest' is set
      if (putAccountDedicatedIpWarmupAttributesRequest === undefined || putAccountDedicatedIpWarmupAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putAccountDedicatedIpWarmupAttributesRequest' when calling putAccountDedicatedIpWarmupAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/account/dedicated-ips/warmup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountSendingAttributes operation.
     * @callback module:api/DefaultApi~putAccountSendingAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable the ability of your account to send email.
     * @param {module:model/PutAccountSendingAttributesRequest} putAccountSendingAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountSendingAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountSendingAttributes(putAccountSendingAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountSendingAttributesRequest;
      // verify the required parameter 'putAccountSendingAttributesRequest' is set
      if (putAccountSendingAttributesRequest === undefined || putAccountSendingAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putAccountSendingAttributesRequest' when calling putAccountSendingAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/account/sending', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetDeliveryOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetDeliveryOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools to create groups of dedicated IP addresses for sending specific types of email.
     * @param {String} configurationSetName The name of the configuration set that you want to associate with a dedicated IP pool.
     * @param {module:model/PutConfigurationSetDeliveryOptionsRequest} putConfigurationSetDeliveryOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetDeliveryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetDeliveryOptions(configurationSetName, putConfigurationSetDeliveryOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetDeliveryOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetDeliveryOptions");
      }
      // verify the required parameter 'putConfigurationSetDeliveryOptionsRequest' is set
      if (putConfigurationSetDeliveryOptionsRequest === undefined || putConfigurationSetDeliveryOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetDeliveryOptionsRequest' when calling putConfigurationSetDeliveryOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/delivery-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetReputationOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetReputationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable collection of reputation metrics for emails that you send using a particular configuration set in a specific AWS Region.
     * @param {String} configurationSetName The name of the configuration set that you want to enable or disable reputation metric tracking for.
     * @param {module:model/PutConfigurationSetReputationOptionsRequest} putConfigurationSetReputationOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetReputationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetReputationOptions(configurationSetName, putConfigurationSetReputationOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetReputationOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetReputationOptions");
      }
      // verify the required parameter 'putConfigurationSetReputationOptionsRequest' is set
      if (putConfigurationSetReputationOptionsRequest === undefined || putConfigurationSetReputationOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetReputationOptionsRequest' when calling putConfigurationSetReputationOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/reputation-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetSendingOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetSendingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable email sending for messages that use a particular configuration set in a specific AWS Region.
     * @param {String} configurationSetName The name of the configuration set that you want to enable or disable email sending for.
     * @param {module:model/PutConfigurationSetSendingOptionsRequest} putConfigurationSetSendingOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetSendingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetSendingOptions(configurationSetName, putConfigurationSetSendingOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetSendingOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetSendingOptions");
      }
      // verify the required parameter 'putConfigurationSetSendingOptionsRequest' is set
      if (putConfigurationSetSendingOptionsRequest === undefined || putConfigurationSetSendingOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetSendingOptionsRequest' when calling putConfigurationSetSendingOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/sending', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetTrackingOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetTrackingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specify a custom domain to use for open and click tracking elements in email that you send using Amazon Pinpoint.
     * @param {String} configurationSetName The name of the configuration set that you want to add a custom tracking domain to.
     * @param {module:model/PutConfigurationSetTrackingOptionsRequest} putConfigurationSetTrackingOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetTrackingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetTrackingOptions(configurationSetName, putConfigurationSetTrackingOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetTrackingOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetTrackingOptions");
      }
      // verify the required parameter 'putConfigurationSetTrackingOptionsRequest' is set
      if (putConfigurationSetTrackingOptionsRequest === undefined || putConfigurationSetTrackingOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetTrackingOptionsRequest' when calling putConfigurationSetTrackingOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/tracking-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDedicatedIpInPool operation.
     * @callback module:api/DefaultApi~putDedicatedIpInPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Move a dedicated IP address to an existing dedicated IP pool.</p> <note> <p>The dedicated IP address that you specify must already exist, and must be associated with your Amazon Pinpoint account. </p> <p>The dedicated IP pool you specify must already exist. You can create a new pool by using the <code>CreateDedicatedIpPool</code> operation.</p> </note>
     * @param {String} IP The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Pinpoint account.
     * @param {module:model/PutDedicatedIpInPoolRequest} putDedicatedIpInPoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDedicatedIpInPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDedicatedIpInPool(IP, putDedicatedIpInPoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDedicatedIpInPoolRequest;
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling putDedicatedIpInPool");
      }
      // verify the required parameter 'putDedicatedIpInPoolRequest' is set
      if (putDedicatedIpInPoolRequest === undefined || putDedicatedIpInPoolRequest === null) {
        throw new Error("Missing the required parameter 'putDedicatedIpInPoolRequest' when calling putDedicatedIpInPool");
      }

      let pathParams = {
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ips/{IP}/pool', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDedicatedIpWarmupAttributes operation.
     * @callback module:api/DefaultApi~putDedicatedIpWarmupAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p/>
     * @param {String} IP The dedicated IP address that you want to update the warm-up attributes for.
     * @param {module:model/PutDedicatedIpWarmupAttributesRequest} putDedicatedIpWarmupAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDedicatedIpWarmupAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDedicatedIpWarmupAttributes(IP, putDedicatedIpWarmupAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDedicatedIpWarmupAttributesRequest;
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling putDedicatedIpWarmupAttributes");
      }
      // verify the required parameter 'putDedicatedIpWarmupAttributesRequest' is set
      if (putDedicatedIpWarmupAttributesRequest === undefined || putDedicatedIpWarmupAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putDedicatedIpWarmupAttributesRequest' when calling putDedicatedIpWarmupAttributes");
      }

      let pathParams = {
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/dedicated-ips/{IP}/warmup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDeliverabilityDashboardOption operation.
     * @callback module:api/DefaultApi~putDeliverabilityDashboardOptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see <a href=\"http://aws.amazon.com/pinpoint/pricing/\">Amazon Pinpoint Pricing</a>.</p>
     * @param {module:model/PutDeliverabilityDashboardOptionRequest} putDeliverabilityDashboardOptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDeliverabilityDashboardOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDeliverabilityDashboardOption(putDeliverabilityDashboardOptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDeliverabilityDashboardOptionRequest;
      // verify the required parameter 'putDeliverabilityDashboardOptionRequest' is set
      if (putDeliverabilityDashboardOptionRequest === undefined || putDeliverabilityDashboardOptionRequest === null) {
        throw new Error("Missing the required parameter 'putDeliverabilityDashboardOptionRequest' when calling putDeliverabilityDashboardOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/deliverability-dashboard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityDkimAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityDkimAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to enable or disable DKIM authentication for an email identity.
     * @param {String} emailIdentity The email identity that you want to change the DKIM settings for.
     * @param {module:model/PutEmailIdentityDkimAttributesRequest} putEmailIdentityDkimAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityDkimAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityDkimAttributes(emailIdentity, putEmailIdentityDkimAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityDkimAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityDkimAttributes");
      }
      // verify the required parameter 'putEmailIdentityDkimAttributesRequest' is set
      if (putEmailIdentityDkimAttributesRequest === undefined || putEmailIdentityDkimAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityDkimAttributesRequest' when calling putEmailIdentityDkimAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/identities/{EmailIdentity}/dkim', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityFeedbackAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityFeedbackAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Used to enable or disable feedback forwarding for an identity. This setting determines what happens when an identity is used to send an email that results in a bounce or complaint event.</p> <p>When you enable feedback forwarding, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email.</p> <p>When you disable feedback forwarding, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).</p>
     * @param {String} emailIdentity The email identity that you want to configure bounce and complaint feedback forwarding for.
     * @param {module:model/PutEmailIdentityFeedbackAttributesRequest} putEmailIdentityFeedbackAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityFeedbackAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityFeedbackAttributes(emailIdentity, putEmailIdentityFeedbackAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityFeedbackAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityFeedbackAttributes");
      }
      // verify the required parameter 'putEmailIdentityFeedbackAttributesRequest' is set
      if (putEmailIdentityFeedbackAttributesRequest === undefined || putEmailIdentityFeedbackAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityFeedbackAttributesRequest' when calling putEmailIdentityFeedbackAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/identities/{EmailIdentity}/feedback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityMailFromAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityMailFromAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to enable or disable the custom Mail-From domain configuration for an email identity.
     * @param {String} emailIdentity The verified email identity that you want to set up the custom MAIL FROM domain for.
     * @param {module:model/PutEmailIdentityMailFromAttributesRequest} putEmailIdentityMailFromAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityMailFromAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityMailFromAttributes(emailIdentity, putEmailIdentityMailFromAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityMailFromAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityMailFromAttributes");
      }
      // verify the required parameter 'putEmailIdentityMailFromAttributesRequest' is set
      if (putEmailIdentityMailFromAttributesRequest === undefined || putEmailIdentityMailFromAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityMailFromAttributesRequest' when calling putEmailIdentityMailFromAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/identities/{EmailIdentity}/mail-from', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmail operation.
     * @callback module:api/DefaultApi~sendEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sends an email message. You can use the Amazon Pinpoint Email API to send two types of messages:</p> <ul> <li> <p> <b>Simple</b> – A standard email message. When you create this type of message, you specify the sender, the recipient, and the message body, and Amazon Pinpoint assembles the message for you.</p> </li> <li> <p> <b>Raw</b> – A raw, MIME-formatted email message. When you send this type of email, you have to specify all of the message headers, as well as the message body. You can use this message type to send messages that contain attachments. The message that you specify has to be a valid MIME message.</p> </li> </ul>
     * @param {module:model/SendEmailRequest} sendEmailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailResponse}
     */
    sendEmail(sendEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendEmailRequest;
      // verify the required parameter 'sendEmailRequest' is set
      if (sendEmailRequest === undefined || sendEmailRequest === null) {
        throw new Error("Missing the required parameter 'sendEmailRequest' when calling sendEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEmailResponse;
      return this.apiClient.callApi(
        '/v1/email/outbound-emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Add one or more tags (keys and values) to a specified resource. A <i>tag</i> is a label that you optionally define and associate with a resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.</p> <p>Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.</p>
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one or more tags (keys and values) from a specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
     * @param {Array.<String>} tagKeys <p>The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value.</p> <p>To remove more than one tag from the resource, append the <code>TagKeys</code> parameter and argument for each additional tag to remove, separated by an ampersand. For example: <code>/v1/email/tags?ResourceArn=ResourceArn&amp;TagKeys=Key1&amp;TagKeys=Key2</code> </p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceArn': resourceArn,
        'TagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/tags#ResourceArn&TagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~updateConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update the configuration of an event destination for a configuration set.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param {String} configurationSetName The name of the configuration set that contains the event destination that you want to modify.
     * @param {String} eventDestinationName The name of the event destination that you want to modify.
     * @param {module:model/UpdateConfigurationSetEventDestinationRequest} updateConfigurationSetEventDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateConfigurationSetEventDestination(configurationSetName, eventDestinationName, updateConfigurationSetEventDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigurationSetEventDestinationRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling updateConfigurationSetEventDestination");
      }
      // verify the required parameter 'eventDestinationName' is set
      if (eventDestinationName === undefined || eventDestinationName === null) {
        throw new Error("Missing the required parameter 'eventDestinationName' when calling updateConfigurationSetEventDestination");
      }
      // verify the required parameter 'updateConfigurationSetEventDestinationRequest' is set
      if (updateConfigurationSetEventDestinationRequest === undefined || updateConfigurationSetEventDestinationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigurationSetEventDestinationRequest' when calling updateConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName,
        'EventDestinationName': eventDestinationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
