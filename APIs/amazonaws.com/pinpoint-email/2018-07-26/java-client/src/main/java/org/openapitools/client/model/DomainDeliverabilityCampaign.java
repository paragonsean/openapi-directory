/*
 * Amazon Pinpoint Email Service
 * <fullname>Amazon Pinpoint Email Service</fullname> <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides information about the Amazon Pinpoint Email API (version 1.0), including supported operations, data types, parameters, and schemas.</p> <p> <a href=\"https://aws.amazon.com/pinpoint\">Amazon Pinpoint</a> is an AWS service that you can use to engage with your customers across multiple messaging channels. You can use Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The Amazon Pinpoint Email API provides programmatic access to options that are unique to the email channel and supplement the options provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\">Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides information about key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply to using the service.</p> <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint for each of these Regions. For a list of all the Regions and endpoints where the API is currently available, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region\">AWS Service Endpoints</a> in the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\">Managing AWS Regions</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones are physically isolated from each other, but are united by private, low-latency, high-throughput, and highly redundant network connections. These Availability Zones enable us to provide very high levels of availability and redundancy, while also minimizing latency. To learn more about the number of Availability Zones that are available in each Region, see <a href=\"http://aws.amazon.com/about-aws/global-infrastructure/\">AWS Global Infrastructure</a>.</p>
 *
 * The version of the OpenAPI document: 2018-07-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (&lt;code&gt;PutDeliverabilityDashboardOption&lt;/code&gt; operation).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:35.756955-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainDeliverabilityCampaign {
  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "CampaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_IMAGE_URL = "ImageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_FROM_ADDRESS = "FromAddress";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS)
  private String fromAddress;

  public static final String SERIALIZED_NAME_SENDING_IPS = "SendingIps";
  @SerializedName(SERIALIZED_NAME_SENDING_IPS)
  private List sendingIps;

  public static final String SERIALIZED_NAME_FIRST_SEEN_DATE_TIME = "FirstSeenDateTime";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_DATE_TIME)
  private OffsetDateTime firstSeenDateTime;

  public static final String SERIALIZED_NAME_LAST_SEEN_DATE_TIME = "LastSeenDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_DATE_TIME)
  private OffsetDateTime lastSeenDateTime;

  public static final String SERIALIZED_NAME_INBOX_COUNT = "InboxCount";
  @SerializedName(SERIALIZED_NAME_INBOX_COUNT)
  private Integer inboxCount;

  public static final String SERIALIZED_NAME_SPAM_COUNT = "SpamCount";
  @SerializedName(SERIALIZED_NAME_SPAM_COUNT)
  private Integer spamCount;

  public static final String SERIALIZED_NAME_READ_RATE = "ReadRate";
  @SerializedName(SERIALIZED_NAME_READ_RATE)
  private Double readRate;

  public static final String SERIALIZED_NAME_DELETE_RATE = "DeleteRate";
  @SerializedName(SERIALIZED_NAME_DELETE_RATE)
  private Double deleteRate;

  public static final String SERIALIZED_NAME_READ_DELETE_RATE = "ReadDeleteRate";
  @SerializedName(SERIALIZED_NAME_READ_DELETE_RATE)
  private Double readDeleteRate;

  public static final String SERIALIZED_NAME_PROJECTED_VOLUME = "ProjectedVolume";
  @SerializedName(SERIALIZED_NAME_PROJECTED_VOLUME)
  private Integer projectedVolume;

  public static final String SERIALIZED_NAME_ESPS = "Esps";
  @SerializedName(SERIALIZED_NAME_ESPS)
  private List esps;

  public DomainDeliverabilityCampaign() {
  }

  public DomainDeliverabilityCampaign campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Get campaignId
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public DomainDeliverabilityCampaign imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public DomainDeliverabilityCampaign subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public DomainDeliverabilityCampaign fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

  /**
   * Get fromAddress
   * @return fromAddress
   */
  @javax.annotation.Nullable
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public DomainDeliverabilityCampaign sendingIps(List sendingIps) {
    this.sendingIps = sendingIps;
    return this;
  }

  /**
   * Get sendingIps
   * @return sendingIps
   */
  @javax.annotation.Nullable
  public List getSendingIps() {
    return sendingIps;
  }

  public void setSendingIps(List sendingIps) {
    this.sendingIps = sendingIps;
  }


  public DomainDeliverabilityCampaign firstSeenDateTime(OffsetDateTime firstSeenDateTime) {
    this.firstSeenDateTime = firstSeenDateTime;
    return this;
  }

  /**
   * Get firstSeenDateTime
   * @return firstSeenDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstSeenDateTime() {
    return firstSeenDateTime;
  }

  public void setFirstSeenDateTime(OffsetDateTime firstSeenDateTime) {
    this.firstSeenDateTime = firstSeenDateTime;
  }


  public DomainDeliverabilityCampaign lastSeenDateTime(OffsetDateTime lastSeenDateTime) {
    this.lastSeenDateTime = lastSeenDateTime;
    return this;
  }

  /**
   * Get lastSeenDateTime
   * @return lastSeenDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeenDateTime() {
    return lastSeenDateTime;
  }

  public void setLastSeenDateTime(OffsetDateTime lastSeenDateTime) {
    this.lastSeenDateTime = lastSeenDateTime;
  }


  public DomainDeliverabilityCampaign inboxCount(Integer inboxCount) {
    this.inboxCount = inboxCount;
    return this;
  }

  /**
   * Get inboxCount
   * @return inboxCount
   */
  @javax.annotation.Nullable
  public Integer getInboxCount() {
    return inboxCount;
  }

  public void setInboxCount(Integer inboxCount) {
    this.inboxCount = inboxCount;
  }


  public DomainDeliverabilityCampaign spamCount(Integer spamCount) {
    this.spamCount = spamCount;
    return this;
  }

  /**
   * Get spamCount
   * @return spamCount
   */
  @javax.annotation.Nullable
  public Integer getSpamCount() {
    return spamCount;
  }

  public void setSpamCount(Integer spamCount) {
    this.spamCount = spamCount;
  }


  public DomainDeliverabilityCampaign readRate(Double readRate) {
    this.readRate = readRate;
    return this;
  }

  /**
   * Get readRate
   * @return readRate
   */
  @javax.annotation.Nullable
  public Double getReadRate() {
    return readRate;
  }

  public void setReadRate(Double readRate) {
    this.readRate = readRate;
  }


  public DomainDeliverabilityCampaign deleteRate(Double deleteRate) {
    this.deleteRate = deleteRate;
    return this;
  }

  /**
   * Get deleteRate
   * @return deleteRate
   */
  @javax.annotation.Nullable
  public Double getDeleteRate() {
    return deleteRate;
  }

  public void setDeleteRate(Double deleteRate) {
    this.deleteRate = deleteRate;
  }


  public DomainDeliverabilityCampaign readDeleteRate(Double readDeleteRate) {
    this.readDeleteRate = readDeleteRate;
    return this;
  }

  /**
   * Get readDeleteRate
   * @return readDeleteRate
   */
  @javax.annotation.Nullable
  public Double getReadDeleteRate() {
    return readDeleteRate;
  }

  public void setReadDeleteRate(Double readDeleteRate) {
    this.readDeleteRate = readDeleteRate;
  }


  public DomainDeliverabilityCampaign projectedVolume(Integer projectedVolume) {
    this.projectedVolume = projectedVolume;
    return this;
  }

  /**
   * Get projectedVolume
   * @return projectedVolume
   */
  @javax.annotation.Nullable
  public Integer getProjectedVolume() {
    return projectedVolume;
  }

  public void setProjectedVolume(Integer projectedVolume) {
    this.projectedVolume = projectedVolume;
  }


  public DomainDeliverabilityCampaign esps(List esps) {
    this.esps = esps;
    return this;
  }

  /**
   * Get esps
   * @return esps
   */
  @javax.annotation.Nullable
  public List getEsps() {
    return esps;
  }

  public void setEsps(List esps) {
    this.esps = esps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainDeliverabilityCampaign domainDeliverabilityCampaign = (DomainDeliverabilityCampaign) o;
    return Objects.equals(this.campaignId, domainDeliverabilityCampaign.campaignId) &&
        Objects.equals(this.imageUrl, domainDeliverabilityCampaign.imageUrl) &&
        Objects.equals(this.subject, domainDeliverabilityCampaign.subject) &&
        Objects.equals(this.fromAddress, domainDeliverabilityCampaign.fromAddress) &&
        Objects.equals(this.sendingIps, domainDeliverabilityCampaign.sendingIps) &&
        Objects.equals(this.firstSeenDateTime, domainDeliverabilityCampaign.firstSeenDateTime) &&
        Objects.equals(this.lastSeenDateTime, domainDeliverabilityCampaign.lastSeenDateTime) &&
        Objects.equals(this.inboxCount, domainDeliverabilityCampaign.inboxCount) &&
        Objects.equals(this.spamCount, domainDeliverabilityCampaign.spamCount) &&
        Objects.equals(this.readRate, domainDeliverabilityCampaign.readRate) &&
        Objects.equals(this.deleteRate, domainDeliverabilityCampaign.deleteRate) &&
        Objects.equals(this.readDeleteRate, domainDeliverabilityCampaign.readDeleteRate) &&
        Objects.equals(this.projectedVolume, domainDeliverabilityCampaign.projectedVolume) &&
        Objects.equals(this.esps, domainDeliverabilityCampaign.esps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignId, imageUrl, subject, fromAddress, sendingIps, firstSeenDateTime, lastSeenDateTime, inboxCount, spamCount, readRate, deleteRate, readDeleteRate, projectedVolume, esps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainDeliverabilityCampaign {\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    sendingIps: ").append(toIndentedString(sendingIps)).append("\n");
    sb.append("    firstSeenDateTime: ").append(toIndentedString(firstSeenDateTime)).append("\n");
    sb.append("    lastSeenDateTime: ").append(toIndentedString(lastSeenDateTime)).append("\n");
    sb.append("    inboxCount: ").append(toIndentedString(inboxCount)).append("\n");
    sb.append("    spamCount: ").append(toIndentedString(spamCount)).append("\n");
    sb.append("    readRate: ").append(toIndentedString(readRate)).append("\n");
    sb.append("    deleteRate: ").append(toIndentedString(deleteRate)).append("\n");
    sb.append("    readDeleteRate: ").append(toIndentedString(readDeleteRate)).append("\n");
    sb.append("    projectedVolume: ").append(toIndentedString(projectedVolume)).append("\n");
    sb.append("    esps: ").append(toIndentedString(esps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CampaignId");
    openapiFields.add("ImageUrl");
    openapiFields.add("Subject");
    openapiFields.add("FromAddress");
    openapiFields.add("SendingIps");
    openapiFields.add("FirstSeenDateTime");
    openapiFields.add("LastSeenDateTime");
    openapiFields.add("InboxCount");
    openapiFields.add("SpamCount");
    openapiFields.add("ReadRate");
    openapiFields.add("DeleteRate");
    openapiFields.add("ReadDeleteRate");
    openapiFields.add("ProjectedVolume");
    openapiFields.add("Esps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainDeliverabilityCampaign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainDeliverabilityCampaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainDeliverabilityCampaign is not found in the empty JSON string", DomainDeliverabilityCampaign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainDeliverabilityCampaign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainDeliverabilityCampaign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CampaignId`
      if (jsonObj.get("CampaignId") != null && !jsonObj.get("CampaignId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CampaignId"));
      }
      // validate the optional field `ImageUrl`
      if (jsonObj.get("ImageUrl") != null && !jsonObj.get("ImageUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageUrl"));
      }
      // validate the optional field `Subject`
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subject"));
      }
      // validate the optional field `FromAddress`
      if (jsonObj.get("FromAddress") != null && !jsonObj.get("FromAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FromAddress"));
      }
      // validate the optional field `SendingIps`
      if (jsonObj.get("SendingIps") != null && !jsonObj.get("SendingIps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SendingIps"));
      }
      // validate the optional field `FirstSeenDateTime`
      if (jsonObj.get("FirstSeenDateTime") != null && !jsonObj.get("FirstSeenDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FirstSeenDateTime"));
      }
      // validate the optional field `LastSeenDateTime`
      if (jsonObj.get("LastSeenDateTime") != null && !jsonObj.get("LastSeenDateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastSeenDateTime"));
      }
      // validate the optional field `InboxCount`
      if (jsonObj.get("InboxCount") != null && !jsonObj.get("InboxCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InboxCount"));
      }
      // validate the optional field `SpamCount`
      if (jsonObj.get("SpamCount") != null && !jsonObj.get("SpamCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SpamCount"));
      }
      // validate the optional field `ReadRate`
      if (jsonObj.get("ReadRate") != null && !jsonObj.get("ReadRate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ReadRate"));
      }
      // validate the optional field `DeleteRate`
      if (jsonObj.get("DeleteRate") != null && !jsonObj.get("DeleteRate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("DeleteRate"));
      }
      // validate the optional field `ReadDeleteRate`
      if (jsonObj.get("ReadDeleteRate") != null && !jsonObj.get("ReadDeleteRate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ReadDeleteRate"));
      }
      // validate the optional field `ProjectedVolume`
      if (jsonObj.get("ProjectedVolume") != null && !jsonObj.get("ProjectedVolume").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProjectedVolume"));
      }
      // validate the optional field `Esps`
      if (jsonObj.get("Esps") != null && !jsonObj.get("Esps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Esps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainDeliverabilityCampaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainDeliverabilityCampaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainDeliverabilityCampaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainDeliverabilityCampaign.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainDeliverabilityCampaign>() {
           @Override
           public void write(JsonWriter out, DomainDeliverabilityCampaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainDeliverabilityCampaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainDeliverabilityCampaign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainDeliverabilityCampaign
   * @throws IOException if the JSON string is invalid with respect to DomainDeliverabilityCampaign
   */
  public static DomainDeliverabilityCampaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainDeliverabilityCampaign.class);
  }

  /**
   * Convert an instance of DomainDeliverabilityCampaign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

