/*
 * Amazon Pinpoint Email Service
 * <fullname>Amazon Pinpoint Email Service</fullname> <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides information about the Amazon Pinpoint Email API (version 1.0), including supported operations, data types, parameters, and schemas.</p> <p> <a href=\"https://aws.amazon.com/pinpoint\">Amazon Pinpoint</a> is an AWS service that you can use to engage with your customers across multiple messaging channels. You can use Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The Amazon Pinpoint Email API provides programmatic access to options that are unique to the email channel and supplement the options provided by the Amazon Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\">Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i> provides tutorials, code samples, and procedures that demonstrate how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into mobile apps and other types of applications. The guide also provides information about key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply to using the service.</p> <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint for each of these Regions. For a list of all the Regions and endpoints where the API is currently available, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region\">AWS Service Endpoints</a> in the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\">Managing AWS Regions</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones are physically isolated from each other, but are united by private, low-latency, high-throughput, and highly redundant network connections. These Availability Zones enable us to provide very high levels of availability and redundancy, while also minimizing latency. To learn more about the number of Availability Zones that are available in each Region, see <a href=\"http://aws.amazon.com/about-aws/global-infrastructure/\">AWS Global Infrastructure</a>.</p>
 *
 * The version of the OpenAPI document: 2018-07-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutConfigurationSetDeliveryOptionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:35.756955-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutConfigurationSetDeliveryOptionsRequest {
  /**
   * Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is &lt;code&gt;Require&lt;/code&gt;, messages are only delivered if a TLS connection can be established. If the value is &lt;code&gt;Optional&lt;/code&gt;, messages can be delivered in plain text if a TLS connection can&#39;t be established.
   */
  @JsonAdapter(TlsPolicyEnum.Adapter.class)
  public enum TlsPolicyEnum {
    REQUIRE("REQUIRE"),
    
    OPTIONAL("OPTIONAL");

    private String value;

    TlsPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TlsPolicyEnum fromValue(String value) {
      for (TlsPolicyEnum b : TlsPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TlsPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TlsPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TlsPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TlsPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TlsPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLS_POLICY = "TlsPolicy";
  @SerializedName(SERIALIZED_NAME_TLS_POLICY)
  private TlsPolicyEnum tlsPolicy;

  public static final String SERIALIZED_NAME_SENDING_POOL_NAME = "SendingPoolName";
  @SerializedName(SERIALIZED_NAME_SENDING_POOL_NAME)
  private String sendingPoolName;

  public PutConfigurationSetDeliveryOptionsRequest() {
  }

  public PutConfigurationSetDeliveryOptionsRequest tlsPolicy(TlsPolicyEnum tlsPolicy) {
    this.tlsPolicy = tlsPolicy;
    return this;
  }

  /**
   * Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is &lt;code&gt;Require&lt;/code&gt;, messages are only delivered if a TLS connection can be established. If the value is &lt;code&gt;Optional&lt;/code&gt;, messages can be delivered in plain text if a TLS connection can&#39;t be established.
   * @return tlsPolicy
   */
  @javax.annotation.Nullable
  public TlsPolicyEnum getTlsPolicy() {
    return tlsPolicy;
  }

  public void setTlsPolicy(TlsPolicyEnum tlsPolicy) {
    this.tlsPolicy = tlsPolicy;
  }


  public PutConfigurationSetDeliveryOptionsRequest sendingPoolName(String sendingPoolName) {
    this.sendingPoolName = sendingPoolName;
    return this;
  }

  /**
   * The name of the dedicated IP pool that you want to associate with the configuration set.
   * @return sendingPoolName
   */
  @javax.annotation.Nullable
  public String getSendingPoolName() {
    return sendingPoolName;
  }

  public void setSendingPoolName(String sendingPoolName) {
    this.sendingPoolName = sendingPoolName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutConfigurationSetDeliveryOptionsRequest putConfigurationSetDeliveryOptionsRequest = (PutConfigurationSetDeliveryOptionsRequest) o;
    return Objects.equals(this.tlsPolicy, putConfigurationSetDeliveryOptionsRequest.tlsPolicy) &&
        Objects.equals(this.sendingPoolName, putConfigurationSetDeliveryOptionsRequest.sendingPoolName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tlsPolicy, sendingPoolName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutConfigurationSetDeliveryOptionsRequest {\n");
    sb.append("    tlsPolicy: ").append(toIndentedString(tlsPolicy)).append("\n");
    sb.append("    sendingPoolName: ").append(toIndentedString(sendingPoolName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TlsPolicy");
    openapiFields.add("SendingPoolName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutConfigurationSetDeliveryOptionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutConfigurationSetDeliveryOptionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutConfigurationSetDeliveryOptionsRequest is not found in the empty JSON string", PutConfigurationSetDeliveryOptionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutConfigurationSetDeliveryOptionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutConfigurationSetDeliveryOptionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TlsPolicy") != null && !jsonObj.get("TlsPolicy").isJsonNull()) && !jsonObj.get("TlsPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TlsPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TlsPolicy").toString()));
      }
      // validate the optional field `TlsPolicy`
      if (jsonObj.get("TlsPolicy") != null && !jsonObj.get("TlsPolicy").isJsonNull()) {
        TlsPolicyEnum.validateJsonElement(jsonObj.get("TlsPolicy"));
      }
      if ((jsonObj.get("SendingPoolName") != null && !jsonObj.get("SendingPoolName").isJsonNull()) && !jsonObj.get("SendingPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SendingPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SendingPoolName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutConfigurationSetDeliveryOptionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutConfigurationSetDeliveryOptionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutConfigurationSetDeliveryOptionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutConfigurationSetDeliveryOptionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutConfigurationSetDeliveryOptionsRequest>() {
           @Override
           public void write(JsonWriter out, PutConfigurationSetDeliveryOptionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutConfigurationSetDeliveryOptionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutConfigurationSetDeliveryOptionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutConfigurationSetDeliveryOptionsRequest
   * @throws IOException if the JSON string is invalid with respect to PutConfigurationSetDeliveryOptionsRequest
   */
  public static PutConfigurationSetDeliveryOptionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutConfigurationSetDeliveryOptionsRequest.class);
  }

  /**
   * Convert an instance of PutConfigurationSetDeliveryOptionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

