/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetDataQualityRuleRecommendationRunResponseDataSource;
import org.openapitools.client.model.TaskStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDataQualityRuleRecommendationRunResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDataQualityRuleRecommendationRunResponse {
  public static final String SERIALIZED_NAME_RUN_ID = "RunId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private GetDataQualityRuleRecommendationRunResponseDataSource dataSource;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_NUMBER_OF_WORKERS = "NumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WORKERS)
  private Integer numberOfWorkers;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TaskStatusType status;

  public static final String SERIALIZED_NAME_ERROR_STRING = "ErrorString";
  @SerializedName(SERIALIZED_NAME_ERROR_STRING)
  private String errorString;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "LastModifiedOn";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private OffsetDateTime lastModifiedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "CompletedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_EXECUTION_TIME = "ExecutionTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIME)
  private Integer executionTime;

  public static final String SERIALIZED_NAME_RECOMMENDED_RULESET = "RecommendedRuleset";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_RULESET)
  private String recommendedRuleset;

  public static final String SERIALIZED_NAME_CREATED_RULESET_NAME = "CreatedRulesetName";
  @SerializedName(SERIALIZED_NAME_CREATED_RULESET_NAME)
  private String createdRulesetName;

  public GetDataQualityRuleRecommendationRunResponse() {
  }

  public GetDataQualityRuleRecommendationRunResponse runId(String runId) {
    this.runId = runId;
    return this;
  }

  /**
   * Get runId
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public GetDataQualityRuleRecommendationRunResponse dataSource(GetDataQualityRuleRecommendationRunResponseDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public GetDataQualityRuleRecommendationRunResponseDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(GetDataQualityRuleRecommendationRunResponseDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public GetDataQualityRuleRecommendationRunResponse role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public GetDataQualityRuleRecommendationRunResponse numberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
    return this;
  }

  /**
   * Get numberOfWorkers
   * @return numberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWorkers() {
    return numberOfWorkers;
  }

  public void setNumberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
  }


  public GetDataQualityRuleRecommendationRunResponse timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public GetDataQualityRuleRecommendationRunResponse status(TaskStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TaskStatusType getStatus() {
    return status;
  }

  public void setStatus(TaskStatusType status) {
    this.status = status;
  }


  public GetDataQualityRuleRecommendationRunResponse errorString(String errorString) {
    this.errorString = errorString;
    return this;
  }

  /**
   * Get errorString
   * @return errorString
   */
  @javax.annotation.Nullable
  public String getErrorString() {
    return errorString;
  }

  public void setErrorString(String errorString) {
    this.errorString = errorString;
  }


  public GetDataQualityRuleRecommendationRunResponse startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public GetDataQualityRuleRecommendationRunResponse lastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

  /**
   * Get lastModifiedOn
   * @return lastModifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedOn() {
    return lastModifiedOn;
  }

  public void setLastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public GetDataQualityRuleRecommendationRunResponse completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public GetDataQualityRuleRecommendationRunResponse executionTime(Integer executionTime) {
    this.executionTime = executionTime;
    return this;
  }

  /**
   * Get executionTime
   * @return executionTime
   */
  @javax.annotation.Nullable
  public Integer getExecutionTime() {
    return executionTime;
  }

  public void setExecutionTime(Integer executionTime) {
    this.executionTime = executionTime;
  }


  public GetDataQualityRuleRecommendationRunResponse recommendedRuleset(String recommendedRuleset) {
    this.recommendedRuleset = recommendedRuleset;
    return this;
  }

  /**
   * Get recommendedRuleset
   * @return recommendedRuleset
   */
  @javax.annotation.Nullable
  public String getRecommendedRuleset() {
    return recommendedRuleset;
  }

  public void setRecommendedRuleset(String recommendedRuleset) {
    this.recommendedRuleset = recommendedRuleset;
  }


  public GetDataQualityRuleRecommendationRunResponse createdRulesetName(String createdRulesetName) {
    this.createdRulesetName = createdRulesetName;
    return this;
  }

  /**
   * Get createdRulesetName
   * @return createdRulesetName
   */
  @javax.annotation.Nullable
  public String getCreatedRulesetName() {
    return createdRulesetName;
  }

  public void setCreatedRulesetName(String createdRulesetName) {
    this.createdRulesetName = createdRulesetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDataQualityRuleRecommendationRunResponse getDataQualityRuleRecommendationRunResponse = (GetDataQualityRuleRecommendationRunResponse) o;
    return Objects.equals(this.runId, getDataQualityRuleRecommendationRunResponse.runId) &&
        Objects.equals(this.dataSource, getDataQualityRuleRecommendationRunResponse.dataSource) &&
        Objects.equals(this.role, getDataQualityRuleRecommendationRunResponse.role) &&
        Objects.equals(this.numberOfWorkers, getDataQualityRuleRecommendationRunResponse.numberOfWorkers) &&
        Objects.equals(this.timeout, getDataQualityRuleRecommendationRunResponse.timeout) &&
        Objects.equals(this.status, getDataQualityRuleRecommendationRunResponse.status) &&
        Objects.equals(this.errorString, getDataQualityRuleRecommendationRunResponse.errorString) &&
        Objects.equals(this.startedOn, getDataQualityRuleRecommendationRunResponse.startedOn) &&
        Objects.equals(this.lastModifiedOn, getDataQualityRuleRecommendationRunResponse.lastModifiedOn) &&
        Objects.equals(this.completedOn, getDataQualityRuleRecommendationRunResponse.completedOn) &&
        Objects.equals(this.executionTime, getDataQualityRuleRecommendationRunResponse.executionTime) &&
        Objects.equals(this.recommendedRuleset, getDataQualityRuleRecommendationRunResponse.recommendedRuleset) &&
        Objects.equals(this.createdRulesetName, getDataQualityRuleRecommendationRunResponse.createdRulesetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, dataSource, role, numberOfWorkers, timeout, status, errorString, startedOn, lastModifiedOn, completedOn, executionTime, recommendedRuleset, createdRulesetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDataQualityRuleRecommendationRunResponse {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    numberOfWorkers: ").append(toIndentedString(numberOfWorkers)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorString: ").append(toIndentedString(errorString)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    executionTime: ").append(toIndentedString(executionTime)).append("\n");
    sb.append("    recommendedRuleset: ").append(toIndentedString(recommendedRuleset)).append("\n");
    sb.append("    createdRulesetName: ").append(toIndentedString(createdRulesetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RunId");
    openapiFields.add("DataSource");
    openapiFields.add("Role");
    openapiFields.add("NumberOfWorkers");
    openapiFields.add("Timeout");
    openapiFields.add("Status");
    openapiFields.add("ErrorString");
    openapiFields.add("StartedOn");
    openapiFields.add("LastModifiedOn");
    openapiFields.add("CompletedOn");
    openapiFields.add("ExecutionTime");
    openapiFields.add("RecommendedRuleset");
    openapiFields.add("CreatedRulesetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDataQualityRuleRecommendationRunResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDataQualityRuleRecommendationRunResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDataQualityRuleRecommendationRunResponse is not found in the empty JSON string", GetDataQualityRuleRecommendationRunResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDataQualityRuleRecommendationRunResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDataQualityRuleRecommendationRunResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RunId`
      if (jsonObj.get("RunId") != null && !jsonObj.get("RunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RunId"));
      }
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        GetDataQualityRuleRecommendationRunResponseDataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
      // validate the optional field `Role`
      if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Role"));
      }
      // validate the optional field `NumberOfWorkers`
      if (jsonObj.get("NumberOfWorkers") != null && !jsonObj.get("NumberOfWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfWorkers"));
      }
      // validate the optional field `Timeout`
      if (jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Timeout"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        TaskStatusType.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorString`
      if (jsonObj.get("ErrorString") != null && !jsonObj.get("ErrorString").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorString"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `LastModifiedOn`
      if (jsonObj.get("LastModifiedOn") != null && !jsonObj.get("LastModifiedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedOn"));
      }
      // validate the optional field `CompletedOn`
      if (jsonObj.get("CompletedOn") != null && !jsonObj.get("CompletedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedOn"));
      }
      // validate the optional field `ExecutionTime`
      if (jsonObj.get("ExecutionTime") != null && !jsonObj.get("ExecutionTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ExecutionTime"));
      }
      // validate the optional field `RecommendedRuleset`
      if (jsonObj.get("RecommendedRuleset") != null && !jsonObj.get("RecommendedRuleset").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendedRuleset"));
      }
      // validate the optional field `CreatedRulesetName`
      if (jsonObj.get("CreatedRulesetName") != null && !jsonObj.get("CreatedRulesetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedRulesetName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDataQualityRuleRecommendationRunResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDataQualityRuleRecommendationRunResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDataQualityRuleRecommendationRunResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDataQualityRuleRecommendationRunResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDataQualityRuleRecommendationRunResponse>() {
           @Override
           public void write(JsonWriter out, GetDataQualityRuleRecommendationRunResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDataQualityRuleRecommendationRunResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDataQualityRuleRecommendationRunResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDataQualityRuleRecommendationRunResponse
   * @throws IOException if the JSON string is invalid with respect to GetDataQualityRuleRecommendationRunResponse
   */
  public static GetDataQualityRuleRecommendationRunResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDataQualityRuleRecommendationRunResponse.class);
  }

  /**
   * Convert an instance of GetDataQualityRuleRecommendationRunResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

