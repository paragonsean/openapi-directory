/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UpdateDevEndpointRequestCustomLibraries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDevEndpointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDevEndpointRequest {
  public static final String SERIALIZED_NAME_ENDPOINT_NAME = "EndpointName";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_NAME)
  private String endpointName;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "PublicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_ADD_PUBLIC_KEYS = "AddPublicKeys";
  @SerializedName(SERIALIZED_NAME_ADD_PUBLIC_KEYS)
  private List addPublicKeys;

  public static final String SERIALIZED_NAME_DELETE_PUBLIC_KEYS = "DeletePublicKeys";
  @SerializedName(SERIALIZED_NAME_DELETE_PUBLIC_KEYS)
  private List deletePublicKeys;

  public static final String SERIALIZED_NAME_CUSTOM_LIBRARIES = "CustomLibraries";
  @SerializedName(SERIALIZED_NAME_CUSTOM_LIBRARIES)
  private UpdateDevEndpointRequestCustomLibraries customLibraries;

  public static final String SERIALIZED_NAME_UPDATE_ETL_LIBRARIES = "UpdateEtlLibraries";
  @SerializedName(SERIALIZED_NAME_UPDATE_ETL_LIBRARIES)
  private Boolean updateEtlLibraries;

  public static final String SERIALIZED_NAME_DELETE_ARGUMENTS = "DeleteArguments";
  @SerializedName(SERIALIZED_NAME_DELETE_ARGUMENTS)
  private List deleteArguments;

  public static final String SERIALIZED_NAME_ADD_ARGUMENTS = "AddArguments";
  @SerializedName(SERIALIZED_NAME_ADD_ARGUMENTS)
  private Map addArguments;

  public UpdateDevEndpointRequest() {
  }

  public UpdateDevEndpointRequest endpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

  /**
   * Get endpointName
   * @return endpointName
   */
  @javax.annotation.Nonnull
  public String getEndpointName() {
    return endpointName;
  }

  public void setEndpointName(String endpointName) {
    this.endpointName = endpointName;
  }


  public UpdateDevEndpointRequest publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public UpdateDevEndpointRequest addPublicKeys(List addPublicKeys) {
    this.addPublicKeys = addPublicKeys;
    return this;
  }

  /**
   * Get addPublicKeys
   * @return addPublicKeys
   */
  @javax.annotation.Nullable
  public List getAddPublicKeys() {
    return addPublicKeys;
  }

  public void setAddPublicKeys(List addPublicKeys) {
    this.addPublicKeys = addPublicKeys;
  }


  public UpdateDevEndpointRequest deletePublicKeys(List deletePublicKeys) {
    this.deletePublicKeys = deletePublicKeys;
    return this;
  }

  /**
   * Get deletePublicKeys
   * @return deletePublicKeys
   */
  @javax.annotation.Nullable
  public List getDeletePublicKeys() {
    return deletePublicKeys;
  }

  public void setDeletePublicKeys(List deletePublicKeys) {
    this.deletePublicKeys = deletePublicKeys;
  }


  public UpdateDevEndpointRequest customLibraries(UpdateDevEndpointRequestCustomLibraries customLibraries) {
    this.customLibraries = customLibraries;
    return this;
  }

  /**
   * Get customLibraries
   * @return customLibraries
   */
  @javax.annotation.Nullable
  public UpdateDevEndpointRequestCustomLibraries getCustomLibraries() {
    return customLibraries;
  }

  public void setCustomLibraries(UpdateDevEndpointRequestCustomLibraries customLibraries) {
    this.customLibraries = customLibraries;
  }


  public UpdateDevEndpointRequest updateEtlLibraries(Boolean updateEtlLibraries) {
    this.updateEtlLibraries = updateEtlLibraries;
    return this;
  }

  /**
   * Get updateEtlLibraries
   * @return updateEtlLibraries
   */
  @javax.annotation.Nullable
  public Boolean getUpdateEtlLibraries() {
    return updateEtlLibraries;
  }

  public void setUpdateEtlLibraries(Boolean updateEtlLibraries) {
    this.updateEtlLibraries = updateEtlLibraries;
  }


  public UpdateDevEndpointRequest deleteArguments(List deleteArguments) {
    this.deleteArguments = deleteArguments;
    return this;
  }

  /**
   * Get deleteArguments
   * @return deleteArguments
   */
  @javax.annotation.Nullable
  public List getDeleteArguments() {
    return deleteArguments;
  }

  public void setDeleteArguments(List deleteArguments) {
    this.deleteArguments = deleteArguments;
  }


  public UpdateDevEndpointRequest addArguments(Map addArguments) {
    this.addArguments = addArguments;
    return this;
  }

  /**
   * Get addArguments
   * @return addArguments
   */
  @javax.annotation.Nullable
  public Map getAddArguments() {
    return addArguments;
  }

  public void setAddArguments(Map addArguments) {
    this.addArguments = addArguments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDevEndpointRequest updateDevEndpointRequest = (UpdateDevEndpointRequest) o;
    return Objects.equals(this.endpointName, updateDevEndpointRequest.endpointName) &&
        Objects.equals(this.publicKey, updateDevEndpointRequest.publicKey) &&
        Objects.equals(this.addPublicKeys, updateDevEndpointRequest.addPublicKeys) &&
        Objects.equals(this.deletePublicKeys, updateDevEndpointRequest.deletePublicKeys) &&
        Objects.equals(this.customLibraries, updateDevEndpointRequest.customLibraries) &&
        Objects.equals(this.updateEtlLibraries, updateDevEndpointRequest.updateEtlLibraries) &&
        Objects.equals(this.deleteArguments, updateDevEndpointRequest.deleteArguments) &&
        Objects.equals(this.addArguments, updateDevEndpointRequest.addArguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointName, publicKey, addPublicKeys, deletePublicKeys, customLibraries, updateEtlLibraries, deleteArguments, addArguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDevEndpointRequest {\n");
    sb.append("    endpointName: ").append(toIndentedString(endpointName)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    addPublicKeys: ").append(toIndentedString(addPublicKeys)).append("\n");
    sb.append("    deletePublicKeys: ").append(toIndentedString(deletePublicKeys)).append("\n");
    sb.append("    customLibraries: ").append(toIndentedString(customLibraries)).append("\n");
    sb.append("    updateEtlLibraries: ").append(toIndentedString(updateEtlLibraries)).append("\n");
    sb.append("    deleteArguments: ").append(toIndentedString(deleteArguments)).append("\n");
    sb.append("    addArguments: ").append(toIndentedString(addArguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndpointName");
    openapiFields.add("PublicKey");
    openapiFields.add("AddPublicKeys");
    openapiFields.add("DeletePublicKeys");
    openapiFields.add("CustomLibraries");
    openapiFields.add("UpdateEtlLibraries");
    openapiFields.add("DeleteArguments");
    openapiFields.add("AddArguments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EndpointName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDevEndpointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDevEndpointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDevEndpointRequest is not found in the empty JSON string", UpdateDevEndpointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDevEndpointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDevEndpointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDevEndpointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EndpointName`
      String.validateJsonElement(jsonObj.get("EndpointName"));
      // validate the optional field `PublicKey`
      if (jsonObj.get("PublicKey") != null && !jsonObj.get("PublicKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicKey"));
      }
      // validate the optional field `AddPublicKeys`
      if (jsonObj.get("AddPublicKeys") != null && !jsonObj.get("AddPublicKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AddPublicKeys"));
      }
      // validate the optional field `DeletePublicKeys`
      if (jsonObj.get("DeletePublicKeys") != null && !jsonObj.get("DeletePublicKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeletePublicKeys"));
      }
      // validate the optional field `CustomLibraries`
      if (jsonObj.get("CustomLibraries") != null && !jsonObj.get("CustomLibraries").isJsonNull()) {
        UpdateDevEndpointRequestCustomLibraries.validateJsonElement(jsonObj.get("CustomLibraries"));
      }
      // validate the optional field `UpdateEtlLibraries`
      if (jsonObj.get("UpdateEtlLibraries") != null && !jsonObj.get("UpdateEtlLibraries").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UpdateEtlLibraries"));
      }
      // validate the optional field `DeleteArguments`
      if (jsonObj.get("DeleteArguments") != null && !jsonObj.get("DeleteArguments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeleteArguments"));
      }
      // validate the optional field `AddArguments`
      if (jsonObj.get("AddArguments") != null && !jsonObj.get("AddArguments").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AddArguments"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDevEndpointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDevEndpointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDevEndpointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDevEndpointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDevEndpointRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDevEndpointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDevEndpointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDevEndpointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDevEndpointRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDevEndpointRequest
   */
  public static UpdateDevEndpointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDevEndpointRequest.class);
  }

  /**
   * Convert an instance of UpdateDevEndpointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

