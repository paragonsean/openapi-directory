/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Confusion_matrix\&quot;&gt;Confusion matrix&lt;/a&gt; in Wikipedia.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfusionMatrix {
  public static final String SERIALIZED_NAME_NUM_TRUE_POSITIVES = "NumTruePositives";
  @SerializedName(SERIALIZED_NAME_NUM_TRUE_POSITIVES)
  private Integer numTruePositives;

  public static final String SERIALIZED_NAME_NUM_FALSE_POSITIVES = "NumFalsePositives";
  @SerializedName(SERIALIZED_NAME_NUM_FALSE_POSITIVES)
  private Integer numFalsePositives;

  public static final String SERIALIZED_NAME_NUM_TRUE_NEGATIVES = "NumTrueNegatives";
  @SerializedName(SERIALIZED_NAME_NUM_TRUE_NEGATIVES)
  private Integer numTrueNegatives;

  public static final String SERIALIZED_NAME_NUM_FALSE_NEGATIVES = "NumFalseNegatives";
  @SerializedName(SERIALIZED_NAME_NUM_FALSE_NEGATIVES)
  private Integer numFalseNegatives;

  public ConfusionMatrix() {
  }

  public ConfusionMatrix numTruePositives(Integer numTruePositives) {
    this.numTruePositives = numTruePositives;
    return this;
  }

  /**
   * Get numTruePositives
   * @return numTruePositives
   */
  @javax.annotation.Nullable
  public Integer getNumTruePositives() {
    return numTruePositives;
  }

  public void setNumTruePositives(Integer numTruePositives) {
    this.numTruePositives = numTruePositives;
  }


  public ConfusionMatrix numFalsePositives(Integer numFalsePositives) {
    this.numFalsePositives = numFalsePositives;
    return this;
  }

  /**
   * Get numFalsePositives
   * @return numFalsePositives
   */
  @javax.annotation.Nullable
  public Integer getNumFalsePositives() {
    return numFalsePositives;
  }

  public void setNumFalsePositives(Integer numFalsePositives) {
    this.numFalsePositives = numFalsePositives;
  }


  public ConfusionMatrix numTrueNegatives(Integer numTrueNegatives) {
    this.numTrueNegatives = numTrueNegatives;
    return this;
  }

  /**
   * Get numTrueNegatives
   * @return numTrueNegatives
   */
  @javax.annotation.Nullable
  public Integer getNumTrueNegatives() {
    return numTrueNegatives;
  }

  public void setNumTrueNegatives(Integer numTrueNegatives) {
    this.numTrueNegatives = numTrueNegatives;
  }


  public ConfusionMatrix numFalseNegatives(Integer numFalseNegatives) {
    this.numFalseNegatives = numFalseNegatives;
    return this;
  }

  /**
   * Get numFalseNegatives
   * @return numFalseNegatives
   */
  @javax.annotation.Nullable
  public Integer getNumFalseNegatives() {
    return numFalseNegatives;
  }

  public void setNumFalseNegatives(Integer numFalseNegatives) {
    this.numFalseNegatives = numFalseNegatives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfusionMatrix confusionMatrix = (ConfusionMatrix) o;
    return Objects.equals(this.numTruePositives, confusionMatrix.numTruePositives) &&
        Objects.equals(this.numFalsePositives, confusionMatrix.numFalsePositives) &&
        Objects.equals(this.numTrueNegatives, confusionMatrix.numTrueNegatives) &&
        Objects.equals(this.numFalseNegatives, confusionMatrix.numFalseNegatives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numTruePositives, numFalsePositives, numTrueNegatives, numFalseNegatives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfusionMatrix {\n");
    sb.append("    numTruePositives: ").append(toIndentedString(numTruePositives)).append("\n");
    sb.append("    numFalsePositives: ").append(toIndentedString(numFalsePositives)).append("\n");
    sb.append("    numTrueNegatives: ").append(toIndentedString(numTrueNegatives)).append("\n");
    sb.append("    numFalseNegatives: ").append(toIndentedString(numFalseNegatives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NumTruePositives");
    openapiFields.add("NumFalsePositives");
    openapiFields.add("NumTrueNegatives");
    openapiFields.add("NumFalseNegatives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfusionMatrix
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfusionMatrix.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfusionMatrix is not found in the empty JSON string", ConfusionMatrix.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfusionMatrix.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfusionMatrix` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NumTruePositives`
      if (jsonObj.get("NumTruePositives") != null && !jsonObj.get("NumTruePositives").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumTruePositives"));
      }
      // validate the optional field `NumFalsePositives`
      if (jsonObj.get("NumFalsePositives") != null && !jsonObj.get("NumFalsePositives").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumFalsePositives"));
      }
      // validate the optional field `NumTrueNegatives`
      if (jsonObj.get("NumTrueNegatives") != null && !jsonObj.get("NumTrueNegatives").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumTrueNegatives"));
      }
      // validate the optional field `NumFalseNegatives`
      if (jsonObj.get("NumFalseNegatives") != null && !jsonObj.get("NumFalseNegatives").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumFalseNegatives"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfusionMatrix.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfusionMatrix' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfusionMatrix> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfusionMatrix.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfusionMatrix>() {
           @Override
           public void write(JsonWriter out, ConfusionMatrix value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfusionMatrix read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfusionMatrix given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfusionMatrix
   * @throws IOException if the JSON string is invalid with respect to ConfusionMatrix
   */
  public static ConfusionMatrix fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfusionMatrix.class);
  }

  /**
   * Convert an instance of ConfusionMatrix to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

