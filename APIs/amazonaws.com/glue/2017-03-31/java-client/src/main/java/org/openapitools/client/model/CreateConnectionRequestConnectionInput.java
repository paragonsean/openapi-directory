/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ConnectionInputPhysicalConnectionRequirements;
import org.openapitools.client.model.ConnectionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConnectionRequestConnectionInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConnectionRequestConnectionInput {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "ConnectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionType connectionType;

  public static final String SERIALIZED_NAME_MATCH_CRITERIA = "MatchCriteria";
  @SerializedName(SERIALIZED_NAME_MATCH_CRITERIA)
  private List matchCriteria;

  public static final String SERIALIZED_NAME_CONNECTION_PROPERTIES = "ConnectionProperties";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROPERTIES)
  private Map connectionProperties;

  public static final String SERIALIZED_NAME_PHYSICAL_CONNECTION_REQUIREMENTS = "PhysicalConnectionRequirements";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_CONNECTION_REQUIREMENTS)
  private ConnectionInputPhysicalConnectionRequirements physicalConnectionRequirements;

  public CreateConnectionRequestConnectionInput() {
  }

  public CreateConnectionRequestConnectionInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConnectionRequestConnectionInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateConnectionRequestConnectionInput connectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nonnull
  public ConnectionType getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
  }


  public CreateConnectionRequestConnectionInput matchCriteria(List matchCriteria) {
    this.matchCriteria = matchCriteria;
    return this;
  }

  /**
   * Get matchCriteria
   * @return matchCriteria
   */
  @javax.annotation.Nullable
  public List getMatchCriteria() {
    return matchCriteria;
  }

  public void setMatchCriteria(List matchCriteria) {
    this.matchCriteria = matchCriteria;
  }


  public CreateConnectionRequestConnectionInput connectionProperties(Map connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

  /**
   * Get connectionProperties
   * @return connectionProperties
   */
  @javax.annotation.Nonnull
  public Map getConnectionProperties() {
    return connectionProperties;
  }

  public void setConnectionProperties(Map connectionProperties) {
    this.connectionProperties = connectionProperties;
  }


  public CreateConnectionRequestConnectionInput physicalConnectionRequirements(ConnectionInputPhysicalConnectionRequirements physicalConnectionRequirements) {
    this.physicalConnectionRequirements = physicalConnectionRequirements;
    return this;
  }

  /**
   * Get physicalConnectionRequirements
   * @return physicalConnectionRequirements
   */
  @javax.annotation.Nullable
  public ConnectionInputPhysicalConnectionRequirements getPhysicalConnectionRequirements() {
    return physicalConnectionRequirements;
  }

  public void setPhysicalConnectionRequirements(ConnectionInputPhysicalConnectionRequirements physicalConnectionRequirements) {
    this.physicalConnectionRequirements = physicalConnectionRequirements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConnectionRequestConnectionInput createConnectionRequestConnectionInput = (CreateConnectionRequestConnectionInput) o;
    return Objects.equals(this.name, createConnectionRequestConnectionInput.name) &&
        Objects.equals(this.description, createConnectionRequestConnectionInput.description) &&
        Objects.equals(this.connectionType, createConnectionRequestConnectionInput.connectionType) &&
        Objects.equals(this.matchCriteria, createConnectionRequestConnectionInput.matchCriteria) &&
        Objects.equals(this.connectionProperties, createConnectionRequestConnectionInput.connectionProperties) &&
        Objects.equals(this.physicalConnectionRequirements, createConnectionRequestConnectionInput.physicalConnectionRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, connectionType, matchCriteria, connectionProperties, physicalConnectionRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConnectionRequestConnectionInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    matchCriteria: ").append(toIndentedString(matchCriteria)).append("\n");
    sb.append("    connectionProperties: ").append(toIndentedString(connectionProperties)).append("\n");
    sb.append("    physicalConnectionRequirements: ").append(toIndentedString(physicalConnectionRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("ConnectionType");
    openapiFields.add("MatchCriteria");
    openapiFields.add("ConnectionProperties");
    openapiFields.add("PhysicalConnectionRequirements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("ConnectionType");
    openapiRequiredFields.add("ConnectionProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConnectionRequestConnectionInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConnectionRequestConnectionInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConnectionRequestConnectionInput is not found in the empty JSON string", CreateConnectionRequestConnectionInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConnectionRequestConnectionInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConnectionRequestConnectionInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConnectionRequestConnectionInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `ConnectionType`
      ConnectionType.validateJsonElement(jsonObj.get("ConnectionType"));
      // validate the optional field `MatchCriteria`
      if (jsonObj.get("MatchCriteria") != null && !jsonObj.get("MatchCriteria").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MatchCriteria"));
      }
      // validate the required field `ConnectionProperties`
      Map.validateJsonElement(jsonObj.get("ConnectionProperties"));
      // validate the optional field `PhysicalConnectionRequirements`
      if (jsonObj.get("PhysicalConnectionRequirements") != null && !jsonObj.get("PhysicalConnectionRequirements").isJsonNull()) {
        ConnectionInputPhysicalConnectionRequirements.validateJsonElement(jsonObj.get("PhysicalConnectionRequirements"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConnectionRequestConnectionInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConnectionRequestConnectionInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConnectionRequestConnectionInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConnectionRequestConnectionInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConnectionRequestConnectionInput>() {
           @Override
           public void write(JsonWriter out, CreateConnectionRequestConnectionInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConnectionRequestConnectionInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConnectionRequestConnectionInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConnectionRequestConnectionInput
   * @throws IOException if the JSON string is invalid with respect to CreateConnectionRequestConnectionInput
   */
  public static CreateConnectionRequestConnectionInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConnectionRequestConnectionInput.class);
  }

  /**
   * Convert an instance of CreateConnectionRequestConnectionInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

