/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StorageDescriptorSchemaReference;
import org.openapitools.client.model.StorageDescriptorSerdeInfo;
import org.openapitools.client.model.StorageDescriptorSkewedInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PartitionInputStorageDescriptor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionInputStorageDescriptor {
  public static final String SERIALIZED_NAME_COLUMNS = "Columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List columns;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ADDITIONAL_LOCATIONS = "AdditionalLocations";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LOCATIONS)
  private List additionalLocations;

  public static final String SERIALIZED_NAME_INPUT_FORMAT = "InputFormat";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT)
  private String inputFormat;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private String outputFormat;

  public static final String SERIALIZED_NAME_COMPRESSED = "Compressed";
  @SerializedName(SERIALIZED_NAME_COMPRESSED)
  private Boolean compressed;

  public static final String SERIALIZED_NAME_NUMBER_OF_BUCKETS = "NumberOfBuckets";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_BUCKETS)
  private Integer numberOfBuckets;

  public static final String SERIALIZED_NAME_SERDE_INFO = "SerdeInfo";
  @SerializedName(SERIALIZED_NAME_SERDE_INFO)
  private StorageDescriptorSerdeInfo serdeInfo;

  public static final String SERIALIZED_NAME_BUCKET_COLUMNS = "BucketColumns";
  @SerializedName(SERIALIZED_NAME_BUCKET_COLUMNS)
  private List bucketColumns;

  public static final String SERIALIZED_NAME_SORT_COLUMNS = "SortColumns";
  @SerializedName(SERIALIZED_NAME_SORT_COLUMNS)
  private List sortColumns;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_SKEWED_INFO = "SkewedInfo";
  @SerializedName(SERIALIZED_NAME_SKEWED_INFO)
  private StorageDescriptorSkewedInfo skewedInfo;

  public static final String SERIALIZED_NAME_STORED_AS_SUB_DIRECTORIES = "StoredAsSubDirectories";
  @SerializedName(SERIALIZED_NAME_STORED_AS_SUB_DIRECTORIES)
  private Boolean storedAsSubDirectories;

  public static final String SERIALIZED_NAME_SCHEMA_REFERENCE = "SchemaReference";
  @SerializedName(SERIALIZED_NAME_SCHEMA_REFERENCE)
  private StorageDescriptorSchemaReference schemaReference;

  public PartitionInputStorageDescriptor() {
  }

  public PartitionInputStorageDescriptor columns(List columns) {
    this.columns = columns;
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public List getColumns() {
    return columns;
  }

  public void setColumns(List columns) {
    this.columns = columns;
  }


  public PartitionInputStorageDescriptor location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public PartitionInputStorageDescriptor additionalLocations(List additionalLocations) {
    this.additionalLocations = additionalLocations;
    return this;
  }

  /**
   * Get additionalLocations
   * @return additionalLocations
   */
  @javax.annotation.Nullable
  public List getAdditionalLocations() {
    return additionalLocations;
  }

  public void setAdditionalLocations(List additionalLocations) {
    this.additionalLocations = additionalLocations;
  }


  public PartitionInputStorageDescriptor inputFormat(String inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  /**
   * Get inputFormat
   * @return inputFormat
   */
  @javax.annotation.Nullable
  public String getInputFormat() {
    return inputFormat;
  }

  public void setInputFormat(String inputFormat) {
    this.inputFormat = inputFormat;
  }


  public PartitionInputStorageDescriptor outputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nullable
  public String getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
  }


  public PartitionInputStorageDescriptor compressed(Boolean compressed) {
    this.compressed = compressed;
    return this;
  }

  /**
   * Get compressed
   * @return compressed
   */
  @javax.annotation.Nullable
  public Boolean getCompressed() {
    return compressed;
  }

  public void setCompressed(Boolean compressed) {
    this.compressed = compressed;
  }


  public PartitionInputStorageDescriptor numberOfBuckets(Integer numberOfBuckets) {
    this.numberOfBuckets = numberOfBuckets;
    return this;
  }

  /**
   * Get numberOfBuckets
   * @return numberOfBuckets
   */
  @javax.annotation.Nullable
  public Integer getNumberOfBuckets() {
    return numberOfBuckets;
  }

  public void setNumberOfBuckets(Integer numberOfBuckets) {
    this.numberOfBuckets = numberOfBuckets;
  }


  public PartitionInputStorageDescriptor serdeInfo(StorageDescriptorSerdeInfo serdeInfo) {
    this.serdeInfo = serdeInfo;
    return this;
  }

  /**
   * Get serdeInfo
   * @return serdeInfo
   */
  @javax.annotation.Nullable
  public StorageDescriptorSerdeInfo getSerdeInfo() {
    return serdeInfo;
  }

  public void setSerdeInfo(StorageDescriptorSerdeInfo serdeInfo) {
    this.serdeInfo = serdeInfo;
  }


  public PartitionInputStorageDescriptor bucketColumns(List bucketColumns) {
    this.bucketColumns = bucketColumns;
    return this;
  }

  /**
   * Get bucketColumns
   * @return bucketColumns
   */
  @javax.annotation.Nullable
  public List getBucketColumns() {
    return bucketColumns;
  }

  public void setBucketColumns(List bucketColumns) {
    this.bucketColumns = bucketColumns;
  }


  public PartitionInputStorageDescriptor sortColumns(List sortColumns) {
    this.sortColumns = sortColumns;
    return this;
  }

  /**
   * Get sortColumns
   * @return sortColumns
   */
  @javax.annotation.Nullable
  public List getSortColumns() {
    return sortColumns;
  }

  public void setSortColumns(List sortColumns) {
    this.sortColumns = sortColumns;
  }


  public PartitionInputStorageDescriptor parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public PartitionInputStorageDescriptor skewedInfo(StorageDescriptorSkewedInfo skewedInfo) {
    this.skewedInfo = skewedInfo;
    return this;
  }

  /**
   * Get skewedInfo
   * @return skewedInfo
   */
  @javax.annotation.Nullable
  public StorageDescriptorSkewedInfo getSkewedInfo() {
    return skewedInfo;
  }

  public void setSkewedInfo(StorageDescriptorSkewedInfo skewedInfo) {
    this.skewedInfo = skewedInfo;
  }


  public PartitionInputStorageDescriptor storedAsSubDirectories(Boolean storedAsSubDirectories) {
    this.storedAsSubDirectories = storedAsSubDirectories;
    return this;
  }

  /**
   * Get storedAsSubDirectories
   * @return storedAsSubDirectories
   */
  @javax.annotation.Nullable
  public Boolean getStoredAsSubDirectories() {
    return storedAsSubDirectories;
  }

  public void setStoredAsSubDirectories(Boolean storedAsSubDirectories) {
    this.storedAsSubDirectories = storedAsSubDirectories;
  }


  public PartitionInputStorageDescriptor schemaReference(StorageDescriptorSchemaReference schemaReference) {
    this.schemaReference = schemaReference;
    return this;
  }

  /**
   * Get schemaReference
   * @return schemaReference
   */
  @javax.annotation.Nullable
  public StorageDescriptorSchemaReference getSchemaReference() {
    return schemaReference;
  }

  public void setSchemaReference(StorageDescriptorSchemaReference schemaReference) {
    this.schemaReference = schemaReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionInputStorageDescriptor partitionInputStorageDescriptor = (PartitionInputStorageDescriptor) o;
    return Objects.equals(this.columns, partitionInputStorageDescriptor.columns) &&
        Objects.equals(this.location, partitionInputStorageDescriptor.location) &&
        Objects.equals(this.additionalLocations, partitionInputStorageDescriptor.additionalLocations) &&
        Objects.equals(this.inputFormat, partitionInputStorageDescriptor.inputFormat) &&
        Objects.equals(this.outputFormat, partitionInputStorageDescriptor.outputFormat) &&
        Objects.equals(this.compressed, partitionInputStorageDescriptor.compressed) &&
        Objects.equals(this.numberOfBuckets, partitionInputStorageDescriptor.numberOfBuckets) &&
        Objects.equals(this.serdeInfo, partitionInputStorageDescriptor.serdeInfo) &&
        Objects.equals(this.bucketColumns, partitionInputStorageDescriptor.bucketColumns) &&
        Objects.equals(this.sortColumns, partitionInputStorageDescriptor.sortColumns) &&
        Objects.equals(this.parameters, partitionInputStorageDescriptor.parameters) &&
        Objects.equals(this.skewedInfo, partitionInputStorageDescriptor.skewedInfo) &&
        Objects.equals(this.storedAsSubDirectories, partitionInputStorageDescriptor.storedAsSubDirectories) &&
        Objects.equals(this.schemaReference, partitionInputStorageDescriptor.schemaReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, location, additionalLocations, inputFormat, outputFormat, compressed, numberOfBuckets, serdeInfo, bucketColumns, sortColumns, parameters, skewedInfo, storedAsSubDirectories, schemaReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionInputStorageDescriptor {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    additionalLocations: ").append(toIndentedString(additionalLocations)).append("\n");
    sb.append("    inputFormat: ").append(toIndentedString(inputFormat)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    compressed: ").append(toIndentedString(compressed)).append("\n");
    sb.append("    numberOfBuckets: ").append(toIndentedString(numberOfBuckets)).append("\n");
    sb.append("    serdeInfo: ").append(toIndentedString(serdeInfo)).append("\n");
    sb.append("    bucketColumns: ").append(toIndentedString(bucketColumns)).append("\n");
    sb.append("    sortColumns: ").append(toIndentedString(sortColumns)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    skewedInfo: ").append(toIndentedString(skewedInfo)).append("\n");
    sb.append("    storedAsSubDirectories: ").append(toIndentedString(storedAsSubDirectories)).append("\n");
    sb.append("    schemaReference: ").append(toIndentedString(schemaReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Columns");
    openapiFields.add("Location");
    openapiFields.add("AdditionalLocations");
    openapiFields.add("InputFormat");
    openapiFields.add("OutputFormat");
    openapiFields.add("Compressed");
    openapiFields.add("NumberOfBuckets");
    openapiFields.add("SerdeInfo");
    openapiFields.add("BucketColumns");
    openapiFields.add("SortColumns");
    openapiFields.add("Parameters");
    openapiFields.add("SkewedInfo");
    openapiFields.add("StoredAsSubDirectories");
    openapiFields.add("SchemaReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionInputStorageDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionInputStorageDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionInputStorageDescriptor is not found in the empty JSON string", PartitionInputStorageDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionInputStorageDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionInputStorageDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Columns`
      if (jsonObj.get("Columns") != null && !jsonObj.get("Columns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Columns"));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Location"));
      }
      // validate the optional field `AdditionalLocations`
      if (jsonObj.get("AdditionalLocations") != null && !jsonObj.get("AdditionalLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalLocations"));
      }
      // validate the optional field `InputFormat`
      if (jsonObj.get("InputFormat") != null && !jsonObj.get("InputFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputFormat"));
      }
      // validate the optional field `OutputFormat`
      if (jsonObj.get("OutputFormat") != null && !jsonObj.get("OutputFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputFormat"));
      }
      // validate the optional field `Compressed`
      if (jsonObj.get("Compressed") != null && !jsonObj.get("Compressed").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Compressed"));
      }
      // validate the optional field `NumberOfBuckets`
      if (jsonObj.get("NumberOfBuckets") != null && !jsonObj.get("NumberOfBuckets").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfBuckets"));
      }
      // validate the optional field `SerdeInfo`
      if (jsonObj.get("SerdeInfo") != null && !jsonObj.get("SerdeInfo").isJsonNull()) {
        StorageDescriptorSerdeInfo.validateJsonElement(jsonObj.get("SerdeInfo"));
      }
      // validate the optional field `BucketColumns`
      if (jsonObj.get("BucketColumns") != null && !jsonObj.get("BucketColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BucketColumns"));
      }
      // validate the optional field `SortColumns`
      if (jsonObj.get("SortColumns") != null && !jsonObj.get("SortColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SortColumns"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `SkewedInfo`
      if (jsonObj.get("SkewedInfo") != null && !jsonObj.get("SkewedInfo").isJsonNull()) {
        StorageDescriptorSkewedInfo.validateJsonElement(jsonObj.get("SkewedInfo"));
      }
      // validate the optional field `StoredAsSubDirectories`
      if (jsonObj.get("StoredAsSubDirectories") != null && !jsonObj.get("StoredAsSubDirectories").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StoredAsSubDirectories"));
      }
      // validate the optional field `SchemaReference`
      if (jsonObj.get("SchemaReference") != null && !jsonObj.get("SchemaReference").isJsonNull()) {
        StorageDescriptorSchemaReference.validateJsonElement(jsonObj.get("SchemaReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionInputStorageDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionInputStorageDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionInputStorageDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionInputStorageDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionInputStorageDescriptor>() {
           @Override
           public void write(JsonWriter out, PartitionInputStorageDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionInputStorageDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionInputStorageDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionInputStorageDescriptor
   * @throws IOException if the JSON string is invalid with respect to PartitionInputStorageDescriptor
   */
  public static PartitionInputStorageDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionInputStorageDescriptor.class);
  }

  /**
   * Convert an instance of PartitionInputStorageDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

