/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Compatibility;
import org.openapitools.client.model.DataFormat;
import org.openapitools.client.model.SchemaStatus;
import org.openapitools.client.model.SchemaVersionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSchemaResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSchemaResponse {
  public static final String SERIALIZED_NAME_REGISTRY_NAME = "RegistryName";
  @SerializedName(SERIALIZED_NAME_REGISTRY_NAME)
  private String registryName;

  public static final String SERIALIZED_NAME_REGISTRY_ARN = "RegistryArn";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ARN)
  private String registryArn;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "SchemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_SCHEMA_ARN = "SchemaArn";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ARN)
  private String schemaArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DATA_FORMAT = "DataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormat dataFormat;

  public static final String SERIALIZED_NAME_COMPATIBILITY = "Compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private Compatibility compatibility;

  public static final String SERIALIZED_NAME_SCHEMA_CHECKPOINT = "SchemaCheckpoint";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CHECKPOINT)
  private Integer schemaCheckpoint;

  public static final String SERIALIZED_NAME_LATEST_SCHEMA_VERSION = "LatestSchemaVersion";
  @SerializedName(SERIALIZED_NAME_LATEST_SCHEMA_VERSION)
  private Integer latestSchemaVersion;

  public static final String SERIALIZED_NAME_NEXT_SCHEMA_VERSION = "NextSchemaVersion";
  @SerializedName(SERIALIZED_NAME_NEXT_SCHEMA_VERSION)
  private Integer nextSchemaVersion;

  public static final String SERIALIZED_NAME_SCHEMA_STATUS = "SchemaStatus";
  @SerializedName(SERIALIZED_NAME_SCHEMA_STATUS)
  private SchemaStatus schemaStatus;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION_ID = "SchemaVersionId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION_ID)
  private String schemaVersionId;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION_STATUS = "SchemaVersionStatus";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION_STATUS)
  private SchemaVersionStatus schemaVersionStatus;

  public CreateSchemaResponse() {
  }

  public CreateSchemaResponse registryName(String registryName) {
    this.registryName = registryName;
    return this;
  }

  /**
   * Get registryName
   * @return registryName
   */
  @javax.annotation.Nullable
  public String getRegistryName() {
    return registryName;
  }

  public void setRegistryName(String registryName) {
    this.registryName = registryName;
  }


  public CreateSchemaResponse registryArn(String registryArn) {
    this.registryArn = registryArn;
    return this;
  }

  /**
   * Get registryArn
   * @return registryArn
   */
  @javax.annotation.Nullable
  public String getRegistryArn() {
    return registryArn;
  }

  public void setRegistryArn(String registryArn) {
    this.registryArn = registryArn;
  }


  public CreateSchemaResponse schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Get schemaName
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public CreateSchemaResponse schemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
    return this;
  }

  /**
   * Get schemaArn
   * @return schemaArn
   */
  @javax.annotation.Nullable
  public String getSchemaArn() {
    return schemaArn;
  }

  public void setSchemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
  }


  public CreateSchemaResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateSchemaResponse dataFormat(DataFormat dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Get dataFormat
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public DataFormat getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormat dataFormat) {
    this.dataFormat = dataFormat;
  }


  public CreateSchemaResponse compatibility(Compatibility compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Get compatibility
   * @return compatibility
   */
  @javax.annotation.Nullable
  public Compatibility getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(Compatibility compatibility) {
    this.compatibility = compatibility;
  }


  public CreateSchemaResponse schemaCheckpoint(Integer schemaCheckpoint) {
    this.schemaCheckpoint = schemaCheckpoint;
    return this;
  }

  /**
   * Get schemaCheckpoint
   * @return schemaCheckpoint
   */
  @javax.annotation.Nullable
  public Integer getSchemaCheckpoint() {
    return schemaCheckpoint;
  }

  public void setSchemaCheckpoint(Integer schemaCheckpoint) {
    this.schemaCheckpoint = schemaCheckpoint;
  }


  public CreateSchemaResponse latestSchemaVersion(Integer latestSchemaVersion) {
    this.latestSchemaVersion = latestSchemaVersion;
    return this;
  }

  /**
   * Get latestSchemaVersion
   * @return latestSchemaVersion
   */
  @javax.annotation.Nullable
  public Integer getLatestSchemaVersion() {
    return latestSchemaVersion;
  }

  public void setLatestSchemaVersion(Integer latestSchemaVersion) {
    this.latestSchemaVersion = latestSchemaVersion;
  }


  public CreateSchemaResponse nextSchemaVersion(Integer nextSchemaVersion) {
    this.nextSchemaVersion = nextSchemaVersion;
    return this;
  }

  /**
   * Get nextSchemaVersion
   * @return nextSchemaVersion
   */
  @javax.annotation.Nullable
  public Integer getNextSchemaVersion() {
    return nextSchemaVersion;
  }

  public void setNextSchemaVersion(Integer nextSchemaVersion) {
    this.nextSchemaVersion = nextSchemaVersion;
  }


  public CreateSchemaResponse schemaStatus(SchemaStatus schemaStatus) {
    this.schemaStatus = schemaStatus;
    return this;
  }

  /**
   * Get schemaStatus
   * @return schemaStatus
   */
  @javax.annotation.Nullable
  public SchemaStatus getSchemaStatus() {
    return schemaStatus;
  }

  public void setSchemaStatus(SchemaStatus schemaStatus) {
    this.schemaStatus = schemaStatus;
  }


  public CreateSchemaResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateSchemaResponse schemaVersionId(String schemaVersionId) {
    this.schemaVersionId = schemaVersionId;
    return this;
  }

  /**
   * Get schemaVersionId
   * @return schemaVersionId
   */
  @javax.annotation.Nullable
  public String getSchemaVersionId() {
    return schemaVersionId;
  }

  public void setSchemaVersionId(String schemaVersionId) {
    this.schemaVersionId = schemaVersionId;
  }


  public CreateSchemaResponse schemaVersionStatus(SchemaVersionStatus schemaVersionStatus) {
    this.schemaVersionStatus = schemaVersionStatus;
    return this;
  }

  /**
   * Get schemaVersionStatus
   * @return schemaVersionStatus
   */
  @javax.annotation.Nullable
  public SchemaVersionStatus getSchemaVersionStatus() {
    return schemaVersionStatus;
  }

  public void setSchemaVersionStatus(SchemaVersionStatus schemaVersionStatus) {
    this.schemaVersionStatus = schemaVersionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSchemaResponse createSchemaResponse = (CreateSchemaResponse) o;
    return Objects.equals(this.registryName, createSchemaResponse.registryName) &&
        Objects.equals(this.registryArn, createSchemaResponse.registryArn) &&
        Objects.equals(this.schemaName, createSchemaResponse.schemaName) &&
        Objects.equals(this.schemaArn, createSchemaResponse.schemaArn) &&
        Objects.equals(this.description, createSchemaResponse.description) &&
        Objects.equals(this.dataFormat, createSchemaResponse.dataFormat) &&
        Objects.equals(this.compatibility, createSchemaResponse.compatibility) &&
        Objects.equals(this.schemaCheckpoint, createSchemaResponse.schemaCheckpoint) &&
        Objects.equals(this.latestSchemaVersion, createSchemaResponse.latestSchemaVersion) &&
        Objects.equals(this.nextSchemaVersion, createSchemaResponse.nextSchemaVersion) &&
        Objects.equals(this.schemaStatus, createSchemaResponse.schemaStatus) &&
        Objects.equals(this.tags, createSchemaResponse.tags) &&
        Objects.equals(this.schemaVersionId, createSchemaResponse.schemaVersionId) &&
        Objects.equals(this.schemaVersionStatus, createSchemaResponse.schemaVersionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryName, registryArn, schemaName, schemaArn, description, dataFormat, compatibility, schemaCheckpoint, latestSchemaVersion, nextSchemaVersion, schemaStatus, tags, schemaVersionId, schemaVersionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSchemaResponse {\n");
    sb.append("    registryName: ").append(toIndentedString(registryName)).append("\n");
    sb.append("    registryArn: ").append(toIndentedString(registryArn)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    schemaArn: ").append(toIndentedString(schemaArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    schemaCheckpoint: ").append(toIndentedString(schemaCheckpoint)).append("\n");
    sb.append("    latestSchemaVersion: ").append(toIndentedString(latestSchemaVersion)).append("\n");
    sb.append("    nextSchemaVersion: ").append(toIndentedString(nextSchemaVersion)).append("\n");
    sb.append("    schemaStatus: ").append(toIndentedString(schemaStatus)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    schemaVersionId: ").append(toIndentedString(schemaVersionId)).append("\n");
    sb.append("    schemaVersionStatus: ").append(toIndentedString(schemaVersionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RegistryName");
    openapiFields.add("RegistryArn");
    openapiFields.add("SchemaName");
    openapiFields.add("SchemaArn");
    openapiFields.add("Description");
    openapiFields.add("DataFormat");
    openapiFields.add("Compatibility");
    openapiFields.add("SchemaCheckpoint");
    openapiFields.add("LatestSchemaVersion");
    openapiFields.add("NextSchemaVersion");
    openapiFields.add("SchemaStatus");
    openapiFields.add("Tags");
    openapiFields.add("SchemaVersionId");
    openapiFields.add("SchemaVersionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSchemaResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSchemaResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSchemaResponse is not found in the empty JSON string", CreateSchemaResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSchemaResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSchemaResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RegistryName`
      if (jsonObj.get("RegistryName") != null && !jsonObj.get("RegistryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegistryName"));
      }
      // validate the optional field `RegistryArn`
      if (jsonObj.get("RegistryArn") != null && !jsonObj.get("RegistryArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegistryArn"));
      }
      // validate the optional field `SchemaName`
      if (jsonObj.get("SchemaName") != null && !jsonObj.get("SchemaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaName"));
      }
      // validate the optional field `SchemaArn`
      if (jsonObj.get("SchemaArn") != null && !jsonObj.get("SchemaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaArn"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DataFormat`
      if (jsonObj.get("DataFormat") != null && !jsonObj.get("DataFormat").isJsonNull()) {
        DataFormat.validateJsonElement(jsonObj.get("DataFormat"));
      }
      // validate the optional field `Compatibility`
      if (jsonObj.get("Compatibility") != null && !jsonObj.get("Compatibility").isJsonNull()) {
        Compatibility.validateJsonElement(jsonObj.get("Compatibility"));
      }
      // validate the optional field `SchemaCheckpoint`
      if (jsonObj.get("SchemaCheckpoint") != null && !jsonObj.get("SchemaCheckpoint").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SchemaCheckpoint"));
      }
      // validate the optional field `LatestSchemaVersion`
      if (jsonObj.get("LatestSchemaVersion") != null && !jsonObj.get("LatestSchemaVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LatestSchemaVersion"));
      }
      // validate the optional field `NextSchemaVersion`
      if (jsonObj.get("NextSchemaVersion") != null && !jsonObj.get("NextSchemaVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NextSchemaVersion"));
      }
      // validate the optional field `SchemaStatus`
      if (jsonObj.get("SchemaStatus") != null && !jsonObj.get("SchemaStatus").isJsonNull()) {
        SchemaStatus.validateJsonElement(jsonObj.get("SchemaStatus"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `SchemaVersionId`
      if (jsonObj.get("SchemaVersionId") != null && !jsonObj.get("SchemaVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaVersionId"));
      }
      // validate the optional field `SchemaVersionStatus`
      if (jsonObj.get("SchemaVersionStatus") != null && !jsonObj.get("SchemaVersionStatus").isJsonNull()) {
        SchemaVersionStatus.validateJsonElement(jsonObj.get("SchemaVersionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSchemaResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSchemaResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSchemaResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSchemaResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSchemaResponse>() {
           @Override
           public void write(JsonWriter out, CreateSchemaResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSchemaResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSchemaResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSchemaResponse
   * @throws IOException if the JSON string is invalid with respect to CreateSchemaResponse
   */
  public static CreateSchemaResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSchemaResponse.class);
  }

  /**
   * Convert an instance of CreateSchemaResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

