/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional connection options for the connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JDBCConnectorOptions {
  public static final String SERIALIZED_NAME_FILTER_PREDICATE = "FilterPredicate";
  @SerializedName(SERIALIZED_NAME_FILTER_PREDICATE)
  private String filterPredicate;

  public static final String SERIALIZED_NAME_PARTITION_COLUMN = "PartitionColumn";
  @SerializedName(SERIALIZED_NAME_PARTITION_COLUMN)
  private String partitionColumn;

  public static final String SERIALIZED_NAME_LOWER_BOUND = "LowerBound";
  @SerializedName(SERIALIZED_NAME_LOWER_BOUND)
  private Integer lowerBound;

  public static final String SERIALIZED_NAME_UPPER_BOUND = "UpperBound";
  @SerializedName(SERIALIZED_NAME_UPPER_BOUND)
  private Integer upperBound;

  public static final String SERIALIZED_NAME_NUM_PARTITIONS = "NumPartitions";
  @SerializedName(SERIALIZED_NAME_NUM_PARTITIONS)
  private Integer numPartitions;

  public static final String SERIALIZED_NAME_JOB_BOOKMARK_KEYS = "JobBookmarkKeys";
  @SerializedName(SERIALIZED_NAME_JOB_BOOKMARK_KEYS)
  private List jobBookmarkKeys;

  public static final String SERIALIZED_NAME_JOB_BOOKMARK_KEYS_SORT_ORDER = "JobBookmarkKeysSortOrder";
  @SerializedName(SERIALIZED_NAME_JOB_BOOKMARK_KEYS_SORT_ORDER)
  private String jobBookmarkKeysSortOrder;

  public static final String SERIALIZED_NAME_DATA_TYPE_MAPPING = "DataTypeMapping";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_MAPPING)
  private Map dataTypeMapping;

  public JDBCConnectorOptions() {
  }

  public JDBCConnectorOptions filterPredicate(String filterPredicate) {
    this.filterPredicate = filterPredicate;
    return this;
  }

  /**
   * Get filterPredicate
   * @return filterPredicate
   */
  @javax.annotation.Nullable
  public String getFilterPredicate() {
    return filterPredicate;
  }

  public void setFilterPredicate(String filterPredicate) {
    this.filterPredicate = filterPredicate;
  }


  public JDBCConnectorOptions partitionColumn(String partitionColumn) {
    this.partitionColumn = partitionColumn;
    return this;
  }

  /**
   * Get partitionColumn
   * @return partitionColumn
   */
  @javax.annotation.Nullable
  public String getPartitionColumn() {
    return partitionColumn;
  }

  public void setPartitionColumn(String partitionColumn) {
    this.partitionColumn = partitionColumn;
  }


  public JDBCConnectorOptions lowerBound(Integer lowerBound) {
    this.lowerBound = lowerBound;
    return this;
  }

  /**
   * Get lowerBound
   * @return lowerBound
   */
  @javax.annotation.Nullable
  public Integer getLowerBound() {
    return lowerBound;
  }

  public void setLowerBound(Integer lowerBound) {
    this.lowerBound = lowerBound;
  }


  public JDBCConnectorOptions upperBound(Integer upperBound) {
    this.upperBound = upperBound;
    return this;
  }

  /**
   * Get upperBound
   * @return upperBound
   */
  @javax.annotation.Nullable
  public Integer getUpperBound() {
    return upperBound;
  }

  public void setUpperBound(Integer upperBound) {
    this.upperBound = upperBound;
  }


  public JDBCConnectorOptions numPartitions(Integer numPartitions) {
    this.numPartitions = numPartitions;
    return this;
  }

  /**
   * Get numPartitions
   * @return numPartitions
   */
  @javax.annotation.Nullable
  public Integer getNumPartitions() {
    return numPartitions;
  }

  public void setNumPartitions(Integer numPartitions) {
    this.numPartitions = numPartitions;
  }


  public JDBCConnectorOptions jobBookmarkKeys(List jobBookmarkKeys) {
    this.jobBookmarkKeys = jobBookmarkKeys;
    return this;
  }

  /**
   * Get jobBookmarkKeys
   * @return jobBookmarkKeys
   */
  @javax.annotation.Nullable
  public List getJobBookmarkKeys() {
    return jobBookmarkKeys;
  }

  public void setJobBookmarkKeys(List jobBookmarkKeys) {
    this.jobBookmarkKeys = jobBookmarkKeys;
  }


  public JDBCConnectorOptions jobBookmarkKeysSortOrder(String jobBookmarkKeysSortOrder) {
    this.jobBookmarkKeysSortOrder = jobBookmarkKeysSortOrder;
    return this;
  }

  /**
   * Get jobBookmarkKeysSortOrder
   * @return jobBookmarkKeysSortOrder
   */
  @javax.annotation.Nullable
  public String getJobBookmarkKeysSortOrder() {
    return jobBookmarkKeysSortOrder;
  }

  public void setJobBookmarkKeysSortOrder(String jobBookmarkKeysSortOrder) {
    this.jobBookmarkKeysSortOrder = jobBookmarkKeysSortOrder;
  }


  public JDBCConnectorOptions dataTypeMapping(Map dataTypeMapping) {
    this.dataTypeMapping = dataTypeMapping;
    return this;
  }

  /**
   * Get dataTypeMapping
   * @return dataTypeMapping
   */
  @javax.annotation.Nullable
  public Map getDataTypeMapping() {
    return dataTypeMapping;
  }

  public void setDataTypeMapping(Map dataTypeMapping) {
    this.dataTypeMapping = dataTypeMapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JDBCConnectorOptions jdBCConnectorOptions = (JDBCConnectorOptions) o;
    return Objects.equals(this.filterPredicate, jdBCConnectorOptions.filterPredicate) &&
        Objects.equals(this.partitionColumn, jdBCConnectorOptions.partitionColumn) &&
        Objects.equals(this.lowerBound, jdBCConnectorOptions.lowerBound) &&
        Objects.equals(this.upperBound, jdBCConnectorOptions.upperBound) &&
        Objects.equals(this.numPartitions, jdBCConnectorOptions.numPartitions) &&
        Objects.equals(this.jobBookmarkKeys, jdBCConnectorOptions.jobBookmarkKeys) &&
        Objects.equals(this.jobBookmarkKeysSortOrder, jdBCConnectorOptions.jobBookmarkKeysSortOrder) &&
        Objects.equals(this.dataTypeMapping, jdBCConnectorOptions.dataTypeMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterPredicate, partitionColumn, lowerBound, upperBound, numPartitions, jobBookmarkKeys, jobBookmarkKeysSortOrder, dataTypeMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JDBCConnectorOptions {\n");
    sb.append("    filterPredicate: ").append(toIndentedString(filterPredicate)).append("\n");
    sb.append("    partitionColumn: ").append(toIndentedString(partitionColumn)).append("\n");
    sb.append("    lowerBound: ").append(toIndentedString(lowerBound)).append("\n");
    sb.append("    upperBound: ").append(toIndentedString(upperBound)).append("\n");
    sb.append("    numPartitions: ").append(toIndentedString(numPartitions)).append("\n");
    sb.append("    jobBookmarkKeys: ").append(toIndentedString(jobBookmarkKeys)).append("\n");
    sb.append("    jobBookmarkKeysSortOrder: ").append(toIndentedString(jobBookmarkKeysSortOrder)).append("\n");
    sb.append("    dataTypeMapping: ").append(toIndentedString(dataTypeMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FilterPredicate");
    openapiFields.add("PartitionColumn");
    openapiFields.add("LowerBound");
    openapiFields.add("UpperBound");
    openapiFields.add("NumPartitions");
    openapiFields.add("JobBookmarkKeys");
    openapiFields.add("JobBookmarkKeysSortOrder");
    openapiFields.add("DataTypeMapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JDBCConnectorOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JDBCConnectorOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JDBCConnectorOptions is not found in the empty JSON string", JDBCConnectorOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JDBCConnectorOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JDBCConnectorOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FilterPredicate`
      if (jsonObj.get("FilterPredicate") != null && !jsonObj.get("FilterPredicate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FilterPredicate"));
      }
      // validate the optional field `PartitionColumn`
      if (jsonObj.get("PartitionColumn") != null && !jsonObj.get("PartitionColumn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PartitionColumn"));
      }
      // validate the optional field `LowerBound`
      if (jsonObj.get("LowerBound") != null && !jsonObj.get("LowerBound").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LowerBound"));
      }
      // validate the optional field `UpperBound`
      if (jsonObj.get("UpperBound") != null && !jsonObj.get("UpperBound").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UpperBound"));
      }
      // validate the optional field `NumPartitions`
      if (jsonObj.get("NumPartitions") != null && !jsonObj.get("NumPartitions").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumPartitions"));
      }
      // validate the optional field `JobBookmarkKeys`
      if (jsonObj.get("JobBookmarkKeys") != null && !jsonObj.get("JobBookmarkKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("JobBookmarkKeys"));
      }
      // validate the optional field `JobBookmarkKeysSortOrder`
      if (jsonObj.get("JobBookmarkKeysSortOrder") != null && !jsonObj.get("JobBookmarkKeysSortOrder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobBookmarkKeysSortOrder"));
      }
      // validate the optional field `DataTypeMapping`
      if (jsonObj.get("DataTypeMapping") != null && !jsonObj.get("DataTypeMapping").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("DataTypeMapping"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JDBCConnectorOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JDBCConnectorOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JDBCConnectorOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JDBCConnectorOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<JDBCConnectorOptions>() {
           @Override
           public void write(JsonWriter out, JDBCConnectorOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JDBCConnectorOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JDBCConnectorOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JDBCConnectorOptions
   * @throws IOException if the JSON string is invalid with respect to JDBCConnectorOptions
   */
  public static JDBCConnectorOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JDBCConnectorOptions.class);
  }

  /**
   * Convert an instance of JDBCConnectorOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

