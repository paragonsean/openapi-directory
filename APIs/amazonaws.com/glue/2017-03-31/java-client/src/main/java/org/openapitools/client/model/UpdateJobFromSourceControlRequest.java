/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceControlAuthStrategy;
import org.openapitools.client.model.SourceControlProvider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateJobFromSourceControlRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateJobFromSourceControlRequest {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_PROVIDER = "Provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private SourceControlProvider provider;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "RepositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_REPOSITORY_OWNER = "RepositoryOwner";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_OWNER)
  private String repositoryOwner;

  public static final String SERIALIZED_NAME_BRANCH_NAME = "BranchName";
  @SerializedName(SERIALIZED_NAME_BRANCH_NAME)
  private String branchName;

  public static final String SERIALIZED_NAME_FOLDER = "Folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_COMMIT_ID = "CommitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_AUTH_STRATEGY = "AuthStrategy";
  @SerializedName(SERIALIZED_NAME_AUTH_STRATEGY)
  private SourceControlAuthStrategy authStrategy;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "AuthToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public UpdateJobFromSourceControlRequest() {
  }

  public UpdateJobFromSourceControlRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public UpdateJobFromSourceControlRequest provider(SourceControlProvider provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public SourceControlProvider getProvider() {
    return provider;
  }

  public void setProvider(SourceControlProvider provider) {
    this.provider = provider;
  }


  public UpdateJobFromSourceControlRequest repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public UpdateJobFromSourceControlRequest repositoryOwner(String repositoryOwner) {
    this.repositoryOwner = repositoryOwner;
    return this;
  }

  /**
   * Get repositoryOwner
   * @return repositoryOwner
   */
  @javax.annotation.Nullable
  public String getRepositoryOwner() {
    return repositoryOwner;
  }

  public void setRepositoryOwner(String repositoryOwner) {
    this.repositoryOwner = repositoryOwner;
  }


  public UpdateJobFromSourceControlRequest branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  /**
   * Get branchName
   * @return branchName
   */
  @javax.annotation.Nullable
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }


  public UpdateJobFromSourceControlRequest folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Get folder
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public UpdateJobFromSourceControlRequest commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public UpdateJobFromSourceControlRequest authStrategy(SourceControlAuthStrategy authStrategy) {
    this.authStrategy = authStrategy;
    return this;
  }

  /**
   * Get authStrategy
   * @return authStrategy
   */
  @javax.annotation.Nullable
  public SourceControlAuthStrategy getAuthStrategy() {
    return authStrategy;
  }

  public void setAuthStrategy(SourceControlAuthStrategy authStrategy) {
    this.authStrategy = authStrategy;
  }


  public UpdateJobFromSourceControlRequest authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Get authToken
   * @return authToken
   */
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobFromSourceControlRequest updateJobFromSourceControlRequest = (UpdateJobFromSourceControlRequest) o;
    return Objects.equals(this.jobName, updateJobFromSourceControlRequest.jobName) &&
        Objects.equals(this.provider, updateJobFromSourceControlRequest.provider) &&
        Objects.equals(this.repositoryName, updateJobFromSourceControlRequest.repositoryName) &&
        Objects.equals(this.repositoryOwner, updateJobFromSourceControlRequest.repositoryOwner) &&
        Objects.equals(this.branchName, updateJobFromSourceControlRequest.branchName) &&
        Objects.equals(this.folder, updateJobFromSourceControlRequest.folder) &&
        Objects.equals(this.commitId, updateJobFromSourceControlRequest.commitId) &&
        Objects.equals(this.authStrategy, updateJobFromSourceControlRequest.authStrategy) &&
        Objects.equals(this.authToken, updateJobFromSourceControlRequest.authToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, provider, repositoryName, repositoryOwner, branchName, folder, commitId, authStrategy, authToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobFromSourceControlRequest {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    repositoryOwner: ").append(toIndentedString(repositoryOwner)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    authStrategy: ").append(toIndentedString(authStrategy)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("Provider");
    openapiFields.add("RepositoryName");
    openapiFields.add("RepositoryOwner");
    openapiFields.add("BranchName");
    openapiFields.add("Folder");
    openapiFields.add("CommitId");
    openapiFields.add("AuthStrategy");
    openapiFields.add("AuthToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateJobFromSourceControlRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateJobFromSourceControlRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobFromSourceControlRequest is not found in the empty JSON string", UpdateJobFromSourceControlRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateJobFromSourceControlRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateJobFromSourceControlRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `Provider`
      if (jsonObj.get("Provider") != null && !jsonObj.get("Provider").isJsonNull()) {
        SourceControlProvider.validateJsonElement(jsonObj.get("Provider"));
      }
      // validate the optional field `RepositoryName`
      if (jsonObj.get("RepositoryName") != null && !jsonObj.get("RepositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RepositoryName"));
      }
      // validate the optional field `RepositoryOwner`
      if (jsonObj.get("RepositoryOwner") != null && !jsonObj.get("RepositoryOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RepositoryOwner"));
      }
      // validate the optional field `BranchName`
      if (jsonObj.get("BranchName") != null && !jsonObj.get("BranchName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BranchName"));
      }
      // validate the optional field `Folder`
      if (jsonObj.get("Folder") != null && !jsonObj.get("Folder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Folder"));
      }
      // validate the optional field `CommitId`
      if (jsonObj.get("CommitId") != null && !jsonObj.get("CommitId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CommitId"));
      }
      // validate the optional field `AuthStrategy`
      if (jsonObj.get("AuthStrategy") != null && !jsonObj.get("AuthStrategy").isJsonNull()) {
        SourceControlAuthStrategy.validateJsonElement(jsonObj.get("AuthStrategy"));
      }
      // validate the optional field `AuthToken`
      if (jsonObj.get("AuthToken") != null && !jsonObj.get("AuthToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobFromSourceControlRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobFromSourceControlRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobFromSourceControlRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobFromSourceControlRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobFromSourceControlRequest>() {
           @Override
           public void write(JsonWriter out, UpdateJobFromSourceControlRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobFromSourceControlRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateJobFromSourceControlRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateJobFromSourceControlRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateJobFromSourceControlRequest
   */
  public static UpdateJobFromSourceControlRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobFromSourceControlRequest.class);
  }

  /**
   * Convert an instance of UpdateJobFromSourceControlRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

