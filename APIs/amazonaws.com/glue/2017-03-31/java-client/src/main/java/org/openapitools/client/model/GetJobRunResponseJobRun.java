/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ExecutionClass;
import org.openapitools.client.model.JobRunState;
import org.openapitools.client.model.StartJobRunRequestNotificationProperty;
import org.openapitools.client.model.WorkerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetJobRunResponseJobRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetJobRunResponseJobRun {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ATTEMPT = "Attempt";
  @SerializedName(SERIALIZED_NAME_ATTEMPT)
  private Integer attempt;

  public static final String SERIALIZED_NAME_PREVIOUS_RUN_ID = "PreviousRunId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RUN_ID)
  private String previousRunId;

  public static final String SERIALIZED_NAME_TRIGGER_NAME = "TriggerName";
  @SerializedName(SERIALIZED_NAME_TRIGGER_NAME)
  private String triggerName;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "LastModifiedOn";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private OffsetDateTime lastModifiedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "CompletedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_JOB_RUN_STATE = "JobRunState";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_STATE)
  private JobRunState jobRunState;

  public static final String SERIALIZED_NAME_ARGUMENTS = "Arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private Map arguments;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_PREDECESSOR_RUNS = "PredecessorRuns";
  @SerializedName(SERIALIZED_NAME_PREDECESSOR_RUNS)
  private List predecessorRuns;

  public static final String SERIALIZED_NAME_ALLOCATED_CAPACITY = "AllocatedCapacity";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_CAPACITY)
  private Integer allocatedCapacity;

  public static final String SERIALIZED_NAME_EXECUTION_TIME = "ExecutionTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIME)
  private Integer executionTime;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_MAX_CAPACITY = "MaxCapacity";
  @SerializedName(SERIALIZED_NAME_MAX_CAPACITY)
  private Double maxCapacity;

  public static final String SERIALIZED_NAME_WORKER_TYPE = "WorkerType";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE)
  private WorkerType workerType;

  public static final String SERIALIZED_NAME_NUMBER_OF_WORKERS = "NumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WORKERS)
  private Integer numberOfWorkers;

  public static final String SERIALIZED_NAME_SECURITY_CONFIGURATION = "SecurityConfiguration";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONFIGURATION)
  private String securityConfiguration;

  public static final String SERIALIZED_NAME_LOG_GROUP_NAME = "LogGroupName";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP_NAME)
  private String logGroupName;

  public static final String SERIALIZED_NAME_NOTIFICATION_PROPERTY = "NotificationProperty";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PROPERTY)
  private StartJobRunRequestNotificationProperty notificationProperty;

  public static final String SERIALIZED_NAME_GLUE_VERSION = "GlueVersion";
  @SerializedName(SERIALIZED_NAME_GLUE_VERSION)
  private String glueVersion;

  public static final String SERIALIZED_NAME_DP_U_SECONDS = "DPUSeconds";
  @SerializedName(SERIALIZED_NAME_DP_U_SECONDS)
  private Double dpUSeconds;

  public static final String SERIALIZED_NAME_EXECUTION_CLASS = "ExecutionClass";
  @SerializedName(SERIALIZED_NAME_EXECUTION_CLASS)
  private ExecutionClass executionClass;

  public GetJobRunResponseJobRun() {
  }

  public GetJobRunResponseJobRun id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetJobRunResponseJobRun attempt(Integer attempt) {
    this.attempt = attempt;
    return this;
  }

  /**
   * Get attempt
   * @return attempt
   */
  @javax.annotation.Nullable
  public Integer getAttempt() {
    return attempt;
  }

  public void setAttempt(Integer attempt) {
    this.attempt = attempt;
  }


  public GetJobRunResponseJobRun previousRunId(String previousRunId) {
    this.previousRunId = previousRunId;
    return this;
  }

  /**
   * Get previousRunId
   * @return previousRunId
   */
  @javax.annotation.Nullable
  public String getPreviousRunId() {
    return previousRunId;
  }

  public void setPreviousRunId(String previousRunId) {
    this.previousRunId = previousRunId;
  }


  public GetJobRunResponseJobRun triggerName(String triggerName) {
    this.triggerName = triggerName;
    return this;
  }

  /**
   * Get triggerName
   * @return triggerName
   */
  @javax.annotation.Nullable
  public String getTriggerName() {
    return triggerName;
  }

  public void setTriggerName(String triggerName) {
    this.triggerName = triggerName;
  }


  public GetJobRunResponseJobRun jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public GetJobRunResponseJobRun startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public GetJobRunResponseJobRun lastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

  /**
   * Get lastModifiedOn
   * @return lastModifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedOn() {
    return lastModifiedOn;
  }

  public void setLastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public GetJobRunResponseJobRun completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public GetJobRunResponseJobRun jobRunState(JobRunState jobRunState) {
    this.jobRunState = jobRunState;
    return this;
  }

  /**
   * Get jobRunState
   * @return jobRunState
   */
  @javax.annotation.Nullable
  public JobRunState getJobRunState() {
    return jobRunState;
  }

  public void setJobRunState(JobRunState jobRunState) {
    this.jobRunState = jobRunState;
  }


  public GetJobRunResponseJobRun arguments(Map arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Get arguments
   * @return arguments
   */
  @javax.annotation.Nullable
  public Map getArguments() {
    return arguments;
  }

  public void setArguments(Map arguments) {
    this.arguments = arguments;
  }


  public GetJobRunResponseJobRun errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public GetJobRunResponseJobRun predecessorRuns(List predecessorRuns) {
    this.predecessorRuns = predecessorRuns;
    return this;
  }

  /**
   * Get predecessorRuns
   * @return predecessorRuns
   */
  @javax.annotation.Nullable
  public List getPredecessorRuns() {
    return predecessorRuns;
  }

  public void setPredecessorRuns(List predecessorRuns) {
    this.predecessorRuns = predecessorRuns;
  }


  public GetJobRunResponseJobRun allocatedCapacity(Integer allocatedCapacity) {
    this.allocatedCapacity = allocatedCapacity;
    return this;
  }

  /**
   * Get allocatedCapacity
   * @return allocatedCapacity
   */
  @javax.annotation.Nullable
  public Integer getAllocatedCapacity() {
    return allocatedCapacity;
  }

  public void setAllocatedCapacity(Integer allocatedCapacity) {
    this.allocatedCapacity = allocatedCapacity;
  }


  public GetJobRunResponseJobRun executionTime(Integer executionTime) {
    this.executionTime = executionTime;
    return this;
  }

  /**
   * Get executionTime
   * @return executionTime
   */
  @javax.annotation.Nullable
  public Integer getExecutionTime() {
    return executionTime;
  }

  public void setExecutionTime(Integer executionTime) {
    this.executionTime = executionTime;
  }


  public GetJobRunResponseJobRun timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public GetJobRunResponseJobRun maxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
    return this;
  }

  /**
   * Get maxCapacity
   * @return maxCapacity
   */
  @javax.annotation.Nullable
  public Double getMaxCapacity() {
    return maxCapacity;
  }

  public void setMaxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
  }


  public GetJobRunResponseJobRun workerType(WorkerType workerType) {
    this.workerType = workerType;
    return this;
  }

  /**
   * Get workerType
   * @return workerType
   */
  @javax.annotation.Nullable
  public WorkerType getWorkerType() {
    return workerType;
  }

  public void setWorkerType(WorkerType workerType) {
    this.workerType = workerType;
  }


  public GetJobRunResponseJobRun numberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
    return this;
  }

  /**
   * Get numberOfWorkers
   * @return numberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWorkers() {
    return numberOfWorkers;
  }

  public void setNumberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
  }


  public GetJobRunResponseJobRun securityConfiguration(String securityConfiguration) {
    this.securityConfiguration = securityConfiguration;
    return this;
  }

  /**
   * Get securityConfiguration
   * @return securityConfiguration
   */
  @javax.annotation.Nullable
  public String getSecurityConfiguration() {
    return securityConfiguration;
  }

  public void setSecurityConfiguration(String securityConfiguration) {
    this.securityConfiguration = securityConfiguration;
  }


  public GetJobRunResponseJobRun logGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
    return this;
  }

  /**
   * Get logGroupName
   * @return logGroupName
   */
  @javax.annotation.Nullable
  public String getLogGroupName() {
    return logGroupName;
  }

  public void setLogGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
  }


  public GetJobRunResponseJobRun notificationProperty(StartJobRunRequestNotificationProperty notificationProperty) {
    this.notificationProperty = notificationProperty;
    return this;
  }

  /**
   * Get notificationProperty
   * @return notificationProperty
   */
  @javax.annotation.Nullable
  public StartJobRunRequestNotificationProperty getNotificationProperty() {
    return notificationProperty;
  }

  public void setNotificationProperty(StartJobRunRequestNotificationProperty notificationProperty) {
    this.notificationProperty = notificationProperty;
  }


  public GetJobRunResponseJobRun glueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
    return this;
  }

  /**
   * Get glueVersion
   * @return glueVersion
   */
  @javax.annotation.Nullable
  public String getGlueVersion() {
    return glueVersion;
  }

  public void setGlueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
  }


  public GetJobRunResponseJobRun dpUSeconds(Double dpUSeconds) {
    this.dpUSeconds = dpUSeconds;
    return this;
  }

  /**
   * Get dpUSeconds
   * @return dpUSeconds
   */
  @javax.annotation.Nullable
  public Double getDpUSeconds() {
    return dpUSeconds;
  }

  public void setDpUSeconds(Double dpUSeconds) {
    this.dpUSeconds = dpUSeconds;
  }


  public GetJobRunResponseJobRun executionClass(ExecutionClass executionClass) {
    this.executionClass = executionClass;
    return this;
  }

  /**
   * Get executionClass
   * @return executionClass
   */
  @javax.annotation.Nullable
  public ExecutionClass getExecutionClass() {
    return executionClass;
  }

  public void setExecutionClass(ExecutionClass executionClass) {
    this.executionClass = executionClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetJobRunResponseJobRun getJobRunResponseJobRun = (GetJobRunResponseJobRun) o;
    return Objects.equals(this.id, getJobRunResponseJobRun.id) &&
        Objects.equals(this.attempt, getJobRunResponseJobRun.attempt) &&
        Objects.equals(this.previousRunId, getJobRunResponseJobRun.previousRunId) &&
        Objects.equals(this.triggerName, getJobRunResponseJobRun.triggerName) &&
        Objects.equals(this.jobName, getJobRunResponseJobRun.jobName) &&
        Objects.equals(this.startedOn, getJobRunResponseJobRun.startedOn) &&
        Objects.equals(this.lastModifiedOn, getJobRunResponseJobRun.lastModifiedOn) &&
        Objects.equals(this.completedOn, getJobRunResponseJobRun.completedOn) &&
        Objects.equals(this.jobRunState, getJobRunResponseJobRun.jobRunState) &&
        Objects.equals(this.arguments, getJobRunResponseJobRun.arguments) &&
        Objects.equals(this.errorMessage, getJobRunResponseJobRun.errorMessage) &&
        Objects.equals(this.predecessorRuns, getJobRunResponseJobRun.predecessorRuns) &&
        Objects.equals(this.allocatedCapacity, getJobRunResponseJobRun.allocatedCapacity) &&
        Objects.equals(this.executionTime, getJobRunResponseJobRun.executionTime) &&
        Objects.equals(this.timeout, getJobRunResponseJobRun.timeout) &&
        Objects.equals(this.maxCapacity, getJobRunResponseJobRun.maxCapacity) &&
        Objects.equals(this.workerType, getJobRunResponseJobRun.workerType) &&
        Objects.equals(this.numberOfWorkers, getJobRunResponseJobRun.numberOfWorkers) &&
        Objects.equals(this.securityConfiguration, getJobRunResponseJobRun.securityConfiguration) &&
        Objects.equals(this.logGroupName, getJobRunResponseJobRun.logGroupName) &&
        Objects.equals(this.notificationProperty, getJobRunResponseJobRun.notificationProperty) &&
        Objects.equals(this.glueVersion, getJobRunResponseJobRun.glueVersion) &&
        Objects.equals(this.dpUSeconds, getJobRunResponseJobRun.dpUSeconds) &&
        Objects.equals(this.executionClass, getJobRunResponseJobRun.executionClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, attempt, previousRunId, triggerName, jobName, startedOn, lastModifiedOn, completedOn, jobRunState, arguments, errorMessage, predecessorRuns, allocatedCapacity, executionTime, timeout, maxCapacity, workerType, numberOfWorkers, securityConfiguration, logGroupName, notificationProperty, glueVersion, dpUSeconds, executionClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetJobRunResponseJobRun {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    attempt: ").append(toIndentedString(attempt)).append("\n");
    sb.append("    previousRunId: ").append(toIndentedString(previousRunId)).append("\n");
    sb.append("    triggerName: ").append(toIndentedString(triggerName)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    jobRunState: ").append(toIndentedString(jobRunState)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    predecessorRuns: ").append(toIndentedString(predecessorRuns)).append("\n");
    sb.append("    allocatedCapacity: ").append(toIndentedString(allocatedCapacity)).append("\n");
    sb.append("    executionTime: ").append(toIndentedString(executionTime)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    maxCapacity: ").append(toIndentedString(maxCapacity)).append("\n");
    sb.append("    workerType: ").append(toIndentedString(workerType)).append("\n");
    sb.append("    numberOfWorkers: ").append(toIndentedString(numberOfWorkers)).append("\n");
    sb.append("    securityConfiguration: ").append(toIndentedString(securityConfiguration)).append("\n");
    sb.append("    logGroupName: ").append(toIndentedString(logGroupName)).append("\n");
    sb.append("    notificationProperty: ").append(toIndentedString(notificationProperty)).append("\n");
    sb.append("    glueVersion: ").append(toIndentedString(glueVersion)).append("\n");
    sb.append("    dpUSeconds: ").append(toIndentedString(dpUSeconds)).append("\n");
    sb.append("    executionClass: ").append(toIndentedString(executionClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Attempt");
    openapiFields.add("PreviousRunId");
    openapiFields.add("TriggerName");
    openapiFields.add("JobName");
    openapiFields.add("StartedOn");
    openapiFields.add("LastModifiedOn");
    openapiFields.add("CompletedOn");
    openapiFields.add("JobRunState");
    openapiFields.add("Arguments");
    openapiFields.add("ErrorMessage");
    openapiFields.add("PredecessorRuns");
    openapiFields.add("AllocatedCapacity");
    openapiFields.add("ExecutionTime");
    openapiFields.add("Timeout");
    openapiFields.add("MaxCapacity");
    openapiFields.add("WorkerType");
    openapiFields.add("NumberOfWorkers");
    openapiFields.add("SecurityConfiguration");
    openapiFields.add("LogGroupName");
    openapiFields.add("NotificationProperty");
    openapiFields.add("GlueVersion");
    openapiFields.add("DPUSeconds");
    openapiFields.add("ExecutionClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetJobRunResponseJobRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetJobRunResponseJobRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetJobRunResponseJobRun is not found in the empty JSON string", GetJobRunResponseJobRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetJobRunResponseJobRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetJobRunResponseJobRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Attempt`
      if (jsonObj.get("Attempt") != null && !jsonObj.get("Attempt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Attempt"));
      }
      // validate the optional field `PreviousRunId`
      if (jsonObj.get("PreviousRunId") != null && !jsonObj.get("PreviousRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreviousRunId"));
      }
      // validate the optional field `TriggerName`
      if (jsonObj.get("TriggerName") != null && !jsonObj.get("TriggerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TriggerName"));
      }
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `LastModifiedOn`
      if (jsonObj.get("LastModifiedOn") != null && !jsonObj.get("LastModifiedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedOn"));
      }
      // validate the optional field `CompletedOn`
      if (jsonObj.get("CompletedOn") != null && !jsonObj.get("CompletedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedOn"));
      }
      // validate the optional field `JobRunState`
      if (jsonObj.get("JobRunState") != null && !jsonObj.get("JobRunState").isJsonNull()) {
        JobRunState.validateJsonElement(jsonObj.get("JobRunState"));
      }
      // validate the optional field `Arguments`
      if (jsonObj.get("Arguments") != null && !jsonObj.get("Arguments").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Arguments"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `PredecessorRuns`
      if (jsonObj.get("PredecessorRuns") != null && !jsonObj.get("PredecessorRuns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PredecessorRuns"));
      }
      // validate the optional field `AllocatedCapacity`
      if (jsonObj.get("AllocatedCapacity") != null && !jsonObj.get("AllocatedCapacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AllocatedCapacity"));
      }
      // validate the optional field `ExecutionTime`
      if (jsonObj.get("ExecutionTime") != null && !jsonObj.get("ExecutionTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ExecutionTime"));
      }
      // validate the optional field `Timeout`
      if (jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Timeout"));
      }
      // validate the optional field `MaxCapacity`
      if (jsonObj.get("MaxCapacity") != null && !jsonObj.get("MaxCapacity").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MaxCapacity"));
      }
      // validate the optional field `WorkerType`
      if (jsonObj.get("WorkerType") != null && !jsonObj.get("WorkerType").isJsonNull()) {
        WorkerType.validateJsonElement(jsonObj.get("WorkerType"));
      }
      // validate the optional field `NumberOfWorkers`
      if (jsonObj.get("NumberOfWorkers") != null && !jsonObj.get("NumberOfWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfWorkers"));
      }
      // validate the optional field `SecurityConfiguration`
      if (jsonObj.get("SecurityConfiguration") != null && !jsonObj.get("SecurityConfiguration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityConfiguration"));
      }
      // validate the optional field `LogGroupName`
      if (jsonObj.get("LogGroupName") != null && !jsonObj.get("LogGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogGroupName"));
      }
      // validate the optional field `NotificationProperty`
      if (jsonObj.get("NotificationProperty") != null && !jsonObj.get("NotificationProperty").isJsonNull()) {
        StartJobRunRequestNotificationProperty.validateJsonElement(jsonObj.get("NotificationProperty"));
      }
      // validate the optional field `GlueVersion`
      if (jsonObj.get("GlueVersion") != null && !jsonObj.get("GlueVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlueVersion"));
      }
      // validate the optional field `DPUSeconds`
      if (jsonObj.get("DPUSeconds") != null && !jsonObj.get("DPUSeconds").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("DPUSeconds"));
      }
      // validate the optional field `ExecutionClass`
      if (jsonObj.get("ExecutionClass") != null && !jsonObj.get("ExecutionClass").isJsonNull()) {
        ExecutionClass.validateJsonElement(jsonObj.get("ExecutionClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetJobRunResponseJobRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetJobRunResponseJobRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetJobRunResponseJobRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetJobRunResponseJobRun.class));

       return (TypeAdapter<T>) new TypeAdapter<GetJobRunResponseJobRun>() {
           @Override
           public void write(JsonWriter out, GetJobRunResponseJobRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetJobRunResponseJobRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetJobRunResponseJobRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetJobRunResponseJobRun
   * @throws IOException if the JSON string is invalid with respect to GetJobRunResponseJobRun
   */
  public static GetJobRunResponseJobRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetJobRunResponseJobRun.class);
  }

  /**
   * Convert an instance of GetJobRunResponseJobRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

