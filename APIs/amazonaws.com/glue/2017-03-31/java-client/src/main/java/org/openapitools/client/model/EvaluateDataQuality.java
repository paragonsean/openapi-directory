/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DQTransformOutput;
import org.openapitools.client.model.EvaluateDataQualityPublishingOptions;
import org.openapitools.client.model.EvaluateDataQualityStopJobOnFailureOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies your data quality evaluation criteria.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluateDataQuality {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INPUTS = "Inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List inputs;

  public static final String SERIALIZED_NAME_RULESET = "Ruleset";
  @SerializedName(SERIALIZED_NAME_RULESET)
  private String ruleset;

  public static final String SERIALIZED_NAME_OUTPUT = "Output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private DQTransformOutput output;

  public static final String SERIALIZED_NAME_PUBLISHING_OPTIONS = "PublishingOptions";
  @SerializedName(SERIALIZED_NAME_PUBLISHING_OPTIONS)
  private EvaluateDataQualityPublishingOptions publishingOptions;

  public static final String SERIALIZED_NAME_STOP_JOB_ON_FAILURE_OPTIONS = "StopJobOnFailureOptions";
  @SerializedName(SERIALIZED_NAME_STOP_JOB_ON_FAILURE_OPTIONS)
  private EvaluateDataQualityStopJobOnFailureOptions stopJobOnFailureOptions;

  public EvaluateDataQuality() {
  }

  public EvaluateDataQuality name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EvaluateDataQuality inputs(List inputs) {
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nonnull
  public List getInputs() {
    return inputs;
  }

  public void setInputs(List inputs) {
    this.inputs = inputs;
  }


  public EvaluateDataQuality ruleset(String ruleset) {
    this.ruleset = ruleset;
    return this;
  }

  /**
   * Get ruleset
   * @return ruleset
   */
  @javax.annotation.Nonnull
  public String getRuleset() {
    return ruleset;
  }

  public void setRuleset(String ruleset) {
    this.ruleset = ruleset;
  }


  public EvaluateDataQuality output(DQTransformOutput output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public DQTransformOutput getOutput() {
    return output;
  }

  public void setOutput(DQTransformOutput output) {
    this.output = output;
  }


  public EvaluateDataQuality publishingOptions(EvaluateDataQualityPublishingOptions publishingOptions) {
    this.publishingOptions = publishingOptions;
    return this;
  }

  /**
   * Get publishingOptions
   * @return publishingOptions
   */
  @javax.annotation.Nullable
  public EvaluateDataQualityPublishingOptions getPublishingOptions() {
    return publishingOptions;
  }

  public void setPublishingOptions(EvaluateDataQualityPublishingOptions publishingOptions) {
    this.publishingOptions = publishingOptions;
  }


  public EvaluateDataQuality stopJobOnFailureOptions(EvaluateDataQualityStopJobOnFailureOptions stopJobOnFailureOptions) {
    this.stopJobOnFailureOptions = stopJobOnFailureOptions;
    return this;
  }

  /**
   * Get stopJobOnFailureOptions
   * @return stopJobOnFailureOptions
   */
  @javax.annotation.Nullable
  public EvaluateDataQualityStopJobOnFailureOptions getStopJobOnFailureOptions() {
    return stopJobOnFailureOptions;
  }

  public void setStopJobOnFailureOptions(EvaluateDataQualityStopJobOnFailureOptions stopJobOnFailureOptions) {
    this.stopJobOnFailureOptions = stopJobOnFailureOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluateDataQuality evaluateDataQuality = (EvaluateDataQuality) o;
    return Objects.equals(this.name, evaluateDataQuality.name) &&
        Objects.equals(this.inputs, evaluateDataQuality.inputs) &&
        Objects.equals(this.ruleset, evaluateDataQuality.ruleset) &&
        Objects.equals(this.output, evaluateDataQuality.output) &&
        Objects.equals(this.publishingOptions, evaluateDataQuality.publishingOptions) &&
        Objects.equals(this.stopJobOnFailureOptions, evaluateDataQuality.stopJobOnFailureOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, inputs, ruleset, output, publishingOptions, stopJobOnFailureOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluateDataQuality {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    ruleset: ").append(toIndentedString(ruleset)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    publishingOptions: ").append(toIndentedString(publishingOptions)).append("\n");
    sb.append("    stopJobOnFailureOptions: ").append(toIndentedString(stopJobOnFailureOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Inputs");
    openapiFields.add("Ruleset");
    openapiFields.add("Output");
    openapiFields.add("PublishingOptions");
    openapiFields.add("StopJobOnFailureOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Inputs");
    openapiRequiredFields.add("Ruleset");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluateDataQuality
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluateDataQuality.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluateDataQuality is not found in the empty JSON string", EvaluateDataQuality.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluateDataQuality.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluateDataQuality` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluateDataQuality.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Inputs`
      List.validateJsonElement(jsonObj.get("Inputs"));
      // validate the required field `Ruleset`
      String.validateJsonElement(jsonObj.get("Ruleset"));
      // validate the optional field `Output`
      if (jsonObj.get("Output") != null && !jsonObj.get("Output").isJsonNull()) {
        DQTransformOutput.validateJsonElement(jsonObj.get("Output"));
      }
      // validate the optional field `PublishingOptions`
      if (jsonObj.get("PublishingOptions") != null && !jsonObj.get("PublishingOptions").isJsonNull()) {
        EvaluateDataQualityPublishingOptions.validateJsonElement(jsonObj.get("PublishingOptions"));
      }
      // validate the optional field `StopJobOnFailureOptions`
      if (jsonObj.get("StopJobOnFailureOptions") != null && !jsonObj.get("StopJobOnFailureOptions").isJsonNull()) {
        EvaluateDataQualityStopJobOnFailureOptions.validateJsonElement(jsonObj.get("StopJobOnFailureOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluateDataQuality.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluateDataQuality' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluateDataQuality> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluateDataQuality.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluateDataQuality>() {
           @Override
           public void write(JsonWriter out, EvaluateDataQuality value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluateDataQuality read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluateDataQuality given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluateDataQuality
   * @throws IOException if the JSON string is invalid with respect to EvaluateDataQuality
   */
  public static EvaluateDataQuality fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluateDataQuality.class);
  }

  /**
   * Convert an instance of EvaluateDataQuality to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

