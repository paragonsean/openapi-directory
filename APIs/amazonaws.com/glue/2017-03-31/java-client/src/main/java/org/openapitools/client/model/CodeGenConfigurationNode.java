/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodeGenConfigurationNodeAggregate;
import org.openapitools.client.model.CodeGenConfigurationNodeAmazonRedshiftSource;
import org.openapitools.client.model.CodeGenConfigurationNodeAmazonRedshiftTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeApplyMapping;
import org.openapitools.client.model.CodeGenConfigurationNodeAthenaConnectorSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogDeltaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogHudiSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogKafkaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogKinesisSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeCustomCode;
import org.openapitools.client.model.CodeGenConfigurationNodeDirectKafkaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeDirectKinesisSource;
import org.openapitools.client.model.CodeGenConfigurationNodeDropDuplicates;
import org.openapitools.client.model.CodeGenConfigurationNodeDropFields;
import org.openapitools.client.model.CodeGenConfigurationNodeDropNullFields;
import org.openapitools.client.model.CodeGenConfigurationNodeDynamicTransform;
import org.openapitools.client.model.CodeGenConfigurationNodeDynamoDBCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeEvaluateDataQuality;
import org.openapitools.client.model.CodeGenConfigurationNodeEvaluateDataQualityMultiFrame;
import org.openapitools.client.model.CodeGenConfigurationNodeFillMissingValues;
import org.openapitools.client.model.CodeGenConfigurationNodeFilter;
import org.openapitools.client.model.CodeGenConfigurationNodeGovernedCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeGovernedCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeJDBCConnectorSource;
import org.openapitools.client.model.CodeGenConfigurationNodeJDBCConnectorTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeJoin;
import org.openapitools.client.model.CodeGenConfigurationNodeMerge;
import org.openapitools.client.model.CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeMySQLCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeMySQLCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeOracleSQLCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeOracleSQLCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodePIIDetection;
import org.openapitools.client.model.CodeGenConfigurationNodePostgreSQLCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodePostgreSQLCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeRecipe;
import org.openapitools.client.model.CodeGenConfigurationNodeRedshiftSource;
import org.openapitools.client.model.CodeGenConfigurationNodeRedshiftTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeRelationalCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeRenameField;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogDeltaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogHudiSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CsvSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DeltaCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DeltaDirectTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DeltaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DirectTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3GlueParquetTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3HudiCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3HudiDirectTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3HudiSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3JsonSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3ParquetSource;
import org.openapitools.client.model.CodeGenConfigurationNodeSelectFields;
import org.openapitools.client.model.CodeGenConfigurationNodeSelectFromCollection;
import org.openapitools.client.model.CodeGenConfigurationNodeSnowflakeSource;
import org.openapitools.client.model.CodeGenConfigurationNodeSnowflakeTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeSparkConnectorSource;
import org.openapitools.client.model.CodeGenConfigurationNodeSparkConnectorTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeSparkSQL;
import org.openapitools.client.model.CodeGenConfigurationNodeSpigot;
import org.openapitools.client.model.CodeGenConfigurationNodeSplitFields;
import org.openapitools.client.model.CodeGenConfigurationNodeUnion;
import org.openapitools.client.model.DirectJDBCSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  &lt;code&gt;CodeGenConfigurationNode&lt;/code&gt; enumerates all valid Node types. One and only one of its member variables can be populated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeGenConfigurationNode {
  public static final String SERIALIZED_NAME_ATHENA_CONNECTOR_SOURCE = "AthenaConnectorSource";
  @SerializedName(SERIALIZED_NAME_ATHENA_CONNECTOR_SOURCE)
  private CodeGenConfigurationNodeAthenaConnectorSource athenaConnectorSource;

  public static final String SERIALIZED_NAME_JD_B_C_CONNECTOR_SOURCE = "JDBCConnectorSource";
  @SerializedName(SERIALIZED_NAME_JD_B_C_CONNECTOR_SOURCE)
  private CodeGenConfigurationNodeJDBCConnectorSource jdBCConnectorSource;

  public static final String SERIALIZED_NAME_SPARK_CONNECTOR_SOURCE = "SparkConnectorSource";
  @SerializedName(SERIALIZED_NAME_SPARK_CONNECTOR_SOURCE)
  private CodeGenConfigurationNodeSparkConnectorSource sparkConnectorSource;

  public static final String SERIALIZED_NAME_CATALOG_SOURCE = "CatalogSource";
  @SerializedName(SERIALIZED_NAME_CATALOG_SOURCE)
  private CodeGenConfigurationNodeCatalogSource catalogSource;

  public static final String SERIALIZED_NAME_REDSHIFT_SOURCE = "RedshiftSource";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_SOURCE)
  private CodeGenConfigurationNodeRedshiftSource redshiftSource;

  public static final String SERIALIZED_NAME_S3_CATALOG_SOURCE = "S3CatalogSource";
  @SerializedName(SERIALIZED_NAME_S3_CATALOG_SOURCE)
  private CodeGenConfigurationNodeS3CatalogSource s3CatalogSource;

  public static final String SERIALIZED_NAME_S3_CSV_SOURCE = "S3CsvSource";
  @SerializedName(SERIALIZED_NAME_S3_CSV_SOURCE)
  private CodeGenConfigurationNodeS3CsvSource s3CsvSource;

  public static final String SERIALIZED_NAME_S3_JSON_SOURCE = "S3JsonSource";
  @SerializedName(SERIALIZED_NAME_S3_JSON_SOURCE)
  private CodeGenConfigurationNodeS3JsonSource s3JsonSource;

  public static final String SERIALIZED_NAME_S3_PARQUET_SOURCE = "S3ParquetSource";
  @SerializedName(SERIALIZED_NAME_S3_PARQUET_SOURCE)
  private CodeGenConfigurationNodeS3ParquetSource s3ParquetSource;

  public static final String SERIALIZED_NAME_RELATIONAL_CATALOG_SOURCE = "RelationalCatalogSource";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_CATALOG_SOURCE)
  private CodeGenConfigurationNodeRelationalCatalogSource relationalCatalogSource;

  public static final String SERIALIZED_NAME_DYNAMO_D_B_CATALOG_SOURCE = "DynamoDBCatalogSource";
  @SerializedName(SERIALIZED_NAME_DYNAMO_D_B_CATALOG_SOURCE)
  private CodeGenConfigurationNodeDynamoDBCatalogSource dynamoDBCatalogSource;

  public static final String SERIALIZED_NAME_JD_B_C_CONNECTOR_TARGET = "JDBCConnectorTarget";
  @SerializedName(SERIALIZED_NAME_JD_B_C_CONNECTOR_TARGET)
  private CodeGenConfigurationNodeJDBCConnectorTarget jdBCConnectorTarget;

  public static final String SERIALIZED_NAME_SPARK_CONNECTOR_TARGET = "SparkConnectorTarget";
  @SerializedName(SERIALIZED_NAME_SPARK_CONNECTOR_TARGET)
  private CodeGenConfigurationNodeSparkConnectorTarget sparkConnectorTarget;

  public static final String SERIALIZED_NAME_CATALOG_TARGET = "CatalogTarget";
  @SerializedName(SERIALIZED_NAME_CATALOG_TARGET)
  private CodeGenConfigurationNodeCatalogTarget catalogTarget;

  public static final String SERIALIZED_NAME_REDSHIFT_TARGET = "RedshiftTarget";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_TARGET)
  private CodeGenConfigurationNodeRedshiftTarget redshiftTarget;

  public static final String SERIALIZED_NAME_S3_CATALOG_TARGET = "S3CatalogTarget";
  @SerializedName(SERIALIZED_NAME_S3_CATALOG_TARGET)
  private CodeGenConfigurationNodeS3CatalogTarget s3CatalogTarget;

  public static final String SERIALIZED_NAME_S3_GLUE_PARQUET_TARGET = "S3GlueParquetTarget";
  @SerializedName(SERIALIZED_NAME_S3_GLUE_PARQUET_TARGET)
  private CodeGenConfigurationNodeS3GlueParquetTarget s3GlueParquetTarget;

  public static final String SERIALIZED_NAME_S3_DIRECT_TARGET = "S3DirectTarget";
  @SerializedName(SERIALIZED_NAME_S3_DIRECT_TARGET)
  private CodeGenConfigurationNodeS3DirectTarget s3DirectTarget;

  public static final String SERIALIZED_NAME_APPLY_MAPPING = "ApplyMapping";
  @SerializedName(SERIALIZED_NAME_APPLY_MAPPING)
  private CodeGenConfigurationNodeApplyMapping applyMapping;

  public static final String SERIALIZED_NAME_SELECT_FIELDS = "SelectFields";
  @SerializedName(SERIALIZED_NAME_SELECT_FIELDS)
  private CodeGenConfigurationNodeSelectFields selectFields;

  public static final String SERIALIZED_NAME_DROP_FIELDS = "DropFields";
  @SerializedName(SERIALIZED_NAME_DROP_FIELDS)
  private CodeGenConfigurationNodeDropFields dropFields;

  public static final String SERIALIZED_NAME_RENAME_FIELD = "RenameField";
  @SerializedName(SERIALIZED_NAME_RENAME_FIELD)
  private CodeGenConfigurationNodeRenameField renameField;

  public static final String SERIALIZED_NAME_SPIGOT = "Spigot";
  @SerializedName(SERIALIZED_NAME_SPIGOT)
  private CodeGenConfigurationNodeSpigot spigot;

  public static final String SERIALIZED_NAME_JOIN = "Join";
  @SerializedName(SERIALIZED_NAME_JOIN)
  private CodeGenConfigurationNodeJoin join;

  public static final String SERIALIZED_NAME_SPLIT_FIELDS = "SplitFields";
  @SerializedName(SERIALIZED_NAME_SPLIT_FIELDS)
  private CodeGenConfigurationNodeSplitFields splitFields;

  public static final String SERIALIZED_NAME_SELECT_FROM_COLLECTION = "SelectFromCollection";
  @SerializedName(SERIALIZED_NAME_SELECT_FROM_COLLECTION)
  private CodeGenConfigurationNodeSelectFromCollection selectFromCollection;

  public static final String SERIALIZED_NAME_FILL_MISSING_VALUES = "FillMissingValues";
  @SerializedName(SERIALIZED_NAME_FILL_MISSING_VALUES)
  private CodeGenConfigurationNodeFillMissingValues fillMissingValues;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private CodeGenConfigurationNodeFilter filter;

  public static final String SERIALIZED_NAME_CUSTOM_CODE = "CustomCode";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CODE)
  private CodeGenConfigurationNodeCustomCode customCode;

  public static final String SERIALIZED_NAME_SPARK_S_Q_L = "SparkSQL";
  @SerializedName(SERIALIZED_NAME_SPARK_S_Q_L)
  private CodeGenConfigurationNodeSparkSQL sparkSQL;

  public static final String SERIALIZED_NAME_DIRECT_KINESIS_SOURCE = "DirectKinesisSource";
  @SerializedName(SERIALIZED_NAME_DIRECT_KINESIS_SOURCE)
  private CodeGenConfigurationNodeDirectKinesisSource directKinesisSource;

  public static final String SERIALIZED_NAME_DIRECT_KAFKA_SOURCE = "DirectKafkaSource";
  @SerializedName(SERIALIZED_NAME_DIRECT_KAFKA_SOURCE)
  private CodeGenConfigurationNodeDirectKafkaSource directKafkaSource;

  public static final String SERIALIZED_NAME_CATALOG_KINESIS_SOURCE = "CatalogKinesisSource";
  @SerializedName(SERIALIZED_NAME_CATALOG_KINESIS_SOURCE)
  private CodeGenConfigurationNodeCatalogKinesisSource catalogKinesisSource;

  public static final String SERIALIZED_NAME_CATALOG_KAFKA_SOURCE = "CatalogKafkaSource";
  @SerializedName(SERIALIZED_NAME_CATALOG_KAFKA_SOURCE)
  private CodeGenConfigurationNodeCatalogKafkaSource catalogKafkaSource;

  public static final String SERIALIZED_NAME_DROP_NULL_FIELDS = "DropNullFields";
  @SerializedName(SERIALIZED_NAME_DROP_NULL_FIELDS)
  private CodeGenConfigurationNodeDropNullFields dropNullFields;

  public static final String SERIALIZED_NAME_MERGE = "Merge";
  @SerializedName(SERIALIZED_NAME_MERGE)
  private CodeGenConfigurationNodeMerge merge;

  public static final String SERIALIZED_NAME_UNION = "Union";
  @SerializedName(SERIALIZED_NAME_UNION)
  private CodeGenConfigurationNodeUnion union;

  public static final String SERIALIZED_NAME_PI_I_DETECTION = "PIIDetection";
  @SerializedName(SERIALIZED_NAME_PI_I_DETECTION)
  private CodeGenConfigurationNodePIIDetection piIDetection;

  public static final String SERIALIZED_NAME_AGGREGATE = "Aggregate";
  @SerializedName(SERIALIZED_NAME_AGGREGATE)
  private CodeGenConfigurationNodeAggregate aggregate;

  public static final String SERIALIZED_NAME_DROP_DUPLICATES = "DropDuplicates";
  @SerializedName(SERIALIZED_NAME_DROP_DUPLICATES)
  private CodeGenConfigurationNodeDropDuplicates dropDuplicates;

  public static final String SERIALIZED_NAME_GOVERNED_CATALOG_TARGET = "GovernedCatalogTarget";
  @SerializedName(SERIALIZED_NAME_GOVERNED_CATALOG_TARGET)
  private CodeGenConfigurationNodeGovernedCatalogTarget governedCatalogTarget;

  public static final String SERIALIZED_NAME_GOVERNED_CATALOG_SOURCE = "GovernedCatalogSource";
  @SerializedName(SERIALIZED_NAME_GOVERNED_CATALOG_SOURCE)
  private CodeGenConfigurationNodeGovernedCatalogSource governedCatalogSource;

  public static final String SERIALIZED_NAME_MICROSOFT_S_Q_L_SERVER_CATALOG_SOURCE = "MicrosoftSQLServerCatalogSource";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_S_Q_L_SERVER_CATALOG_SOURCE)
  private CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource microsoftSQLServerCatalogSource;

  public static final String SERIALIZED_NAME_MY_S_Q_L_CATALOG_SOURCE = "MySQLCatalogSource";
  @SerializedName(SERIALIZED_NAME_MY_S_Q_L_CATALOG_SOURCE)
  private CodeGenConfigurationNodeMySQLCatalogSource mySQLCatalogSource;

  public static final String SERIALIZED_NAME_ORACLE_S_Q_L_CATALOG_SOURCE = "OracleSQLCatalogSource";
  @SerializedName(SERIALIZED_NAME_ORACLE_S_Q_L_CATALOG_SOURCE)
  private CodeGenConfigurationNodeOracleSQLCatalogSource oracleSQLCatalogSource;

  public static final String SERIALIZED_NAME_POSTGRE_S_Q_L_CATALOG_SOURCE = "PostgreSQLCatalogSource";
  @SerializedName(SERIALIZED_NAME_POSTGRE_S_Q_L_CATALOG_SOURCE)
  private CodeGenConfigurationNodePostgreSQLCatalogSource postgreSQLCatalogSource;

  public static final String SERIALIZED_NAME_MICROSOFT_S_Q_L_SERVER_CATALOG_TARGET = "MicrosoftSQLServerCatalogTarget";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_S_Q_L_SERVER_CATALOG_TARGET)
  private CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget microsoftSQLServerCatalogTarget;

  public static final String SERIALIZED_NAME_MY_S_Q_L_CATALOG_TARGET = "MySQLCatalogTarget";
  @SerializedName(SERIALIZED_NAME_MY_S_Q_L_CATALOG_TARGET)
  private CodeGenConfigurationNodeMySQLCatalogTarget mySQLCatalogTarget;

  public static final String SERIALIZED_NAME_ORACLE_S_Q_L_CATALOG_TARGET = "OracleSQLCatalogTarget";
  @SerializedName(SERIALIZED_NAME_ORACLE_S_Q_L_CATALOG_TARGET)
  private CodeGenConfigurationNodeOracleSQLCatalogTarget oracleSQLCatalogTarget;

  public static final String SERIALIZED_NAME_POSTGRE_S_Q_L_CATALOG_TARGET = "PostgreSQLCatalogTarget";
  @SerializedName(SERIALIZED_NAME_POSTGRE_S_Q_L_CATALOG_TARGET)
  private CodeGenConfigurationNodePostgreSQLCatalogTarget postgreSQLCatalogTarget;

  public static final String SERIALIZED_NAME_DYNAMIC_TRANSFORM = "DynamicTransform";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_TRANSFORM)
  private CodeGenConfigurationNodeDynamicTransform dynamicTransform;

  public static final String SERIALIZED_NAME_EVALUATE_DATA_QUALITY = "EvaluateDataQuality";
  @SerializedName(SERIALIZED_NAME_EVALUATE_DATA_QUALITY)
  private CodeGenConfigurationNodeEvaluateDataQuality evaluateDataQuality;

  public static final String SERIALIZED_NAME_S3_CATALOG_HUDI_SOURCE = "S3CatalogHudiSource";
  @SerializedName(SERIALIZED_NAME_S3_CATALOG_HUDI_SOURCE)
  private CodeGenConfigurationNodeS3CatalogHudiSource s3CatalogHudiSource;

  public static final String SERIALIZED_NAME_CATALOG_HUDI_SOURCE = "CatalogHudiSource";
  @SerializedName(SERIALIZED_NAME_CATALOG_HUDI_SOURCE)
  private CodeGenConfigurationNodeCatalogHudiSource catalogHudiSource;

  public static final String SERIALIZED_NAME_S3_HUDI_SOURCE = "S3HudiSource";
  @SerializedName(SERIALIZED_NAME_S3_HUDI_SOURCE)
  private CodeGenConfigurationNodeS3HudiSource s3HudiSource;

  public static final String SERIALIZED_NAME_S3_HUDI_CATALOG_TARGET = "S3HudiCatalogTarget";
  @SerializedName(SERIALIZED_NAME_S3_HUDI_CATALOG_TARGET)
  private CodeGenConfigurationNodeS3HudiCatalogTarget s3HudiCatalogTarget;

  public static final String SERIALIZED_NAME_S3_HUDI_DIRECT_TARGET = "S3HudiDirectTarget";
  @SerializedName(SERIALIZED_NAME_S3_HUDI_DIRECT_TARGET)
  private CodeGenConfigurationNodeS3HudiDirectTarget s3HudiDirectTarget;

  public static final String SERIALIZED_NAME_DIRECT_J_D_B_C_SOURCE = "DirectJDBCSource";
  @SerializedName(SERIALIZED_NAME_DIRECT_J_D_B_C_SOURCE)
  private DirectJDBCSource directJDBCSource;

  public static final String SERIALIZED_NAME_S3_CATALOG_DELTA_SOURCE = "S3CatalogDeltaSource";
  @SerializedName(SERIALIZED_NAME_S3_CATALOG_DELTA_SOURCE)
  private CodeGenConfigurationNodeS3CatalogDeltaSource s3CatalogDeltaSource;

  public static final String SERIALIZED_NAME_CATALOG_DELTA_SOURCE = "CatalogDeltaSource";
  @SerializedName(SERIALIZED_NAME_CATALOG_DELTA_SOURCE)
  private CodeGenConfigurationNodeCatalogDeltaSource catalogDeltaSource;

  public static final String SERIALIZED_NAME_S3_DELTA_SOURCE = "S3DeltaSource";
  @SerializedName(SERIALIZED_NAME_S3_DELTA_SOURCE)
  private CodeGenConfigurationNodeS3DeltaSource s3DeltaSource;

  public static final String SERIALIZED_NAME_S3_DELTA_CATALOG_TARGET = "S3DeltaCatalogTarget";
  @SerializedName(SERIALIZED_NAME_S3_DELTA_CATALOG_TARGET)
  private CodeGenConfigurationNodeS3DeltaCatalogTarget s3DeltaCatalogTarget;

  public static final String SERIALIZED_NAME_S3_DELTA_DIRECT_TARGET = "S3DeltaDirectTarget";
  @SerializedName(SERIALIZED_NAME_S3_DELTA_DIRECT_TARGET)
  private CodeGenConfigurationNodeS3DeltaDirectTarget s3DeltaDirectTarget;

  public static final String SERIALIZED_NAME_AMAZON_REDSHIFT_SOURCE = "AmazonRedshiftSource";
  @SerializedName(SERIALIZED_NAME_AMAZON_REDSHIFT_SOURCE)
  private CodeGenConfigurationNodeAmazonRedshiftSource amazonRedshiftSource;

  public static final String SERIALIZED_NAME_AMAZON_REDSHIFT_TARGET = "AmazonRedshiftTarget";
  @SerializedName(SERIALIZED_NAME_AMAZON_REDSHIFT_TARGET)
  private CodeGenConfigurationNodeAmazonRedshiftTarget amazonRedshiftTarget;

  public static final String SERIALIZED_NAME_EVALUATE_DATA_QUALITY_MULTI_FRAME = "EvaluateDataQualityMultiFrame";
  @SerializedName(SERIALIZED_NAME_EVALUATE_DATA_QUALITY_MULTI_FRAME)
  private CodeGenConfigurationNodeEvaluateDataQualityMultiFrame evaluateDataQualityMultiFrame;

  public static final String SERIALIZED_NAME_RECIPE = "Recipe";
  @SerializedName(SERIALIZED_NAME_RECIPE)
  private CodeGenConfigurationNodeRecipe recipe;

  public static final String SERIALIZED_NAME_SNOWFLAKE_SOURCE = "SnowflakeSource";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_SOURCE)
  private CodeGenConfigurationNodeSnowflakeSource snowflakeSource;

  public static final String SERIALIZED_NAME_SNOWFLAKE_TARGET = "SnowflakeTarget";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_TARGET)
  private CodeGenConfigurationNodeSnowflakeTarget snowflakeTarget;

  public CodeGenConfigurationNode() {
  }

  public CodeGenConfigurationNode athenaConnectorSource(CodeGenConfigurationNodeAthenaConnectorSource athenaConnectorSource) {
    this.athenaConnectorSource = athenaConnectorSource;
    return this;
  }

  /**
   * Get athenaConnectorSource
   * @return athenaConnectorSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeAthenaConnectorSource getAthenaConnectorSource() {
    return athenaConnectorSource;
  }

  public void setAthenaConnectorSource(CodeGenConfigurationNodeAthenaConnectorSource athenaConnectorSource) {
    this.athenaConnectorSource = athenaConnectorSource;
  }


  public CodeGenConfigurationNode jdBCConnectorSource(CodeGenConfigurationNodeJDBCConnectorSource jdBCConnectorSource) {
    this.jdBCConnectorSource = jdBCConnectorSource;
    return this;
  }

  /**
   * Get jdBCConnectorSource
   * @return jdBCConnectorSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeJDBCConnectorSource getJdBCConnectorSource() {
    return jdBCConnectorSource;
  }

  public void setJdBCConnectorSource(CodeGenConfigurationNodeJDBCConnectorSource jdBCConnectorSource) {
    this.jdBCConnectorSource = jdBCConnectorSource;
  }


  public CodeGenConfigurationNode sparkConnectorSource(CodeGenConfigurationNodeSparkConnectorSource sparkConnectorSource) {
    this.sparkConnectorSource = sparkConnectorSource;
    return this;
  }

  /**
   * Get sparkConnectorSource
   * @return sparkConnectorSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSparkConnectorSource getSparkConnectorSource() {
    return sparkConnectorSource;
  }

  public void setSparkConnectorSource(CodeGenConfigurationNodeSparkConnectorSource sparkConnectorSource) {
    this.sparkConnectorSource = sparkConnectorSource;
  }


  public CodeGenConfigurationNode catalogSource(CodeGenConfigurationNodeCatalogSource catalogSource) {
    this.catalogSource = catalogSource;
    return this;
  }

  /**
   * Get catalogSource
   * @return catalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCatalogSource getCatalogSource() {
    return catalogSource;
  }

  public void setCatalogSource(CodeGenConfigurationNodeCatalogSource catalogSource) {
    this.catalogSource = catalogSource;
  }


  public CodeGenConfigurationNode redshiftSource(CodeGenConfigurationNodeRedshiftSource redshiftSource) {
    this.redshiftSource = redshiftSource;
    return this;
  }

  /**
   * Get redshiftSource
   * @return redshiftSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeRedshiftSource getRedshiftSource() {
    return redshiftSource;
  }

  public void setRedshiftSource(CodeGenConfigurationNodeRedshiftSource redshiftSource) {
    this.redshiftSource = redshiftSource;
  }


  public CodeGenConfigurationNode s3CatalogSource(CodeGenConfigurationNodeS3CatalogSource s3CatalogSource) {
    this.s3CatalogSource = s3CatalogSource;
    return this;
  }

  /**
   * Get s3CatalogSource
   * @return s3CatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3CatalogSource getS3CatalogSource() {
    return s3CatalogSource;
  }

  public void setS3CatalogSource(CodeGenConfigurationNodeS3CatalogSource s3CatalogSource) {
    this.s3CatalogSource = s3CatalogSource;
  }


  public CodeGenConfigurationNode s3CsvSource(CodeGenConfigurationNodeS3CsvSource s3CsvSource) {
    this.s3CsvSource = s3CsvSource;
    return this;
  }

  /**
   * Get s3CsvSource
   * @return s3CsvSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3CsvSource getS3CsvSource() {
    return s3CsvSource;
  }

  public void setS3CsvSource(CodeGenConfigurationNodeS3CsvSource s3CsvSource) {
    this.s3CsvSource = s3CsvSource;
  }


  public CodeGenConfigurationNode s3JsonSource(CodeGenConfigurationNodeS3JsonSource s3JsonSource) {
    this.s3JsonSource = s3JsonSource;
    return this;
  }

  /**
   * Get s3JsonSource
   * @return s3JsonSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3JsonSource getS3JsonSource() {
    return s3JsonSource;
  }

  public void setS3JsonSource(CodeGenConfigurationNodeS3JsonSource s3JsonSource) {
    this.s3JsonSource = s3JsonSource;
  }


  public CodeGenConfigurationNode s3ParquetSource(CodeGenConfigurationNodeS3ParquetSource s3ParquetSource) {
    this.s3ParquetSource = s3ParquetSource;
    return this;
  }

  /**
   * Get s3ParquetSource
   * @return s3ParquetSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3ParquetSource getS3ParquetSource() {
    return s3ParquetSource;
  }

  public void setS3ParquetSource(CodeGenConfigurationNodeS3ParquetSource s3ParquetSource) {
    this.s3ParquetSource = s3ParquetSource;
  }


  public CodeGenConfigurationNode relationalCatalogSource(CodeGenConfigurationNodeRelationalCatalogSource relationalCatalogSource) {
    this.relationalCatalogSource = relationalCatalogSource;
    return this;
  }

  /**
   * Get relationalCatalogSource
   * @return relationalCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeRelationalCatalogSource getRelationalCatalogSource() {
    return relationalCatalogSource;
  }

  public void setRelationalCatalogSource(CodeGenConfigurationNodeRelationalCatalogSource relationalCatalogSource) {
    this.relationalCatalogSource = relationalCatalogSource;
  }


  public CodeGenConfigurationNode dynamoDBCatalogSource(CodeGenConfigurationNodeDynamoDBCatalogSource dynamoDBCatalogSource) {
    this.dynamoDBCatalogSource = dynamoDBCatalogSource;
    return this;
  }

  /**
   * Get dynamoDBCatalogSource
   * @return dynamoDBCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDynamoDBCatalogSource getDynamoDBCatalogSource() {
    return dynamoDBCatalogSource;
  }

  public void setDynamoDBCatalogSource(CodeGenConfigurationNodeDynamoDBCatalogSource dynamoDBCatalogSource) {
    this.dynamoDBCatalogSource = dynamoDBCatalogSource;
  }


  public CodeGenConfigurationNode jdBCConnectorTarget(CodeGenConfigurationNodeJDBCConnectorTarget jdBCConnectorTarget) {
    this.jdBCConnectorTarget = jdBCConnectorTarget;
    return this;
  }

  /**
   * Get jdBCConnectorTarget
   * @return jdBCConnectorTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeJDBCConnectorTarget getJdBCConnectorTarget() {
    return jdBCConnectorTarget;
  }

  public void setJdBCConnectorTarget(CodeGenConfigurationNodeJDBCConnectorTarget jdBCConnectorTarget) {
    this.jdBCConnectorTarget = jdBCConnectorTarget;
  }


  public CodeGenConfigurationNode sparkConnectorTarget(CodeGenConfigurationNodeSparkConnectorTarget sparkConnectorTarget) {
    this.sparkConnectorTarget = sparkConnectorTarget;
    return this;
  }

  /**
   * Get sparkConnectorTarget
   * @return sparkConnectorTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSparkConnectorTarget getSparkConnectorTarget() {
    return sparkConnectorTarget;
  }

  public void setSparkConnectorTarget(CodeGenConfigurationNodeSparkConnectorTarget sparkConnectorTarget) {
    this.sparkConnectorTarget = sparkConnectorTarget;
  }


  public CodeGenConfigurationNode catalogTarget(CodeGenConfigurationNodeCatalogTarget catalogTarget) {
    this.catalogTarget = catalogTarget;
    return this;
  }

  /**
   * Get catalogTarget
   * @return catalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCatalogTarget getCatalogTarget() {
    return catalogTarget;
  }

  public void setCatalogTarget(CodeGenConfigurationNodeCatalogTarget catalogTarget) {
    this.catalogTarget = catalogTarget;
  }


  public CodeGenConfigurationNode redshiftTarget(CodeGenConfigurationNodeRedshiftTarget redshiftTarget) {
    this.redshiftTarget = redshiftTarget;
    return this;
  }

  /**
   * Get redshiftTarget
   * @return redshiftTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeRedshiftTarget getRedshiftTarget() {
    return redshiftTarget;
  }

  public void setRedshiftTarget(CodeGenConfigurationNodeRedshiftTarget redshiftTarget) {
    this.redshiftTarget = redshiftTarget;
  }


  public CodeGenConfigurationNode s3CatalogTarget(CodeGenConfigurationNodeS3CatalogTarget s3CatalogTarget) {
    this.s3CatalogTarget = s3CatalogTarget;
    return this;
  }

  /**
   * Get s3CatalogTarget
   * @return s3CatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3CatalogTarget getS3CatalogTarget() {
    return s3CatalogTarget;
  }

  public void setS3CatalogTarget(CodeGenConfigurationNodeS3CatalogTarget s3CatalogTarget) {
    this.s3CatalogTarget = s3CatalogTarget;
  }


  public CodeGenConfigurationNode s3GlueParquetTarget(CodeGenConfigurationNodeS3GlueParquetTarget s3GlueParquetTarget) {
    this.s3GlueParquetTarget = s3GlueParquetTarget;
    return this;
  }

  /**
   * Get s3GlueParquetTarget
   * @return s3GlueParquetTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3GlueParquetTarget getS3GlueParquetTarget() {
    return s3GlueParquetTarget;
  }

  public void setS3GlueParquetTarget(CodeGenConfigurationNodeS3GlueParquetTarget s3GlueParquetTarget) {
    this.s3GlueParquetTarget = s3GlueParquetTarget;
  }


  public CodeGenConfigurationNode s3DirectTarget(CodeGenConfigurationNodeS3DirectTarget s3DirectTarget) {
    this.s3DirectTarget = s3DirectTarget;
    return this;
  }

  /**
   * Get s3DirectTarget
   * @return s3DirectTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3DirectTarget getS3DirectTarget() {
    return s3DirectTarget;
  }

  public void setS3DirectTarget(CodeGenConfigurationNodeS3DirectTarget s3DirectTarget) {
    this.s3DirectTarget = s3DirectTarget;
  }


  public CodeGenConfigurationNode applyMapping(CodeGenConfigurationNodeApplyMapping applyMapping) {
    this.applyMapping = applyMapping;
    return this;
  }

  /**
   * Get applyMapping
   * @return applyMapping
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeApplyMapping getApplyMapping() {
    return applyMapping;
  }

  public void setApplyMapping(CodeGenConfigurationNodeApplyMapping applyMapping) {
    this.applyMapping = applyMapping;
  }


  public CodeGenConfigurationNode selectFields(CodeGenConfigurationNodeSelectFields selectFields) {
    this.selectFields = selectFields;
    return this;
  }

  /**
   * Get selectFields
   * @return selectFields
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSelectFields getSelectFields() {
    return selectFields;
  }

  public void setSelectFields(CodeGenConfigurationNodeSelectFields selectFields) {
    this.selectFields = selectFields;
  }


  public CodeGenConfigurationNode dropFields(CodeGenConfigurationNodeDropFields dropFields) {
    this.dropFields = dropFields;
    return this;
  }

  /**
   * Get dropFields
   * @return dropFields
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDropFields getDropFields() {
    return dropFields;
  }

  public void setDropFields(CodeGenConfigurationNodeDropFields dropFields) {
    this.dropFields = dropFields;
  }


  public CodeGenConfigurationNode renameField(CodeGenConfigurationNodeRenameField renameField) {
    this.renameField = renameField;
    return this;
  }

  /**
   * Get renameField
   * @return renameField
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeRenameField getRenameField() {
    return renameField;
  }

  public void setRenameField(CodeGenConfigurationNodeRenameField renameField) {
    this.renameField = renameField;
  }


  public CodeGenConfigurationNode spigot(CodeGenConfigurationNodeSpigot spigot) {
    this.spigot = spigot;
    return this;
  }

  /**
   * Get spigot
   * @return spigot
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSpigot getSpigot() {
    return spigot;
  }

  public void setSpigot(CodeGenConfigurationNodeSpigot spigot) {
    this.spigot = spigot;
  }


  public CodeGenConfigurationNode join(CodeGenConfigurationNodeJoin join) {
    this.join = join;
    return this;
  }

  /**
   * Get join
   * @return join
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeJoin getJoin() {
    return join;
  }

  public void setJoin(CodeGenConfigurationNodeJoin join) {
    this.join = join;
  }


  public CodeGenConfigurationNode splitFields(CodeGenConfigurationNodeSplitFields splitFields) {
    this.splitFields = splitFields;
    return this;
  }

  /**
   * Get splitFields
   * @return splitFields
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSplitFields getSplitFields() {
    return splitFields;
  }

  public void setSplitFields(CodeGenConfigurationNodeSplitFields splitFields) {
    this.splitFields = splitFields;
  }


  public CodeGenConfigurationNode selectFromCollection(CodeGenConfigurationNodeSelectFromCollection selectFromCollection) {
    this.selectFromCollection = selectFromCollection;
    return this;
  }

  /**
   * Get selectFromCollection
   * @return selectFromCollection
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSelectFromCollection getSelectFromCollection() {
    return selectFromCollection;
  }

  public void setSelectFromCollection(CodeGenConfigurationNodeSelectFromCollection selectFromCollection) {
    this.selectFromCollection = selectFromCollection;
  }


  public CodeGenConfigurationNode fillMissingValues(CodeGenConfigurationNodeFillMissingValues fillMissingValues) {
    this.fillMissingValues = fillMissingValues;
    return this;
  }

  /**
   * Get fillMissingValues
   * @return fillMissingValues
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeFillMissingValues getFillMissingValues() {
    return fillMissingValues;
  }

  public void setFillMissingValues(CodeGenConfigurationNodeFillMissingValues fillMissingValues) {
    this.fillMissingValues = fillMissingValues;
  }


  public CodeGenConfigurationNode filter(CodeGenConfigurationNodeFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeFilter getFilter() {
    return filter;
  }

  public void setFilter(CodeGenConfigurationNodeFilter filter) {
    this.filter = filter;
  }


  public CodeGenConfigurationNode customCode(CodeGenConfigurationNodeCustomCode customCode) {
    this.customCode = customCode;
    return this;
  }

  /**
   * Get customCode
   * @return customCode
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCustomCode getCustomCode() {
    return customCode;
  }

  public void setCustomCode(CodeGenConfigurationNodeCustomCode customCode) {
    this.customCode = customCode;
  }


  public CodeGenConfigurationNode sparkSQL(CodeGenConfigurationNodeSparkSQL sparkSQL) {
    this.sparkSQL = sparkSQL;
    return this;
  }

  /**
   * Get sparkSQL
   * @return sparkSQL
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSparkSQL getSparkSQL() {
    return sparkSQL;
  }

  public void setSparkSQL(CodeGenConfigurationNodeSparkSQL sparkSQL) {
    this.sparkSQL = sparkSQL;
  }


  public CodeGenConfigurationNode directKinesisSource(CodeGenConfigurationNodeDirectKinesisSource directKinesisSource) {
    this.directKinesisSource = directKinesisSource;
    return this;
  }

  /**
   * Get directKinesisSource
   * @return directKinesisSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDirectKinesisSource getDirectKinesisSource() {
    return directKinesisSource;
  }

  public void setDirectKinesisSource(CodeGenConfigurationNodeDirectKinesisSource directKinesisSource) {
    this.directKinesisSource = directKinesisSource;
  }


  public CodeGenConfigurationNode directKafkaSource(CodeGenConfigurationNodeDirectKafkaSource directKafkaSource) {
    this.directKafkaSource = directKafkaSource;
    return this;
  }

  /**
   * Get directKafkaSource
   * @return directKafkaSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDirectKafkaSource getDirectKafkaSource() {
    return directKafkaSource;
  }

  public void setDirectKafkaSource(CodeGenConfigurationNodeDirectKafkaSource directKafkaSource) {
    this.directKafkaSource = directKafkaSource;
  }


  public CodeGenConfigurationNode catalogKinesisSource(CodeGenConfigurationNodeCatalogKinesisSource catalogKinesisSource) {
    this.catalogKinesisSource = catalogKinesisSource;
    return this;
  }

  /**
   * Get catalogKinesisSource
   * @return catalogKinesisSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCatalogKinesisSource getCatalogKinesisSource() {
    return catalogKinesisSource;
  }

  public void setCatalogKinesisSource(CodeGenConfigurationNodeCatalogKinesisSource catalogKinesisSource) {
    this.catalogKinesisSource = catalogKinesisSource;
  }


  public CodeGenConfigurationNode catalogKafkaSource(CodeGenConfigurationNodeCatalogKafkaSource catalogKafkaSource) {
    this.catalogKafkaSource = catalogKafkaSource;
    return this;
  }

  /**
   * Get catalogKafkaSource
   * @return catalogKafkaSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCatalogKafkaSource getCatalogKafkaSource() {
    return catalogKafkaSource;
  }

  public void setCatalogKafkaSource(CodeGenConfigurationNodeCatalogKafkaSource catalogKafkaSource) {
    this.catalogKafkaSource = catalogKafkaSource;
  }


  public CodeGenConfigurationNode dropNullFields(CodeGenConfigurationNodeDropNullFields dropNullFields) {
    this.dropNullFields = dropNullFields;
    return this;
  }

  /**
   * Get dropNullFields
   * @return dropNullFields
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDropNullFields getDropNullFields() {
    return dropNullFields;
  }

  public void setDropNullFields(CodeGenConfigurationNodeDropNullFields dropNullFields) {
    this.dropNullFields = dropNullFields;
  }


  public CodeGenConfigurationNode merge(CodeGenConfigurationNodeMerge merge) {
    this.merge = merge;
    return this;
  }

  /**
   * Get merge
   * @return merge
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeMerge getMerge() {
    return merge;
  }

  public void setMerge(CodeGenConfigurationNodeMerge merge) {
    this.merge = merge;
  }


  public CodeGenConfigurationNode union(CodeGenConfigurationNodeUnion union) {
    this.union = union;
    return this;
  }

  /**
   * Get union
   * @return union
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeUnion getUnion() {
    return union;
  }

  public void setUnion(CodeGenConfigurationNodeUnion union) {
    this.union = union;
  }


  public CodeGenConfigurationNode piIDetection(CodeGenConfigurationNodePIIDetection piIDetection) {
    this.piIDetection = piIDetection;
    return this;
  }

  /**
   * Get piIDetection
   * @return piIDetection
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodePIIDetection getPiIDetection() {
    return piIDetection;
  }

  public void setPiIDetection(CodeGenConfigurationNodePIIDetection piIDetection) {
    this.piIDetection = piIDetection;
  }


  public CodeGenConfigurationNode aggregate(CodeGenConfigurationNodeAggregate aggregate) {
    this.aggregate = aggregate;
    return this;
  }

  /**
   * Get aggregate
   * @return aggregate
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeAggregate getAggregate() {
    return aggregate;
  }

  public void setAggregate(CodeGenConfigurationNodeAggregate aggregate) {
    this.aggregate = aggregate;
  }


  public CodeGenConfigurationNode dropDuplicates(CodeGenConfigurationNodeDropDuplicates dropDuplicates) {
    this.dropDuplicates = dropDuplicates;
    return this;
  }

  /**
   * Get dropDuplicates
   * @return dropDuplicates
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDropDuplicates getDropDuplicates() {
    return dropDuplicates;
  }

  public void setDropDuplicates(CodeGenConfigurationNodeDropDuplicates dropDuplicates) {
    this.dropDuplicates = dropDuplicates;
  }


  public CodeGenConfigurationNode governedCatalogTarget(CodeGenConfigurationNodeGovernedCatalogTarget governedCatalogTarget) {
    this.governedCatalogTarget = governedCatalogTarget;
    return this;
  }

  /**
   * Get governedCatalogTarget
   * @return governedCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeGovernedCatalogTarget getGovernedCatalogTarget() {
    return governedCatalogTarget;
  }

  public void setGovernedCatalogTarget(CodeGenConfigurationNodeGovernedCatalogTarget governedCatalogTarget) {
    this.governedCatalogTarget = governedCatalogTarget;
  }


  public CodeGenConfigurationNode governedCatalogSource(CodeGenConfigurationNodeGovernedCatalogSource governedCatalogSource) {
    this.governedCatalogSource = governedCatalogSource;
    return this;
  }

  /**
   * Get governedCatalogSource
   * @return governedCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeGovernedCatalogSource getGovernedCatalogSource() {
    return governedCatalogSource;
  }

  public void setGovernedCatalogSource(CodeGenConfigurationNodeGovernedCatalogSource governedCatalogSource) {
    this.governedCatalogSource = governedCatalogSource;
  }


  public CodeGenConfigurationNode microsoftSQLServerCatalogSource(CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource microsoftSQLServerCatalogSource) {
    this.microsoftSQLServerCatalogSource = microsoftSQLServerCatalogSource;
    return this;
  }

  /**
   * Get microsoftSQLServerCatalogSource
   * @return microsoftSQLServerCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource getMicrosoftSQLServerCatalogSource() {
    return microsoftSQLServerCatalogSource;
  }

  public void setMicrosoftSQLServerCatalogSource(CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource microsoftSQLServerCatalogSource) {
    this.microsoftSQLServerCatalogSource = microsoftSQLServerCatalogSource;
  }


  public CodeGenConfigurationNode mySQLCatalogSource(CodeGenConfigurationNodeMySQLCatalogSource mySQLCatalogSource) {
    this.mySQLCatalogSource = mySQLCatalogSource;
    return this;
  }

  /**
   * Get mySQLCatalogSource
   * @return mySQLCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeMySQLCatalogSource getMySQLCatalogSource() {
    return mySQLCatalogSource;
  }

  public void setMySQLCatalogSource(CodeGenConfigurationNodeMySQLCatalogSource mySQLCatalogSource) {
    this.mySQLCatalogSource = mySQLCatalogSource;
  }


  public CodeGenConfigurationNode oracleSQLCatalogSource(CodeGenConfigurationNodeOracleSQLCatalogSource oracleSQLCatalogSource) {
    this.oracleSQLCatalogSource = oracleSQLCatalogSource;
    return this;
  }

  /**
   * Get oracleSQLCatalogSource
   * @return oracleSQLCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeOracleSQLCatalogSource getOracleSQLCatalogSource() {
    return oracleSQLCatalogSource;
  }

  public void setOracleSQLCatalogSource(CodeGenConfigurationNodeOracleSQLCatalogSource oracleSQLCatalogSource) {
    this.oracleSQLCatalogSource = oracleSQLCatalogSource;
  }


  public CodeGenConfigurationNode postgreSQLCatalogSource(CodeGenConfigurationNodePostgreSQLCatalogSource postgreSQLCatalogSource) {
    this.postgreSQLCatalogSource = postgreSQLCatalogSource;
    return this;
  }

  /**
   * Get postgreSQLCatalogSource
   * @return postgreSQLCatalogSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodePostgreSQLCatalogSource getPostgreSQLCatalogSource() {
    return postgreSQLCatalogSource;
  }

  public void setPostgreSQLCatalogSource(CodeGenConfigurationNodePostgreSQLCatalogSource postgreSQLCatalogSource) {
    this.postgreSQLCatalogSource = postgreSQLCatalogSource;
  }


  public CodeGenConfigurationNode microsoftSQLServerCatalogTarget(CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget microsoftSQLServerCatalogTarget) {
    this.microsoftSQLServerCatalogTarget = microsoftSQLServerCatalogTarget;
    return this;
  }

  /**
   * Get microsoftSQLServerCatalogTarget
   * @return microsoftSQLServerCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget getMicrosoftSQLServerCatalogTarget() {
    return microsoftSQLServerCatalogTarget;
  }

  public void setMicrosoftSQLServerCatalogTarget(CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget microsoftSQLServerCatalogTarget) {
    this.microsoftSQLServerCatalogTarget = microsoftSQLServerCatalogTarget;
  }


  public CodeGenConfigurationNode mySQLCatalogTarget(CodeGenConfigurationNodeMySQLCatalogTarget mySQLCatalogTarget) {
    this.mySQLCatalogTarget = mySQLCatalogTarget;
    return this;
  }

  /**
   * Get mySQLCatalogTarget
   * @return mySQLCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeMySQLCatalogTarget getMySQLCatalogTarget() {
    return mySQLCatalogTarget;
  }

  public void setMySQLCatalogTarget(CodeGenConfigurationNodeMySQLCatalogTarget mySQLCatalogTarget) {
    this.mySQLCatalogTarget = mySQLCatalogTarget;
  }


  public CodeGenConfigurationNode oracleSQLCatalogTarget(CodeGenConfigurationNodeOracleSQLCatalogTarget oracleSQLCatalogTarget) {
    this.oracleSQLCatalogTarget = oracleSQLCatalogTarget;
    return this;
  }

  /**
   * Get oracleSQLCatalogTarget
   * @return oracleSQLCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeOracleSQLCatalogTarget getOracleSQLCatalogTarget() {
    return oracleSQLCatalogTarget;
  }

  public void setOracleSQLCatalogTarget(CodeGenConfigurationNodeOracleSQLCatalogTarget oracleSQLCatalogTarget) {
    this.oracleSQLCatalogTarget = oracleSQLCatalogTarget;
  }


  public CodeGenConfigurationNode postgreSQLCatalogTarget(CodeGenConfigurationNodePostgreSQLCatalogTarget postgreSQLCatalogTarget) {
    this.postgreSQLCatalogTarget = postgreSQLCatalogTarget;
    return this;
  }

  /**
   * Get postgreSQLCatalogTarget
   * @return postgreSQLCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodePostgreSQLCatalogTarget getPostgreSQLCatalogTarget() {
    return postgreSQLCatalogTarget;
  }

  public void setPostgreSQLCatalogTarget(CodeGenConfigurationNodePostgreSQLCatalogTarget postgreSQLCatalogTarget) {
    this.postgreSQLCatalogTarget = postgreSQLCatalogTarget;
  }


  public CodeGenConfigurationNode dynamicTransform(CodeGenConfigurationNodeDynamicTransform dynamicTransform) {
    this.dynamicTransform = dynamicTransform;
    return this;
  }

  /**
   * Get dynamicTransform
   * @return dynamicTransform
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeDynamicTransform getDynamicTransform() {
    return dynamicTransform;
  }

  public void setDynamicTransform(CodeGenConfigurationNodeDynamicTransform dynamicTransform) {
    this.dynamicTransform = dynamicTransform;
  }


  public CodeGenConfigurationNode evaluateDataQuality(CodeGenConfigurationNodeEvaluateDataQuality evaluateDataQuality) {
    this.evaluateDataQuality = evaluateDataQuality;
    return this;
  }

  /**
   * Get evaluateDataQuality
   * @return evaluateDataQuality
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeEvaluateDataQuality getEvaluateDataQuality() {
    return evaluateDataQuality;
  }

  public void setEvaluateDataQuality(CodeGenConfigurationNodeEvaluateDataQuality evaluateDataQuality) {
    this.evaluateDataQuality = evaluateDataQuality;
  }


  public CodeGenConfigurationNode s3CatalogHudiSource(CodeGenConfigurationNodeS3CatalogHudiSource s3CatalogHudiSource) {
    this.s3CatalogHudiSource = s3CatalogHudiSource;
    return this;
  }

  /**
   * Get s3CatalogHudiSource
   * @return s3CatalogHudiSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3CatalogHudiSource getS3CatalogHudiSource() {
    return s3CatalogHudiSource;
  }

  public void setS3CatalogHudiSource(CodeGenConfigurationNodeS3CatalogHudiSource s3CatalogHudiSource) {
    this.s3CatalogHudiSource = s3CatalogHudiSource;
  }


  public CodeGenConfigurationNode catalogHudiSource(CodeGenConfigurationNodeCatalogHudiSource catalogHudiSource) {
    this.catalogHudiSource = catalogHudiSource;
    return this;
  }

  /**
   * Get catalogHudiSource
   * @return catalogHudiSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCatalogHudiSource getCatalogHudiSource() {
    return catalogHudiSource;
  }

  public void setCatalogHudiSource(CodeGenConfigurationNodeCatalogHudiSource catalogHudiSource) {
    this.catalogHudiSource = catalogHudiSource;
  }


  public CodeGenConfigurationNode s3HudiSource(CodeGenConfigurationNodeS3HudiSource s3HudiSource) {
    this.s3HudiSource = s3HudiSource;
    return this;
  }

  /**
   * Get s3HudiSource
   * @return s3HudiSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3HudiSource getS3HudiSource() {
    return s3HudiSource;
  }

  public void setS3HudiSource(CodeGenConfigurationNodeS3HudiSource s3HudiSource) {
    this.s3HudiSource = s3HudiSource;
  }


  public CodeGenConfigurationNode s3HudiCatalogTarget(CodeGenConfigurationNodeS3HudiCatalogTarget s3HudiCatalogTarget) {
    this.s3HudiCatalogTarget = s3HudiCatalogTarget;
    return this;
  }

  /**
   * Get s3HudiCatalogTarget
   * @return s3HudiCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3HudiCatalogTarget getS3HudiCatalogTarget() {
    return s3HudiCatalogTarget;
  }

  public void setS3HudiCatalogTarget(CodeGenConfigurationNodeS3HudiCatalogTarget s3HudiCatalogTarget) {
    this.s3HudiCatalogTarget = s3HudiCatalogTarget;
  }


  public CodeGenConfigurationNode s3HudiDirectTarget(CodeGenConfigurationNodeS3HudiDirectTarget s3HudiDirectTarget) {
    this.s3HudiDirectTarget = s3HudiDirectTarget;
    return this;
  }

  /**
   * Get s3HudiDirectTarget
   * @return s3HudiDirectTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3HudiDirectTarget getS3HudiDirectTarget() {
    return s3HudiDirectTarget;
  }

  public void setS3HudiDirectTarget(CodeGenConfigurationNodeS3HudiDirectTarget s3HudiDirectTarget) {
    this.s3HudiDirectTarget = s3HudiDirectTarget;
  }


  public CodeGenConfigurationNode directJDBCSource(DirectJDBCSource directJDBCSource) {
    this.directJDBCSource = directJDBCSource;
    return this;
  }

  /**
   * Get directJDBCSource
   * @return directJDBCSource
   */
  @javax.annotation.Nullable
  public DirectJDBCSource getDirectJDBCSource() {
    return directJDBCSource;
  }

  public void setDirectJDBCSource(DirectJDBCSource directJDBCSource) {
    this.directJDBCSource = directJDBCSource;
  }


  public CodeGenConfigurationNode s3CatalogDeltaSource(CodeGenConfigurationNodeS3CatalogDeltaSource s3CatalogDeltaSource) {
    this.s3CatalogDeltaSource = s3CatalogDeltaSource;
    return this;
  }

  /**
   * Get s3CatalogDeltaSource
   * @return s3CatalogDeltaSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3CatalogDeltaSource getS3CatalogDeltaSource() {
    return s3CatalogDeltaSource;
  }

  public void setS3CatalogDeltaSource(CodeGenConfigurationNodeS3CatalogDeltaSource s3CatalogDeltaSource) {
    this.s3CatalogDeltaSource = s3CatalogDeltaSource;
  }


  public CodeGenConfigurationNode catalogDeltaSource(CodeGenConfigurationNodeCatalogDeltaSource catalogDeltaSource) {
    this.catalogDeltaSource = catalogDeltaSource;
    return this;
  }

  /**
   * Get catalogDeltaSource
   * @return catalogDeltaSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeCatalogDeltaSource getCatalogDeltaSource() {
    return catalogDeltaSource;
  }

  public void setCatalogDeltaSource(CodeGenConfigurationNodeCatalogDeltaSource catalogDeltaSource) {
    this.catalogDeltaSource = catalogDeltaSource;
  }


  public CodeGenConfigurationNode s3DeltaSource(CodeGenConfigurationNodeS3DeltaSource s3DeltaSource) {
    this.s3DeltaSource = s3DeltaSource;
    return this;
  }

  /**
   * Get s3DeltaSource
   * @return s3DeltaSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3DeltaSource getS3DeltaSource() {
    return s3DeltaSource;
  }

  public void setS3DeltaSource(CodeGenConfigurationNodeS3DeltaSource s3DeltaSource) {
    this.s3DeltaSource = s3DeltaSource;
  }


  public CodeGenConfigurationNode s3DeltaCatalogTarget(CodeGenConfigurationNodeS3DeltaCatalogTarget s3DeltaCatalogTarget) {
    this.s3DeltaCatalogTarget = s3DeltaCatalogTarget;
    return this;
  }

  /**
   * Get s3DeltaCatalogTarget
   * @return s3DeltaCatalogTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3DeltaCatalogTarget getS3DeltaCatalogTarget() {
    return s3DeltaCatalogTarget;
  }

  public void setS3DeltaCatalogTarget(CodeGenConfigurationNodeS3DeltaCatalogTarget s3DeltaCatalogTarget) {
    this.s3DeltaCatalogTarget = s3DeltaCatalogTarget;
  }


  public CodeGenConfigurationNode s3DeltaDirectTarget(CodeGenConfigurationNodeS3DeltaDirectTarget s3DeltaDirectTarget) {
    this.s3DeltaDirectTarget = s3DeltaDirectTarget;
    return this;
  }

  /**
   * Get s3DeltaDirectTarget
   * @return s3DeltaDirectTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeS3DeltaDirectTarget getS3DeltaDirectTarget() {
    return s3DeltaDirectTarget;
  }

  public void setS3DeltaDirectTarget(CodeGenConfigurationNodeS3DeltaDirectTarget s3DeltaDirectTarget) {
    this.s3DeltaDirectTarget = s3DeltaDirectTarget;
  }


  public CodeGenConfigurationNode amazonRedshiftSource(CodeGenConfigurationNodeAmazonRedshiftSource amazonRedshiftSource) {
    this.amazonRedshiftSource = amazonRedshiftSource;
    return this;
  }

  /**
   * Get amazonRedshiftSource
   * @return amazonRedshiftSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeAmazonRedshiftSource getAmazonRedshiftSource() {
    return amazonRedshiftSource;
  }

  public void setAmazonRedshiftSource(CodeGenConfigurationNodeAmazonRedshiftSource amazonRedshiftSource) {
    this.amazonRedshiftSource = amazonRedshiftSource;
  }


  public CodeGenConfigurationNode amazonRedshiftTarget(CodeGenConfigurationNodeAmazonRedshiftTarget amazonRedshiftTarget) {
    this.amazonRedshiftTarget = amazonRedshiftTarget;
    return this;
  }

  /**
   * Get amazonRedshiftTarget
   * @return amazonRedshiftTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeAmazonRedshiftTarget getAmazonRedshiftTarget() {
    return amazonRedshiftTarget;
  }

  public void setAmazonRedshiftTarget(CodeGenConfigurationNodeAmazonRedshiftTarget amazonRedshiftTarget) {
    this.amazonRedshiftTarget = amazonRedshiftTarget;
  }


  public CodeGenConfigurationNode evaluateDataQualityMultiFrame(CodeGenConfigurationNodeEvaluateDataQualityMultiFrame evaluateDataQualityMultiFrame) {
    this.evaluateDataQualityMultiFrame = evaluateDataQualityMultiFrame;
    return this;
  }

  /**
   * Get evaluateDataQualityMultiFrame
   * @return evaluateDataQualityMultiFrame
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeEvaluateDataQualityMultiFrame getEvaluateDataQualityMultiFrame() {
    return evaluateDataQualityMultiFrame;
  }

  public void setEvaluateDataQualityMultiFrame(CodeGenConfigurationNodeEvaluateDataQualityMultiFrame evaluateDataQualityMultiFrame) {
    this.evaluateDataQualityMultiFrame = evaluateDataQualityMultiFrame;
  }


  public CodeGenConfigurationNode recipe(CodeGenConfigurationNodeRecipe recipe) {
    this.recipe = recipe;
    return this;
  }

  /**
   * Get recipe
   * @return recipe
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeRecipe getRecipe() {
    return recipe;
  }

  public void setRecipe(CodeGenConfigurationNodeRecipe recipe) {
    this.recipe = recipe;
  }


  public CodeGenConfigurationNode snowflakeSource(CodeGenConfigurationNodeSnowflakeSource snowflakeSource) {
    this.snowflakeSource = snowflakeSource;
    return this;
  }

  /**
   * Get snowflakeSource
   * @return snowflakeSource
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSnowflakeSource getSnowflakeSource() {
    return snowflakeSource;
  }

  public void setSnowflakeSource(CodeGenConfigurationNodeSnowflakeSource snowflakeSource) {
    this.snowflakeSource = snowflakeSource;
  }


  public CodeGenConfigurationNode snowflakeTarget(CodeGenConfigurationNodeSnowflakeTarget snowflakeTarget) {
    this.snowflakeTarget = snowflakeTarget;
    return this;
  }

  /**
   * Get snowflakeTarget
   * @return snowflakeTarget
   */
  @javax.annotation.Nullable
  public CodeGenConfigurationNodeSnowflakeTarget getSnowflakeTarget() {
    return snowflakeTarget;
  }

  public void setSnowflakeTarget(CodeGenConfigurationNodeSnowflakeTarget snowflakeTarget) {
    this.snowflakeTarget = snowflakeTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeGenConfigurationNode codeGenConfigurationNode = (CodeGenConfigurationNode) o;
    return Objects.equals(this.athenaConnectorSource, codeGenConfigurationNode.athenaConnectorSource) &&
        Objects.equals(this.jdBCConnectorSource, codeGenConfigurationNode.jdBCConnectorSource) &&
        Objects.equals(this.sparkConnectorSource, codeGenConfigurationNode.sparkConnectorSource) &&
        Objects.equals(this.catalogSource, codeGenConfigurationNode.catalogSource) &&
        Objects.equals(this.redshiftSource, codeGenConfigurationNode.redshiftSource) &&
        Objects.equals(this.s3CatalogSource, codeGenConfigurationNode.s3CatalogSource) &&
        Objects.equals(this.s3CsvSource, codeGenConfigurationNode.s3CsvSource) &&
        Objects.equals(this.s3JsonSource, codeGenConfigurationNode.s3JsonSource) &&
        Objects.equals(this.s3ParquetSource, codeGenConfigurationNode.s3ParquetSource) &&
        Objects.equals(this.relationalCatalogSource, codeGenConfigurationNode.relationalCatalogSource) &&
        Objects.equals(this.dynamoDBCatalogSource, codeGenConfigurationNode.dynamoDBCatalogSource) &&
        Objects.equals(this.jdBCConnectorTarget, codeGenConfigurationNode.jdBCConnectorTarget) &&
        Objects.equals(this.sparkConnectorTarget, codeGenConfigurationNode.sparkConnectorTarget) &&
        Objects.equals(this.catalogTarget, codeGenConfigurationNode.catalogTarget) &&
        Objects.equals(this.redshiftTarget, codeGenConfigurationNode.redshiftTarget) &&
        Objects.equals(this.s3CatalogTarget, codeGenConfigurationNode.s3CatalogTarget) &&
        Objects.equals(this.s3GlueParquetTarget, codeGenConfigurationNode.s3GlueParquetTarget) &&
        Objects.equals(this.s3DirectTarget, codeGenConfigurationNode.s3DirectTarget) &&
        Objects.equals(this.applyMapping, codeGenConfigurationNode.applyMapping) &&
        Objects.equals(this.selectFields, codeGenConfigurationNode.selectFields) &&
        Objects.equals(this.dropFields, codeGenConfigurationNode.dropFields) &&
        Objects.equals(this.renameField, codeGenConfigurationNode.renameField) &&
        Objects.equals(this.spigot, codeGenConfigurationNode.spigot) &&
        Objects.equals(this.join, codeGenConfigurationNode.join) &&
        Objects.equals(this.splitFields, codeGenConfigurationNode.splitFields) &&
        Objects.equals(this.selectFromCollection, codeGenConfigurationNode.selectFromCollection) &&
        Objects.equals(this.fillMissingValues, codeGenConfigurationNode.fillMissingValues) &&
        Objects.equals(this.filter, codeGenConfigurationNode.filter) &&
        Objects.equals(this.customCode, codeGenConfigurationNode.customCode) &&
        Objects.equals(this.sparkSQL, codeGenConfigurationNode.sparkSQL) &&
        Objects.equals(this.directKinesisSource, codeGenConfigurationNode.directKinesisSource) &&
        Objects.equals(this.directKafkaSource, codeGenConfigurationNode.directKafkaSource) &&
        Objects.equals(this.catalogKinesisSource, codeGenConfigurationNode.catalogKinesisSource) &&
        Objects.equals(this.catalogKafkaSource, codeGenConfigurationNode.catalogKafkaSource) &&
        Objects.equals(this.dropNullFields, codeGenConfigurationNode.dropNullFields) &&
        Objects.equals(this.merge, codeGenConfigurationNode.merge) &&
        Objects.equals(this.union, codeGenConfigurationNode.union) &&
        Objects.equals(this.piIDetection, codeGenConfigurationNode.piIDetection) &&
        Objects.equals(this.aggregate, codeGenConfigurationNode.aggregate) &&
        Objects.equals(this.dropDuplicates, codeGenConfigurationNode.dropDuplicates) &&
        Objects.equals(this.governedCatalogTarget, codeGenConfigurationNode.governedCatalogTarget) &&
        Objects.equals(this.governedCatalogSource, codeGenConfigurationNode.governedCatalogSource) &&
        Objects.equals(this.microsoftSQLServerCatalogSource, codeGenConfigurationNode.microsoftSQLServerCatalogSource) &&
        Objects.equals(this.mySQLCatalogSource, codeGenConfigurationNode.mySQLCatalogSource) &&
        Objects.equals(this.oracleSQLCatalogSource, codeGenConfigurationNode.oracleSQLCatalogSource) &&
        Objects.equals(this.postgreSQLCatalogSource, codeGenConfigurationNode.postgreSQLCatalogSource) &&
        Objects.equals(this.microsoftSQLServerCatalogTarget, codeGenConfigurationNode.microsoftSQLServerCatalogTarget) &&
        Objects.equals(this.mySQLCatalogTarget, codeGenConfigurationNode.mySQLCatalogTarget) &&
        Objects.equals(this.oracleSQLCatalogTarget, codeGenConfigurationNode.oracleSQLCatalogTarget) &&
        Objects.equals(this.postgreSQLCatalogTarget, codeGenConfigurationNode.postgreSQLCatalogTarget) &&
        Objects.equals(this.dynamicTransform, codeGenConfigurationNode.dynamicTransform) &&
        Objects.equals(this.evaluateDataQuality, codeGenConfigurationNode.evaluateDataQuality) &&
        Objects.equals(this.s3CatalogHudiSource, codeGenConfigurationNode.s3CatalogHudiSource) &&
        Objects.equals(this.catalogHudiSource, codeGenConfigurationNode.catalogHudiSource) &&
        Objects.equals(this.s3HudiSource, codeGenConfigurationNode.s3HudiSource) &&
        Objects.equals(this.s3HudiCatalogTarget, codeGenConfigurationNode.s3HudiCatalogTarget) &&
        Objects.equals(this.s3HudiDirectTarget, codeGenConfigurationNode.s3HudiDirectTarget) &&
        Objects.equals(this.directJDBCSource, codeGenConfigurationNode.directJDBCSource) &&
        Objects.equals(this.s3CatalogDeltaSource, codeGenConfigurationNode.s3CatalogDeltaSource) &&
        Objects.equals(this.catalogDeltaSource, codeGenConfigurationNode.catalogDeltaSource) &&
        Objects.equals(this.s3DeltaSource, codeGenConfigurationNode.s3DeltaSource) &&
        Objects.equals(this.s3DeltaCatalogTarget, codeGenConfigurationNode.s3DeltaCatalogTarget) &&
        Objects.equals(this.s3DeltaDirectTarget, codeGenConfigurationNode.s3DeltaDirectTarget) &&
        Objects.equals(this.amazonRedshiftSource, codeGenConfigurationNode.amazonRedshiftSource) &&
        Objects.equals(this.amazonRedshiftTarget, codeGenConfigurationNode.amazonRedshiftTarget) &&
        Objects.equals(this.evaluateDataQualityMultiFrame, codeGenConfigurationNode.evaluateDataQualityMultiFrame) &&
        Objects.equals(this.recipe, codeGenConfigurationNode.recipe) &&
        Objects.equals(this.snowflakeSource, codeGenConfigurationNode.snowflakeSource) &&
        Objects.equals(this.snowflakeTarget, codeGenConfigurationNode.snowflakeTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(athenaConnectorSource, jdBCConnectorSource, sparkConnectorSource, catalogSource, redshiftSource, s3CatalogSource, s3CsvSource, s3JsonSource, s3ParquetSource, relationalCatalogSource, dynamoDBCatalogSource, jdBCConnectorTarget, sparkConnectorTarget, catalogTarget, redshiftTarget, s3CatalogTarget, s3GlueParquetTarget, s3DirectTarget, applyMapping, selectFields, dropFields, renameField, spigot, join, splitFields, selectFromCollection, fillMissingValues, filter, customCode, sparkSQL, directKinesisSource, directKafkaSource, catalogKinesisSource, catalogKafkaSource, dropNullFields, merge, union, piIDetection, aggregate, dropDuplicates, governedCatalogTarget, governedCatalogSource, microsoftSQLServerCatalogSource, mySQLCatalogSource, oracleSQLCatalogSource, postgreSQLCatalogSource, microsoftSQLServerCatalogTarget, mySQLCatalogTarget, oracleSQLCatalogTarget, postgreSQLCatalogTarget, dynamicTransform, evaluateDataQuality, s3CatalogHudiSource, catalogHudiSource, s3HudiSource, s3HudiCatalogTarget, s3HudiDirectTarget, directJDBCSource, s3CatalogDeltaSource, catalogDeltaSource, s3DeltaSource, s3DeltaCatalogTarget, s3DeltaDirectTarget, amazonRedshiftSource, amazonRedshiftTarget, evaluateDataQualityMultiFrame, recipe, snowflakeSource, snowflakeTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeGenConfigurationNode {\n");
    sb.append("    athenaConnectorSource: ").append(toIndentedString(athenaConnectorSource)).append("\n");
    sb.append("    jdBCConnectorSource: ").append(toIndentedString(jdBCConnectorSource)).append("\n");
    sb.append("    sparkConnectorSource: ").append(toIndentedString(sparkConnectorSource)).append("\n");
    sb.append("    catalogSource: ").append(toIndentedString(catalogSource)).append("\n");
    sb.append("    redshiftSource: ").append(toIndentedString(redshiftSource)).append("\n");
    sb.append("    s3CatalogSource: ").append(toIndentedString(s3CatalogSource)).append("\n");
    sb.append("    s3CsvSource: ").append(toIndentedString(s3CsvSource)).append("\n");
    sb.append("    s3JsonSource: ").append(toIndentedString(s3JsonSource)).append("\n");
    sb.append("    s3ParquetSource: ").append(toIndentedString(s3ParquetSource)).append("\n");
    sb.append("    relationalCatalogSource: ").append(toIndentedString(relationalCatalogSource)).append("\n");
    sb.append("    dynamoDBCatalogSource: ").append(toIndentedString(dynamoDBCatalogSource)).append("\n");
    sb.append("    jdBCConnectorTarget: ").append(toIndentedString(jdBCConnectorTarget)).append("\n");
    sb.append("    sparkConnectorTarget: ").append(toIndentedString(sparkConnectorTarget)).append("\n");
    sb.append("    catalogTarget: ").append(toIndentedString(catalogTarget)).append("\n");
    sb.append("    redshiftTarget: ").append(toIndentedString(redshiftTarget)).append("\n");
    sb.append("    s3CatalogTarget: ").append(toIndentedString(s3CatalogTarget)).append("\n");
    sb.append("    s3GlueParquetTarget: ").append(toIndentedString(s3GlueParquetTarget)).append("\n");
    sb.append("    s3DirectTarget: ").append(toIndentedString(s3DirectTarget)).append("\n");
    sb.append("    applyMapping: ").append(toIndentedString(applyMapping)).append("\n");
    sb.append("    selectFields: ").append(toIndentedString(selectFields)).append("\n");
    sb.append("    dropFields: ").append(toIndentedString(dropFields)).append("\n");
    sb.append("    renameField: ").append(toIndentedString(renameField)).append("\n");
    sb.append("    spigot: ").append(toIndentedString(spigot)).append("\n");
    sb.append("    join: ").append(toIndentedString(join)).append("\n");
    sb.append("    splitFields: ").append(toIndentedString(splitFields)).append("\n");
    sb.append("    selectFromCollection: ").append(toIndentedString(selectFromCollection)).append("\n");
    sb.append("    fillMissingValues: ").append(toIndentedString(fillMissingValues)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    customCode: ").append(toIndentedString(customCode)).append("\n");
    sb.append("    sparkSQL: ").append(toIndentedString(sparkSQL)).append("\n");
    sb.append("    directKinesisSource: ").append(toIndentedString(directKinesisSource)).append("\n");
    sb.append("    directKafkaSource: ").append(toIndentedString(directKafkaSource)).append("\n");
    sb.append("    catalogKinesisSource: ").append(toIndentedString(catalogKinesisSource)).append("\n");
    sb.append("    catalogKafkaSource: ").append(toIndentedString(catalogKafkaSource)).append("\n");
    sb.append("    dropNullFields: ").append(toIndentedString(dropNullFields)).append("\n");
    sb.append("    merge: ").append(toIndentedString(merge)).append("\n");
    sb.append("    union: ").append(toIndentedString(union)).append("\n");
    sb.append("    piIDetection: ").append(toIndentedString(piIDetection)).append("\n");
    sb.append("    aggregate: ").append(toIndentedString(aggregate)).append("\n");
    sb.append("    dropDuplicates: ").append(toIndentedString(dropDuplicates)).append("\n");
    sb.append("    governedCatalogTarget: ").append(toIndentedString(governedCatalogTarget)).append("\n");
    sb.append("    governedCatalogSource: ").append(toIndentedString(governedCatalogSource)).append("\n");
    sb.append("    microsoftSQLServerCatalogSource: ").append(toIndentedString(microsoftSQLServerCatalogSource)).append("\n");
    sb.append("    mySQLCatalogSource: ").append(toIndentedString(mySQLCatalogSource)).append("\n");
    sb.append("    oracleSQLCatalogSource: ").append(toIndentedString(oracleSQLCatalogSource)).append("\n");
    sb.append("    postgreSQLCatalogSource: ").append(toIndentedString(postgreSQLCatalogSource)).append("\n");
    sb.append("    microsoftSQLServerCatalogTarget: ").append(toIndentedString(microsoftSQLServerCatalogTarget)).append("\n");
    sb.append("    mySQLCatalogTarget: ").append(toIndentedString(mySQLCatalogTarget)).append("\n");
    sb.append("    oracleSQLCatalogTarget: ").append(toIndentedString(oracleSQLCatalogTarget)).append("\n");
    sb.append("    postgreSQLCatalogTarget: ").append(toIndentedString(postgreSQLCatalogTarget)).append("\n");
    sb.append("    dynamicTransform: ").append(toIndentedString(dynamicTransform)).append("\n");
    sb.append("    evaluateDataQuality: ").append(toIndentedString(evaluateDataQuality)).append("\n");
    sb.append("    s3CatalogHudiSource: ").append(toIndentedString(s3CatalogHudiSource)).append("\n");
    sb.append("    catalogHudiSource: ").append(toIndentedString(catalogHudiSource)).append("\n");
    sb.append("    s3HudiSource: ").append(toIndentedString(s3HudiSource)).append("\n");
    sb.append("    s3HudiCatalogTarget: ").append(toIndentedString(s3HudiCatalogTarget)).append("\n");
    sb.append("    s3HudiDirectTarget: ").append(toIndentedString(s3HudiDirectTarget)).append("\n");
    sb.append("    directJDBCSource: ").append(toIndentedString(directJDBCSource)).append("\n");
    sb.append("    s3CatalogDeltaSource: ").append(toIndentedString(s3CatalogDeltaSource)).append("\n");
    sb.append("    catalogDeltaSource: ").append(toIndentedString(catalogDeltaSource)).append("\n");
    sb.append("    s3DeltaSource: ").append(toIndentedString(s3DeltaSource)).append("\n");
    sb.append("    s3DeltaCatalogTarget: ").append(toIndentedString(s3DeltaCatalogTarget)).append("\n");
    sb.append("    s3DeltaDirectTarget: ").append(toIndentedString(s3DeltaDirectTarget)).append("\n");
    sb.append("    amazonRedshiftSource: ").append(toIndentedString(amazonRedshiftSource)).append("\n");
    sb.append("    amazonRedshiftTarget: ").append(toIndentedString(amazonRedshiftTarget)).append("\n");
    sb.append("    evaluateDataQualityMultiFrame: ").append(toIndentedString(evaluateDataQualityMultiFrame)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("    snowflakeSource: ").append(toIndentedString(snowflakeSource)).append("\n");
    sb.append("    snowflakeTarget: ").append(toIndentedString(snowflakeTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AthenaConnectorSource");
    openapiFields.add("JDBCConnectorSource");
    openapiFields.add("SparkConnectorSource");
    openapiFields.add("CatalogSource");
    openapiFields.add("RedshiftSource");
    openapiFields.add("S3CatalogSource");
    openapiFields.add("S3CsvSource");
    openapiFields.add("S3JsonSource");
    openapiFields.add("S3ParquetSource");
    openapiFields.add("RelationalCatalogSource");
    openapiFields.add("DynamoDBCatalogSource");
    openapiFields.add("JDBCConnectorTarget");
    openapiFields.add("SparkConnectorTarget");
    openapiFields.add("CatalogTarget");
    openapiFields.add("RedshiftTarget");
    openapiFields.add("S3CatalogTarget");
    openapiFields.add("S3GlueParquetTarget");
    openapiFields.add("S3DirectTarget");
    openapiFields.add("ApplyMapping");
    openapiFields.add("SelectFields");
    openapiFields.add("DropFields");
    openapiFields.add("RenameField");
    openapiFields.add("Spigot");
    openapiFields.add("Join");
    openapiFields.add("SplitFields");
    openapiFields.add("SelectFromCollection");
    openapiFields.add("FillMissingValues");
    openapiFields.add("Filter");
    openapiFields.add("CustomCode");
    openapiFields.add("SparkSQL");
    openapiFields.add("DirectKinesisSource");
    openapiFields.add("DirectKafkaSource");
    openapiFields.add("CatalogKinesisSource");
    openapiFields.add("CatalogKafkaSource");
    openapiFields.add("DropNullFields");
    openapiFields.add("Merge");
    openapiFields.add("Union");
    openapiFields.add("PIIDetection");
    openapiFields.add("Aggregate");
    openapiFields.add("DropDuplicates");
    openapiFields.add("GovernedCatalogTarget");
    openapiFields.add("GovernedCatalogSource");
    openapiFields.add("MicrosoftSQLServerCatalogSource");
    openapiFields.add("MySQLCatalogSource");
    openapiFields.add("OracleSQLCatalogSource");
    openapiFields.add("PostgreSQLCatalogSource");
    openapiFields.add("MicrosoftSQLServerCatalogTarget");
    openapiFields.add("MySQLCatalogTarget");
    openapiFields.add("OracleSQLCatalogTarget");
    openapiFields.add("PostgreSQLCatalogTarget");
    openapiFields.add("DynamicTransform");
    openapiFields.add("EvaluateDataQuality");
    openapiFields.add("S3CatalogHudiSource");
    openapiFields.add("CatalogHudiSource");
    openapiFields.add("S3HudiSource");
    openapiFields.add("S3HudiCatalogTarget");
    openapiFields.add("S3HudiDirectTarget");
    openapiFields.add("DirectJDBCSource");
    openapiFields.add("S3CatalogDeltaSource");
    openapiFields.add("CatalogDeltaSource");
    openapiFields.add("S3DeltaSource");
    openapiFields.add("S3DeltaCatalogTarget");
    openapiFields.add("S3DeltaDirectTarget");
    openapiFields.add("AmazonRedshiftSource");
    openapiFields.add("AmazonRedshiftTarget");
    openapiFields.add("EvaluateDataQualityMultiFrame");
    openapiFields.add("Recipe");
    openapiFields.add("SnowflakeSource");
    openapiFields.add("SnowflakeTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeGenConfigurationNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeGenConfigurationNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeGenConfigurationNode is not found in the empty JSON string", CodeGenConfigurationNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeGenConfigurationNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeGenConfigurationNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AthenaConnectorSource`
      if (jsonObj.get("AthenaConnectorSource") != null && !jsonObj.get("AthenaConnectorSource").isJsonNull()) {
        CodeGenConfigurationNodeAthenaConnectorSource.validateJsonElement(jsonObj.get("AthenaConnectorSource"));
      }
      // validate the optional field `JDBCConnectorSource`
      if (jsonObj.get("JDBCConnectorSource") != null && !jsonObj.get("JDBCConnectorSource").isJsonNull()) {
        CodeGenConfigurationNodeJDBCConnectorSource.validateJsonElement(jsonObj.get("JDBCConnectorSource"));
      }
      // validate the optional field `SparkConnectorSource`
      if (jsonObj.get("SparkConnectorSource") != null && !jsonObj.get("SparkConnectorSource").isJsonNull()) {
        CodeGenConfigurationNodeSparkConnectorSource.validateJsonElement(jsonObj.get("SparkConnectorSource"));
      }
      // validate the optional field `CatalogSource`
      if (jsonObj.get("CatalogSource") != null && !jsonObj.get("CatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeCatalogSource.validateJsonElement(jsonObj.get("CatalogSource"));
      }
      // validate the optional field `RedshiftSource`
      if (jsonObj.get("RedshiftSource") != null && !jsonObj.get("RedshiftSource").isJsonNull()) {
        CodeGenConfigurationNodeRedshiftSource.validateJsonElement(jsonObj.get("RedshiftSource"));
      }
      // validate the optional field `S3CatalogSource`
      if (jsonObj.get("S3CatalogSource") != null && !jsonObj.get("S3CatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeS3CatalogSource.validateJsonElement(jsonObj.get("S3CatalogSource"));
      }
      // validate the optional field `S3CsvSource`
      if (jsonObj.get("S3CsvSource") != null && !jsonObj.get("S3CsvSource").isJsonNull()) {
        CodeGenConfigurationNodeS3CsvSource.validateJsonElement(jsonObj.get("S3CsvSource"));
      }
      // validate the optional field `S3JsonSource`
      if (jsonObj.get("S3JsonSource") != null && !jsonObj.get("S3JsonSource").isJsonNull()) {
        CodeGenConfigurationNodeS3JsonSource.validateJsonElement(jsonObj.get("S3JsonSource"));
      }
      // validate the optional field `S3ParquetSource`
      if (jsonObj.get("S3ParquetSource") != null && !jsonObj.get("S3ParquetSource").isJsonNull()) {
        CodeGenConfigurationNodeS3ParquetSource.validateJsonElement(jsonObj.get("S3ParquetSource"));
      }
      // validate the optional field `RelationalCatalogSource`
      if (jsonObj.get("RelationalCatalogSource") != null && !jsonObj.get("RelationalCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeRelationalCatalogSource.validateJsonElement(jsonObj.get("RelationalCatalogSource"));
      }
      // validate the optional field `DynamoDBCatalogSource`
      if (jsonObj.get("DynamoDBCatalogSource") != null && !jsonObj.get("DynamoDBCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeDynamoDBCatalogSource.validateJsonElement(jsonObj.get("DynamoDBCatalogSource"));
      }
      // validate the optional field `JDBCConnectorTarget`
      if (jsonObj.get("JDBCConnectorTarget") != null && !jsonObj.get("JDBCConnectorTarget").isJsonNull()) {
        CodeGenConfigurationNodeJDBCConnectorTarget.validateJsonElement(jsonObj.get("JDBCConnectorTarget"));
      }
      // validate the optional field `SparkConnectorTarget`
      if (jsonObj.get("SparkConnectorTarget") != null && !jsonObj.get("SparkConnectorTarget").isJsonNull()) {
        CodeGenConfigurationNodeSparkConnectorTarget.validateJsonElement(jsonObj.get("SparkConnectorTarget"));
      }
      // validate the optional field `CatalogTarget`
      if (jsonObj.get("CatalogTarget") != null && !jsonObj.get("CatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeCatalogTarget.validateJsonElement(jsonObj.get("CatalogTarget"));
      }
      // validate the optional field `RedshiftTarget`
      if (jsonObj.get("RedshiftTarget") != null && !jsonObj.get("RedshiftTarget").isJsonNull()) {
        CodeGenConfigurationNodeRedshiftTarget.validateJsonElement(jsonObj.get("RedshiftTarget"));
      }
      // validate the optional field `S3CatalogTarget`
      if (jsonObj.get("S3CatalogTarget") != null && !jsonObj.get("S3CatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3CatalogTarget.validateJsonElement(jsonObj.get("S3CatalogTarget"));
      }
      // validate the optional field `S3GlueParquetTarget`
      if (jsonObj.get("S3GlueParquetTarget") != null && !jsonObj.get("S3GlueParquetTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3GlueParquetTarget.validateJsonElement(jsonObj.get("S3GlueParquetTarget"));
      }
      // validate the optional field `S3DirectTarget`
      if (jsonObj.get("S3DirectTarget") != null && !jsonObj.get("S3DirectTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3DirectTarget.validateJsonElement(jsonObj.get("S3DirectTarget"));
      }
      // validate the optional field `ApplyMapping`
      if (jsonObj.get("ApplyMapping") != null && !jsonObj.get("ApplyMapping").isJsonNull()) {
        CodeGenConfigurationNodeApplyMapping.validateJsonElement(jsonObj.get("ApplyMapping"));
      }
      // validate the optional field `SelectFields`
      if (jsonObj.get("SelectFields") != null && !jsonObj.get("SelectFields").isJsonNull()) {
        CodeGenConfigurationNodeSelectFields.validateJsonElement(jsonObj.get("SelectFields"));
      }
      // validate the optional field `DropFields`
      if (jsonObj.get("DropFields") != null && !jsonObj.get("DropFields").isJsonNull()) {
        CodeGenConfigurationNodeDropFields.validateJsonElement(jsonObj.get("DropFields"));
      }
      // validate the optional field `RenameField`
      if (jsonObj.get("RenameField") != null && !jsonObj.get("RenameField").isJsonNull()) {
        CodeGenConfigurationNodeRenameField.validateJsonElement(jsonObj.get("RenameField"));
      }
      // validate the optional field `Spigot`
      if (jsonObj.get("Spigot") != null && !jsonObj.get("Spigot").isJsonNull()) {
        CodeGenConfigurationNodeSpigot.validateJsonElement(jsonObj.get("Spigot"));
      }
      // validate the optional field `Join`
      if (jsonObj.get("Join") != null && !jsonObj.get("Join").isJsonNull()) {
        CodeGenConfigurationNodeJoin.validateJsonElement(jsonObj.get("Join"));
      }
      // validate the optional field `SplitFields`
      if (jsonObj.get("SplitFields") != null && !jsonObj.get("SplitFields").isJsonNull()) {
        CodeGenConfigurationNodeSplitFields.validateJsonElement(jsonObj.get("SplitFields"));
      }
      // validate the optional field `SelectFromCollection`
      if (jsonObj.get("SelectFromCollection") != null && !jsonObj.get("SelectFromCollection").isJsonNull()) {
        CodeGenConfigurationNodeSelectFromCollection.validateJsonElement(jsonObj.get("SelectFromCollection"));
      }
      // validate the optional field `FillMissingValues`
      if (jsonObj.get("FillMissingValues") != null && !jsonObj.get("FillMissingValues").isJsonNull()) {
        CodeGenConfigurationNodeFillMissingValues.validateJsonElement(jsonObj.get("FillMissingValues"));
      }
      // validate the optional field `Filter`
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        CodeGenConfigurationNodeFilter.validateJsonElement(jsonObj.get("Filter"));
      }
      // validate the optional field `CustomCode`
      if (jsonObj.get("CustomCode") != null && !jsonObj.get("CustomCode").isJsonNull()) {
        CodeGenConfigurationNodeCustomCode.validateJsonElement(jsonObj.get("CustomCode"));
      }
      // validate the optional field `SparkSQL`
      if (jsonObj.get("SparkSQL") != null && !jsonObj.get("SparkSQL").isJsonNull()) {
        CodeGenConfigurationNodeSparkSQL.validateJsonElement(jsonObj.get("SparkSQL"));
      }
      // validate the optional field `DirectKinesisSource`
      if (jsonObj.get("DirectKinesisSource") != null && !jsonObj.get("DirectKinesisSource").isJsonNull()) {
        CodeGenConfigurationNodeDirectKinesisSource.validateJsonElement(jsonObj.get("DirectKinesisSource"));
      }
      // validate the optional field `DirectKafkaSource`
      if (jsonObj.get("DirectKafkaSource") != null && !jsonObj.get("DirectKafkaSource").isJsonNull()) {
        CodeGenConfigurationNodeDirectKafkaSource.validateJsonElement(jsonObj.get("DirectKafkaSource"));
      }
      // validate the optional field `CatalogKinesisSource`
      if (jsonObj.get("CatalogKinesisSource") != null && !jsonObj.get("CatalogKinesisSource").isJsonNull()) {
        CodeGenConfigurationNodeCatalogKinesisSource.validateJsonElement(jsonObj.get("CatalogKinesisSource"));
      }
      // validate the optional field `CatalogKafkaSource`
      if (jsonObj.get("CatalogKafkaSource") != null && !jsonObj.get("CatalogKafkaSource").isJsonNull()) {
        CodeGenConfigurationNodeCatalogKafkaSource.validateJsonElement(jsonObj.get("CatalogKafkaSource"));
      }
      // validate the optional field `DropNullFields`
      if (jsonObj.get("DropNullFields") != null && !jsonObj.get("DropNullFields").isJsonNull()) {
        CodeGenConfigurationNodeDropNullFields.validateJsonElement(jsonObj.get("DropNullFields"));
      }
      // validate the optional field `Merge`
      if (jsonObj.get("Merge") != null && !jsonObj.get("Merge").isJsonNull()) {
        CodeGenConfigurationNodeMerge.validateJsonElement(jsonObj.get("Merge"));
      }
      // validate the optional field `Union`
      if (jsonObj.get("Union") != null && !jsonObj.get("Union").isJsonNull()) {
        CodeGenConfigurationNodeUnion.validateJsonElement(jsonObj.get("Union"));
      }
      // validate the optional field `PIIDetection`
      if (jsonObj.get("PIIDetection") != null && !jsonObj.get("PIIDetection").isJsonNull()) {
        CodeGenConfigurationNodePIIDetection.validateJsonElement(jsonObj.get("PIIDetection"));
      }
      // validate the optional field `Aggregate`
      if (jsonObj.get("Aggregate") != null && !jsonObj.get("Aggregate").isJsonNull()) {
        CodeGenConfigurationNodeAggregate.validateJsonElement(jsonObj.get("Aggregate"));
      }
      // validate the optional field `DropDuplicates`
      if (jsonObj.get("DropDuplicates") != null && !jsonObj.get("DropDuplicates").isJsonNull()) {
        CodeGenConfigurationNodeDropDuplicates.validateJsonElement(jsonObj.get("DropDuplicates"));
      }
      // validate the optional field `GovernedCatalogTarget`
      if (jsonObj.get("GovernedCatalogTarget") != null && !jsonObj.get("GovernedCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeGovernedCatalogTarget.validateJsonElement(jsonObj.get("GovernedCatalogTarget"));
      }
      // validate the optional field `GovernedCatalogSource`
      if (jsonObj.get("GovernedCatalogSource") != null && !jsonObj.get("GovernedCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeGovernedCatalogSource.validateJsonElement(jsonObj.get("GovernedCatalogSource"));
      }
      // validate the optional field `MicrosoftSQLServerCatalogSource`
      if (jsonObj.get("MicrosoftSQLServerCatalogSource") != null && !jsonObj.get("MicrosoftSQLServerCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource.validateJsonElement(jsonObj.get("MicrosoftSQLServerCatalogSource"));
      }
      // validate the optional field `MySQLCatalogSource`
      if (jsonObj.get("MySQLCatalogSource") != null && !jsonObj.get("MySQLCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeMySQLCatalogSource.validateJsonElement(jsonObj.get("MySQLCatalogSource"));
      }
      // validate the optional field `OracleSQLCatalogSource`
      if (jsonObj.get("OracleSQLCatalogSource") != null && !jsonObj.get("OracleSQLCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodeOracleSQLCatalogSource.validateJsonElement(jsonObj.get("OracleSQLCatalogSource"));
      }
      // validate the optional field `PostgreSQLCatalogSource`
      if (jsonObj.get("PostgreSQLCatalogSource") != null && !jsonObj.get("PostgreSQLCatalogSource").isJsonNull()) {
        CodeGenConfigurationNodePostgreSQLCatalogSource.validateJsonElement(jsonObj.get("PostgreSQLCatalogSource"));
      }
      // validate the optional field `MicrosoftSQLServerCatalogTarget`
      if (jsonObj.get("MicrosoftSQLServerCatalogTarget") != null && !jsonObj.get("MicrosoftSQLServerCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget.validateJsonElement(jsonObj.get("MicrosoftSQLServerCatalogTarget"));
      }
      // validate the optional field `MySQLCatalogTarget`
      if (jsonObj.get("MySQLCatalogTarget") != null && !jsonObj.get("MySQLCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeMySQLCatalogTarget.validateJsonElement(jsonObj.get("MySQLCatalogTarget"));
      }
      // validate the optional field `OracleSQLCatalogTarget`
      if (jsonObj.get("OracleSQLCatalogTarget") != null && !jsonObj.get("OracleSQLCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeOracleSQLCatalogTarget.validateJsonElement(jsonObj.get("OracleSQLCatalogTarget"));
      }
      // validate the optional field `PostgreSQLCatalogTarget`
      if (jsonObj.get("PostgreSQLCatalogTarget") != null && !jsonObj.get("PostgreSQLCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodePostgreSQLCatalogTarget.validateJsonElement(jsonObj.get("PostgreSQLCatalogTarget"));
      }
      // validate the optional field `DynamicTransform`
      if (jsonObj.get("DynamicTransform") != null && !jsonObj.get("DynamicTransform").isJsonNull()) {
        CodeGenConfigurationNodeDynamicTransform.validateJsonElement(jsonObj.get("DynamicTransform"));
      }
      // validate the optional field `EvaluateDataQuality`
      if (jsonObj.get("EvaluateDataQuality") != null && !jsonObj.get("EvaluateDataQuality").isJsonNull()) {
        CodeGenConfigurationNodeEvaluateDataQuality.validateJsonElement(jsonObj.get("EvaluateDataQuality"));
      }
      // validate the optional field `S3CatalogHudiSource`
      if (jsonObj.get("S3CatalogHudiSource") != null && !jsonObj.get("S3CatalogHudiSource").isJsonNull()) {
        CodeGenConfigurationNodeS3CatalogHudiSource.validateJsonElement(jsonObj.get("S3CatalogHudiSource"));
      }
      // validate the optional field `CatalogHudiSource`
      if (jsonObj.get("CatalogHudiSource") != null && !jsonObj.get("CatalogHudiSource").isJsonNull()) {
        CodeGenConfigurationNodeCatalogHudiSource.validateJsonElement(jsonObj.get("CatalogHudiSource"));
      }
      // validate the optional field `S3HudiSource`
      if (jsonObj.get("S3HudiSource") != null && !jsonObj.get("S3HudiSource").isJsonNull()) {
        CodeGenConfigurationNodeS3HudiSource.validateJsonElement(jsonObj.get("S3HudiSource"));
      }
      // validate the optional field `S3HudiCatalogTarget`
      if (jsonObj.get("S3HudiCatalogTarget") != null && !jsonObj.get("S3HudiCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3HudiCatalogTarget.validateJsonElement(jsonObj.get("S3HudiCatalogTarget"));
      }
      // validate the optional field `S3HudiDirectTarget`
      if (jsonObj.get("S3HudiDirectTarget") != null && !jsonObj.get("S3HudiDirectTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3HudiDirectTarget.validateJsonElement(jsonObj.get("S3HudiDirectTarget"));
      }
      // validate the optional field `DirectJDBCSource`
      if (jsonObj.get("DirectJDBCSource") != null && !jsonObj.get("DirectJDBCSource").isJsonNull()) {
        DirectJDBCSource.validateJsonElement(jsonObj.get("DirectJDBCSource"));
      }
      // validate the optional field `S3CatalogDeltaSource`
      if (jsonObj.get("S3CatalogDeltaSource") != null && !jsonObj.get("S3CatalogDeltaSource").isJsonNull()) {
        CodeGenConfigurationNodeS3CatalogDeltaSource.validateJsonElement(jsonObj.get("S3CatalogDeltaSource"));
      }
      // validate the optional field `CatalogDeltaSource`
      if (jsonObj.get("CatalogDeltaSource") != null && !jsonObj.get("CatalogDeltaSource").isJsonNull()) {
        CodeGenConfigurationNodeCatalogDeltaSource.validateJsonElement(jsonObj.get("CatalogDeltaSource"));
      }
      // validate the optional field `S3DeltaSource`
      if (jsonObj.get("S3DeltaSource") != null && !jsonObj.get("S3DeltaSource").isJsonNull()) {
        CodeGenConfigurationNodeS3DeltaSource.validateJsonElement(jsonObj.get("S3DeltaSource"));
      }
      // validate the optional field `S3DeltaCatalogTarget`
      if (jsonObj.get("S3DeltaCatalogTarget") != null && !jsonObj.get("S3DeltaCatalogTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3DeltaCatalogTarget.validateJsonElement(jsonObj.get("S3DeltaCatalogTarget"));
      }
      // validate the optional field `S3DeltaDirectTarget`
      if (jsonObj.get("S3DeltaDirectTarget") != null && !jsonObj.get("S3DeltaDirectTarget").isJsonNull()) {
        CodeGenConfigurationNodeS3DeltaDirectTarget.validateJsonElement(jsonObj.get("S3DeltaDirectTarget"));
      }
      // validate the optional field `AmazonRedshiftSource`
      if (jsonObj.get("AmazonRedshiftSource") != null && !jsonObj.get("AmazonRedshiftSource").isJsonNull()) {
        CodeGenConfigurationNodeAmazonRedshiftSource.validateJsonElement(jsonObj.get("AmazonRedshiftSource"));
      }
      // validate the optional field `AmazonRedshiftTarget`
      if (jsonObj.get("AmazonRedshiftTarget") != null && !jsonObj.get("AmazonRedshiftTarget").isJsonNull()) {
        CodeGenConfigurationNodeAmazonRedshiftTarget.validateJsonElement(jsonObj.get("AmazonRedshiftTarget"));
      }
      // validate the optional field `EvaluateDataQualityMultiFrame`
      if (jsonObj.get("EvaluateDataQualityMultiFrame") != null && !jsonObj.get("EvaluateDataQualityMultiFrame").isJsonNull()) {
        CodeGenConfigurationNodeEvaluateDataQualityMultiFrame.validateJsonElement(jsonObj.get("EvaluateDataQualityMultiFrame"));
      }
      // validate the optional field `Recipe`
      if (jsonObj.get("Recipe") != null && !jsonObj.get("Recipe").isJsonNull()) {
        CodeGenConfigurationNodeRecipe.validateJsonElement(jsonObj.get("Recipe"));
      }
      // validate the optional field `SnowflakeSource`
      if (jsonObj.get("SnowflakeSource") != null && !jsonObj.get("SnowflakeSource").isJsonNull()) {
        CodeGenConfigurationNodeSnowflakeSource.validateJsonElement(jsonObj.get("SnowflakeSource"));
      }
      // validate the optional field `SnowflakeTarget`
      if (jsonObj.get("SnowflakeTarget") != null && !jsonObj.get("SnowflakeTarget").isJsonNull()) {
        CodeGenConfigurationNodeSnowflakeTarget.validateJsonElement(jsonObj.get("SnowflakeTarget"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeGenConfigurationNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeGenConfigurationNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeGenConfigurationNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeGenConfigurationNode.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeGenConfigurationNode>() {
           @Override
           public void write(JsonWriter out, CodeGenConfigurationNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeGenConfigurationNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeGenConfigurationNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeGenConfigurationNode
   * @throws IOException if the JSON string is invalid with respect to CodeGenConfigurationNode
   */
  public static CodeGenConfigurationNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeGenConfigurationNode.class);
  }

  /**
   * Convert an instance of CodeGenConfigurationNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

