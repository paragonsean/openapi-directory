/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BlueprintLastActiveDefinition;
import org.openapitools.client.model.BlueprintStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a blueprint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Blueprint {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED_ON = "CreatedOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "LastModifiedOn";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private OffsetDateTime lastModifiedOn;

  public static final String SERIALIZED_NAME_PARAMETER_SPEC = "ParameterSpec";
  @SerializedName(SERIALIZED_NAME_PARAMETER_SPEC)
  private String parameterSpec;

  public static final String SERIALIZED_NAME_BLUEPRINT_LOCATION = "BlueprintLocation";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_LOCATION)
  private String blueprintLocation;

  public static final String SERIALIZED_NAME_BLUEPRINT_SERVICE_LOCATION = "BlueprintServiceLocation";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_SERVICE_LOCATION)
  private String blueprintServiceLocation;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BlueprintStatus status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_LAST_ACTIVE_DEFINITION = "LastActiveDefinition";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVE_DEFINITION)
  private BlueprintLastActiveDefinition lastActiveDefinition;

  public Blueprint() {
  }

  public Blueprint name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Blueprint description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Blueprint createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * Get createdOn
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public Blueprint lastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

  /**
   * Get lastModifiedOn
   * @return lastModifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedOn() {
    return lastModifiedOn;
  }

  public void setLastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public Blueprint parameterSpec(String parameterSpec) {
    this.parameterSpec = parameterSpec;
    return this;
  }

  /**
   * Get parameterSpec
   * @return parameterSpec
   */
  @javax.annotation.Nullable
  public String getParameterSpec() {
    return parameterSpec;
  }

  public void setParameterSpec(String parameterSpec) {
    this.parameterSpec = parameterSpec;
  }


  public Blueprint blueprintLocation(String blueprintLocation) {
    this.blueprintLocation = blueprintLocation;
    return this;
  }

  /**
   * Get blueprintLocation
   * @return blueprintLocation
   */
  @javax.annotation.Nullable
  public String getBlueprintLocation() {
    return blueprintLocation;
  }

  public void setBlueprintLocation(String blueprintLocation) {
    this.blueprintLocation = blueprintLocation;
  }


  public Blueprint blueprintServiceLocation(String blueprintServiceLocation) {
    this.blueprintServiceLocation = blueprintServiceLocation;
    return this;
  }

  /**
   * Get blueprintServiceLocation
   * @return blueprintServiceLocation
   */
  @javax.annotation.Nullable
  public String getBlueprintServiceLocation() {
    return blueprintServiceLocation;
  }

  public void setBlueprintServiceLocation(String blueprintServiceLocation) {
    this.blueprintServiceLocation = blueprintServiceLocation;
  }


  public Blueprint status(BlueprintStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public BlueprintStatus getStatus() {
    return status;
  }

  public void setStatus(BlueprintStatus status) {
    this.status = status;
  }


  public Blueprint errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Blueprint lastActiveDefinition(BlueprintLastActiveDefinition lastActiveDefinition) {
    this.lastActiveDefinition = lastActiveDefinition;
    return this;
  }

  /**
   * Get lastActiveDefinition
   * @return lastActiveDefinition
   */
  @javax.annotation.Nullable
  public BlueprintLastActiveDefinition getLastActiveDefinition() {
    return lastActiveDefinition;
  }

  public void setLastActiveDefinition(BlueprintLastActiveDefinition lastActiveDefinition) {
    this.lastActiveDefinition = lastActiveDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Blueprint blueprint = (Blueprint) o;
    return Objects.equals(this.name, blueprint.name) &&
        Objects.equals(this.description, blueprint.description) &&
        Objects.equals(this.createdOn, blueprint.createdOn) &&
        Objects.equals(this.lastModifiedOn, blueprint.lastModifiedOn) &&
        Objects.equals(this.parameterSpec, blueprint.parameterSpec) &&
        Objects.equals(this.blueprintLocation, blueprint.blueprintLocation) &&
        Objects.equals(this.blueprintServiceLocation, blueprint.blueprintServiceLocation) &&
        Objects.equals(this.status, blueprint.status) &&
        Objects.equals(this.errorMessage, blueprint.errorMessage) &&
        Objects.equals(this.lastActiveDefinition, blueprint.lastActiveDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, createdOn, lastModifiedOn, parameterSpec, blueprintLocation, blueprintServiceLocation, status, errorMessage, lastActiveDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Blueprint {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    parameterSpec: ").append(toIndentedString(parameterSpec)).append("\n");
    sb.append("    blueprintLocation: ").append(toIndentedString(blueprintLocation)).append("\n");
    sb.append("    blueprintServiceLocation: ").append(toIndentedString(blueprintServiceLocation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    lastActiveDefinition: ").append(toIndentedString(lastActiveDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("CreatedOn");
    openapiFields.add("LastModifiedOn");
    openapiFields.add("ParameterSpec");
    openapiFields.add("BlueprintLocation");
    openapiFields.add("BlueprintServiceLocation");
    openapiFields.add("Status");
    openapiFields.add("ErrorMessage");
    openapiFields.add("LastActiveDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Blueprint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Blueprint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Blueprint is not found in the empty JSON string", Blueprint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Blueprint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Blueprint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `CreatedOn`
      if (jsonObj.get("CreatedOn") != null && !jsonObj.get("CreatedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedOn"));
      }
      // validate the optional field `LastModifiedOn`
      if (jsonObj.get("LastModifiedOn") != null && !jsonObj.get("LastModifiedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedOn"));
      }
      // validate the optional field `ParameterSpec`
      if (jsonObj.get("ParameterSpec") != null && !jsonObj.get("ParameterSpec").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterSpec"));
      }
      // validate the optional field `BlueprintLocation`
      if (jsonObj.get("BlueprintLocation") != null && !jsonObj.get("BlueprintLocation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BlueprintLocation"));
      }
      // validate the optional field `BlueprintServiceLocation`
      if (jsonObj.get("BlueprintServiceLocation") != null && !jsonObj.get("BlueprintServiceLocation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BlueprintServiceLocation"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        BlueprintStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `LastActiveDefinition`
      if (jsonObj.get("LastActiveDefinition") != null && !jsonObj.get("LastActiveDefinition").isJsonNull()) {
        BlueprintLastActiveDefinition.validateJsonElement(jsonObj.get("LastActiveDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Blueprint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Blueprint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Blueprint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Blueprint.class));

       return (TypeAdapter<T>) new TypeAdapter<Blueprint>() {
           @Override
           public void write(JsonWriter out, Blueprint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Blueprint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Blueprint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Blueprint
   * @throws IOException if the JSON string is invalid with respect to Blueprint
   */
  public static Blueprint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Blueprint.class);
  }

  /**
   * Convert an instance of Blueprint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

