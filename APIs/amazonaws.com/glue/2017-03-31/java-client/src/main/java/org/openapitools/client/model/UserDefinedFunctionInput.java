/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PrincipalType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure used to create or update a user-defined function.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserDefinedFunctionInput {
  public static final String SERIALIZED_NAME_FUNCTION_NAME = "FunctionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  public static final String SERIALIZED_NAME_CLASS_NAME = "ClassName";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private String className;

  public static final String SERIALIZED_NAME_OWNER_NAME = "OwnerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_OWNER_TYPE = "OwnerType";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  private PrincipalType ownerType;

  public static final String SERIALIZED_NAME_RESOURCE_URIS = "ResourceUris";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URIS)
  private List resourceUris;

  public UserDefinedFunctionInput() {
  }

  public UserDefinedFunctionInput functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

  /**
   * Get functionName
   * @return functionName
   */
  @javax.annotation.Nullable
  public String getFunctionName() {
    return functionName;
  }

  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public UserDefinedFunctionInput className(String className) {
    this.className = className;
    return this;
  }

  /**
   * Get className
   * @return className
   */
  @javax.annotation.Nullable
  public String getClassName() {
    return className;
  }

  public void setClassName(String className) {
    this.className = className;
  }


  public UserDefinedFunctionInput ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public UserDefinedFunctionInput ownerType(PrincipalType ownerType) {
    this.ownerType = ownerType;
    return this;
  }

  /**
   * Get ownerType
   * @return ownerType
   */
  @javax.annotation.Nullable
  public PrincipalType getOwnerType() {
    return ownerType;
  }

  public void setOwnerType(PrincipalType ownerType) {
    this.ownerType = ownerType;
  }


  public UserDefinedFunctionInput resourceUris(List resourceUris) {
    this.resourceUris = resourceUris;
    return this;
  }

  /**
   * Get resourceUris
   * @return resourceUris
   */
  @javax.annotation.Nullable
  public List getResourceUris() {
    return resourceUris;
  }

  public void setResourceUris(List resourceUris) {
    this.resourceUris = resourceUris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDefinedFunctionInput userDefinedFunctionInput = (UserDefinedFunctionInput) o;
    return Objects.equals(this.functionName, userDefinedFunctionInput.functionName) &&
        Objects.equals(this.className, userDefinedFunctionInput.className) &&
        Objects.equals(this.ownerName, userDefinedFunctionInput.ownerName) &&
        Objects.equals(this.ownerType, userDefinedFunctionInput.ownerType) &&
        Objects.equals(this.resourceUris, userDefinedFunctionInput.resourceUris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionName, className, ownerName, ownerType, resourceUris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDefinedFunctionInput {\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    resourceUris: ").append(toIndentedString(resourceUris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FunctionName");
    openapiFields.add("ClassName");
    openapiFields.add("OwnerName");
    openapiFields.add("OwnerType");
    openapiFields.add("ResourceUris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDefinedFunctionInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDefinedFunctionInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDefinedFunctionInput is not found in the empty JSON string", UserDefinedFunctionInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDefinedFunctionInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDefinedFunctionInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FunctionName`
      if (jsonObj.get("FunctionName") != null && !jsonObj.get("FunctionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FunctionName"));
      }
      // validate the optional field `ClassName`
      if (jsonObj.get("ClassName") != null && !jsonObj.get("ClassName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClassName"));
      }
      // validate the optional field `OwnerName`
      if (jsonObj.get("OwnerName") != null && !jsonObj.get("OwnerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerName"));
      }
      // validate the optional field `OwnerType`
      if (jsonObj.get("OwnerType") != null && !jsonObj.get("OwnerType").isJsonNull()) {
        PrincipalType.validateJsonElement(jsonObj.get("OwnerType"));
      }
      // validate the optional field `ResourceUris`
      if (jsonObj.get("ResourceUris") != null && !jsonObj.get("ResourceUris").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceUris"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDefinedFunctionInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDefinedFunctionInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDefinedFunctionInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDefinedFunctionInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDefinedFunctionInput>() {
           @Override
           public void write(JsonWriter out, UserDefinedFunctionInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDefinedFunctionInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDefinedFunctionInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDefinedFunctionInput
   * @throws IOException if the JSON string is invalid with respect to UserDefinedFunctionInput
   */
  public static UserDefinedFunctionInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDefinedFunctionInput.class);
  }

  /**
   * Convert an instance of UserDefinedFunctionInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

