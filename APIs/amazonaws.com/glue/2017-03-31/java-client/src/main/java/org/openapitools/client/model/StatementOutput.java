/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StatementOutputData;
import org.openapitools.client.model.StatementState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatementOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatementOutput {
  public static final String SERIALIZED_NAME_DATA = "Data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private StatementOutputData data;

  public static final String SERIALIZED_NAME_EXECUTION_COUNT = "ExecutionCount";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COUNT)
  private Integer executionCount;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatementState status;

  public static final String SERIALIZED_NAME_ERROR_NAME = "ErrorName";
  @SerializedName(SERIALIZED_NAME_ERROR_NAME)
  private String errorName;

  public static final String SERIALIZED_NAME_ERROR_VALUE = "ErrorValue";
  @SerializedName(SERIALIZED_NAME_ERROR_VALUE)
  private String errorValue;

  public static final String SERIALIZED_NAME_TRACEBACK = "Traceback";
  @SerializedName(SERIALIZED_NAME_TRACEBACK)
  private List traceback;

  public StatementOutput() {
  }

  public StatementOutput data(StatementOutputData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public StatementOutputData getData() {
    return data;
  }

  public void setData(StatementOutputData data) {
    this.data = data;
  }


  public StatementOutput executionCount(Integer executionCount) {
    this.executionCount = executionCount;
    return this;
  }

  /**
   * Get executionCount
   * @return executionCount
   */
  @javax.annotation.Nullable
  public Integer getExecutionCount() {
    return executionCount;
  }

  public void setExecutionCount(Integer executionCount) {
    this.executionCount = executionCount;
  }


  public StatementOutput status(StatementState status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatementState getStatus() {
    return status;
  }

  public void setStatus(StatementState status) {
    this.status = status;
  }


  public StatementOutput errorName(String errorName) {
    this.errorName = errorName;
    return this;
  }

  /**
   * Get errorName
   * @return errorName
   */
  @javax.annotation.Nullable
  public String getErrorName() {
    return errorName;
  }

  public void setErrorName(String errorName) {
    this.errorName = errorName;
  }


  public StatementOutput errorValue(String errorValue) {
    this.errorValue = errorValue;
    return this;
  }

  /**
   * Get errorValue
   * @return errorValue
   */
  @javax.annotation.Nullable
  public String getErrorValue() {
    return errorValue;
  }

  public void setErrorValue(String errorValue) {
    this.errorValue = errorValue;
  }


  public StatementOutput traceback(List traceback) {
    this.traceback = traceback;
    return this;
  }

  /**
   * Get traceback
   * @return traceback
   */
  @javax.annotation.Nullable
  public List getTraceback() {
    return traceback;
  }

  public void setTraceback(List traceback) {
    this.traceback = traceback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatementOutput statementOutput = (StatementOutput) o;
    return Objects.equals(this.data, statementOutput.data) &&
        Objects.equals(this.executionCount, statementOutput.executionCount) &&
        Objects.equals(this.status, statementOutput.status) &&
        Objects.equals(this.errorName, statementOutput.errorName) &&
        Objects.equals(this.errorValue, statementOutput.errorValue) &&
        Objects.equals(this.traceback, statementOutput.traceback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, executionCount, status, errorName, errorValue, traceback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatementOutput {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    executionCount: ").append(toIndentedString(executionCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorName: ").append(toIndentedString(errorName)).append("\n");
    sb.append("    errorValue: ").append(toIndentedString(errorValue)).append("\n");
    sb.append("    traceback: ").append(toIndentedString(traceback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Data");
    openapiFields.add("ExecutionCount");
    openapiFields.add("Status");
    openapiFields.add("ErrorName");
    openapiFields.add("ErrorValue");
    openapiFields.add("Traceback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatementOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatementOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatementOutput is not found in the empty JSON string", StatementOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatementOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatementOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Data`
      if (jsonObj.get("Data") != null && !jsonObj.get("Data").isJsonNull()) {
        StatementOutputData.validateJsonElement(jsonObj.get("Data"));
      }
      // validate the optional field `ExecutionCount`
      if (jsonObj.get("ExecutionCount") != null && !jsonObj.get("ExecutionCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ExecutionCount"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatementState.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorName`
      if (jsonObj.get("ErrorName") != null && !jsonObj.get("ErrorName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorName"));
      }
      // validate the optional field `ErrorValue`
      if (jsonObj.get("ErrorValue") != null && !jsonObj.get("ErrorValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorValue"));
      }
      // validate the optional field `Traceback`
      if (jsonObj.get("Traceback") != null && !jsonObj.get("Traceback").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Traceback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatementOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatementOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatementOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatementOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<StatementOutput>() {
           @Override
           public void write(JsonWriter out, StatementOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatementOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatementOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatementOutput
   * @throws IOException if the JSON string is invalid with respect to StatementOutput
   */
  public static StatementOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatementOutput.class);
  }

  /**
   * Convert an instance of StatementOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

