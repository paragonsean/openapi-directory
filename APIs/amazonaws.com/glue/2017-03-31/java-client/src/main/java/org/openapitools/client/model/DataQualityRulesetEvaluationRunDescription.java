/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DataQualityRulesetEvaluationRunDescriptionDataSource;
import org.openapitools.client.model.TaskStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the result of a data quality ruleset evaluation run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataQualityRulesetEvaluationRunDescription {
  public static final String SERIALIZED_NAME_RUN_ID = "RunId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TaskStatusType status;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataQualityRulesetEvaluationRunDescriptionDataSource dataSource;

  public DataQualityRulesetEvaluationRunDescription() {
  }

  public DataQualityRulesetEvaluationRunDescription runId(String runId) {
    this.runId = runId;
    return this;
  }

  /**
   * Get runId
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public DataQualityRulesetEvaluationRunDescription status(TaskStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TaskStatusType getStatus() {
    return status;
  }

  public void setStatus(TaskStatusType status) {
    this.status = status;
  }


  public DataQualityRulesetEvaluationRunDescription startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public DataQualityRulesetEvaluationRunDescription dataSource(DataQualityRulesetEvaluationRunDescriptionDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public DataQualityRulesetEvaluationRunDescriptionDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataQualityRulesetEvaluationRunDescriptionDataSource dataSource) {
    this.dataSource = dataSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataQualityRulesetEvaluationRunDescription dataQualityRulesetEvaluationRunDescription = (DataQualityRulesetEvaluationRunDescription) o;
    return Objects.equals(this.runId, dataQualityRulesetEvaluationRunDescription.runId) &&
        Objects.equals(this.status, dataQualityRulesetEvaluationRunDescription.status) &&
        Objects.equals(this.startedOn, dataQualityRulesetEvaluationRunDescription.startedOn) &&
        Objects.equals(this.dataSource, dataQualityRulesetEvaluationRunDescription.dataSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, status, startedOn, dataSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataQualityRulesetEvaluationRunDescription {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RunId");
    openapiFields.add("Status");
    openapiFields.add("StartedOn");
    openapiFields.add("DataSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataQualityRulesetEvaluationRunDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataQualityRulesetEvaluationRunDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataQualityRulesetEvaluationRunDescription is not found in the empty JSON string", DataQualityRulesetEvaluationRunDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataQualityRulesetEvaluationRunDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataQualityRulesetEvaluationRunDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RunId`
      if (jsonObj.get("RunId") != null && !jsonObj.get("RunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RunId"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        TaskStatusType.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        DataQualityRulesetEvaluationRunDescriptionDataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataQualityRulesetEvaluationRunDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataQualityRulesetEvaluationRunDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataQualityRulesetEvaluationRunDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataQualityRulesetEvaluationRunDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<DataQualityRulesetEvaluationRunDescription>() {
           @Override
           public void write(JsonWriter out, DataQualityRulesetEvaluationRunDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataQualityRulesetEvaluationRunDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataQualityRulesetEvaluationRunDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataQualityRulesetEvaluationRunDescription
   * @throws IOException if the JSON string is invalid with respect to DataQualityRulesetEvaluationRunDescription
   */
  public static DataQualityRulesetEvaluationRunDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataQualityRulesetEvaluationRunDescription.class);
  }

  /**
   * Convert an instance of DataQualityRulesetEvaluationRunDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

