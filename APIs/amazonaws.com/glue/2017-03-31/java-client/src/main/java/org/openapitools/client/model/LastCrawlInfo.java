/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LastCrawlStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status and error information about the most recent crawl.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LastCrawlInfo {
  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LastCrawlStatus status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_LOG_GROUP = "LogGroup";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP)
  private String logGroup;

  public static final String SERIALIZED_NAME_LOG_STREAM = "LogStream";
  @SerializedName(SERIALIZED_NAME_LOG_STREAM)
  private String logStream;

  public static final String SERIALIZED_NAME_MESSAGE_PREFIX = "MessagePrefix";
  @SerializedName(SERIALIZED_NAME_MESSAGE_PREFIX)
  private String messagePrefix;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public LastCrawlInfo() {
  }

  public LastCrawlInfo status(LastCrawlStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LastCrawlStatus getStatus() {
    return status;
  }

  public void setStatus(LastCrawlStatus status) {
    this.status = status;
  }


  public LastCrawlInfo errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public LastCrawlInfo logGroup(String logGroup) {
    this.logGroup = logGroup;
    return this;
  }

  /**
   * Get logGroup
   * @return logGroup
   */
  @javax.annotation.Nullable
  public String getLogGroup() {
    return logGroup;
  }

  public void setLogGroup(String logGroup) {
    this.logGroup = logGroup;
  }


  public LastCrawlInfo logStream(String logStream) {
    this.logStream = logStream;
    return this;
  }

  /**
   * Get logStream
   * @return logStream
   */
  @javax.annotation.Nullable
  public String getLogStream() {
    return logStream;
  }

  public void setLogStream(String logStream) {
    this.logStream = logStream;
  }


  public LastCrawlInfo messagePrefix(String messagePrefix) {
    this.messagePrefix = messagePrefix;
    return this;
  }

  /**
   * Get messagePrefix
   * @return messagePrefix
   */
  @javax.annotation.Nullable
  public String getMessagePrefix() {
    return messagePrefix;
  }

  public void setMessagePrefix(String messagePrefix) {
    this.messagePrefix = messagePrefix;
  }


  public LastCrawlInfo startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LastCrawlInfo lastCrawlInfo = (LastCrawlInfo) o;
    return Objects.equals(this.status, lastCrawlInfo.status) &&
        Objects.equals(this.errorMessage, lastCrawlInfo.errorMessage) &&
        Objects.equals(this.logGroup, lastCrawlInfo.logGroup) &&
        Objects.equals(this.logStream, lastCrawlInfo.logStream) &&
        Objects.equals(this.messagePrefix, lastCrawlInfo.messagePrefix) &&
        Objects.equals(this.startTime, lastCrawlInfo.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, errorMessage, logGroup, logStream, messagePrefix, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LastCrawlInfo {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    logGroup: ").append(toIndentedString(logGroup)).append("\n");
    sb.append("    logStream: ").append(toIndentedString(logStream)).append("\n");
    sb.append("    messagePrefix: ").append(toIndentedString(messagePrefix)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Status");
    openapiFields.add("ErrorMessage");
    openapiFields.add("LogGroup");
    openapiFields.add("LogStream");
    openapiFields.add("MessagePrefix");
    openapiFields.add("StartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LastCrawlInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LastCrawlInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LastCrawlInfo is not found in the empty JSON string", LastCrawlInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LastCrawlInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LastCrawlInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        LastCrawlStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `LogGroup`
      if (jsonObj.get("LogGroup") != null && !jsonObj.get("LogGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogGroup"));
      }
      // validate the optional field `LogStream`
      if (jsonObj.get("LogStream") != null && !jsonObj.get("LogStream").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogStream"));
      }
      // validate the optional field `MessagePrefix`
      if (jsonObj.get("MessagePrefix") != null && !jsonObj.get("MessagePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessagePrefix"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LastCrawlInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LastCrawlInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LastCrawlInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LastCrawlInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LastCrawlInfo>() {
           @Override
           public void write(JsonWriter out, LastCrawlInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LastCrawlInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LastCrawlInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LastCrawlInfo
   * @throws IOException if the JSON string is invalid with respect to LastCrawlInfo
   */
  public static LastCrawlInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LastCrawlInfo.class);
  }

  /**
   * Convert an instance of LastCrawlInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

