/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetDataQualityRulesetEvaluationRunResponseAdditionalRunOptions;
import org.openapitools.client.model.StartDataQualityRuleRecommendationRunRequestDataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartDataQualityRulesetEvaluationRunRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartDataQualityRulesetEvaluationRunRequest {
  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private StartDataQualityRuleRecommendationRunRequestDataSource dataSource;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_NUMBER_OF_WORKERS = "NumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WORKERS)
  private Integer numberOfWorkers;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_ADDITIONAL_RUN_OPTIONS = "AdditionalRunOptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RUN_OPTIONS)
  private GetDataQualityRulesetEvaluationRunResponseAdditionalRunOptions additionalRunOptions;

  public static final String SERIALIZED_NAME_RULESET_NAMES = "RulesetNames";
  @SerializedName(SERIALIZED_NAME_RULESET_NAMES)
  private List rulesetNames;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA_SOURCES = "AdditionalDataSources";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA_SOURCES)
  private Map additionalDataSources;

  public StartDataQualityRulesetEvaluationRunRequest() {
  }

  public StartDataQualityRulesetEvaluationRunRequest dataSource(StartDataQualityRuleRecommendationRunRequestDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public StartDataQualityRuleRecommendationRunRequestDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(StartDataQualityRuleRecommendationRunRequestDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public StartDataQualityRulesetEvaluationRunRequest role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public StartDataQualityRulesetEvaluationRunRequest numberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
    return this;
  }

  /**
   * Get numberOfWorkers
   * @return numberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWorkers() {
    return numberOfWorkers;
  }

  public void setNumberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
  }


  public StartDataQualityRulesetEvaluationRunRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public StartDataQualityRulesetEvaluationRunRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartDataQualityRulesetEvaluationRunRequest additionalRunOptions(GetDataQualityRulesetEvaluationRunResponseAdditionalRunOptions additionalRunOptions) {
    this.additionalRunOptions = additionalRunOptions;
    return this;
  }

  /**
   * Get additionalRunOptions
   * @return additionalRunOptions
   */
  @javax.annotation.Nullable
  public GetDataQualityRulesetEvaluationRunResponseAdditionalRunOptions getAdditionalRunOptions() {
    return additionalRunOptions;
  }

  public void setAdditionalRunOptions(GetDataQualityRulesetEvaluationRunResponseAdditionalRunOptions additionalRunOptions) {
    this.additionalRunOptions = additionalRunOptions;
  }


  public StartDataQualityRulesetEvaluationRunRequest rulesetNames(List rulesetNames) {
    this.rulesetNames = rulesetNames;
    return this;
  }

  /**
   * Get rulesetNames
   * @return rulesetNames
   */
  @javax.annotation.Nonnull
  public List getRulesetNames() {
    return rulesetNames;
  }

  public void setRulesetNames(List rulesetNames) {
    this.rulesetNames = rulesetNames;
  }


  public StartDataQualityRulesetEvaluationRunRequest additionalDataSources(Map additionalDataSources) {
    this.additionalDataSources = additionalDataSources;
    return this;
  }

  /**
   * Get additionalDataSources
   * @return additionalDataSources
   */
  @javax.annotation.Nullable
  public Map getAdditionalDataSources() {
    return additionalDataSources;
  }

  public void setAdditionalDataSources(Map additionalDataSources) {
    this.additionalDataSources = additionalDataSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartDataQualityRulesetEvaluationRunRequest startDataQualityRulesetEvaluationRunRequest = (StartDataQualityRulesetEvaluationRunRequest) o;
    return Objects.equals(this.dataSource, startDataQualityRulesetEvaluationRunRequest.dataSource) &&
        Objects.equals(this.role, startDataQualityRulesetEvaluationRunRequest.role) &&
        Objects.equals(this.numberOfWorkers, startDataQualityRulesetEvaluationRunRequest.numberOfWorkers) &&
        Objects.equals(this.timeout, startDataQualityRulesetEvaluationRunRequest.timeout) &&
        Objects.equals(this.clientToken, startDataQualityRulesetEvaluationRunRequest.clientToken) &&
        Objects.equals(this.additionalRunOptions, startDataQualityRulesetEvaluationRunRequest.additionalRunOptions) &&
        Objects.equals(this.rulesetNames, startDataQualityRulesetEvaluationRunRequest.rulesetNames) &&
        Objects.equals(this.additionalDataSources, startDataQualityRulesetEvaluationRunRequest.additionalDataSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, role, numberOfWorkers, timeout, clientToken, additionalRunOptions, rulesetNames, additionalDataSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartDataQualityRulesetEvaluationRunRequest {\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    numberOfWorkers: ").append(toIndentedString(numberOfWorkers)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    additionalRunOptions: ").append(toIndentedString(additionalRunOptions)).append("\n");
    sb.append("    rulesetNames: ").append(toIndentedString(rulesetNames)).append("\n");
    sb.append("    additionalDataSources: ").append(toIndentedString(additionalDataSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataSource");
    openapiFields.add("Role");
    openapiFields.add("NumberOfWorkers");
    openapiFields.add("Timeout");
    openapiFields.add("ClientToken");
    openapiFields.add("AdditionalRunOptions");
    openapiFields.add("RulesetNames");
    openapiFields.add("AdditionalDataSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataSource");
    openapiRequiredFields.add("Role");
    openapiRequiredFields.add("RulesetNames");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartDataQualityRulesetEvaluationRunRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartDataQualityRulesetEvaluationRunRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartDataQualityRulesetEvaluationRunRequest is not found in the empty JSON string", StartDataQualityRulesetEvaluationRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartDataQualityRulesetEvaluationRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartDataQualityRulesetEvaluationRunRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartDataQualityRulesetEvaluationRunRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DataSource`
      StartDataQualityRuleRecommendationRunRequestDataSource.validateJsonElement(jsonObj.get("DataSource"));
      // validate the required field `Role`
      String.validateJsonElement(jsonObj.get("Role"));
      // validate the optional field `NumberOfWorkers`
      if (jsonObj.get("NumberOfWorkers") != null && !jsonObj.get("NumberOfWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfWorkers"));
      }
      // validate the optional field `Timeout`
      if (jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Timeout"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the optional field `AdditionalRunOptions`
      if (jsonObj.get("AdditionalRunOptions") != null && !jsonObj.get("AdditionalRunOptions").isJsonNull()) {
        GetDataQualityRulesetEvaluationRunResponseAdditionalRunOptions.validateJsonElement(jsonObj.get("AdditionalRunOptions"));
      }
      // validate the required field `RulesetNames`
      List.validateJsonElement(jsonObj.get("RulesetNames"));
      // validate the optional field `AdditionalDataSources`
      if (jsonObj.get("AdditionalDataSources") != null && !jsonObj.get("AdditionalDataSources").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AdditionalDataSources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartDataQualityRulesetEvaluationRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartDataQualityRulesetEvaluationRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartDataQualityRulesetEvaluationRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartDataQualityRulesetEvaluationRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartDataQualityRulesetEvaluationRunRequest>() {
           @Override
           public void write(JsonWriter out, StartDataQualityRulesetEvaluationRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartDataQualityRulesetEvaluationRunRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartDataQualityRulesetEvaluationRunRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartDataQualityRulesetEvaluationRunRequest
   * @throws IOException if the JSON string is invalid with respect to StartDataQualityRulesetEvaluationRunRequest
   */
  public static StartDataQualityRulesetEvaluationRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartDataQualityRulesetEvaluationRunRequest.class);
  }

  /**
   * Convert an instance of StartDataQualityRulesetEvaluationRunRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

