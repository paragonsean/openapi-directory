/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateCrawlerRequestLakeFormationConfiguration;
import org.openapitools.client.model.CreateCrawlerRequestLineageConfiguration;
import org.openapitools.client.model.CreateCrawlerRequestRecrawlPolicy;
import org.openapitools.client.model.CreateCrawlerRequestSchemaChangePolicy;
import org.openapitools.client.model.UpdateCrawlerRequestTargets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateCrawlerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateCrawlerRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private UpdateCrawlerRequestTargets targets;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_CLASSIFIERS = "Classifiers";
  @SerializedName(SERIALIZED_NAME_CLASSIFIERS)
  private List classifiers;

  public static final String SERIALIZED_NAME_TABLE_PREFIX = "TablePrefix";
  @SerializedName(SERIALIZED_NAME_TABLE_PREFIX)
  private String tablePrefix;

  public static final String SERIALIZED_NAME_SCHEMA_CHANGE_POLICY = "SchemaChangePolicy";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CHANGE_POLICY)
  private CreateCrawlerRequestSchemaChangePolicy schemaChangePolicy;

  public static final String SERIALIZED_NAME_RECRAWL_POLICY = "RecrawlPolicy";
  @SerializedName(SERIALIZED_NAME_RECRAWL_POLICY)
  private CreateCrawlerRequestRecrawlPolicy recrawlPolicy;

  public static final String SERIALIZED_NAME_LINEAGE_CONFIGURATION = "LineageConfiguration";
  @SerializedName(SERIALIZED_NAME_LINEAGE_CONFIGURATION)
  private CreateCrawlerRequestLineageConfiguration lineageConfiguration;

  public static final String SERIALIZED_NAME_LAKE_FORMATION_CONFIGURATION = "LakeFormationConfiguration";
  @SerializedName(SERIALIZED_NAME_LAKE_FORMATION_CONFIGURATION)
  private CreateCrawlerRequestLakeFormationConfiguration lakeFormationConfiguration;

  public static final String SERIALIZED_NAME_CONFIGURATION = "Configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private String _configuration;

  public static final String SERIALIZED_NAME_CRAWLER_SECURITY_CONFIGURATION = "CrawlerSecurityConfiguration";
  @SerializedName(SERIALIZED_NAME_CRAWLER_SECURITY_CONFIGURATION)
  private String crawlerSecurityConfiguration;

  public UpdateCrawlerRequest() {
  }

  public UpdateCrawlerRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateCrawlerRequest role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public UpdateCrawlerRequest databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public UpdateCrawlerRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateCrawlerRequest targets(UpdateCrawlerRequestTargets targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public UpdateCrawlerRequestTargets getTargets() {
    return targets;
  }

  public void setTargets(UpdateCrawlerRequestTargets targets) {
    this.targets = targets;
  }


  public UpdateCrawlerRequest schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public UpdateCrawlerRequest classifiers(List classifiers) {
    this.classifiers = classifiers;
    return this;
  }

  /**
   * Get classifiers
   * @return classifiers
   */
  @javax.annotation.Nullable
  public List getClassifiers() {
    return classifiers;
  }

  public void setClassifiers(List classifiers) {
    this.classifiers = classifiers;
  }


  public UpdateCrawlerRequest tablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
    return this;
  }

  /**
   * Get tablePrefix
   * @return tablePrefix
   */
  @javax.annotation.Nullable
  public String getTablePrefix() {
    return tablePrefix;
  }

  public void setTablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
  }


  public UpdateCrawlerRequest schemaChangePolicy(CreateCrawlerRequestSchemaChangePolicy schemaChangePolicy) {
    this.schemaChangePolicy = schemaChangePolicy;
    return this;
  }

  /**
   * Get schemaChangePolicy
   * @return schemaChangePolicy
   */
  @javax.annotation.Nullable
  public CreateCrawlerRequestSchemaChangePolicy getSchemaChangePolicy() {
    return schemaChangePolicy;
  }

  public void setSchemaChangePolicy(CreateCrawlerRequestSchemaChangePolicy schemaChangePolicy) {
    this.schemaChangePolicy = schemaChangePolicy;
  }


  public UpdateCrawlerRequest recrawlPolicy(CreateCrawlerRequestRecrawlPolicy recrawlPolicy) {
    this.recrawlPolicy = recrawlPolicy;
    return this;
  }

  /**
   * Get recrawlPolicy
   * @return recrawlPolicy
   */
  @javax.annotation.Nullable
  public CreateCrawlerRequestRecrawlPolicy getRecrawlPolicy() {
    return recrawlPolicy;
  }

  public void setRecrawlPolicy(CreateCrawlerRequestRecrawlPolicy recrawlPolicy) {
    this.recrawlPolicy = recrawlPolicy;
  }


  public UpdateCrawlerRequest lineageConfiguration(CreateCrawlerRequestLineageConfiguration lineageConfiguration) {
    this.lineageConfiguration = lineageConfiguration;
    return this;
  }

  /**
   * Get lineageConfiguration
   * @return lineageConfiguration
   */
  @javax.annotation.Nullable
  public CreateCrawlerRequestLineageConfiguration getLineageConfiguration() {
    return lineageConfiguration;
  }

  public void setLineageConfiguration(CreateCrawlerRequestLineageConfiguration lineageConfiguration) {
    this.lineageConfiguration = lineageConfiguration;
  }


  public UpdateCrawlerRequest lakeFormationConfiguration(CreateCrawlerRequestLakeFormationConfiguration lakeFormationConfiguration) {
    this.lakeFormationConfiguration = lakeFormationConfiguration;
    return this;
  }

  /**
   * Get lakeFormationConfiguration
   * @return lakeFormationConfiguration
   */
  @javax.annotation.Nullable
  public CreateCrawlerRequestLakeFormationConfiguration getLakeFormationConfiguration() {
    return lakeFormationConfiguration;
  }

  public void setLakeFormationConfiguration(CreateCrawlerRequestLakeFormationConfiguration lakeFormationConfiguration) {
    this.lakeFormationConfiguration = lakeFormationConfiguration;
  }


  public UpdateCrawlerRequest _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }


  public UpdateCrawlerRequest crawlerSecurityConfiguration(String crawlerSecurityConfiguration) {
    this.crawlerSecurityConfiguration = crawlerSecurityConfiguration;
    return this;
  }

  /**
   * Get crawlerSecurityConfiguration
   * @return crawlerSecurityConfiguration
   */
  @javax.annotation.Nullable
  public String getCrawlerSecurityConfiguration() {
    return crawlerSecurityConfiguration;
  }

  public void setCrawlerSecurityConfiguration(String crawlerSecurityConfiguration) {
    this.crawlerSecurityConfiguration = crawlerSecurityConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCrawlerRequest updateCrawlerRequest = (UpdateCrawlerRequest) o;
    return Objects.equals(this.name, updateCrawlerRequest.name) &&
        Objects.equals(this.role, updateCrawlerRequest.role) &&
        Objects.equals(this.databaseName, updateCrawlerRequest.databaseName) &&
        Objects.equals(this.description, updateCrawlerRequest.description) &&
        Objects.equals(this.targets, updateCrawlerRequest.targets) &&
        Objects.equals(this.schedule, updateCrawlerRequest.schedule) &&
        Objects.equals(this.classifiers, updateCrawlerRequest.classifiers) &&
        Objects.equals(this.tablePrefix, updateCrawlerRequest.tablePrefix) &&
        Objects.equals(this.schemaChangePolicy, updateCrawlerRequest.schemaChangePolicy) &&
        Objects.equals(this.recrawlPolicy, updateCrawlerRequest.recrawlPolicy) &&
        Objects.equals(this.lineageConfiguration, updateCrawlerRequest.lineageConfiguration) &&
        Objects.equals(this.lakeFormationConfiguration, updateCrawlerRequest.lakeFormationConfiguration) &&
        Objects.equals(this._configuration, updateCrawlerRequest._configuration) &&
        Objects.equals(this.crawlerSecurityConfiguration, updateCrawlerRequest.crawlerSecurityConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, role, databaseName, description, targets, schedule, classifiers, tablePrefix, schemaChangePolicy, recrawlPolicy, lineageConfiguration, lakeFormationConfiguration, _configuration, crawlerSecurityConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCrawlerRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    classifiers: ").append(toIndentedString(classifiers)).append("\n");
    sb.append("    tablePrefix: ").append(toIndentedString(tablePrefix)).append("\n");
    sb.append("    schemaChangePolicy: ").append(toIndentedString(schemaChangePolicy)).append("\n");
    sb.append("    recrawlPolicy: ").append(toIndentedString(recrawlPolicy)).append("\n");
    sb.append("    lineageConfiguration: ").append(toIndentedString(lineageConfiguration)).append("\n");
    sb.append("    lakeFormationConfiguration: ").append(toIndentedString(lakeFormationConfiguration)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    crawlerSecurityConfiguration: ").append(toIndentedString(crawlerSecurityConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Role");
    openapiFields.add("DatabaseName");
    openapiFields.add("Description");
    openapiFields.add("Targets");
    openapiFields.add("Schedule");
    openapiFields.add("Classifiers");
    openapiFields.add("TablePrefix");
    openapiFields.add("SchemaChangePolicy");
    openapiFields.add("RecrawlPolicy");
    openapiFields.add("LineageConfiguration");
    openapiFields.add("LakeFormationConfiguration");
    openapiFields.add("Configuration");
    openapiFields.add("CrawlerSecurityConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateCrawlerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCrawlerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCrawlerRequest is not found in the empty JSON string", UpdateCrawlerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCrawlerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCrawlerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateCrawlerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Role`
      if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Role"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Targets`
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        UpdateCrawlerRequestTargets.validateJsonElement(jsonObj.get("Targets"));
      }
      // validate the optional field `Schedule`
      if (jsonObj.get("Schedule") != null && !jsonObj.get("Schedule").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Schedule"));
      }
      // validate the optional field `Classifiers`
      if (jsonObj.get("Classifiers") != null && !jsonObj.get("Classifiers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Classifiers"));
      }
      // validate the optional field `TablePrefix`
      if (jsonObj.get("TablePrefix") != null && !jsonObj.get("TablePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TablePrefix"));
      }
      // validate the optional field `SchemaChangePolicy`
      if (jsonObj.get("SchemaChangePolicy") != null && !jsonObj.get("SchemaChangePolicy").isJsonNull()) {
        CreateCrawlerRequestSchemaChangePolicy.validateJsonElement(jsonObj.get("SchemaChangePolicy"));
      }
      // validate the optional field `RecrawlPolicy`
      if (jsonObj.get("RecrawlPolicy") != null && !jsonObj.get("RecrawlPolicy").isJsonNull()) {
        CreateCrawlerRequestRecrawlPolicy.validateJsonElement(jsonObj.get("RecrawlPolicy"));
      }
      // validate the optional field `LineageConfiguration`
      if (jsonObj.get("LineageConfiguration") != null && !jsonObj.get("LineageConfiguration").isJsonNull()) {
        CreateCrawlerRequestLineageConfiguration.validateJsonElement(jsonObj.get("LineageConfiguration"));
      }
      // validate the optional field `LakeFormationConfiguration`
      if (jsonObj.get("LakeFormationConfiguration") != null && !jsonObj.get("LakeFormationConfiguration").isJsonNull()) {
        CreateCrawlerRequestLakeFormationConfiguration.validateJsonElement(jsonObj.get("LakeFormationConfiguration"));
      }
      // validate the optional field `Configuration`
      if (jsonObj.get("Configuration") != null && !jsonObj.get("Configuration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Configuration"));
      }
      // validate the optional field `CrawlerSecurityConfiguration`
      if (jsonObj.get("CrawlerSecurityConfiguration") != null && !jsonObj.get("CrawlerSecurityConfiguration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CrawlerSecurityConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCrawlerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCrawlerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCrawlerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCrawlerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCrawlerRequest>() {
           @Override
           public void write(JsonWriter out, UpdateCrawlerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCrawlerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateCrawlerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateCrawlerRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateCrawlerRequest
   */
  public static UpdateCrawlerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCrawlerRequest.class);
  }

  /**
   * Convert an instance of UpdateCrawlerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

