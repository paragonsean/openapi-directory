/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmazonRedshiftNodeDataCatalogDatabase;
import org.openapitools.client.model.AmazonRedshiftNodeDataCatalogTable;
import org.openapitools.client.model.AmazonRedshiftNodeDataConnection;
import org.openapitools.client.model.AmazonRedshiftNodeDataIamRole;
import org.openapitools.client.model.AmazonRedshiftNodeDataSchema;
import org.openapitools.client.model.AmazonRedshiftNodeDataTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies an Amazon Redshift node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmazonRedshiftNodeData {
  public static final String SERIALIZED_NAME_ACCESS_TYPE = "AccessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private String accessType;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_CONNECTION = "Connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private AmazonRedshiftNodeDataConnection connection;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private AmazonRedshiftNodeDataSchema schema;

  public static final String SERIALIZED_NAME_TABLE = "Table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private AmazonRedshiftNodeDataTable table;

  public static final String SERIALIZED_NAME_CATALOG_DATABASE = "CatalogDatabase";
  @SerializedName(SERIALIZED_NAME_CATALOG_DATABASE)
  private AmazonRedshiftNodeDataCatalogDatabase catalogDatabase;

  public static final String SERIALIZED_NAME_CATALOG_TABLE = "CatalogTable";
  @SerializedName(SERIALIZED_NAME_CATALOG_TABLE)
  private AmazonRedshiftNodeDataCatalogTable catalogTable;

  public static final String SERIALIZED_NAME_CATALOG_REDSHIFT_SCHEMA = "CatalogRedshiftSchema";
  @SerializedName(SERIALIZED_NAME_CATALOG_REDSHIFT_SCHEMA)
  private String catalogRedshiftSchema;

  public static final String SERIALIZED_NAME_CATALOG_REDSHIFT_TABLE = "CatalogRedshiftTable";
  @SerializedName(SERIALIZED_NAME_CATALOG_REDSHIFT_TABLE)
  private String catalogRedshiftTable;

  public static final String SERIALIZED_NAME_TEMP_DIR = "TempDir";
  @SerializedName(SERIALIZED_NAME_TEMP_DIR)
  private String tempDir;

  public static final String SERIALIZED_NAME_IAM_ROLE = "IamRole";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE)
  private AmazonRedshiftNodeDataIamRole iamRole;

  public static final String SERIALIZED_NAME_ADVANCED_OPTIONS = "AdvancedOptions";
  @SerializedName(SERIALIZED_NAME_ADVANCED_OPTIONS)
  private List advancedOptions;

  public static final String SERIALIZED_NAME_SAMPLE_QUERY = "SampleQuery";
  @SerializedName(SERIALIZED_NAME_SAMPLE_QUERY)
  private String sampleQuery;

  public static final String SERIALIZED_NAME_PRE_ACTION = "PreAction";
  @SerializedName(SERIALIZED_NAME_PRE_ACTION)
  private String preAction;

  public static final String SERIALIZED_NAME_POST_ACTION = "PostAction";
  @SerializedName(SERIALIZED_NAME_POST_ACTION)
  private String postAction;

  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_TABLE_PREFIX = "TablePrefix";
  @SerializedName(SERIALIZED_NAME_TABLE_PREFIX)
  private String tablePrefix;

  public static final String SERIALIZED_NAME_UPSERT = "Upsert";
  @SerializedName(SERIALIZED_NAME_UPSERT)
  private Boolean upsert;

  public static final String SERIALIZED_NAME_MERGE_ACTION = "MergeAction";
  @SerializedName(SERIALIZED_NAME_MERGE_ACTION)
  private String mergeAction;

  public static final String SERIALIZED_NAME_MERGE_WHEN_MATCHED = "MergeWhenMatched";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_MATCHED)
  private String mergeWhenMatched;

  public static final String SERIALIZED_NAME_MERGE_WHEN_NOT_MATCHED = "MergeWhenNotMatched";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_NOT_MATCHED)
  private String mergeWhenNotMatched;

  public static final String SERIALIZED_NAME_MERGE_CLAUSE = "MergeClause";
  @SerializedName(SERIALIZED_NAME_MERGE_CLAUSE)
  private String mergeClause;

  public static final String SERIALIZED_NAME_CRAWLER_CONNECTION = "CrawlerConnection";
  @SerializedName(SERIALIZED_NAME_CRAWLER_CONNECTION)
  private String crawlerConnection;

  public static final String SERIALIZED_NAME_TABLE_SCHEMA = "TableSchema";
  @SerializedName(SERIALIZED_NAME_TABLE_SCHEMA)
  private List tableSchema;

  public static final String SERIALIZED_NAME_STAGING_TABLE = "StagingTable";
  @SerializedName(SERIALIZED_NAME_STAGING_TABLE)
  private String stagingTable;

  public static final String SERIALIZED_NAME_SELECTED_COLUMNS = "SelectedColumns";
  @SerializedName(SERIALIZED_NAME_SELECTED_COLUMNS)
  private List selectedColumns;

  public AmazonRedshiftNodeData() {
  }

  public AmazonRedshiftNodeData accessType(String accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }

  public void setAccessType(String accessType) {
    this.accessType = accessType;
  }


  public AmazonRedshiftNodeData sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public AmazonRedshiftNodeData connection(AmazonRedshiftNodeDataConnection connection) {
    this.connection = connection;
    return this;
  }

  /**
   * Get connection
   * @return connection
   */
  @javax.annotation.Nullable
  public AmazonRedshiftNodeDataConnection getConnection() {
    return connection;
  }

  public void setConnection(AmazonRedshiftNodeDataConnection connection) {
    this.connection = connection;
  }


  public AmazonRedshiftNodeData schema(AmazonRedshiftNodeDataSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public AmazonRedshiftNodeDataSchema getSchema() {
    return schema;
  }

  public void setSchema(AmazonRedshiftNodeDataSchema schema) {
    this.schema = schema;
  }


  public AmazonRedshiftNodeData table(AmazonRedshiftNodeDataTable table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public AmazonRedshiftNodeDataTable getTable() {
    return table;
  }

  public void setTable(AmazonRedshiftNodeDataTable table) {
    this.table = table;
  }


  public AmazonRedshiftNodeData catalogDatabase(AmazonRedshiftNodeDataCatalogDatabase catalogDatabase) {
    this.catalogDatabase = catalogDatabase;
    return this;
  }

  /**
   * Get catalogDatabase
   * @return catalogDatabase
   */
  @javax.annotation.Nullable
  public AmazonRedshiftNodeDataCatalogDatabase getCatalogDatabase() {
    return catalogDatabase;
  }

  public void setCatalogDatabase(AmazonRedshiftNodeDataCatalogDatabase catalogDatabase) {
    this.catalogDatabase = catalogDatabase;
  }


  public AmazonRedshiftNodeData catalogTable(AmazonRedshiftNodeDataCatalogTable catalogTable) {
    this.catalogTable = catalogTable;
    return this;
  }

  /**
   * Get catalogTable
   * @return catalogTable
   */
  @javax.annotation.Nullable
  public AmazonRedshiftNodeDataCatalogTable getCatalogTable() {
    return catalogTable;
  }

  public void setCatalogTable(AmazonRedshiftNodeDataCatalogTable catalogTable) {
    this.catalogTable = catalogTable;
  }


  public AmazonRedshiftNodeData catalogRedshiftSchema(String catalogRedshiftSchema) {
    this.catalogRedshiftSchema = catalogRedshiftSchema;
    return this;
  }

  /**
   * Get catalogRedshiftSchema
   * @return catalogRedshiftSchema
   */
  @javax.annotation.Nullable
  public String getCatalogRedshiftSchema() {
    return catalogRedshiftSchema;
  }

  public void setCatalogRedshiftSchema(String catalogRedshiftSchema) {
    this.catalogRedshiftSchema = catalogRedshiftSchema;
  }


  public AmazonRedshiftNodeData catalogRedshiftTable(String catalogRedshiftTable) {
    this.catalogRedshiftTable = catalogRedshiftTable;
    return this;
  }

  /**
   * Get catalogRedshiftTable
   * @return catalogRedshiftTable
   */
  @javax.annotation.Nullable
  public String getCatalogRedshiftTable() {
    return catalogRedshiftTable;
  }

  public void setCatalogRedshiftTable(String catalogRedshiftTable) {
    this.catalogRedshiftTable = catalogRedshiftTable;
  }


  public AmazonRedshiftNodeData tempDir(String tempDir) {
    this.tempDir = tempDir;
    return this;
  }

  /**
   * Get tempDir
   * @return tempDir
   */
  @javax.annotation.Nullable
  public String getTempDir() {
    return tempDir;
  }

  public void setTempDir(String tempDir) {
    this.tempDir = tempDir;
  }


  public AmazonRedshiftNodeData iamRole(AmazonRedshiftNodeDataIamRole iamRole) {
    this.iamRole = iamRole;
    return this;
  }

  /**
   * Get iamRole
   * @return iamRole
   */
  @javax.annotation.Nullable
  public AmazonRedshiftNodeDataIamRole getIamRole() {
    return iamRole;
  }

  public void setIamRole(AmazonRedshiftNodeDataIamRole iamRole) {
    this.iamRole = iamRole;
  }


  public AmazonRedshiftNodeData advancedOptions(List advancedOptions) {
    this.advancedOptions = advancedOptions;
    return this;
  }

  /**
   * Get advancedOptions
   * @return advancedOptions
   */
  @javax.annotation.Nullable
  public List getAdvancedOptions() {
    return advancedOptions;
  }

  public void setAdvancedOptions(List advancedOptions) {
    this.advancedOptions = advancedOptions;
  }


  public AmazonRedshiftNodeData sampleQuery(String sampleQuery) {
    this.sampleQuery = sampleQuery;
    return this;
  }

  /**
   * Get sampleQuery
   * @return sampleQuery
   */
  @javax.annotation.Nullable
  public String getSampleQuery() {
    return sampleQuery;
  }

  public void setSampleQuery(String sampleQuery) {
    this.sampleQuery = sampleQuery;
  }


  public AmazonRedshiftNodeData preAction(String preAction) {
    this.preAction = preAction;
    return this;
  }

  /**
   * Get preAction
   * @return preAction
   */
  @javax.annotation.Nullable
  public String getPreAction() {
    return preAction;
  }

  public void setPreAction(String preAction) {
    this.preAction = preAction;
  }


  public AmazonRedshiftNodeData postAction(String postAction) {
    this.postAction = postAction;
    return this;
  }

  /**
   * Get postAction
   * @return postAction
   */
  @javax.annotation.Nullable
  public String getPostAction() {
    return postAction;
  }

  public void setPostAction(String postAction) {
    this.postAction = postAction;
  }


  public AmazonRedshiftNodeData action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public AmazonRedshiftNodeData tablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
    return this;
  }

  /**
   * Get tablePrefix
   * @return tablePrefix
   */
  @javax.annotation.Nullable
  public String getTablePrefix() {
    return tablePrefix;
  }

  public void setTablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
  }


  public AmazonRedshiftNodeData upsert(Boolean upsert) {
    this.upsert = upsert;
    return this;
  }

  /**
   * Get upsert
   * @return upsert
   */
  @javax.annotation.Nullable
  public Boolean getUpsert() {
    return upsert;
  }

  public void setUpsert(Boolean upsert) {
    this.upsert = upsert;
  }


  public AmazonRedshiftNodeData mergeAction(String mergeAction) {
    this.mergeAction = mergeAction;
    return this;
  }

  /**
   * Get mergeAction
   * @return mergeAction
   */
  @javax.annotation.Nullable
  public String getMergeAction() {
    return mergeAction;
  }

  public void setMergeAction(String mergeAction) {
    this.mergeAction = mergeAction;
  }


  public AmazonRedshiftNodeData mergeWhenMatched(String mergeWhenMatched) {
    this.mergeWhenMatched = mergeWhenMatched;
    return this;
  }

  /**
   * Get mergeWhenMatched
   * @return mergeWhenMatched
   */
  @javax.annotation.Nullable
  public String getMergeWhenMatched() {
    return mergeWhenMatched;
  }

  public void setMergeWhenMatched(String mergeWhenMatched) {
    this.mergeWhenMatched = mergeWhenMatched;
  }


  public AmazonRedshiftNodeData mergeWhenNotMatched(String mergeWhenNotMatched) {
    this.mergeWhenNotMatched = mergeWhenNotMatched;
    return this;
  }

  /**
   * Get mergeWhenNotMatched
   * @return mergeWhenNotMatched
   */
  @javax.annotation.Nullable
  public String getMergeWhenNotMatched() {
    return mergeWhenNotMatched;
  }

  public void setMergeWhenNotMatched(String mergeWhenNotMatched) {
    this.mergeWhenNotMatched = mergeWhenNotMatched;
  }


  public AmazonRedshiftNodeData mergeClause(String mergeClause) {
    this.mergeClause = mergeClause;
    return this;
  }

  /**
   * Get mergeClause
   * @return mergeClause
   */
  @javax.annotation.Nullable
  public String getMergeClause() {
    return mergeClause;
  }

  public void setMergeClause(String mergeClause) {
    this.mergeClause = mergeClause;
  }


  public AmazonRedshiftNodeData crawlerConnection(String crawlerConnection) {
    this.crawlerConnection = crawlerConnection;
    return this;
  }

  /**
   * Get crawlerConnection
   * @return crawlerConnection
   */
  @javax.annotation.Nullable
  public String getCrawlerConnection() {
    return crawlerConnection;
  }

  public void setCrawlerConnection(String crawlerConnection) {
    this.crawlerConnection = crawlerConnection;
  }


  public AmazonRedshiftNodeData tableSchema(List tableSchema) {
    this.tableSchema = tableSchema;
    return this;
  }

  /**
   * Get tableSchema
   * @return tableSchema
   */
  @javax.annotation.Nullable
  public List getTableSchema() {
    return tableSchema;
  }

  public void setTableSchema(List tableSchema) {
    this.tableSchema = tableSchema;
  }


  public AmazonRedshiftNodeData stagingTable(String stagingTable) {
    this.stagingTable = stagingTable;
    return this;
  }

  /**
   * Get stagingTable
   * @return stagingTable
   */
  @javax.annotation.Nullable
  public String getStagingTable() {
    return stagingTable;
  }

  public void setStagingTable(String stagingTable) {
    this.stagingTable = stagingTable;
  }


  public AmazonRedshiftNodeData selectedColumns(List selectedColumns) {
    this.selectedColumns = selectedColumns;
    return this;
  }

  /**
   * Get selectedColumns
   * @return selectedColumns
   */
  @javax.annotation.Nullable
  public List getSelectedColumns() {
    return selectedColumns;
  }

  public void setSelectedColumns(List selectedColumns) {
    this.selectedColumns = selectedColumns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmazonRedshiftNodeData amazonRedshiftNodeData = (AmazonRedshiftNodeData) o;
    return Objects.equals(this.accessType, amazonRedshiftNodeData.accessType) &&
        Objects.equals(this.sourceType, amazonRedshiftNodeData.sourceType) &&
        Objects.equals(this.connection, amazonRedshiftNodeData.connection) &&
        Objects.equals(this.schema, amazonRedshiftNodeData.schema) &&
        Objects.equals(this.table, amazonRedshiftNodeData.table) &&
        Objects.equals(this.catalogDatabase, amazonRedshiftNodeData.catalogDatabase) &&
        Objects.equals(this.catalogTable, amazonRedshiftNodeData.catalogTable) &&
        Objects.equals(this.catalogRedshiftSchema, amazonRedshiftNodeData.catalogRedshiftSchema) &&
        Objects.equals(this.catalogRedshiftTable, amazonRedshiftNodeData.catalogRedshiftTable) &&
        Objects.equals(this.tempDir, amazonRedshiftNodeData.tempDir) &&
        Objects.equals(this.iamRole, amazonRedshiftNodeData.iamRole) &&
        Objects.equals(this.advancedOptions, amazonRedshiftNodeData.advancedOptions) &&
        Objects.equals(this.sampleQuery, amazonRedshiftNodeData.sampleQuery) &&
        Objects.equals(this.preAction, amazonRedshiftNodeData.preAction) &&
        Objects.equals(this.postAction, amazonRedshiftNodeData.postAction) &&
        Objects.equals(this.action, amazonRedshiftNodeData.action) &&
        Objects.equals(this.tablePrefix, amazonRedshiftNodeData.tablePrefix) &&
        Objects.equals(this.upsert, amazonRedshiftNodeData.upsert) &&
        Objects.equals(this.mergeAction, amazonRedshiftNodeData.mergeAction) &&
        Objects.equals(this.mergeWhenMatched, amazonRedshiftNodeData.mergeWhenMatched) &&
        Objects.equals(this.mergeWhenNotMatched, amazonRedshiftNodeData.mergeWhenNotMatched) &&
        Objects.equals(this.mergeClause, amazonRedshiftNodeData.mergeClause) &&
        Objects.equals(this.crawlerConnection, amazonRedshiftNodeData.crawlerConnection) &&
        Objects.equals(this.tableSchema, amazonRedshiftNodeData.tableSchema) &&
        Objects.equals(this.stagingTable, amazonRedshiftNodeData.stagingTable) &&
        Objects.equals(this.selectedColumns, amazonRedshiftNodeData.selectedColumns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, sourceType, connection, schema, table, catalogDatabase, catalogTable, catalogRedshiftSchema, catalogRedshiftTable, tempDir, iamRole, advancedOptions, sampleQuery, preAction, postAction, action, tablePrefix, upsert, mergeAction, mergeWhenMatched, mergeWhenNotMatched, mergeClause, crawlerConnection, tableSchema, stagingTable, selectedColumns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmazonRedshiftNodeData {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    catalogDatabase: ").append(toIndentedString(catalogDatabase)).append("\n");
    sb.append("    catalogTable: ").append(toIndentedString(catalogTable)).append("\n");
    sb.append("    catalogRedshiftSchema: ").append(toIndentedString(catalogRedshiftSchema)).append("\n");
    sb.append("    catalogRedshiftTable: ").append(toIndentedString(catalogRedshiftTable)).append("\n");
    sb.append("    tempDir: ").append(toIndentedString(tempDir)).append("\n");
    sb.append("    iamRole: ").append(toIndentedString(iamRole)).append("\n");
    sb.append("    advancedOptions: ").append(toIndentedString(advancedOptions)).append("\n");
    sb.append("    sampleQuery: ").append(toIndentedString(sampleQuery)).append("\n");
    sb.append("    preAction: ").append(toIndentedString(preAction)).append("\n");
    sb.append("    postAction: ").append(toIndentedString(postAction)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    tablePrefix: ").append(toIndentedString(tablePrefix)).append("\n");
    sb.append("    upsert: ").append(toIndentedString(upsert)).append("\n");
    sb.append("    mergeAction: ").append(toIndentedString(mergeAction)).append("\n");
    sb.append("    mergeWhenMatched: ").append(toIndentedString(mergeWhenMatched)).append("\n");
    sb.append("    mergeWhenNotMatched: ").append(toIndentedString(mergeWhenNotMatched)).append("\n");
    sb.append("    mergeClause: ").append(toIndentedString(mergeClause)).append("\n");
    sb.append("    crawlerConnection: ").append(toIndentedString(crawlerConnection)).append("\n");
    sb.append("    tableSchema: ").append(toIndentedString(tableSchema)).append("\n");
    sb.append("    stagingTable: ").append(toIndentedString(stagingTable)).append("\n");
    sb.append("    selectedColumns: ").append(toIndentedString(selectedColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessType");
    openapiFields.add("SourceType");
    openapiFields.add("Connection");
    openapiFields.add("Schema");
    openapiFields.add("Table");
    openapiFields.add("CatalogDatabase");
    openapiFields.add("CatalogTable");
    openapiFields.add("CatalogRedshiftSchema");
    openapiFields.add("CatalogRedshiftTable");
    openapiFields.add("TempDir");
    openapiFields.add("IamRole");
    openapiFields.add("AdvancedOptions");
    openapiFields.add("SampleQuery");
    openapiFields.add("PreAction");
    openapiFields.add("PostAction");
    openapiFields.add("Action");
    openapiFields.add("TablePrefix");
    openapiFields.add("Upsert");
    openapiFields.add("MergeAction");
    openapiFields.add("MergeWhenMatched");
    openapiFields.add("MergeWhenNotMatched");
    openapiFields.add("MergeClause");
    openapiFields.add("CrawlerConnection");
    openapiFields.add("TableSchema");
    openapiFields.add("StagingTable");
    openapiFields.add("SelectedColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmazonRedshiftNodeData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmazonRedshiftNodeData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmazonRedshiftNodeData is not found in the empty JSON string", AmazonRedshiftNodeData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmazonRedshiftNodeData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmazonRedshiftNodeData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccessType`
      if (jsonObj.get("AccessType") != null && !jsonObj.get("AccessType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessType"));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceType"));
      }
      // validate the optional field `Connection`
      if (jsonObj.get("Connection") != null && !jsonObj.get("Connection").isJsonNull()) {
        AmazonRedshiftNodeDataConnection.validateJsonElement(jsonObj.get("Connection"));
      }
      // validate the optional field `Schema`
      if (jsonObj.get("Schema") != null && !jsonObj.get("Schema").isJsonNull()) {
        AmazonRedshiftNodeDataSchema.validateJsonElement(jsonObj.get("Schema"));
      }
      // validate the optional field `Table`
      if (jsonObj.get("Table") != null && !jsonObj.get("Table").isJsonNull()) {
        AmazonRedshiftNodeDataTable.validateJsonElement(jsonObj.get("Table"));
      }
      // validate the optional field `CatalogDatabase`
      if (jsonObj.get("CatalogDatabase") != null && !jsonObj.get("CatalogDatabase").isJsonNull()) {
        AmazonRedshiftNodeDataCatalogDatabase.validateJsonElement(jsonObj.get("CatalogDatabase"));
      }
      // validate the optional field `CatalogTable`
      if (jsonObj.get("CatalogTable") != null && !jsonObj.get("CatalogTable").isJsonNull()) {
        AmazonRedshiftNodeDataCatalogTable.validateJsonElement(jsonObj.get("CatalogTable"));
      }
      // validate the optional field `CatalogRedshiftSchema`
      if (jsonObj.get("CatalogRedshiftSchema") != null && !jsonObj.get("CatalogRedshiftSchema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CatalogRedshiftSchema"));
      }
      // validate the optional field `CatalogRedshiftTable`
      if (jsonObj.get("CatalogRedshiftTable") != null && !jsonObj.get("CatalogRedshiftTable").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CatalogRedshiftTable"));
      }
      // validate the optional field `TempDir`
      if (jsonObj.get("TempDir") != null && !jsonObj.get("TempDir").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TempDir"));
      }
      // validate the optional field `IamRole`
      if (jsonObj.get("IamRole") != null && !jsonObj.get("IamRole").isJsonNull()) {
        AmazonRedshiftNodeDataIamRole.validateJsonElement(jsonObj.get("IamRole"));
      }
      // validate the optional field `AdvancedOptions`
      if (jsonObj.get("AdvancedOptions") != null && !jsonObj.get("AdvancedOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdvancedOptions"));
      }
      // validate the optional field `SampleQuery`
      if (jsonObj.get("SampleQuery") != null && !jsonObj.get("SampleQuery").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SampleQuery"));
      }
      // validate the optional field `PreAction`
      if (jsonObj.get("PreAction") != null && !jsonObj.get("PreAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreAction"));
      }
      // validate the optional field `PostAction`
      if (jsonObj.get("PostAction") != null && !jsonObj.get("PostAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostAction"));
      }
      // validate the optional field `Action`
      if (jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Action"));
      }
      // validate the optional field `TablePrefix`
      if (jsonObj.get("TablePrefix") != null && !jsonObj.get("TablePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TablePrefix"));
      }
      // validate the optional field `Upsert`
      if (jsonObj.get("Upsert") != null && !jsonObj.get("Upsert").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Upsert"));
      }
      // validate the optional field `MergeAction`
      if (jsonObj.get("MergeAction") != null && !jsonObj.get("MergeAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeAction"));
      }
      // validate the optional field `MergeWhenMatched`
      if (jsonObj.get("MergeWhenMatched") != null && !jsonObj.get("MergeWhenMatched").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeWhenMatched"));
      }
      // validate the optional field `MergeWhenNotMatched`
      if (jsonObj.get("MergeWhenNotMatched") != null && !jsonObj.get("MergeWhenNotMatched").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeWhenNotMatched"));
      }
      // validate the optional field `MergeClause`
      if (jsonObj.get("MergeClause") != null && !jsonObj.get("MergeClause").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeClause"));
      }
      // validate the optional field `CrawlerConnection`
      if (jsonObj.get("CrawlerConnection") != null && !jsonObj.get("CrawlerConnection").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CrawlerConnection"));
      }
      // validate the optional field `TableSchema`
      if (jsonObj.get("TableSchema") != null && !jsonObj.get("TableSchema").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TableSchema"));
      }
      // validate the optional field `StagingTable`
      if (jsonObj.get("StagingTable") != null && !jsonObj.get("StagingTable").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StagingTable"));
      }
      // validate the optional field `SelectedColumns`
      if (jsonObj.get("SelectedColumns") != null && !jsonObj.get("SelectedColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SelectedColumns"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmazonRedshiftNodeData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmazonRedshiftNodeData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmazonRedshiftNodeData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmazonRedshiftNodeData.class));

       return (TypeAdapter<T>) new TypeAdapter<AmazonRedshiftNodeData>() {
           @Override
           public void write(JsonWriter out, AmazonRedshiftNodeData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmazonRedshiftNodeData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmazonRedshiftNodeData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmazonRedshiftNodeData
   * @throws IOException if the JSON string is invalid with respect to AmazonRedshiftNodeData
   */
  public static AmazonRedshiftNodeData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmazonRedshiftNodeData.class);
  }

  /**
   * Convert an instance of AmazonRedshiftNodeData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

