/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Compatibility;
import org.openapitools.client.model.CreateSchemaInputRegistryId;
import org.openapitools.client.model.DataFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSchemaInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSchemaInput {
  public static final String SERIALIZED_NAME_REGISTRY_ID = "RegistryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private CreateSchemaInputRegistryId registryId;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "SchemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_DATA_FORMAT = "DataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormat dataFormat;

  public static final String SERIALIZED_NAME_COMPATIBILITY = "Compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private Compatibility compatibility;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_SCHEMA_DEFINITION = "SchemaDefinition";
  @SerializedName(SERIALIZED_NAME_SCHEMA_DEFINITION)
  private String schemaDefinition;

  public CreateSchemaInput() {
  }

  public CreateSchemaInput registryId(CreateSchemaInputRegistryId registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public CreateSchemaInputRegistryId getRegistryId() {
    return registryId;
  }

  public void setRegistryId(CreateSchemaInputRegistryId registryId) {
    this.registryId = registryId;
  }


  public CreateSchemaInput schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Get schemaName
   * @return schemaName
   */
  @javax.annotation.Nonnull
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public CreateSchemaInput dataFormat(DataFormat dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Get dataFormat
   * @return dataFormat
   */
  @javax.annotation.Nonnull
  public DataFormat getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormat dataFormat) {
    this.dataFormat = dataFormat;
  }


  public CreateSchemaInput compatibility(Compatibility compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Get compatibility
   * @return compatibility
   */
  @javax.annotation.Nullable
  public Compatibility getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(Compatibility compatibility) {
    this.compatibility = compatibility;
  }


  public CreateSchemaInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateSchemaInput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateSchemaInput schemaDefinition(String schemaDefinition) {
    this.schemaDefinition = schemaDefinition;
    return this;
  }

  /**
   * Get schemaDefinition
   * @return schemaDefinition
   */
  @javax.annotation.Nullable
  public String getSchemaDefinition() {
    return schemaDefinition;
  }

  public void setSchemaDefinition(String schemaDefinition) {
    this.schemaDefinition = schemaDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSchemaInput createSchemaInput = (CreateSchemaInput) o;
    return Objects.equals(this.registryId, createSchemaInput.registryId) &&
        Objects.equals(this.schemaName, createSchemaInput.schemaName) &&
        Objects.equals(this.dataFormat, createSchemaInput.dataFormat) &&
        Objects.equals(this.compatibility, createSchemaInput.compatibility) &&
        Objects.equals(this.description, createSchemaInput.description) &&
        Objects.equals(this.tags, createSchemaInput.tags) &&
        Objects.equals(this.schemaDefinition, createSchemaInput.schemaDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryId, schemaName, dataFormat, compatibility, description, tags, schemaDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSchemaInput {\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    schemaDefinition: ").append(toIndentedString(schemaDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RegistryId");
    openapiFields.add("SchemaName");
    openapiFields.add("DataFormat");
    openapiFields.add("Compatibility");
    openapiFields.add("Description");
    openapiFields.add("Tags");
    openapiFields.add("SchemaDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SchemaName");
    openapiRequiredFields.add("DataFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSchemaInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSchemaInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSchemaInput is not found in the empty JSON string", CreateSchemaInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSchemaInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSchemaInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSchemaInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RegistryId`
      if (jsonObj.get("RegistryId") != null && !jsonObj.get("RegistryId").isJsonNull()) {
        CreateSchemaInputRegistryId.validateJsonElement(jsonObj.get("RegistryId"));
      }
      // validate the required field `SchemaName`
      String.validateJsonElement(jsonObj.get("SchemaName"));
      // validate the required field `DataFormat`
      DataFormat.validateJsonElement(jsonObj.get("DataFormat"));
      // validate the optional field `Compatibility`
      if (jsonObj.get("Compatibility") != null && !jsonObj.get("Compatibility").isJsonNull()) {
        Compatibility.validateJsonElement(jsonObj.get("Compatibility"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `SchemaDefinition`
      if (jsonObj.get("SchemaDefinition") != null && !jsonObj.get("SchemaDefinition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSchemaInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSchemaInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSchemaInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSchemaInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSchemaInput>() {
           @Override
           public void write(JsonWriter out, CreateSchemaInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSchemaInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSchemaInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSchemaInput
   * @throws IOException if the JSON string is invalid with respect to CreateSchemaInput
   */
  public static CreateSchemaInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSchemaInput.class);
  }

  /**
   * Convert an instance of CreateSchemaInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

