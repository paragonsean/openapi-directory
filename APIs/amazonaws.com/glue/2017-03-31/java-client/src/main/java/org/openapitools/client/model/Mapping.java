/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the mapping of data property keys.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mapping {
  public static final String SERIALIZED_NAME_TO_KEY = "ToKey";
  @SerializedName(SERIALIZED_NAME_TO_KEY)
  private String toKey;

  public static final String SERIALIZED_NAME_FROM_PATH = "FromPath";
  @SerializedName(SERIALIZED_NAME_FROM_PATH)
  private List fromPath;

  public static final String SERIALIZED_NAME_FROM_TYPE = "FromType";
  @SerializedName(SERIALIZED_NAME_FROM_TYPE)
  private String fromType;

  public static final String SERIALIZED_NAME_TO_TYPE = "ToType";
  @SerializedName(SERIALIZED_NAME_TO_TYPE)
  private String toType;

  public static final String SERIALIZED_NAME_DROPPED = "Dropped";
  @SerializedName(SERIALIZED_NAME_DROPPED)
  private Boolean dropped;

  public static final String SERIALIZED_NAME_CHILDREN = "Children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List children;

  public Mapping() {
  }

  public Mapping toKey(String toKey) {
    this.toKey = toKey;
    return this;
  }

  /**
   * Get toKey
   * @return toKey
   */
  @javax.annotation.Nullable
  public String getToKey() {
    return toKey;
  }

  public void setToKey(String toKey) {
    this.toKey = toKey;
  }


  public Mapping fromPath(List fromPath) {
    this.fromPath = fromPath;
    return this;
  }

  /**
   * Get fromPath
   * @return fromPath
   */
  @javax.annotation.Nullable
  public List getFromPath() {
    return fromPath;
  }

  public void setFromPath(List fromPath) {
    this.fromPath = fromPath;
  }


  public Mapping fromType(String fromType) {
    this.fromType = fromType;
    return this;
  }

  /**
   * Get fromType
   * @return fromType
   */
  @javax.annotation.Nullable
  public String getFromType() {
    return fromType;
  }

  public void setFromType(String fromType) {
    this.fromType = fromType;
  }


  public Mapping toType(String toType) {
    this.toType = toType;
    return this;
  }

  /**
   * Get toType
   * @return toType
   */
  @javax.annotation.Nullable
  public String getToType() {
    return toType;
  }

  public void setToType(String toType) {
    this.toType = toType;
  }


  public Mapping dropped(Boolean dropped) {
    this.dropped = dropped;
    return this;
  }

  /**
   * Get dropped
   * @return dropped
   */
  @javax.annotation.Nullable
  public Boolean getDropped() {
    return dropped;
  }

  public void setDropped(Boolean dropped) {
    this.dropped = dropped;
  }


  public Mapping children(List children) {
    this.children = children;
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public List getChildren() {
    return children;
  }

  public void setChildren(List children) {
    this.children = children;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mapping mapping = (Mapping) o;
    return Objects.equals(this.toKey, mapping.toKey) &&
        Objects.equals(this.fromPath, mapping.fromPath) &&
        Objects.equals(this.fromType, mapping.fromType) &&
        Objects.equals(this.toType, mapping.toType) &&
        Objects.equals(this.dropped, mapping.dropped) &&
        Objects.equals(this.children, mapping.children);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toKey, fromPath, fromType, toType, dropped, children);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mapping {\n");
    sb.append("    toKey: ").append(toIndentedString(toKey)).append("\n");
    sb.append("    fromPath: ").append(toIndentedString(fromPath)).append("\n");
    sb.append("    fromType: ").append(toIndentedString(fromType)).append("\n");
    sb.append("    toType: ").append(toIndentedString(toType)).append("\n");
    sb.append("    dropped: ").append(toIndentedString(dropped)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ToKey");
    openapiFields.add("FromPath");
    openapiFields.add("FromType");
    openapiFields.add("ToType");
    openapiFields.add("Dropped");
    openapiFields.add("Children");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mapping is not found in the empty JSON string", Mapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ToKey`
      if (jsonObj.get("ToKey") != null && !jsonObj.get("ToKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ToKey"));
      }
      // validate the optional field `FromPath`
      if (jsonObj.get("FromPath") != null && !jsonObj.get("FromPath").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FromPath"));
      }
      // validate the optional field `FromType`
      if (jsonObj.get("FromType") != null && !jsonObj.get("FromType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FromType"));
      }
      // validate the optional field `ToType`
      if (jsonObj.get("ToType") != null && !jsonObj.get("ToType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ToType"));
      }
      // validate the optional field `Dropped`
      if (jsonObj.get("Dropped") != null && !jsonObj.get("Dropped").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Dropped"));
      }
      // validate the optional field `Children`
      if (jsonObj.get("Children") != null && !jsonObj.get("Children").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Children"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mapping.class));

       return (TypeAdapter<T>) new TypeAdapter<Mapping>() {
           @Override
           public void write(JsonWriter out, Mapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mapping
   * @throws IOException if the JSON string is invalid with respect to Mapping
   */
  public static Mapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mapping.class);
  }

  /**
   * Convert an instance of Mapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

