/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappingEntry {
  public static final String SERIALIZED_NAME_SOURCE_TABLE = "SourceTable";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE)
  private String sourceTable;

  public static final String SERIALIZED_NAME_SOURCE_PATH = "SourcePath";
  @SerializedName(SERIALIZED_NAME_SOURCE_PATH)
  private String sourcePath;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_TARGET_TABLE = "TargetTable";
  @SerializedName(SERIALIZED_NAME_TARGET_TABLE)
  private String targetTable;

  public static final String SERIALIZED_NAME_TARGET_PATH = "TargetPath";
  @SerializedName(SERIALIZED_NAME_TARGET_PATH)
  private String targetPath;

  public static final String SERIALIZED_NAME_TARGET_TYPE = "TargetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private String targetType;

  public MappingEntry() {
  }

  public MappingEntry sourceTable(String sourceTable) {
    this.sourceTable = sourceTable;
    return this;
  }

  /**
   * Get sourceTable
   * @return sourceTable
   */
  @javax.annotation.Nullable
  public String getSourceTable() {
    return sourceTable;
  }

  public void setSourceTable(String sourceTable) {
    this.sourceTable = sourceTable;
  }


  public MappingEntry sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

  /**
   * Get sourcePath
   * @return sourcePath
   */
  @javax.annotation.Nullable
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }


  public MappingEntry sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public MappingEntry targetTable(String targetTable) {
    this.targetTable = targetTable;
    return this;
  }

  /**
   * Get targetTable
   * @return targetTable
   */
  @javax.annotation.Nullable
  public String getTargetTable() {
    return targetTable;
  }

  public void setTargetTable(String targetTable) {
    this.targetTable = targetTable;
  }


  public MappingEntry targetPath(String targetPath) {
    this.targetPath = targetPath;
    return this;
  }

  /**
   * Get targetPath
   * @return targetPath
   */
  @javax.annotation.Nullable
  public String getTargetPath() {
    return targetPath;
  }

  public void setTargetPath(String targetPath) {
    this.targetPath = targetPath;
  }


  public MappingEntry targetType(String targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Get targetType
   * @return targetType
   */
  @javax.annotation.Nullable
  public String getTargetType() {
    return targetType;
  }

  public void setTargetType(String targetType) {
    this.targetType = targetType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingEntry mappingEntry = (MappingEntry) o;
    return Objects.equals(this.sourceTable, mappingEntry.sourceTable) &&
        Objects.equals(this.sourcePath, mappingEntry.sourcePath) &&
        Objects.equals(this.sourceType, mappingEntry.sourceType) &&
        Objects.equals(this.targetTable, mappingEntry.targetTable) &&
        Objects.equals(this.targetPath, mappingEntry.targetPath) &&
        Objects.equals(this.targetType, mappingEntry.targetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceTable, sourcePath, sourceType, targetTable, targetPath, targetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingEntry {\n");
    sb.append("    sourceTable: ").append(toIndentedString(sourceTable)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    targetTable: ").append(toIndentedString(targetTable)).append("\n");
    sb.append("    targetPath: ").append(toIndentedString(targetPath)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceTable");
    openapiFields.add("SourcePath");
    openapiFields.add("SourceType");
    openapiFields.add("TargetTable");
    openapiFields.add("TargetPath");
    openapiFields.add("TargetType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappingEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappingEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingEntry is not found in the empty JSON string", MappingEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappingEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SourceTable`
      if (jsonObj.get("SourceTable") != null && !jsonObj.get("SourceTable").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceTable"));
      }
      // validate the optional field `SourcePath`
      if (jsonObj.get("SourcePath") != null && !jsonObj.get("SourcePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourcePath"));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceType"));
      }
      // validate the optional field `TargetTable`
      if (jsonObj.get("TargetTable") != null && !jsonObj.get("TargetTable").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetTable"));
      }
      // validate the optional field `TargetPath`
      if (jsonObj.get("TargetPath") != null && !jsonObj.get("TargetPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetPath"));
      }
      // validate the optional field `TargetType`
      if (jsonObj.get("TargetType") != null && !jsonObj.get("TargetType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingEntry>() {
           @Override
           public void write(JsonWriter out, MappingEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappingEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappingEntry
   * @throws IOException if the JSON string is invalid with respect to MappingEntry
   */
  public static MappingEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingEntry.class);
  }

  /**
   * Convert an instance of MappingEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

