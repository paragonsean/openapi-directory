/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RecrawlBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/incremental-crawls.html\&quot;&gt;Incremental Crawls in Glue&lt;/a&gt; in the developer guide.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecrawlPolicy {
  public static final String SERIALIZED_NAME_RECRAWL_BEHAVIOR = "RecrawlBehavior";
  @SerializedName(SERIALIZED_NAME_RECRAWL_BEHAVIOR)
  private RecrawlBehavior recrawlBehavior;

  public RecrawlPolicy() {
  }

  public RecrawlPolicy recrawlBehavior(RecrawlBehavior recrawlBehavior) {
    this.recrawlBehavior = recrawlBehavior;
    return this;
  }

  /**
   * Get recrawlBehavior
   * @return recrawlBehavior
   */
  @javax.annotation.Nullable
  public RecrawlBehavior getRecrawlBehavior() {
    return recrawlBehavior;
  }

  public void setRecrawlBehavior(RecrawlBehavior recrawlBehavior) {
    this.recrawlBehavior = recrawlBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecrawlPolicy recrawlPolicy = (RecrawlPolicy) o;
    return Objects.equals(this.recrawlBehavior, recrawlPolicy.recrawlBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recrawlBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecrawlPolicy {\n");
    sb.append("    recrawlBehavior: ").append(toIndentedString(recrawlBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RecrawlBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecrawlPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecrawlPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecrawlPolicy is not found in the empty JSON string", RecrawlPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecrawlPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecrawlPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RecrawlBehavior`
      if (jsonObj.get("RecrawlBehavior") != null && !jsonObj.get("RecrawlBehavior").isJsonNull()) {
        RecrawlBehavior.validateJsonElement(jsonObj.get("RecrawlBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecrawlPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecrawlPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecrawlPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecrawlPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<RecrawlPolicy>() {
           @Override
           public void write(JsonWriter out, RecrawlPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecrawlPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecrawlPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecrawlPolicy
   * @throws IOException if the JSON string is invalid with respect to RecrawlPolicy
   */
  public static RecrawlPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecrawlPolicy.class);
  }

  /**
   * Convert an instance of RecrawlPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

