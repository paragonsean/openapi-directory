/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ColumnStatisticsDataBinaryColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsDataBooleanColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsDataDateColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsDataDecimalColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsDataDoubleColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsDataLongColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsDataStringColumnStatisticsData;
import org.openapitools.client.model.ColumnStatisticsType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ColumnStatisticsStatisticsData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColumnStatisticsStatisticsData {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ColumnStatisticsType type;

  public static final String SERIALIZED_NAME_BOOLEAN_COLUMN_STATISTICS_DATA = "BooleanColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataBooleanColumnStatisticsData booleanColumnStatisticsData;

  public static final String SERIALIZED_NAME_DATE_COLUMN_STATISTICS_DATA = "DateColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_DATE_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataDateColumnStatisticsData dateColumnStatisticsData;

  public static final String SERIALIZED_NAME_DECIMAL_COLUMN_STATISTICS_DATA = "DecimalColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_DECIMAL_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataDecimalColumnStatisticsData decimalColumnStatisticsData;

  public static final String SERIALIZED_NAME_DOUBLE_COLUMN_STATISTICS_DATA = "DoubleColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_DOUBLE_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataDoubleColumnStatisticsData doubleColumnStatisticsData;

  public static final String SERIALIZED_NAME_LONG_COLUMN_STATISTICS_DATA = "LongColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_LONG_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataLongColumnStatisticsData longColumnStatisticsData;

  public static final String SERIALIZED_NAME_STRING_COLUMN_STATISTICS_DATA = "StringColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_STRING_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataStringColumnStatisticsData stringColumnStatisticsData;

  public static final String SERIALIZED_NAME_BINARY_COLUMN_STATISTICS_DATA = "BinaryColumnStatisticsData";
  @SerializedName(SERIALIZED_NAME_BINARY_COLUMN_STATISTICS_DATA)
  private ColumnStatisticsDataBinaryColumnStatisticsData binaryColumnStatisticsData;

  public ColumnStatisticsStatisticsData() {
  }

  public ColumnStatisticsStatisticsData type(ColumnStatisticsType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ColumnStatisticsType getType() {
    return type;
  }

  public void setType(ColumnStatisticsType type) {
    this.type = type;
  }


  public ColumnStatisticsStatisticsData booleanColumnStatisticsData(ColumnStatisticsDataBooleanColumnStatisticsData booleanColumnStatisticsData) {
    this.booleanColumnStatisticsData = booleanColumnStatisticsData;
    return this;
  }

  /**
   * Get booleanColumnStatisticsData
   * @return booleanColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataBooleanColumnStatisticsData getBooleanColumnStatisticsData() {
    return booleanColumnStatisticsData;
  }

  public void setBooleanColumnStatisticsData(ColumnStatisticsDataBooleanColumnStatisticsData booleanColumnStatisticsData) {
    this.booleanColumnStatisticsData = booleanColumnStatisticsData;
  }


  public ColumnStatisticsStatisticsData dateColumnStatisticsData(ColumnStatisticsDataDateColumnStatisticsData dateColumnStatisticsData) {
    this.dateColumnStatisticsData = dateColumnStatisticsData;
    return this;
  }

  /**
   * Get dateColumnStatisticsData
   * @return dateColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataDateColumnStatisticsData getDateColumnStatisticsData() {
    return dateColumnStatisticsData;
  }

  public void setDateColumnStatisticsData(ColumnStatisticsDataDateColumnStatisticsData dateColumnStatisticsData) {
    this.dateColumnStatisticsData = dateColumnStatisticsData;
  }


  public ColumnStatisticsStatisticsData decimalColumnStatisticsData(ColumnStatisticsDataDecimalColumnStatisticsData decimalColumnStatisticsData) {
    this.decimalColumnStatisticsData = decimalColumnStatisticsData;
    return this;
  }

  /**
   * Get decimalColumnStatisticsData
   * @return decimalColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataDecimalColumnStatisticsData getDecimalColumnStatisticsData() {
    return decimalColumnStatisticsData;
  }

  public void setDecimalColumnStatisticsData(ColumnStatisticsDataDecimalColumnStatisticsData decimalColumnStatisticsData) {
    this.decimalColumnStatisticsData = decimalColumnStatisticsData;
  }


  public ColumnStatisticsStatisticsData doubleColumnStatisticsData(ColumnStatisticsDataDoubleColumnStatisticsData doubleColumnStatisticsData) {
    this.doubleColumnStatisticsData = doubleColumnStatisticsData;
    return this;
  }

  /**
   * Get doubleColumnStatisticsData
   * @return doubleColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataDoubleColumnStatisticsData getDoubleColumnStatisticsData() {
    return doubleColumnStatisticsData;
  }

  public void setDoubleColumnStatisticsData(ColumnStatisticsDataDoubleColumnStatisticsData doubleColumnStatisticsData) {
    this.doubleColumnStatisticsData = doubleColumnStatisticsData;
  }


  public ColumnStatisticsStatisticsData longColumnStatisticsData(ColumnStatisticsDataLongColumnStatisticsData longColumnStatisticsData) {
    this.longColumnStatisticsData = longColumnStatisticsData;
    return this;
  }

  /**
   * Get longColumnStatisticsData
   * @return longColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataLongColumnStatisticsData getLongColumnStatisticsData() {
    return longColumnStatisticsData;
  }

  public void setLongColumnStatisticsData(ColumnStatisticsDataLongColumnStatisticsData longColumnStatisticsData) {
    this.longColumnStatisticsData = longColumnStatisticsData;
  }


  public ColumnStatisticsStatisticsData stringColumnStatisticsData(ColumnStatisticsDataStringColumnStatisticsData stringColumnStatisticsData) {
    this.stringColumnStatisticsData = stringColumnStatisticsData;
    return this;
  }

  /**
   * Get stringColumnStatisticsData
   * @return stringColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataStringColumnStatisticsData getStringColumnStatisticsData() {
    return stringColumnStatisticsData;
  }

  public void setStringColumnStatisticsData(ColumnStatisticsDataStringColumnStatisticsData stringColumnStatisticsData) {
    this.stringColumnStatisticsData = stringColumnStatisticsData;
  }


  public ColumnStatisticsStatisticsData binaryColumnStatisticsData(ColumnStatisticsDataBinaryColumnStatisticsData binaryColumnStatisticsData) {
    this.binaryColumnStatisticsData = binaryColumnStatisticsData;
    return this;
  }

  /**
   * Get binaryColumnStatisticsData
   * @return binaryColumnStatisticsData
   */
  @javax.annotation.Nullable
  public ColumnStatisticsDataBinaryColumnStatisticsData getBinaryColumnStatisticsData() {
    return binaryColumnStatisticsData;
  }

  public void setBinaryColumnStatisticsData(ColumnStatisticsDataBinaryColumnStatisticsData binaryColumnStatisticsData) {
    this.binaryColumnStatisticsData = binaryColumnStatisticsData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnStatisticsStatisticsData columnStatisticsStatisticsData = (ColumnStatisticsStatisticsData) o;
    return Objects.equals(this.type, columnStatisticsStatisticsData.type) &&
        Objects.equals(this.booleanColumnStatisticsData, columnStatisticsStatisticsData.booleanColumnStatisticsData) &&
        Objects.equals(this.dateColumnStatisticsData, columnStatisticsStatisticsData.dateColumnStatisticsData) &&
        Objects.equals(this.decimalColumnStatisticsData, columnStatisticsStatisticsData.decimalColumnStatisticsData) &&
        Objects.equals(this.doubleColumnStatisticsData, columnStatisticsStatisticsData.doubleColumnStatisticsData) &&
        Objects.equals(this.longColumnStatisticsData, columnStatisticsStatisticsData.longColumnStatisticsData) &&
        Objects.equals(this.stringColumnStatisticsData, columnStatisticsStatisticsData.stringColumnStatisticsData) &&
        Objects.equals(this.binaryColumnStatisticsData, columnStatisticsStatisticsData.binaryColumnStatisticsData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, booleanColumnStatisticsData, dateColumnStatisticsData, decimalColumnStatisticsData, doubleColumnStatisticsData, longColumnStatisticsData, stringColumnStatisticsData, binaryColumnStatisticsData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnStatisticsStatisticsData {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    booleanColumnStatisticsData: ").append(toIndentedString(booleanColumnStatisticsData)).append("\n");
    sb.append("    dateColumnStatisticsData: ").append(toIndentedString(dateColumnStatisticsData)).append("\n");
    sb.append("    decimalColumnStatisticsData: ").append(toIndentedString(decimalColumnStatisticsData)).append("\n");
    sb.append("    doubleColumnStatisticsData: ").append(toIndentedString(doubleColumnStatisticsData)).append("\n");
    sb.append("    longColumnStatisticsData: ").append(toIndentedString(longColumnStatisticsData)).append("\n");
    sb.append("    stringColumnStatisticsData: ").append(toIndentedString(stringColumnStatisticsData)).append("\n");
    sb.append("    binaryColumnStatisticsData: ").append(toIndentedString(binaryColumnStatisticsData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("BooleanColumnStatisticsData");
    openapiFields.add("DateColumnStatisticsData");
    openapiFields.add("DecimalColumnStatisticsData");
    openapiFields.add("DoubleColumnStatisticsData");
    openapiFields.add("LongColumnStatisticsData");
    openapiFields.add("StringColumnStatisticsData");
    openapiFields.add("BinaryColumnStatisticsData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColumnStatisticsStatisticsData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnStatisticsStatisticsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnStatisticsStatisticsData is not found in the empty JSON string", ColumnStatisticsStatisticsData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColumnStatisticsStatisticsData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnStatisticsStatisticsData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ColumnStatisticsStatisticsData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Type`
      ColumnStatisticsType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `BooleanColumnStatisticsData`
      if (jsonObj.get("BooleanColumnStatisticsData") != null && !jsonObj.get("BooleanColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataBooleanColumnStatisticsData.validateJsonElement(jsonObj.get("BooleanColumnStatisticsData"));
      }
      // validate the optional field `DateColumnStatisticsData`
      if (jsonObj.get("DateColumnStatisticsData") != null && !jsonObj.get("DateColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataDateColumnStatisticsData.validateJsonElement(jsonObj.get("DateColumnStatisticsData"));
      }
      // validate the optional field `DecimalColumnStatisticsData`
      if (jsonObj.get("DecimalColumnStatisticsData") != null && !jsonObj.get("DecimalColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataDecimalColumnStatisticsData.validateJsonElement(jsonObj.get("DecimalColumnStatisticsData"));
      }
      // validate the optional field `DoubleColumnStatisticsData`
      if (jsonObj.get("DoubleColumnStatisticsData") != null && !jsonObj.get("DoubleColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataDoubleColumnStatisticsData.validateJsonElement(jsonObj.get("DoubleColumnStatisticsData"));
      }
      // validate the optional field `LongColumnStatisticsData`
      if (jsonObj.get("LongColumnStatisticsData") != null && !jsonObj.get("LongColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataLongColumnStatisticsData.validateJsonElement(jsonObj.get("LongColumnStatisticsData"));
      }
      // validate the optional field `StringColumnStatisticsData`
      if (jsonObj.get("StringColumnStatisticsData") != null && !jsonObj.get("StringColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataStringColumnStatisticsData.validateJsonElement(jsonObj.get("StringColumnStatisticsData"));
      }
      // validate the optional field `BinaryColumnStatisticsData`
      if (jsonObj.get("BinaryColumnStatisticsData") != null && !jsonObj.get("BinaryColumnStatisticsData").isJsonNull()) {
        ColumnStatisticsDataBinaryColumnStatisticsData.validateJsonElement(jsonObj.get("BinaryColumnStatisticsData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnStatisticsStatisticsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnStatisticsStatisticsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnStatisticsStatisticsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnStatisticsStatisticsData.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnStatisticsStatisticsData>() {
           @Override
           public void write(JsonWriter out, ColumnStatisticsStatisticsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnStatisticsStatisticsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColumnStatisticsStatisticsData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColumnStatisticsStatisticsData
   * @throws IOException if the JSON string is invalid with respect to ColumnStatisticsStatisticsData
   */
  public static ColumnStatisticsStatisticsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnStatisticsStatisticsData.class);
  }

  /**
   * Convert an instance of ColumnStatisticsStatisticsData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

