/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompressionType;
import org.openapitools.client.model.QuoteChar;
import org.openapitools.client.model.S3CsvSourceAdditionalOptions;
import org.openapitools.client.model.Separator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeGenConfigurationNodeS3CsvSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeGenConfigurationNodeS3CsvSource {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATHS = "Paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List paths;

  public static final String SERIALIZED_NAME_COMPRESSION_TYPE = "CompressionType";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_TYPE)
  private CompressionType compressionType;

  public static final String SERIALIZED_NAME_EXCLUSIONS = "Exclusions";
  @SerializedName(SERIALIZED_NAME_EXCLUSIONS)
  private List exclusions;

  public static final String SERIALIZED_NAME_GROUP_SIZE = "GroupSize";
  @SerializedName(SERIALIZED_NAME_GROUP_SIZE)
  private String groupSize;

  public static final String SERIALIZED_NAME_GROUP_FILES = "GroupFiles";
  @SerializedName(SERIALIZED_NAME_GROUP_FILES)
  private String groupFiles;

  public static final String SERIALIZED_NAME_RECURSE = "Recurse";
  @SerializedName(SERIALIZED_NAME_RECURSE)
  private Boolean recurse;

  public static final String SERIALIZED_NAME_MAX_BAND = "MaxBand";
  @SerializedName(SERIALIZED_NAME_MAX_BAND)
  private Integer maxBand;

  public static final String SERIALIZED_NAME_MAX_FILES_IN_BAND = "MaxFilesInBand";
  @SerializedName(SERIALIZED_NAME_MAX_FILES_IN_BAND)
  private Integer maxFilesInBand;

  public static final String SERIALIZED_NAME_ADDITIONAL_OPTIONS = "AdditionalOptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OPTIONS)
  private S3CsvSourceAdditionalOptions additionalOptions;

  public static final String SERIALIZED_NAME_SEPARATOR = "Separator";
  @SerializedName(SERIALIZED_NAME_SEPARATOR)
  private Separator separator;

  public static final String SERIALIZED_NAME_ESCAPER = "Escaper";
  @SerializedName(SERIALIZED_NAME_ESCAPER)
  private String escaper;

  public static final String SERIALIZED_NAME_QUOTE_CHAR = "QuoteChar";
  @SerializedName(SERIALIZED_NAME_QUOTE_CHAR)
  private QuoteChar quoteChar;

  public static final String SERIALIZED_NAME_MULTILINE = "Multiline";
  @SerializedName(SERIALIZED_NAME_MULTILINE)
  private Boolean multiline;

  public static final String SERIALIZED_NAME_WITH_HEADER = "WithHeader";
  @SerializedName(SERIALIZED_NAME_WITH_HEADER)
  private Boolean withHeader;

  public static final String SERIALIZED_NAME_WRITE_HEADER = "WriteHeader";
  @SerializedName(SERIALIZED_NAME_WRITE_HEADER)
  private Boolean writeHeader;

  public static final String SERIALIZED_NAME_SKIP_FIRST = "SkipFirst";
  @SerializedName(SERIALIZED_NAME_SKIP_FIRST)
  private Boolean skipFirst;

  public static final String SERIALIZED_NAME_OPTIMIZE_PERFORMANCE = "OptimizePerformance";
  @SerializedName(SERIALIZED_NAME_OPTIMIZE_PERFORMANCE)
  private Boolean optimizePerformance;

  public static final String SERIALIZED_NAME_OUTPUT_SCHEMAS = "OutputSchemas";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCHEMAS)
  private List outputSchemas;

  public CodeGenConfigurationNodeS3CsvSource() {
  }

  public CodeGenConfigurationNodeS3CsvSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CodeGenConfigurationNodeS3CsvSource paths(List paths) {
    this.paths = paths;
    return this;
  }

  /**
   * Get paths
   * @return paths
   */
  @javax.annotation.Nonnull
  public List getPaths() {
    return paths;
  }

  public void setPaths(List paths) {
    this.paths = paths;
  }


  public CodeGenConfigurationNodeS3CsvSource compressionType(CompressionType compressionType) {
    this.compressionType = compressionType;
    return this;
  }

  /**
   * Get compressionType
   * @return compressionType
   */
  @javax.annotation.Nullable
  public CompressionType getCompressionType() {
    return compressionType;
  }

  public void setCompressionType(CompressionType compressionType) {
    this.compressionType = compressionType;
  }


  public CodeGenConfigurationNodeS3CsvSource exclusions(List exclusions) {
    this.exclusions = exclusions;
    return this;
  }

  /**
   * Get exclusions
   * @return exclusions
   */
  @javax.annotation.Nullable
  public List getExclusions() {
    return exclusions;
  }

  public void setExclusions(List exclusions) {
    this.exclusions = exclusions;
  }


  public CodeGenConfigurationNodeS3CsvSource groupSize(String groupSize) {
    this.groupSize = groupSize;
    return this;
  }

  /**
   * Get groupSize
   * @return groupSize
   */
  @javax.annotation.Nullable
  public String getGroupSize() {
    return groupSize;
  }

  public void setGroupSize(String groupSize) {
    this.groupSize = groupSize;
  }


  public CodeGenConfigurationNodeS3CsvSource groupFiles(String groupFiles) {
    this.groupFiles = groupFiles;
    return this;
  }

  /**
   * Get groupFiles
   * @return groupFiles
   */
  @javax.annotation.Nullable
  public String getGroupFiles() {
    return groupFiles;
  }

  public void setGroupFiles(String groupFiles) {
    this.groupFiles = groupFiles;
  }


  public CodeGenConfigurationNodeS3CsvSource recurse(Boolean recurse) {
    this.recurse = recurse;
    return this;
  }

  /**
   * Get recurse
   * @return recurse
   */
  @javax.annotation.Nullable
  public Boolean getRecurse() {
    return recurse;
  }

  public void setRecurse(Boolean recurse) {
    this.recurse = recurse;
  }


  public CodeGenConfigurationNodeS3CsvSource maxBand(Integer maxBand) {
    this.maxBand = maxBand;
    return this;
  }

  /**
   * Get maxBand
   * @return maxBand
   */
  @javax.annotation.Nullable
  public Integer getMaxBand() {
    return maxBand;
  }

  public void setMaxBand(Integer maxBand) {
    this.maxBand = maxBand;
  }


  public CodeGenConfigurationNodeS3CsvSource maxFilesInBand(Integer maxFilesInBand) {
    this.maxFilesInBand = maxFilesInBand;
    return this;
  }

  /**
   * Get maxFilesInBand
   * @return maxFilesInBand
   */
  @javax.annotation.Nullable
  public Integer getMaxFilesInBand() {
    return maxFilesInBand;
  }

  public void setMaxFilesInBand(Integer maxFilesInBand) {
    this.maxFilesInBand = maxFilesInBand;
  }


  public CodeGenConfigurationNodeS3CsvSource additionalOptions(S3CsvSourceAdditionalOptions additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  /**
   * Get additionalOptions
   * @return additionalOptions
   */
  @javax.annotation.Nullable
  public S3CsvSourceAdditionalOptions getAdditionalOptions() {
    return additionalOptions;
  }

  public void setAdditionalOptions(S3CsvSourceAdditionalOptions additionalOptions) {
    this.additionalOptions = additionalOptions;
  }


  public CodeGenConfigurationNodeS3CsvSource separator(Separator separator) {
    this.separator = separator;
    return this;
  }

  /**
   * Get separator
   * @return separator
   */
  @javax.annotation.Nonnull
  public Separator getSeparator() {
    return separator;
  }

  public void setSeparator(Separator separator) {
    this.separator = separator;
  }


  public CodeGenConfigurationNodeS3CsvSource escaper(String escaper) {
    this.escaper = escaper;
    return this;
  }

  /**
   * Get escaper
   * @return escaper
   */
  @javax.annotation.Nullable
  public String getEscaper() {
    return escaper;
  }

  public void setEscaper(String escaper) {
    this.escaper = escaper;
  }


  public CodeGenConfigurationNodeS3CsvSource quoteChar(QuoteChar quoteChar) {
    this.quoteChar = quoteChar;
    return this;
  }

  /**
   * Get quoteChar
   * @return quoteChar
   */
  @javax.annotation.Nonnull
  public QuoteChar getQuoteChar() {
    return quoteChar;
  }

  public void setQuoteChar(QuoteChar quoteChar) {
    this.quoteChar = quoteChar;
  }


  public CodeGenConfigurationNodeS3CsvSource multiline(Boolean multiline) {
    this.multiline = multiline;
    return this;
  }

  /**
   * Get multiline
   * @return multiline
   */
  @javax.annotation.Nullable
  public Boolean getMultiline() {
    return multiline;
  }

  public void setMultiline(Boolean multiline) {
    this.multiline = multiline;
  }


  public CodeGenConfigurationNodeS3CsvSource withHeader(Boolean withHeader) {
    this.withHeader = withHeader;
    return this;
  }

  /**
   * Get withHeader
   * @return withHeader
   */
  @javax.annotation.Nullable
  public Boolean getWithHeader() {
    return withHeader;
  }

  public void setWithHeader(Boolean withHeader) {
    this.withHeader = withHeader;
  }


  public CodeGenConfigurationNodeS3CsvSource writeHeader(Boolean writeHeader) {
    this.writeHeader = writeHeader;
    return this;
  }

  /**
   * Get writeHeader
   * @return writeHeader
   */
  @javax.annotation.Nullable
  public Boolean getWriteHeader() {
    return writeHeader;
  }

  public void setWriteHeader(Boolean writeHeader) {
    this.writeHeader = writeHeader;
  }


  public CodeGenConfigurationNodeS3CsvSource skipFirst(Boolean skipFirst) {
    this.skipFirst = skipFirst;
    return this;
  }

  /**
   * Get skipFirst
   * @return skipFirst
   */
  @javax.annotation.Nullable
  public Boolean getSkipFirst() {
    return skipFirst;
  }

  public void setSkipFirst(Boolean skipFirst) {
    this.skipFirst = skipFirst;
  }


  public CodeGenConfigurationNodeS3CsvSource optimizePerformance(Boolean optimizePerformance) {
    this.optimizePerformance = optimizePerformance;
    return this;
  }

  /**
   * Get optimizePerformance
   * @return optimizePerformance
   */
  @javax.annotation.Nullable
  public Boolean getOptimizePerformance() {
    return optimizePerformance;
  }

  public void setOptimizePerformance(Boolean optimizePerformance) {
    this.optimizePerformance = optimizePerformance;
  }


  public CodeGenConfigurationNodeS3CsvSource outputSchemas(List outputSchemas) {
    this.outputSchemas = outputSchemas;
    return this;
  }

  /**
   * Get outputSchemas
   * @return outputSchemas
   */
  @javax.annotation.Nullable
  public List getOutputSchemas() {
    return outputSchemas;
  }

  public void setOutputSchemas(List outputSchemas) {
    this.outputSchemas = outputSchemas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeGenConfigurationNodeS3CsvSource codeGenConfigurationNodeS3CsvSource = (CodeGenConfigurationNodeS3CsvSource) o;
    return Objects.equals(this.name, codeGenConfigurationNodeS3CsvSource.name) &&
        Objects.equals(this.paths, codeGenConfigurationNodeS3CsvSource.paths) &&
        Objects.equals(this.compressionType, codeGenConfigurationNodeS3CsvSource.compressionType) &&
        Objects.equals(this.exclusions, codeGenConfigurationNodeS3CsvSource.exclusions) &&
        Objects.equals(this.groupSize, codeGenConfigurationNodeS3CsvSource.groupSize) &&
        Objects.equals(this.groupFiles, codeGenConfigurationNodeS3CsvSource.groupFiles) &&
        Objects.equals(this.recurse, codeGenConfigurationNodeS3CsvSource.recurse) &&
        Objects.equals(this.maxBand, codeGenConfigurationNodeS3CsvSource.maxBand) &&
        Objects.equals(this.maxFilesInBand, codeGenConfigurationNodeS3CsvSource.maxFilesInBand) &&
        Objects.equals(this.additionalOptions, codeGenConfigurationNodeS3CsvSource.additionalOptions) &&
        Objects.equals(this.separator, codeGenConfigurationNodeS3CsvSource.separator) &&
        Objects.equals(this.escaper, codeGenConfigurationNodeS3CsvSource.escaper) &&
        Objects.equals(this.quoteChar, codeGenConfigurationNodeS3CsvSource.quoteChar) &&
        Objects.equals(this.multiline, codeGenConfigurationNodeS3CsvSource.multiline) &&
        Objects.equals(this.withHeader, codeGenConfigurationNodeS3CsvSource.withHeader) &&
        Objects.equals(this.writeHeader, codeGenConfigurationNodeS3CsvSource.writeHeader) &&
        Objects.equals(this.skipFirst, codeGenConfigurationNodeS3CsvSource.skipFirst) &&
        Objects.equals(this.optimizePerformance, codeGenConfigurationNodeS3CsvSource.optimizePerformance) &&
        Objects.equals(this.outputSchemas, codeGenConfigurationNodeS3CsvSource.outputSchemas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, paths, compressionType, exclusions, groupSize, groupFiles, recurse, maxBand, maxFilesInBand, additionalOptions, separator, escaper, quoteChar, multiline, withHeader, writeHeader, skipFirst, optimizePerformance, outputSchemas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeGenConfigurationNodeS3CsvSource {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    compressionType: ").append(toIndentedString(compressionType)).append("\n");
    sb.append("    exclusions: ").append(toIndentedString(exclusions)).append("\n");
    sb.append("    groupSize: ").append(toIndentedString(groupSize)).append("\n");
    sb.append("    groupFiles: ").append(toIndentedString(groupFiles)).append("\n");
    sb.append("    recurse: ").append(toIndentedString(recurse)).append("\n");
    sb.append("    maxBand: ").append(toIndentedString(maxBand)).append("\n");
    sb.append("    maxFilesInBand: ").append(toIndentedString(maxFilesInBand)).append("\n");
    sb.append("    additionalOptions: ").append(toIndentedString(additionalOptions)).append("\n");
    sb.append("    separator: ").append(toIndentedString(separator)).append("\n");
    sb.append("    escaper: ").append(toIndentedString(escaper)).append("\n");
    sb.append("    quoteChar: ").append(toIndentedString(quoteChar)).append("\n");
    sb.append("    multiline: ").append(toIndentedString(multiline)).append("\n");
    sb.append("    withHeader: ").append(toIndentedString(withHeader)).append("\n");
    sb.append("    writeHeader: ").append(toIndentedString(writeHeader)).append("\n");
    sb.append("    skipFirst: ").append(toIndentedString(skipFirst)).append("\n");
    sb.append("    optimizePerformance: ").append(toIndentedString(optimizePerformance)).append("\n");
    sb.append("    outputSchemas: ").append(toIndentedString(outputSchemas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Paths");
    openapiFields.add("CompressionType");
    openapiFields.add("Exclusions");
    openapiFields.add("GroupSize");
    openapiFields.add("GroupFiles");
    openapiFields.add("Recurse");
    openapiFields.add("MaxBand");
    openapiFields.add("MaxFilesInBand");
    openapiFields.add("AdditionalOptions");
    openapiFields.add("Separator");
    openapiFields.add("Escaper");
    openapiFields.add("QuoteChar");
    openapiFields.add("Multiline");
    openapiFields.add("WithHeader");
    openapiFields.add("WriteHeader");
    openapiFields.add("SkipFirst");
    openapiFields.add("OptimizePerformance");
    openapiFields.add("OutputSchemas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Paths");
    openapiRequiredFields.add("Separator");
    openapiRequiredFields.add("QuoteChar");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeGenConfigurationNodeS3CsvSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeGenConfigurationNodeS3CsvSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeGenConfigurationNodeS3CsvSource is not found in the empty JSON string", CodeGenConfigurationNodeS3CsvSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeGenConfigurationNodeS3CsvSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeGenConfigurationNodeS3CsvSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeGenConfigurationNodeS3CsvSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Paths`
      List.validateJsonElement(jsonObj.get("Paths"));
      // validate the optional field `CompressionType`
      if (jsonObj.get("CompressionType") != null && !jsonObj.get("CompressionType").isJsonNull()) {
        CompressionType.validateJsonElement(jsonObj.get("CompressionType"));
      }
      // validate the optional field `Exclusions`
      if (jsonObj.get("Exclusions") != null && !jsonObj.get("Exclusions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Exclusions"));
      }
      // validate the optional field `GroupSize`
      if (jsonObj.get("GroupSize") != null && !jsonObj.get("GroupSize").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GroupSize"));
      }
      // validate the optional field `GroupFiles`
      if (jsonObj.get("GroupFiles") != null && !jsonObj.get("GroupFiles").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GroupFiles"));
      }
      // validate the optional field `Recurse`
      if (jsonObj.get("Recurse") != null && !jsonObj.get("Recurse").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Recurse"));
      }
      // validate the optional field `MaxBand`
      if (jsonObj.get("MaxBand") != null && !jsonObj.get("MaxBand").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBand"));
      }
      // validate the optional field `MaxFilesInBand`
      if (jsonObj.get("MaxFilesInBand") != null && !jsonObj.get("MaxFilesInBand").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFilesInBand"));
      }
      // validate the optional field `AdditionalOptions`
      if (jsonObj.get("AdditionalOptions") != null && !jsonObj.get("AdditionalOptions").isJsonNull()) {
        S3CsvSourceAdditionalOptions.validateJsonElement(jsonObj.get("AdditionalOptions"));
      }
      // validate the required field `Separator`
      Separator.validateJsonElement(jsonObj.get("Separator"));
      // validate the optional field `Escaper`
      if (jsonObj.get("Escaper") != null && !jsonObj.get("Escaper").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Escaper"));
      }
      // validate the required field `QuoteChar`
      QuoteChar.validateJsonElement(jsonObj.get("QuoteChar"));
      // validate the optional field `Multiline`
      if (jsonObj.get("Multiline") != null && !jsonObj.get("Multiline").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Multiline"));
      }
      // validate the optional field `WithHeader`
      if (jsonObj.get("WithHeader") != null && !jsonObj.get("WithHeader").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WithHeader"));
      }
      // validate the optional field `WriteHeader`
      if (jsonObj.get("WriteHeader") != null && !jsonObj.get("WriteHeader").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WriteHeader"));
      }
      // validate the optional field `SkipFirst`
      if (jsonObj.get("SkipFirst") != null && !jsonObj.get("SkipFirst").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SkipFirst"));
      }
      // validate the optional field `OptimizePerformance`
      if (jsonObj.get("OptimizePerformance") != null && !jsonObj.get("OptimizePerformance").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("OptimizePerformance"));
      }
      // validate the optional field `OutputSchemas`
      if (jsonObj.get("OutputSchemas") != null && !jsonObj.get("OutputSchemas").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputSchemas"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeGenConfigurationNodeS3CsvSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeGenConfigurationNodeS3CsvSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeGenConfigurationNodeS3CsvSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeGenConfigurationNodeS3CsvSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeGenConfigurationNodeS3CsvSource>() {
           @Override
           public void write(JsonWriter out, CodeGenConfigurationNodeS3CsvSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeGenConfigurationNodeS3CsvSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeGenConfigurationNodeS3CsvSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeGenConfigurationNodeS3CsvSource
   * @throws IOException if the JSON string is invalid with respect to CodeGenConfigurationNodeS3CsvSource
   */
  public static CodeGenConfigurationNodeS3CsvSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeGenConfigurationNodeS3CsvSource.class);
  }

  /**
   * Convert an instance of CodeGenConfigurationNodeS3CsvSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

