/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RedshiftTargetUpsertRedshiftOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeGenConfigurationNodeRedshiftTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeGenConfigurationNodeRedshiftTarget {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INPUTS = "Inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List inputs;

  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_TABLE = "Table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_REDSHIFT_TMP_DIR = "RedshiftTmpDir";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_TMP_DIR)
  private String redshiftTmpDir;

  public static final String SERIALIZED_NAME_TMP_DIR_I_A_M_ROLE = "TmpDirIAMRole";
  @SerializedName(SERIALIZED_NAME_TMP_DIR_I_A_M_ROLE)
  private String tmpDirIAMRole;

  public static final String SERIALIZED_NAME_UPSERT_REDSHIFT_OPTIONS = "UpsertRedshiftOptions";
  @SerializedName(SERIALIZED_NAME_UPSERT_REDSHIFT_OPTIONS)
  private RedshiftTargetUpsertRedshiftOptions upsertRedshiftOptions;

  public CodeGenConfigurationNodeRedshiftTarget() {
  }

  public CodeGenConfigurationNodeRedshiftTarget name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CodeGenConfigurationNodeRedshiftTarget inputs(List inputs) {
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nonnull
  public List getInputs() {
    return inputs;
  }

  public void setInputs(List inputs) {
    this.inputs = inputs;
  }


  public CodeGenConfigurationNodeRedshiftTarget database(String database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nonnull
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public CodeGenConfigurationNodeRedshiftTarget table(String table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nonnull
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public CodeGenConfigurationNodeRedshiftTarget redshiftTmpDir(String redshiftTmpDir) {
    this.redshiftTmpDir = redshiftTmpDir;
    return this;
  }

  /**
   * Get redshiftTmpDir
   * @return redshiftTmpDir
   */
  @javax.annotation.Nullable
  public String getRedshiftTmpDir() {
    return redshiftTmpDir;
  }

  public void setRedshiftTmpDir(String redshiftTmpDir) {
    this.redshiftTmpDir = redshiftTmpDir;
  }


  public CodeGenConfigurationNodeRedshiftTarget tmpDirIAMRole(String tmpDirIAMRole) {
    this.tmpDirIAMRole = tmpDirIAMRole;
    return this;
  }

  /**
   * Get tmpDirIAMRole
   * @return tmpDirIAMRole
   */
  @javax.annotation.Nullable
  public String getTmpDirIAMRole() {
    return tmpDirIAMRole;
  }

  public void setTmpDirIAMRole(String tmpDirIAMRole) {
    this.tmpDirIAMRole = tmpDirIAMRole;
  }


  public CodeGenConfigurationNodeRedshiftTarget upsertRedshiftOptions(RedshiftTargetUpsertRedshiftOptions upsertRedshiftOptions) {
    this.upsertRedshiftOptions = upsertRedshiftOptions;
    return this;
  }

  /**
   * Get upsertRedshiftOptions
   * @return upsertRedshiftOptions
   */
  @javax.annotation.Nullable
  public RedshiftTargetUpsertRedshiftOptions getUpsertRedshiftOptions() {
    return upsertRedshiftOptions;
  }

  public void setUpsertRedshiftOptions(RedshiftTargetUpsertRedshiftOptions upsertRedshiftOptions) {
    this.upsertRedshiftOptions = upsertRedshiftOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeGenConfigurationNodeRedshiftTarget codeGenConfigurationNodeRedshiftTarget = (CodeGenConfigurationNodeRedshiftTarget) o;
    return Objects.equals(this.name, codeGenConfigurationNodeRedshiftTarget.name) &&
        Objects.equals(this.inputs, codeGenConfigurationNodeRedshiftTarget.inputs) &&
        Objects.equals(this.database, codeGenConfigurationNodeRedshiftTarget.database) &&
        Objects.equals(this.table, codeGenConfigurationNodeRedshiftTarget.table) &&
        Objects.equals(this.redshiftTmpDir, codeGenConfigurationNodeRedshiftTarget.redshiftTmpDir) &&
        Objects.equals(this.tmpDirIAMRole, codeGenConfigurationNodeRedshiftTarget.tmpDirIAMRole) &&
        Objects.equals(this.upsertRedshiftOptions, codeGenConfigurationNodeRedshiftTarget.upsertRedshiftOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, inputs, database, table, redshiftTmpDir, tmpDirIAMRole, upsertRedshiftOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeGenConfigurationNodeRedshiftTarget {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    redshiftTmpDir: ").append(toIndentedString(redshiftTmpDir)).append("\n");
    sb.append("    tmpDirIAMRole: ").append(toIndentedString(tmpDirIAMRole)).append("\n");
    sb.append("    upsertRedshiftOptions: ").append(toIndentedString(upsertRedshiftOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Inputs");
    openapiFields.add("Database");
    openapiFields.add("Table");
    openapiFields.add("RedshiftTmpDir");
    openapiFields.add("TmpDirIAMRole");
    openapiFields.add("UpsertRedshiftOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Inputs");
    openapiRequiredFields.add("Database");
    openapiRequiredFields.add("Table");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeGenConfigurationNodeRedshiftTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeGenConfigurationNodeRedshiftTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeGenConfigurationNodeRedshiftTarget is not found in the empty JSON string", CodeGenConfigurationNodeRedshiftTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeGenConfigurationNodeRedshiftTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeGenConfigurationNodeRedshiftTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeGenConfigurationNodeRedshiftTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Inputs`
      List.validateJsonElement(jsonObj.get("Inputs"));
      // validate the required field `Database`
      String.validateJsonElement(jsonObj.get("Database"));
      // validate the required field `Table`
      String.validateJsonElement(jsonObj.get("Table"));
      // validate the optional field `RedshiftTmpDir`
      if (jsonObj.get("RedshiftTmpDir") != null && !jsonObj.get("RedshiftTmpDir").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RedshiftTmpDir"));
      }
      // validate the optional field `TmpDirIAMRole`
      if (jsonObj.get("TmpDirIAMRole") != null && !jsonObj.get("TmpDirIAMRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TmpDirIAMRole"));
      }
      // validate the optional field `UpsertRedshiftOptions`
      if (jsonObj.get("UpsertRedshiftOptions") != null && !jsonObj.get("UpsertRedshiftOptions").isJsonNull()) {
        RedshiftTargetUpsertRedshiftOptions.validateJsonElement(jsonObj.get("UpsertRedshiftOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeGenConfigurationNodeRedshiftTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeGenConfigurationNodeRedshiftTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeGenConfigurationNodeRedshiftTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeGenConfigurationNodeRedshiftTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeGenConfigurationNodeRedshiftTarget>() {
           @Override
           public void write(JsonWriter out, CodeGenConfigurationNodeRedshiftTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeGenConfigurationNodeRedshiftTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeGenConfigurationNodeRedshiftTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeGenConfigurationNodeRedshiftTarget
   * @throws IOException if the JSON string is invalid with respect to CodeGenConfigurationNodeRedshiftTarget
   */
  public static CodeGenConfigurationNodeRedshiftTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeGenConfigurationNodeRedshiftTarget.class);
  }

  /**
   * Convert an instance of CodeGenConfigurationNodeRedshiftTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

