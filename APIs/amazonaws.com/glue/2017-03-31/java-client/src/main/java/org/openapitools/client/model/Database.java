/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DatabaseInputFederatedDatabase;
import org.openapitools.client.model.DatabaseInputTargetDatabase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &lt;code&gt;Database&lt;/code&gt; object represents a logical grouping of tables that might reside in a Hive metastore or an RDBMS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Database {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOCATION_URI = "LocationUri";
  @SerializedName(SERIALIZED_NAME_LOCATION_URI)
  private String locationUri;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_CREATE_TIME = "CreateTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_CREATE_TABLE_DEFAULT_PERMISSIONS = "CreateTableDefaultPermissions";
  @SerializedName(SERIALIZED_NAME_CREATE_TABLE_DEFAULT_PERMISSIONS)
  private List createTableDefaultPermissions;

  public static final String SERIALIZED_NAME_TARGET_DATABASE = "TargetDatabase";
  @SerializedName(SERIALIZED_NAME_TARGET_DATABASE)
  private DatabaseInputTargetDatabase targetDatabase;

  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_FEDERATED_DATABASE = "FederatedDatabase";
  @SerializedName(SERIALIZED_NAME_FEDERATED_DATABASE)
  private DatabaseInputFederatedDatabase federatedDatabase;

  public Database() {
  }

  public Database name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Database description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Database locationUri(String locationUri) {
    this.locationUri = locationUri;
    return this;
  }

  /**
   * Get locationUri
   * @return locationUri
   */
  @javax.annotation.Nullable
  public String getLocationUri() {
    return locationUri;
  }

  public void setLocationUri(String locationUri) {
    this.locationUri = locationUri;
  }


  public Database parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public Database createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public Database createTableDefaultPermissions(List createTableDefaultPermissions) {
    this.createTableDefaultPermissions = createTableDefaultPermissions;
    return this;
  }

  /**
   * Get createTableDefaultPermissions
   * @return createTableDefaultPermissions
   */
  @javax.annotation.Nullable
  public List getCreateTableDefaultPermissions() {
    return createTableDefaultPermissions;
  }

  public void setCreateTableDefaultPermissions(List createTableDefaultPermissions) {
    this.createTableDefaultPermissions = createTableDefaultPermissions;
  }


  public Database targetDatabase(DatabaseInputTargetDatabase targetDatabase) {
    this.targetDatabase = targetDatabase;
    return this;
  }

  /**
   * Get targetDatabase
   * @return targetDatabase
   */
  @javax.annotation.Nullable
  public DatabaseInputTargetDatabase getTargetDatabase() {
    return targetDatabase;
  }

  public void setTargetDatabase(DatabaseInputTargetDatabase targetDatabase) {
    this.targetDatabase = targetDatabase;
  }


  public Database catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public Database federatedDatabase(DatabaseInputFederatedDatabase federatedDatabase) {
    this.federatedDatabase = federatedDatabase;
    return this;
  }

  /**
   * Get federatedDatabase
   * @return federatedDatabase
   */
  @javax.annotation.Nullable
  public DatabaseInputFederatedDatabase getFederatedDatabase() {
    return federatedDatabase;
  }

  public void setFederatedDatabase(DatabaseInputFederatedDatabase federatedDatabase) {
    this.federatedDatabase = federatedDatabase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Database database = (Database) o;
    return Objects.equals(this.name, database.name) &&
        Objects.equals(this.description, database.description) &&
        Objects.equals(this.locationUri, database.locationUri) &&
        Objects.equals(this.parameters, database.parameters) &&
        Objects.equals(this.createTime, database.createTime) &&
        Objects.equals(this.createTableDefaultPermissions, database.createTableDefaultPermissions) &&
        Objects.equals(this.targetDatabase, database.targetDatabase) &&
        Objects.equals(this.catalogId, database.catalogId) &&
        Objects.equals(this.federatedDatabase, database.federatedDatabase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, locationUri, parameters, createTime, createTableDefaultPermissions, targetDatabase, catalogId, federatedDatabase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Database {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    locationUri: ").append(toIndentedString(locationUri)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createTableDefaultPermissions: ").append(toIndentedString(createTableDefaultPermissions)).append("\n");
    sb.append("    targetDatabase: ").append(toIndentedString(targetDatabase)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    federatedDatabase: ").append(toIndentedString(federatedDatabase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("LocationUri");
    openapiFields.add("Parameters");
    openapiFields.add("CreateTime");
    openapiFields.add("CreateTableDefaultPermissions");
    openapiFields.add("TargetDatabase");
    openapiFields.add("CatalogId");
    openapiFields.add("FederatedDatabase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Database
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Database.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Database is not found in the empty JSON string", Database.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Database.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Database` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Database.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `LocationUri`
      if (jsonObj.get("LocationUri") != null && !jsonObj.get("LocationUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocationUri"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `CreateTime`
      if (jsonObj.get("CreateTime") != null && !jsonObj.get("CreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateTime"));
      }
      // validate the optional field `CreateTableDefaultPermissions`
      if (jsonObj.get("CreateTableDefaultPermissions") != null && !jsonObj.get("CreateTableDefaultPermissions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CreateTableDefaultPermissions"));
      }
      // validate the optional field `TargetDatabase`
      if (jsonObj.get("TargetDatabase") != null && !jsonObj.get("TargetDatabase").isJsonNull()) {
        DatabaseInputTargetDatabase.validateJsonElement(jsonObj.get("TargetDatabase"));
      }
      // validate the optional field `CatalogId`
      if (jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CatalogId"));
      }
      // validate the optional field `FederatedDatabase`
      if (jsonObj.get("FederatedDatabase") != null && !jsonObj.get("FederatedDatabase").isJsonNull()) {
        DatabaseInputFederatedDatabase.validateJsonElement(jsonObj.get("FederatedDatabase"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Database.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Database' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Database> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Database.class));

       return (TypeAdapter<T>) new TypeAdapter<Database>() {
           @Override
           public void write(JsonWriter out, Database value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Database read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Database given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Database
   * @throws IOException if the JSON string is invalid with respect to Database
   */
  public static Database fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Database.class);
  }

  /**
   * Convert an instance of Database to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

