/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StatementOutput;
import org.openapitools.client.model.StatementState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetStatementResponseStatement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetStatementResponseStatement {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StatementState state;

  public static final String SERIALIZED_NAME_OUTPUT = "Output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private StatementOutput output;

  public static final String SERIALIZED_NAME_PROGRESS = "Progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private Integer startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "CompletedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private Integer completedOn;

  public GetStatementResponseStatement() {
  }

  public GetStatementResponseStatement id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetStatementResponseStatement code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public GetStatementResponseStatement state(StatementState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StatementState getState() {
    return state;
  }

  public void setState(StatementState state) {
    this.state = state;
  }


  public GetStatementResponseStatement output(StatementOutput output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public StatementOutput getOutput() {
    return output;
  }

  public void setOutput(StatementOutput output) {
    this.output = output;
  }


  public GetStatementResponseStatement progress(Double progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }


  public GetStatementResponseStatement startedOn(Integer startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public Integer getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(Integer startedOn) {
    this.startedOn = startedOn;
  }


  public GetStatementResponseStatement completedOn(Integer completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public Integer getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(Integer completedOn) {
    this.completedOn = completedOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetStatementResponseStatement getStatementResponseStatement = (GetStatementResponseStatement) o;
    return Objects.equals(this.id, getStatementResponseStatement.id) &&
        Objects.equals(this.code, getStatementResponseStatement.code) &&
        Objects.equals(this.state, getStatementResponseStatement.state) &&
        Objects.equals(this.output, getStatementResponseStatement.output) &&
        Objects.equals(this.progress, getStatementResponseStatement.progress) &&
        Objects.equals(this.startedOn, getStatementResponseStatement.startedOn) &&
        Objects.equals(this.completedOn, getStatementResponseStatement.completedOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, state, output, progress, startedOn, completedOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetStatementResponseStatement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Code");
    openapiFields.add("State");
    openapiFields.add("Output");
    openapiFields.add("Progress");
    openapiFields.add("StartedOn");
    openapiFields.add("CompletedOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetStatementResponseStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetStatementResponseStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetStatementResponseStatement is not found in the empty JSON string", GetStatementResponseStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetStatementResponseStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetStatementResponseStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Code`
      if (jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Code"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        StatementState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Output`
      if (jsonObj.get("Output") != null && !jsonObj.get("Output").isJsonNull()) {
        StatementOutput.validateJsonElement(jsonObj.get("Output"));
      }
      // validate the optional field `Progress`
      if (jsonObj.get("Progress") != null && !jsonObj.get("Progress").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Progress"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `CompletedOn`
      if (jsonObj.get("CompletedOn") != null && !jsonObj.get("CompletedOn").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CompletedOn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetStatementResponseStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetStatementResponseStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetStatementResponseStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetStatementResponseStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<GetStatementResponseStatement>() {
           @Override
           public void write(JsonWriter out, GetStatementResponseStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetStatementResponseStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetStatementResponseStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetStatementResponseStatement
   * @throws IOException if the JSON string is invalid with respect to GetStatementResponseStatement
   */
  public static GetStatementResponseStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetStatementResponseStatement.class);
  }

  /**
   * Convert an instance of GetStatementResponseStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

