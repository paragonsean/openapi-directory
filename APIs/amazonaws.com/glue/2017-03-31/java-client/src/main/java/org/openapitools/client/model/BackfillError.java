/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackfillErrorCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A list of errors that can occur when registering partition indexes for an existing table.&lt;/p&gt; &lt;p&gt;These errors give the details about why an index registration failed and provide a limited number of partitions in the response, so that you can fix the partitions at fault and try registering the index again. The most common set of errors that can occur are categorized as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;EncryptedPartitionError: The partitions are encrypted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;InvalidPartitionTypeDataError: The partition value doesn&#39;t match the data type for that partition column.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;MissingPartitionValueError: The partitions are encrypted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;UnsupportedPartitionCharacterError: Characters inside the partition value are not supported. For example: U+0000 , U+0001, U+0002.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;InternalError: Any error which does not belong to other error codes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackfillError {
  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private BackfillErrorCode code;

  public static final String SERIALIZED_NAME_PARTITIONS = "Partitions";
  @SerializedName(SERIALIZED_NAME_PARTITIONS)
  private List partitions;

  public BackfillError() {
  }

  public BackfillError code(BackfillErrorCode code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public BackfillErrorCode getCode() {
    return code;
  }

  public void setCode(BackfillErrorCode code) {
    this.code = code;
  }


  public BackfillError partitions(List partitions) {
    this.partitions = partitions;
    return this;
  }

  /**
   * Get partitions
   * @return partitions
   */
  @javax.annotation.Nullable
  public List getPartitions() {
    return partitions;
  }

  public void setPartitions(List partitions) {
    this.partitions = partitions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackfillError backfillError = (BackfillError) o;
    return Objects.equals(this.code, backfillError.code) &&
        Objects.equals(this.partitions, backfillError.partitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, partitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackfillError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    partitions: ").append(toIndentedString(partitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Code");
    openapiFields.add("Partitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackfillError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackfillError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackfillError is not found in the empty JSON string", BackfillError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackfillError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackfillError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Code`
      if (jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) {
        BackfillErrorCode.validateJsonElement(jsonObj.get("Code"));
      }
      // validate the optional field `Partitions`
      if (jsonObj.get("Partitions") != null && !jsonObj.get("Partitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Partitions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackfillError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackfillError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackfillError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackfillError.class));

       return (TypeAdapter<T>) new TypeAdapter<BackfillError>() {
           @Override
           public void write(JsonWriter out, BackfillError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackfillError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackfillError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackfillError
   * @throws IOException if the JSON string is invalid with respect to BackfillError
   */
  public static BackfillError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackfillError.class);
  }

  /**
   * Convert an instance of BackfillError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

