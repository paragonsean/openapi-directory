/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.CreateJobRequestConnections;
import org.openapitools.client.model.CreateJobRequestExecutionProperty;
import org.openapitools.client.model.CreateJobRequestSourceControlDetails;
import org.openapitools.client.model.ExecutionClass;
import org.openapitools.client.model.JobUpdateCommand;
import org.openapitools.client.model.JobUpdateNotificationProperty;
import org.openapitools.client.model.WorkerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies information used to update an existing job definition. The previous job definition is completely overwritten by this information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobUpdate {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOG_URI = "LogUri";
  @SerializedName(SERIALIZED_NAME_LOG_URI)
  private String logUri;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_EXECUTION_PROPERTY = "ExecutionProperty";
  @SerializedName(SERIALIZED_NAME_EXECUTION_PROPERTY)
  private CreateJobRequestExecutionProperty executionProperty;

  public static final String SERIALIZED_NAME_COMMAND = "Command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private JobUpdateCommand command;

  public static final String SERIALIZED_NAME_DEFAULT_ARGUMENTS = "DefaultArguments";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ARGUMENTS)
  private Map defaultArguments;

  public static final String SERIALIZED_NAME_NON_OVERRIDABLE_ARGUMENTS = "NonOverridableArguments";
  @SerializedName(SERIALIZED_NAME_NON_OVERRIDABLE_ARGUMENTS)
  private Map nonOverridableArguments;

  public static final String SERIALIZED_NAME_CONNECTIONS = "Connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private CreateJobRequestConnections connections;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "MaxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_ALLOCATED_CAPACITY = "AllocatedCapacity";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_CAPACITY)
  private Integer allocatedCapacity;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_MAX_CAPACITY = "MaxCapacity";
  @SerializedName(SERIALIZED_NAME_MAX_CAPACITY)
  private Double maxCapacity;

  public static final String SERIALIZED_NAME_WORKER_TYPE = "WorkerType";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE)
  private WorkerType workerType;

  public static final String SERIALIZED_NAME_NUMBER_OF_WORKERS = "NumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WORKERS)
  private Integer numberOfWorkers;

  public static final String SERIALIZED_NAME_SECURITY_CONFIGURATION = "SecurityConfiguration";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONFIGURATION)
  private String securityConfiguration;

  public static final String SERIALIZED_NAME_NOTIFICATION_PROPERTY = "NotificationProperty";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PROPERTY)
  private JobUpdateNotificationProperty notificationProperty;

  public static final String SERIALIZED_NAME_GLUE_VERSION = "GlueVersion";
  @SerializedName(SERIALIZED_NAME_GLUE_VERSION)
  private String glueVersion;

  public static final String SERIALIZED_NAME_CODE_GEN_CONFIGURATION_NODES = "CodeGenConfigurationNodes";
  @SerializedName(SERIALIZED_NAME_CODE_GEN_CONFIGURATION_NODES)
  private Map codeGenConfigurationNodes;

  public static final String SERIALIZED_NAME_EXECUTION_CLASS = "ExecutionClass";
  @SerializedName(SERIALIZED_NAME_EXECUTION_CLASS)
  private ExecutionClass executionClass;

  public static final String SERIALIZED_NAME_SOURCE_CONTROL_DETAILS = "SourceControlDetails";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONTROL_DETAILS)
  private CreateJobRequestSourceControlDetails sourceControlDetails;

  public JobUpdate() {
  }

  public JobUpdate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JobUpdate logUri(String logUri) {
    this.logUri = logUri;
    return this;
  }

  /**
   * Get logUri
   * @return logUri
   */
  @javax.annotation.Nullable
  public String getLogUri() {
    return logUri;
  }

  public void setLogUri(String logUri) {
    this.logUri = logUri;
  }


  public JobUpdate role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public JobUpdate executionProperty(CreateJobRequestExecutionProperty executionProperty) {
    this.executionProperty = executionProperty;
    return this;
  }

  /**
   * Get executionProperty
   * @return executionProperty
   */
  @javax.annotation.Nullable
  public CreateJobRequestExecutionProperty getExecutionProperty() {
    return executionProperty;
  }

  public void setExecutionProperty(CreateJobRequestExecutionProperty executionProperty) {
    this.executionProperty = executionProperty;
  }


  public JobUpdate command(JobUpdateCommand command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nullable
  public JobUpdateCommand getCommand() {
    return command;
  }

  public void setCommand(JobUpdateCommand command) {
    this.command = command;
  }


  public JobUpdate defaultArguments(Map defaultArguments) {
    this.defaultArguments = defaultArguments;
    return this;
  }

  /**
   * Get defaultArguments
   * @return defaultArguments
   */
  @javax.annotation.Nullable
  public Map getDefaultArguments() {
    return defaultArguments;
  }

  public void setDefaultArguments(Map defaultArguments) {
    this.defaultArguments = defaultArguments;
  }


  public JobUpdate nonOverridableArguments(Map nonOverridableArguments) {
    this.nonOverridableArguments = nonOverridableArguments;
    return this;
  }

  /**
   * Get nonOverridableArguments
   * @return nonOverridableArguments
   */
  @javax.annotation.Nullable
  public Map getNonOverridableArguments() {
    return nonOverridableArguments;
  }

  public void setNonOverridableArguments(Map nonOverridableArguments) {
    this.nonOverridableArguments = nonOverridableArguments;
  }


  public JobUpdate connections(CreateJobRequestConnections connections) {
    this.connections = connections;
    return this;
  }

  /**
   * Get connections
   * @return connections
   */
  @javax.annotation.Nullable
  public CreateJobRequestConnections getConnections() {
    return connections;
  }

  public void setConnections(CreateJobRequestConnections connections) {
    this.connections = connections;
  }


  public JobUpdate maxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * Get maxRetries
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public JobUpdate allocatedCapacity(Integer allocatedCapacity) {
    this.allocatedCapacity = allocatedCapacity;
    return this;
  }

  /**
   * Get allocatedCapacity
   * @return allocatedCapacity
   */
  @javax.annotation.Nullable
  public Integer getAllocatedCapacity() {
    return allocatedCapacity;
  }

  public void setAllocatedCapacity(Integer allocatedCapacity) {
    this.allocatedCapacity = allocatedCapacity;
  }


  public JobUpdate timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public JobUpdate maxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
    return this;
  }

  /**
   * Get maxCapacity
   * @return maxCapacity
   */
  @javax.annotation.Nullable
  public Double getMaxCapacity() {
    return maxCapacity;
  }

  public void setMaxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
  }


  public JobUpdate workerType(WorkerType workerType) {
    this.workerType = workerType;
    return this;
  }

  /**
   * Get workerType
   * @return workerType
   */
  @javax.annotation.Nullable
  public WorkerType getWorkerType() {
    return workerType;
  }

  public void setWorkerType(WorkerType workerType) {
    this.workerType = workerType;
  }


  public JobUpdate numberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
    return this;
  }

  /**
   * Get numberOfWorkers
   * @return numberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWorkers() {
    return numberOfWorkers;
  }

  public void setNumberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
  }


  public JobUpdate securityConfiguration(String securityConfiguration) {
    this.securityConfiguration = securityConfiguration;
    return this;
  }

  /**
   * Get securityConfiguration
   * @return securityConfiguration
   */
  @javax.annotation.Nullable
  public String getSecurityConfiguration() {
    return securityConfiguration;
  }

  public void setSecurityConfiguration(String securityConfiguration) {
    this.securityConfiguration = securityConfiguration;
  }


  public JobUpdate notificationProperty(JobUpdateNotificationProperty notificationProperty) {
    this.notificationProperty = notificationProperty;
    return this;
  }

  /**
   * Get notificationProperty
   * @return notificationProperty
   */
  @javax.annotation.Nullable
  public JobUpdateNotificationProperty getNotificationProperty() {
    return notificationProperty;
  }

  public void setNotificationProperty(JobUpdateNotificationProperty notificationProperty) {
    this.notificationProperty = notificationProperty;
  }


  public JobUpdate glueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
    return this;
  }

  /**
   * Get glueVersion
   * @return glueVersion
   */
  @javax.annotation.Nullable
  public String getGlueVersion() {
    return glueVersion;
  }

  public void setGlueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
  }


  public JobUpdate codeGenConfigurationNodes(Map codeGenConfigurationNodes) {
    this.codeGenConfigurationNodes = codeGenConfigurationNodes;
    return this;
  }

  /**
   * Get codeGenConfigurationNodes
   * @return codeGenConfigurationNodes
   */
  @javax.annotation.Nullable
  public Map getCodeGenConfigurationNodes() {
    return codeGenConfigurationNodes;
  }

  public void setCodeGenConfigurationNodes(Map codeGenConfigurationNodes) {
    this.codeGenConfigurationNodes = codeGenConfigurationNodes;
  }


  public JobUpdate executionClass(ExecutionClass executionClass) {
    this.executionClass = executionClass;
    return this;
  }

  /**
   * Get executionClass
   * @return executionClass
   */
  @javax.annotation.Nullable
  public ExecutionClass getExecutionClass() {
    return executionClass;
  }

  public void setExecutionClass(ExecutionClass executionClass) {
    this.executionClass = executionClass;
  }


  public JobUpdate sourceControlDetails(CreateJobRequestSourceControlDetails sourceControlDetails) {
    this.sourceControlDetails = sourceControlDetails;
    return this;
  }

  /**
   * Get sourceControlDetails
   * @return sourceControlDetails
   */
  @javax.annotation.Nullable
  public CreateJobRequestSourceControlDetails getSourceControlDetails() {
    return sourceControlDetails;
  }

  public void setSourceControlDetails(CreateJobRequestSourceControlDetails sourceControlDetails) {
    this.sourceControlDetails = sourceControlDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobUpdate jobUpdate = (JobUpdate) o;
    return Objects.equals(this.description, jobUpdate.description) &&
        Objects.equals(this.logUri, jobUpdate.logUri) &&
        Objects.equals(this.role, jobUpdate.role) &&
        Objects.equals(this.executionProperty, jobUpdate.executionProperty) &&
        Objects.equals(this.command, jobUpdate.command) &&
        Objects.equals(this.defaultArguments, jobUpdate.defaultArguments) &&
        Objects.equals(this.nonOverridableArguments, jobUpdate.nonOverridableArguments) &&
        Objects.equals(this.connections, jobUpdate.connections) &&
        Objects.equals(this.maxRetries, jobUpdate.maxRetries) &&
        Objects.equals(this.allocatedCapacity, jobUpdate.allocatedCapacity) &&
        Objects.equals(this.timeout, jobUpdate.timeout) &&
        Objects.equals(this.maxCapacity, jobUpdate.maxCapacity) &&
        Objects.equals(this.workerType, jobUpdate.workerType) &&
        Objects.equals(this.numberOfWorkers, jobUpdate.numberOfWorkers) &&
        Objects.equals(this.securityConfiguration, jobUpdate.securityConfiguration) &&
        Objects.equals(this.notificationProperty, jobUpdate.notificationProperty) &&
        Objects.equals(this.glueVersion, jobUpdate.glueVersion) &&
        Objects.equals(this.codeGenConfigurationNodes, jobUpdate.codeGenConfigurationNodes) &&
        Objects.equals(this.executionClass, jobUpdate.executionClass) &&
        Objects.equals(this.sourceControlDetails, jobUpdate.sourceControlDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, logUri, role, executionProperty, command, defaultArguments, nonOverridableArguments, connections, maxRetries, allocatedCapacity, timeout, maxCapacity, workerType, numberOfWorkers, securityConfiguration, notificationProperty, glueVersion, codeGenConfigurationNodes, executionClass, sourceControlDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobUpdate {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logUri: ").append(toIndentedString(logUri)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    executionProperty: ").append(toIndentedString(executionProperty)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    defaultArguments: ").append(toIndentedString(defaultArguments)).append("\n");
    sb.append("    nonOverridableArguments: ").append(toIndentedString(nonOverridableArguments)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    allocatedCapacity: ").append(toIndentedString(allocatedCapacity)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    maxCapacity: ").append(toIndentedString(maxCapacity)).append("\n");
    sb.append("    workerType: ").append(toIndentedString(workerType)).append("\n");
    sb.append("    numberOfWorkers: ").append(toIndentedString(numberOfWorkers)).append("\n");
    sb.append("    securityConfiguration: ").append(toIndentedString(securityConfiguration)).append("\n");
    sb.append("    notificationProperty: ").append(toIndentedString(notificationProperty)).append("\n");
    sb.append("    glueVersion: ").append(toIndentedString(glueVersion)).append("\n");
    sb.append("    codeGenConfigurationNodes: ").append(toIndentedString(codeGenConfigurationNodes)).append("\n");
    sb.append("    executionClass: ").append(toIndentedString(executionClass)).append("\n");
    sb.append("    sourceControlDetails: ").append(toIndentedString(sourceControlDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("LogUri");
    openapiFields.add("Role");
    openapiFields.add("ExecutionProperty");
    openapiFields.add("Command");
    openapiFields.add("DefaultArguments");
    openapiFields.add("NonOverridableArguments");
    openapiFields.add("Connections");
    openapiFields.add("MaxRetries");
    openapiFields.add("AllocatedCapacity");
    openapiFields.add("Timeout");
    openapiFields.add("MaxCapacity");
    openapiFields.add("WorkerType");
    openapiFields.add("NumberOfWorkers");
    openapiFields.add("SecurityConfiguration");
    openapiFields.add("NotificationProperty");
    openapiFields.add("GlueVersion");
    openapiFields.add("CodeGenConfigurationNodes");
    openapiFields.add("ExecutionClass");
    openapiFields.add("SourceControlDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobUpdate is not found in the empty JSON string", JobUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `LogUri`
      if (jsonObj.get("LogUri") != null && !jsonObj.get("LogUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogUri"));
      }
      // validate the optional field `Role`
      if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Role"));
      }
      // validate the optional field `ExecutionProperty`
      if (jsonObj.get("ExecutionProperty") != null && !jsonObj.get("ExecutionProperty").isJsonNull()) {
        CreateJobRequestExecutionProperty.validateJsonElement(jsonObj.get("ExecutionProperty"));
      }
      // validate the optional field `Command`
      if (jsonObj.get("Command") != null && !jsonObj.get("Command").isJsonNull()) {
        JobUpdateCommand.validateJsonElement(jsonObj.get("Command"));
      }
      // validate the optional field `DefaultArguments`
      if (jsonObj.get("DefaultArguments") != null && !jsonObj.get("DefaultArguments").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("DefaultArguments"));
      }
      // validate the optional field `NonOverridableArguments`
      if (jsonObj.get("NonOverridableArguments") != null && !jsonObj.get("NonOverridableArguments").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("NonOverridableArguments"));
      }
      // validate the optional field `Connections`
      if (jsonObj.get("Connections") != null && !jsonObj.get("Connections").isJsonNull()) {
        CreateJobRequestConnections.validateJsonElement(jsonObj.get("Connections"));
      }
      // validate the optional field `MaxRetries`
      if (jsonObj.get("MaxRetries") != null && !jsonObj.get("MaxRetries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRetries"));
      }
      // validate the optional field `AllocatedCapacity`
      if (jsonObj.get("AllocatedCapacity") != null && !jsonObj.get("AllocatedCapacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AllocatedCapacity"));
      }
      // validate the optional field `Timeout`
      if (jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Timeout"));
      }
      // validate the optional field `MaxCapacity`
      if (jsonObj.get("MaxCapacity") != null && !jsonObj.get("MaxCapacity").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MaxCapacity"));
      }
      // validate the optional field `WorkerType`
      if (jsonObj.get("WorkerType") != null && !jsonObj.get("WorkerType").isJsonNull()) {
        WorkerType.validateJsonElement(jsonObj.get("WorkerType"));
      }
      // validate the optional field `NumberOfWorkers`
      if (jsonObj.get("NumberOfWorkers") != null && !jsonObj.get("NumberOfWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfWorkers"));
      }
      // validate the optional field `SecurityConfiguration`
      if (jsonObj.get("SecurityConfiguration") != null && !jsonObj.get("SecurityConfiguration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityConfiguration"));
      }
      // validate the optional field `NotificationProperty`
      if (jsonObj.get("NotificationProperty") != null && !jsonObj.get("NotificationProperty").isJsonNull()) {
        JobUpdateNotificationProperty.validateJsonElement(jsonObj.get("NotificationProperty"));
      }
      // validate the optional field `GlueVersion`
      if (jsonObj.get("GlueVersion") != null && !jsonObj.get("GlueVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlueVersion"));
      }
      // validate the optional field `CodeGenConfigurationNodes`
      if (jsonObj.get("CodeGenConfigurationNodes") != null && !jsonObj.get("CodeGenConfigurationNodes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("CodeGenConfigurationNodes"));
      }
      // validate the optional field `ExecutionClass`
      if (jsonObj.get("ExecutionClass") != null && !jsonObj.get("ExecutionClass").isJsonNull()) {
        ExecutionClass.validateJsonElement(jsonObj.get("ExecutionClass"));
      }
      // validate the optional field `SourceControlDetails`
      if (jsonObj.get("SourceControlDetails") != null && !jsonObj.get("SourceControlDetails").isJsonNull()) {
        CreateJobRequestSourceControlDetails.validateJsonElement(jsonObj.get("SourceControlDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<JobUpdate>() {
           @Override
           public void write(JsonWriter out, JobUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobUpdate
   * @throws IOException if the JSON string is invalid with respect to JobUpdate
   */
  public static JobUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobUpdate.class);
  }

  /**
   * Convert an instance of JobUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

