/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlueprintLastActiveDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlueprintLastActiveDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "LastModifiedOn";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private OffsetDateTime lastModifiedOn;

  public static final String SERIALIZED_NAME_PARAMETER_SPEC = "ParameterSpec";
  @SerializedName(SERIALIZED_NAME_PARAMETER_SPEC)
  private String parameterSpec;

  public static final String SERIALIZED_NAME_BLUEPRINT_LOCATION = "BlueprintLocation";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_LOCATION)
  private String blueprintLocation;

  public static final String SERIALIZED_NAME_BLUEPRINT_SERVICE_LOCATION = "BlueprintServiceLocation";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_SERVICE_LOCATION)
  private String blueprintServiceLocation;

  public BlueprintLastActiveDefinition() {
  }

  public BlueprintLastActiveDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BlueprintLastActiveDefinition lastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

  /**
   * Get lastModifiedOn
   * @return lastModifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedOn() {
    return lastModifiedOn;
  }

  public void setLastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public BlueprintLastActiveDefinition parameterSpec(String parameterSpec) {
    this.parameterSpec = parameterSpec;
    return this;
  }

  /**
   * Get parameterSpec
   * @return parameterSpec
   */
  @javax.annotation.Nullable
  public String getParameterSpec() {
    return parameterSpec;
  }

  public void setParameterSpec(String parameterSpec) {
    this.parameterSpec = parameterSpec;
  }


  public BlueprintLastActiveDefinition blueprintLocation(String blueprintLocation) {
    this.blueprintLocation = blueprintLocation;
    return this;
  }

  /**
   * Get blueprintLocation
   * @return blueprintLocation
   */
  @javax.annotation.Nullable
  public String getBlueprintLocation() {
    return blueprintLocation;
  }

  public void setBlueprintLocation(String blueprintLocation) {
    this.blueprintLocation = blueprintLocation;
  }


  public BlueprintLastActiveDefinition blueprintServiceLocation(String blueprintServiceLocation) {
    this.blueprintServiceLocation = blueprintServiceLocation;
    return this;
  }

  /**
   * Get blueprintServiceLocation
   * @return blueprintServiceLocation
   */
  @javax.annotation.Nullable
  public String getBlueprintServiceLocation() {
    return blueprintServiceLocation;
  }

  public void setBlueprintServiceLocation(String blueprintServiceLocation) {
    this.blueprintServiceLocation = blueprintServiceLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintLastActiveDefinition blueprintLastActiveDefinition = (BlueprintLastActiveDefinition) o;
    return Objects.equals(this.description, blueprintLastActiveDefinition.description) &&
        Objects.equals(this.lastModifiedOn, blueprintLastActiveDefinition.lastModifiedOn) &&
        Objects.equals(this.parameterSpec, blueprintLastActiveDefinition.parameterSpec) &&
        Objects.equals(this.blueprintLocation, blueprintLastActiveDefinition.blueprintLocation) &&
        Objects.equals(this.blueprintServiceLocation, blueprintLastActiveDefinition.blueprintServiceLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, lastModifiedOn, parameterSpec, blueprintLocation, blueprintServiceLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintLastActiveDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    parameterSpec: ").append(toIndentedString(parameterSpec)).append("\n");
    sb.append("    blueprintLocation: ").append(toIndentedString(blueprintLocation)).append("\n");
    sb.append("    blueprintServiceLocation: ").append(toIndentedString(blueprintServiceLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("LastModifiedOn");
    openapiFields.add("ParameterSpec");
    openapiFields.add("BlueprintLocation");
    openapiFields.add("BlueprintServiceLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlueprintLastActiveDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueprintLastActiveDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueprintLastActiveDefinition is not found in the empty JSON string", BlueprintLastActiveDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlueprintLastActiveDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueprintLastActiveDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `LastModifiedOn`
      if (jsonObj.get("LastModifiedOn") != null && !jsonObj.get("LastModifiedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedOn"));
      }
      // validate the optional field `ParameterSpec`
      if (jsonObj.get("ParameterSpec") != null && !jsonObj.get("ParameterSpec").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterSpec"));
      }
      // validate the optional field `BlueprintLocation`
      if (jsonObj.get("BlueprintLocation") != null && !jsonObj.get("BlueprintLocation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BlueprintLocation"));
      }
      // validate the optional field `BlueprintServiceLocation`
      if (jsonObj.get("BlueprintServiceLocation") != null && !jsonObj.get("BlueprintServiceLocation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BlueprintServiceLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueprintLastActiveDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueprintLastActiveDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueprintLastActiveDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueprintLastActiveDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueprintLastActiveDefinition>() {
           @Override
           public void write(JsonWriter out, BlueprintLastActiveDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueprintLastActiveDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlueprintLastActiveDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlueprintLastActiveDefinition
   * @throws IOException if the JSON string is invalid with respect to BlueprintLastActiveDefinition
   */
  public static BlueprintLastActiveDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueprintLastActiveDefinition.class);
  }

  /**
   * Convert an instance of BlueprintLastActiveDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

