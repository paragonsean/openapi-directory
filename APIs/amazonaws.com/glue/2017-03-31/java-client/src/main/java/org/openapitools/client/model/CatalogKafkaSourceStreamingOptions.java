/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CatalogKafkaSourceStreamingOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogKafkaSourceStreamingOptions {
  public static final String SERIALIZED_NAME_BOOTSTRAP_SERVERS = "BootstrapServers";
  @SerializedName(SERIALIZED_NAME_BOOTSTRAP_SERVERS)
  private String bootstrapServers;

  public static final String SERIALIZED_NAME_SECURITY_PROTOCOL = "SecurityProtocol";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROTOCOL)
  private String securityProtocol;

  public static final String SERIALIZED_NAME_CONNECTION_NAME = "ConnectionName";
  @SerializedName(SERIALIZED_NAME_CONNECTION_NAME)
  private String connectionName;

  public static final String SERIALIZED_NAME_TOPIC_NAME = "TopicName";
  @SerializedName(SERIALIZED_NAME_TOPIC_NAME)
  private String topicName;

  public static final String SERIALIZED_NAME_ASSIGN = "Assign";
  @SerializedName(SERIALIZED_NAME_ASSIGN)
  private String assign;

  public static final String SERIALIZED_NAME_SUBSCRIBE_PATTERN = "SubscribePattern";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE_PATTERN)
  private String subscribePattern;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "Classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_DELIMITER = "Delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter;

  public static final String SERIALIZED_NAME_STARTING_OFFSETS = "StartingOffsets";
  @SerializedName(SERIALIZED_NAME_STARTING_OFFSETS)
  private String startingOffsets;

  public static final String SERIALIZED_NAME_ENDING_OFFSETS = "EndingOffsets";
  @SerializedName(SERIALIZED_NAME_ENDING_OFFSETS)
  private String endingOffsets;

  public static final String SERIALIZED_NAME_POLL_TIMEOUT_MS = "PollTimeoutMs";
  @SerializedName(SERIALIZED_NAME_POLL_TIMEOUT_MS)
  private Integer pollTimeoutMs;

  public static final String SERIALIZED_NAME_NUM_RETRIES = "NumRetries";
  @SerializedName(SERIALIZED_NAME_NUM_RETRIES)
  private Integer numRetries;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL_MS = "RetryIntervalMs";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL_MS)
  private Integer retryIntervalMs;

  public static final String SERIALIZED_NAME_MAX_OFFSETS_PER_TRIGGER = "MaxOffsetsPerTrigger";
  @SerializedName(SERIALIZED_NAME_MAX_OFFSETS_PER_TRIGGER)
  private Integer maxOffsetsPerTrigger;

  public static final String SERIALIZED_NAME_MIN_PARTITIONS = "MinPartitions";
  @SerializedName(SERIALIZED_NAME_MIN_PARTITIONS)
  private Integer minPartitions;

  public static final String SERIALIZED_NAME_INCLUDE_HEADERS = "IncludeHeaders";
  @SerializedName(SERIALIZED_NAME_INCLUDE_HEADERS)
  private Boolean includeHeaders;

  public static final String SERIALIZED_NAME_ADD_RECORD_TIMESTAMP = "AddRecordTimestamp";
  @SerializedName(SERIALIZED_NAME_ADD_RECORD_TIMESTAMP)
  private String addRecordTimestamp;

  public static final String SERIALIZED_NAME_EMIT_CONSUMER_LAG_METRICS = "EmitConsumerLagMetrics";
  @SerializedName(SERIALIZED_NAME_EMIT_CONSUMER_LAG_METRICS)
  private String emitConsumerLagMetrics;

  public static final String SERIALIZED_NAME_STARTING_TIMESTAMP = "StartingTimestamp";
  @SerializedName(SERIALIZED_NAME_STARTING_TIMESTAMP)
  private OffsetDateTime startingTimestamp;

  public CatalogKafkaSourceStreamingOptions() {
  }

  public CatalogKafkaSourceStreamingOptions bootstrapServers(String bootstrapServers) {
    this.bootstrapServers = bootstrapServers;
    return this;
  }

  /**
   * Get bootstrapServers
   * @return bootstrapServers
   */
  @javax.annotation.Nullable
  public String getBootstrapServers() {
    return bootstrapServers;
  }

  public void setBootstrapServers(String bootstrapServers) {
    this.bootstrapServers = bootstrapServers;
  }


  public CatalogKafkaSourceStreamingOptions securityProtocol(String securityProtocol) {
    this.securityProtocol = securityProtocol;
    return this;
  }

  /**
   * Get securityProtocol
   * @return securityProtocol
   */
  @javax.annotation.Nullable
  public String getSecurityProtocol() {
    return securityProtocol;
  }

  public void setSecurityProtocol(String securityProtocol) {
    this.securityProtocol = securityProtocol;
  }


  public CatalogKafkaSourceStreamingOptions connectionName(String connectionName) {
    this.connectionName = connectionName;
    return this;
  }

  /**
   * Get connectionName
   * @return connectionName
   */
  @javax.annotation.Nullable
  public String getConnectionName() {
    return connectionName;
  }

  public void setConnectionName(String connectionName) {
    this.connectionName = connectionName;
  }


  public CatalogKafkaSourceStreamingOptions topicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

  /**
   * Get topicName
   * @return topicName
   */
  @javax.annotation.Nullable
  public String getTopicName() {
    return topicName;
  }

  public void setTopicName(String topicName) {
    this.topicName = topicName;
  }


  public CatalogKafkaSourceStreamingOptions assign(String assign) {
    this.assign = assign;
    return this;
  }

  /**
   * Get assign
   * @return assign
   */
  @javax.annotation.Nullable
  public String getAssign() {
    return assign;
  }

  public void setAssign(String assign) {
    this.assign = assign;
  }


  public CatalogKafkaSourceStreamingOptions subscribePattern(String subscribePattern) {
    this.subscribePattern = subscribePattern;
    return this;
  }

  /**
   * Get subscribePattern
   * @return subscribePattern
   */
  @javax.annotation.Nullable
  public String getSubscribePattern() {
    return subscribePattern;
  }

  public void setSubscribePattern(String subscribePattern) {
    this.subscribePattern = subscribePattern;
  }


  public CatalogKafkaSourceStreamingOptions classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public CatalogKafkaSourceStreamingOptions delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * Get delimiter
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public CatalogKafkaSourceStreamingOptions startingOffsets(String startingOffsets) {
    this.startingOffsets = startingOffsets;
    return this;
  }

  /**
   * Get startingOffsets
   * @return startingOffsets
   */
  @javax.annotation.Nullable
  public String getStartingOffsets() {
    return startingOffsets;
  }

  public void setStartingOffsets(String startingOffsets) {
    this.startingOffsets = startingOffsets;
  }


  public CatalogKafkaSourceStreamingOptions endingOffsets(String endingOffsets) {
    this.endingOffsets = endingOffsets;
    return this;
  }

  /**
   * Get endingOffsets
   * @return endingOffsets
   */
  @javax.annotation.Nullable
  public String getEndingOffsets() {
    return endingOffsets;
  }

  public void setEndingOffsets(String endingOffsets) {
    this.endingOffsets = endingOffsets;
  }


  public CatalogKafkaSourceStreamingOptions pollTimeoutMs(Integer pollTimeoutMs) {
    this.pollTimeoutMs = pollTimeoutMs;
    return this;
  }

  /**
   * Get pollTimeoutMs
   * @return pollTimeoutMs
   */
  @javax.annotation.Nullable
  public Integer getPollTimeoutMs() {
    return pollTimeoutMs;
  }

  public void setPollTimeoutMs(Integer pollTimeoutMs) {
    this.pollTimeoutMs = pollTimeoutMs;
  }


  public CatalogKafkaSourceStreamingOptions numRetries(Integer numRetries) {
    this.numRetries = numRetries;
    return this;
  }

  /**
   * Get numRetries
   * @return numRetries
   */
  @javax.annotation.Nullable
  public Integer getNumRetries() {
    return numRetries;
  }

  public void setNumRetries(Integer numRetries) {
    this.numRetries = numRetries;
  }


  public CatalogKafkaSourceStreamingOptions retryIntervalMs(Integer retryIntervalMs) {
    this.retryIntervalMs = retryIntervalMs;
    return this;
  }

  /**
   * Get retryIntervalMs
   * @return retryIntervalMs
   */
  @javax.annotation.Nullable
  public Integer getRetryIntervalMs() {
    return retryIntervalMs;
  }

  public void setRetryIntervalMs(Integer retryIntervalMs) {
    this.retryIntervalMs = retryIntervalMs;
  }


  public CatalogKafkaSourceStreamingOptions maxOffsetsPerTrigger(Integer maxOffsetsPerTrigger) {
    this.maxOffsetsPerTrigger = maxOffsetsPerTrigger;
    return this;
  }

  /**
   * Get maxOffsetsPerTrigger
   * @return maxOffsetsPerTrigger
   */
  @javax.annotation.Nullable
  public Integer getMaxOffsetsPerTrigger() {
    return maxOffsetsPerTrigger;
  }

  public void setMaxOffsetsPerTrigger(Integer maxOffsetsPerTrigger) {
    this.maxOffsetsPerTrigger = maxOffsetsPerTrigger;
  }


  public CatalogKafkaSourceStreamingOptions minPartitions(Integer minPartitions) {
    this.minPartitions = minPartitions;
    return this;
  }

  /**
   * Get minPartitions
   * @return minPartitions
   */
  @javax.annotation.Nullable
  public Integer getMinPartitions() {
    return minPartitions;
  }

  public void setMinPartitions(Integer minPartitions) {
    this.minPartitions = minPartitions;
  }


  public CatalogKafkaSourceStreamingOptions includeHeaders(Boolean includeHeaders) {
    this.includeHeaders = includeHeaders;
    return this;
  }

  /**
   * Get includeHeaders
   * @return includeHeaders
   */
  @javax.annotation.Nullable
  public Boolean getIncludeHeaders() {
    return includeHeaders;
  }

  public void setIncludeHeaders(Boolean includeHeaders) {
    this.includeHeaders = includeHeaders;
  }


  public CatalogKafkaSourceStreamingOptions addRecordTimestamp(String addRecordTimestamp) {
    this.addRecordTimestamp = addRecordTimestamp;
    return this;
  }

  /**
   * Get addRecordTimestamp
   * @return addRecordTimestamp
   */
  @javax.annotation.Nullable
  public String getAddRecordTimestamp() {
    return addRecordTimestamp;
  }

  public void setAddRecordTimestamp(String addRecordTimestamp) {
    this.addRecordTimestamp = addRecordTimestamp;
  }


  public CatalogKafkaSourceStreamingOptions emitConsumerLagMetrics(String emitConsumerLagMetrics) {
    this.emitConsumerLagMetrics = emitConsumerLagMetrics;
    return this;
  }

  /**
   * Get emitConsumerLagMetrics
   * @return emitConsumerLagMetrics
   */
  @javax.annotation.Nullable
  public String getEmitConsumerLagMetrics() {
    return emitConsumerLagMetrics;
  }

  public void setEmitConsumerLagMetrics(String emitConsumerLagMetrics) {
    this.emitConsumerLagMetrics = emitConsumerLagMetrics;
  }


  public CatalogKafkaSourceStreamingOptions startingTimestamp(OffsetDateTime startingTimestamp) {
    this.startingTimestamp = startingTimestamp;
    return this;
  }

  /**
   * Get startingTimestamp
   * @return startingTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartingTimestamp() {
    return startingTimestamp;
  }

  public void setStartingTimestamp(OffsetDateTime startingTimestamp) {
    this.startingTimestamp = startingTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogKafkaSourceStreamingOptions catalogKafkaSourceStreamingOptions = (CatalogKafkaSourceStreamingOptions) o;
    return Objects.equals(this.bootstrapServers, catalogKafkaSourceStreamingOptions.bootstrapServers) &&
        Objects.equals(this.securityProtocol, catalogKafkaSourceStreamingOptions.securityProtocol) &&
        Objects.equals(this.connectionName, catalogKafkaSourceStreamingOptions.connectionName) &&
        Objects.equals(this.topicName, catalogKafkaSourceStreamingOptions.topicName) &&
        Objects.equals(this.assign, catalogKafkaSourceStreamingOptions.assign) &&
        Objects.equals(this.subscribePattern, catalogKafkaSourceStreamingOptions.subscribePattern) &&
        Objects.equals(this.classification, catalogKafkaSourceStreamingOptions.classification) &&
        Objects.equals(this.delimiter, catalogKafkaSourceStreamingOptions.delimiter) &&
        Objects.equals(this.startingOffsets, catalogKafkaSourceStreamingOptions.startingOffsets) &&
        Objects.equals(this.endingOffsets, catalogKafkaSourceStreamingOptions.endingOffsets) &&
        Objects.equals(this.pollTimeoutMs, catalogKafkaSourceStreamingOptions.pollTimeoutMs) &&
        Objects.equals(this.numRetries, catalogKafkaSourceStreamingOptions.numRetries) &&
        Objects.equals(this.retryIntervalMs, catalogKafkaSourceStreamingOptions.retryIntervalMs) &&
        Objects.equals(this.maxOffsetsPerTrigger, catalogKafkaSourceStreamingOptions.maxOffsetsPerTrigger) &&
        Objects.equals(this.minPartitions, catalogKafkaSourceStreamingOptions.minPartitions) &&
        Objects.equals(this.includeHeaders, catalogKafkaSourceStreamingOptions.includeHeaders) &&
        Objects.equals(this.addRecordTimestamp, catalogKafkaSourceStreamingOptions.addRecordTimestamp) &&
        Objects.equals(this.emitConsumerLagMetrics, catalogKafkaSourceStreamingOptions.emitConsumerLagMetrics) &&
        Objects.equals(this.startingTimestamp, catalogKafkaSourceStreamingOptions.startingTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootstrapServers, securityProtocol, connectionName, topicName, assign, subscribePattern, classification, delimiter, startingOffsets, endingOffsets, pollTimeoutMs, numRetries, retryIntervalMs, maxOffsetsPerTrigger, minPartitions, includeHeaders, addRecordTimestamp, emitConsumerLagMetrics, startingTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogKafkaSourceStreamingOptions {\n");
    sb.append("    bootstrapServers: ").append(toIndentedString(bootstrapServers)).append("\n");
    sb.append("    securityProtocol: ").append(toIndentedString(securityProtocol)).append("\n");
    sb.append("    connectionName: ").append(toIndentedString(connectionName)).append("\n");
    sb.append("    topicName: ").append(toIndentedString(topicName)).append("\n");
    sb.append("    assign: ").append(toIndentedString(assign)).append("\n");
    sb.append("    subscribePattern: ").append(toIndentedString(subscribePattern)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    startingOffsets: ").append(toIndentedString(startingOffsets)).append("\n");
    sb.append("    endingOffsets: ").append(toIndentedString(endingOffsets)).append("\n");
    sb.append("    pollTimeoutMs: ").append(toIndentedString(pollTimeoutMs)).append("\n");
    sb.append("    numRetries: ").append(toIndentedString(numRetries)).append("\n");
    sb.append("    retryIntervalMs: ").append(toIndentedString(retryIntervalMs)).append("\n");
    sb.append("    maxOffsetsPerTrigger: ").append(toIndentedString(maxOffsetsPerTrigger)).append("\n");
    sb.append("    minPartitions: ").append(toIndentedString(minPartitions)).append("\n");
    sb.append("    includeHeaders: ").append(toIndentedString(includeHeaders)).append("\n");
    sb.append("    addRecordTimestamp: ").append(toIndentedString(addRecordTimestamp)).append("\n");
    sb.append("    emitConsumerLagMetrics: ").append(toIndentedString(emitConsumerLagMetrics)).append("\n");
    sb.append("    startingTimestamp: ").append(toIndentedString(startingTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BootstrapServers");
    openapiFields.add("SecurityProtocol");
    openapiFields.add("ConnectionName");
    openapiFields.add("TopicName");
    openapiFields.add("Assign");
    openapiFields.add("SubscribePattern");
    openapiFields.add("Classification");
    openapiFields.add("Delimiter");
    openapiFields.add("StartingOffsets");
    openapiFields.add("EndingOffsets");
    openapiFields.add("PollTimeoutMs");
    openapiFields.add("NumRetries");
    openapiFields.add("RetryIntervalMs");
    openapiFields.add("MaxOffsetsPerTrigger");
    openapiFields.add("MinPartitions");
    openapiFields.add("IncludeHeaders");
    openapiFields.add("AddRecordTimestamp");
    openapiFields.add("EmitConsumerLagMetrics");
    openapiFields.add("StartingTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogKafkaSourceStreamingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogKafkaSourceStreamingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogKafkaSourceStreamingOptions is not found in the empty JSON string", CatalogKafkaSourceStreamingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogKafkaSourceStreamingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogKafkaSourceStreamingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BootstrapServers`
      if (jsonObj.get("BootstrapServers") != null && !jsonObj.get("BootstrapServers").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BootstrapServers"));
      }
      // validate the optional field `SecurityProtocol`
      if (jsonObj.get("SecurityProtocol") != null && !jsonObj.get("SecurityProtocol").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityProtocol"));
      }
      // validate the optional field `ConnectionName`
      if (jsonObj.get("ConnectionName") != null && !jsonObj.get("ConnectionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionName"));
      }
      // validate the optional field `TopicName`
      if (jsonObj.get("TopicName") != null && !jsonObj.get("TopicName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TopicName"));
      }
      // validate the optional field `Assign`
      if (jsonObj.get("Assign") != null && !jsonObj.get("Assign").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Assign"));
      }
      // validate the optional field `SubscribePattern`
      if (jsonObj.get("SubscribePattern") != null && !jsonObj.get("SubscribePattern").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubscribePattern"));
      }
      // validate the optional field `Classification`
      if (jsonObj.get("Classification") != null && !jsonObj.get("Classification").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Classification"));
      }
      // validate the optional field `Delimiter`
      if (jsonObj.get("Delimiter") != null && !jsonObj.get("Delimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Delimiter"));
      }
      // validate the optional field `StartingOffsets`
      if (jsonObj.get("StartingOffsets") != null && !jsonObj.get("StartingOffsets").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartingOffsets"));
      }
      // validate the optional field `EndingOffsets`
      if (jsonObj.get("EndingOffsets") != null && !jsonObj.get("EndingOffsets").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndingOffsets"));
      }
      // validate the optional field `PollTimeoutMs`
      if (jsonObj.get("PollTimeoutMs") != null && !jsonObj.get("PollTimeoutMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PollTimeoutMs"));
      }
      // validate the optional field `NumRetries`
      if (jsonObj.get("NumRetries") != null && !jsonObj.get("NumRetries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumRetries"));
      }
      // validate the optional field `RetryIntervalMs`
      if (jsonObj.get("RetryIntervalMs") != null && !jsonObj.get("RetryIntervalMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetryIntervalMs"));
      }
      // validate the optional field `MaxOffsetsPerTrigger`
      if (jsonObj.get("MaxOffsetsPerTrigger") != null && !jsonObj.get("MaxOffsetsPerTrigger").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxOffsetsPerTrigger"));
      }
      // validate the optional field `MinPartitions`
      if (jsonObj.get("MinPartitions") != null && !jsonObj.get("MinPartitions").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinPartitions"));
      }
      // validate the optional field `IncludeHeaders`
      if (jsonObj.get("IncludeHeaders") != null && !jsonObj.get("IncludeHeaders").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeHeaders"));
      }
      // validate the optional field `AddRecordTimestamp`
      if (jsonObj.get("AddRecordTimestamp") != null && !jsonObj.get("AddRecordTimestamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddRecordTimestamp"));
      }
      // validate the optional field `EmitConsumerLagMetrics`
      if (jsonObj.get("EmitConsumerLagMetrics") != null && !jsonObj.get("EmitConsumerLagMetrics").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EmitConsumerLagMetrics"));
      }
      // validate the optional field `StartingTimestamp`
      if (jsonObj.get("StartingTimestamp") != null && !jsonObj.get("StartingTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartingTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogKafkaSourceStreamingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogKafkaSourceStreamingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogKafkaSourceStreamingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogKafkaSourceStreamingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogKafkaSourceStreamingOptions>() {
           @Override
           public void write(JsonWriter out, CatalogKafkaSourceStreamingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogKafkaSourceStreamingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogKafkaSourceStreamingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogKafkaSourceStreamingOptions
   * @throws IOException if the JSON string is invalid with respect to CatalogKafkaSourceStreamingOptions
   */
  public static CatalogKafkaSourceStreamingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogKafkaSourceStreamingOptions.class);
  }

  /**
   * Convert an instance of CatalogKafkaSourceStreamingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

