/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CsvHeaderOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateClassifierRequestCsvClassifier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateClassifierRequestCsvClassifier {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DELIMITER = "Delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter;

  public static final String SERIALIZED_NAME_QUOTE_SYMBOL = "QuoteSymbol";
  @SerializedName(SERIALIZED_NAME_QUOTE_SYMBOL)
  private String quoteSymbol;

  public static final String SERIALIZED_NAME_CONTAINS_HEADER = "ContainsHeader";
  @SerializedName(SERIALIZED_NAME_CONTAINS_HEADER)
  private CsvHeaderOption containsHeader;

  public static final String SERIALIZED_NAME_HEADER = "Header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private List header;

  public static final String SERIALIZED_NAME_DISABLE_VALUE_TRIMMING = "DisableValueTrimming";
  @SerializedName(SERIALIZED_NAME_DISABLE_VALUE_TRIMMING)
  private Boolean disableValueTrimming;

  public static final String SERIALIZED_NAME_ALLOW_SINGLE_COLUMN = "AllowSingleColumn";
  @SerializedName(SERIALIZED_NAME_ALLOW_SINGLE_COLUMN)
  private Boolean allowSingleColumn;

  public static final String SERIALIZED_NAME_CUSTOM_DATATYPE_CONFIGURED = "CustomDatatypeConfigured";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATATYPE_CONFIGURED)
  private Boolean customDatatypeConfigured;

  public static final String SERIALIZED_NAME_CUSTOM_DATATYPES = "CustomDatatypes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATATYPES)
  private List customDatatypes;

  public CreateClassifierRequestCsvClassifier() {
  }

  public CreateClassifierRequestCsvClassifier name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateClassifierRequestCsvClassifier delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * Get delimiter
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public CreateClassifierRequestCsvClassifier quoteSymbol(String quoteSymbol) {
    this.quoteSymbol = quoteSymbol;
    return this;
  }

  /**
   * Get quoteSymbol
   * @return quoteSymbol
   */
  @javax.annotation.Nullable
  public String getQuoteSymbol() {
    return quoteSymbol;
  }

  public void setQuoteSymbol(String quoteSymbol) {
    this.quoteSymbol = quoteSymbol;
  }


  public CreateClassifierRequestCsvClassifier containsHeader(CsvHeaderOption containsHeader) {
    this.containsHeader = containsHeader;
    return this;
  }

  /**
   * Get containsHeader
   * @return containsHeader
   */
  @javax.annotation.Nullable
  public CsvHeaderOption getContainsHeader() {
    return containsHeader;
  }

  public void setContainsHeader(CsvHeaderOption containsHeader) {
    this.containsHeader = containsHeader;
  }


  public CreateClassifierRequestCsvClassifier header(List header) {
    this.header = header;
    return this;
  }

  /**
   * Get header
   * @return header
   */
  @javax.annotation.Nullable
  public List getHeader() {
    return header;
  }

  public void setHeader(List header) {
    this.header = header;
  }


  public CreateClassifierRequestCsvClassifier disableValueTrimming(Boolean disableValueTrimming) {
    this.disableValueTrimming = disableValueTrimming;
    return this;
  }

  /**
   * Get disableValueTrimming
   * @return disableValueTrimming
   */
  @javax.annotation.Nullable
  public Boolean getDisableValueTrimming() {
    return disableValueTrimming;
  }

  public void setDisableValueTrimming(Boolean disableValueTrimming) {
    this.disableValueTrimming = disableValueTrimming;
  }


  public CreateClassifierRequestCsvClassifier allowSingleColumn(Boolean allowSingleColumn) {
    this.allowSingleColumn = allowSingleColumn;
    return this;
  }

  /**
   * Get allowSingleColumn
   * @return allowSingleColumn
   */
  @javax.annotation.Nullable
  public Boolean getAllowSingleColumn() {
    return allowSingleColumn;
  }

  public void setAllowSingleColumn(Boolean allowSingleColumn) {
    this.allowSingleColumn = allowSingleColumn;
  }


  public CreateClassifierRequestCsvClassifier customDatatypeConfigured(Boolean customDatatypeConfigured) {
    this.customDatatypeConfigured = customDatatypeConfigured;
    return this;
  }

  /**
   * Get customDatatypeConfigured
   * @return customDatatypeConfigured
   */
  @javax.annotation.Nullable
  public Boolean getCustomDatatypeConfigured() {
    return customDatatypeConfigured;
  }

  public void setCustomDatatypeConfigured(Boolean customDatatypeConfigured) {
    this.customDatatypeConfigured = customDatatypeConfigured;
  }


  public CreateClassifierRequestCsvClassifier customDatatypes(List customDatatypes) {
    this.customDatatypes = customDatatypes;
    return this;
  }

  /**
   * Get customDatatypes
   * @return customDatatypes
   */
  @javax.annotation.Nullable
  public List getCustomDatatypes() {
    return customDatatypes;
  }

  public void setCustomDatatypes(List customDatatypes) {
    this.customDatatypes = customDatatypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClassifierRequestCsvClassifier createClassifierRequestCsvClassifier = (CreateClassifierRequestCsvClassifier) o;
    return Objects.equals(this.name, createClassifierRequestCsvClassifier.name) &&
        Objects.equals(this.delimiter, createClassifierRequestCsvClassifier.delimiter) &&
        Objects.equals(this.quoteSymbol, createClassifierRequestCsvClassifier.quoteSymbol) &&
        Objects.equals(this.containsHeader, createClassifierRequestCsvClassifier.containsHeader) &&
        Objects.equals(this.header, createClassifierRequestCsvClassifier.header) &&
        Objects.equals(this.disableValueTrimming, createClassifierRequestCsvClassifier.disableValueTrimming) &&
        Objects.equals(this.allowSingleColumn, createClassifierRequestCsvClassifier.allowSingleColumn) &&
        Objects.equals(this.customDatatypeConfigured, createClassifierRequestCsvClassifier.customDatatypeConfigured) &&
        Objects.equals(this.customDatatypes, createClassifierRequestCsvClassifier.customDatatypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, delimiter, quoteSymbol, containsHeader, header, disableValueTrimming, allowSingleColumn, customDatatypeConfigured, customDatatypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClassifierRequestCsvClassifier {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    quoteSymbol: ").append(toIndentedString(quoteSymbol)).append("\n");
    sb.append("    containsHeader: ").append(toIndentedString(containsHeader)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    disableValueTrimming: ").append(toIndentedString(disableValueTrimming)).append("\n");
    sb.append("    allowSingleColumn: ").append(toIndentedString(allowSingleColumn)).append("\n");
    sb.append("    customDatatypeConfigured: ").append(toIndentedString(customDatatypeConfigured)).append("\n");
    sb.append("    customDatatypes: ").append(toIndentedString(customDatatypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Delimiter");
    openapiFields.add("QuoteSymbol");
    openapiFields.add("ContainsHeader");
    openapiFields.add("Header");
    openapiFields.add("DisableValueTrimming");
    openapiFields.add("AllowSingleColumn");
    openapiFields.add("CustomDatatypeConfigured");
    openapiFields.add("CustomDatatypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateClassifierRequestCsvClassifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClassifierRequestCsvClassifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClassifierRequestCsvClassifier is not found in the empty JSON string", CreateClassifierRequestCsvClassifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateClassifierRequestCsvClassifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClassifierRequestCsvClassifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClassifierRequestCsvClassifier.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Delimiter`
      if (jsonObj.get("Delimiter") != null && !jsonObj.get("Delimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Delimiter"));
      }
      // validate the optional field `QuoteSymbol`
      if (jsonObj.get("QuoteSymbol") != null && !jsonObj.get("QuoteSymbol").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QuoteSymbol"));
      }
      // validate the optional field `ContainsHeader`
      if (jsonObj.get("ContainsHeader") != null && !jsonObj.get("ContainsHeader").isJsonNull()) {
        CsvHeaderOption.validateJsonElement(jsonObj.get("ContainsHeader"));
      }
      // validate the optional field `Header`
      if (jsonObj.get("Header") != null && !jsonObj.get("Header").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Header"));
      }
      // validate the optional field `DisableValueTrimming`
      if (jsonObj.get("DisableValueTrimming") != null && !jsonObj.get("DisableValueTrimming").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisableValueTrimming"));
      }
      // validate the optional field `AllowSingleColumn`
      if (jsonObj.get("AllowSingleColumn") != null && !jsonObj.get("AllowSingleColumn").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowSingleColumn"));
      }
      // validate the optional field `CustomDatatypeConfigured`
      if (jsonObj.get("CustomDatatypeConfigured") != null && !jsonObj.get("CustomDatatypeConfigured").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CustomDatatypeConfigured"));
      }
      // validate the optional field `CustomDatatypes`
      if (jsonObj.get("CustomDatatypes") != null && !jsonObj.get("CustomDatatypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomDatatypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClassifierRequestCsvClassifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClassifierRequestCsvClassifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClassifierRequestCsvClassifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClassifierRequestCsvClassifier.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClassifierRequestCsvClassifier>() {
           @Override
           public void write(JsonWriter out, CreateClassifierRequestCsvClassifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClassifierRequestCsvClassifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateClassifierRequestCsvClassifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateClassifierRequestCsvClassifier
   * @throws IOException if the JSON string is invalid with respect to CreateClassifierRequestCsvClassifier
   */
  public static CreateClassifierRequestCsvClassifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClassifierRequestCsvClassifier.class);
  }

  /**
   * Convert an instance of CreateClassifierRequestCsvClassifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

