/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ConnectionPhysicalConnectionRequirements;
import org.openapitools.client.model.ConnectionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetConnectionResponseConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetConnectionResponseConnection {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "ConnectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionType connectionType;

  public static final String SERIALIZED_NAME_MATCH_CRITERIA = "MatchCriteria";
  @SerializedName(SERIALIZED_NAME_MATCH_CRITERIA)
  private List matchCriteria;

  public static final String SERIALIZED_NAME_CONNECTION_PROPERTIES = "ConnectionProperties";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROPERTIES)
  private Map connectionProperties;

  public static final String SERIALIZED_NAME_PHYSICAL_CONNECTION_REQUIREMENTS = "PhysicalConnectionRequirements";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_CONNECTION_REQUIREMENTS)
  private ConnectionPhysicalConnectionRequirements physicalConnectionRequirements;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "LastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private String lastUpdatedBy;

  public GetConnectionResponseConnection() {
  }

  public GetConnectionResponseConnection name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetConnectionResponseConnection description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetConnectionResponseConnection connectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionType getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
  }


  public GetConnectionResponseConnection matchCriteria(List matchCriteria) {
    this.matchCriteria = matchCriteria;
    return this;
  }

  /**
   * Get matchCriteria
   * @return matchCriteria
   */
  @javax.annotation.Nullable
  public List getMatchCriteria() {
    return matchCriteria;
  }

  public void setMatchCriteria(List matchCriteria) {
    this.matchCriteria = matchCriteria;
  }


  public GetConnectionResponseConnection connectionProperties(Map connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

  /**
   * Get connectionProperties
   * @return connectionProperties
   */
  @javax.annotation.Nullable
  public Map getConnectionProperties() {
    return connectionProperties;
  }

  public void setConnectionProperties(Map connectionProperties) {
    this.connectionProperties = connectionProperties;
  }


  public GetConnectionResponseConnection physicalConnectionRequirements(ConnectionPhysicalConnectionRequirements physicalConnectionRequirements) {
    this.physicalConnectionRequirements = physicalConnectionRequirements;
    return this;
  }

  /**
   * Get physicalConnectionRequirements
   * @return physicalConnectionRequirements
   */
  @javax.annotation.Nullable
  public ConnectionPhysicalConnectionRequirements getPhysicalConnectionRequirements() {
    return physicalConnectionRequirements;
  }

  public void setPhysicalConnectionRequirements(ConnectionPhysicalConnectionRequirements physicalConnectionRequirements) {
    this.physicalConnectionRequirements = physicalConnectionRequirements;
  }


  public GetConnectionResponseConnection creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public GetConnectionResponseConnection lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public GetConnectionResponseConnection lastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public String getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetConnectionResponseConnection getConnectionResponseConnection = (GetConnectionResponseConnection) o;
    return Objects.equals(this.name, getConnectionResponseConnection.name) &&
        Objects.equals(this.description, getConnectionResponseConnection.description) &&
        Objects.equals(this.connectionType, getConnectionResponseConnection.connectionType) &&
        Objects.equals(this.matchCriteria, getConnectionResponseConnection.matchCriteria) &&
        Objects.equals(this.connectionProperties, getConnectionResponseConnection.connectionProperties) &&
        Objects.equals(this.physicalConnectionRequirements, getConnectionResponseConnection.physicalConnectionRequirements) &&
        Objects.equals(this.creationTime, getConnectionResponseConnection.creationTime) &&
        Objects.equals(this.lastUpdatedTime, getConnectionResponseConnection.lastUpdatedTime) &&
        Objects.equals(this.lastUpdatedBy, getConnectionResponseConnection.lastUpdatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, connectionType, matchCriteria, connectionProperties, physicalConnectionRequirements, creationTime, lastUpdatedTime, lastUpdatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetConnectionResponseConnection {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    matchCriteria: ").append(toIndentedString(matchCriteria)).append("\n");
    sb.append("    connectionProperties: ").append(toIndentedString(connectionProperties)).append("\n");
    sb.append("    physicalConnectionRequirements: ").append(toIndentedString(physicalConnectionRequirements)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("ConnectionType");
    openapiFields.add("MatchCriteria");
    openapiFields.add("ConnectionProperties");
    openapiFields.add("PhysicalConnectionRequirements");
    openapiFields.add("CreationTime");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("LastUpdatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetConnectionResponseConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetConnectionResponseConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetConnectionResponseConnection is not found in the empty JSON string", GetConnectionResponseConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetConnectionResponseConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetConnectionResponseConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ConnectionType`
      if (jsonObj.get("ConnectionType") != null && !jsonObj.get("ConnectionType").isJsonNull()) {
        ConnectionType.validateJsonElement(jsonObj.get("ConnectionType"));
      }
      // validate the optional field `MatchCriteria`
      if (jsonObj.get("MatchCriteria") != null && !jsonObj.get("MatchCriteria").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MatchCriteria"));
      }
      // validate the optional field `ConnectionProperties`
      if (jsonObj.get("ConnectionProperties") != null && !jsonObj.get("ConnectionProperties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ConnectionProperties"));
      }
      // validate the optional field `PhysicalConnectionRequirements`
      if (jsonObj.get("PhysicalConnectionRequirements") != null && !jsonObj.get("PhysicalConnectionRequirements").isJsonNull()) {
        ConnectionPhysicalConnectionRequirements.validateJsonElement(jsonObj.get("PhysicalConnectionRequirements"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `LastUpdatedBy`
      if (jsonObj.get("LastUpdatedBy") != null && !jsonObj.get("LastUpdatedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastUpdatedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetConnectionResponseConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetConnectionResponseConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetConnectionResponseConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetConnectionResponseConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<GetConnectionResponseConnection>() {
           @Override
           public void write(JsonWriter out, GetConnectionResponseConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetConnectionResponseConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetConnectionResponseConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetConnectionResponseConnection
   * @throws IOException if the JSON string is invalid with respect to GetConnectionResponseConnection
   */
  public static GetConnectionResponseConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetConnectionResponseConnection.class);
  }

  /**
   * Convert an instance of GetConnectionResponseConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

