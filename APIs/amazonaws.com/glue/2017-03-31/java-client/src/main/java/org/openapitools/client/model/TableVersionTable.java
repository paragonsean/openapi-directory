/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.TableFederatedTable;
import org.openapitools.client.model.TableInputStorageDescriptor;
import org.openapitools.client.model.TableInputTargetTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableVersionTable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableVersionTable {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_CREATE_TIME = "CreateTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "UpdateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_LAST_ACCESS_TIME = "LastAccessTime";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESS_TIME)
  private OffsetDateTime lastAccessTime;

  public static final String SERIALIZED_NAME_LAST_ANALYZED_TIME = "LastAnalyzedTime";
  @SerializedName(SERIALIZED_NAME_LAST_ANALYZED_TIME)
  private OffsetDateTime lastAnalyzedTime;

  public static final String SERIALIZED_NAME_RETENTION = "Retention";
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private Integer retention;

  public static final String SERIALIZED_NAME_STORAGE_DESCRIPTOR = "StorageDescriptor";
  @SerializedName(SERIALIZED_NAME_STORAGE_DESCRIPTOR)
  private TableInputStorageDescriptor storageDescriptor;

  public static final String SERIALIZED_NAME_PARTITION_KEYS = "PartitionKeys";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEYS)
  private List partitionKeys;

  public static final String SERIALIZED_NAME_VIEW_ORIGINAL_TEXT = "ViewOriginalText";
  @SerializedName(SERIALIZED_NAME_VIEW_ORIGINAL_TEXT)
  private String viewOriginalText;

  public static final String SERIALIZED_NAME_VIEW_EXPANDED_TEXT = "ViewExpandedText";
  @SerializedName(SERIALIZED_NAME_VIEW_EXPANDED_TEXT)
  private String viewExpandedText;

  public static final String SERIALIZED_NAME_TABLE_TYPE = "TableType";
  @SerializedName(SERIALIZED_NAME_TABLE_TYPE)
  private String tableType;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_CREATED_BY = "CreatedBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_IS_REGISTERED_WITH_LAKE_FORMATION = "IsRegisteredWithLakeFormation";
  @SerializedName(SERIALIZED_NAME_IS_REGISTERED_WITH_LAKE_FORMATION)
  private Boolean isRegisteredWithLakeFormation;

  public static final String SERIALIZED_NAME_TARGET_TABLE = "TargetTable";
  @SerializedName(SERIALIZED_NAME_TARGET_TABLE)
  private TableInputTargetTable targetTable;

  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_VERSION_ID = "VersionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_FEDERATED_TABLE = "FederatedTable";
  @SerializedName(SERIALIZED_NAME_FEDERATED_TABLE)
  private TableFederatedTable federatedTable;

  public TableVersionTable() {
  }

  public TableVersionTable name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TableVersionTable databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public TableVersionTable description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TableVersionTable owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public TableVersionTable createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public TableVersionTable updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public TableVersionTable lastAccessTime(OffsetDateTime lastAccessTime) {
    this.lastAccessTime = lastAccessTime;
    return this;
  }

  /**
   * Get lastAccessTime
   * @return lastAccessTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAccessTime() {
    return lastAccessTime;
  }

  public void setLastAccessTime(OffsetDateTime lastAccessTime) {
    this.lastAccessTime = lastAccessTime;
  }


  public TableVersionTable lastAnalyzedTime(OffsetDateTime lastAnalyzedTime) {
    this.lastAnalyzedTime = lastAnalyzedTime;
    return this;
  }

  /**
   * Get lastAnalyzedTime
   * @return lastAnalyzedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAnalyzedTime() {
    return lastAnalyzedTime;
  }

  public void setLastAnalyzedTime(OffsetDateTime lastAnalyzedTime) {
    this.lastAnalyzedTime = lastAnalyzedTime;
  }


  public TableVersionTable retention(Integer retention) {
    this.retention = retention;
    return this;
  }

  /**
   * Get retention
   * @return retention
   */
  @javax.annotation.Nullable
  public Integer getRetention() {
    return retention;
  }

  public void setRetention(Integer retention) {
    this.retention = retention;
  }


  public TableVersionTable storageDescriptor(TableInputStorageDescriptor storageDescriptor) {
    this.storageDescriptor = storageDescriptor;
    return this;
  }

  /**
   * Get storageDescriptor
   * @return storageDescriptor
   */
  @javax.annotation.Nullable
  public TableInputStorageDescriptor getStorageDescriptor() {
    return storageDescriptor;
  }

  public void setStorageDescriptor(TableInputStorageDescriptor storageDescriptor) {
    this.storageDescriptor = storageDescriptor;
  }


  public TableVersionTable partitionKeys(List partitionKeys) {
    this.partitionKeys = partitionKeys;
    return this;
  }

  /**
   * Get partitionKeys
   * @return partitionKeys
   */
  @javax.annotation.Nullable
  public List getPartitionKeys() {
    return partitionKeys;
  }

  public void setPartitionKeys(List partitionKeys) {
    this.partitionKeys = partitionKeys;
  }


  public TableVersionTable viewOriginalText(String viewOriginalText) {
    this.viewOriginalText = viewOriginalText;
    return this;
  }

  /**
   * Get viewOriginalText
   * @return viewOriginalText
   */
  @javax.annotation.Nullable
  public String getViewOriginalText() {
    return viewOriginalText;
  }

  public void setViewOriginalText(String viewOriginalText) {
    this.viewOriginalText = viewOriginalText;
  }


  public TableVersionTable viewExpandedText(String viewExpandedText) {
    this.viewExpandedText = viewExpandedText;
    return this;
  }

  /**
   * Get viewExpandedText
   * @return viewExpandedText
   */
  @javax.annotation.Nullable
  public String getViewExpandedText() {
    return viewExpandedText;
  }

  public void setViewExpandedText(String viewExpandedText) {
    this.viewExpandedText = viewExpandedText;
  }


  public TableVersionTable tableType(String tableType) {
    this.tableType = tableType;
    return this;
  }

  /**
   * Get tableType
   * @return tableType
   */
  @javax.annotation.Nullable
  public String getTableType() {
    return tableType;
  }

  public void setTableType(String tableType) {
    this.tableType = tableType;
  }


  public TableVersionTable parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public TableVersionTable createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public TableVersionTable isRegisteredWithLakeFormation(Boolean isRegisteredWithLakeFormation) {
    this.isRegisteredWithLakeFormation = isRegisteredWithLakeFormation;
    return this;
  }

  /**
   * Get isRegisteredWithLakeFormation
   * @return isRegisteredWithLakeFormation
   */
  @javax.annotation.Nullable
  public Boolean getIsRegisteredWithLakeFormation() {
    return isRegisteredWithLakeFormation;
  }

  public void setIsRegisteredWithLakeFormation(Boolean isRegisteredWithLakeFormation) {
    this.isRegisteredWithLakeFormation = isRegisteredWithLakeFormation;
  }


  public TableVersionTable targetTable(TableInputTargetTable targetTable) {
    this.targetTable = targetTable;
    return this;
  }

  /**
   * Get targetTable
   * @return targetTable
   */
  @javax.annotation.Nullable
  public TableInputTargetTable getTargetTable() {
    return targetTable;
  }

  public void setTargetTable(TableInputTargetTable targetTable) {
    this.targetTable = targetTable;
  }


  public TableVersionTable catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public TableVersionTable versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public TableVersionTable federatedTable(TableFederatedTable federatedTable) {
    this.federatedTable = federatedTable;
    return this;
  }

  /**
   * Get federatedTable
   * @return federatedTable
   */
  @javax.annotation.Nullable
  public TableFederatedTable getFederatedTable() {
    return federatedTable;
  }

  public void setFederatedTable(TableFederatedTable federatedTable) {
    this.federatedTable = federatedTable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableVersionTable tableVersionTable = (TableVersionTable) o;
    return Objects.equals(this.name, tableVersionTable.name) &&
        Objects.equals(this.databaseName, tableVersionTable.databaseName) &&
        Objects.equals(this.description, tableVersionTable.description) &&
        Objects.equals(this.owner, tableVersionTable.owner) &&
        Objects.equals(this.createTime, tableVersionTable.createTime) &&
        Objects.equals(this.updateTime, tableVersionTable.updateTime) &&
        Objects.equals(this.lastAccessTime, tableVersionTable.lastAccessTime) &&
        Objects.equals(this.lastAnalyzedTime, tableVersionTable.lastAnalyzedTime) &&
        Objects.equals(this.retention, tableVersionTable.retention) &&
        Objects.equals(this.storageDescriptor, tableVersionTable.storageDescriptor) &&
        Objects.equals(this.partitionKeys, tableVersionTable.partitionKeys) &&
        Objects.equals(this.viewOriginalText, tableVersionTable.viewOriginalText) &&
        Objects.equals(this.viewExpandedText, tableVersionTable.viewExpandedText) &&
        Objects.equals(this.tableType, tableVersionTable.tableType) &&
        Objects.equals(this.parameters, tableVersionTable.parameters) &&
        Objects.equals(this.createdBy, tableVersionTable.createdBy) &&
        Objects.equals(this.isRegisteredWithLakeFormation, tableVersionTable.isRegisteredWithLakeFormation) &&
        Objects.equals(this.targetTable, tableVersionTable.targetTable) &&
        Objects.equals(this.catalogId, tableVersionTable.catalogId) &&
        Objects.equals(this.versionId, tableVersionTable.versionId) &&
        Objects.equals(this.federatedTable, tableVersionTable.federatedTable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, databaseName, description, owner, createTime, updateTime, lastAccessTime, lastAnalyzedTime, retention, storageDescriptor, partitionKeys, viewOriginalText, viewExpandedText, tableType, parameters, createdBy, isRegisteredWithLakeFormation, targetTable, catalogId, versionId, federatedTable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableVersionTable {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    lastAccessTime: ").append(toIndentedString(lastAccessTime)).append("\n");
    sb.append("    lastAnalyzedTime: ").append(toIndentedString(lastAnalyzedTime)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    storageDescriptor: ").append(toIndentedString(storageDescriptor)).append("\n");
    sb.append("    partitionKeys: ").append(toIndentedString(partitionKeys)).append("\n");
    sb.append("    viewOriginalText: ").append(toIndentedString(viewOriginalText)).append("\n");
    sb.append("    viewExpandedText: ").append(toIndentedString(viewExpandedText)).append("\n");
    sb.append("    tableType: ").append(toIndentedString(tableType)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    isRegisteredWithLakeFormation: ").append(toIndentedString(isRegisteredWithLakeFormation)).append("\n");
    sb.append("    targetTable: ").append(toIndentedString(targetTable)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    federatedTable: ").append(toIndentedString(federatedTable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("DatabaseName");
    openapiFields.add("Description");
    openapiFields.add("Owner");
    openapiFields.add("CreateTime");
    openapiFields.add("UpdateTime");
    openapiFields.add("LastAccessTime");
    openapiFields.add("LastAnalyzedTime");
    openapiFields.add("Retention");
    openapiFields.add("StorageDescriptor");
    openapiFields.add("PartitionKeys");
    openapiFields.add("ViewOriginalText");
    openapiFields.add("ViewExpandedText");
    openapiFields.add("TableType");
    openapiFields.add("Parameters");
    openapiFields.add("CreatedBy");
    openapiFields.add("IsRegisteredWithLakeFormation");
    openapiFields.add("TargetTable");
    openapiFields.add("CatalogId");
    openapiFields.add("VersionId");
    openapiFields.add("FederatedTable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableVersionTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableVersionTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableVersionTable is not found in the empty JSON string", TableVersionTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableVersionTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableVersionTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TableVersionTable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `CreateTime`
      if (jsonObj.get("CreateTime") != null && !jsonObj.get("CreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateTime"));
      }
      // validate the optional field `UpdateTime`
      if (jsonObj.get("UpdateTime") != null && !jsonObj.get("UpdateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdateTime"));
      }
      // validate the optional field `LastAccessTime`
      if (jsonObj.get("LastAccessTime") != null && !jsonObj.get("LastAccessTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastAccessTime"));
      }
      // validate the optional field `LastAnalyzedTime`
      if (jsonObj.get("LastAnalyzedTime") != null && !jsonObj.get("LastAnalyzedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastAnalyzedTime"));
      }
      // validate the optional field `Retention`
      if (jsonObj.get("Retention") != null && !jsonObj.get("Retention").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Retention"));
      }
      // validate the optional field `StorageDescriptor`
      if (jsonObj.get("StorageDescriptor") != null && !jsonObj.get("StorageDescriptor").isJsonNull()) {
        TableInputStorageDescriptor.validateJsonElement(jsonObj.get("StorageDescriptor"));
      }
      // validate the optional field `PartitionKeys`
      if (jsonObj.get("PartitionKeys") != null && !jsonObj.get("PartitionKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PartitionKeys"));
      }
      // validate the optional field `ViewOriginalText`
      if (jsonObj.get("ViewOriginalText") != null && !jsonObj.get("ViewOriginalText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ViewOriginalText"));
      }
      // validate the optional field `ViewExpandedText`
      if (jsonObj.get("ViewExpandedText") != null && !jsonObj.get("ViewExpandedText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ViewExpandedText"));
      }
      // validate the optional field `TableType`
      if (jsonObj.get("TableType") != null && !jsonObj.get("TableType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableType"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `CreatedBy`
      if (jsonObj.get("CreatedBy") != null && !jsonObj.get("CreatedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedBy"));
      }
      // validate the optional field `IsRegisteredWithLakeFormation`
      if (jsonObj.get("IsRegisteredWithLakeFormation") != null && !jsonObj.get("IsRegisteredWithLakeFormation").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsRegisteredWithLakeFormation"));
      }
      // validate the optional field `TargetTable`
      if (jsonObj.get("TargetTable") != null && !jsonObj.get("TargetTable").isJsonNull()) {
        TableInputTargetTable.validateJsonElement(jsonObj.get("TargetTable"));
      }
      // validate the optional field `CatalogId`
      if (jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CatalogId"));
      }
      // validate the optional field `VersionId`
      if (jsonObj.get("VersionId") != null && !jsonObj.get("VersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionId"));
      }
      // validate the optional field `FederatedTable`
      if (jsonObj.get("FederatedTable") != null && !jsonObj.get("FederatedTable").isJsonNull()) {
        TableFederatedTable.validateJsonElement(jsonObj.get("FederatedTable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableVersionTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableVersionTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableVersionTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableVersionTable.class));

       return (TypeAdapter<T>) new TypeAdapter<TableVersionTable>() {
           @Override
           public void write(JsonWriter out, TableVersionTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableVersionTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableVersionTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableVersionTable
   * @throws IOException if the JSON string is invalid with respect to TableVersionTable
   */
  public static TableVersionTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableVersionTable.class);
  }

  /**
   * Convert an instance of TableVersionTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

