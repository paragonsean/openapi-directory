/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateTriggerRequestEventBatchingCondition;
import org.openapitools.client.model.TriggerPredicate;
import org.openapitools.client.model.TriggerState;
import org.openapitools.client.model.TriggerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a specific trigger.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trigger {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WORKFLOW_NAME = "WorkflowName";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_NAME)
  private String workflowName;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TriggerType type;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private TriggerState state;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List actions;

  public static final String SERIALIZED_NAME_PREDICATE = "Predicate";
  @SerializedName(SERIALIZED_NAME_PREDICATE)
  private TriggerPredicate predicate;

  public static final String SERIALIZED_NAME_EVENT_BATCHING_CONDITION = "EventBatchingCondition";
  @SerializedName(SERIALIZED_NAME_EVENT_BATCHING_CONDITION)
  private CreateTriggerRequestEventBatchingCondition eventBatchingCondition;

  public Trigger() {
  }

  public Trigger name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Trigger workflowName(String workflowName) {
    this.workflowName = workflowName;
    return this;
  }

  /**
   * Get workflowName
   * @return workflowName
   */
  @javax.annotation.Nullable
  public String getWorkflowName() {
    return workflowName;
  }

  public void setWorkflowName(String workflowName) {
    this.workflowName = workflowName;
  }


  public Trigger id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Trigger type(TriggerType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TriggerType getType() {
    return type;
  }

  public void setType(TriggerType type) {
    this.type = type;
  }


  public Trigger state(TriggerState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public TriggerState getState() {
    return state;
  }

  public void setState(TriggerState state) {
    this.state = state;
  }


  public Trigger description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Trigger schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public Trigger actions(List actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List getActions() {
    return actions;
  }

  public void setActions(List actions) {
    this.actions = actions;
  }


  public Trigger predicate(TriggerPredicate predicate) {
    this.predicate = predicate;
    return this;
  }

  /**
   * Get predicate
   * @return predicate
   */
  @javax.annotation.Nullable
  public TriggerPredicate getPredicate() {
    return predicate;
  }

  public void setPredicate(TriggerPredicate predicate) {
    this.predicate = predicate;
  }


  public Trigger eventBatchingCondition(CreateTriggerRequestEventBatchingCondition eventBatchingCondition) {
    this.eventBatchingCondition = eventBatchingCondition;
    return this;
  }

  /**
   * Get eventBatchingCondition
   * @return eventBatchingCondition
   */
  @javax.annotation.Nullable
  public CreateTriggerRequestEventBatchingCondition getEventBatchingCondition() {
    return eventBatchingCondition;
  }

  public void setEventBatchingCondition(CreateTriggerRequestEventBatchingCondition eventBatchingCondition) {
    this.eventBatchingCondition = eventBatchingCondition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trigger trigger = (Trigger) o;
    return Objects.equals(this.name, trigger.name) &&
        Objects.equals(this.workflowName, trigger.workflowName) &&
        Objects.equals(this.id, trigger.id) &&
        Objects.equals(this.type, trigger.type) &&
        Objects.equals(this.state, trigger.state) &&
        Objects.equals(this.description, trigger.description) &&
        Objects.equals(this.schedule, trigger.schedule) &&
        Objects.equals(this.actions, trigger.actions) &&
        Objects.equals(this.predicate, trigger.predicate) &&
        Objects.equals(this.eventBatchingCondition, trigger.eventBatchingCondition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, workflowName, id, type, state, description, schedule, actions, predicate, eventBatchingCondition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trigger {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    workflowName: ").append(toIndentedString(workflowName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    predicate: ").append(toIndentedString(predicate)).append("\n");
    sb.append("    eventBatchingCondition: ").append(toIndentedString(eventBatchingCondition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("WorkflowName");
    openapiFields.add("Id");
    openapiFields.add("Type");
    openapiFields.add("State");
    openapiFields.add("Description");
    openapiFields.add("Schedule");
    openapiFields.add("Actions");
    openapiFields.add("Predicate");
    openapiFields.add("EventBatchingCondition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trigger is not found in the empty JSON string", Trigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `WorkflowName`
      if (jsonObj.get("WorkflowName") != null && !jsonObj.get("WorkflowName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkflowName"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TriggerType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        TriggerState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Schedule`
      if (jsonObj.get("Schedule") != null && !jsonObj.get("Schedule").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Schedule"));
      }
      // validate the optional field `Actions`
      if (jsonObj.get("Actions") != null && !jsonObj.get("Actions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Actions"));
      }
      // validate the optional field `Predicate`
      if (jsonObj.get("Predicate") != null && !jsonObj.get("Predicate").isJsonNull()) {
        TriggerPredicate.validateJsonElement(jsonObj.get("Predicate"));
      }
      // validate the optional field `EventBatchingCondition`
      if (jsonObj.get("EventBatchingCondition") != null && !jsonObj.get("EventBatchingCondition").isJsonNull()) {
        CreateTriggerRequestEventBatchingCondition.validateJsonElement(jsonObj.get("EventBatchingCondition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trigger.class));

       return (TypeAdapter<T>) new TypeAdapter<Trigger>() {
           @Override
           public void write(JsonWriter out, Trigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trigger
   * @throws IOException if the JSON string is invalid with respect to Trigger
   */
  public static Trigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trigger.class);
  }

  /**
   * Convert an instance of Trigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

