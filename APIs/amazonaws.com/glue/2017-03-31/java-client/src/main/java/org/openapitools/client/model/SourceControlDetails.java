/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceControlAuthStrategy;
import org.openapitools.client.model.SourceControlProvider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceControlDetails {
  public static final String SERIALIZED_NAME_PROVIDER = "Provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private SourceControlProvider provider;

  public static final String SERIALIZED_NAME_REPOSITORY = "Repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_BRANCH = "Branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_FOLDER = "Folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_LAST_COMMIT_ID = "LastCommitId";
  @SerializedName(SERIALIZED_NAME_LAST_COMMIT_ID)
  private String lastCommitId;

  public static final String SERIALIZED_NAME_AUTH_STRATEGY = "AuthStrategy";
  @SerializedName(SERIALIZED_NAME_AUTH_STRATEGY)
  private SourceControlAuthStrategy authStrategy;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "AuthToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public SourceControlDetails() {
  }

  public SourceControlDetails provider(SourceControlProvider provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public SourceControlProvider getProvider() {
    return provider;
  }

  public void setProvider(SourceControlProvider provider) {
    this.provider = provider;
  }


  public SourceControlDetails repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public SourceControlDetails owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public SourceControlDetails branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public SourceControlDetails folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Get folder
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public SourceControlDetails lastCommitId(String lastCommitId) {
    this.lastCommitId = lastCommitId;
    return this;
  }

  /**
   * Get lastCommitId
   * @return lastCommitId
   */
  @javax.annotation.Nullable
  public String getLastCommitId() {
    return lastCommitId;
  }

  public void setLastCommitId(String lastCommitId) {
    this.lastCommitId = lastCommitId;
  }


  public SourceControlDetails authStrategy(SourceControlAuthStrategy authStrategy) {
    this.authStrategy = authStrategy;
    return this;
  }

  /**
   * Get authStrategy
   * @return authStrategy
   */
  @javax.annotation.Nullable
  public SourceControlAuthStrategy getAuthStrategy() {
    return authStrategy;
  }

  public void setAuthStrategy(SourceControlAuthStrategy authStrategy) {
    this.authStrategy = authStrategy;
  }


  public SourceControlDetails authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Get authToken
   * @return authToken
   */
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceControlDetails sourceControlDetails = (SourceControlDetails) o;
    return Objects.equals(this.provider, sourceControlDetails.provider) &&
        Objects.equals(this.repository, sourceControlDetails.repository) &&
        Objects.equals(this.owner, sourceControlDetails.owner) &&
        Objects.equals(this.branch, sourceControlDetails.branch) &&
        Objects.equals(this.folder, sourceControlDetails.folder) &&
        Objects.equals(this.lastCommitId, sourceControlDetails.lastCommitId) &&
        Objects.equals(this.authStrategy, sourceControlDetails.authStrategy) &&
        Objects.equals(this.authToken, sourceControlDetails.authToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, repository, owner, branch, folder, lastCommitId, authStrategy, authToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceControlDetails {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    lastCommitId: ").append(toIndentedString(lastCommitId)).append("\n");
    sb.append("    authStrategy: ").append(toIndentedString(authStrategy)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Provider");
    openapiFields.add("Repository");
    openapiFields.add("Owner");
    openapiFields.add("Branch");
    openapiFields.add("Folder");
    openapiFields.add("LastCommitId");
    openapiFields.add("AuthStrategy");
    openapiFields.add("AuthToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceControlDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceControlDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceControlDetails is not found in the empty JSON string", SourceControlDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceControlDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceControlDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Provider`
      if (jsonObj.get("Provider") != null && !jsonObj.get("Provider").isJsonNull()) {
        SourceControlProvider.validateJsonElement(jsonObj.get("Provider"));
      }
      // validate the optional field `Repository`
      if (jsonObj.get("Repository") != null && !jsonObj.get("Repository").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Repository"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `Branch`
      if (jsonObj.get("Branch") != null && !jsonObj.get("Branch").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Branch"));
      }
      // validate the optional field `Folder`
      if (jsonObj.get("Folder") != null && !jsonObj.get("Folder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Folder"));
      }
      // validate the optional field `LastCommitId`
      if (jsonObj.get("LastCommitId") != null && !jsonObj.get("LastCommitId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastCommitId"));
      }
      // validate the optional field `AuthStrategy`
      if (jsonObj.get("AuthStrategy") != null && !jsonObj.get("AuthStrategy").isJsonNull()) {
        SourceControlAuthStrategy.validateJsonElement(jsonObj.get("AuthStrategy"));
      }
      // validate the optional field `AuthToken`
      if (jsonObj.get("AuthToken") != null && !jsonObj.get("AuthToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceControlDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceControlDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceControlDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceControlDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceControlDetails>() {
           @Override
           public void write(JsonWriter out, SourceControlDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceControlDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceControlDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceControlDetails
   * @throws IOException if the JSON string is invalid with respect to SourceControlDetails
   */
  public static SourceControlDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceControlDetails.class);
  }

  /**
   * Convert an instance of SourceControlDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

