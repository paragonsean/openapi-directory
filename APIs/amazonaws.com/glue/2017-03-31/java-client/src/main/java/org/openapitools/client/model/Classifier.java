/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClassifierCsvClassifier;
import org.openapitools.client.model.ClassifierGrokClassifier;
import org.openapitools.client.model.ClassifierJsonClassifier;
import org.openapitools.client.model.ClassifierXMLClassifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle. If it is, the classifier creates a schema in the form of a &lt;code&gt;StructType&lt;/code&gt; object that matches that data format.&lt;/p&gt; &lt;p&gt;You can use the standard classifiers that Glue provides, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a &lt;code&gt;grok&lt;/code&gt; classifier, an &lt;code&gt;XML&lt;/code&gt; classifier, a &lt;code&gt;JSON&lt;/code&gt; classifier, or a custom &lt;code&gt;CSV&lt;/code&gt; classifier, as specified in one of the fields in the &lt;code&gt;Classifier&lt;/code&gt; object.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Classifier {
  public static final String SERIALIZED_NAME_GROK_CLASSIFIER = "GrokClassifier";
  @SerializedName(SERIALIZED_NAME_GROK_CLASSIFIER)
  private ClassifierGrokClassifier grokClassifier;

  public static final String SERIALIZED_NAME_XM_L_CLASSIFIER = "XMLClassifier";
  @SerializedName(SERIALIZED_NAME_XM_L_CLASSIFIER)
  private ClassifierXMLClassifier xmLClassifier;

  public static final String SERIALIZED_NAME_JSON_CLASSIFIER = "JsonClassifier";
  @SerializedName(SERIALIZED_NAME_JSON_CLASSIFIER)
  private ClassifierJsonClassifier jsonClassifier;

  public static final String SERIALIZED_NAME_CSV_CLASSIFIER = "CsvClassifier";
  @SerializedName(SERIALIZED_NAME_CSV_CLASSIFIER)
  private ClassifierCsvClassifier csvClassifier;

  public Classifier() {
  }

  public Classifier grokClassifier(ClassifierGrokClassifier grokClassifier) {
    this.grokClassifier = grokClassifier;
    return this;
  }

  /**
   * Get grokClassifier
   * @return grokClassifier
   */
  @javax.annotation.Nullable
  public ClassifierGrokClassifier getGrokClassifier() {
    return grokClassifier;
  }

  public void setGrokClassifier(ClassifierGrokClassifier grokClassifier) {
    this.grokClassifier = grokClassifier;
  }


  public Classifier xmLClassifier(ClassifierXMLClassifier xmLClassifier) {
    this.xmLClassifier = xmLClassifier;
    return this;
  }

  /**
   * Get xmLClassifier
   * @return xmLClassifier
   */
  @javax.annotation.Nullable
  public ClassifierXMLClassifier getXmLClassifier() {
    return xmLClassifier;
  }

  public void setXmLClassifier(ClassifierXMLClassifier xmLClassifier) {
    this.xmLClassifier = xmLClassifier;
  }


  public Classifier jsonClassifier(ClassifierJsonClassifier jsonClassifier) {
    this.jsonClassifier = jsonClassifier;
    return this;
  }

  /**
   * Get jsonClassifier
   * @return jsonClassifier
   */
  @javax.annotation.Nullable
  public ClassifierJsonClassifier getJsonClassifier() {
    return jsonClassifier;
  }

  public void setJsonClassifier(ClassifierJsonClassifier jsonClassifier) {
    this.jsonClassifier = jsonClassifier;
  }


  public Classifier csvClassifier(ClassifierCsvClassifier csvClassifier) {
    this.csvClassifier = csvClassifier;
    return this;
  }

  /**
   * Get csvClassifier
   * @return csvClassifier
   */
  @javax.annotation.Nullable
  public ClassifierCsvClassifier getCsvClassifier() {
    return csvClassifier;
  }

  public void setCsvClassifier(ClassifierCsvClassifier csvClassifier) {
    this.csvClassifier = csvClassifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Classifier classifier = (Classifier) o;
    return Objects.equals(this.grokClassifier, classifier.grokClassifier) &&
        Objects.equals(this.xmLClassifier, classifier.xmLClassifier) &&
        Objects.equals(this.jsonClassifier, classifier.jsonClassifier) &&
        Objects.equals(this.csvClassifier, classifier.csvClassifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grokClassifier, xmLClassifier, jsonClassifier, csvClassifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Classifier {\n");
    sb.append("    grokClassifier: ").append(toIndentedString(grokClassifier)).append("\n");
    sb.append("    xmLClassifier: ").append(toIndentedString(xmLClassifier)).append("\n");
    sb.append("    jsonClassifier: ").append(toIndentedString(jsonClassifier)).append("\n");
    sb.append("    csvClassifier: ").append(toIndentedString(csvClassifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GrokClassifier");
    openapiFields.add("XMLClassifier");
    openapiFields.add("JsonClassifier");
    openapiFields.add("CsvClassifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Classifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Classifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Classifier is not found in the empty JSON string", Classifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Classifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Classifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GrokClassifier`
      if (jsonObj.get("GrokClassifier") != null && !jsonObj.get("GrokClassifier").isJsonNull()) {
        ClassifierGrokClassifier.validateJsonElement(jsonObj.get("GrokClassifier"));
      }
      // validate the optional field `XMLClassifier`
      if (jsonObj.get("XMLClassifier") != null && !jsonObj.get("XMLClassifier").isJsonNull()) {
        ClassifierXMLClassifier.validateJsonElement(jsonObj.get("XMLClassifier"));
      }
      // validate the optional field `JsonClassifier`
      if (jsonObj.get("JsonClassifier") != null && !jsonObj.get("JsonClassifier").isJsonNull()) {
        ClassifierJsonClassifier.validateJsonElement(jsonObj.get("JsonClassifier"));
      }
      // validate the optional field `CsvClassifier`
      if (jsonObj.get("CsvClassifier") != null && !jsonObj.get("CsvClassifier").isJsonNull()) {
        ClassifierCsvClassifier.validateJsonElement(jsonObj.get("CsvClassifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Classifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Classifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Classifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Classifier.class));

       return (TypeAdapter<T>) new TypeAdapter<Classifier>() {
           @Override
           public void write(JsonWriter out, Classifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Classifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Classifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Classifier
   * @throws IOException if the JSON string is invalid with respect to Classifier
   */
  public static Classifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Classifier.class);
  }

  /**
   * Convert an instance of Classifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

