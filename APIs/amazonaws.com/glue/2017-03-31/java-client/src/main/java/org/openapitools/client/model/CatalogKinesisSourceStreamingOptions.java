/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StartingPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CatalogKinesisSourceStreamingOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogKinesisSourceStreamingOptions {
  public static final String SERIALIZED_NAME_ENDPOINT_URL = "EndpointUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URL)
  private String endpointUrl;

  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "Classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_DELIMITER = "Delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter;

  public static final String SERIALIZED_NAME_STARTING_POSITION = "StartingPosition";
  @SerializedName(SERIALIZED_NAME_STARTING_POSITION)
  private StartingPosition startingPosition;

  public static final String SERIALIZED_NAME_MAX_FETCH_TIME_IN_MS = "MaxFetchTimeInMs";
  @SerializedName(SERIALIZED_NAME_MAX_FETCH_TIME_IN_MS)
  private Integer maxFetchTimeInMs;

  public static final String SERIALIZED_NAME_MAX_FETCH_RECORDS_PER_SHARD = "MaxFetchRecordsPerShard";
  @SerializedName(SERIALIZED_NAME_MAX_FETCH_RECORDS_PER_SHARD)
  private Integer maxFetchRecordsPerShard;

  public static final String SERIALIZED_NAME_MAX_RECORD_PER_READ = "MaxRecordPerRead";
  @SerializedName(SERIALIZED_NAME_MAX_RECORD_PER_READ)
  private Integer maxRecordPerRead;

  public static final String SERIALIZED_NAME_ADD_IDLE_TIME_BETWEEN_READS = "AddIdleTimeBetweenReads";
  @SerializedName(SERIALIZED_NAME_ADD_IDLE_TIME_BETWEEN_READS)
  private Boolean addIdleTimeBetweenReads;

  public static final String SERIALIZED_NAME_IDLE_TIME_BETWEEN_READS_IN_MS = "IdleTimeBetweenReadsInMs";
  @SerializedName(SERIALIZED_NAME_IDLE_TIME_BETWEEN_READS_IN_MS)
  private Integer idleTimeBetweenReadsInMs;

  public static final String SERIALIZED_NAME_DESCRIBE_SHARD_INTERVAL = "DescribeShardInterval";
  @SerializedName(SERIALIZED_NAME_DESCRIBE_SHARD_INTERVAL)
  private Integer describeShardInterval;

  public static final String SERIALIZED_NAME_NUM_RETRIES = "NumRetries";
  @SerializedName(SERIALIZED_NAME_NUM_RETRIES)
  private Integer numRetries;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL_MS = "RetryIntervalMs";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL_MS)
  private Integer retryIntervalMs;

  public static final String SERIALIZED_NAME_MAX_RETRY_INTERVAL_MS = "MaxRetryIntervalMs";
  @SerializedName(SERIALIZED_NAME_MAX_RETRY_INTERVAL_MS)
  private Integer maxRetryIntervalMs;

  public static final String SERIALIZED_NAME_AVOID_EMPTY_BATCHES = "AvoidEmptyBatches";
  @SerializedName(SERIALIZED_NAME_AVOID_EMPTY_BATCHES)
  private Boolean avoidEmptyBatches;

  public static final String SERIALIZED_NAME_STREAM_ARN = "StreamArn";
  @SerializedName(SERIALIZED_NAME_STREAM_ARN)
  private String streamArn;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_ROLE_SESSION_NAME = "RoleSessionName";
  @SerializedName(SERIALIZED_NAME_ROLE_SESSION_NAME)
  private String roleSessionName;

  public static final String SERIALIZED_NAME_ADD_RECORD_TIMESTAMP = "AddRecordTimestamp";
  @SerializedName(SERIALIZED_NAME_ADD_RECORD_TIMESTAMP)
  private String addRecordTimestamp;

  public static final String SERIALIZED_NAME_EMIT_CONSUMER_LAG_METRICS = "EmitConsumerLagMetrics";
  @SerializedName(SERIALIZED_NAME_EMIT_CONSUMER_LAG_METRICS)
  private String emitConsumerLagMetrics;

  public static final String SERIALIZED_NAME_STARTING_TIMESTAMP = "StartingTimestamp";
  @SerializedName(SERIALIZED_NAME_STARTING_TIMESTAMP)
  private OffsetDateTime startingTimestamp;

  public CatalogKinesisSourceStreamingOptions() {
  }

  public CatalogKinesisSourceStreamingOptions endpointUrl(String endpointUrl) {
    this.endpointUrl = endpointUrl;
    return this;
  }

  /**
   * Get endpointUrl
   * @return endpointUrl
   */
  @javax.annotation.Nullable
  public String getEndpointUrl() {
    return endpointUrl;
  }

  public void setEndpointUrl(String endpointUrl) {
    this.endpointUrl = endpointUrl;
  }


  public CatalogKinesisSourceStreamingOptions streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Get streamName
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public CatalogKinesisSourceStreamingOptions classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public CatalogKinesisSourceStreamingOptions delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * Get delimiter
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public CatalogKinesisSourceStreamingOptions startingPosition(StartingPosition startingPosition) {
    this.startingPosition = startingPosition;
    return this;
  }

  /**
   * Get startingPosition
   * @return startingPosition
   */
  @javax.annotation.Nullable
  public StartingPosition getStartingPosition() {
    return startingPosition;
  }

  public void setStartingPosition(StartingPosition startingPosition) {
    this.startingPosition = startingPosition;
  }


  public CatalogKinesisSourceStreamingOptions maxFetchTimeInMs(Integer maxFetchTimeInMs) {
    this.maxFetchTimeInMs = maxFetchTimeInMs;
    return this;
  }

  /**
   * Get maxFetchTimeInMs
   * @return maxFetchTimeInMs
   */
  @javax.annotation.Nullable
  public Integer getMaxFetchTimeInMs() {
    return maxFetchTimeInMs;
  }

  public void setMaxFetchTimeInMs(Integer maxFetchTimeInMs) {
    this.maxFetchTimeInMs = maxFetchTimeInMs;
  }


  public CatalogKinesisSourceStreamingOptions maxFetchRecordsPerShard(Integer maxFetchRecordsPerShard) {
    this.maxFetchRecordsPerShard = maxFetchRecordsPerShard;
    return this;
  }

  /**
   * Get maxFetchRecordsPerShard
   * @return maxFetchRecordsPerShard
   */
  @javax.annotation.Nullable
  public Integer getMaxFetchRecordsPerShard() {
    return maxFetchRecordsPerShard;
  }

  public void setMaxFetchRecordsPerShard(Integer maxFetchRecordsPerShard) {
    this.maxFetchRecordsPerShard = maxFetchRecordsPerShard;
  }


  public CatalogKinesisSourceStreamingOptions maxRecordPerRead(Integer maxRecordPerRead) {
    this.maxRecordPerRead = maxRecordPerRead;
    return this;
  }

  /**
   * Get maxRecordPerRead
   * @return maxRecordPerRead
   */
  @javax.annotation.Nullable
  public Integer getMaxRecordPerRead() {
    return maxRecordPerRead;
  }

  public void setMaxRecordPerRead(Integer maxRecordPerRead) {
    this.maxRecordPerRead = maxRecordPerRead;
  }


  public CatalogKinesisSourceStreamingOptions addIdleTimeBetweenReads(Boolean addIdleTimeBetweenReads) {
    this.addIdleTimeBetweenReads = addIdleTimeBetweenReads;
    return this;
  }

  /**
   * Get addIdleTimeBetweenReads
   * @return addIdleTimeBetweenReads
   */
  @javax.annotation.Nullable
  public Boolean getAddIdleTimeBetweenReads() {
    return addIdleTimeBetweenReads;
  }

  public void setAddIdleTimeBetweenReads(Boolean addIdleTimeBetweenReads) {
    this.addIdleTimeBetweenReads = addIdleTimeBetweenReads;
  }


  public CatalogKinesisSourceStreamingOptions idleTimeBetweenReadsInMs(Integer idleTimeBetweenReadsInMs) {
    this.idleTimeBetweenReadsInMs = idleTimeBetweenReadsInMs;
    return this;
  }

  /**
   * Get idleTimeBetweenReadsInMs
   * @return idleTimeBetweenReadsInMs
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeBetweenReadsInMs() {
    return idleTimeBetweenReadsInMs;
  }

  public void setIdleTimeBetweenReadsInMs(Integer idleTimeBetweenReadsInMs) {
    this.idleTimeBetweenReadsInMs = idleTimeBetweenReadsInMs;
  }


  public CatalogKinesisSourceStreamingOptions describeShardInterval(Integer describeShardInterval) {
    this.describeShardInterval = describeShardInterval;
    return this;
  }

  /**
   * Get describeShardInterval
   * @return describeShardInterval
   */
  @javax.annotation.Nullable
  public Integer getDescribeShardInterval() {
    return describeShardInterval;
  }

  public void setDescribeShardInterval(Integer describeShardInterval) {
    this.describeShardInterval = describeShardInterval;
  }


  public CatalogKinesisSourceStreamingOptions numRetries(Integer numRetries) {
    this.numRetries = numRetries;
    return this;
  }

  /**
   * Get numRetries
   * @return numRetries
   */
  @javax.annotation.Nullable
  public Integer getNumRetries() {
    return numRetries;
  }

  public void setNumRetries(Integer numRetries) {
    this.numRetries = numRetries;
  }


  public CatalogKinesisSourceStreamingOptions retryIntervalMs(Integer retryIntervalMs) {
    this.retryIntervalMs = retryIntervalMs;
    return this;
  }

  /**
   * Get retryIntervalMs
   * @return retryIntervalMs
   */
  @javax.annotation.Nullable
  public Integer getRetryIntervalMs() {
    return retryIntervalMs;
  }

  public void setRetryIntervalMs(Integer retryIntervalMs) {
    this.retryIntervalMs = retryIntervalMs;
  }


  public CatalogKinesisSourceStreamingOptions maxRetryIntervalMs(Integer maxRetryIntervalMs) {
    this.maxRetryIntervalMs = maxRetryIntervalMs;
    return this;
  }

  /**
   * Get maxRetryIntervalMs
   * @return maxRetryIntervalMs
   */
  @javax.annotation.Nullable
  public Integer getMaxRetryIntervalMs() {
    return maxRetryIntervalMs;
  }

  public void setMaxRetryIntervalMs(Integer maxRetryIntervalMs) {
    this.maxRetryIntervalMs = maxRetryIntervalMs;
  }


  public CatalogKinesisSourceStreamingOptions avoidEmptyBatches(Boolean avoidEmptyBatches) {
    this.avoidEmptyBatches = avoidEmptyBatches;
    return this;
  }

  /**
   * Get avoidEmptyBatches
   * @return avoidEmptyBatches
   */
  @javax.annotation.Nullable
  public Boolean getAvoidEmptyBatches() {
    return avoidEmptyBatches;
  }

  public void setAvoidEmptyBatches(Boolean avoidEmptyBatches) {
    this.avoidEmptyBatches = avoidEmptyBatches;
  }


  public CatalogKinesisSourceStreamingOptions streamArn(String streamArn) {
    this.streamArn = streamArn;
    return this;
  }

  /**
   * Get streamArn
   * @return streamArn
   */
  @javax.annotation.Nullable
  public String getStreamArn() {
    return streamArn;
  }

  public void setStreamArn(String streamArn) {
    this.streamArn = streamArn;
  }


  public CatalogKinesisSourceStreamingOptions roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CatalogKinesisSourceStreamingOptions roleSessionName(String roleSessionName) {
    this.roleSessionName = roleSessionName;
    return this;
  }

  /**
   * Get roleSessionName
   * @return roleSessionName
   */
  @javax.annotation.Nullable
  public String getRoleSessionName() {
    return roleSessionName;
  }

  public void setRoleSessionName(String roleSessionName) {
    this.roleSessionName = roleSessionName;
  }


  public CatalogKinesisSourceStreamingOptions addRecordTimestamp(String addRecordTimestamp) {
    this.addRecordTimestamp = addRecordTimestamp;
    return this;
  }

  /**
   * Get addRecordTimestamp
   * @return addRecordTimestamp
   */
  @javax.annotation.Nullable
  public String getAddRecordTimestamp() {
    return addRecordTimestamp;
  }

  public void setAddRecordTimestamp(String addRecordTimestamp) {
    this.addRecordTimestamp = addRecordTimestamp;
  }


  public CatalogKinesisSourceStreamingOptions emitConsumerLagMetrics(String emitConsumerLagMetrics) {
    this.emitConsumerLagMetrics = emitConsumerLagMetrics;
    return this;
  }

  /**
   * Get emitConsumerLagMetrics
   * @return emitConsumerLagMetrics
   */
  @javax.annotation.Nullable
  public String getEmitConsumerLagMetrics() {
    return emitConsumerLagMetrics;
  }

  public void setEmitConsumerLagMetrics(String emitConsumerLagMetrics) {
    this.emitConsumerLagMetrics = emitConsumerLagMetrics;
  }


  public CatalogKinesisSourceStreamingOptions startingTimestamp(OffsetDateTime startingTimestamp) {
    this.startingTimestamp = startingTimestamp;
    return this;
  }

  /**
   * Get startingTimestamp
   * @return startingTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartingTimestamp() {
    return startingTimestamp;
  }

  public void setStartingTimestamp(OffsetDateTime startingTimestamp) {
    this.startingTimestamp = startingTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogKinesisSourceStreamingOptions catalogKinesisSourceStreamingOptions = (CatalogKinesisSourceStreamingOptions) o;
    return Objects.equals(this.endpointUrl, catalogKinesisSourceStreamingOptions.endpointUrl) &&
        Objects.equals(this.streamName, catalogKinesisSourceStreamingOptions.streamName) &&
        Objects.equals(this.classification, catalogKinesisSourceStreamingOptions.classification) &&
        Objects.equals(this.delimiter, catalogKinesisSourceStreamingOptions.delimiter) &&
        Objects.equals(this.startingPosition, catalogKinesisSourceStreamingOptions.startingPosition) &&
        Objects.equals(this.maxFetchTimeInMs, catalogKinesisSourceStreamingOptions.maxFetchTimeInMs) &&
        Objects.equals(this.maxFetchRecordsPerShard, catalogKinesisSourceStreamingOptions.maxFetchRecordsPerShard) &&
        Objects.equals(this.maxRecordPerRead, catalogKinesisSourceStreamingOptions.maxRecordPerRead) &&
        Objects.equals(this.addIdleTimeBetweenReads, catalogKinesisSourceStreamingOptions.addIdleTimeBetweenReads) &&
        Objects.equals(this.idleTimeBetweenReadsInMs, catalogKinesisSourceStreamingOptions.idleTimeBetweenReadsInMs) &&
        Objects.equals(this.describeShardInterval, catalogKinesisSourceStreamingOptions.describeShardInterval) &&
        Objects.equals(this.numRetries, catalogKinesisSourceStreamingOptions.numRetries) &&
        Objects.equals(this.retryIntervalMs, catalogKinesisSourceStreamingOptions.retryIntervalMs) &&
        Objects.equals(this.maxRetryIntervalMs, catalogKinesisSourceStreamingOptions.maxRetryIntervalMs) &&
        Objects.equals(this.avoidEmptyBatches, catalogKinesisSourceStreamingOptions.avoidEmptyBatches) &&
        Objects.equals(this.streamArn, catalogKinesisSourceStreamingOptions.streamArn) &&
        Objects.equals(this.roleArn, catalogKinesisSourceStreamingOptions.roleArn) &&
        Objects.equals(this.roleSessionName, catalogKinesisSourceStreamingOptions.roleSessionName) &&
        Objects.equals(this.addRecordTimestamp, catalogKinesisSourceStreamingOptions.addRecordTimestamp) &&
        Objects.equals(this.emitConsumerLagMetrics, catalogKinesisSourceStreamingOptions.emitConsumerLagMetrics) &&
        Objects.equals(this.startingTimestamp, catalogKinesisSourceStreamingOptions.startingTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointUrl, streamName, classification, delimiter, startingPosition, maxFetchTimeInMs, maxFetchRecordsPerShard, maxRecordPerRead, addIdleTimeBetweenReads, idleTimeBetweenReadsInMs, describeShardInterval, numRetries, retryIntervalMs, maxRetryIntervalMs, avoidEmptyBatches, streamArn, roleArn, roleSessionName, addRecordTimestamp, emitConsumerLagMetrics, startingTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogKinesisSourceStreamingOptions {\n");
    sb.append("    endpointUrl: ").append(toIndentedString(endpointUrl)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    startingPosition: ").append(toIndentedString(startingPosition)).append("\n");
    sb.append("    maxFetchTimeInMs: ").append(toIndentedString(maxFetchTimeInMs)).append("\n");
    sb.append("    maxFetchRecordsPerShard: ").append(toIndentedString(maxFetchRecordsPerShard)).append("\n");
    sb.append("    maxRecordPerRead: ").append(toIndentedString(maxRecordPerRead)).append("\n");
    sb.append("    addIdleTimeBetweenReads: ").append(toIndentedString(addIdleTimeBetweenReads)).append("\n");
    sb.append("    idleTimeBetweenReadsInMs: ").append(toIndentedString(idleTimeBetweenReadsInMs)).append("\n");
    sb.append("    describeShardInterval: ").append(toIndentedString(describeShardInterval)).append("\n");
    sb.append("    numRetries: ").append(toIndentedString(numRetries)).append("\n");
    sb.append("    retryIntervalMs: ").append(toIndentedString(retryIntervalMs)).append("\n");
    sb.append("    maxRetryIntervalMs: ").append(toIndentedString(maxRetryIntervalMs)).append("\n");
    sb.append("    avoidEmptyBatches: ").append(toIndentedString(avoidEmptyBatches)).append("\n");
    sb.append("    streamArn: ").append(toIndentedString(streamArn)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    roleSessionName: ").append(toIndentedString(roleSessionName)).append("\n");
    sb.append("    addRecordTimestamp: ").append(toIndentedString(addRecordTimestamp)).append("\n");
    sb.append("    emitConsumerLagMetrics: ").append(toIndentedString(emitConsumerLagMetrics)).append("\n");
    sb.append("    startingTimestamp: ").append(toIndentedString(startingTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndpointUrl");
    openapiFields.add("StreamName");
    openapiFields.add("Classification");
    openapiFields.add("Delimiter");
    openapiFields.add("StartingPosition");
    openapiFields.add("MaxFetchTimeInMs");
    openapiFields.add("MaxFetchRecordsPerShard");
    openapiFields.add("MaxRecordPerRead");
    openapiFields.add("AddIdleTimeBetweenReads");
    openapiFields.add("IdleTimeBetweenReadsInMs");
    openapiFields.add("DescribeShardInterval");
    openapiFields.add("NumRetries");
    openapiFields.add("RetryIntervalMs");
    openapiFields.add("MaxRetryIntervalMs");
    openapiFields.add("AvoidEmptyBatches");
    openapiFields.add("StreamArn");
    openapiFields.add("RoleArn");
    openapiFields.add("RoleSessionName");
    openapiFields.add("AddRecordTimestamp");
    openapiFields.add("EmitConsumerLagMetrics");
    openapiFields.add("StartingTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogKinesisSourceStreamingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogKinesisSourceStreamingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogKinesisSourceStreamingOptions is not found in the empty JSON string", CatalogKinesisSourceStreamingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogKinesisSourceStreamingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogKinesisSourceStreamingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EndpointUrl`
      if (jsonObj.get("EndpointUrl") != null && !jsonObj.get("EndpointUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndpointUrl"));
      }
      // validate the optional field `StreamName`
      if (jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamName"));
      }
      // validate the optional field `Classification`
      if (jsonObj.get("Classification") != null && !jsonObj.get("Classification").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Classification"));
      }
      // validate the optional field `Delimiter`
      if (jsonObj.get("Delimiter") != null && !jsonObj.get("Delimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Delimiter"));
      }
      // validate the optional field `StartingPosition`
      if (jsonObj.get("StartingPosition") != null && !jsonObj.get("StartingPosition").isJsonNull()) {
        StartingPosition.validateJsonElement(jsonObj.get("StartingPosition"));
      }
      // validate the optional field `MaxFetchTimeInMs`
      if (jsonObj.get("MaxFetchTimeInMs") != null && !jsonObj.get("MaxFetchTimeInMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFetchTimeInMs"));
      }
      // validate the optional field `MaxFetchRecordsPerShard`
      if (jsonObj.get("MaxFetchRecordsPerShard") != null && !jsonObj.get("MaxFetchRecordsPerShard").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFetchRecordsPerShard"));
      }
      // validate the optional field `MaxRecordPerRead`
      if (jsonObj.get("MaxRecordPerRead") != null && !jsonObj.get("MaxRecordPerRead").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecordPerRead"));
      }
      // validate the optional field `AddIdleTimeBetweenReads`
      if (jsonObj.get("AddIdleTimeBetweenReads") != null && !jsonObj.get("AddIdleTimeBetweenReads").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AddIdleTimeBetweenReads"));
      }
      // validate the optional field `IdleTimeBetweenReadsInMs`
      if (jsonObj.get("IdleTimeBetweenReadsInMs") != null && !jsonObj.get("IdleTimeBetweenReadsInMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IdleTimeBetweenReadsInMs"));
      }
      // validate the optional field `DescribeShardInterval`
      if (jsonObj.get("DescribeShardInterval") != null && !jsonObj.get("DescribeShardInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DescribeShardInterval"));
      }
      // validate the optional field `NumRetries`
      if (jsonObj.get("NumRetries") != null && !jsonObj.get("NumRetries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumRetries"));
      }
      // validate the optional field `RetryIntervalMs`
      if (jsonObj.get("RetryIntervalMs") != null && !jsonObj.get("RetryIntervalMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetryIntervalMs"));
      }
      // validate the optional field `MaxRetryIntervalMs`
      if (jsonObj.get("MaxRetryIntervalMs") != null && !jsonObj.get("MaxRetryIntervalMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRetryIntervalMs"));
      }
      // validate the optional field `AvoidEmptyBatches`
      if (jsonObj.get("AvoidEmptyBatches") != null && !jsonObj.get("AvoidEmptyBatches").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AvoidEmptyBatches"));
      }
      // validate the optional field `StreamArn`
      if (jsonObj.get("StreamArn") != null && !jsonObj.get("StreamArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamArn"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `RoleSessionName`
      if (jsonObj.get("RoleSessionName") != null && !jsonObj.get("RoleSessionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleSessionName"));
      }
      // validate the optional field `AddRecordTimestamp`
      if (jsonObj.get("AddRecordTimestamp") != null && !jsonObj.get("AddRecordTimestamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddRecordTimestamp"));
      }
      // validate the optional field `EmitConsumerLagMetrics`
      if (jsonObj.get("EmitConsumerLagMetrics") != null && !jsonObj.get("EmitConsumerLagMetrics").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EmitConsumerLagMetrics"));
      }
      // validate the optional field `StartingTimestamp`
      if (jsonObj.get("StartingTimestamp") != null && !jsonObj.get("StartingTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartingTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogKinesisSourceStreamingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogKinesisSourceStreamingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogKinesisSourceStreamingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogKinesisSourceStreamingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogKinesisSourceStreamingOptions>() {
           @Override
           public void write(JsonWriter out, CatalogKinesisSourceStreamingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogKinesisSourceStreamingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogKinesisSourceStreamingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogKinesisSourceStreamingOptions
   * @throws IOException if the JSON string is invalid with respect to CatalogKinesisSourceStreamingOptions
   */
  public static CatalogKinesisSourceStreamingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogKinesisSourceStreamingOptions.class);
  }

  /**
   * Convert an instance of CatalogKinesisSourceStreamingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

