/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeCrawlerDetails;
import org.openapitools.client.model.NodeJobDetails;
import org.openapitools.client.model.NodeTriggerDetails;
import org.openapitools.client.model.NodeType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A node represents an Glue component (trigger, crawler, or job) on a workflow graph.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Node {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NodeType type;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "UniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_TRIGGER_DETAILS = "TriggerDetails";
  @SerializedName(SERIALIZED_NAME_TRIGGER_DETAILS)
  private NodeTriggerDetails triggerDetails;

  public static final String SERIALIZED_NAME_JOB_DETAILS = "JobDetails";
  @SerializedName(SERIALIZED_NAME_JOB_DETAILS)
  private NodeJobDetails jobDetails;

  public static final String SERIALIZED_NAME_CRAWLER_DETAILS = "CrawlerDetails";
  @SerializedName(SERIALIZED_NAME_CRAWLER_DETAILS)
  private NodeCrawlerDetails crawlerDetails;

  public Node() {
  }

  public Node type(NodeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public NodeType getType() {
    return type;
  }

  public void setType(NodeType type) {
    this.type = type;
  }


  public Node name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Node uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

  /**
   * Get uniqueId
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }


  public Node triggerDetails(NodeTriggerDetails triggerDetails) {
    this.triggerDetails = triggerDetails;
    return this;
  }

  /**
   * Get triggerDetails
   * @return triggerDetails
   */
  @javax.annotation.Nullable
  public NodeTriggerDetails getTriggerDetails() {
    return triggerDetails;
  }

  public void setTriggerDetails(NodeTriggerDetails triggerDetails) {
    this.triggerDetails = triggerDetails;
  }


  public Node jobDetails(NodeJobDetails jobDetails) {
    this.jobDetails = jobDetails;
    return this;
  }

  /**
   * Get jobDetails
   * @return jobDetails
   */
  @javax.annotation.Nullable
  public NodeJobDetails getJobDetails() {
    return jobDetails;
  }

  public void setJobDetails(NodeJobDetails jobDetails) {
    this.jobDetails = jobDetails;
  }


  public Node crawlerDetails(NodeCrawlerDetails crawlerDetails) {
    this.crawlerDetails = crawlerDetails;
    return this;
  }

  /**
   * Get crawlerDetails
   * @return crawlerDetails
   */
  @javax.annotation.Nullable
  public NodeCrawlerDetails getCrawlerDetails() {
    return crawlerDetails;
  }

  public void setCrawlerDetails(NodeCrawlerDetails crawlerDetails) {
    this.crawlerDetails = crawlerDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.type, node.type) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.uniqueId, node.uniqueId) &&
        Objects.equals(this.triggerDetails, node.triggerDetails) &&
        Objects.equals(this.jobDetails, node.jobDetails) &&
        Objects.equals(this.crawlerDetails, node.crawlerDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, name, uniqueId, triggerDetails, jobDetails, crawlerDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    triggerDetails: ").append(toIndentedString(triggerDetails)).append("\n");
    sb.append("    jobDetails: ").append(toIndentedString(jobDetails)).append("\n");
    sb.append("    crawlerDetails: ").append(toIndentedString(crawlerDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("Name");
    openapiFields.add("UniqueId");
    openapiFields.add("TriggerDetails");
    openapiFields.add("JobDetails");
    openapiFields.add("CrawlerDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        NodeType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `UniqueId`
      if (jsonObj.get("UniqueId") != null && !jsonObj.get("UniqueId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UniqueId"));
      }
      // validate the optional field `TriggerDetails`
      if (jsonObj.get("TriggerDetails") != null && !jsonObj.get("TriggerDetails").isJsonNull()) {
        NodeTriggerDetails.validateJsonElement(jsonObj.get("TriggerDetails"));
      }
      // validate the optional field `JobDetails`
      if (jsonObj.get("JobDetails") != null && !jsonObj.get("JobDetails").isJsonNull()) {
        NodeJobDetails.validateJsonElement(jsonObj.get("JobDetails"));
      }
      // validate the optional field `CrawlerDetails`
      if (jsonObj.get("CrawlerDetails") != null && !jsonObj.get("CrawlerDetails").isJsonNull()) {
        NodeCrawlerDetails.validateJsonElement(jsonObj.get("CrawlerDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

