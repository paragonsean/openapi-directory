/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceShareType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchTablesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchTablesRequest {
  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List filters;

  public static final String SERIALIZED_NAME_SEARCH_TEXT = "SearchText";
  @SerializedName(SERIALIZED_NAME_SEARCH_TEXT)
  private String searchText;

  public static final String SERIALIZED_NAME_SORT_CRITERIA = "SortCriteria";
  @SerializedName(SERIALIZED_NAME_SORT_CRITERIA)
  private List sortCriteria;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_RESOURCE_SHARE_TYPE = "ResourceShareType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SHARE_TYPE)
  private ResourceShareType resourceShareType;

  public SearchTablesRequest() {
  }

  public SearchTablesRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public SearchTablesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public SearchTablesRequest filters(List filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List getFilters() {
    return filters;
  }

  public void setFilters(List filters) {
    this.filters = filters;
  }


  public SearchTablesRequest searchText(String searchText) {
    this.searchText = searchText;
    return this;
  }

  /**
   * Get searchText
   * @return searchText
   */
  @javax.annotation.Nullable
  public String getSearchText() {
    return searchText;
  }

  public void setSearchText(String searchText) {
    this.searchText = searchText;
  }


  public SearchTablesRequest sortCriteria(List sortCriteria) {
    this.sortCriteria = sortCriteria;
    return this;
  }

  /**
   * Get sortCriteria
   * @return sortCriteria
   */
  @javax.annotation.Nullable
  public List getSortCriteria() {
    return sortCriteria;
  }

  public void setSortCriteria(List sortCriteria) {
    this.sortCriteria = sortCriteria;
  }


  public SearchTablesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchTablesRequest resourceShareType(ResourceShareType resourceShareType) {
    this.resourceShareType = resourceShareType;
    return this;
  }

  /**
   * Get resourceShareType
   * @return resourceShareType
   */
  @javax.annotation.Nullable
  public ResourceShareType getResourceShareType() {
    return resourceShareType;
  }

  public void setResourceShareType(ResourceShareType resourceShareType) {
    this.resourceShareType = resourceShareType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchTablesRequest searchTablesRequest = (SearchTablesRequest) o;
    return Objects.equals(this.catalogId, searchTablesRequest.catalogId) &&
        Objects.equals(this.nextToken, searchTablesRequest.nextToken) &&
        Objects.equals(this.filters, searchTablesRequest.filters) &&
        Objects.equals(this.searchText, searchTablesRequest.searchText) &&
        Objects.equals(this.sortCriteria, searchTablesRequest.sortCriteria) &&
        Objects.equals(this.maxResults, searchTablesRequest.maxResults) &&
        Objects.equals(this.resourceShareType, searchTablesRequest.resourceShareType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, nextToken, filters, searchText, sortCriteria, maxResults, resourceShareType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchTablesRequest {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    searchText: ").append(toIndentedString(searchText)).append("\n");
    sb.append("    sortCriteria: ").append(toIndentedString(sortCriteria)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    resourceShareType: ").append(toIndentedString(resourceShareType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CatalogId");
    openapiFields.add("NextToken");
    openapiFields.add("Filters");
    openapiFields.add("SearchText");
    openapiFields.add("SortCriteria");
    openapiFields.add("MaxResults");
    openapiFields.add("ResourceShareType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchTablesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchTablesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchTablesRequest is not found in the empty JSON string", SearchTablesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchTablesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchTablesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CatalogId`
      if (jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CatalogId"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `Filters`
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Filters"));
      }
      // validate the optional field `SearchText`
      if (jsonObj.get("SearchText") != null && !jsonObj.get("SearchText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SearchText"));
      }
      // validate the optional field `SortCriteria`
      if (jsonObj.get("SortCriteria") != null && !jsonObj.get("SortCriteria").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SortCriteria"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `ResourceShareType`
      if (jsonObj.get("ResourceShareType") != null && !jsonObj.get("ResourceShareType").isJsonNull()) {
        ResourceShareType.validateJsonElement(jsonObj.get("ResourceShareType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchTablesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchTablesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchTablesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchTablesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchTablesRequest>() {
           @Override
           public void write(JsonWriter out, SearchTablesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchTablesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchTablesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchTablesRequest
   * @throws IOException if the JSON string is invalid with respect to SearchTablesRequest
   */
  public static SearchTablesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchTablesRequest.class);
  }

  /**
   * Convert an instance of SearchTablesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

