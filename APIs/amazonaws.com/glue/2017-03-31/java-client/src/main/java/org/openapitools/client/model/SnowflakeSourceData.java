/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SnowflakeNodeDataConnection;
import org.openapitools.client.model.SnowflakeNodeDataIamRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SnowflakeSourceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnowflakeSourceData {
  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_CONNECTION = "Connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private SnowflakeNodeDataConnection connection;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_TABLE = "Table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_TEMP_DIR = "TempDir";
  @SerializedName(SERIALIZED_NAME_TEMP_DIR)
  private String tempDir;

  public static final String SERIALIZED_NAME_IAM_ROLE = "IamRole";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE)
  private SnowflakeNodeDataIamRole iamRole;

  public static final String SERIALIZED_NAME_ADDITIONAL_OPTIONS = "AdditionalOptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OPTIONS)
  private Map additionalOptions;

  public static final String SERIALIZED_NAME_SAMPLE_QUERY = "SampleQuery";
  @SerializedName(SERIALIZED_NAME_SAMPLE_QUERY)
  private String sampleQuery;

  public static final String SERIALIZED_NAME_PRE_ACTION = "PreAction";
  @SerializedName(SERIALIZED_NAME_PRE_ACTION)
  private String preAction;

  public static final String SERIALIZED_NAME_POST_ACTION = "PostAction";
  @SerializedName(SERIALIZED_NAME_POST_ACTION)
  private String postAction;

  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_UPSERT = "Upsert";
  @SerializedName(SERIALIZED_NAME_UPSERT)
  private Boolean upsert;

  public static final String SERIALIZED_NAME_MERGE_ACTION = "MergeAction";
  @SerializedName(SERIALIZED_NAME_MERGE_ACTION)
  private String mergeAction;

  public static final String SERIALIZED_NAME_MERGE_WHEN_MATCHED = "MergeWhenMatched";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_MATCHED)
  private String mergeWhenMatched;

  public static final String SERIALIZED_NAME_MERGE_WHEN_NOT_MATCHED = "MergeWhenNotMatched";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_NOT_MATCHED)
  private String mergeWhenNotMatched;

  public static final String SERIALIZED_NAME_MERGE_CLAUSE = "MergeClause";
  @SerializedName(SERIALIZED_NAME_MERGE_CLAUSE)
  private String mergeClause;

  public static final String SERIALIZED_NAME_STAGING_TABLE = "StagingTable";
  @SerializedName(SERIALIZED_NAME_STAGING_TABLE)
  private String stagingTable;

  public static final String SERIALIZED_NAME_SELECTED_COLUMNS = "SelectedColumns";
  @SerializedName(SERIALIZED_NAME_SELECTED_COLUMNS)
  private List selectedColumns;

  public static final String SERIALIZED_NAME_AUTO_PUSHDOWN = "AutoPushdown";
  @SerializedName(SERIALIZED_NAME_AUTO_PUSHDOWN)
  private Boolean autoPushdown;

  public static final String SERIALIZED_NAME_TABLE_SCHEMA = "TableSchema";
  @SerializedName(SERIALIZED_NAME_TABLE_SCHEMA)
  private List tableSchema;

  public SnowflakeSourceData() {
  }

  public SnowflakeSourceData sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public SnowflakeSourceData connection(SnowflakeNodeDataConnection connection) {
    this.connection = connection;
    return this;
  }

  /**
   * Get connection
   * @return connection
   */
  @javax.annotation.Nullable
  public SnowflakeNodeDataConnection getConnection() {
    return connection;
  }

  public void setConnection(SnowflakeNodeDataConnection connection) {
    this.connection = connection;
  }


  public SnowflakeSourceData schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public SnowflakeSourceData table(String table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public SnowflakeSourceData database(String database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public SnowflakeSourceData tempDir(String tempDir) {
    this.tempDir = tempDir;
    return this;
  }

  /**
   * Get tempDir
   * @return tempDir
   */
  @javax.annotation.Nullable
  public String getTempDir() {
    return tempDir;
  }

  public void setTempDir(String tempDir) {
    this.tempDir = tempDir;
  }


  public SnowflakeSourceData iamRole(SnowflakeNodeDataIamRole iamRole) {
    this.iamRole = iamRole;
    return this;
  }

  /**
   * Get iamRole
   * @return iamRole
   */
  @javax.annotation.Nullable
  public SnowflakeNodeDataIamRole getIamRole() {
    return iamRole;
  }

  public void setIamRole(SnowflakeNodeDataIamRole iamRole) {
    this.iamRole = iamRole;
  }


  public SnowflakeSourceData additionalOptions(Map additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  /**
   * Get additionalOptions
   * @return additionalOptions
   */
  @javax.annotation.Nullable
  public Map getAdditionalOptions() {
    return additionalOptions;
  }

  public void setAdditionalOptions(Map additionalOptions) {
    this.additionalOptions = additionalOptions;
  }


  public SnowflakeSourceData sampleQuery(String sampleQuery) {
    this.sampleQuery = sampleQuery;
    return this;
  }

  /**
   * Get sampleQuery
   * @return sampleQuery
   */
  @javax.annotation.Nullable
  public String getSampleQuery() {
    return sampleQuery;
  }

  public void setSampleQuery(String sampleQuery) {
    this.sampleQuery = sampleQuery;
  }


  public SnowflakeSourceData preAction(String preAction) {
    this.preAction = preAction;
    return this;
  }

  /**
   * Get preAction
   * @return preAction
   */
  @javax.annotation.Nullable
  public String getPreAction() {
    return preAction;
  }

  public void setPreAction(String preAction) {
    this.preAction = preAction;
  }


  public SnowflakeSourceData postAction(String postAction) {
    this.postAction = postAction;
    return this;
  }

  /**
   * Get postAction
   * @return postAction
   */
  @javax.annotation.Nullable
  public String getPostAction() {
    return postAction;
  }

  public void setPostAction(String postAction) {
    this.postAction = postAction;
  }


  public SnowflakeSourceData action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public SnowflakeSourceData upsert(Boolean upsert) {
    this.upsert = upsert;
    return this;
  }

  /**
   * Get upsert
   * @return upsert
   */
  @javax.annotation.Nullable
  public Boolean getUpsert() {
    return upsert;
  }

  public void setUpsert(Boolean upsert) {
    this.upsert = upsert;
  }


  public SnowflakeSourceData mergeAction(String mergeAction) {
    this.mergeAction = mergeAction;
    return this;
  }

  /**
   * Get mergeAction
   * @return mergeAction
   */
  @javax.annotation.Nullable
  public String getMergeAction() {
    return mergeAction;
  }

  public void setMergeAction(String mergeAction) {
    this.mergeAction = mergeAction;
  }


  public SnowflakeSourceData mergeWhenMatched(String mergeWhenMatched) {
    this.mergeWhenMatched = mergeWhenMatched;
    return this;
  }

  /**
   * Get mergeWhenMatched
   * @return mergeWhenMatched
   */
  @javax.annotation.Nullable
  public String getMergeWhenMatched() {
    return mergeWhenMatched;
  }

  public void setMergeWhenMatched(String mergeWhenMatched) {
    this.mergeWhenMatched = mergeWhenMatched;
  }


  public SnowflakeSourceData mergeWhenNotMatched(String mergeWhenNotMatched) {
    this.mergeWhenNotMatched = mergeWhenNotMatched;
    return this;
  }

  /**
   * Get mergeWhenNotMatched
   * @return mergeWhenNotMatched
   */
  @javax.annotation.Nullable
  public String getMergeWhenNotMatched() {
    return mergeWhenNotMatched;
  }

  public void setMergeWhenNotMatched(String mergeWhenNotMatched) {
    this.mergeWhenNotMatched = mergeWhenNotMatched;
  }


  public SnowflakeSourceData mergeClause(String mergeClause) {
    this.mergeClause = mergeClause;
    return this;
  }

  /**
   * Get mergeClause
   * @return mergeClause
   */
  @javax.annotation.Nullable
  public String getMergeClause() {
    return mergeClause;
  }

  public void setMergeClause(String mergeClause) {
    this.mergeClause = mergeClause;
  }


  public SnowflakeSourceData stagingTable(String stagingTable) {
    this.stagingTable = stagingTable;
    return this;
  }

  /**
   * Get stagingTable
   * @return stagingTable
   */
  @javax.annotation.Nullable
  public String getStagingTable() {
    return stagingTable;
  }

  public void setStagingTable(String stagingTable) {
    this.stagingTable = stagingTable;
  }


  public SnowflakeSourceData selectedColumns(List selectedColumns) {
    this.selectedColumns = selectedColumns;
    return this;
  }

  /**
   * Get selectedColumns
   * @return selectedColumns
   */
  @javax.annotation.Nullable
  public List getSelectedColumns() {
    return selectedColumns;
  }

  public void setSelectedColumns(List selectedColumns) {
    this.selectedColumns = selectedColumns;
  }


  public SnowflakeSourceData autoPushdown(Boolean autoPushdown) {
    this.autoPushdown = autoPushdown;
    return this;
  }

  /**
   * Get autoPushdown
   * @return autoPushdown
   */
  @javax.annotation.Nullable
  public Boolean getAutoPushdown() {
    return autoPushdown;
  }

  public void setAutoPushdown(Boolean autoPushdown) {
    this.autoPushdown = autoPushdown;
  }


  public SnowflakeSourceData tableSchema(List tableSchema) {
    this.tableSchema = tableSchema;
    return this;
  }

  /**
   * Get tableSchema
   * @return tableSchema
   */
  @javax.annotation.Nullable
  public List getTableSchema() {
    return tableSchema;
  }

  public void setTableSchema(List tableSchema) {
    this.tableSchema = tableSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnowflakeSourceData snowflakeSourceData = (SnowflakeSourceData) o;
    return Objects.equals(this.sourceType, snowflakeSourceData.sourceType) &&
        Objects.equals(this.connection, snowflakeSourceData.connection) &&
        Objects.equals(this.schema, snowflakeSourceData.schema) &&
        Objects.equals(this.table, snowflakeSourceData.table) &&
        Objects.equals(this.database, snowflakeSourceData.database) &&
        Objects.equals(this.tempDir, snowflakeSourceData.tempDir) &&
        Objects.equals(this.iamRole, snowflakeSourceData.iamRole) &&
        Objects.equals(this.additionalOptions, snowflakeSourceData.additionalOptions) &&
        Objects.equals(this.sampleQuery, snowflakeSourceData.sampleQuery) &&
        Objects.equals(this.preAction, snowflakeSourceData.preAction) &&
        Objects.equals(this.postAction, snowflakeSourceData.postAction) &&
        Objects.equals(this.action, snowflakeSourceData.action) &&
        Objects.equals(this.upsert, snowflakeSourceData.upsert) &&
        Objects.equals(this.mergeAction, snowflakeSourceData.mergeAction) &&
        Objects.equals(this.mergeWhenMatched, snowflakeSourceData.mergeWhenMatched) &&
        Objects.equals(this.mergeWhenNotMatched, snowflakeSourceData.mergeWhenNotMatched) &&
        Objects.equals(this.mergeClause, snowflakeSourceData.mergeClause) &&
        Objects.equals(this.stagingTable, snowflakeSourceData.stagingTable) &&
        Objects.equals(this.selectedColumns, snowflakeSourceData.selectedColumns) &&
        Objects.equals(this.autoPushdown, snowflakeSourceData.autoPushdown) &&
        Objects.equals(this.tableSchema, snowflakeSourceData.tableSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceType, connection, schema, table, database, tempDir, iamRole, additionalOptions, sampleQuery, preAction, postAction, action, upsert, mergeAction, mergeWhenMatched, mergeWhenNotMatched, mergeClause, stagingTable, selectedColumns, autoPushdown, tableSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnowflakeSourceData {\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    tempDir: ").append(toIndentedString(tempDir)).append("\n");
    sb.append("    iamRole: ").append(toIndentedString(iamRole)).append("\n");
    sb.append("    additionalOptions: ").append(toIndentedString(additionalOptions)).append("\n");
    sb.append("    sampleQuery: ").append(toIndentedString(sampleQuery)).append("\n");
    sb.append("    preAction: ").append(toIndentedString(preAction)).append("\n");
    sb.append("    postAction: ").append(toIndentedString(postAction)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    upsert: ").append(toIndentedString(upsert)).append("\n");
    sb.append("    mergeAction: ").append(toIndentedString(mergeAction)).append("\n");
    sb.append("    mergeWhenMatched: ").append(toIndentedString(mergeWhenMatched)).append("\n");
    sb.append("    mergeWhenNotMatched: ").append(toIndentedString(mergeWhenNotMatched)).append("\n");
    sb.append("    mergeClause: ").append(toIndentedString(mergeClause)).append("\n");
    sb.append("    stagingTable: ").append(toIndentedString(stagingTable)).append("\n");
    sb.append("    selectedColumns: ").append(toIndentedString(selectedColumns)).append("\n");
    sb.append("    autoPushdown: ").append(toIndentedString(autoPushdown)).append("\n");
    sb.append("    tableSchema: ").append(toIndentedString(tableSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceType");
    openapiFields.add("Connection");
    openapiFields.add("Schema");
    openapiFields.add("Table");
    openapiFields.add("Database");
    openapiFields.add("TempDir");
    openapiFields.add("IamRole");
    openapiFields.add("AdditionalOptions");
    openapiFields.add("SampleQuery");
    openapiFields.add("PreAction");
    openapiFields.add("PostAction");
    openapiFields.add("Action");
    openapiFields.add("Upsert");
    openapiFields.add("MergeAction");
    openapiFields.add("MergeWhenMatched");
    openapiFields.add("MergeWhenNotMatched");
    openapiFields.add("MergeClause");
    openapiFields.add("StagingTable");
    openapiFields.add("SelectedColumns");
    openapiFields.add("AutoPushdown");
    openapiFields.add("TableSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnowflakeSourceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnowflakeSourceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnowflakeSourceData is not found in the empty JSON string", SnowflakeSourceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnowflakeSourceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnowflakeSourceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceType"));
      }
      // validate the optional field `Connection`
      if (jsonObj.get("Connection") != null && !jsonObj.get("Connection").isJsonNull()) {
        SnowflakeNodeDataConnection.validateJsonElement(jsonObj.get("Connection"));
      }
      // validate the optional field `Schema`
      if (jsonObj.get("Schema") != null && !jsonObj.get("Schema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Schema"));
      }
      // validate the optional field `Table`
      if (jsonObj.get("Table") != null && !jsonObj.get("Table").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Table"));
      }
      // validate the optional field `Database`
      if (jsonObj.get("Database") != null && !jsonObj.get("Database").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Database"));
      }
      // validate the optional field `TempDir`
      if (jsonObj.get("TempDir") != null && !jsonObj.get("TempDir").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TempDir"));
      }
      // validate the optional field `IamRole`
      if (jsonObj.get("IamRole") != null && !jsonObj.get("IamRole").isJsonNull()) {
        SnowflakeNodeDataIamRole.validateJsonElement(jsonObj.get("IamRole"));
      }
      // validate the optional field `AdditionalOptions`
      if (jsonObj.get("AdditionalOptions") != null && !jsonObj.get("AdditionalOptions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AdditionalOptions"));
      }
      // validate the optional field `SampleQuery`
      if (jsonObj.get("SampleQuery") != null && !jsonObj.get("SampleQuery").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SampleQuery"));
      }
      // validate the optional field `PreAction`
      if (jsonObj.get("PreAction") != null && !jsonObj.get("PreAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreAction"));
      }
      // validate the optional field `PostAction`
      if (jsonObj.get("PostAction") != null && !jsonObj.get("PostAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostAction"));
      }
      // validate the optional field `Action`
      if (jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Action"));
      }
      // validate the optional field `Upsert`
      if (jsonObj.get("Upsert") != null && !jsonObj.get("Upsert").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Upsert"));
      }
      // validate the optional field `MergeAction`
      if (jsonObj.get("MergeAction") != null && !jsonObj.get("MergeAction").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeAction"));
      }
      // validate the optional field `MergeWhenMatched`
      if (jsonObj.get("MergeWhenMatched") != null && !jsonObj.get("MergeWhenMatched").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeWhenMatched"));
      }
      // validate the optional field `MergeWhenNotMatched`
      if (jsonObj.get("MergeWhenNotMatched") != null && !jsonObj.get("MergeWhenNotMatched").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeWhenNotMatched"));
      }
      // validate the optional field `MergeClause`
      if (jsonObj.get("MergeClause") != null && !jsonObj.get("MergeClause").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MergeClause"));
      }
      // validate the optional field `StagingTable`
      if (jsonObj.get("StagingTable") != null && !jsonObj.get("StagingTable").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StagingTable"));
      }
      // validate the optional field `SelectedColumns`
      if (jsonObj.get("SelectedColumns") != null && !jsonObj.get("SelectedColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SelectedColumns"));
      }
      // validate the optional field `AutoPushdown`
      if (jsonObj.get("AutoPushdown") != null && !jsonObj.get("AutoPushdown").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoPushdown"));
      }
      // validate the optional field `TableSchema`
      if (jsonObj.get("TableSchema") != null && !jsonObj.get("TableSchema").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TableSchema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnowflakeSourceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnowflakeSourceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnowflakeSourceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnowflakeSourceData.class));

       return (TypeAdapter<T>) new TypeAdapter<SnowflakeSourceData>() {
           @Override
           public void write(JsonWriter out, SnowflakeSourceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnowflakeSourceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnowflakeSourceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnowflakeSourceData
   * @throws IOException if the JSON string is invalid with respect to SnowflakeSourceData
   */
  public static SnowflakeSourceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnowflakeSourceData.class);
  }

  /**
   * Convert an instance of SnowflakeSourceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

