/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateMLTransformRequestParameters;
import org.openapitools.client.model.CreateMLTransformRequestTransformEncryption;
import org.openapitools.client.model.WorkerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMLTransformRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMLTransformRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INPUT_RECORD_TABLES = "InputRecordTables";
  @SerializedName(SERIALIZED_NAME_INPUT_RECORD_TABLES)
  private List inputRecordTables;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private CreateMLTransformRequestParameters parameters;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_GLUE_VERSION = "GlueVersion";
  @SerializedName(SERIALIZED_NAME_GLUE_VERSION)
  private String glueVersion;

  public static final String SERIALIZED_NAME_MAX_CAPACITY = "MaxCapacity";
  @SerializedName(SERIALIZED_NAME_MAX_CAPACITY)
  private Double maxCapacity;

  public static final String SERIALIZED_NAME_WORKER_TYPE = "WorkerType";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE)
  private WorkerType workerType;

  public static final String SERIALIZED_NAME_NUMBER_OF_WORKERS = "NumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WORKERS)
  private Integer numberOfWorkers;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "MaxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TRANSFORM_ENCRYPTION = "TransformEncryption";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_ENCRYPTION)
  private CreateMLTransformRequestTransformEncryption transformEncryption;

  public CreateMLTransformRequest() {
  }

  public CreateMLTransformRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateMLTransformRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateMLTransformRequest inputRecordTables(List inputRecordTables) {
    this.inputRecordTables = inputRecordTables;
    return this;
  }

  /**
   * Get inputRecordTables
   * @return inputRecordTables
   */
  @javax.annotation.Nonnull
  public List getInputRecordTables() {
    return inputRecordTables;
  }

  public void setInputRecordTables(List inputRecordTables) {
    this.inputRecordTables = inputRecordTables;
  }


  public CreateMLTransformRequest parameters(CreateMLTransformRequestParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nonnull
  public CreateMLTransformRequestParameters getParameters() {
    return parameters;
  }

  public void setParameters(CreateMLTransformRequestParameters parameters) {
    this.parameters = parameters;
  }


  public CreateMLTransformRequest role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public CreateMLTransformRequest glueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
    return this;
  }

  /**
   * Get glueVersion
   * @return glueVersion
   */
  @javax.annotation.Nullable
  public String getGlueVersion() {
    return glueVersion;
  }

  public void setGlueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
  }


  public CreateMLTransformRequest maxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
    return this;
  }

  /**
   * Get maxCapacity
   * @return maxCapacity
   */
  @javax.annotation.Nullable
  public Double getMaxCapacity() {
    return maxCapacity;
  }

  public void setMaxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
  }


  public CreateMLTransformRequest workerType(WorkerType workerType) {
    this.workerType = workerType;
    return this;
  }

  /**
   * Get workerType
   * @return workerType
   */
  @javax.annotation.Nullable
  public WorkerType getWorkerType() {
    return workerType;
  }

  public void setWorkerType(WorkerType workerType) {
    this.workerType = workerType;
  }


  public CreateMLTransformRequest numberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
    return this;
  }

  /**
   * Get numberOfWorkers
   * @return numberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWorkers() {
    return numberOfWorkers;
  }

  public void setNumberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
  }


  public CreateMLTransformRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public CreateMLTransformRequest maxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * Get maxRetries
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public CreateMLTransformRequest tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateMLTransformRequest transformEncryption(CreateMLTransformRequestTransformEncryption transformEncryption) {
    this.transformEncryption = transformEncryption;
    return this;
  }

  /**
   * Get transformEncryption
   * @return transformEncryption
   */
  @javax.annotation.Nullable
  public CreateMLTransformRequestTransformEncryption getTransformEncryption() {
    return transformEncryption;
  }

  public void setTransformEncryption(CreateMLTransformRequestTransformEncryption transformEncryption) {
    this.transformEncryption = transformEncryption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMLTransformRequest createMLTransformRequest = (CreateMLTransformRequest) o;
    return Objects.equals(this.name, createMLTransformRequest.name) &&
        Objects.equals(this.description, createMLTransformRequest.description) &&
        Objects.equals(this.inputRecordTables, createMLTransformRequest.inputRecordTables) &&
        Objects.equals(this.parameters, createMLTransformRequest.parameters) &&
        Objects.equals(this.role, createMLTransformRequest.role) &&
        Objects.equals(this.glueVersion, createMLTransformRequest.glueVersion) &&
        Objects.equals(this.maxCapacity, createMLTransformRequest.maxCapacity) &&
        Objects.equals(this.workerType, createMLTransformRequest.workerType) &&
        Objects.equals(this.numberOfWorkers, createMLTransformRequest.numberOfWorkers) &&
        Objects.equals(this.timeout, createMLTransformRequest.timeout) &&
        Objects.equals(this.maxRetries, createMLTransformRequest.maxRetries) &&
        Objects.equals(this.tags, createMLTransformRequest.tags) &&
        Objects.equals(this.transformEncryption, createMLTransformRequest.transformEncryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, inputRecordTables, parameters, role, glueVersion, maxCapacity, workerType, numberOfWorkers, timeout, maxRetries, tags, transformEncryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMLTransformRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inputRecordTables: ").append(toIndentedString(inputRecordTables)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    glueVersion: ").append(toIndentedString(glueVersion)).append("\n");
    sb.append("    maxCapacity: ").append(toIndentedString(maxCapacity)).append("\n");
    sb.append("    workerType: ").append(toIndentedString(workerType)).append("\n");
    sb.append("    numberOfWorkers: ").append(toIndentedString(numberOfWorkers)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    transformEncryption: ").append(toIndentedString(transformEncryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("InputRecordTables");
    openapiFields.add("Parameters");
    openapiFields.add("Role");
    openapiFields.add("GlueVersion");
    openapiFields.add("MaxCapacity");
    openapiFields.add("WorkerType");
    openapiFields.add("NumberOfWorkers");
    openapiFields.add("Timeout");
    openapiFields.add("MaxRetries");
    openapiFields.add("Tags");
    openapiFields.add("TransformEncryption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("InputRecordTables");
    openapiRequiredFields.add("Parameters");
    openapiRequiredFields.add("Role");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMLTransformRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMLTransformRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMLTransformRequest is not found in the empty JSON string", CreateMLTransformRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMLTransformRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMLTransformRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMLTransformRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `InputRecordTables`
      List.validateJsonElement(jsonObj.get("InputRecordTables"));
      // validate the required field `Parameters`
      CreateMLTransformRequestParameters.validateJsonElement(jsonObj.get("Parameters"));
      // validate the required field `Role`
      String.validateJsonElement(jsonObj.get("Role"));
      // validate the optional field `GlueVersion`
      if (jsonObj.get("GlueVersion") != null && !jsonObj.get("GlueVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlueVersion"));
      }
      // validate the optional field `MaxCapacity`
      if (jsonObj.get("MaxCapacity") != null && !jsonObj.get("MaxCapacity").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MaxCapacity"));
      }
      // validate the optional field `WorkerType`
      if (jsonObj.get("WorkerType") != null && !jsonObj.get("WorkerType").isJsonNull()) {
        WorkerType.validateJsonElement(jsonObj.get("WorkerType"));
      }
      // validate the optional field `NumberOfWorkers`
      if (jsonObj.get("NumberOfWorkers") != null && !jsonObj.get("NumberOfWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfWorkers"));
      }
      // validate the optional field `Timeout`
      if (jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Timeout"));
      }
      // validate the optional field `MaxRetries`
      if (jsonObj.get("MaxRetries") != null && !jsonObj.get("MaxRetries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRetries"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `TransformEncryption`
      if (jsonObj.get("TransformEncryption") != null && !jsonObj.get("TransformEncryption").isJsonNull()) {
        CreateMLTransformRequestTransformEncryption.validateJsonElement(jsonObj.get("TransformEncryption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMLTransformRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMLTransformRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMLTransformRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMLTransformRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMLTransformRequest>() {
           @Override
           public void write(JsonWriter out, CreateMLTransformRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMLTransformRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMLTransformRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMLTransformRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMLTransformRequest
   */
  public static CreateMLTransformRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMLTransformRequest.class);
  }

  /**
   * Convert an instance of CreateMLTransformRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

