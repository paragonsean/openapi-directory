/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SessionCommand;
import org.openapitools.client.model.SessionConnections;
import org.openapitools.client.model.SessionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSessionResponseSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSessionResponseSession {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_ON = "CreatedOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SessionStatus status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_COMMAND = "Command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private SessionCommand command;

  public static final String SERIALIZED_NAME_DEFAULT_ARGUMENTS = "DefaultArguments";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ARGUMENTS)
  private Map defaultArguments;

  public static final String SERIALIZED_NAME_CONNECTIONS = "Connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private SessionConnections connections;

  public static final String SERIALIZED_NAME_PROGRESS = "Progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;

  public static final String SERIALIZED_NAME_MAX_CAPACITY = "MaxCapacity";
  @SerializedName(SERIALIZED_NAME_MAX_CAPACITY)
  private Double maxCapacity;

  public static final String SERIALIZED_NAME_SECURITY_CONFIGURATION = "SecurityConfiguration";
  @SerializedName(SERIALIZED_NAME_SECURITY_CONFIGURATION)
  private String securityConfiguration;

  public static final String SERIALIZED_NAME_GLUE_VERSION = "GlueVersion";
  @SerializedName(SERIALIZED_NAME_GLUE_VERSION)
  private String glueVersion;

  public GetSessionResponseSession() {
  }

  public GetSessionResponseSession id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetSessionResponseSession createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * Get createdOn
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public GetSessionResponseSession status(SessionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SessionStatus getStatus() {
    return status;
  }

  public void setStatus(SessionStatus status) {
    this.status = status;
  }


  public GetSessionResponseSession errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public GetSessionResponseSession description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetSessionResponseSession role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public GetSessionResponseSession command(SessionCommand command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nullable
  public SessionCommand getCommand() {
    return command;
  }

  public void setCommand(SessionCommand command) {
    this.command = command;
  }


  public GetSessionResponseSession defaultArguments(Map defaultArguments) {
    this.defaultArguments = defaultArguments;
    return this;
  }

  /**
   * Get defaultArguments
   * @return defaultArguments
   */
  @javax.annotation.Nullable
  public Map getDefaultArguments() {
    return defaultArguments;
  }

  public void setDefaultArguments(Map defaultArguments) {
    this.defaultArguments = defaultArguments;
  }


  public GetSessionResponseSession connections(SessionConnections connections) {
    this.connections = connections;
    return this;
  }

  /**
   * Get connections
   * @return connections
   */
  @javax.annotation.Nullable
  public SessionConnections getConnections() {
    return connections;
  }

  public void setConnections(SessionConnections connections) {
    this.connections = connections;
  }


  public GetSessionResponseSession progress(Double progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }


  public GetSessionResponseSession maxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
    return this;
  }

  /**
   * Get maxCapacity
   * @return maxCapacity
   */
  @javax.annotation.Nullable
  public Double getMaxCapacity() {
    return maxCapacity;
  }

  public void setMaxCapacity(Double maxCapacity) {
    this.maxCapacity = maxCapacity;
  }


  public GetSessionResponseSession securityConfiguration(String securityConfiguration) {
    this.securityConfiguration = securityConfiguration;
    return this;
  }

  /**
   * Get securityConfiguration
   * @return securityConfiguration
   */
  @javax.annotation.Nullable
  public String getSecurityConfiguration() {
    return securityConfiguration;
  }

  public void setSecurityConfiguration(String securityConfiguration) {
    this.securityConfiguration = securityConfiguration;
  }


  public GetSessionResponseSession glueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
    return this;
  }

  /**
   * Get glueVersion
   * @return glueVersion
   */
  @javax.annotation.Nullable
  public String getGlueVersion() {
    return glueVersion;
  }

  public void setGlueVersion(String glueVersion) {
    this.glueVersion = glueVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSessionResponseSession getSessionResponseSession = (GetSessionResponseSession) o;
    return Objects.equals(this.id, getSessionResponseSession.id) &&
        Objects.equals(this.createdOn, getSessionResponseSession.createdOn) &&
        Objects.equals(this.status, getSessionResponseSession.status) &&
        Objects.equals(this.errorMessage, getSessionResponseSession.errorMessage) &&
        Objects.equals(this.description, getSessionResponseSession.description) &&
        Objects.equals(this.role, getSessionResponseSession.role) &&
        Objects.equals(this.command, getSessionResponseSession.command) &&
        Objects.equals(this.defaultArguments, getSessionResponseSession.defaultArguments) &&
        Objects.equals(this.connections, getSessionResponseSession.connections) &&
        Objects.equals(this.progress, getSessionResponseSession.progress) &&
        Objects.equals(this.maxCapacity, getSessionResponseSession.maxCapacity) &&
        Objects.equals(this.securityConfiguration, getSessionResponseSession.securityConfiguration) &&
        Objects.equals(this.glueVersion, getSessionResponseSession.glueVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdOn, status, errorMessage, description, role, command, defaultArguments, connections, progress, maxCapacity, securityConfiguration, glueVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSessionResponseSession {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    defaultArguments: ").append(toIndentedString(defaultArguments)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    maxCapacity: ").append(toIndentedString(maxCapacity)).append("\n");
    sb.append("    securityConfiguration: ").append(toIndentedString(securityConfiguration)).append("\n");
    sb.append("    glueVersion: ").append(toIndentedString(glueVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("CreatedOn");
    openapiFields.add("Status");
    openapiFields.add("ErrorMessage");
    openapiFields.add("Description");
    openapiFields.add("Role");
    openapiFields.add("Command");
    openapiFields.add("DefaultArguments");
    openapiFields.add("Connections");
    openapiFields.add("Progress");
    openapiFields.add("MaxCapacity");
    openapiFields.add("SecurityConfiguration");
    openapiFields.add("GlueVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSessionResponseSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSessionResponseSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSessionResponseSession is not found in the empty JSON string", GetSessionResponseSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSessionResponseSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSessionResponseSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `CreatedOn`
      if (jsonObj.get("CreatedOn") != null && !jsonObj.get("CreatedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedOn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SessionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Role`
      if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Role"));
      }
      // validate the optional field `Command`
      if (jsonObj.get("Command") != null && !jsonObj.get("Command").isJsonNull()) {
        SessionCommand.validateJsonElement(jsonObj.get("Command"));
      }
      // validate the optional field `DefaultArguments`
      if (jsonObj.get("DefaultArguments") != null && !jsonObj.get("DefaultArguments").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("DefaultArguments"));
      }
      // validate the optional field `Connections`
      if (jsonObj.get("Connections") != null && !jsonObj.get("Connections").isJsonNull()) {
        SessionConnections.validateJsonElement(jsonObj.get("Connections"));
      }
      // validate the optional field `Progress`
      if (jsonObj.get("Progress") != null && !jsonObj.get("Progress").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Progress"));
      }
      // validate the optional field `MaxCapacity`
      if (jsonObj.get("MaxCapacity") != null && !jsonObj.get("MaxCapacity").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MaxCapacity"));
      }
      // validate the optional field `SecurityConfiguration`
      if (jsonObj.get("SecurityConfiguration") != null && !jsonObj.get("SecurityConfiguration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityConfiguration"));
      }
      // validate the optional field `GlueVersion`
      if (jsonObj.get("GlueVersion") != null && !jsonObj.get("GlueVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlueVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSessionResponseSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSessionResponseSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSessionResponseSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSessionResponseSession.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSessionResponseSession>() {
           @Override
           public void write(JsonWriter out, GetSessionResponseSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSessionResponseSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSessionResponseSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSessionResponseSession
   * @throws IOException if the JSON string is invalid with respect to GetSessionResponseSession
   */
  public static GetSessionResponseSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSessionResponseSession.class);
  }

  /**
   * Convert an instance of GetSessionResponseSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

