/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDataQualityResultResponseDataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a data quality result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataQualityResult {
  public static final String SERIALIZED_NAME_RESULT_ID = "ResultId";
  @SerializedName(SERIALIZED_NAME_RESULT_ID)
  private String resultId;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private GetDataQualityResultResponseDataSource dataSource;

  public static final String SERIALIZED_NAME_RULESET_NAME = "RulesetName";
  @SerializedName(SERIALIZED_NAME_RULESET_NAME)
  private String rulesetName;

  public static final String SERIALIZED_NAME_EVALUATION_CONTEXT = "EvaluationContext";
  @SerializedName(SERIALIZED_NAME_EVALUATION_CONTEXT)
  private String evaluationContext;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "CompletedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_RUN_ID = "JobRunId";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_ID)
  private String jobRunId;

  public static final String SERIALIZED_NAME_RULESET_EVALUATION_RUN_ID = "RulesetEvaluationRunId";
  @SerializedName(SERIALIZED_NAME_RULESET_EVALUATION_RUN_ID)
  private String rulesetEvaluationRunId;

  public static final String SERIALIZED_NAME_RULE_RESULTS = "RuleResults";
  @SerializedName(SERIALIZED_NAME_RULE_RESULTS)
  private List ruleResults;

  public DataQualityResult() {
  }

  public DataQualityResult resultId(String resultId) {
    this.resultId = resultId;
    return this;
  }

  /**
   * Get resultId
   * @return resultId
   */
  @javax.annotation.Nullable
  public String getResultId() {
    return resultId;
  }

  public void setResultId(String resultId) {
    this.resultId = resultId;
  }


  public DataQualityResult score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public DataQualityResult dataSource(GetDataQualityResultResponseDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public GetDataQualityResultResponseDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(GetDataQualityResultResponseDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public DataQualityResult rulesetName(String rulesetName) {
    this.rulesetName = rulesetName;
    return this;
  }

  /**
   * Get rulesetName
   * @return rulesetName
   */
  @javax.annotation.Nullable
  public String getRulesetName() {
    return rulesetName;
  }

  public void setRulesetName(String rulesetName) {
    this.rulesetName = rulesetName;
  }


  public DataQualityResult evaluationContext(String evaluationContext) {
    this.evaluationContext = evaluationContext;
    return this;
  }

  /**
   * Get evaluationContext
   * @return evaluationContext
   */
  @javax.annotation.Nullable
  public String getEvaluationContext() {
    return evaluationContext;
  }

  public void setEvaluationContext(String evaluationContext) {
    this.evaluationContext = evaluationContext;
  }


  public DataQualityResult startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public DataQualityResult completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public DataQualityResult jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public DataQualityResult jobRunId(String jobRunId) {
    this.jobRunId = jobRunId;
    return this;
  }

  /**
   * Get jobRunId
   * @return jobRunId
   */
  @javax.annotation.Nullable
  public String getJobRunId() {
    return jobRunId;
  }

  public void setJobRunId(String jobRunId) {
    this.jobRunId = jobRunId;
  }


  public DataQualityResult rulesetEvaluationRunId(String rulesetEvaluationRunId) {
    this.rulesetEvaluationRunId = rulesetEvaluationRunId;
    return this;
  }

  /**
   * Get rulesetEvaluationRunId
   * @return rulesetEvaluationRunId
   */
  @javax.annotation.Nullable
  public String getRulesetEvaluationRunId() {
    return rulesetEvaluationRunId;
  }

  public void setRulesetEvaluationRunId(String rulesetEvaluationRunId) {
    this.rulesetEvaluationRunId = rulesetEvaluationRunId;
  }


  public DataQualityResult ruleResults(List ruleResults) {
    this.ruleResults = ruleResults;
    return this;
  }

  /**
   * Get ruleResults
   * @return ruleResults
   */
  @javax.annotation.Nullable
  public List getRuleResults() {
    return ruleResults;
  }

  public void setRuleResults(List ruleResults) {
    this.ruleResults = ruleResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataQualityResult dataQualityResult = (DataQualityResult) o;
    return Objects.equals(this.resultId, dataQualityResult.resultId) &&
        Objects.equals(this.score, dataQualityResult.score) &&
        Objects.equals(this.dataSource, dataQualityResult.dataSource) &&
        Objects.equals(this.rulesetName, dataQualityResult.rulesetName) &&
        Objects.equals(this.evaluationContext, dataQualityResult.evaluationContext) &&
        Objects.equals(this.startedOn, dataQualityResult.startedOn) &&
        Objects.equals(this.completedOn, dataQualityResult.completedOn) &&
        Objects.equals(this.jobName, dataQualityResult.jobName) &&
        Objects.equals(this.jobRunId, dataQualityResult.jobRunId) &&
        Objects.equals(this.rulesetEvaluationRunId, dataQualityResult.rulesetEvaluationRunId) &&
        Objects.equals(this.ruleResults, dataQualityResult.ruleResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultId, score, dataSource, rulesetName, evaluationContext, startedOn, completedOn, jobName, jobRunId, rulesetEvaluationRunId, ruleResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataQualityResult {\n");
    sb.append("    resultId: ").append(toIndentedString(resultId)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    rulesetName: ").append(toIndentedString(rulesetName)).append("\n");
    sb.append("    evaluationContext: ").append(toIndentedString(evaluationContext)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobRunId: ").append(toIndentedString(jobRunId)).append("\n");
    sb.append("    rulesetEvaluationRunId: ").append(toIndentedString(rulesetEvaluationRunId)).append("\n");
    sb.append("    ruleResults: ").append(toIndentedString(ruleResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResultId");
    openapiFields.add("Score");
    openapiFields.add("DataSource");
    openapiFields.add("RulesetName");
    openapiFields.add("EvaluationContext");
    openapiFields.add("StartedOn");
    openapiFields.add("CompletedOn");
    openapiFields.add("JobName");
    openapiFields.add("JobRunId");
    openapiFields.add("RulesetEvaluationRunId");
    openapiFields.add("RuleResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataQualityResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataQualityResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataQualityResult is not found in the empty JSON string", DataQualityResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataQualityResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataQualityResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResultId`
      if (jsonObj.get("ResultId") != null && !jsonObj.get("ResultId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResultId"));
      }
      // validate the optional field `Score`
      if (jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Score"));
      }
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        GetDataQualityResultResponseDataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
      // validate the optional field `RulesetName`
      if (jsonObj.get("RulesetName") != null && !jsonObj.get("RulesetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RulesetName"));
      }
      // validate the optional field `EvaluationContext`
      if (jsonObj.get("EvaluationContext") != null && !jsonObj.get("EvaluationContext").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EvaluationContext"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `CompletedOn`
      if (jsonObj.get("CompletedOn") != null && !jsonObj.get("CompletedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedOn"));
      }
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobRunId`
      if (jsonObj.get("JobRunId") != null && !jsonObj.get("JobRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobRunId"));
      }
      // validate the optional field `RulesetEvaluationRunId`
      if (jsonObj.get("RulesetEvaluationRunId") != null && !jsonObj.get("RulesetEvaluationRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RulesetEvaluationRunId"));
      }
      // validate the optional field `RuleResults`
      if (jsonObj.get("RuleResults") != null && !jsonObj.get("RuleResults").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RuleResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataQualityResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataQualityResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataQualityResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataQualityResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DataQualityResult>() {
           @Override
           public void write(JsonWriter out, DataQualityResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataQualityResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataQualityResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataQualityResult
   * @throws IOException if the JSON string is invalid with respect to DataQualityResult
   */
  public static DataQualityResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataQualityResult.class);
  }

  /**
   * Convert an instance of DataQualityResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

