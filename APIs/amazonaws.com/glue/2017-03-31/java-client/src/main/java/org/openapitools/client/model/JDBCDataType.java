/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets JDBCDataType
 */
@JsonAdapter(JDBCDataType.Adapter.class)
public enum JDBCDataType {
  
  ARRAY("ARRAY"),
  
  BIGINT("BIGINT"),
  
  BINARY("BINARY"),
  
  BIT("BIT"),
  
  BLOB("BLOB"),
  
  BOOLEAN("BOOLEAN"),
  
  CHAR("CHAR"),
  
  CLOB("CLOB"),
  
  DATALINK("DATALINK"),
  
  DATE("DATE"),
  
  DECIMAL("DECIMAL"),
  
  DISTINCT("DISTINCT"),
  
  DOUBLE("DOUBLE"),
  
  FLOAT("FLOAT"),
  
  INTEGER("INTEGER"),
  
  JAVA_OBJECT("JAVA_OBJECT"),
  
  LONGNVARCHAR("LONGNVARCHAR"),
  
  LONGVARBINARY("LONGVARBINARY"),
  
  LONGVARCHAR("LONGVARCHAR"),
  
  NCHAR("NCHAR"),
  
  NCLOB("NCLOB"),
  
  NULL("NULL"),
  
  NUMERIC("NUMERIC"),
  
  NVARCHAR("NVARCHAR"),
  
  OTHER("OTHER"),
  
  REAL("REAL"),
  
  REF("REF"),
  
  REF_CURSOR("REF_CURSOR"),
  
  ROWID("ROWID"),
  
  SMALLINT("SMALLINT"),
  
  SQLXML("SQLXML"),
  
  STRUCT("STRUCT"),
  
  TIME("TIME"),
  
  TIME_WITH_TIMEZONE("TIME_WITH_TIMEZONE"),
  
  TIMESTAMP("TIMESTAMP"),
  
  TIMESTAMP_WITH_TIMEZONE("TIMESTAMP_WITH_TIMEZONE"),
  
  TINYINT("TINYINT"),
  
  VARBINARY("VARBINARY"),
  
  VARCHAR("VARCHAR");

  private String value;

  JDBCDataType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static JDBCDataType fromValue(String value) {
    for (JDBCDataType b : JDBCDataType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<JDBCDataType> {
    @Override
    public void write(final JsonWriter jsonWriter, final JDBCDataType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public JDBCDataType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return JDBCDataType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    JDBCDataType.fromValue(value);
  }
}

