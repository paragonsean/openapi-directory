/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DataQualityRulesetListDetailsTargetTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a data quality ruleset returned by &lt;code&gt;GetDataQualityRuleset&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataQualityRulesetListDetails {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED_ON = "CreatedOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "LastModifiedOn";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private OffsetDateTime lastModifiedOn;

  public static final String SERIALIZED_NAME_TARGET_TABLE = "TargetTable";
  @SerializedName(SERIALIZED_NAME_TARGET_TABLE)
  private DataQualityRulesetListDetailsTargetTable targetTable;

  public static final String SERIALIZED_NAME_RECOMMENDATION_RUN_ID = "RecommendationRunId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_RUN_ID)
  private String recommendationRunId;

  public static final String SERIALIZED_NAME_RULE_COUNT = "RuleCount";
  @SerializedName(SERIALIZED_NAME_RULE_COUNT)
  private Integer ruleCount;

  public DataQualityRulesetListDetails() {
  }

  public DataQualityRulesetListDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataQualityRulesetListDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DataQualityRulesetListDetails createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * Get createdOn
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public DataQualityRulesetListDetails lastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

  /**
   * Get lastModifiedOn
   * @return lastModifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedOn() {
    return lastModifiedOn;
  }

  public void setLastModifiedOn(OffsetDateTime lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public DataQualityRulesetListDetails targetTable(DataQualityRulesetListDetailsTargetTable targetTable) {
    this.targetTable = targetTable;
    return this;
  }

  /**
   * Get targetTable
   * @return targetTable
   */
  @javax.annotation.Nullable
  public DataQualityRulesetListDetailsTargetTable getTargetTable() {
    return targetTable;
  }

  public void setTargetTable(DataQualityRulesetListDetailsTargetTable targetTable) {
    this.targetTable = targetTable;
  }


  public DataQualityRulesetListDetails recommendationRunId(String recommendationRunId) {
    this.recommendationRunId = recommendationRunId;
    return this;
  }

  /**
   * Get recommendationRunId
   * @return recommendationRunId
   */
  @javax.annotation.Nullable
  public String getRecommendationRunId() {
    return recommendationRunId;
  }

  public void setRecommendationRunId(String recommendationRunId) {
    this.recommendationRunId = recommendationRunId;
  }


  public DataQualityRulesetListDetails ruleCount(Integer ruleCount) {
    this.ruleCount = ruleCount;
    return this;
  }

  /**
   * Get ruleCount
   * @return ruleCount
   */
  @javax.annotation.Nullable
  public Integer getRuleCount() {
    return ruleCount;
  }

  public void setRuleCount(Integer ruleCount) {
    this.ruleCount = ruleCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataQualityRulesetListDetails dataQualityRulesetListDetails = (DataQualityRulesetListDetails) o;
    return Objects.equals(this.name, dataQualityRulesetListDetails.name) &&
        Objects.equals(this.description, dataQualityRulesetListDetails.description) &&
        Objects.equals(this.createdOn, dataQualityRulesetListDetails.createdOn) &&
        Objects.equals(this.lastModifiedOn, dataQualityRulesetListDetails.lastModifiedOn) &&
        Objects.equals(this.targetTable, dataQualityRulesetListDetails.targetTable) &&
        Objects.equals(this.recommendationRunId, dataQualityRulesetListDetails.recommendationRunId) &&
        Objects.equals(this.ruleCount, dataQualityRulesetListDetails.ruleCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, createdOn, lastModifiedOn, targetTable, recommendationRunId, ruleCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataQualityRulesetListDetails {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    targetTable: ").append(toIndentedString(targetTable)).append("\n");
    sb.append("    recommendationRunId: ").append(toIndentedString(recommendationRunId)).append("\n");
    sb.append("    ruleCount: ").append(toIndentedString(ruleCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("CreatedOn");
    openapiFields.add("LastModifiedOn");
    openapiFields.add("TargetTable");
    openapiFields.add("RecommendationRunId");
    openapiFields.add("RuleCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataQualityRulesetListDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataQualityRulesetListDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataQualityRulesetListDetails is not found in the empty JSON string", DataQualityRulesetListDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataQualityRulesetListDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataQualityRulesetListDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `CreatedOn`
      if (jsonObj.get("CreatedOn") != null && !jsonObj.get("CreatedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedOn"));
      }
      // validate the optional field `LastModifiedOn`
      if (jsonObj.get("LastModifiedOn") != null && !jsonObj.get("LastModifiedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedOn"));
      }
      // validate the optional field `TargetTable`
      if (jsonObj.get("TargetTable") != null && !jsonObj.get("TargetTable").isJsonNull()) {
        DataQualityRulesetListDetailsTargetTable.validateJsonElement(jsonObj.get("TargetTable"));
      }
      // validate the optional field `RecommendationRunId`
      if (jsonObj.get("RecommendationRunId") != null && !jsonObj.get("RecommendationRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationRunId"));
      }
      // validate the optional field `RuleCount`
      if (jsonObj.get("RuleCount") != null && !jsonObj.get("RuleCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RuleCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataQualityRulesetListDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataQualityRulesetListDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataQualityRulesetListDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataQualityRulesetListDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DataQualityRulesetListDetails>() {
           @Override
           public void write(JsonWriter out, DataQualityRulesetListDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataQualityRulesetListDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataQualityRulesetListDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataQualityRulesetListDetails
   * @throws IOException if the JSON string is invalid with respect to DataQualityRulesetListDetails
   */
  public static DataQualityRulesetListDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataQualityRulesetListDetails.class);
  }

  /**
   * Convert an instance of DataQualityRulesetListDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

