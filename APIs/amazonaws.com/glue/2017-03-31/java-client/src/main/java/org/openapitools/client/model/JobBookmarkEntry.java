/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a point that a job can resume processing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobBookmarkEntry {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_RUN = "Run";
  @SerializedName(SERIALIZED_NAME_RUN)
  private Integer run;

  public static final String SERIALIZED_NAME_ATTEMPT = "Attempt";
  @SerializedName(SERIALIZED_NAME_ATTEMPT)
  private Integer attempt;

  public static final String SERIALIZED_NAME_PREVIOUS_RUN_ID = "PreviousRunId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RUN_ID)
  private String previousRunId;

  public static final String SERIALIZED_NAME_RUN_ID = "RunId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_JOB_BOOKMARK = "JobBookmark";
  @SerializedName(SERIALIZED_NAME_JOB_BOOKMARK)
  private String jobBookmark;

  public JobBookmarkEntry() {
  }

  public JobBookmarkEntry jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public JobBookmarkEntry version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public JobBookmarkEntry run(Integer run) {
    this.run = run;
    return this;
  }

  /**
   * Get run
   * @return run
   */
  @javax.annotation.Nullable
  public Integer getRun() {
    return run;
  }

  public void setRun(Integer run) {
    this.run = run;
  }


  public JobBookmarkEntry attempt(Integer attempt) {
    this.attempt = attempt;
    return this;
  }

  /**
   * Get attempt
   * @return attempt
   */
  @javax.annotation.Nullable
  public Integer getAttempt() {
    return attempt;
  }

  public void setAttempt(Integer attempt) {
    this.attempt = attempt;
  }


  public JobBookmarkEntry previousRunId(String previousRunId) {
    this.previousRunId = previousRunId;
    return this;
  }

  /**
   * Get previousRunId
   * @return previousRunId
   */
  @javax.annotation.Nullable
  public String getPreviousRunId() {
    return previousRunId;
  }

  public void setPreviousRunId(String previousRunId) {
    this.previousRunId = previousRunId;
  }


  public JobBookmarkEntry runId(String runId) {
    this.runId = runId;
    return this;
  }

  /**
   * Get runId
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public JobBookmarkEntry jobBookmark(String jobBookmark) {
    this.jobBookmark = jobBookmark;
    return this;
  }

  /**
   * Get jobBookmark
   * @return jobBookmark
   */
  @javax.annotation.Nullable
  public String getJobBookmark() {
    return jobBookmark;
  }

  public void setJobBookmark(String jobBookmark) {
    this.jobBookmark = jobBookmark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobBookmarkEntry jobBookmarkEntry = (JobBookmarkEntry) o;
    return Objects.equals(this.jobName, jobBookmarkEntry.jobName) &&
        Objects.equals(this.version, jobBookmarkEntry.version) &&
        Objects.equals(this.run, jobBookmarkEntry.run) &&
        Objects.equals(this.attempt, jobBookmarkEntry.attempt) &&
        Objects.equals(this.previousRunId, jobBookmarkEntry.previousRunId) &&
        Objects.equals(this.runId, jobBookmarkEntry.runId) &&
        Objects.equals(this.jobBookmark, jobBookmarkEntry.jobBookmark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, version, run, attempt, previousRunId, runId, jobBookmark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobBookmarkEntry {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    run: ").append(toIndentedString(run)).append("\n");
    sb.append("    attempt: ").append(toIndentedString(attempt)).append("\n");
    sb.append("    previousRunId: ").append(toIndentedString(previousRunId)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    jobBookmark: ").append(toIndentedString(jobBookmark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("Version");
    openapiFields.add("Run");
    openapiFields.add("Attempt");
    openapiFields.add("PreviousRunId");
    openapiFields.add("RunId");
    openapiFields.add("JobBookmark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobBookmarkEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobBookmarkEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobBookmarkEntry is not found in the empty JSON string", JobBookmarkEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobBookmarkEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobBookmarkEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Version"));
      }
      // validate the optional field `Run`
      if (jsonObj.get("Run") != null && !jsonObj.get("Run").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Run"));
      }
      // validate the optional field `Attempt`
      if (jsonObj.get("Attempt") != null && !jsonObj.get("Attempt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Attempt"));
      }
      // validate the optional field `PreviousRunId`
      if (jsonObj.get("PreviousRunId") != null && !jsonObj.get("PreviousRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreviousRunId"));
      }
      // validate the optional field `RunId`
      if (jsonObj.get("RunId") != null && !jsonObj.get("RunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RunId"));
      }
      // validate the optional field `JobBookmark`
      if (jsonObj.get("JobBookmark") != null && !jsonObj.get("JobBookmark").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobBookmark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobBookmarkEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobBookmarkEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobBookmarkEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobBookmarkEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<JobBookmarkEntry>() {
           @Override
           public void write(JsonWriter out, JobBookmarkEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobBookmarkEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobBookmarkEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobBookmarkEntry
   * @throws IOException if the JSON string is invalid with respect to JobBookmarkEntry
   */
  public static JobBookmarkEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobBookmarkEntry.class);
  }

  /**
   * Convert an instance of JobBookmarkEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

