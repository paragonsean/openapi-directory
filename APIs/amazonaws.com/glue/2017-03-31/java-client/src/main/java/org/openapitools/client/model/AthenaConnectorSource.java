/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a connector to an Amazon Athena data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AthenaConnectorSource {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONNECTION_NAME = "ConnectionName";
  @SerializedName(SERIALIZED_NAME_CONNECTION_NAME)
  private String connectionName;

  public static final String SERIALIZED_NAME_CONNECTOR_NAME = "ConnectorName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_NAME)
  private String connectorName;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "ConnectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private String connectionType;

  public static final String SERIALIZED_NAME_CONNECTION_TABLE = "ConnectionTable";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TABLE)
  private String connectionTable;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "SchemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_OUTPUT_SCHEMAS = "OutputSchemas";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCHEMAS)
  private List outputSchemas;

  public AthenaConnectorSource() {
  }

  public AthenaConnectorSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AthenaConnectorSource connectionName(String connectionName) {
    this.connectionName = connectionName;
    return this;
  }

  /**
   * Get connectionName
   * @return connectionName
   */
  @javax.annotation.Nonnull
  public String getConnectionName() {
    return connectionName;
  }

  public void setConnectionName(String connectionName) {
    this.connectionName = connectionName;
  }


  public AthenaConnectorSource connectorName(String connectorName) {
    this.connectorName = connectorName;
    return this;
  }

  /**
   * Get connectorName
   * @return connectorName
   */
  @javax.annotation.Nonnull
  public String getConnectorName() {
    return connectorName;
  }

  public void setConnectorName(String connectorName) {
    this.connectorName = connectorName;
  }


  public AthenaConnectorSource connectionType(String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nonnull
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }


  public AthenaConnectorSource connectionTable(String connectionTable) {
    this.connectionTable = connectionTable;
    return this;
  }

  /**
   * Get connectionTable
   * @return connectionTable
   */
  @javax.annotation.Nullable
  public String getConnectionTable() {
    return connectionTable;
  }

  public void setConnectionTable(String connectionTable) {
    this.connectionTable = connectionTable;
  }


  public AthenaConnectorSource schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Get schemaName
   * @return schemaName
   */
  @javax.annotation.Nonnull
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public AthenaConnectorSource outputSchemas(List outputSchemas) {
    this.outputSchemas = outputSchemas;
    return this;
  }

  /**
   * Get outputSchemas
   * @return outputSchemas
   */
  @javax.annotation.Nullable
  public List getOutputSchemas() {
    return outputSchemas;
  }

  public void setOutputSchemas(List outputSchemas) {
    this.outputSchemas = outputSchemas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AthenaConnectorSource athenaConnectorSource = (AthenaConnectorSource) o;
    return Objects.equals(this.name, athenaConnectorSource.name) &&
        Objects.equals(this.connectionName, athenaConnectorSource.connectionName) &&
        Objects.equals(this.connectorName, athenaConnectorSource.connectorName) &&
        Objects.equals(this.connectionType, athenaConnectorSource.connectionType) &&
        Objects.equals(this.connectionTable, athenaConnectorSource.connectionTable) &&
        Objects.equals(this.schemaName, athenaConnectorSource.schemaName) &&
        Objects.equals(this.outputSchemas, athenaConnectorSource.outputSchemas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, connectionName, connectorName, connectionType, connectionTable, schemaName, outputSchemas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AthenaConnectorSource {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    connectionName: ").append(toIndentedString(connectionName)).append("\n");
    sb.append("    connectorName: ").append(toIndentedString(connectorName)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    connectionTable: ").append(toIndentedString(connectionTable)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    outputSchemas: ").append(toIndentedString(outputSchemas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("ConnectionName");
    openapiFields.add("ConnectorName");
    openapiFields.add("ConnectionType");
    openapiFields.add("ConnectionTable");
    openapiFields.add("SchemaName");
    openapiFields.add("OutputSchemas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("ConnectionName");
    openapiRequiredFields.add("ConnectorName");
    openapiRequiredFields.add("ConnectionType");
    openapiRequiredFields.add("SchemaName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AthenaConnectorSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AthenaConnectorSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AthenaConnectorSource is not found in the empty JSON string", AthenaConnectorSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AthenaConnectorSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AthenaConnectorSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AthenaConnectorSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `ConnectionName`
      String.validateJsonElement(jsonObj.get("ConnectionName"));
      // validate the required field `ConnectorName`
      String.validateJsonElement(jsonObj.get("ConnectorName"));
      // validate the required field `ConnectionType`
      String.validateJsonElement(jsonObj.get("ConnectionType"));
      // validate the optional field `ConnectionTable`
      if (jsonObj.get("ConnectionTable") != null && !jsonObj.get("ConnectionTable").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionTable"));
      }
      // validate the required field `SchemaName`
      String.validateJsonElement(jsonObj.get("SchemaName"));
      // validate the optional field `OutputSchemas`
      if (jsonObj.get("OutputSchemas") != null && !jsonObj.get("OutputSchemas").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputSchemas"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AthenaConnectorSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AthenaConnectorSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AthenaConnectorSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AthenaConnectorSource.class));

       return (TypeAdapter<T>) new TypeAdapter<AthenaConnectorSource>() {
           @Override
           public void write(JsonWriter out, AthenaConnectorSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AthenaConnectorSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AthenaConnectorSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AthenaConnectorSource
   * @throws IOException if the JSON string is invalid with respect to AthenaConnectorSource
   */
  public static AthenaConnectorSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AthenaConnectorSource.class);
  }

  /**
   * Convert an instance of AthenaConnectorSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

