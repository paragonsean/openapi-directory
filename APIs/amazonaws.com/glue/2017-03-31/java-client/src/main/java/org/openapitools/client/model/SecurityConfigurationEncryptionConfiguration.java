/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EncryptionConfigurationCloudWatchEncryption;
import org.openapitools.client.model.EncryptionConfigurationJobBookmarksEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecurityConfigurationEncryptionConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityConfigurationEncryptionConfiguration {
  public static final String SERIALIZED_NAME_S3_ENCRYPTION = "S3Encryption";
  @SerializedName(SERIALIZED_NAME_S3_ENCRYPTION)
  private List s3Encryption;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_ENCRYPTION = "CloudWatchEncryption";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_ENCRYPTION)
  private EncryptionConfigurationCloudWatchEncryption cloudWatchEncryption;

  public static final String SERIALIZED_NAME_JOB_BOOKMARKS_ENCRYPTION = "JobBookmarksEncryption";
  @SerializedName(SERIALIZED_NAME_JOB_BOOKMARKS_ENCRYPTION)
  private EncryptionConfigurationJobBookmarksEncryption jobBookmarksEncryption;

  public SecurityConfigurationEncryptionConfiguration() {
  }

  public SecurityConfigurationEncryptionConfiguration s3Encryption(List s3Encryption) {
    this.s3Encryption = s3Encryption;
    return this;
  }

  /**
   * Get s3Encryption
   * @return s3Encryption
   */
  @javax.annotation.Nullable
  public List getS3Encryption() {
    return s3Encryption;
  }

  public void setS3Encryption(List s3Encryption) {
    this.s3Encryption = s3Encryption;
  }


  public SecurityConfigurationEncryptionConfiguration cloudWatchEncryption(EncryptionConfigurationCloudWatchEncryption cloudWatchEncryption) {
    this.cloudWatchEncryption = cloudWatchEncryption;
    return this;
  }

  /**
   * Get cloudWatchEncryption
   * @return cloudWatchEncryption
   */
  @javax.annotation.Nullable
  public EncryptionConfigurationCloudWatchEncryption getCloudWatchEncryption() {
    return cloudWatchEncryption;
  }

  public void setCloudWatchEncryption(EncryptionConfigurationCloudWatchEncryption cloudWatchEncryption) {
    this.cloudWatchEncryption = cloudWatchEncryption;
  }


  public SecurityConfigurationEncryptionConfiguration jobBookmarksEncryption(EncryptionConfigurationJobBookmarksEncryption jobBookmarksEncryption) {
    this.jobBookmarksEncryption = jobBookmarksEncryption;
    return this;
  }

  /**
   * Get jobBookmarksEncryption
   * @return jobBookmarksEncryption
   */
  @javax.annotation.Nullable
  public EncryptionConfigurationJobBookmarksEncryption getJobBookmarksEncryption() {
    return jobBookmarksEncryption;
  }

  public void setJobBookmarksEncryption(EncryptionConfigurationJobBookmarksEncryption jobBookmarksEncryption) {
    this.jobBookmarksEncryption = jobBookmarksEncryption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityConfigurationEncryptionConfiguration securityConfigurationEncryptionConfiguration = (SecurityConfigurationEncryptionConfiguration) o;
    return Objects.equals(this.s3Encryption, securityConfigurationEncryptionConfiguration.s3Encryption) &&
        Objects.equals(this.cloudWatchEncryption, securityConfigurationEncryptionConfiguration.cloudWatchEncryption) &&
        Objects.equals(this.jobBookmarksEncryption, securityConfigurationEncryptionConfiguration.jobBookmarksEncryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Encryption, cloudWatchEncryption, jobBookmarksEncryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityConfigurationEncryptionConfiguration {\n");
    sb.append("    s3Encryption: ").append(toIndentedString(s3Encryption)).append("\n");
    sb.append("    cloudWatchEncryption: ").append(toIndentedString(cloudWatchEncryption)).append("\n");
    sb.append("    jobBookmarksEncryption: ").append(toIndentedString(jobBookmarksEncryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3Encryption");
    openapiFields.add("CloudWatchEncryption");
    openapiFields.add("JobBookmarksEncryption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityConfigurationEncryptionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityConfigurationEncryptionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityConfigurationEncryptionConfiguration is not found in the empty JSON string", SecurityConfigurationEncryptionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityConfigurationEncryptionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityConfigurationEncryptionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3Encryption`
      if (jsonObj.get("S3Encryption") != null && !jsonObj.get("S3Encryption").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("S3Encryption"));
      }
      // validate the optional field `CloudWatchEncryption`
      if (jsonObj.get("CloudWatchEncryption") != null && !jsonObj.get("CloudWatchEncryption").isJsonNull()) {
        EncryptionConfigurationCloudWatchEncryption.validateJsonElement(jsonObj.get("CloudWatchEncryption"));
      }
      // validate the optional field `JobBookmarksEncryption`
      if (jsonObj.get("JobBookmarksEncryption") != null && !jsonObj.get("JobBookmarksEncryption").isJsonNull()) {
        EncryptionConfigurationJobBookmarksEncryption.validateJsonElement(jsonObj.get("JobBookmarksEncryption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityConfigurationEncryptionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityConfigurationEncryptionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityConfigurationEncryptionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityConfigurationEncryptionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityConfigurationEncryptionConfiguration>() {
           @Override
           public void write(JsonWriter out, SecurityConfigurationEncryptionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityConfigurationEncryptionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityConfigurationEncryptionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityConfigurationEncryptionConfiguration
   * @throws IOException if the JSON string is invalid with respect to SecurityConfigurationEncryptionConfiguration
   */
  public static SecurityConfigurationEncryptionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityConfigurationEncryptionConfiguration.class);
  }

  /**
   * Convert an instance of SecurityConfigurationEncryptionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

