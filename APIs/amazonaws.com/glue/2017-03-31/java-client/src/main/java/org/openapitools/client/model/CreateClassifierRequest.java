/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateClassifierRequestCsvClassifier;
import org.openapitools.client.model.CreateClassifierRequestGrokClassifier;
import org.openapitools.client.model.CreateClassifierRequestJsonClassifier;
import org.openapitools.client.model.CreateClassifierRequestXMLClassifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateClassifierRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateClassifierRequest {
  public static final String SERIALIZED_NAME_GROK_CLASSIFIER = "GrokClassifier";
  @SerializedName(SERIALIZED_NAME_GROK_CLASSIFIER)
  private CreateClassifierRequestGrokClassifier grokClassifier;

  public static final String SERIALIZED_NAME_XM_L_CLASSIFIER = "XMLClassifier";
  @SerializedName(SERIALIZED_NAME_XM_L_CLASSIFIER)
  private CreateClassifierRequestXMLClassifier xmLClassifier;

  public static final String SERIALIZED_NAME_JSON_CLASSIFIER = "JsonClassifier";
  @SerializedName(SERIALIZED_NAME_JSON_CLASSIFIER)
  private CreateClassifierRequestJsonClassifier jsonClassifier;

  public static final String SERIALIZED_NAME_CSV_CLASSIFIER = "CsvClassifier";
  @SerializedName(SERIALIZED_NAME_CSV_CLASSIFIER)
  private CreateClassifierRequestCsvClassifier csvClassifier;

  public CreateClassifierRequest() {
  }

  public CreateClassifierRequest grokClassifier(CreateClassifierRequestGrokClassifier grokClassifier) {
    this.grokClassifier = grokClassifier;
    return this;
  }

  /**
   * Get grokClassifier
   * @return grokClassifier
   */
  @javax.annotation.Nullable
  public CreateClassifierRequestGrokClassifier getGrokClassifier() {
    return grokClassifier;
  }

  public void setGrokClassifier(CreateClassifierRequestGrokClassifier grokClassifier) {
    this.grokClassifier = grokClassifier;
  }


  public CreateClassifierRequest xmLClassifier(CreateClassifierRequestXMLClassifier xmLClassifier) {
    this.xmLClassifier = xmLClassifier;
    return this;
  }

  /**
   * Get xmLClassifier
   * @return xmLClassifier
   */
  @javax.annotation.Nullable
  public CreateClassifierRequestXMLClassifier getXmLClassifier() {
    return xmLClassifier;
  }

  public void setXmLClassifier(CreateClassifierRequestXMLClassifier xmLClassifier) {
    this.xmLClassifier = xmLClassifier;
  }


  public CreateClassifierRequest jsonClassifier(CreateClassifierRequestJsonClassifier jsonClassifier) {
    this.jsonClassifier = jsonClassifier;
    return this;
  }

  /**
   * Get jsonClassifier
   * @return jsonClassifier
   */
  @javax.annotation.Nullable
  public CreateClassifierRequestJsonClassifier getJsonClassifier() {
    return jsonClassifier;
  }

  public void setJsonClassifier(CreateClassifierRequestJsonClassifier jsonClassifier) {
    this.jsonClassifier = jsonClassifier;
  }


  public CreateClassifierRequest csvClassifier(CreateClassifierRequestCsvClassifier csvClassifier) {
    this.csvClassifier = csvClassifier;
    return this;
  }

  /**
   * Get csvClassifier
   * @return csvClassifier
   */
  @javax.annotation.Nullable
  public CreateClassifierRequestCsvClassifier getCsvClassifier() {
    return csvClassifier;
  }

  public void setCsvClassifier(CreateClassifierRequestCsvClassifier csvClassifier) {
    this.csvClassifier = csvClassifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClassifierRequest createClassifierRequest = (CreateClassifierRequest) o;
    return Objects.equals(this.grokClassifier, createClassifierRequest.grokClassifier) &&
        Objects.equals(this.xmLClassifier, createClassifierRequest.xmLClassifier) &&
        Objects.equals(this.jsonClassifier, createClassifierRequest.jsonClassifier) &&
        Objects.equals(this.csvClassifier, createClassifierRequest.csvClassifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grokClassifier, xmLClassifier, jsonClassifier, csvClassifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClassifierRequest {\n");
    sb.append("    grokClassifier: ").append(toIndentedString(grokClassifier)).append("\n");
    sb.append("    xmLClassifier: ").append(toIndentedString(xmLClassifier)).append("\n");
    sb.append("    jsonClassifier: ").append(toIndentedString(jsonClassifier)).append("\n");
    sb.append("    csvClassifier: ").append(toIndentedString(csvClassifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GrokClassifier");
    openapiFields.add("XMLClassifier");
    openapiFields.add("JsonClassifier");
    openapiFields.add("CsvClassifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateClassifierRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClassifierRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClassifierRequest is not found in the empty JSON string", CreateClassifierRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateClassifierRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClassifierRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GrokClassifier`
      if (jsonObj.get("GrokClassifier") != null && !jsonObj.get("GrokClassifier").isJsonNull()) {
        CreateClassifierRequestGrokClassifier.validateJsonElement(jsonObj.get("GrokClassifier"));
      }
      // validate the optional field `XMLClassifier`
      if (jsonObj.get("XMLClassifier") != null && !jsonObj.get("XMLClassifier").isJsonNull()) {
        CreateClassifierRequestXMLClassifier.validateJsonElement(jsonObj.get("XMLClassifier"));
      }
      // validate the optional field `JsonClassifier`
      if (jsonObj.get("JsonClassifier") != null && !jsonObj.get("JsonClassifier").isJsonNull()) {
        CreateClassifierRequestJsonClassifier.validateJsonElement(jsonObj.get("JsonClassifier"));
      }
      // validate the optional field `CsvClassifier`
      if (jsonObj.get("CsvClassifier") != null && !jsonObj.get("CsvClassifier").isJsonNull()) {
        CreateClassifierRequestCsvClassifier.validateJsonElement(jsonObj.get("CsvClassifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClassifierRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClassifierRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClassifierRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClassifierRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClassifierRequest>() {
           @Override
           public void write(JsonWriter out, CreateClassifierRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClassifierRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateClassifierRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateClassifierRequest
   * @throws IOException if the JSON string is invalid with respect to CreateClassifierRequest
   */
  public static CreateClassifierRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClassifierRequest.class);
  }

  /**
   * Convert an instance of CreateClassifierRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

