/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metrics for a specified crawler.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrawlerMetrics {
  public static final String SERIALIZED_NAME_CRAWLER_NAME = "CrawlerName";
  @SerializedName(SERIALIZED_NAME_CRAWLER_NAME)
  private String crawlerName;

  public static final String SERIALIZED_NAME_TIME_LEFT_SECONDS = "TimeLeftSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_LEFT_SECONDS)
  private Double timeLeftSeconds;

  public static final String SERIALIZED_NAME_STILL_ESTIMATING = "StillEstimating";
  @SerializedName(SERIALIZED_NAME_STILL_ESTIMATING)
  private Boolean stillEstimating;

  public static final String SERIALIZED_NAME_LAST_RUNTIME_SECONDS = "LastRuntimeSeconds";
  @SerializedName(SERIALIZED_NAME_LAST_RUNTIME_SECONDS)
  private Double lastRuntimeSeconds;

  public static final String SERIALIZED_NAME_MEDIAN_RUNTIME_SECONDS = "MedianRuntimeSeconds";
  @SerializedName(SERIALIZED_NAME_MEDIAN_RUNTIME_SECONDS)
  private Double medianRuntimeSeconds;

  public static final String SERIALIZED_NAME_TABLES_CREATED = "TablesCreated";
  @SerializedName(SERIALIZED_NAME_TABLES_CREATED)
  private Integer tablesCreated;

  public static final String SERIALIZED_NAME_TABLES_UPDATED = "TablesUpdated";
  @SerializedName(SERIALIZED_NAME_TABLES_UPDATED)
  private Integer tablesUpdated;

  public static final String SERIALIZED_NAME_TABLES_DELETED = "TablesDeleted";
  @SerializedName(SERIALIZED_NAME_TABLES_DELETED)
  private Integer tablesDeleted;

  public CrawlerMetrics() {
  }

  public CrawlerMetrics crawlerName(String crawlerName) {
    this.crawlerName = crawlerName;
    return this;
  }

  /**
   * Get crawlerName
   * @return crawlerName
   */
  @javax.annotation.Nullable
  public String getCrawlerName() {
    return crawlerName;
  }

  public void setCrawlerName(String crawlerName) {
    this.crawlerName = crawlerName;
  }


  public CrawlerMetrics timeLeftSeconds(Double timeLeftSeconds) {
    this.timeLeftSeconds = timeLeftSeconds;
    return this;
  }

  /**
   * Get timeLeftSeconds
   * @return timeLeftSeconds
   */
  @javax.annotation.Nullable
  public Double getTimeLeftSeconds() {
    return timeLeftSeconds;
  }

  public void setTimeLeftSeconds(Double timeLeftSeconds) {
    this.timeLeftSeconds = timeLeftSeconds;
  }


  public CrawlerMetrics stillEstimating(Boolean stillEstimating) {
    this.stillEstimating = stillEstimating;
    return this;
  }

  /**
   * Get stillEstimating
   * @return stillEstimating
   */
  @javax.annotation.Nullable
  public Boolean getStillEstimating() {
    return stillEstimating;
  }

  public void setStillEstimating(Boolean stillEstimating) {
    this.stillEstimating = stillEstimating;
  }


  public CrawlerMetrics lastRuntimeSeconds(Double lastRuntimeSeconds) {
    this.lastRuntimeSeconds = lastRuntimeSeconds;
    return this;
  }

  /**
   * Get lastRuntimeSeconds
   * @return lastRuntimeSeconds
   */
  @javax.annotation.Nullable
  public Double getLastRuntimeSeconds() {
    return lastRuntimeSeconds;
  }

  public void setLastRuntimeSeconds(Double lastRuntimeSeconds) {
    this.lastRuntimeSeconds = lastRuntimeSeconds;
  }


  public CrawlerMetrics medianRuntimeSeconds(Double medianRuntimeSeconds) {
    this.medianRuntimeSeconds = medianRuntimeSeconds;
    return this;
  }

  /**
   * Get medianRuntimeSeconds
   * @return medianRuntimeSeconds
   */
  @javax.annotation.Nullable
  public Double getMedianRuntimeSeconds() {
    return medianRuntimeSeconds;
  }

  public void setMedianRuntimeSeconds(Double medianRuntimeSeconds) {
    this.medianRuntimeSeconds = medianRuntimeSeconds;
  }


  public CrawlerMetrics tablesCreated(Integer tablesCreated) {
    this.tablesCreated = tablesCreated;
    return this;
  }

  /**
   * Get tablesCreated
   * @return tablesCreated
   */
  @javax.annotation.Nullable
  public Integer getTablesCreated() {
    return tablesCreated;
  }

  public void setTablesCreated(Integer tablesCreated) {
    this.tablesCreated = tablesCreated;
  }


  public CrawlerMetrics tablesUpdated(Integer tablesUpdated) {
    this.tablesUpdated = tablesUpdated;
    return this;
  }

  /**
   * Get tablesUpdated
   * @return tablesUpdated
   */
  @javax.annotation.Nullable
  public Integer getTablesUpdated() {
    return tablesUpdated;
  }

  public void setTablesUpdated(Integer tablesUpdated) {
    this.tablesUpdated = tablesUpdated;
  }


  public CrawlerMetrics tablesDeleted(Integer tablesDeleted) {
    this.tablesDeleted = tablesDeleted;
    return this;
  }

  /**
   * Get tablesDeleted
   * @return tablesDeleted
   */
  @javax.annotation.Nullable
  public Integer getTablesDeleted() {
    return tablesDeleted;
  }

  public void setTablesDeleted(Integer tablesDeleted) {
    this.tablesDeleted = tablesDeleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrawlerMetrics crawlerMetrics = (CrawlerMetrics) o;
    return Objects.equals(this.crawlerName, crawlerMetrics.crawlerName) &&
        Objects.equals(this.timeLeftSeconds, crawlerMetrics.timeLeftSeconds) &&
        Objects.equals(this.stillEstimating, crawlerMetrics.stillEstimating) &&
        Objects.equals(this.lastRuntimeSeconds, crawlerMetrics.lastRuntimeSeconds) &&
        Objects.equals(this.medianRuntimeSeconds, crawlerMetrics.medianRuntimeSeconds) &&
        Objects.equals(this.tablesCreated, crawlerMetrics.tablesCreated) &&
        Objects.equals(this.tablesUpdated, crawlerMetrics.tablesUpdated) &&
        Objects.equals(this.tablesDeleted, crawlerMetrics.tablesDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crawlerName, timeLeftSeconds, stillEstimating, lastRuntimeSeconds, medianRuntimeSeconds, tablesCreated, tablesUpdated, tablesDeleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrawlerMetrics {\n");
    sb.append("    crawlerName: ").append(toIndentedString(crawlerName)).append("\n");
    sb.append("    timeLeftSeconds: ").append(toIndentedString(timeLeftSeconds)).append("\n");
    sb.append("    stillEstimating: ").append(toIndentedString(stillEstimating)).append("\n");
    sb.append("    lastRuntimeSeconds: ").append(toIndentedString(lastRuntimeSeconds)).append("\n");
    sb.append("    medianRuntimeSeconds: ").append(toIndentedString(medianRuntimeSeconds)).append("\n");
    sb.append("    tablesCreated: ").append(toIndentedString(tablesCreated)).append("\n");
    sb.append("    tablesUpdated: ").append(toIndentedString(tablesUpdated)).append("\n");
    sb.append("    tablesDeleted: ").append(toIndentedString(tablesDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CrawlerName");
    openapiFields.add("TimeLeftSeconds");
    openapiFields.add("StillEstimating");
    openapiFields.add("LastRuntimeSeconds");
    openapiFields.add("MedianRuntimeSeconds");
    openapiFields.add("TablesCreated");
    openapiFields.add("TablesUpdated");
    openapiFields.add("TablesDeleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrawlerMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrawlerMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrawlerMetrics is not found in the empty JSON string", CrawlerMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrawlerMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrawlerMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CrawlerName`
      if (jsonObj.get("CrawlerName") != null && !jsonObj.get("CrawlerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CrawlerName"));
      }
      // validate the optional field `TimeLeftSeconds`
      if (jsonObj.get("TimeLeftSeconds") != null && !jsonObj.get("TimeLeftSeconds").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("TimeLeftSeconds"));
      }
      // validate the optional field `StillEstimating`
      if (jsonObj.get("StillEstimating") != null && !jsonObj.get("StillEstimating").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StillEstimating"));
      }
      // validate the optional field `LastRuntimeSeconds`
      if (jsonObj.get("LastRuntimeSeconds") != null && !jsonObj.get("LastRuntimeSeconds").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LastRuntimeSeconds"));
      }
      // validate the optional field `MedianRuntimeSeconds`
      if (jsonObj.get("MedianRuntimeSeconds") != null && !jsonObj.get("MedianRuntimeSeconds").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MedianRuntimeSeconds"));
      }
      // validate the optional field `TablesCreated`
      if (jsonObj.get("TablesCreated") != null && !jsonObj.get("TablesCreated").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesCreated"));
      }
      // validate the optional field `TablesUpdated`
      if (jsonObj.get("TablesUpdated") != null && !jsonObj.get("TablesUpdated").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesUpdated"));
      }
      // validate the optional field `TablesDeleted`
      if (jsonObj.get("TablesDeleted") != null && !jsonObj.get("TablesDeleted").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesDeleted"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrawlerMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrawlerMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrawlerMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrawlerMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<CrawlerMetrics>() {
           @Override
           public void write(JsonWriter out, CrawlerMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrawlerMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrawlerMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrawlerMetrics
   * @throws IOException if the JSON string is invalid with respect to CrawlerMetrics
   */
  public static CrawlerMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrawlerMetrics.class);
  }

  /**
   * Convert an instance of CrawlerMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

