/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FindMatchesMetricsConfusionMatrix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EvaluationMetricsFindMatchesMetrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluationMetricsFindMatchesMetrics {
  public static final String SERIALIZED_NAME_AREA_UNDER_P_R_CURVE = "AreaUnderPRCurve";
  @SerializedName(SERIALIZED_NAME_AREA_UNDER_P_R_CURVE)
  private Double areaUnderPRCurve;

  public static final String SERIALIZED_NAME_PRECISION = "Precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Double precision;

  public static final String SERIALIZED_NAME_RECALL = "Recall";
  @SerializedName(SERIALIZED_NAME_RECALL)
  private Double recall;

  public static final String SERIALIZED_NAME_F1 = "F1";
  @SerializedName(SERIALIZED_NAME_F1)
  private Double F1;

  public static final String SERIALIZED_NAME_CONFUSION_MATRIX = "ConfusionMatrix";
  @SerializedName(SERIALIZED_NAME_CONFUSION_MATRIX)
  private FindMatchesMetricsConfusionMatrix confusionMatrix;

  public static final String SERIALIZED_NAME_COLUMN_IMPORTANCES = "ColumnImportances";
  @SerializedName(SERIALIZED_NAME_COLUMN_IMPORTANCES)
  private List columnImportances;

  public EvaluationMetricsFindMatchesMetrics() {
  }

  public EvaluationMetricsFindMatchesMetrics areaUnderPRCurve(Double areaUnderPRCurve) {
    this.areaUnderPRCurve = areaUnderPRCurve;
    return this;
  }

  /**
   * Get areaUnderPRCurve
   * @return areaUnderPRCurve
   */
  @javax.annotation.Nullable
  public Double getAreaUnderPRCurve() {
    return areaUnderPRCurve;
  }

  public void setAreaUnderPRCurve(Double areaUnderPRCurve) {
    this.areaUnderPRCurve = areaUnderPRCurve;
  }


  public EvaluationMetricsFindMatchesMetrics precision(Double precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Get precision
   * @return precision
   */
  @javax.annotation.Nullable
  public Double getPrecision() {
    return precision;
  }

  public void setPrecision(Double precision) {
    this.precision = precision;
  }


  public EvaluationMetricsFindMatchesMetrics recall(Double recall) {
    this.recall = recall;
    return this;
  }

  /**
   * Get recall
   * @return recall
   */
  @javax.annotation.Nullable
  public Double getRecall() {
    return recall;
  }

  public void setRecall(Double recall) {
    this.recall = recall;
  }


  public EvaluationMetricsFindMatchesMetrics F1(Double F1) {
    this.F1 = F1;
    return this;
  }

  /**
   * Get F1
   * @return F1
   */
  @javax.annotation.Nullable
  public Double getF1() {
    return F1;
  }

  public void setF1(Double F1) {
    this.F1 = F1;
  }


  public EvaluationMetricsFindMatchesMetrics confusionMatrix(FindMatchesMetricsConfusionMatrix confusionMatrix) {
    this.confusionMatrix = confusionMatrix;
    return this;
  }

  /**
   * Get confusionMatrix
   * @return confusionMatrix
   */
  @javax.annotation.Nullable
  public FindMatchesMetricsConfusionMatrix getConfusionMatrix() {
    return confusionMatrix;
  }

  public void setConfusionMatrix(FindMatchesMetricsConfusionMatrix confusionMatrix) {
    this.confusionMatrix = confusionMatrix;
  }


  public EvaluationMetricsFindMatchesMetrics columnImportances(List columnImportances) {
    this.columnImportances = columnImportances;
    return this;
  }

  /**
   * Get columnImportances
   * @return columnImportances
   */
  @javax.annotation.Nullable
  public List getColumnImportances() {
    return columnImportances;
  }

  public void setColumnImportances(List columnImportances) {
    this.columnImportances = columnImportances;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluationMetricsFindMatchesMetrics evaluationMetricsFindMatchesMetrics = (EvaluationMetricsFindMatchesMetrics) o;
    return Objects.equals(this.areaUnderPRCurve, evaluationMetricsFindMatchesMetrics.areaUnderPRCurve) &&
        Objects.equals(this.precision, evaluationMetricsFindMatchesMetrics.precision) &&
        Objects.equals(this.recall, evaluationMetricsFindMatchesMetrics.recall) &&
        Objects.equals(this.F1, evaluationMetricsFindMatchesMetrics.F1) &&
        Objects.equals(this.confusionMatrix, evaluationMetricsFindMatchesMetrics.confusionMatrix) &&
        Objects.equals(this.columnImportances, evaluationMetricsFindMatchesMetrics.columnImportances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaUnderPRCurve, precision, recall, F1, confusionMatrix, columnImportances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluationMetricsFindMatchesMetrics {\n");
    sb.append("    areaUnderPRCurve: ").append(toIndentedString(areaUnderPRCurve)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    recall: ").append(toIndentedString(recall)).append("\n");
    sb.append("    F1: ").append(toIndentedString(F1)).append("\n");
    sb.append("    confusionMatrix: ").append(toIndentedString(confusionMatrix)).append("\n");
    sb.append("    columnImportances: ").append(toIndentedString(columnImportances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AreaUnderPRCurve");
    openapiFields.add("Precision");
    openapiFields.add("Recall");
    openapiFields.add("F1");
    openapiFields.add("ConfusionMatrix");
    openapiFields.add("ColumnImportances");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluationMetricsFindMatchesMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluationMetricsFindMatchesMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluationMetricsFindMatchesMetrics is not found in the empty JSON string", EvaluationMetricsFindMatchesMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluationMetricsFindMatchesMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluationMetricsFindMatchesMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AreaUnderPRCurve`
      if (jsonObj.get("AreaUnderPRCurve") != null && !jsonObj.get("AreaUnderPRCurve").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("AreaUnderPRCurve"));
      }
      // validate the optional field `Precision`
      if (jsonObj.get("Precision") != null && !jsonObj.get("Precision").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Precision"));
      }
      // validate the optional field `Recall`
      if (jsonObj.get("Recall") != null && !jsonObj.get("Recall").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Recall"));
      }
      // validate the optional field `F1`
      if (jsonObj.get("F1") != null && !jsonObj.get("F1").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("F1"));
      }
      // validate the optional field `ConfusionMatrix`
      if (jsonObj.get("ConfusionMatrix") != null && !jsonObj.get("ConfusionMatrix").isJsonNull()) {
        FindMatchesMetricsConfusionMatrix.validateJsonElement(jsonObj.get("ConfusionMatrix"));
      }
      // validate the optional field `ColumnImportances`
      if (jsonObj.get("ColumnImportances") != null && !jsonObj.get("ColumnImportances").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ColumnImportances"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluationMetricsFindMatchesMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluationMetricsFindMatchesMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluationMetricsFindMatchesMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluationMetricsFindMatchesMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluationMetricsFindMatchesMetrics>() {
           @Override
           public void write(JsonWriter out, EvaluationMetricsFindMatchesMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluationMetricsFindMatchesMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluationMetricsFindMatchesMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluationMetricsFindMatchesMetrics
   * @throws IOException if the JSON string is invalid with respect to EvaluationMetricsFindMatchesMetrics
   */
  public static EvaluationMetricsFindMatchesMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluationMetricsFindMatchesMetrics.class);
  }

  /**
   * Convert an instance of EvaluationMetricsFindMatchesMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

