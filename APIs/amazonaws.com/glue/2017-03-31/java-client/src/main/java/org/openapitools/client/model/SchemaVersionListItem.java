/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SchemaVersionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing the details about a schema version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaVersionListItem {
  public static final String SERIALIZED_NAME_SCHEMA_ARN = "SchemaArn";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ARN)
  private String schemaArn;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION_ID = "SchemaVersionId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION_ID)
  private String schemaVersionId;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "VersionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private Integer versionNumber;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SchemaVersionStatus status;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public SchemaVersionListItem() {
  }

  public SchemaVersionListItem schemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
    return this;
  }

  /**
   * Get schemaArn
   * @return schemaArn
   */
  @javax.annotation.Nullable
  public String getSchemaArn() {
    return schemaArn;
  }

  public void setSchemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
  }


  public SchemaVersionListItem schemaVersionId(String schemaVersionId) {
    this.schemaVersionId = schemaVersionId;
    return this;
  }

  /**
   * Get schemaVersionId
   * @return schemaVersionId
   */
  @javax.annotation.Nullable
  public String getSchemaVersionId() {
    return schemaVersionId;
  }

  public void setSchemaVersionId(String schemaVersionId) {
    this.schemaVersionId = schemaVersionId;
  }


  public SchemaVersionListItem versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * Get versionNumber
   * @return versionNumber
   */
  @javax.annotation.Nullable
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }


  public SchemaVersionListItem status(SchemaVersionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SchemaVersionStatus getStatus() {
    return status;
  }

  public void setStatus(SchemaVersionStatus status) {
    this.status = status;
  }


  public SchemaVersionListItem createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaVersionListItem schemaVersionListItem = (SchemaVersionListItem) o;
    return Objects.equals(this.schemaArn, schemaVersionListItem.schemaArn) &&
        Objects.equals(this.schemaVersionId, schemaVersionListItem.schemaVersionId) &&
        Objects.equals(this.versionNumber, schemaVersionListItem.versionNumber) &&
        Objects.equals(this.status, schemaVersionListItem.status) &&
        Objects.equals(this.createdTime, schemaVersionListItem.createdTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaArn, schemaVersionId, versionNumber, status, createdTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaVersionListItem {\n");
    sb.append("    schemaArn: ").append(toIndentedString(schemaArn)).append("\n");
    sb.append("    schemaVersionId: ").append(toIndentedString(schemaVersionId)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaArn");
    openapiFields.add("SchemaVersionId");
    openapiFields.add("VersionNumber");
    openapiFields.add("Status");
    openapiFields.add("CreatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaVersionListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaVersionListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaVersionListItem is not found in the empty JSON string", SchemaVersionListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaVersionListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaVersionListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SchemaArn`
      if (jsonObj.get("SchemaArn") != null && !jsonObj.get("SchemaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaArn"));
      }
      // validate the optional field `SchemaVersionId`
      if (jsonObj.get("SchemaVersionId") != null && !jsonObj.get("SchemaVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaVersionId"));
      }
      // validate the optional field `VersionNumber`
      if (jsonObj.get("VersionNumber") != null && !jsonObj.get("VersionNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VersionNumber"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SchemaVersionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaVersionListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaVersionListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaVersionListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaVersionListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaVersionListItem>() {
           @Override
           public void write(JsonWriter out, SchemaVersionListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaVersionListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaVersionListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaVersionListItem
   * @throws IOException if the JSON string is invalid with respect to SchemaVersionListItem
   */
  public static SchemaVersionListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaVersionListItem.class);
  }

  /**
   * Convert an instance of SchemaVersionListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

