/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The data structure used by the Data Catalog to encrypt the password as part of &lt;code&gt;CreateConnection&lt;/code&gt; or &lt;code&gt;UpdateConnection&lt;/code&gt; and store it in the &lt;code&gt;ENCRYPTED_PASSWORD&lt;/code&gt; field in the connection properties. You can enable catalog encryption or only password encryption.&lt;/p&gt; &lt;p&gt;When a &lt;code&gt;CreationConnection&lt;/code&gt; request arrives containing a password, the Data Catalog first encrypts the password using your KMS key. It then encrypts the whole connection object again if catalog encryption is also enabled.&lt;/p&gt; &lt;p&gt;This encryption requires that you set KMS key permissions to enable or restrict access on the password key according to your security requirements. For example, you might want only administrators to have decrypt permission on the password key.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionPasswordEncryption {
  public static final String SERIALIZED_NAME_RETURN_CONNECTION_PASSWORD_ENCRYPTED = "ReturnConnectionPasswordEncrypted";
  @SerializedName(SERIALIZED_NAME_RETURN_CONNECTION_PASSWORD_ENCRYPTED)
  private Boolean returnConnectionPasswordEncrypted;

  public static final String SERIALIZED_NAME_AWS_KMS_KEY_ID = "AwsKmsKeyId";
  @SerializedName(SERIALIZED_NAME_AWS_KMS_KEY_ID)
  private String awsKmsKeyId;

  public ConnectionPasswordEncryption() {
  }

  public ConnectionPasswordEncryption returnConnectionPasswordEncrypted(Boolean returnConnectionPasswordEncrypted) {
    this.returnConnectionPasswordEncrypted = returnConnectionPasswordEncrypted;
    return this;
  }

  /**
   * Get returnConnectionPasswordEncrypted
   * @return returnConnectionPasswordEncrypted
   */
  @javax.annotation.Nonnull
  public Boolean getReturnConnectionPasswordEncrypted() {
    return returnConnectionPasswordEncrypted;
  }

  public void setReturnConnectionPasswordEncrypted(Boolean returnConnectionPasswordEncrypted) {
    this.returnConnectionPasswordEncrypted = returnConnectionPasswordEncrypted;
  }


  public ConnectionPasswordEncryption awsKmsKeyId(String awsKmsKeyId) {
    this.awsKmsKeyId = awsKmsKeyId;
    return this;
  }

  /**
   * Get awsKmsKeyId
   * @return awsKmsKeyId
   */
  @javax.annotation.Nullable
  public String getAwsKmsKeyId() {
    return awsKmsKeyId;
  }

  public void setAwsKmsKeyId(String awsKmsKeyId) {
    this.awsKmsKeyId = awsKmsKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionPasswordEncryption connectionPasswordEncryption = (ConnectionPasswordEncryption) o;
    return Objects.equals(this.returnConnectionPasswordEncrypted, connectionPasswordEncryption.returnConnectionPasswordEncrypted) &&
        Objects.equals(this.awsKmsKeyId, connectionPasswordEncryption.awsKmsKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnConnectionPasswordEncrypted, awsKmsKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionPasswordEncryption {\n");
    sb.append("    returnConnectionPasswordEncrypted: ").append(toIndentedString(returnConnectionPasswordEncrypted)).append("\n");
    sb.append("    awsKmsKeyId: ").append(toIndentedString(awsKmsKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReturnConnectionPasswordEncrypted");
    openapiFields.add("AwsKmsKeyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReturnConnectionPasswordEncrypted");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionPasswordEncryption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionPasswordEncryption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionPasswordEncryption is not found in the empty JSON string", ConnectionPasswordEncryption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionPasswordEncryption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionPasswordEncryption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectionPasswordEncryption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReturnConnectionPasswordEncrypted`
      Boolean.validateJsonElement(jsonObj.get("ReturnConnectionPasswordEncrypted"));
      // validate the optional field `AwsKmsKeyId`
      if (jsonObj.get("AwsKmsKeyId") != null && !jsonObj.get("AwsKmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AwsKmsKeyId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionPasswordEncryption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionPasswordEncryption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionPasswordEncryption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionPasswordEncryption.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionPasswordEncryption>() {
           @Override
           public void write(JsonWriter out, ConnectionPasswordEncryption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionPasswordEncryption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionPasswordEncryption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionPasswordEncryption
   * @throws IOException if the JSON string is invalid with respect to ConnectionPasswordEncryption
   */
  public static ConnectionPasswordEncryption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionPasswordEncryption.class);
  }

  /**
   * Convert an instance of ConnectionPasswordEncryption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

