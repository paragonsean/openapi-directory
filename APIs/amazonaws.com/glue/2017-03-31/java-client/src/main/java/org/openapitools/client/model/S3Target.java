/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a data store in Amazon Simple Storage Service (Amazon S3).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3Target {
  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_EXCLUSIONS = "Exclusions";
  @SerializedName(SERIALIZED_NAME_EXCLUSIONS)
  private List exclusions;

  public static final String SERIALIZED_NAME_CONNECTION_NAME = "ConnectionName";
  @SerializedName(SERIALIZED_NAME_CONNECTION_NAME)
  private String connectionName;

  public static final String SERIALIZED_NAME_SAMPLE_SIZE = "SampleSize";
  @SerializedName(SERIALIZED_NAME_SAMPLE_SIZE)
  private Integer sampleSize;

  public static final String SERIALIZED_NAME_EVENT_QUEUE_ARN = "EventQueueArn";
  @SerializedName(SERIALIZED_NAME_EVENT_QUEUE_ARN)
  private String eventQueueArn;

  public static final String SERIALIZED_NAME_DLQ_EVENT_QUEUE_ARN = "DlqEventQueueArn";
  @SerializedName(SERIALIZED_NAME_DLQ_EVENT_QUEUE_ARN)
  private String dlqEventQueueArn;

  public S3Target() {
  }

  public S3Target path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public S3Target exclusions(List exclusions) {
    this.exclusions = exclusions;
    return this;
  }

  /**
   * Get exclusions
   * @return exclusions
   */
  @javax.annotation.Nullable
  public List getExclusions() {
    return exclusions;
  }

  public void setExclusions(List exclusions) {
    this.exclusions = exclusions;
  }


  public S3Target connectionName(String connectionName) {
    this.connectionName = connectionName;
    return this;
  }

  /**
   * Get connectionName
   * @return connectionName
   */
  @javax.annotation.Nullable
  public String getConnectionName() {
    return connectionName;
  }

  public void setConnectionName(String connectionName) {
    this.connectionName = connectionName;
  }


  public S3Target sampleSize(Integer sampleSize) {
    this.sampleSize = sampleSize;
    return this;
  }

  /**
   * Get sampleSize
   * @return sampleSize
   */
  @javax.annotation.Nullable
  public Integer getSampleSize() {
    return sampleSize;
  }

  public void setSampleSize(Integer sampleSize) {
    this.sampleSize = sampleSize;
  }


  public S3Target eventQueueArn(String eventQueueArn) {
    this.eventQueueArn = eventQueueArn;
    return this;
  }

  /**
   * Get eventQueueArn
   * @return eventQueueArn
   */
  @javax.annotation.Nullable
  public String getEventQueueArn() {
    return eventQueueArn;
  }

  public void setEventQueueArn(String eventQueueArn) {
    this.eventQueueArn = eventQueueArn;
  }


  public S3Target dlqEventQueueArn(String dlqEventQueueArn) {
    this.dlqEventQueueArn = dlqEventQueueArn;
    return this;
  }

  /**
   * Get dlqEventQueueArn
   * @return dlqEventQueueArn
   */
  @javax.annotation.Nullable
  public String getDlqEventQueueArn() {
    return dlqEventQueueArn;
  }

  public void setDlqEventQueueArn(String dlqEventQueueArn) {
    this.dlqEventQueueArn = dlqEventQueueArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3Target s3Target = (S3Target) o;
    return Objects.equals(this.path, s3Target.path) &&
        Objects.equals(this.exclusions, s3Target.exclusions) &&
        Objects.equals(this.connectionName, s3Target.connectionName) &&
        Objects.equals(this.sampleSize, s3Target.sampleSize) &&
        Objects.equals(this.eventQueueArn, s3Target.eventQueueArn) &&
        Objects.equals(this.dlqEventQueueArn, s3Target.dlqEventQueueArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, exclusions, connectionName, sampleSize, eventQueueArn, dlqEventQueueArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3Target {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    exclusions: ").append(toIndentedString(exclusions)).append("\n");
    sb.append("    connectionName: ").append(toIndentedString(connectionName)).append("\n");
    sb.append("    sampleSize: ").append(toIndentedString(sampleSize)).append("\n");
    sb.append("    eventQueueArn: ").append(toIndentedString(eventQueueArn)).append("\n");
    sb.append("    dlqEventQueueArn: ").append(toIndentedString(dlqEventQueueArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Path");
    openapiFields.add("Exclusions");
    openapiFields.add("ConnectionName");
    openapiFields.add("SampleSize");
    openapiFields.add("EventQueueArn");
    openapiFields.add("DlqEventQueueArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3Target
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3Target.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3Target is not found in the empty JSON string", S3Target.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3Target.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3Target` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Path`
      if (jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Path"));
      }
      // validate the optional field `Exclusions`
      if (jsonObj.get("Exclusions") != null && !jsonObj.get("Exclusions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Exclusions"));
      }
      // validate the optional field `ConnectionName`
      if (jsonObj.get("ConnectionName") != null && !jsonObj.get("ConnectionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionName"));
      }
      // validate the optional field `SampleSize`
      if (jsonObj.get("SampleSize") != null && !jsonObj.get("SampleSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SampleSize"));
      }
      // validate the optional field `EventQueueArn`
      if (jsonObj.get("EventQueueArn") != null && !jsonObj.get("EventQueueArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventQueueArn"));
      }
      // validate the optional field `DlqEventQueueArn`
      if (jsonObj.get("DlqEventQueueArn") != null && !jsonObj.get("DlqEventQueueArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DlqEventQueueArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3Target.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3Target' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3Target> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3Target.class));

       return (TypeAdapter<T>) new TypeAdapter<S3Target>() {
           @Override
           public void write(JsonWriter out, S3Target value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3Target read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3Target given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3Target
   * @throws IOException if the JSON string is invalid with respect to S3Target
   */
  public static S3Target fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3Target.class);
  }

  /**
   * Convert an instance of S3Target to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

