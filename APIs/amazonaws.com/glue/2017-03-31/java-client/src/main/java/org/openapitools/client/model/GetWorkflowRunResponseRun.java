/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.WorkflowGraph;
import org.openapitools.client.model.WorkflowRunStartingEventBatchCondition;
import org.openapitools.client.model.WorkflowRunStatistics;
import org.openapitools.client.model.WorkflowRunStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWorkflowRunResponseRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWorkflowRunResponseRun {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WORKFLOW_RUN_ID = "WorkflowRunId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_RUN_ID)
  private String workflowRunId;

  public static final String SERIALIZED_NAME_PREVIOUS_RUN_ID = "PreviousRunId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RUN_ID)
  private String previousRunId;

  public static final String SERIALIZED_NAME_WORKFLOW_RUN_PROPERTIES = "WorkflowRunProperties";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_RUN_PROPERTIES)
  private Map workflowRunProperties;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "CompletedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkflowRunStatus status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_STATISTICS = "Statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private WorkflowRunStatistics statistics;

  public static final String SERIALIZED_NAME_GRAPH = "Graph";
  @SerializedName(SERIALIZED_NAME_GRAPH)
  private WorkflowGraph graph;

  public static final String SERIALIZED_NAME_STARTING_EVENT_BATCH_CONDITION = "StartingEventBatchCondition";
  @SerializedName(SERIALIZED_NAME_STARTING_EVENT_BATCH_CONDITION)
  private WorkflowRunStartingEventBatchCondition startingEventBatchCondition;

  public GetWorkflowRunResponseRun() {
  }

  public GetWorkflowRunResponseRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetWorkflowRunResponseRun workflowRunId(String workflowRunId) {
    this.workflowRunId = workflowRunId;
    return this;
  }

  /**
   * Get workflowRunId
   * @return workflowRunId
   */
  @javax.annotation.Nullable
  public String getWorkflowRunId() {
    return workflowRunId;
  }

  public void setWorkflowRunId(String workflowRunId) {
    this.workflowRunId = workflowRunId;
  }


  public GetWorkflowRunResponseRun previousRunId(String previousRunId) {
    this.previousRunId = previousRunId;
    return this;
  }

  /**
   * Get previousRunId
   * @return previousRunId
   */
  @javax.annotation.Nullable
  public String getPreviousRunId() {
    return previousRunId;
  }

  public void setPreviousRunId(String previousRunId) {
    this.previousRunId = previousRunId;
  }


  public GetWorkflowRunResponseRun workflowRunProperties(Map workflowRunProperties) {
    this.workflowRunProperties = workflowRunProperties;
    return this;
  }

  /**
   * Get workflowRunProperties
   * @return workflowRunProperties
   */
  @javax.annotation.Nullable
  public Map getWorkflowRunProperties() {
    return workflowRunProperties;
  }

  public void setWorkflowRunProperties(Map workflowRunProperties) {
    this.workflowRunProperties = workflowRunProperties;
  }


  public GetWorkflowRunResponseRun startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public GetWorkflowRunResponseRun completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public GetWorkflowRunResponseRun status(WorkflowRunStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WorkflowRunStatus getStatus() {
    return status;
  }

  public void setStatus(WorkflowRunStatus status) {
    this.status = status;
  }


  public GetWorkflowRunResponseRun errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public GetWorkflowRunResponseRun statistics(WorkflowRunStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public WorkflowRunStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(WorkflowRunStatistics statistics) {
    this.statistics = statistics;
  }


  public GetWorkflowRunResponseRun graph(WorkflowGraph graph) {
    this.graph = graph;
    return this;
  }

  /**
   * Get graph
   * @return graph
   */
  @javax.annotation.Nullable
  public WorkflowGraph getGraph() {
    return graph;
  }

  public void setGraph(WorkflowGraph graph) {
    this.graph = graph;
  }


  public GetWorkflowRunResponseRun startingEventBatchCondition(WorkflowRunStartingEventBatchCondition startingEventBatchCondition) {
    this.startingEventBatchCondition = startingEventBatchCondition;
    return this;
  }

  /**
   * Get startingEventBatchCondition
   * @return startingEventBatchCondition
   */
  @javax.annotation.Nullable
  public WorkflowRunStartingEventBatchCondition getStartingEventBatchCondition() {
    return startingEventBatchCondition;
  }

  public void setStartingEventBatchCondition(WorkflowRunStartingEventBatchCondition startingEventBatchCondition) {
    this.startingEventBatchCondition = startingEventBatchCondition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWorkflowRunResponseRun getWorkflowRunResponseRun = (GetWorkflowRunResponseRun) o;
    return Objects.equals(this.name, getWorkflowRunResponseRun.name) &&
        Objects.equals(this.workflowRunId, getWorkflowRunResponseRun.workflowRunId) &&
        Objects.equals(this.previousRunId, getWorkflowRunResponseRun.previousRunId) &&
        Objects.equals(this.workflowRunProperties, getWorkflowRunResponseRun.workflowRunProperties) &&
        Objects.equals(this.startedOn, getWorkflowRunResponseRun.startedOn) &&
        Objects.equals(this.completedOn, getWorkflowRunResponseRun.completedOn) &&
        Objects.equals(this.status, getWorkflowRunResponseRun.status) &&
        Objects.equals(this.errorMessage, getWorkflowRunResponseRun.errorMessage) &&
        Objects.equals(this.statistics, getWorkflowRunResponseRun.statistics) &&
        Objects.equals(this.graph, getWorkflowRunResponseRun.graph) &&
        Objects.equals(this.startingEventBatchCondition, getWorkflowRunResponseRun.startingEventBatchCondition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, workflowRunId, previousRunId, workflowRunProperties, startedOn, completedOn, status, errorMessage, statistics, graph, startingEventBatchCondition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWorkflowRunResponseRun {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    workflowRunId: ").append(toIndentedString(workflowRunId)).append("\n");
    sb.append("    previousRunId: ").append(toIndentedString(previousRunId)).append("\n");
    sb.append("    workflowRunProperties: ").append(toIndentedString(workflowRunProperties)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    graph: ").append(toIndentedString(graph)).append("\n");
    sb.append("    startingEventBatchCondition: ").append(toIndentedString(startingEventBatchCondition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("WorkflowRunId");
    openapiFields.add("PreviousRunId");
    openapiFields.add("WorkflowRunProperties");
    openapiFields.add("StartedOn");
    openapiFields.add("CompletedOn");
    openapiFields.add("Status");
    openapiFields.add("ErrorMessage");
    openapiFields.add("Statistics");
    openapiFields.add("Graph");
    openapiFields.add("StartingEventBatchCondition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWorkflowRunResponseRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWorkflowRunResponseRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWorkflowRunResponseRun is not found in the empty JSON string", GetWorkflowRunResponseRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWorkflowRunResponseRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWorkflowRunResponseRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `WorkflowRunId`
      if (jsonObj.get("WorkflowRunId") != null && !jsonObj.get("WorkflowRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkflowRunId"));
      }
      // validate the optional field `PreviousRunId`
      if (jsonObj.get("PreviousRunId") != null && !jsonObj.get("PreviousRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreviousRunId"));
      }
      // validate the optional field `WorkflowRunProperties`
      if (jsonObj.get("WorkflowRunProperties") != null && !jsonObj.get("WorkflowRunProperties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("WorkflowRunProperties"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `CompletedOn`
      if (jsonObj.get("CompletedOn") != null && !jsonObj.get("CompletedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedOn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        WorkflowRunStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `Statistics`
      if (jsonObj.get("Statistics") != null && !jsonObj.get("Statistics").isJsonNull()) {
        WorkflowRunStatistics.validateJsonElement(jsonObj.get("Statistics"));
      }
      // validate the optional field `Graph`
      if (jsonObj.get("Graph") != null && !jsonObj.get("Graph").isJsonNull()) {
        WorkflowGraph.validateJsonElement(jsonObj.get("Graph"));
      }
      // validate the optional field `StartingEventBatchCondition`
      if (jsonObj.get("StartingEventBatchCondition") != null && !jsonObj.get("StartingEventBatchCondition").isJsonNull()) {
        WorkflowRunStartingEventBatchCondition.validateJsonElement(jsonObj.get("StartingEventBatchCondition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWorkflowRunResponseRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWorkflowRunResponseRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWorkflowRunResponseRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWorkflowRunResponseRun.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWorkflowRunResponseRun>() {
           @Override
           public void write(JsonWriter out, GetWorkflowRunResponseRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWorkflowRunResponseRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWorkflowRunResponseRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWorkflowRunResponseRun
   * @throws IOException if the JSON string is invalid with respect to GetWorkflowRunResponseRun
   */
  public static GetWorkflowRunResponseRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWorkflowRunResponseRun.class);
  }

  /**
   * Convert an instance of GetWorkflowRunResponseRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

