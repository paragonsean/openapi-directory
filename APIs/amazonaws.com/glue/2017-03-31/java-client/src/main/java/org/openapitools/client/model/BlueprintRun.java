/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BlueprintRunState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a blueprint run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:19.587194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlueprintRun {
  public static final String SERIALIZED_NAME_BLUEPRINT_NAME = "BlueprintName";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_NAME)
  private String blueprintName;

  public static final String SERIALIZED_NAME_RUN_ID = "RunId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_WORKFLOW_NAME = "WorkflowName";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_NAME)
  private String workflowName;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private BlueprintRunState state;

  public static final String SERIALIZED_NAME_STARTED_ON = "StartedOn";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "CompletedOn";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ROLLBACK_ERROR_MESSAGE = "RollbackErrorMessage";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_ERROR_MESSAGE)
  private String rollbackErrorMessage;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private String parameters;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public BlueprintRun() {
  }

  public BlueprintRun blueprintName(String blueprintName) {
    this.blueprintName = blueprintName;
    return this;
  }

  /**
   * Get blueprintName
   * @return blueprintName
   */
  @javax.annotation.Nullable
  public String getBlueprintName() {
    return blueprintName;
  }

  public void setBlueprintName(String blueprintName) {
    this.blueprintName = blueprintName;
  }


  public BlueprintRun runId(String runId) {
    this.runId = runId;
    return this;
  }

  /**
   * Get runId
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public BlueprintRun workflowName(String workflowName) {
    this.workflowName = workflowName;
    return this;
  }

  /**
   * Get workflowName
   * @return workflowName
   */
  @javax.annotation.Nullable
  public String getWorkflowName() {
    return workflowName;
  }

  public void setWorkflowName(String workflowName) {
    this.workflowName = workflowName;
  }


  public BlueprintRun state(BlueprintRunState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public BlueprintRunState getState() {
    return state;
  }

  public void setState(BlueprintRunState state) {
    this.state = state;
  }


  public BlueprintRun startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * Get startedOn
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public BlueprintRun completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * Get completedOn
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public BlueprintRun errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public BlueprintRun rollbackErrorMessage(String rollbackErrorMessage) {
    this.rollbackErrorMessage = rollbackErrorMessage;
    return this;
  }

  /**
   * Get rollbackErrorMessage
   * @return rollbackErrorMessage
   */
  @javax.annotation.Nullable
  public String getRollbackErrorMessage() {
    return rollbackErrorMessage;
  }

  public void setRollbackErrorMessage(String rollbackErrorMessage) {
    this.rollbackErrorMessage = rollbackErrorMessage;
  }


  public BlueprintRun parameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public String getParameters() {
    return parameters;
  }

  public void setParameters(String parameters) {
    this.parameters = parameters;
  }


  public BlueprintRun roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintRun blueprintRun = (BlueprintRun) o;
    return Objects.equals(this.blueprintName, blueprintRun.blueprintName) &&
        Objects.equals(this.runId, blueprintRun.runId) &&
        Objects.equals(this.workflowName, blueprintRun.workflowName) &&
        Objects.equals(this.state, blueprintRun.state) &&
        Objects.equals(this.startedOn, blueprintRun.startedOn) &&
        Objects.equals(this.completedOn, blueprintRun.completedOn) &&
        Objects.equals(this.errorMessage, blueprintRun.errorMessage) &&
        Objects.equals(this.rollbackErrorMessage, blueprintRun.rollbackErrorMessage) &&
        Objects.equals(this.parameters, blueprintRun.parameters) &&
        Objects.equals(this.roleArn, blueprintRun.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprintName, runId, workflowName, state, startedOn, completedOn, errorMessage, rollbackErrorMessage, parameters, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintRun {\n");
    sb.append("    blueprintName: ").append(toIndentedString(blueprintName)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    workflowName: ").append(toIndentedString(workflowName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    rollbackErrorMessage: ").append(toIndentedString(rollbackErrorMessage)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BlueprintName");
    openapiFields.add("RunId");
    openapiFields.add("WorkflowName");
    openapiFields.add("State");
    openapiFields.add("StartedOn");
    openapiFields.add("CompletedOn");
    openapiFields.add("ErrorMessage");
    openapiFields.add("RollbackErrorMessage");
    openapiFields.add("Parameters");
    openapiFields.add("RoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlueprintRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueprintRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueprintRun is not found in the empty JSON string", BlueprintRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlueprintRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueprintRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BlueprintName`
      if (jsonObj.get("BlueprintName") != null && !jsonObj.get("BlueprintName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BlueprintName"));
      }
      // validate the optional field `RunId`
      if (jsonObj.get("RunId") != null && !jsonObj.get("RunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RunId"));
      }
      // validate the optional field `WorkflowName`
      if (jsonObj.get("WorkflowName") != null && !jsonObj.get("WorkflowName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkflowName"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        BlueprintRunState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StartedOn`
      if (jsonObj.get("StartedOn") != null && !jsonObj.get("StartedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartedOn"));
      }
      // validate the optional field `CompletedOn`
      if (jsonObj.get("CompletedOn") != null && !jsonObj.get("CompletedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedOn"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `RollbackErrorMessage`
      if (jsonObj.get("RollbackErrorMessage") != null && !jsonObj.get("RollbackErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RollbackErrorMessage"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueprintRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueprintRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueprintRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueprintRun.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueprintRun>() {
           @Override
           public void write(JsonWriter out, BlueprintRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueprintRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlueprintRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlueprintRun
   * @throws IOException if the JSON string is invalid with respect to BlueprintRun
   */
  public static BlueprintRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueprintRun.class);
  }

  /**
   * Convert an instance of BlueprintRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

