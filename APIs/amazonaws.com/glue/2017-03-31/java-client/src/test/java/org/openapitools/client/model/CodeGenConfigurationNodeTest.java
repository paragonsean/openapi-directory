/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodeGenConfigurationNodeAggregate;
import org.openapitools.client.model.CodeGenConfigurationNodeAmazonRedshiftSource;
import org.openapitools.client.model.CodeGenConfigurationNodeAmazonRedshiftTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeApplyMapping;
import org.openapitools.client.model.CodeGenConfigurationNodeAthenaConnectorSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogDeltaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogHudiSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogKafkaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogKinesisSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeCustomCode;
import org.openapitools.client.model.CodeGenConfigurationNodeDirectKafkaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeDirectKinesisSource;
import org.openapitools.client.model.CodeGenConfigurationNodeDropDuplicates;
import org.openapitools.client.model.CodeGenConfigurationNodeDropFields;
import org.openapitools.client.model.CodeGenConfigurationNodeDropNullFields;
import org.openapitools.client.model.CodeGenConfigurationNodeDynamicTransform;
import org.openapitools.client.model.CodeGenConfigurationNodeDynamoDBCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeEvaluateDataQuality;
import org.openapitools.client.model.CodeGenConfigurationNodeEvaluateDataQualityMultiFrame;
import org.openapitools.client.model.CodeGenConfigurationNodeFillMissingValues;
import org.openapitools.client.model.CodeGenConfigurationNodeFilter;
import org.openapitools.client.model.CodeGenConfigurationNodeGovernedCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeGovernedCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeJDBCConnectorSource;
import org.openapitools.client.model.CodeGenConfigurationNodeJDBCConnectorTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeJoin;
import org.openapitools.client.model.CodeGenConfigurationNodeMerge;
import org.openapitools.client.model.CodeGenConfigurationNodeMicrosoftSQLServerCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeMicrosoftSQLServerCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeMySQLCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeMySQLCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeOracleSQLCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeOracleSQLCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodePIIDetection;
import org.openapitools.client.model.CodeGenConfigurationNodePostgreSQLCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodePostgreSQLCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeRecipe;
import org.openapitools.client.model.CodeGenConfigurationNodeRedshiftSource;
import org.openapitools.client.model.CodeGenConfigurationNodeRedshiftTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeRelationalCatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeRenameField;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogDeltaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogHudiSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3CsvSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DeltaCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DeltaDirectTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DeltaSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3DirectTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3GlueParquetTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3HudiCatalogTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3HudiDirectTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeS3HudiSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3JsonSource;
import org.openapitools.client.model.CodeGenConfigurationNodeS3ParquetSource;
import org.openapitools.client.model.CodeGenConfigurationNodeSelectFields;
import org.openapitools.client.model.CodeGenConfigurationNodeSelectFromCollection;
import org.openapitools.client.model.CodeGenConfigurationNodeSnowflakeSource;
import org.openapitools.client.model.CodeGenConfigurationNodeSnowflakeTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeSparkConnectorSource;
import org.openapitools.client.model.CodeGenConfigurationNodeSparkConnectorTarget;
import org.openapitools.client.model.CodeGenConfigurationNodeSparkSQL;
import org.openapitools.client.model.CodeGenConfigurationNodeSpigot;
import org.openapitools.client.model.CodeGenConfigurationNodeSplitFields;
import org.openapitools.client.model.CodeGenConfigurationNodeUnion;
import org.openapitools.client.model.DirectJDBCSource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CodeGenConfigurationNode
 */
public class CodeGenConfigurationNodeTest {
    private final CodeGenConfigurationNode model = new CodeGenConfigurationNode();

    /**
     * Model tests for CodeGenConfigurationNode
     */
    @Test
    public void testCodeGenConfigurationNode() {
        // TODO: test CodeGenConfigurationNode
    }

    /**
     * Test the property 'athenaConnectorSource'
     */
    @Test
    public void athenaConnectorSourceTest() {
        // TODO: test athenaConnectorSource
    }

    /**
     * Test the property 'jdBCConnectorSource'
     */
    @Test
    public void jdBCConnectorSourceTest() {
        // TODO: test jdBCConnectorSource
    }

    /**
     * Test the property 'sparkConnectorSource'
     */
    @Test
    public void sparkConnectorSourceTest() {
        // TODO: test sparkConnectorSource
    }

    /**
     * Test the property 'catalogSource'
     */
    @Test
    public void catalogSourceTest() {
        // TODO: test catalogSource
    }

    /**
     * Test the property 'redshiftSource'
     */
    @Test
    public void redshiftSourceTest() {
        // TODO: test redshiftSource
    }

    /**
     * Test the property 's3CatalogSource'
     */
    @Test
    public void s3CatalogSourceTest() {
        // TODO: test s3CatalogSource
    }

    /**
     * Test the property 's3CsvSource'
     */
    @Test
    public void s3CsvSourceTest() {
        // TODO: test s3CsvSource
    }

    /**
     * Test the property 's3JsonSource'
     */
    @Test
    public void s3JsonSourceTest() {
        // TODO: test s3JsonSource
    }

    /**
     * Test the property 's3ParquetSource'
     */
    @Test
    public void s3ParquetSourceTest() {
        // TODO: test s3ParquetSource
    }

    /**
     * Test the property 'relationalCatalogSource'
     */
    @Test
    public void relationalCatalogSourceTest() {
        // TODO: test relationalCatalogSource
    }

    /**
     * Test the property 'dynamoDBCatalogSource'
     */
    @Test
    public void dynamoDBCatalogSourceTest() {
        // TODO: test dynamoDBCatalogSource
    }

    /**
     * Test the property 'jdBCConnectorTarget'
     */
    @Test
    public void jdBCConnectorTargetTest() {
        // TODO: test jdBCConnectorTarget
    }

    /**
     * Test the property 'sparkConnectorTarget'
     */
    @Test
    public void sparkConnectorTargetTest() {
        // TODO: test sparkConnectorTarget
    }

    /**
     * Test the property 'catalogTarget'
     */
    @Test
    public void catalogTargetTest() {
        // TODO: test catalogTarget
    }

    /**
     * Test the property 'redshiftTarget'
     */
    @Test
    public void redshiftTargetTest() {
        // TODO: test redshiftTarget
    }

    /**
     * Test the property 's3CatalogTarget'
     */
    @Test
    public void s3CatalogTargetTest() {
        // TODO: test s3CatalogTarget
    }

    /**
     * Test the property 's3GlueParquetTarget'
     */
    @Test
    public void s3GlueParquetTargetTest() {
        // TODO: test s3GlueParquetTarget
    }

    /**
     * Test the property 's3DirectTarget'
     */
    @Test
    public void s3DirectTargetTest() {
        // TODO: test s3DirectTarget
    }

    /**
     * Test the property 'applyMapping'
     */
    @Test
    public void applyMappingTest() {
        // TODO: test applyMapping
    }

    /**
     * Test the property 'selectFields'
     */
    @Test
    public void selectFieldsTest() {
        // TODO: test selectFields
    }

    /**
     * Test the property 'dropFields'
     */
    @Test
    public void dropFieldsTest() {
        // TODO: test dropFields
    }

    /**
     * Test the property 'renameField'
     */
    @Test
    public void renameFieldTest() {
        // TODO: test renameField
    }

    /**
     * Test the property 'spigot'
     */
    @Test
    public void spigotTest() {
        // TODO: test spigot
    }

    /**
     * Test the property 'join'
     */
    @Test
    public void joinTest() {
        // TODO: test join
    }

    /**
     * Test the property 'splitFields'
     */
    @Test
    public void splitFieldsTest() {
        // TODO: test splitFields
    }

    /**
     * Test the property 'selectFromCollection'
     */
    @Test
    public void selectFromCollectionTest() {
        // TODO: test selectFromCollection
    }

    /**
     * Test the property 'fillMissingValues'
     */
    @Test
    public void fillMissingValuesTest() {
        // TODO: test fillMissingValues
    }

    /**
     * Test the property 'filter'
     */
    @Test
    public void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'customCode'
     */
    @Test
    public void customCodeTest() {
        // TODO: test customCode
    }

    /**
     * Test the property 'sparkSQL'
     */
    @Test
    public void sparkSQLTest() {
        // TODO: test sparkSQL
    }

    /**
     * Test the property 'directKinesisSource'
     */
    @Test
    public void directKinesisSourceTest() {
        // TODO: test directKinesisSource
    }

    /**
     * Test the property 'directKafkaSource'
     */
    @Test
    public void directKafkaSourceTest() {
        // TODO: test directKafkaSource
    }

    /**
     * Test the property 'catalogKinesisSource'
     */
    @Test
    public void catalogKinesisSourceTest() {
        // TODO: test catalogKinesisSource
    }

    /**
     * Test the property 'catalogKafkaSource'
     */
    @Test
    public void catalogKafkaSourceTest() {
        // TODO: test catalogKafkaSource
    }

    /**
     * Test the property 'dropNullFields'
     */
    @Test
    public void dropNullFieldsTest() {
        // TODO: test dropNullFields
    }

    /**
     * Test the property 'merge'
     */
    @Test
    public void mergeTest() {
        // TODO: test merge
    }

    /**
     * Test the property 'union'
     */
    @Test
    public void unionTest() {
        // TODO: test union
    }

    /**
     * Test the property 'piIDetection'
     */
    @Test
    public void piIDetectionTest() {
        // TODO: test piIDetection
    }

    /**
     * Test the property 'aggregate'
     */
    @Test
    public void aggregateTest() {
        // TODO: test aggregate
    }

    /**
     * Test the property 'dropDuplicates'
     */
    @Test
    public void dropDuplicatesTest() {
        // TODO: test dropDuplicates
    }

    /**
     * Test the property 'governedCatalogTarget'
     */
    @Test
    public void governedCatalogTargetTest() {
        // TODO: test governedCatalogTarget
    }

    /**
     * Test the property 'governedCatalogSource'
     */
    @Test
    public void governedCatalogSourceTest() {
        // TODO: test governedCatalogSource
    }

    /**
     * Test the property 'microsoftSQLServerCatalogSource'
     */
    @Test
    public void microsoftSQLServerCatalogSourceTest() {
        // TODO: test microsoftSQLServerCatalogSource
    }

    /**
     * Test the property 'mySQLCatalogSource'
     */
    @Test
    public void mySQLCatalogSourceTest() {
        // TODO: test mySQLCatalogSource
    }

    /**
     * Test the property 'oracleSQLCatalogSource'
     */
    @Test
    public void oracleSQLCatalogSourceTest() {
        // TODO: test oracleSQLCatalogSource
    }

    /**
     * Test the property 'postgreSQLCatalogSource'
     */
    @Test
    public void postgreSQLCatalogSourceTest() {
        // TODO: test postgreSQLCatalogSource
    }

    /**
     * Test the property 'microsoftSQLServerCatalogTarget'
     */
    @Test
    public void microsoftSQLServerCatalogTargetTest() {
        // TODO: test microsoftSQLServerCatalogTarget
    }

    /**
     * Test the property 'mySQLCatalogTarget'
     */
    @Test
    public void mySQLCatalogTargetTest() {
        // TODO: test mySQLCatalogTarget
    }

    /**
     * Test the property 'oracleSQLCatalogTarget'
     */
    @Test
    public void oracleSQLCatalogTargetTest() {
        // TODO: test oracleSQLCatalogTarget
    }

    /**
     * Test the property 'postgreSQLCatalogTarget'
     */
    @Test
    public void postgreSQLCatalogTargetTest() {
        // TODO: test postgreSQLCatalogTarget
    }

    /**
     * Test the property 'dynamicTransform'
     */
    @Test
    public void dynamicTransformTest() {
        // TODO: test dynamicTransform
    }

    /**
     * Test the property 'evaluateDataQuality'
     */
    @Test
    public void evaluateDataQualityTest() {
        // TODO: test evaluateDataQuality
    }

    /**
     * Test the property 's3CatalogHudiSource'
     */
    @Test
    public void s3CatalogHudiSourceTest() {
        // TODO: test s3CatalogHudiSource
    }

    /**
     * Test the property 'catalogHudiSource'
     */
    @Test
    public void catalogHudiSourceTest() {
        // TODO: test catalogHudiSource
    }

    /**
     * Test the property 's3HudiSource'
     */
    @Test
    public void s3HudiSourceTest() {
        // TODO: test s3HudiSource
    }

    /**
     * Test the property 's3HudiCatalogTarget'
     */
    @Test
    public void s3HudiCatalogTargetTest() {
        // TODO: test s3HudiCatalogTarget
    }

    /**
     * Test the property 's3HudiDirectTarget'
     */
    @Test
    public void s3HudiDirectTargetTest() {
        // TODO: test s3HudiDirectTarget
    }

    /**
     * Test the property 'directJDBCSource'
     */
    @Test
    public void directJDBCSourceTest() {
        // TODO: test directJDBCSource
    }

    /**
     * Test the property 's3CatalogDeltaSource'
     */
    @Test
    public void s3CatalogDeltaSourceTest() {
        // TODO: test s3CatalogDeltaSource
    }

    /**
     * Test the property 'catalogDeltaSource'
     */
    @Test
    public void catalogDeltaSourceTest() {
        // TODO: test catalogDeltaSource
    }

    /**
     * Test the property 's3DeltaSource'
     */
    @Test
    public void s3DeltaSourceTest() {
        // TODO: test s3DeltaSource
    }

    /**
     * Test the property 's3DeltaCatalogTarget'
     */
    @Test
    public void s3DeltaCatalogTargetTest() {
        // TODO: test s3DeltaCatalogTarget
    }

    /**
     * Test the property 's3DeltaDirectTarget'
     */
    @Test
    public void s3DeltaDirectTargetTest() {
        // TODO: test s3DeltaDirectTarget
    }

    /**
     * Test the property 'amazonRedshiftSource'
     */
    @Test
    public void amazonRedshiftSourceTest() {
        // TODO: test amazonRedshiftSource
    }

    /**
     * Test the property 'amazonRedshiftTarget'
     */
    @Test
    public void amazonRedshiftTargetTest() {
        // TODO: test amazonRedshiftTarget
    }

    /**
     * Test the property 'evaluateDataQualityMultiFrame'
     */
    @Test
    public void evaluateDataQualityMultiFrameTest() {
        // TODO: test evaluateDataQualityMultiFrame
    }

    /**
     * Test the property 'recipe'
     */
    @Test
    public void recipeTest() {
        // TODO: test recipe
    }

    /**
     * Test the property 'snowflakeSource'
     */
    @Test
    public void snowflakeSourceTest() {
        // TODO: test snowflakeSource
    }

    /**
     * Test the property 'snowflakeTarget'
     */
    @Test
    public void snowflakeTargetTest() {
        // TODO: test snowflakeTarget
    }

}
