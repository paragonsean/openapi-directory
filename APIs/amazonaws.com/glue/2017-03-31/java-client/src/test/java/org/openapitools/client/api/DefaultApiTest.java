/*
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCreatePartitionRequest;
import org.openapitools.client.model.BatchCreatePartitionResponse;
import org.openapitools.client.model.BatchDeleteConnectionRequest;
import org.openapitools.client.model.BatchDeleteConnectionResponse;
import org.openapitools.client.model.BatchDeletePartitionRequest;
import org.openapitools.client.model.BatchDeletePartitionResponse;
import org.openapitools.client.model.BatchDeleteTableRequest;
import org.openapitools.client.model.BatchDeleteTableResponse;
import org.openapitools.client.model.BatchDeleteTableVersionRequest;
import org.openapitools.client.model.BatchDeleteTableVersionResponse;
import org.openapitools.client.model.BatchGetBlueprintsRequest;
import org.openapitools.client.model.BatchGetBlueprintsResponse;
import org.openapitools.client.model.BatchGetCrawlersRequest;
import org.openapitools.client.model.BatchGetCrawlersResponse;
import org.openapitools.client.model.BatchGetCustomEntityTypesRequest;
import org.openapitools.client.model.BatchGetCustomEntityTypesResponse;
import org.openapitools.client.model.BatchGetDataQualityResultRequest;
import org.openapitools.client.model.BatchGetDataQualityResultResponse;
import org.openapitools.client.model.BatchGetDevEndpointsRequest;
import org.openapitools.client.model.BatchGetDevEndpointsResponse;
import org.openapitools.client.model.BatchGetJobsRequest;
import org.openapitools.client.model.BatchGetJobsResponse;
import org.openapitools.client.model.BatchGetPartitionRequest;
import org.openapitools.client.model.BatchGetPartitionResponse;
import org.openapitools.client.model.BatchGetTriggersRequest;
import org.openapitools.client.model.BatchGetTriggersResponse;
import org.openapitools.client.model.BatchGetWorkflowsRequest;
import org.openapitools.client.model.BatchGetWorkflowsResponse;
import org.openapitools.client.model.BatchStopJobRunRequest;
import org.openapitools.client.model.BatchStopJobRunResponse;
import org.openapitools.client.model.BatchUpdatePartitionRequest;
import org.openapitools.client.model.BatchUpdatePartitionResponse;
import org.openapitools.client.model.CancelDataQualityRuleRecommendationRunRequest;
import org.openapitools.client.model.CancelDataQualityRulesetEvaluationRunRequest;
import org.openapitools.client.model.CancelMLTaskRunRequest;
import org.openapitools.client.model.CancelMLTaskRunResponse;
import org.openapitools.client.model.CancelStatementRequest;
import org.openapitools.client.model.CheckSchemaVersionValidityInput;
import org.openapitools.client.model.CheckSchemaVersionValidityResponse;
import org.openapitools.client.model.CreateBlueprintRequest;
import org.openapitools.client.model.CreateBlueprintResponse;
import org.openapitools.client.model.CreateClassifierRequest;
import org.openapitools.client.model.CreateConnectionRequest;
import org.openapitools.client.model.CreateCrawlerRequest;
import org.openapitools.client.model.CreateCustomEntityTypeRequest;
import org.openapitools.client.model.CreateCustomEntityTypeResponse;
import org.openapitools.client.model.CreateDataQualityRulesetRequest;
import org.openapitools.client.model.CreateDataQualityRulesetResponse;
import org.openapitools.client.model.CreateDatabaseRequest;
import org.openapitools.client.model.CreateDevEndpointRequest;
import org.openapitools.client.model.CreateDevEndpointResponse;
import org.openapitools.client.model.CreateJobRequest;
import org.openapitools.client.model.CreateJobResponse;
import org.openapitools.client.model.CreateMLTransformRequest;
import org.openapitools.client.model.CreateMLTransformResponse;
import org.openapitools.client.model.CreatePartitionIndexRequest;
import org.openapitools.client.model.CreatePartitionRequest;
import org.openapitools.client.model.CreateRegistryInput;
import org.openapitools.client.model.CreateRegistryResponse;
import org.openapitools.client.model.CreateSchemaInput;
import org.openapitools.client.model.CreateSchemaResponse;
import org.openapitools.client.model.CreateScriptRequest;
import org.openapitools.client.model.CreateScriptResponse;
import org.openapitools.client.model.CreateSecurityConfigurationRequest;
import org.openapitools.client.model.CreateSecurityConfigurationResponse;
import org.openapitools.client.model.CreateSessionRequest;
import org.openapitools.client.model.CreateSessionResponse;
import org.openapitools.client.model.CreateTableRequest;
import org.openapitools.client.model.CreateTriggerRequest;
import org.openapitools.client.model.CreateTriggerResponse;
import org.openapitools.client.model.CreateUserDefinedFunctionRequest;
import org.openapitools.client.model.CreateWorkflowRequest;
import org.openapitools.client.model.CreateWorkflowResponse;
import org.openapitools.client.model.DeleteBlueprintRequest;
import org.openapitools.client.model.DeleteBlueprintResponse;
import org.openapitools.client.model.DeleteClassifierRequest;
import org.openapitools.client.model.DeleteColumnStatisticsForPartitionRequest;
import org.openapitools.client.model.DeleteColumnStatisticsForTableRequest;
import org.openapitools.client.model.DeleteConnectionRequest;
import org.openapitools.client.model.DeleteCrawlerRequest;
import org.openapitools.client.model.DeleteCustomEntityTypeRequest;
import org.openapitools.client.model.DeleteCustomEntityTypeResponse;
import org.openapitools.client.model.DeleteDataQualityRulesetRequest;
import org.openapitools.client.model.DeleteDatabaseRequest;
import org.openapitools.client.model.DeleteDevEndpointRequest;
import org.openapitools.client.model.DeleteJobRequest;
import org.openapitools.client.model.DeleteJobResponse;
import org.openapitools.client.model.DeleteMLTransformRequest;
import org.openapitools.client.model.DeleteMLTransformResponse;
import org.openapitools.client.model.DeletePartitionIndexRequest;
import org.openapitools.client.model.DeletePartitionRequest;
import org.openapitools.client.model.DeleteRegistryInput;
import org.openapitools.client.model.DeleteRegistryResponse;
import org.openapitools.client.model.DeleteResourcePolicyRequest;
import org.openapitools.client.model.DeleteSchemaInput;
import org.openapitools.client.model.DeleteSchemaResponse;
import org.openapitools.client.model.DeleteSchemaVersionsInput;
import org.openapitools.client.model.DeleteSchemaVersionsResponse;
import org.openapitools.client.model.DeleteSecurityConfigurationRequest;
import org.openapitools.client.model.DeleteSessionRequest;
import org.openapitools.client.model.DeleteSessionResponse;
import org.openapitools.client.model.DeleteTableRequest;
import org.openapitools.client.model.DeleteTableVersionRequest;
import org.openapitools.client.model.DeleteTriggerRequest;
import org.openapitools.client.model.DeleteTriggerResponse;
import org.openapitools.client.model.DeleteUserDefinedFunctionRequest;
import org.openapitools.client.model.DeleteWorkflowRequest;
import org.openapitools.client.model.DeleteWorkflowResponse;
import org.openapitools.client.model.GetBlueprintRequest;
import org.openapitools.client.model.GetBlueprintResponse;
import org.openapitools.client.model.GetBlueprintRunRequest;
import org.openapitools.client.model.GetBlueprintRunResponse;
import org.openapitools.client.model.GetBlueprintRunsRequest;
import org.openapitools.client.model.GetBlueprintRunsResponse;
import org.openapitools.client.model.GetCatalogImportStatusRequest;
import org.openapitools.client.model.GetCatalogImportStatusResponse;
import org.openapitools.client.model.GetClassifierRequest;
import org.openapitools.client.model.GetClassifierResponse;
import org.openapitools.client.model.GetClassifiersRequest;
import org.openapitools.client.model.GetClassifiersResponse;
import org.openapitools.client.model.GetColumnStatisticsForPartitionRequest;
import org.openapitools.client.model.GetColumnStatisticsForPartitionResponse;
import org.openapitools.client.model.GetColumnStatisticsForTableRequest;
import org.openapitools.client.model.GetColumnStatisticsForTableResponse;
import org.openapitools.client.model.GetConnectionRequest;
import org.openapitools.client.model.GetConnectionResponse;
import org.openapitools.client.model.GetConnectionsRequest;
import org.openapitools.client.model.GetConnectionsResponse;
import org.openapitools.client.model.GetCrawlerMetricsRequest;
import org.openapitools.client.model.GetCrawlerMetricsResponse;
import org.openapitools.client.model.GetCrawlerRequest;
import org.openapitools.client.model.GetCrawlerResponse;
import org.openapitools.client.model.GetCrawlersRequest;
import org.openapitools.client.model.GetCrawlersResponse;
import org.openapitools.client.model.GetCustomEntityTypeRequest;
import org.openapitools.client.model.GetCustomEntityTypeResponse;
import org.openapitools.client.model.GetDataCatalogEncryptionSettingsRequest;
import org.openapitools.client.model.GetDataCatalogEncryptionSettingsResponse;
import org.openapitools.client.model.GetDataQualityResultRequest;
import org.openapitools.client.model.GetDataQualityResultResponse;
import org.openapitools.client.model.GetDataQualityRuleRecommendationRunRequest;
import org.openapitools.client.model.GetDataQualityRuleRecommendationRunResponse;
import org.openapitools.client.model.GetDataQualityRulesetEvaluationRunRequest;
import org.openapitools.client.model.GetDataQualityRulesetEvaluationRunResponse;
import org.openapitools.client.model.GetDataQualityRulesetRequest;
import org.openapitools.client.model.GetDataQualityRulesetResponse;
import org.openapitools.client.model.GetDatabaseRequest;
import org.openapitools.client.model.GetDatabaseResponse;
import org.openapitools.client.model.GetDatabasesRequest;
import org.openapitools.client.model.GetDatabasesResponse;
import org.openapitools.client.model.GetDataflowGraphRequest;
import org.openapitools.client.model.GetDataflowGraphResponse;
import org.openapitools.client.model.GetDevEndpointRequest;
import org.openapitools.client.model.GetDevEndpointResponse;
import org.openapitools.client.model.GetDevEndpointsRequest;
import org.openapitools.client.model.GetDevEndpointsResponse;
import org.openapitools.client.model.GetJobBookmarkRequest;
import org.openapitools.client.model.GetJobBookmarkResponse;
import org.openapitools.client.model.GetJobRequest;
import org.openapitools.client.model.GetJobResponse;
import org.openapitools.client.model.GetJobRunRequest;
import org.openapitools.client.model.GetJobRunResponse;
import org.openapitools.client.model.GetJobRunsRequest;
import org.openapitools.client.model.GetJobRunsResponse;
import org.openapitools.client.model.GetJobsRequest;
import org.openapitools.client.model.GetJobsResponse;
import org.openapitools.client.model.GetMLTaskRunRequest;
import org.openapitools.client.model.GetMLTaskRunResponse;
import org.openapitools.client.model.GetMLTaskRunsRequest;
import org.openapitools.client.model.GetMLTaskRunsResponse;
import org.openapitools.client.model.GetMLTransformRequest;
import org.openapitools.client.model.GetMLTransformResponse;
import org.openapitools.client.model.GetMLTransformsRequest;
import org.openapitools.client.model.GetMLTransformsResponse;
import org.openapitools.client.model.GetMappingRequest;
import org.openapitools.client.model.GetMappingResponse;
import org.openapitools.client.model.GetPartitionIndexesRequest;
import org.openapitools.client.model.GetPartitionIndexesResponse;
import org.openapitools.client.model.GetPartitionRequest;
import org.openapitools.client.model.GetPartitionResponse;
import org.openapitools.client.model.GetPartitionsRequest;
import org.openapitools.client.model.GetPartitionsResponse;
import org.openapitools.client.model.GetPlanRequest;
import org.openapitools.client.model.GetPlanResponse;
import org.openapitools.client.model.GetRegistryInput;
import org.openapitools.client.model.GetRegistryResponse;
import org.openapitools.client.model.GetResourcePoliciesRequest;
import org.openapitools.client.model.GetResourcePoliciesResponse;
import org.openapitools.client.model.GetResourcePolicyRequest;
import org.openapitools.client.model.GetResourcePolicyResponse;
import org.openapitools.client.model.GetSchemaByDefinitionInput;
import org.openapitools.client.model.GetSchemaByDefinitionResponse;
import org.openapitools.client.model.GetSchemaInput;
import org.openapitools.client.model.GetSchemaResponse;
import org.openapitools.client.model.GetSchemaVersionInput;
import org.openapitools.client.model.GetSchemaVersionResponse;
import org.openapitools.client.model.GetSchemaVersionsDiffInput;
import org.openapitools.client.model.GetSchemaVersionsDiffResponse;
import org.openapitools.client.model.GetSecurityConfigurationRequest;
import org.openapitools.client.model.GetSecurityConfigurationResponse;
import org.openapitools.client.model.GetSecurityConfigurationsRequest;
import org.openapitools.client.model.GetSecurityConfigurationsResponse;
import org.openapitools.client.model.GetSessionRequest;
import org.openapitools.client.model.GetSessionResponse;
import org.openapitools.client.model.GetStatementRequest;
import org.openapitools.client.model.GetStatementResponse;
import org.openapitools.client.model.GetTableRequest;
import org.openapitools.client.model.GetTableResponse;
import org.openapitools.client.model.GetTableVersionRequest;
import org.openapitools.client.model.GetTableVersionResponse;
import org.openapitools.client.model.GetTableVersionsRequest;
import org.openapitools.client.model.GetTableVersionsResponse;
import org.openapitools.client.model.GetTablesRequest;
import org.openapitools.client.model.GetTablesResponse;
import org.openapitools.client.model.GetTagsRequest;
import org.openapitools.client.model.GetTagsResponse;
import org.openapitools.client.model.GetTriggerRequest;
import org.openapitools.client.model.GetTriggerResponse;
import org.openapitools.client.model.GetTriggersRequest;
import org.openapitools.client.model.GetTriggersResponse;
import org.openapitools.client.model.GetUnfilteredPartitionMetadataRequest;
import org.openapitools.client.model.GetUnfilteredPartitionMetadataResponse;
import org.openapitools.client.model.GetUnfilteredPartitionsMetadataRequest;
import org.openapitools.client.model.GetUnfilteredPartitionsMetadataResponse;
import org.openapitools.client.model.GetUnfilteredTableMetadataRequest;
import org.openapitools.client.model.GetUnfilteredTableMetadataResponse;
import org.openapitools.client.model.GetUserDefinedFunctionRequest;
import org.openapitools.client.model.GetUserDefinedFunctionResponse;
import org.openapitools.client.model.GetUserDefinedFunctionsRequest;
import org.openapitools.client.model.GetUserDefinedFunctionsResponse;
import org.openapitools.client.model.GetWorkflowRequest;
import org.openapitools.client.model.GetWorkflowResponse;
import org.openapitools.client.model.GetWorkflowRunPropertiesRequest;
import org.openapitools.client.model.GetWorkflowRunPropertiesResponse;
import org.openapitools.client.model.GetWorkflowRunRequest;
import org.openapitools.client.model.GetWorkflowRunResponse;
import org.openapitools.client.model.GetWorkflowRunsRequest;
import org.openapitools.client.model.GetWorkflowRunsResponse;
import org.openapitools.client.model.ImportCatalogToGlueRequest;
import org.openapitools.client.model.ListBlueprintsRequest;
import org.openapitools.client.model.ListBlueprintsResponse;
import org.openapitools.client.model.ListCrawlersRequest;
import org.openapitools.client.model.ListCrawlersResponse;
import org.openapitools.client.model.ListCrawlsRequest;
import org.openapitools.client.model.ListCrawlsResponse;
import org.openapitools.client.model.ListCustomEntityTypesRequest;
import org.openapitools.client.model.ListCustomEntityTypesResponse;
import org.openapitools.client.model.ListDataQualityResultsRequest;
import org.openapitools.client.model.ListDataQualityResultsResponse;
import org.openapitools.client.model.ListDataQualityRuleRecommendationRunsRequest;
import org.openapitools.client.model.ListDataQualityRuleRecommendationRunsResponse;
import org.openapitools.client.model.ListDataQualityRulesetEvaluationRunsRequest;
import org.openapitools.client.model.ListDataQualityRulesetEvaluationRunsResponse;
import org.openapitools.client.model.ListDataQualityRulesetsRequest;
import org.openapitools.client.model.ListDataQualityRulesetsResponse;
import org.openapitools.client.model.ListDevEndpointsRequest;
import org.openapitools.client.model.ListDevEndpointsResponse;
import org.openapitools.client.model.ListJobsRequest;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListMLTransformsRequest;
import org.openapitools.client.model.ListMLTransformsResponse;
import org.openapitools.client.model.ListRegistriesInput;
import org.openapitools.client.model.ListRegistriesResponse;
import org.openapitools.client.model.ListSchemaVersionsInput;
import org.openapitools.client.model.ListSchemaVersionsResponse;
import org.openapitools.client.model.ListSchemasInput;
import org.openapitools.client.model.ListSchemasResponse;
import org.openapitools.client.model.ListSessionsRequest;
import org.openapitools.client.model.ListSessionsResponse;
import org.openapitools.client.model.ListStatementsRequest;
import org.openapitools.client.model.ListStatementsResponse;
import org.openapitools.client.model.ListTriggersRequest;
import org.openapitools.client.model.ListTriggersResponse;
import org.openapitools.client.model.ListWorkflowsRequest;
import org.openapitools.client.model.ListWorkflowsResponse;
import org.openapitools.client.model.PutDataCatalogEncryptionSettingsRequest;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResponse;
import org.openapitools.client.model.PutSchemaVersionMetadataInput;
import org.openapitools.client.model.PutSchemaVersionMetadataResponse;
import org.openapitools.client.model.PutWorkflowRunPropertiesRequest;
import org.openapitools.client.model.QuerySchemaVersionMetadataInput;
import org.openapitools.client.model.QuerySchemaVersionMetadataResponse;
import org.openapitools.client.model.RegisterSchemaVersionInput;
import org.openapitools.client.model.RegisterSchemaVersionResponse;
import org.openapitools.client.model.RemoveSchemaVersionMetadataInput;
import org.openapitools.client.model.RemoveSchemaVersionMetadataResponse;
import org.openapitools.client.model.ResetJobBookmarkRequest;
import org.openapitools.client.model.ResetJobBookmarkResponse;
import org.openapitools.client.model.ResumeWorkflowRunRequest;
import org.openapitools.client.model.ResumeWorkflowRunResponse;
import org.openapitools.client.model.RunStatementRequest;
import org.openapitools.client.model.RunStatementResponse;
import org.openapitools.client.model.SearchTablesRequest;
import org.openapitools.client.model.SearchTablesResponse;
import org.openapitools.client.model.StartBlueprintRunRequest;
import org.openapitools.client.model.StartBlueprintRunResponse;
import org.openapitools.client.model.StartCrawlerRequest;
import org.openapitools.client.model.StartCrawlerScheduleRequest;
import org.openapitools.client.model.StartDataQualityRuleRecommendationRunRequest;
import org.openapitools.client.model.StartDataQualityRuleRecommendationRunResponse;
import org.openapitools.client.model.StartDataQualityRulesetEvaluationRunRequest;
import org.openapitools.client.model.StartDataQualityRulesetEvaluationRunResponse;
import org.openapitools.client.model.StartExportLabelsTaskRunRequest;
import org.openapitools.client.model.StartExportLabelsTaskRunResponse;
import org.openapitools.client.model.StartImportLabelsTaskRunRequest;
import org.openapitools.client.model.StartImportLabelsTaskRunResponse;
import org.openapitools.client.model.StartJobRunRequest;
import org.openapitools.client.model.StartJobRunResponse;
import org.openapitools.client.model.StartMLEvaluationTaskRunRequest;
import org.openapitools.client.model.StartMLEvaluationTaskRunResponse;
import org.openapitools.client.model.StartMLLabelingSetGenerationTaskRunRequest;
import org.openapitools.client.model.StartMLLabelingSetGenerationTaskRunResponse;
import org.openapitools.client.model.StartTriggerRequest;
import org.openapitools.client.model.StartTriggerResponse;
import org.openapitools.client.model.StartWorkflowRunRequest;
import org.openapitools.client.model.StartWorkflowRunResponse;
import org.openapitools.client.model.StopCrawlerRequest;
import org.openapitools.client.model.StopCrawlerScheduleRequest;
import org.openapitools.client.model.StopSessionRequest;
import org.openapitools.client.model.StopSessionResponse;
import org.openapitools.client.model.StopTriggerRequest;
import org.openapitools.client.model.StopTriggerResponse;
import org.openapitools.client.model.StopWorkflowRunRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateBlueprintRequest;
import org.openapitools.client.model.UpdateBlueprintResponse;
import org.openapitools.client.model.UpdateClassifierRequest;
import org.openapitools.client.model.UpdateColumnStatisticsForPartitionRequest;
import org.openapitools.client.model.UpdateColumnStatisticsForPartitionResponse;
import org.openapitools.client.model.UpdateColumnStatisticsForTableRequest;
import org.openapitools.client.model.UpdateColumnStatisticsForTableResponse;
import org.openapitools.client.model.UpdateConnectionRequest;
import org.openapitools.client.model.UpdateCrawlerRequest;
import org.openapitools.client.model.UpdateCrawlerScheduleRequest;
import org.openapitools.client.model.UpdateDataQualityRulesetRequest;
import org.openapitools.client.model.UpdateDataQualityRulesetResponse;
import org.openapitools.client.model.UpdateDatabaseRequest;
import org.openapitools.client.model.UpdateDevEndpointRequest;
import org.openapitools.client.model.UpdateJobFromSourceControlRequest;
import org.openapitools.client.model.UpdateJobFromSourceControlResponse;
import org.openapitools.client.model.UpdateJobRequest;
import org.openapitools.client.model.UpdateJobResponse;
import org.openapitools.client.model.UpdateMLTransformRequest;
import org.openapitools.client.model.UpdateMLTransformResponse;
import org.openapitools.client.model.UpdatePartitionRequest;
import org.openapitools.client.model.UpdateRegistryInput;
import org.openapitools.client.model.UpdateRegistryResponse;
import org.openapitools.client.model.UpdateSchemaInput;
import org.openapitools.client.model.UpdateSchemaResponse;
import org.openapitools.client.model.UpdateSourceControlFromJobRequest;
import org.openapitools.client.model.UpdateSourceControlFromJobResponse;
import org.openapitools.client.model.UpdateTableRequest;
import org.openapitools.client.model.UpdateTriggerRequest;
import org.openapitools.client.model.UpdateTriggerResponse;
import org.openapitools.client.model.UpdateUserDefinedFunctionRequest;
import org.openapitools.client.model.UpdateWorkflowRequest;
import org.openapitools.client.model.UpdateWorkflowResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates one or more partitions in a batch operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreatePartitionTest() throws ApiException {
        String xAmzTarget = null;
        BatchCreatePartitionRequest batchCreatePartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCreatePartitionResponse response = api.batchCreatePartition(xAmzTarget, batchCreatePartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a list of connection definitions from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteConnectionTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteConnectionRequest batchDeleteConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteConnectionResponse response = api.batchDeleteConnection(xAmzTarget, batchDeleteConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes one or more partitions in a batch operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeletePartitionTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeletePartitionRequest batchDeletePartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeletePartitionResponse response = api.batchDeletePartition(xAmzTarget, batchDeletePartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes multiple tables at once.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. Glue deletes these \&quot;orphaned\&quot; resources asynchronously in a timely manner, at the discretion of the service.&lt;/p&gt; &lt;p&gt;To ensure the immediate deletion of all related resources, before calling &lt;code&gt;BatchDeleteTable&lt;/code&gt;, use &lt;code&gt;DeleteTableVersion&lt;/code&gt; or &lt;code&gt;BatchDeleteTableVersion&lt;/code&gt;, and &lt;code&gt;DeletePartition&lt;/code&gt; or &lt;code&gt;BatchDeletePartition&lt;/code&gt;, to delete any resources that belong to the table.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteTableTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteTableRequest batchDeleteTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteTableResponse response = api.batchDeleteTable(xAmzTarget, batchDeleteTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified batch of versions of a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteTableVersionTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteTableVersionRequest batchDeleteTableVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteTableVersionResponse response = api.batchDeleteTableVersion(xAmzTarget, batchDeleteTableVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a list of blueprints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetBlueprintsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetBlueprintsRequest batchGetBlueprintsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetBlueprintsResponse response = api.batchGetBlueprints(xAmzTarget, batchGetBlueprintsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of resource metadata for a given list of crawler names. After calling the &lt;code&gt;ListCrawlers&lt;/code&gt; operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetCrawlersTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetCrawlersRequest batchGetCrawlersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetCrawlersResponse response = api.batchGetCrawlers(xAmzTarget, batchGetCrawlersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details for the custom patterns specified by a list of names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetCustomEntityTypesTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetCustomEntityTypesRequest batchGetCustomEntityTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetCustomEntityTypesResponse response = api.batchGetCustomEntityTypes(xAmzTarget, batchGetCustomEntityTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of data quality results for the specified result IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetDataQualityResultTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetDataQualityResultRequest batchGetDataQualityResultRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetDataQualityResultResponse response = api.batchGetDataQualityResult(xAmzTarget, batchGetDataQualityResultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of resource metadata for a given list of development endpoint names. After calling the &lt;code&gt;ListDevEndpoints&lt;/code&gt; operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetDevEndpointsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetDevEndpointsRequest batchGetDevEndpointsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetDevEndpointsResponse response = api.batchGetDevEndpoints(xAmzTarget, batchGetDevEndpointsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of resource metadata for a given list of job names. After calling the &lt;code&gt;ListJobs&lt;/code&gt; operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetJobsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetJobsRequest batchGetJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetJobsResponse response = api.batchGetJobs(xAmzTarget, batchGetJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves partitions in a batch request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetPartitionTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetPartitionRequest batchGetPartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetPartitionResponse response = api.batchGetPartition(xAmzTarget, batchGetPartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of resource metadata for a given list of trigger names. After calling the &lt;code&gt;ListTriggers&lt;/code&gt; operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetTriggersTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetTriggersRequest batchGetTriggersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetTriggersResponse response = api.batchGetTriggers(xAmzTarget, batchGetTriggersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of resource metadata for a given list of workflow names. After calling the &lt;code&gt;ListWorkflows&lt;/code&gt; operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetWorkflowsTest() throws ApiException {
        String xAmzTarget = null;
        BatchGetWorkflowsRequest batchGetWorkflowsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetWorkflowsResponse response = api.batchGetWorkflows(xAmzTarget, batchGetWorkflowsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops one or more job runs for a specified job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchStopJobRunTest() throws ApiException {
        String xAmzTarget = null;
        BatchStopJobRunRequest batchStopJobRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchStopJobRunResponse response = api.batchStopJobRun(xAmzTarget, batchStopJobRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates one or more partitions in a batch operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdatePartitionTest() throws ApiException {
        String xAmzTarget = null;
        BatchUpdatePartitionRequest batchUpdatePartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdatePartitionResponse response = api.batchUpdatePartition(xAmzTarget, batchUpdatePartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels the specified recommendation run that was being used to generate rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDataQualityRuleRecommendationRunTest() throws ApiException {
        String xAmzTarget = null;
        CancelDataQualityRuleRecommendationRunRequest cancelDataQualityRuleRecommendationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelDataQualityRuleRecommendationRun(xAmzTarget, cancelDataQualityRuleRecommendationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a run where a ruleset is being evaluated against a data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDataQualityRulesetEvaluationRunTest() throws ApiException {
        String xAmzTarget = null;
        CancelDataQualityRulesetEvaluationRunRequest cancelDataQualityRulesetEvaluationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelDataQualityRulesetEvaluationRun(xAmzTarget, cancelDataQualityRulesetEvaluationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can cancel a machine learning task run at any time by calling &lt;code&gt;CancelMLTaskRun&lt;/code&gt; with a task run&#39;s parent transform&#39;s &lt;code&gt;TransformID&lt;/code&gt; and the task run&#39;s &lt;code&gt;TaskRunId&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelMLTaskRunTest() throws ApiException {
        String xAmzTarget = null;
        CancelMLTaskRunRequest cancelMLTaskRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelMLTaskRunResponse response = api.cancelMLTaskRun(xAmzTarget, cancelMLTaskRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels the statement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelStatementTest() throws ApiException {
        String xAmzTarget = null;
        CancelStatementRequest cancelStatementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelStatement(xAmzTarget, cancelStatementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using &lt;code&gt;DataFormat&lt;/code&gt; as the format. Since it does not take a schema set name, no compatibility checks are performed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSchemaVersionValidityTest() throws ApiException {
        String xAmzTarget = null;
        CheckSchemaVersionValidityInput checkSchemaVersionValidityInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CheckSchemaVersionValidityResponse response = api.checkSchemaVersionValidity(xAmzTarget, checkSchemaVersionValidityInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers a blueprint with Glue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBlueprintTest() throws ApiException {
        String xAmzTarget = null;
        CreateBlueprintRequest createBlueprintRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBlueprintResponse response = api.createBlueprint(xAmzTarget, createBlueprintRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a classifier in the user&#39;s account. This can be a &lt;code&gt;GrokClassifier&lt;/code&gt;, an &lt;code&gt;XMLClassifier&lt;/code&gt;, a &lt;code&gt;JsonClassifier&lt;/code&gt;, or a &lt;code&gt;CsvClassifier&lt;/code&gt;, depending on which field of the request is present.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClassifierTest() throws ApiException {
        String xAmzTarget = null;
        CreateClassifierRequest createClassifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createClassifier(xAmzTarget, createClassifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a connection definition in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectionTest() throws ApiException {
        String xAmzTarget = null;
        CreateConnectionRequest createConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createConnection(xAmzTarget, createConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the &lt;code&gt;s3Targets&lt;/code&gt; field, the &lt;code&gt;jdbcTargets&lt;/code&gt; field, or the &lt;code&gt;DynamoDBTargets&lt;/code&gt; field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCrawlerTest() throws ApiException {
        String xAmzTarget = null;
        CreateCrawlerRequest createCrawlerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createCrawler(xAmzTarget, createCrawlerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a custom pattern that is used to detect sensitive data across the columns and rows of your structured data.&lt;/p&gt; &lt;p&gt;Each custom pattern you create specifies a regular expression and an optional list of context words. If no context words are passed only a regular expression is checked.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomEntityTypeTest() throws ApiException {
        String xAmzTarget = null;
        CreateCustomEntityTypeRequest createCustomEntityTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCustomEntityTypeResponse response = api.createCustomEntityType(xAmzTarget, createCustomEntityTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a data quality ruleset with DQDL rules applied to a specified Glue table.&lt;/p&gt; &lt;p&gt;You create the ruleset using the Data Quality Definition Language (DQDL). For more information, see the Glue developer guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataQualityRulesetTest() throws ApiException {
        String xAmzTarget = null;
        CreateDataQualityRulesetRequest createDataQualityRulesetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataQualityRulesetResponse response = api.createDataQualityRuleset(xAmzTarget, createDataQualityRulesetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new database in a Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        CreateDatabaseRequest createDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createDatabase(xAmzTarget, createDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new development endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDevEndpointTest() throws ApiException {
        String xAmzTarget = null;
        CreateDevEndpointRequest createDevEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDevEndpointResponse response = api.createDevEndpoint(xAmzTarget, createDevEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateJobRequest createJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateJobResponse response = api.createJob(xAmzTarget, createJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Glue machine learning transform. This operation creates the transform and all the necessary parameters to train it.&lt;/p&gt; &lt;p&gt;Call this operation as the first step in the process of using a machine learning transform (such as the &lt;code&gt;FindMatches&lt;/code&gt; transform) for deduplicating data. You can provide an optional &lt;code&gt;Description&lt;/code&gt;, in addition to the parameters that you want to use for your algorithm.&lt;/p&gt; &lt;p&gt;You must also specify certain parameters for the tasks that Glue runs on your behalf as part of learning from your data and creating a high-quality machine learning transform. These parameters include &lt;code&gt;Role&lt;/code&gt;, and optionally, &lt;code&gt;AllocatedCapacity&lt;/code&gt;, &lt;code&gt;Timeout&lt;/code&gt;, and &lt;code&gt;MaxRetries&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html\&quot;&gt;Jobs&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMLTransformTest() throws ApiException {
        String xAmzTarget = null;
        CreateMLTransformRequest createMLTransformRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMLTransformResponse response = api.createMLTransform(xAmzTarget, createMLTransformRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPartitionTest() throws ApiException {
        String xAmzTarget = null;
        CreatePartitionRequest createPartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createPartition(xAmzTarget, createPartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a specified partition index in an existing table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPartitionIndexTest() throws ApiException {
        String xAmzTarget = null;
        CreatePartitionIndexRequest createPartitionIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createPartitionIndex(xAmzTarget, createPartitionIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new registry which may be used to hold a collection of schemas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRegistryTest() throws ApiException {
        String xAmzTarget = null;
        CreateRegistryInput createRegistryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRegistryResponse response = api.createRegistry(xAmzTarget, createRegistryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.&lt;/p&gt; &lt;p&gt;When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode \&quot;DISABLED\&quot; restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the &lt;code&gt;RegisterSchemaVersion&lt;/code&gt; API is used.&lt;/p&gt; &lt;p&gt;When this API is called without a &lt;code&gt;RegistryId&lt;/code&gt;, this will create an entry for a \&quot;default-registry\&quot; in the registry database tables, if it is not already present.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSchemaTest() throws ApiException {
        String xAmzTarget = null;
        CreateSchemaInput createSchemaInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSchemaResponse response = api.createSchema(xAmzTarget, createSchemaInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Transforms a directed acyclic graph (DAG) into code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScriptTest() throws ApiException {
        String xAmzTarget = null;
        CreateScriptRequest createScriptRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateScriptResponse response = api.createScript(xAmzTarget, createScriptRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new security configuration. A security configuration is a set of security properties that can be used by Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in Glue, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html\&quot;&gt;Encrypting Data Written by Crawlers, Jobs, and Development Endpoints&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSecurityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateSecurityConfigurationRequest createSecurityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSecurityConfigurationResponse response = api.createSecurityConfiguration(xAmzTarget, createSecurityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        String xAmzTarget = null;
        CreateSessionRequest createSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSessionResponse response = api.createSession(xAmzTarget, createSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new table definition in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTableTest() throws ApiException {
        String xAmzTarget = null;
        CreateTableRequest createTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createTable(xAmzTarget, createTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTriggerTest() throws ApiException {
        String xAmzTarget = null;
        CreateTriggerRequest createTriggerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTriggerResponse response = api.createTrigger(xAmzTarget, createTriggerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new function definition in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserDefinedFunctionTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserDefinedFunctionRequest createUserDefinedFunctionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createUserDefinedFunction(xAmzTarget, createUserDefinedFunctionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkflowRequest createWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkflowResponse response = api.createWorkflow(xAmzTarget, createWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing blueprint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBlueprintTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBlueprintRequest deleteBlueprintRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBlueprintResponse response = api.deleteBlueprint(xAmzTarget, deleteBlueprintRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a classifier from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClassifierTest() throws ApiException {
        String xAmzTarget = null;
        DeleteClassifierRequest deleteClassifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteClassifier(xAmzTarget, deleteClassifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete the partition column statistics of a column.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) permission required for this operation is &lt;code&gt;DeletePartition&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteColumnStatisticsForPartitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteColumnStatisticsForPartitionRequest deleteColumnStatisticsForPartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteColumnStatisticsForPartition(xAmzTarget, deleteColumnStatisticsForPartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves table statistics of columns.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) permission required for this operation is &lt;code&gt;DeleteTable&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteColumnStatisticsForTableTest() throws ApiException {
        String xAmzTarget = null;
        DeleteColumnStatisticsForTableRequest deleteColumnStatisticsForTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteColumnStatisticsForTable(xAmzTarget, deleteColumnStatisticsForTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a connection from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConnectionRequest deleteConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConnection(xAmzTarget, deleteConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a specified crawler from the Glue Data Catalog, unless the crawler state is &lt;code&gt;RUNNING&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCrawlerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCrawlerRequest deleteCrawlerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteCrawler(xAmzTarget, deleteCrawlerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a custom pattern by specifying its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomEntityTypeTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCustomEntityTypeRequest deleteCustomEntityTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCustomEntityTypeResponse response = api.deleteCustomEntityType(xAmzTarget, deleteCustomEntityTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a data quality ruleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataQualityRulesetTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDataQualityRulesetRequest deleteDataQualityRulesetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDataQualityRuleset(xAmzTarget, deleteDataQualityRulesetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a specified database from a Data Catalog.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After completing this operation, you no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. Glue deletes these \&quot;orphaned\&quot; resources asynchronously in a timely manner, at the discretion of the service.&lt;/p&gt; &lt;p&gt;To ensure the immediate deletion of all related resources, before calling &lt;code&gt;DeleteDatabase&lt;/code&gt;, use &lt;code&gt;DeleteTableVersion&lt;/code&gt; or &lt;code&gt;BatchDeleteTableVersion&lt;/code&gt;, &lt;code&gt;DeletePartition&lt;/code&gt; or &lt;code&gt;BatchDeletePartition&lt;/code&gt;, &lt;code&gt;DeleteUserDefinedFunction&lt;/code&gt;, and &lt;code&gt;DeleteTable&lt;/code&gt; or &lt;code&gt;BatchDeleteTable&lt;/code&gt;, to delete any resources that belong to the database.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDatabaseRequest deleteDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDatabase(xAmzTarget, deleteDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified development endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDevEndpointTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDevEndpointRequest deleteDevEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDevEndpoint(xAmzTarget, deleteDevEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified job definition. If the job definition is not found, no exception is thrown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String xAmzTarget = null;
        DeleteJobRequest deleteJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteJobResponse response = api.deleteJob(xAmzTarget, deleteJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Glue machine learning transform. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. If you no longer need a transform, you can delete it by calling &lt;code&gt;DeleteMLTransforms&lt;/code&gt;. However, any Glue jobs that still reference the deleted transform will no longer succeed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMLTransformTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMLTransformRequest deleteMLTransformRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMLTransformResponse response = api.deleteMLTransform(xAmzTarget, deleteMLTransformRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePartitionTest() throws ApiException {
        String xAmzTarget = null;
        DeletePartitionRequest deletePartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePartition(xAmzTarget, deletePartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified partition index from an existing table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePartitionIndexTest() throws ApiException {
        String xAmzTarget = null;
        DeletePartitionIndexRequest deletePartitionIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePartitionIndex(xAmzTarget, deletePartitionIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the &lt;code&gt;GetRegistry&lt;/code&gt; API after the asynchronous call. Deleting a registry will deactivate all online operations for the registry such as the &lt;code&gt;UpdateRegistry&lt;/code&gt;, &lt;code&gt;CreateSchema&lt;/code&gt;, &lt;code&gt;UpdateSchema&lt;/code&gt;, and &lt;code&gt;RegisterSchemaVersion&lt;/code&gt; APIs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistryTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRegistryInput deleteRegistryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRegistryResponse response = api.deleteRegistry(xAmzTarget, deleteRegistryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourcePolicyRequest deleteResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResourcePolicy(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call &lt;code&gt;GetSchema&lt;/code&gt; API after the asynchronous call. Deleting a registry will deactivate all online operations for the schema, such as the &lt;code&gt;GetSchemaByDefinition&lt;/code&gt;, and &lt;code&gt;RegisterSchemaVersion&lt;/code&gt; APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSchemaInput deleteSchemaInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSchemaResponse response = api.deleteSchema(xAmzTarget, deleteSchemaInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned. Calling the &lt;code&gt;GetSchemaVersions&lt;/code&gt; API after this call will list the status of the deleted versions.&lt;/p&gt; &lt;p&gt;When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the &lt;code&gt;DeleteSchemaCheckpoint&lt;/code&gt; API before using this API.&lt;/p&gt; &lt;p&gt;You cannot use the &lt;code&gt;DeleteSchemaVersions&lt;/code&gt; API to delete the first schema version in the schema set. The first schema version can only be deleted by the &lt;code&gt;DeleteSchema&lt;/code&gt; API. This operation will also delete the attached &lt;code&gt;SchemaVersionMetadata&lt;/code&gt; under the schema versions. Hard deletes will be enforced on the database.&lt;/p&gt; &lt;p&gt;If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaVersionsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSchemaVersionsInput deleteSchemaVersionsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSchemaVersionsResponse response = api.deleteSchemaVersions(xAmzTarget, deleteSchemaVersionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified security configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSecurityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSecurityConfigurationRequest deleteSecurityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSecurityConfiguration(xAmzTarget, deleteSecurityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSessionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSessionRequest deleteSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSessionResponse response = api.deleteSession(xAmzTarget, deleteSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a table definition from the Data Catalog.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. Glue deletes these \&quot;orphaned\&quot; resources asynchronously in a timely manner, at the discretion of the service.&lt;/p&gt; &lt;p&gt;To ensure the immediate deletion of all related resources, before calling &lt;code&gt;DeleteTable&lt;/code&gt;, use &lt;code&gt;DeleteTableVersion&lt;/code&gt; or &lt;code&gt;BatchDeleteTableVersion&lt;/code&gt;, and &lt;code&gt;DeletePartition&lt;/code&gt; or &lt;code&gt;BatchDeletePartition&lt;/code&gt;, to delete any resources that belong to the table.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTableTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTableRequest deleteTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTable(xAmzTarget, deleteTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified version of a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTableVersionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTableVersionRequest deleteTableVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTableVersion(xAmzTarget, deleteTableVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified trigger. If the trigger is not found, no exception is thrown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTriggerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTriggerRequest deleteTriggerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTriggerResponse response = api.deleteTrigger(xAmzTarget, deleteTriggerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing function definition from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserDefinedFunctionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserDefinedFunctionRequest deleteUserDefinedFunctionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUserDefinedFunction(xAmzTarget, deleteUserDefinedFunctionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWorkflowRequest deleteWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteWorkflowResponse response = api.deleteWorkflow(xAmzTarget, deleteWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a blueprint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlueprintTest() throws ApiException {
        String xAmzTarget = null;
        GetBlueprintRequest getBlueprintRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBlueprintResponse response = api.getBlueprint(xAmzTarget, getBlueprintRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a blueprint run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlueprintRunTest() throws ApiException {
        String xAmzTarget = null;
        GetBlueprintRunRequest getBlueprintRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBlueprintRunResponse response = api.getBlueprintRun(xAmzTarget, getBlueprintRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of blueprint runs for a specified blueprint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlueprintRunsTest() throws ApiException {
        String xAmzTarget = null;
        GetBlueprintRunsRequest getBlueprintRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetBlueprintRunsResponse response = api.getBlueprintRuns(xAmzTarget, getBlueprintRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the status of a migration operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCatalogImportStatusTest() throws ApiException {
        String xAmzTarget = null;
        GetCatalogImportStatusRequest getCatalogImportStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCatalogImportStatusResponse response = api.getCatalogImportStatus(xAmzTarget, getCatalogImportStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve a classifier by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassifierTest() throws ApiException {
        String xAmzTarget = null;
        GetClassifierRequest getClassifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetClassifierResponse response = api.getClassifier(xAmzTarget, getClassifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all classifier objects in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassifiersTest() throws ApiException {
        String xAmzTarget = null;
        GetClassifiersRequest getClassifiersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetClassifiersResponse response = api.getClassifiers(xAmzTarget, getClassifiersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves partition statistics of columns.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) permission required for this operation is &lt;code&gt;GetPartition&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getColumnStatisticsForPartitionTest() throws ApiException {
        String xAmzTarget = null;
        GetColumnStatisticsForPartitionRequest getColumnStatisticsForPartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetColumnStatisticsForPartitionResponse response = api.getColumnStatisticsForPartition(xAmzTarget, getColumnStatisticsForPartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves table statistics of columns.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) permission required for this operation is &lt;code&gt;GetTable&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getColumnStatisticsForTableTest() throws ApiException {
        String xAmzTarget = null;
        GetColumnStatisticsForTableRequest getColumnStatisticsForTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetColumnStatisticsForTableResponse response = api.getColumnStatisticsForTable(xAmzTarget, getColumnStatisticsForTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a connection definition from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionTest() throws ApiException {
        String xAmzTarget = null;
        GetConnectionRequest getConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConnectionResponse response = api.getConnection(xAmzTarget, getConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of connection definitions from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionsTest() throws ApiException {
        String xAmzTarget = null;
        GetConnectionsRequest getConnectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetConnectionsResponse response = api.getConnections(xAmzTarget, getConnectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves metadata for a specified crawler.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrawlerTest() throws ApiException {
        String xAmzTarget = null;
        GetCrawlerRequest getCrawlerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCrawlerResponse response = api.getCrawler(xAmzTarget, getCrawlerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves metrics about specified crawlers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrawlerMetricsTest() throws ApiException {
        String xAmzTarget = null;
        GetCrawlerMetricsRequest getCrawlerMetricsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetCrawlerMetricsResponse response = api.getCrawlerMetrics(xAmzTarget, getCrawlerMetricsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves metadata for all crawlers defined in the customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrawlersTest() throws ApiException {
        String xAmzTarget = null;
        GetCrawlersRequest getCrawlersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetCrawlersResponse response = api.getCrawlers(xAmzTarget, getCrawlersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a custom pattern by specifying its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomEntityTypeTest() throws ApiException {
        String xAmzTarget = null;
        GetCustomEntityTypeRequest getCustomEntityTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCustomEntityTypeResponse response = api.getCustomEntityType(xAmzTarget, getCustomEntityTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the security configuration for a specified catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataCatalogEncryptionSettingsTest() throws ApiException {
        String xAmzTarget = null;
        GetDataCatalogEncryptionSettingsRequest getDataCatalogEncryptionSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataCatalogEncryptionSettingsResponse response = api.getDataCatalogEncryptionSettings(xAmzTarget, getDataCatalogEncryptionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the result of a data quality rule evaluation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataQualityResultTest() throws ApiException {
        String xAmzTarget = null;
        GetDataQualityResultRequest getDataQualityResultRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataQualityResultResponse response = api.getDataQualityResult(xAmzTarget, getDataQualityResultRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified recommendation run that was used to generate rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataQualityRuleRecommendationRunTest() throws ApiException {
        String xAmzTarget = null;
        GetDataQualityRuleRecommendationRunRequest getDataQualityRuleRecommendationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataQualityRuleRecommendationRunResponse response = api.getDataQualityRuleRecommendationRun(xAmzTarget, getDataQualityRuleRecommendationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an existing ruleset by identifier or name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataQualityRulesetTest() throws ApiException {
        String xAmzTarget = null;
        GetDataQualityRulesetRequest getDataQualityRulesetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataQualityRulesetResponse response = api.getDataQualityRuleset(xAmzTarget, getDataQualityRulesetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a specific run where a ruleset is evaluated against a data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataQualityRulesetEvaluationRunTest() throws ApiException {
        String xAmzTarget = null;
        GetDataQualityRulesetEvaluationRunRequest getDataQualityRulesetEvaluationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataQualityRulesetEvaluationRunResponse response = api.getDataQualityRulesetEvaluationRun(xAmzTarget, getDataQualityRulesetEvaluationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the definition of a specified database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        GetDatabaseRequest getDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDatabaseResponse response = api.getDatabase(xAmzTarget, getDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves all databases defined in a given Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabasesTest() throws ApiException {
        String xAmzTarget = null;
        GetDatabasesRequest getDatabasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDatabasesResponse response = api.getDatabases(xAmzTarget, getDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Transforms a Python script into a directed acyclic graph (DAG). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataflowGraphTest() throws ApiException {
        String xAmzTarget = null;
        GetDataflowGraphRequest getDataflowGraphRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataflowGraphResponse response = api.getDataflowGraph(xAmzTarget, getDataflowGraphRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves information about a specified development endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address, and the public IP address field is not populated. When you create a non-VPC development endpoint, Glue returns only a public IP address.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevEndpointTest() throws ApiException {
        String xAmzTarget = null;
        GetDevEndpointRequest getDevEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDevEndpointResponse response = api.getDevEndpoint(xAmzTarget, getDevEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves all the development endpoints in this Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address and the public IP address field is not populated. When you create a non-VPC development endpoint, Glue returns only a public IP address.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevEndpointsTest() throws ApiException {
        String xAmzTarget = null;
        GetDevEndpointsRequest getDevEndpointsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDevEndpointsResponse response = api.getDevEndpoints(xAmzTarget, getDevEndpointsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves an existing job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String xAmzTarget = null;
        GetJobRequest getJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobResponse response = api.getJob(xAmzTarget, getJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information on a job bookmark entry.&lt;/p&gt; &lt;p&gt;For more information about enabling and using job bookmarks, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/monitor-continuations.html\&quot;&gt;Tracking processed data using job bookmarks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\&quot;&gt;Job parameters used by Glue&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html#aws-glue-api-jobs-job-Job\&quot;&gt;Job structure&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobBookmarkTest() throws ApiException {
        String xAmzTarget = null;
        GetJobBookmarkRequest getJobBookmarkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobBookmarkResponse response = api.getJobBookmark(xAmzTarget, getJobBookmarkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata for a given job run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobRunTest() throws ApiException {
        String xAmzTarget = null;
        GetJobRunRequest getJobRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobRunResponse response = api.getJobRun(xAmzTarget, getJobRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves metadata for all runs of a given job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobRunsTest() throws ApiException {
        String xAmzTarget = null;
        GetJobRunsRequest getJobRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetJobRunsResponse response = api.getJobRuns(xAmzTarget, getJobRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves all current job definitions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String xAmzTarget = null;
        GetJobsRequest getJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetJobsResponse response = api.getJobs(xAmzTarget, getJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets details for a specific task run on a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can check the stats of any task run by calling &lt;code&gt;GetMLTaskRun&lt;/code&gt; with the &lt;code&gt;TaskRunID&lt;/code&gt; and its parent transform&#39;s &lt;code&gt;TransformID&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMLTaskRunTest() throws ApiException {
        String xAmzTarget = null;
        GetMLTaskRunRequest getMLTaskRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMLTaskRunResponse response = api.getMLTaskRun(xAmzTarget, getMLTaskRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a list of runs for a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can get a sortable, filterable list of machine learning task runs by calling &lt;code&gt;GetMLTaskRuns&lt;/code&gt; with their parent transform&#39;s &lt;code&gt;TransformID&lt;/code&gt; and other optional parameters as documented in this section.&lt;/p&gt; &lt;p&gt;This operation returns a list of historic runs and must be paginated.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMLTaskRunsTest() throws ApiException {
        String xAmzTarget = null;
        GetMLTaskRunsRequest getMLTaskRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetMLTaskRunsResponse response = api.getMLTaskRuns(xAmzTarget, getMLTaskRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets an Glue machine learning transform artifact and all its corresponding metadata. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. You can retrieve their metadata by calling &lt;code&gt;GetMLTransform&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMLTransformTest() throws ApiException {
        String xAmzTarget = null;
        GetMLTransformRequest getMLTransformRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMLTransformResponse response = api.getMLTransform(xAmzTarget, getMLTransformRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a sortable, filterable list of existing Glue machine learning transforms. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue, and you can retrieve their metadata by calling &lt;code&gt;GetMLTransforms&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMLTransformsTest() throws ApiException {
        String xAmzTarget = null;
        GetMLTransformsRequest getMLTransformsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetMLTransformsResponse response = api.getMLTransforms(xAmzTarget, getMLTransformsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Creates mappings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMappingTest() throws ApiException {
        String xAmzTarget = null;
        GetMappingRequest getMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMappingResponse response = api.getMapping(xAmzTarget, getMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a specified partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionTest() throws ApiException {
        String xAmzTarget = null;
        GetPartitionRequest getPartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPartitionResponse response = api.getPartition(xAmzTarget, getPartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the partition indexes associated with a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionIndexesTest() throws ApiException {
        String xAmzTarget = null;
        GetPartitionIndexesRequest getPartitionIndexesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetPartitionIndexesResponse response = api.getPartitionIndexes(xAmzTarget, getPartitionIndexesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about the partitions in a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionsTest() throws ApiException {
        String xAmzTarget = null;
        GetPartitionsRequest getPartitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetPartitionsResponse response = api.getPartitions(xAmzTarget, getPartitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets code to perform a specified mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlanTest() throws ApiException {
        String xAmzTarget = null;
        GetPlanRequest getPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPlanResponse response = api.getPlan(xAmzTarget, getPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified registry in detail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegistryTest() throws ApiException {
        String xAmzTarget = null;
        GetRegistryInput getRegistryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRegistryResponse response = api.getRegistry(xAmzTarget, getRegistryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the resource policies set on individual resources by Resource Access Manager during cross-account permission grants. Also retrieves the Data Catalog resource policy.&lt;/p&gt; &lt;p&gt;If you enabled metadata encryption in Data Catalog settings, and you do not have permission on the KMS key, the operation can&#39;t return the Data Catalog resource policy.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePoliciesTest() throws ApiException {
        String xAmzTarget = null;
        GetResourcePoliciesRequest getResourcePoliciesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetResourcePoliciesResponse response = api.getResourcePolicies(xAmzTarget, getResourcePoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a specified resource policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetResourcePolicyRequest getResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourcePolicyResponse response = api.getResourcePolicy(xAmzTarget, getResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified schema in detail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaTest() throws ApiException {
        String xAmzTarget = null;
        GetSchemaInput getSchemaInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaResponse response = api.getSchema(xAmzTarget, getSchemaInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a schema by the &lt;code&gt;SchemaDefinition&lt;/code&gt;. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the &lt;code&gt;SchemaName&lt;/code&gt; or ARN (or the default registry, if none is supplied), that schema’s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in &lt;code&gt;Deleted&lt;/code&gt; statuses will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaByDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        GetSchemaByDefinitionInput getSchemaByDefinitionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaByDefinitionResponse response = api.getSchemaByDefinition(xAmzTarget, getSchemaByDefinitionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaVersionTest() throws ApiException {
        String xAmzTarget = null;
        GetSchemaVersionInput getSchemaVersionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaVersionResponse response = api.getSchemaVersion(xAmzTarget, getSchemaVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.&lt;/p&gt; &lt;p&gt;This API allows you to compare two schema versions between two schema definitions under the same schema.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaVersionsDiffTest() throws ApiException {
        String xAmzTarget = null;
        GetSchemaVersionsDiffInput getSchemaVersionsDiffInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaVersionsDiffResponse response = api.getSchemaVersionsDiff(xAmzTarget, getSchemaVersionsDiffInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a specified security configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecurityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetSecurityConfigurationRequest getSecurityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSecurityConfigurationResponse response = api.getSecurityConfiguration(xAmzTarget, getSecurityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of all security configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecurityConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        GetSecurityConfigurationsRequest getSecurityConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetSecurityConfigurationsResponse response = api.getSecurityConfigurations(xAmzTarget, getSecurityConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        String xAmzTarget = null;
        GetSessionRequest getSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSessionResponse response = api.getSession(xAmzTarget, getSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the statement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatementTest() throws ApiException {
        String xAmzTarget = null;
        GetStatementRequest getStatementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStatementResponse response = api.getStatement(xAmzTarget, getStatementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the &lt;code&gt;Table&lt;/code&gt; definition in a Data Catalog for a specified table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableTest() throws ApiException {
        String xAmzTarget = null;
        GetTableRequest getTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTableResponse response = api.getTable(xAmzTarget, getTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a specified version of a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableVersionTest() throws ApiException {
        String xAmzTarget = null;
        GetTableVersionRequest getTableVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTableVersionResponse response = api.getTableVersion(xAmzTarget, getTableVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of strings that identify available versions of a specified table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableVersionsTest() throws ApiException {
        String xAmzTarget = null;
        GetTableVersionsRequest getTableVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetTableVersionsResponse response = api.getTableVersions(xAmzTarget, getTableVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the definitions of some or all of the tables in a given &lt;code&gt;Database&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTablesTest() throws ApiException {
        String xAmzTarget = null;
        GetTablesRequest getTablesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetTablesResponse response = api.getTables(xAmzTarget, getTablesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of tags associated with a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String xAmzTarget = null;
        GetTagsRequest getTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTagsResponse response = api.getTags(xAmzTarget, getTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the definition of a trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTriggerTest() throws ApiException {
        String xAmzTarget = null;
        GetTriggerRequest getTriggerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTriggerResponse response = api.getTrigger(xAmzTarget, getTriggerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets all the triggers associated with a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTriggersTest() throws ApiException {
        String xAmzTarget = null;
        GetTriggersRequest getTriggersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetTriggersResponse response = api.getTriggers(xAmzTarget, getTriggersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves partition metadata from the Data Catalog that contains unfiltered metadata.&lt;/p&gt; &lt;p&gt;For IAM authorization, the public IAM action associated with this API is &lt;code&gt;glue:GetPartition&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnfilteredPartitionMetadataTest() throws ApiException {
        String xAmzTarget = null;
        GetUnfilteredPartitionMetadataRequest getUnfilteredPartitionMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUnfilteredPartitionMetadataResponse response = api.getUnfilteredPartitionMetadata(xAmzTarget, getUnfilteredPartitionMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves partition metadata from the Data Catalog that contains unfiltered metadata.&lt;/p&gt; &lt;p&gt;For IAM authorization, the public IAM action associated with this API is &lt;code&gt;glue:GetPartitions&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnfilteredPartitionsMetadataTest() throws ApiException {
        String xAmzTarget = null;
        GetUnfilteredPartitionsMetadataRequest getUnfilteredPartitionsMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetUnfilteredPartitionsMetadataResponse response = api.getUnfilteredPartitionsMetadata(xAmzTarget, getUnfilteredPartitionsMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves table metadata from the Data Catalog that contains unfiltered metadata.&lt;/p&gt; &lt;p&gt;For IAM authorization, the public IAM action associated with this API is &lt;code&gt;glue:GetTable&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnfilteredTableMetadataTest() throws ApiException {
        String xAmzTarget = null;
        GetUnfilteredTableMetadataRequest getUnfilteredTableMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUnfilteredTableMetadataResponse response = api.getUnfilteredTableMetadata(xAmzTarget, getUnfilteredTableMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a specified function definition from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserDefinedFunctionTest() throws ApiException {
        String xAmzTarget = null;
        GetUserDefinedFunctionRequest getUserDefinedFunctionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUserDefinedFunctionResponse response = api.getUserDefinedFunction(xAmzTarget, getUserDefinedFunctionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves multiple function definitions from the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserDefinedFunctionsTest() throws ApiException {
        String xAmzTarget = null;
        GetUserDefinedFunctionsRequest getUserDefinedFunctionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetUserDefinedFunctionsResponse response = api.getUserDefinedFunctions(xAmzTarget, getUserDefinedFunctionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves resource metadata for a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        GetWorkflowRequest getWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkflowResponse response = api.getWorkflow(xAmzTarget, getWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata for a given workflow run. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowRunTest() throws ApiException {
        String xAmzTarget = null;
        GetWorkflowRunRequest getWorkflowRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkflowRunResponse response = api.getWorkflowRun(xAmzTarget, getWorkflowRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the workflow run properties which were set during the run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowRunPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        GetWorkflowRunPropertiesRequest getWorkflowRunPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkflowRunPropertiesResponse response = api.getWorkflowRunProperties(xAmzTarget, getWorkflowRunPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves metadata for all runs of a given workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowRunsTest() throws ApiException {
        String xAmzTarget = null;
        GetWorkflowRunsRequest getWorkflowRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetWorkflowRunsResponse response = api.getWorkflowRuns(xAmzTarget, getWorkflowRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Imports an existing Amazon Athena Data Catalog to Glue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCatalogToGlueTest() throws ApiException {
        String xAmzTarget = null;
        ImportCatalogToGlueRequest importCatalogToGlueRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.importCatalogToGlue(xAmzTarget, importCatalogToGlueRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all the blueprint names in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBlueprintsTest() throws ApiException {
        String xAmzTarget = null;
        ListBlueprintsRequest listBlueprintsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBlueprintsResponse response = api.listBlueprints(xAmzTarget, listBlueprintsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the names of all crawler resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.&lt;/p&gt; &lt;p&gt;This operation takes the optional &lt;code&gt;Tags&lt;/code&gt; field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCrawlersTest() throws ApiException {
        String xAmzTarget = null;
        ListCrawlersRequest listCrawlersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCrawlersResponse response = api.listCrawlers(xAmzTarget, listCrawlersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns all the crawls of a specified crawler. Returns only the crawls that have occurred since the launch date of the crawler history feature, and only retains up to 12 months of crawls. Older crawls will not be returned.&lt;/p&gt; &lt;p&gt;You may use this API to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Retrive all the crawls of a specified crawler.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Retrieve all the crawls of a specified crawler within a limited count.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Retrieve all the crawls of a specified crawler in a specific time range.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Retrieve all the crawls of a specified crawler with a particular state, crawl ID, or DPU hour value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCrawlsTest() throws ApiException {
        String xAmzTarget = null;
        ListCrawlsRequest listCrawlsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListCrawlsResponse response = api.listCrawls(xAmzTarget, listCrawlsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all the custom patterns that have been created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomEntityTypesTest() throws ApiException {
        String xAmzTarget = null;
        ListCustomEntityTypesRequest listCustomEntityTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCustomEntityTypesResponse response = api.listCustomEntityTypes(xAmzTarget, listCustomEntityTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns all data quality execution results for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataQualityResultsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataQualityResultsRequest listDataQualityResultsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataQualityResultsResponse response = api.listDataQualityResults(xAmzTarget, listDataQualityResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the recommendation runs meeting the filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataQualityRuleRecommendationRunsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataQualityRuleRecommendationRunsRequest listDataQualityRuleRecommendationRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataQualityRuleRecommendationRunsResponse response = api.listDataQualityRuleRecommendationRuns(xAmzTarget, listDataQualityRuleRecommendationRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the runs meeting the filter criteria, where a ruleset is evaluated against a data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataQualityRulesetEvaluationRunsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataQualityRulesetEvaluationRunsRequest listDataQualityRulesetEvaluationRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataQualityRulesetEvaluationRunsResponse response = api.listDataQualityRulesetEvaluationRuns(xAmzTarget, listDataQualityRulesetEvaluationRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of rulesets for the specified list of Glue tables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataQualityRulesetsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataQualityRulesetsRequest listDataQualityRulesetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataQualityRulesetsResponse response = api.listDataQualityRulesets(xAmzTarget, listDataQualityRulesetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the names of all &lt;code&gt;DevEndpoint&lt;/code&gt; resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.&lt;/p&gt; &lt;p&gt;This operation takes the optional &lt;code&gt;Tags&lt;/code&gt; field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevEndpointsTest() throws ApiException {
        String xAmzTarget = null;
        ListDevEndpointsRequest listDevEndpointsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDevEndpointsResponse response = api.listDevEndpoints(xAmzTarget, listDevEndpointsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the names of all job resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.&lt;/p&gt; &lt;p&gt;This operation takes the optional &lt;code&gt;Tags&lt;/code&gt; field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListJobsRequest listJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListJobsResponse response = api.listJobs(xAmzTarget, listJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Retrieves a sortable, filterable list of existing Glue machine learning transforms in this Amazon Web Services account, or the resources with the specified tag. This operation takes the optional &lt;code&gt;Tags&lt;/code&gt; field, which you can use as a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag filtering, only resources with the tags are retrieved. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMLTransformsTest() throws ApiException {
        String xAmzTarget = null;
        ListMLTransformsRequest listMLTransformsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMLTransformsResponse response = api.listMLTransforms(xAmzTarget, listMLTransformsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of registries that you have created, with minimal registry information. Registries in the &lt;code&gt;Deleting&lt;/code&gt; status will not be included in the results. Empty results will be returned if there are no registries available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistriesTest() throws ApiException {
        String xAmzTarget = null;
        ListRegistriesInput listRegistriesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRegistriesResponse response = api.listRegistries(xAmzTarget, listRegistriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemaVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListSchemaVersionsInput listSchemaVersionsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSchemaVersionsResponse response = api.listSchemaVersions(xAmzTarget, listSchemaVersionsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;RegistryId&lt;/code&gt; is not provided, all the schemas across registries will be part of the API response.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemasTest() throws ApiException {
        String xAmzTarget = null;
        ListSchemasInput listSchemasInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSchemasResponse response = api.listSchemas(xAmzTarget, listSchemasInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of sessions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSessionsTest() throws ApiException {
        String xAmzTarget = null;
        ListSessionsRequest listSessionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSessionsResponse response = api.listSessions(xAmzTarget, listSessionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists statements for the session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStatementsTest() throws ApiException {
        String xAmzTarget = null;
        ListStatementsRequest listStatementsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListStatementsResponse response = api.listStatements(xAmzTarget, listStatementsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the names of all trigger resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.&lt;/p&gt; &lt;p&gt;This operation takes the optional &lt;code&gt;Tags&lt;/code&gt; field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTriggersTest() throws ApiException {
        String xAmzTarget = null;
        ListTriggersRequest listTriggersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTriggersResponse response = api.listTriggers(xAmzTarget, listTriggersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists names of workflows created in the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkflowsTest() throws ApiException {
        String xAmzTarget = null;
        ListWorkflowsRequest listWorkflowsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWorkflowsResponse response = api.listWorkflows(xAmzTarget, listWorkflowsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Sets the security configuration for a specified catalog. After the configuration has been set, the specified encryption is applied to every catalog write thereafter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDataCatalogEncryptionSettingsTest() throws ApiException {
        String xAmzTarget = null;
        PutDataCatalogEncryptionSettingsRequest putDataCatalogEncryptionSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDataCatalogEncryptionSettings(xAmzTarget, putDataCatalogEncryptionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the Data Catalog resource policy for access control.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResourcePolicyResponse response = api.putResourcePolicy(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSchemaVersionMetadataTest() throws ApiException {
        String xAmzTarget = null;
        PutSchemaVersionMetadataInput putSchemaVersionMetadataInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutSchemaVersionMetadataResponse response = api.putSchemaVersionMetadata(xAmzTarget, putSchemaVersionMetadataInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putWorkflowRunPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        PutWorkflowRunPropertiesRequest putWorkflowRunPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putWorkflowRunProperties(xAmzTarget, putWorkflowRunPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Queries for the schema version metadata information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySchemaVersionMetadataTest() throws ApiException {
        String xAmzTarget = null;
        QuerySchemaVersionMetadataInput querySchemaVersionMetadataInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        QuerySchemaVersionMetadataResponse response = api.querySchemaVersionMetadata(xAmzTarget, querySchemaVersionMetadataInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.&lt;/p&gt; &lt;p&gt;If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the &lt;code&gt;GetSchemaVersion&lt;/code&gt; API with the &lt;code&gt;SchemaVersionId&lt;/code&gt; to check compatibility modes.&lt;/p&gt; &lt;p&gt;If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerSchemaVersionTest() throws ApiException {
        String xAmzTarget = null;
        RegisterSchemaVersionInput registerSchemaVersionInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterSchemaVersionResponse response = api.registerSchemaVersion(xAmzTarget, registerSchemaVersionInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a key value pair from the schema version metadata for the specified schema version ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSchemaVersionMetadataTest() throws ApiException {
        String xAmzTarget = null;
        RemoveSchemaVersionMetadataInput removeSchemaVersionMetadataInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveSchemaVersionMetadataResponse response = api.removeSchemaVersionMetadata(xAmzTarget, removeSchemaVersionMetadataInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resets a bookmark entry.&lt;/p&gt; &lt;p&gt;For more information about enabling and using job bookmarks, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/monitor-continuations.html\&quot;&gt;Tracking processed data using job bookmarks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\&quot;&gt;Job parameters used by Glue&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html#aws-glue-api-jobs-job-Job\&quot;&gt;Job structure&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetJobBookmarkTest() throws ApiException {
        String xAmzTarget = null;
        ResetJobBookmarkRequest resetJobBookmarkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetJobBookmarkResponse response = api.resetJobBookmark(xAmzTarget, resetJobBookmarkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeWorkflowRunTest() throws ApiException {
        String xAmzTarget = null;
        ResumeWorkflowRunRequest resumeWorkflowRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResumeWorkflowRunResponse response = api.resumeWorkflowRun(xAmzTarget, resumeWorkflowRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Executes the statement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runStatementTest() throws ApiException {
        String xAmzTarget = null;
        RunStatementRequest runStatementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RunStatementResponse response = api.runStatement(xAmzTarget, runStatementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. &lt;/p&gt; &lt;p&gt;You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTablesTest() throws ApiException {
        String xAmzTarget = null;
        SearchTablesRequest searchTablesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchTablesResponse response = api.searchTables(xAmzTarget, searchTablesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Starts a new run of the specified blueprint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBlueprintRunTest() throws ApiException {
        String xAmzTarget = null;
        StartBlueprintRunRequest startBlueprintRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartBlueprintRunResponse response = api.startBlueprintRun(xAmzTarget, startBlueprintRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException\&quot;&gt;CrawlerRunningException&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startCrawlerTest() throws ApiException {
        String xAmzTarget = null;
        StartCrawlerRequest startCrawlerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startCrawler(xAmzTarget, startCrawlerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the schedule state of the specified crawler to &lt;code&gt;SCHEDULED&lt;/code&gt;, unless the crawler is already running or the schedule state is already &lt;code&gt;SCHEDULED&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startCrawlerScheduleTest() throws ApiException {
        String xAmzTarget = null;
        StartCrawlerScheduleRequest startCrawlerScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startCrawlerSchedule(xAmzTarget, startCrawlerScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a recommendation run that is used to generate rules when you don&#39;t know what rules to write. Glue Data Quality analyzes the data and comes up with recommendations for a potential ruleset. You can then triage the ruleset and modify the generated ruleset to your liking.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDataQualityRuleRecommendationRunTest() throws ApiException {
        String xAmzTarget = null;
        StartDataQualityRuleRecommendationRunRequest startDataQualityRuleRecommendationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDataQualityRuleRecommendationRunResponse response = api.startDataQualityRuleRecommendationRun(xAmzTarget, startDataQualityRuleRecommendationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Once you have a ruleset definition (either recommended or your own), you call this operation to evaluate the ruleset against a data source (Glue table). The evaluation computes results which you can retrieve with the &lt;code&gt;GetDataQualityResult&lt;/code&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDataQualityRulesetEvaluationRunTest() throws ApiException {
        String xAmzTarget = null;
        StartDataQualityRulesetEvaluationRunRequest startDataQualityRulesetEvaluationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDataQualityRulesetEvaluationRunResponse response = api.startDataQualityRulesetEvaluationRun(xAmzTarget, startDataQualityRulesetEvaluationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Begins an asynchronous task to export all labeled data for a particular transform. This task is the only label-related API call that is not part of the typical active learning workflow. You typically use &lt;code&gt;StartExportLabelsTaskRun&lt;/code&gt; when you want to work with all of your existing labels at the same time, such as when you want to remove or change labels that were previously submitted as truth. This API operation accepts the &lt;code&gt;TransformId&lt;/code&gt; whose labels you want to export and an Amazon Simple Storage Service (Amazon S3) path to export the labels to. The operation returns a &lt;code&gt;TaskRunId&lt;/code&gt;. You can check on the status of your task run by calling the &lt;code&gt;GetMLTaskRun&lt;/code&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startExportLabelsTaskRunTest() throws ApiException {
        String xAmzTarget = null;
        StartExportLabelsTaskRunRequest startExportLabelsTaskRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartExportLabelsTaskRunResponse response = api.startExportLabelsTaskRun(xAmzTarget, startExportLabelsTaskRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables you to provide additional labels (examples of truth) to be used to teach the machine learning transform and improve its quality. This API operation is generally used as part of the active learning workflow that starts with the &lt;code&gt;StartMLLabelingSetGenerationTaskRun&lt;/code&gt; call and that ultimately results in improving the quality of your machine learning transform. &lt;/p&gt; &lt;p&gt;After the &lt;code&gt;StartMLLabelingSetGenerationTaskRun&lt;/code&gt; finishes, Glue machine learning will have generated a series of questions for humans to answer. (Answering these questions is often called &#39;labeling&#39; in the machine learning workflows). In the case of the &lt;code&gt;FindMatches&lt;/code&gt; transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” After the labeling process is finished, users upload their answers/labels with a call to &lt;code&gt;StartImportLabelsTaskRun&lt;/code&gt;. After &lt;code&gt;StartImportLabelsTaskRun&lt;/code&gt; finishes, all future runs of the machine learning transform use the new and improved labels and perform a higher-quality transformation.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;StartMLLabelingSetGenerationTaskRun&lt;/code&gt; continually learns from and combines all labels that you upload unless you set &lt;code&gt;Replace&lt;/code&gt; to true. If you set &lt;code&gt;Replace&lt;/code&gt; to true, &lt;code&gt;StartImportLabelsTaskRun&lt;/code&gt; deletes and forgets all previously uploaded labels and learns only from the exact set that you upload. Replacing labels can be helpful if you realize that you previously uploaded incorrect labels, and you believe that they are having a negative effect on your transform quality.&lt;/p&gt; &lt;p&gt;You can check on the status of your task run by calling the &lt;code&gt;GetMLTaskRun&lt;/code&gt; operation. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImportLabelsTaskRunTest() throws ApiException {
        String xAmzTarget = null;
        StartImportLabelsTaskRunRequest startImportLabelsTaskRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImportLabelsTaskRunResponse response = api.startImportLabelsTaskRun(xAmzTarget, startImportLabelsTaskRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a job run using a job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startJobRunTest() throws ApiException {
        String xAmzTarget = null;
        StartJobRunRequest startJobRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartJobRunResponse response = api.startJobRun(xAmzTarget, startJobRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a task to estimate the quality of the transform. &lt;/p&gt; &lt;p&gt;When you provide label sets as examples of truth, Glue machine learning uses some of those examples to learn from them. The rest of the labels are used as a test to estimate quality.&lt;/p&gt; &lt;p&gt;Returns a unique identifier for the run. You can call &lt;code&gt;GetMLTaskRun&lt;/code&gt; to get more information about the stats of the &lt;code&gt;EvaluationTaskRun&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMLEvaluationTaskRunTest() throws ApiException {
        String xAmzTarget = null;
        StartMLEvaluationTaskRunRequest startMLEvaluationTaskRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMLEvaluationTaskRunResponse response = api.startMLEvaluationTaskRun(xAmzTarget, startMLEvaluationTaskRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts the active learning workflow for your machine learning transform to improve the transform&#39;s quality by generating label sets and adding labels.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;StartMLLabelingSetGenerationTaskRun&lt;/code&gt; finishes, Glue will have generated a \&quot;labeling set\&quot; or a set of questions for humans to answer.&lt;/p&gt; &lt;p&gt;In the case of the &lt;code&gt;FindMatches&lt;/code&gt; transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” &lt;/p&gt; &lt;p&gt;After the labeling process is finished, you can upload your labels with a call to &lt;code&gt;StartImportLabelsTaskRun&lt;/code&gt;. After &lt;code&gt;StartImportLabelsTaskRun&lt;/code&gt; finishes, all future runs of the machine learning transform will use the new and improved labels and perform a higher-quality transformation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMLLabelingSetGenerationTaskRunTest() throws ApiException {
        String xAmzTarget = null;
        StartMLLabelingSetGenerationTaskRunRequest startMLLabelingSetGenerationTaskRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMLLabelingSetGenerationTaskRunResponse response = api.startMLLabelingSetGenerationTaskRun(xAmzTarget, startMLLabelingSetGenerationTaskRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an existing trigger. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html\&quot;&gt;Triggering Jobs&lt;/a&gt; for information about how different types of trigger are started.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTriggerTest() throws ApiException {
        String xAmzTarget = null;
        StartTriggerRequest startTriggerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartTriggerResponse response = api.startTrigger(xAmzTarget, startTriggerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a new run of the specified workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startWorkflowRunTest() throws ApiException {
        String xAmzTarget = null;
        StartWorkflowRunRequest startWorkflowRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartWorkflowRunResponse response = api.startWorkflowRun(xAmzTarget, startWorkflowRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * If the specified crawler is running, stops the crawl.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopCrawlerTest() throws ApiException {
        String xAmzTarget = null;
        StopCrawlerRequest stopCrawlerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopCrawler(xAmzTarget, stopCrawlerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the schedule state of the specified crawler to &lt;code&gt;NOT_SCHEDULED&lt;/code&gt;, but does not stop the crawler if it is already running.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopCrawlerScheduleTest() throws ApiException {
        String xAmzTarget = null;
        StopCrawlerScheduleRequest stopCrawlerScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopCrawlerSchedule(xAmzTarget, stopCrawlerScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopSessionTest() throws ApiException {
        String xAmzTarget = null;
        StopSessionRequest stopSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopSessionResponse response = api.stopSession(xAmzTarget, stopSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a specified trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTriggerTest() throws ApiException {
        String xAmzTarget = null;
        StopTriggerRequest stopTriggerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopTriggerResponse response = api.stopTrigger(xAmzTarget, stopTriggerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the execution of the specified workflow run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopWorkflowRunTest() throws ApiException {
        String xAmzTarget = null;
        StopWorkflowRunRequest stopWorkflowRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopWorkflowRun(xAmzTarget, stopWorkflowRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds tags to a resource. A tag is a label you can assign to an Amazon Web Services resource. In Glue, you can tag only certain resources. For information about what resources you can tag, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\&quot;&gt;Amazon Web Services Tags in Glue&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a registered blueprint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlueprintTest() throws ApiException {
        String xAmzTarget = null;
        UpdateBlueprintRequest updateBlueprintRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBlueprintResponse response = api.updateBlueprint(xAmzTarget, updateBlueprintRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies an existing classifier (a &lt;code&gt;GrokClassifier&lt;/code&gt;, an &lt;code&gt;XMLClassifier&lt;/code&gt;, a &lt;code&gt;JsonClassifier&lt;/code&gt;, or a &lt;code&gt;CsvClassifier&lt;/code&gt;, depending on which field is present).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClassifierTest() throws ApiException {
        String xAmzTarget = null;
        UpdateClassifierRequest updateClassifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateClassifier(xAmzTarget, updateClassifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates partition statistics of columns.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) permission required for this operation is &lt;code&gt;UpdatePartition&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateColumnStatisticsForPartitionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateColumnStatisticsForPartitionRequest updateColumnStatisticsForPartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateColumnStatisticsForPartitionResponse response = api.updateColumnStatisticsForPartition(xAmzTarget, updateColumnStatisticsForPartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates table statistics of columns.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) permission required for this operation is &lt;code&gt;UpdateTable&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateColumnStatisticsForTableTest() throws ApiException {
        String xAmzTarget = null;
        UpdateColumnStatisticsForTableRequest updateColumnStatisticsForTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateColumnStatisticsForTableResponse response = api.updateColumnStatisticsForTable(xAmzTarget, updateColumnStatisticsForTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a connection definition in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateConnectionRequest updateConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateConnection(xAmzTarget, updateConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a crawler. If a crawler is running, you must stop it using &lt;code&gt;StopCrawler&lt;/code&gt; before updating it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCrawlerTest() throws ApiException {
        String xAmzTarget = null;
        UpdateCrawlerRequest updateCrawlerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateCrawler(xAmzTarget, updateCrawlerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the schedule of a crawler using a &lt;code&gt;cron&lt;/code&gt; expression. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCrawlerScheduleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateCrawlerScheduleRequest updateCrawlerScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateCrawlerSchedule(xAmzTarget, updateCrawlerScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified data quality ruleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataQualityRulesetTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDataQualityRulesetRequest updateDataQualityRulesetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDataQualityRulesetResponse response = api.updateDataQualityRuleset(xAmzTarget, updateDataQualityRulesetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing database definition in a Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDatabaseRequest updateDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDatabase(xAmzTarget, updateDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a specified development endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDevEndpointTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDevEndpointRequest updateDevEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDevEndpoint(xAmzTarget, updateDevEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing job definition. The previous job definition is completely overwritten by this information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobTest() throws ApiException {
        String xAmzTarget = null;
        UpdateJobRequest updateJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateJobResponse response = api.updateJob(xAmzTarget, updateJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Synchronizes a job from the source control repository. This operation takes the job artifacts that are located in the remote repository and updates the Glue internal stores with these artifacts.&lt;/p&gt; &lt;p&gt;This API supports optional parameters which take in the repository information.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobFromSourceControlTest() throws ApiException {
        String xAmzTarget = null;
        UpdateJobFromSourceControlRequest updateJobFromSourceControlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateJobFromSourceControlResponse response = api.updateJobFromSourceControl(xAmzTarget, updateJobFromSourceControlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.&lt;/p&gt; &lt;p&gt;After calling this operation, you can call the &lt;code&gt;StartMLEvaluationTaskRun&lt;/code&gt; operation to assess how well your new parameters achieved your goals (such as improving the quality of your machine learning transform, or making it more cost-effective).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMLTransformTest() throws ApiException {
        String xAmzTarget = null;
        UpdateMLTransformRequest updateMLTransformRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMLTransformResponse response = api.updateMLTransform(xAmzTarget, updateMLTransformRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartitionTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePartitionRequest updatePartitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updatePartition(xAmzTarget, updatePartitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistryTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRegistryInput updateRegistryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRegistryResponse response = api.updateRegistry(xAmzTarget, updateRegistryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the description, compatibility setting, or version checkpoint for a schema set.&lt;/p&gt; &lt;p&gt;For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for &lt;code&gt;Compatibility&lt;/code&gt; is provided, the &lt;code&gt;VersionNumber&lt;/code&gt; (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.&lt;/p&gt; &lt;p&gt;If the value for the &lt;code&gt;VersionNumber&lt;/code&gt; (checkpoint) is provided, &lt;code&gt;Compatibility&lt;/code&gt; is optional and this can be used to set/reset a checkpoint for the schema.&lt;/p&gt; &lt;p&gt;This update will happen only if the schema is in the AVAILABLE state.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSchemaTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSchemaInput updateSchemaInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSchemaResponse response = api.updateSchema(xAmzTarget, updateSchemaInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Synchronizes a job to the source control repository. This operation takes the job artifacts from the Glue internal stores and makes a commit to the remote repository that is configured on the job.&lt;/p&gt; &lt;p&gt;This API supports optional parameters which take in the repository information.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceControlFromJobTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSourceControlFromJobRequest updateSourceControlFromJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSourceControlFromJobResponse response = api.updateSourceControlFromJob(xAmzTarget, updateSourceControlFromJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a metadata table in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTableTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTableRequest updateTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateTable(xAmzTarget, updateTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a trigger definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTriggerTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTriggerRequest updateTriggerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTriggerResponse response = api.updateTrigger(xAmzTarget, updateTriggerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing function definition in the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserDefinedFunctionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserDefinedFunctionRequest updateUserDefinedFunctionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateUserDefinedFunction(xAmzTarget, updateUserDefinedFunctionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWorkflowRequest updateWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkflowResponse response = api.updateWorkflow(xAmzTarget, updateWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
