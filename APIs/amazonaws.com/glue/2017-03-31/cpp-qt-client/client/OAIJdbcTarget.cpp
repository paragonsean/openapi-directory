/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJdbcTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJdbcTarget::OAIJdbcTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJdbcTarget::OAIJdbcTarget() {
    this->initializeModel();
}

OAIJdbcTarget::~OAIJdbcTarget() {}

void OAIJdbcTarget::initializeModel() {

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_enable_additional_metadata_isSet = false;
    m_enable_additional_metadata_isValid = false;
}

void OAIJdbcTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJdbcTarget::fromJsonObject(QJsonObject json) {

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("Exclusions")]);
    m_exclusions_isSet = !json[QString("Exclusions")].isNull() && m_exclusions_isValid;

    m_enable_additional_metadata_isValid = ::OpenAPI::fromJsonValue(m_enable_additional_metadata, json[QString("EnableAdditionalMetadata")]);
    m_enable_additional_metadata_isSet = !json[QString("EnableAdditionalMetadata")].isNull() && m_enable_additional_metadata_isValid;
}

QString OAIJdbcTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJdbcTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_exclusions.isSet()) {
        obj.insert(QString("Exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_enable_additional_metadata.isSet()) {
        obj.insert(QString("EnableAdditionalMetadata"), ::OpenAPI::toJsonValue(m_enable_additional_metadata));
    }
    return obj;
}

QString OAIJdbcTarget::getConnectionName() const {
    return m_connection_name;
}
void OAIJdbcTarget::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIJdbcTarget::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIJdbcTarget::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

QString OAIJdbcTarget::getPath() const {
    return m_path;
}
void OAIJdbcTarget::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIJdbcTarget::is_path_Set() const{
    return m_path_isSet;
}

bool OAIJdbcTarget::is_path_Valid() const{
    return m_path_isValid;
}

QList OAIJdbcTarget::getExclusions() const {
    return m_exclusions;
}
void OAIJdbcTarget::setExclusions(const QList &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAIJdbcTarget::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAIJdbcTarget::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QList OAIJdbcTarget::getEnableAdditionalMetadata() const {
    return m_enable_additional_metadata;
}
void OAIJdbcTarget::setEnableAdditionalMetadata(const QList &enable_additional_metadata) {
    m_enable_additional_metadata = enable_additional_metadata;
    m_enable_additional_metadata_isSet = true;
}

bool OAIJdbcTarget::is_enable_additional_metadata_Set() const{
    return m_enable_additional_metadata_isSet;
}

bool OAIJdbcTarget::is_enable_additional_metadata_Valid() const{
    return m_enable_additional_metadata_isValid;
}

bool OAIJdbcTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_additional_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJdbcTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
