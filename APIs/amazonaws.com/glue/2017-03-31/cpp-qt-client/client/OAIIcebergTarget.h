/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIcebergTarget.h
 *
 * Specifies an Apache Iceberg data source where Iceberg tables are stored in Amazon S3.
 */

#ifndef OAIIcebergTarget_H
#define OAIIcebergTarget_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIcebergTarget : public OAIObject {
public:
    OAIIcebergTarget();
    OAIIcebergTarget(QString json);
    ~OAIIcebergTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getPaths() const;
    void setPaths(const QList &paths);
    bool is_paths_Set() const;
    bool is_paths_Valid() const;

    QString getConnectionName() const;
    void setConnectionName(const QString &connection_name);
    bool is_connection_name_Set() const;
    bool is_connection_name_Valid() const;

    QList getExclusions() const;
    void setExclusions(const QList &exclusions);
    bool is_exclusions_Set() const;
    bool is_exclusions_Valid() const;

    qint32 getMaximumTraversalDepth() const;
    void setMaximumTraversalDepth(const qint32 &maximum_traversal_depth);
    bool is_maximum_traversal_depth_Set() const;
    bool is_maximum_traversal_depth_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_paths;
    bool m_paths_isSet;
    bool m_paths_isValid;

    QString m_connection_name;
    bool m_connection_name_isSet;
    bool m_connection_name_isValid;

    QList m_exclusions;
    bool m_exclusions_isSet;
    bool m_exclusions_isValid;

    qint32 m_maximum_traversal_depth;
    bool m_maximum_traversal_depth_isSet;
    bool m_maximum_traversal_depth_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIcebergTarget)

#endif // OAIIcebergTarget_H
