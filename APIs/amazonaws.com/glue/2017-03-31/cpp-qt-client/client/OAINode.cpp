/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;

    m_trigger_details_isSet = false;
    m_trigger_details_isValid = false;

    m_job_details_isSet = false;
    m_job_details_isValid = false;

    m_crawler_details_isSet = false;
    m_crawler_details_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("UniqueId")]);
    m_unique_id_isSet = !json[QString("UniqueId")].isNull() && m_unique_id_isValid;

    m_trigger_details_isValid = ::OpenAPI::fromJsonValue(m_trigger_details, json[QString("TriggerDetails")]);
    m_trigger_details_isSet = !json[QString("TriggerDetails")].isNull() && m_trigger_details_isValid;

    m_job_details_isValid = ::OpenAPI::fromJsonValue(m_job_details, json[QString("JobDetails")]);
    m_job_details_isSet = !json[QString("JobDetails")].isNull() && m_job_details_isValid;

    m_crawler_details_isValid = ::OpenAPI::fromJsonValue(m_crawler_details, json[QString("CrawlerDetails")]);
    m_crawler_details_isSet = !json[QString("CrawlerDetails")].isNull() && m_crawler_details_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("UniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    if (m_trigger_details.isSet()) {
        obj.insert(QString("TriggerDetails"), ::OpenAPI::toJsonValue(m_trigger_details));
    }
    if (m_job_details.isSet()) {
        obj.insert(QString("JobDetails"), ::OpenAPI::toJsonValue(m_job_details));
    }
    if (m_crawler_details.isSet()) {
        obj.insert(QString("CrawlerDetails"), ::OpenAPI::toJsonValue(m_crawler_details));
    }
    return obj;
}

OAINodeType OAINode::getType() const {
    return m_type;
}
void OAINode::setType(const OAINodeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINode::is_type_Set() const{
    return m_type_isSet;
}

bool OAINode::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINode::getName() const {
    return m_name;
}
void OAINode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINode::is_name_Set() const{
    return m_name_isSet;
}

bool OAINode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINode::getUniqueId() const {
    return m_unique_id;
}
void OAINode::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAINode::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAINode::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

OAINode_TriggerDetails OAINode::getTriggerDetails() const {
    return m_trigger_details;
}
void OAINode::setTriggerDetails(const OAINode_TriggerDetails &trigger_details) {
    m_trigger_details = trigger_details;
    m_trigger_details_isSet = true;
}

bool OAINode::is_trigger_details_Set() const{
    return m_trigger_details_isSet;
}

bool OAINode::is_trigger_details_Valid() const{
    return m_trigger_details_isValid;
}

OAINode_JobDetails OAINode::getJobDetails() const {
    return m_job_details;
}
void OAINode::setJobDetails(const OAINode_JobDetails &job_details) {
    m_job_details = job_details;
    m_job_details_isSet = true;
}

bool OAINode::is_job_details_Set() const{
    return m_job_details_isSet;
}

bool OAINode::is_job_details_Valid() const{
    return m_job_details_isValid;
}

OAINode_CrawlerDetails OAINode::getCrawlerDetails() const {
    return m_crawler_details;
}
void OAINode::setCrawlerDetails(const OAINode_CrawlerDetails &crawler_details) {
    m_crawler_details = crawler_details;
    m_crawler_details_isSet = true;
}

bool OAINode::is_crawler_details_Set() const{
    return m_crawler_details_isSet;
}

bool OAINode::is_crawler_details_Valid() const{
    return m_crawler_details_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
