/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDataQualityRuleRecommendationRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDataQualityRuleRecommendationRunRequest::OAIStartDataQualityRuleRecommendationRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDataQualityRuleRecommendationRunRequest::OAIStartDataQualityRuleRecommendationRunRequest() {
    this->initializeModel();
}

OAIStartDataQualityRuleRecommendationRunRequest::~OAIStartDataQualityRuleRecommendationRunRequest() {}

void OAIStartDataQualityRuleRecommendationRunRequest::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_created_ruleset_name_isSet = false;
    m_created_ruleset_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIStartDataQualityRuleRecommendationRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDataQualityRuleRecommendationRunRequest::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_created_ruleset_name_isValid = ::OpenAPI::fromJsonValue(m_created_ruleset_name, json[QString("CreatedRulesetName")]);
    m_created_ruleset_name_isSet = !json[QString("CreatedRulesetName")].isNull() && m_created_ruleset_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAIStartDataQualityRuleRecommendationRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDataQualityRuleRecommendationRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_created_ruleset_name_isSet) {
        obj.insert(QString("CreatedRulesetName"), ::OpenAPI::toJsonValue(m_created_ruleset_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

OAIStartDataQualityRuleRecommendationRunRequest_DataSource OAIStartDataQualityRuleRecommendationRunRequest::getDataSource() const {
    return m_data_source;
}
void OAIStartDataQualityRuleRecommendationRunRequest::setDataSource(const OAIStartDataQualityRuleRecommendationRunRequest_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIStartDataQualityRuleRecommendationRunRequest::getRole() const {
    return m_role;
}
void OAIStartDataQualityRuleRecommendationRunRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIStartDataQualityRuleRecommendationRunRequest::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIStartDataQualityRuleRecommendationRunRequest::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

qint32 OAIStartDataQualityRuleRecommendationRunRequest::getTimeout() const {
    return m_timeout;
}
void OAIStartDataQualityRuleRecommendationRunRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIStartDataQualityRuleRecommendationRunRequest::getCreatedRulesetName() const {
    return m_created_ruleset_name;
}
void OAIStartDataQualityRuleRecommendationRunRequest::setCreatedRulesetName(const QString &created_ruleset_name) {
    m_created_ruleset_name = created_ruleset_name;
    m_created_ruleset_name_isSet = true;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_created_ruleset_name_Set() const{
    return m_created_ruleset_name_isSet;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_created_ruleset_name_Valid() const{
    return m_created_ruleset_name_isValid;
}

QString OAIStartDataQualityRuleRecommendationRunRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartDataQualityRuleRecommendationRunRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_ruleset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDataQualityRuleRecommendationRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
