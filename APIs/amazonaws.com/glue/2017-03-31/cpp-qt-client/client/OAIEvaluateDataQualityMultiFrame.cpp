/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluateDataQualityMultiFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluateDataQualityMultiFrame::OAIEvaluateDataQualityMultiFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluateDataQualityMultiFrame::OAIEvaluateDataQualityMultiFrame() {
    this->initializeModel();
}

OAIEvaluateDataQualityMultiFrame::~OAIEvaluateDataQualityMultiFrame() {}

void OAIEvaluateDataQualityMultiFrame::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_additional_data_sources_isSet = false;
    m_additional_data_sources_isValid = false;

    m_ruleset_isSet = false;
    m_ruleset_isValid = false;

    m_publishing_options_isSet = false;
    m_publishing_options_isValid = false;

    m_additional_options_isSet = false;
    m_additional_options_isValid = false;

    m_stop_job_on_failure_options_isSet = false;
    m_stop_job_on_failure_options_isValid = false;
}

void OAIEvaluateDataQualityMultiFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluateDataQualityMultiFrame::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_additional_data_sources_isValid = ::OpenAPI::fromJsonValue(m_additional_data_sources, json[QString("AdditionalDataSources")]);
    m_additional_data_sources_isSet = !json[QString("AdditionalDataSources")].isNull() && m_additional_data_sources_isValid;

    m_ruleset_isValid = ::OpenAPI::fromJsonValue(m_ruleset, json[QString("Ruleset")]);
    m_ruleset_isSet = !json[QString("Ruleset")].isNull() && m_ruleset_isValid;

    m_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_publishing_options, json[QString("PublishingOptions")]);
    m_publishing_options_isSet = !json[QString("PublishingOptions")].isNull() && m_publishing_options_isValid;

    m_additional_options_isValid = ::OpenAPI::fromJsonValue(m_additional_options, json[QString("AdditionalOptions")]);
    m_additional_options_isSet = !json[QString("AdditionalOptions")].isNull() && m_additional_options_isValid;

    m_stop_job_on_failure_options_isValid = ::OpenAPI::fromJsonValue(m_stop_job_on_failure_options, json[QString("StopJobOnFailureOptions")]);
    m_stop_job_on_failure_options_isSet = !json[QString("StopJobOnFailureOptions")].isNull() && m_stop_job_on_failure_options_isValid;
}

QString OAIEvaluateDataQualityMultiFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluateDataQualityMultiFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_additional_data_sources.isSet()) {
        obj.insert(QString("AdditionalDataSources"), ::OpenAPI::toJsonValue(m_additional_data_sources));
    }
    if (m_ruleset_isSet) {
        obj.insert(QString("Ruleset"), ::OpenAPI::toJsonValue(m_ruleset));
    }
    if (m_publishing_options.isSet()) {
        obj.insert(QString("PublishingOptions"), ::OpenAPI::toJsonValue(m_publishing_options));
    }
    if (m_additional_options.isSet()) {
        obj.insert(QString("AdditionalOptions"), ::OpenAPI::toJsonValue(m_additional_options));
    }
    if (m_stop_job_on_failure_options.isSet()) {
        obj.insert(QString("StopJobOnFailureOptions"), ::OpenAPI::toJsonValue(m_stop_job_on_failure_options));
    }
    return obj;
}

QString OAIEvaluateDataQualityMultiFrame::getName() const {
    return m_name;
}
void OAIEvaluateDataQualityMultiFrame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIEvaluateDataQualityMultiFrame::getInputs() const {
    return m_inputs;
}
void OAIEvaluateDataQualityMultiFrame::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QMap OAIEvaluateDataQualityMultiFrame::getAdditionalDataSources() const {
    return m_additional_data_sources;
}
void OAIEvaluateDataQualityMultiFrame::setAdditionalDataSources(const QMap &additional_data_sources) {
    m_additional_data_sources = additional_data_sources;
    m_additional_data_sources_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_additional_data_sources_Set() const{
    return m_additional_data_sources_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_additional_data_sources_Valid() const{
    return m_additional_data_sources_isValid;
}

QString OAIEvaluateDataQualityMultiFrame::getRuleset() const {
    return m_ruleset;
}
void OAIEvaluateDataQualityMultiFrame::setRuleset(const QString &ruleset) {
    m_ruleset = ruleset;
    m_ruleset_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_ruleset_Set() const{
    return m_ruleset_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_ruleset_Valid() const{
    return m_ruleset_isValid;
}

OAIEvaluateDataQuality_PublishingOptions OAIEvaluateDataQualityMultiFrame::getPublishingOptions() const {
    return m_publishing_options;
}
void OAIEvaluateDataQualityMultiFrame::setPublishingOptions(const OAIEvaluateDataQuality_PublishingOptions &publishing_options) {
    m_publishing_options = publishing_options;
    m_publishing_options_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_publishing_options_Set() const{
    return m_publishing_options_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_publishing_options_Valid() const{
    return m_publishing_options_isValid;
}

QMap OAIEvaluateDataQualityMultiFrame::getAdditionalOptions() const {
    return m_additional_options;
}
void OAIEvaluateDataQualityMultiFrame::setAdditionalOptions(const QMap &additional_options) {
    m_additional_options = additional_options;
    m_additional_options_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_additional_options_Set() const{
    return m_additional_options_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_additional_options_Valid() const{
    return m_additional_options_isValid;
}

OAIEvaluateDataQuality_StopJobOnFailureOptions OAIEvaluateDataQualityMultiFrame::getStopJobOnFailureOptions() const {
    return m_stop_job_on_failure_options;
}
void OAIEvaluateDataQualityMultiFrame::setStopJobOnFailureOptions(const OAIEvaluateDataQuality_StopJobOnFailureOptions &stop_job_on_failure_options) {
    m_stop_job_on_failure_options = stop_job_on_failure_options;
    m_stop_job_on_failure_options_isSet = true;
}

bool OAIEvaluateDataQualityMultiFrame::is_stop_job_on_failure_options_Set() const{
    return m_stop_job_on_failure_options_isSet;
}

bool OAIEvaluateDataQualityMultiFrame::is_stop_job_on_failure_options_Valid() const{
    return m_stop_job_on_failure_options_isValid;
}

bool OAIEvaluateDataQualityMultiFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruleset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_job_on_failure_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluateDataQualityMultiFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_inputs_isValid && m_ruleset_isValid && true;
}

} // namespace OpenAPI
