/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawl::OAICrawl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawl::OAICrawl() {
    this->initializeModel();
}

OAICrawl::~OAICrawl() {}

void OAICrawl::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_log_group_isSet = false;
    m_log_group_isValid = false;

    m_log_stream_isSet = false;
    m_log_stream_isValid = false;
}

void OAICrawl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawl::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_log_group_isValid = ::OpenAPI::fromJsonValue(m_log_group, json[QString("LogGroup")]);
    m_log_group_isSet = !json[QString("LogGroup")].isNull() && m_log_group_isValid;

    m_log_stream_isValid = ::OpenAPI::fromJsonValue(m_log_stream, json[QString("LogStream")]);
    m_log_stream_isSet = !json[QString("LogStream")].isNull() && m_log_stream_isValid;
}

QString OAICrawl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawl::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_log_group_isSet) {
        obj.insert(QString("LogGroup"), ::OpenAPI::toJsonValue(m_log_group));
    }
    if (m_log_stream_isSet) {
        obj.insert(QString("LogStream"), ::OpenAPI::toJsonValue(m_log_stream));
    }
    return obj;
}

OAICrawlState OAICrawl::getState() const {
    return m_state;
}
void OAICrawl::setState(const OAICrawlState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICrawl::is_state_Set() const{
    return m_state_isSet;
}

bool OAICrawl::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICrawl::getStartedOn() const {
    return m_started_on;
}
void OAICrawl::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAICrawl::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAICrawl::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAICrawl::getCompletedOn() const {
    return m_completed_on;
}
void OAICrawl::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAICrawl::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAICrawl::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

QString OAICrawl::getErrorMessage() const {
    return m_error_message;
}
void OAICrawl::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAICrawl::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAICrawl::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAICrawl::getLogGroup() const {
    return m_log_group;
}
void OAICrawl::setLogGroup(const QString &log_group) {
    m_log_group = log_group;
    m_log_group_isSet = true;
}

bool OAICrawl::is_log_group_Set() const{
    return m_log_group_isSet;
}

bool OAICrawl::is_log_group_Valid() const{
    return m_log_group_isValid;
}

QString OAICrawl::getLogStream() const {
    return m_log_stream;
}
void OAICrawl::setLogStream(const QString &log_stream) {
    m_log_stream = log_stream;
    m_log_stream_isSet = true;
}

bool OAICrawl::is_log_stream_Set() const{
    return m_log_stream_isSet;
}

bool OAICrawl::is_log_stream_Valid() const{
    return m_log_stream_isValid;
}

bool OAICrawl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_stream_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
