/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKinesisStreamingSourceOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKinesisStreamingSourceOptions::OAIKinesisStreamingSourceOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKinesisStreamingSourceOptions::OAIKinesisStreamingSourceOptions() {
    this->initializeModel();
}

OAIKinesisStreamingSourceOptions::~OAIKinesisStreamingSourceOptions() {}

void OAIKinesisStreamingSourceOptions::initializeModel() {

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_starting_position_isSet = false;
    m_starting_position_isValid = false;

    m_max_fetch_time_in_ms_isSet = false;
    m_max_fetch_time_in_ms_isValid = false;

    m_max_fetch_records_per_shard_isSet = false;
    m_max_fetch_records_per_shard_isValid = false;

    m_max_record_per_read_isSet = false;
    m_max_record_per_read_isValid = false;

    m_add_idle_time_between_reads_isSet = false;
    m_add_idle_time_between_reads_isValid = false;

    m_idle_time_between_reads_in_ms_isSet = false;
    m_idle_time_between_reads_in_ms_isValid = false;

    m_describe_shard_interval_isSet = false;
    m_describe_shard_interval_isValid = false;

    m_num_retries_isSet = false;
    m_num_retries_isValid = false;

    m_retry_interval_ms_isSet = false;
    m_retry_interval_ms_isValid = false;

    m_max_retry_interval_ms_isSet = false;
    m_max_retry_interval_ms_isValid = false;

    m_avoid_empty_batches_isSet = false;
    m_avoid_empty_batches_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_role_session_name_isSet = false;
    m_role_session_name_isValid = false;

    m_add_record_timestamp_isSet = false;
    m_add_record_timestamp_isValid = false;

    m_emit_consumer_lag_metrics_isSet = false;
    m_emit_consumer_lag_metrics_isValid = false;

    m_starting_timestamp_isSet = false;
    m_starting_timestamp_isValid = false;
}

void OAIKinesisStreamingSourceOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKinesisStreamingSourceOptions::fromJsonObject(QJsonObject json) {

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("EndpointUrl")]);
    m_endpoint_url_isSet = !json[QString("EndpointUrl")].isNull() && m_endpoint_url_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("Classification")]);
    m_classification_isSet = !json[QString("Classification")].isNull() && m_classification_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;

    m_starting_position_isValid = ::OpenAPI::fromJsonValue(m_starting_position, json[QString("StartingPosition")]);
    m_starting_position_isSet = !json[QString("StartingPosition")].isNull() && m_starting_position_isValid;

    m_max_fetch_time_in_ms_isValid = ::OpenAPI::fromJsonValue(m_max_fetch_time_in_ms, json[QString("MaxFetchTimeInMs")]);
    m_max_fetch_time_in_ms_isSet = !json[QString("MaxFetchTimeInMs")].isNull() && m_max_fetch_time_in_ms_isValid;

    m_max_fetch_records_per_shard_isValid = ::OpenAPI::fromJsonValue(m_max_fetch_records_per_shard, json[QString("MaxFetchRecordsPerShard")]);
    m_max_fetch_records_per_shard_isSet = !json[QString("MaxFetchRecordsPerShard")].isNull() && m_max_fetch_records_per_shard_isValid;

    m_max_record_per_read_isValid = ::OpenAPI::fromJsonValue(m_max_record_per_read, json[QString("MaxRecordPerRead")]);
    m_max_record_per_read_isSet = !json[QString("MaxRecordPerRead")].isNull() && m_max_record_per_read_isValid;

    m_add_idle_time_between_reads_isValid = ::OpenAPI::fromJsonValue(m_add_idle_time_between_reads, json[QString("AddIdleTimeBetweenReads")]);
    m_add_idle_time_between_reads_isSet = !json[QString("AddIdleTimeBetweenReads")].isNull() && m_add_idle_time_between_reads_isValid;

    m_idle_time_between_reads_in_ms_isValid = ::OpenAPI::fromJsonValue(m_idle_time_between_reads_in_ms, json[QString("IdleTimeBetweenReadsInMs")]);
    m_idle_time_between_reads_in_ms_isSet = !json[QString("IdleTimeBetweenReadsInMs")].isNull() && m_idle_time_between_reads_in_ms_isValid;

    m_describe_shard_interval_isValid = ::OpenAPI::fromJsonValue(m_describe_shard_interval, json[QString("DescribeShardInterval")]);
    m_describe_shard_interval_isSet = !json[QString("DescribeShardInterval")].isNull() && m_describe_shard_interval_isValid;

    m_num_retries_isValid = ::OpenAPI::fromJsonValue(m_num_retries, json[QString("NumRetries")]);
    m_num_retries_isSet = !json[QString("NumRetries")].isNull() && m_num_retries_isValid;

    m_retry_interval_ms_isValid = ::OpenAPI::fromJsonValue(m_retry_interval_ms, json[QString("RetryIntervalMs")]);
    m_retry_interval_ms_isSet = !json[QString("RetryIntervalMs")].isNull() && m_retry_interval_ms_isValid;

    m_max_retry_interval_ms_isValid = ::OpenAPI::fromJsonValue(m_max_retry_interval_ms, json[QString("MaxRetryIntervalMs")]);
    m_max_retry_interval_ms_isSet = !json[QString("MaxRetryIntervalMs")].isNull() && m_max_retry_interval_ms_isValid;

    m_avoid_empty_batches_isValid = ::OpenAPI::fromJsonValue(m_avoid_empty_batches, json[QString("AvoidEmptyBatches")]);
    m_avoid_empty_batches_isSet = !json[QString("AvoidEmptyBatches")].isNull() && m_avoid_empty_batches_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_role_session_name_isValid = ::OpenAPI::fromJsonValue(m_role_session_name, json[QString("RoleSessionName")]);
    m_role_session_name_isSet = !json[QString("RoleSessionName")].isNull() && m_role_session_name_isValid;

    m_add_record_timestamp_isValid = ::OpenAPI::fromJsonValue(m_add_record_timestamp, json[QString("AddRecordTimestamp")]);
    m_add_record_timestamp_isSet = !json[QString("AddRecordTimestamp")].isNull() && m_add_record_timestamp_isValid;

    m_emit_consumer_lag_metrics_isValid = ::OpenAPI::fromJsonValue(m_emit_consumer_lag_metrics, json[QString("EmitConsumerLagMetrics")]);
    m_emit_consumer_lag_metrics_isSet = !json[QString("EmitConsumerLagMetrics")].isNull() && m_emit_consumer_lag_metrics_isValid;

    m_starting_timestamp_isValid = ::OpenAPI::fromJsonValue(m_starting_timestamp, json[QString("StartingTimestamp")]);
    m_starting_timestamp_isSet = !json[QString("StartingTimestamp")].isNull() && m_starting_timestamp_isValid;
}

QString OAIKinesisStreamingSourceOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKinesisStreamingSourceOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_url_isSet) {
        obj.insert(QString("EndpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_classification_isSet) {
        obj.insert(QString("Classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_starting_position.isSet()) {
        obj.insert(QString("StartingPosition"), ::OpenAPI::toJsonValue(m_starting_position));
    }
    if (m_max_fetch_time_in_ms_isSet) {
        obj.insert(QString("MaxFetchTimeInMs"), ::OpenAPI::toJsonValue(m_max_fetch_time_in_ms));
    }
    if (m_max_fetch_records_per_shard_isSet) {
        obj.insert(QString("MaxFetchRecordsPerShard"), ::OpenAPI::toJsonValue(m_max_fetch_records_per_shard));
    }
    if (m_max_record_per_read_isSet) {
        obj.insert(QString("MaxRecordPerRead"), ::OpenAPI::toJsonValue(m_max_record_per_read));
    }
    if (m_add_idle_time_between_reads_isSet) {
        obj.insert(QString("AddIdleTimeBetweenReads"), ::OpenAPI::toJsonValue(m_add_idle_time_between_reads));
    }
    if (m_idle_time_between_reads_in_ms_isSet) {
        obj.insert(QString("IdleTimeBetweenReadsInMs"), ::OpenAPI::toJsonValue(m_idle_time_between_reads_in_ms));
    }
    if (m_describe_shard_interval_isSet) {
        obj.insert(QString("DescribeShardInterval"), ::OpenAPI::toJsonValue(m_describe_shard_interval));
    }
    if (m_num_retries_isSet) {
        obj.insert(QString("NumRetries"), ::OpenAPI::toJsonValue(m_num_retries));
    }
    if (m_retry_interval_ms_isSet) {
        obj.insert(QString("RetryIntervalMs"), ::OpenAPI::toJsonValue(m_retry_interval_ms));
    }
    if (m_max_retry_interval_ms_isSet) {
        obj.insert(QString("MaxRetryIntervalMs"), ::OpenAPI::toJsonValue(m_max_retry_interval_ms));
    }
    if (m_avoid_empty_batches_isSet) {
        obj.insert(QString("AvoidEmptyBatches"), ::OpenAPI::toJsonValue(m_avoid_empty_batches));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_role_session_name_isSet) {
        obj.insert(QString("RoleSessionName"), ::OpenAPI::toJsonValue(m_role_session_name));
    }
    if (m_add_record_timestamp_isSet) {
        obj.insert(QString("AddRecordTimestamp"), ::OpenAPI::toJsonValue(m_add_record_timestamp));
    }
    if (m_emit_consumer_lag_metrics_isSet) {
        obj.insert(QString("EmitConsumerLagMetrics"), ::OpenAPI::toJsonValue(m_emit_consumer_lag_metrics));
    }
    if (m_starting_timestamp_isSet) {
        obj.insert(QString("StartingTimestamp"), ::OpenAPI::toJsonValue(m_starting_timestamp));
    }
    return obj;
}

QString OAIKinesisStreamingSourceOptions::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIKinesisStreamingSourceOptions::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIKinesisStreamingSourceOptions::getStreamName() const {
    return m_stream_name;
}
void OAIKinesisStreamingSourceOptions::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIKinesisStreamingSourceOptions::getClassification() const {
    return m_classification;
}
void OAIKinesisStreamingSourceOptions::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIKinesisStreamingSourceOptions::getDelimiter() const {
    return m_delimiter;
}
void OAIKinesisStreamingSourceOptions::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

OAIStartingPosition OAIKinesisStreamingSourceOptions::getStartingPosition() const {
    return m_starting_position;
}
void OAIKinesisStreamingSourceOptions::setStartingPosition(const OAIStartingPosition &starting_position) {
    m_starting_position = starting_position;
    m_starting_position_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_starting_position_Set() const{
    return m_starting_position_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_starting_position_Valid() const{
    return m_starting_position_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getMaxFetchTimeInMs() const {
    return m_max_fetch_time_in_ms;
}
void OAIKinesisStreamingSourceOptions::setMaxFetchTimeInMs(const qint32 &max_fetch_time_in_ms) {
    m_max_fetch_time_in_ms = max_fetch_time_in_ms;
    m_max_fetch_time_in_ms_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_max_fetch_time_in_ms_Set() const{
    return m_max_fetch_time_in_ms_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_max_fetch_time_in_ms_Valid() const{
    return m_max_fetch_time_in_ms_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getMaxFetchRecordsPerShard() const {
    return m_max_fetch_records_per_shard;
}
void OAIKinesisStreamingSourceOptions::setMaxFetchRecordsPerShard(const qint32 &max_fetch_records_per_shard) {
    m_max_fetch_records_per_shard = max_fetch_records_per_shard;
    m_max_fetch_records_per_shard_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_max_fetch_records_per_shard_Set() const{
    return m_max_fetch_records_per_shard_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_max_fetch_records_per_shard_Valid() const{
    return m_max_fetch_records_per_shard_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getMaxRecordPerRead() const {
    return m_max_record_per_read;
}
void OAIKinesisStreamingSourceOptions::setMaxRecordPerRead(const qint32 &max_record_per_read) {
    m_max_record_per_read = max_record_per_read;
    m_max_record_per_read_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_max_record_per_read_Set() const{
    return m_max_record_per_read_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_max_record_per_read_Valid() const{
    return m_max_record_per_read_isValid;
}

bool OAIKinesisStreamingSourceOptions::getAddIdleTimeBetweenReads() const {
    return m_add_idle_time_between_reads;
}
void OAIKinesisStreamingSourceOptions::setAddIdleTimeBetweenReads(const bool &add_idle_time_between_reads) {
    m_add_idle_time_between_reads = add_idle_time_between_reads;
    m_add_idle_time_between_reads_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_add_idle_time_between_reads_Set() const{
    return m_add_idle_time_between_reads_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_add_idle_time_between_reads_Valid() const{
    return m_add_idle_time_between_reads_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getIdleTimeBetweenReadsInMs() const {
    return m_idle_time_between_reads_in_ms;
}
void OAIKinesisStreamingSourceOptions::setIdleTimeBetweenReadsInMs(const qint32 &idle_time_between_reads_in_ms) {
    m_idle_time_between_reads_in_ms = idle_time_between_reads_in_ms;
    m_idle_time_between_reads_in_ms_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_idle_time_between_reads_in_ms_Set() const{
    return m_idle_time_between_reads_in_ms_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_idle_time_between_reads_in_ms_Valid() const{
    return m_idle_time_between_reads_in_ms_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getDescribeShardInterval() const {
    return m_describe_shard_interval;
}
void OAIKinesisStreamingSourceOptions::setDescribeShardInterval(const qint32 &describe_shard_interval) {
    m_describe_shard_interval = describe_shard_interval;
    m_describe_shard_interval_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_describe_shard_interval_Set() const{
    return m_describe_shard_interval_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_describe_shard_interval_Valid() const{
    return m_describe_shard_interval_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getNumRetries() const {
    return m_num_retries;
}
void OAIKinesisStreamingSourceOptions::setNumRetries(const qint32 &num_retries) {
    m_num_retries = num_retries;
    m_num_retries_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_num_retries_Set() const{
    return m_num_retries_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_num_retries_Valid() const{
    return m_num_retries_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getRetryIntervalMs() const {
    return m_retry_interval_ms;
}
void OAIKinesisStreamingSourceOptions::setRetryIntervalMs(const qint32 &retry_interval_ms) {
    m_retry_interval_ms = retry_interval_ms;
    m_retry_interval_ms_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_retry_interval_ms_Set() const{
    return m_retry_interval_ms_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_retry_interval_ms_Valid() const{
    return m_retry_interval_ms_isValid;
}

qint32 OAIKinesisStreamingSourceOptions::getMaxRetryIntervalMs() const {
    return m_max_retry_interval_ms;
}
void OAIKinesisStreamingSourceOptions::setMaxRetryIntervalMs(const qint32 &max_retry_interval_ms) {
    m_max_retry_interval_ms = max_retry_interval_ms;
    m_max_retry_interval_ms_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_max_retry_interval_ms_Set() const{
    return m_max_retry_interval_ms_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_max_retry_interval_ms_Valid() const{
    return m_max_retry_interval_ms_isValid;
}

bool OAIKinesisStreamingSourceOptions::getAvoidEmptyBatches() const {
    return m_avoid_empty_batches;
}
void OAIKinesisStreamingSourceOptions::setAvoidEmptyBatches(const bool &avoid_empty_batches) {
    m_avoid_empty_batches = avoid_empty_batches;
    m_avoid_empty_batches_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_avoid_empty_batches_Set() const{
    return m_avoid_empty_batches_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_avoid_empty_batches_Valid() const{
    return m_avoid_empty_batches_isValid;
}

QString OAIKinesisStreamingSourceOptions::getStreamArn() const {
    return m_stream_arn;
}
void OAIKinesisStreamingSourceOptions::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

QString OAIKinesisStreamingSourceOptions::getRoleArn() const {
    return m_role_arn;
}
void OAIKinesisStreamingSourceOptions::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIKinesisStreamingSourceOptions::getRoleSessionName() const {
    return m_role_session_name;
}
void OAIKinesisStreamingSourceOptions::setRoleSessionName(const QString &role_session_name) {
    m_role_session_name = role_session_name;
    m_role_session_name_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_role_session_name_Set() const{
    return m_role_session_name_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_role_session_name_Valid() const{
    return m_role_session_name_isValid;
}

QString OAIKinesisStreamingSourceOptions::getAddRecordTimestamp() const {
    return m_add_record_timestamp;
}
void OAIKinesisStreamingSourceOptions::setAddRecordTimestamp(const QString &add_record_timestamp) {
    m_add_record_timestamp = add_record_timestamp;
    m_add_record_timestamp_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_add_record_timestamp_Set() const{
    return m_add_record_timestamp_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_add_record_timestamp_Valid() const{
    return m_add_record_timestamp_isValid;
}

QString OAIKinesisStreamingSourceOptions::getEmitConsumerLagMetrics() const {
    return m_emit_consumer_lag_metrics;
}
void OAIKinesisStreamingSourceOptions::setEmitConsumerLagMetrics(const QString &emit_consumer_lag_metrics) {
    m_emit_consumer_lag_metrics = emit_consumer_lag_metrics;
    m_emit_consumer_lag_metrics_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_emit_consumer_lag_metrics_Set() const{
    return m_emit_consumer_lag_metrics_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_emit_consumer_lag_metrics_Valid() const{
    return m_emit_consumer_lag_metrics_isValid;
}

QDateTime OAIKinesisStreamingSourceOptions::getStartingTimestamp() const {
    return m_starting_timestamp;
}
void OAIKinesisStreamingSourceOptions::setStartingTimestamp(const QDateTime &starting_timestamp) {
    m_starting_timestamp = starting_timestamp;
    m_starting_timestamp_isSet = true;
}

bool OAIKinesisStreamingSourceOptions::is_starting_timestamp_Set() const{
    return m_starting_timestamp_isSet;
}

bool OAIKinesisStreamingSourceOptions::is_starting_timestamp_Valid() const{
    return m_starting_timestamp_isValid;
}

bool OAIKinesisStreamingSourceOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_fetch_time_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_fetch_records_per_shard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_record_per_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_idle_time_between_reads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_time_between_reads_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_describe_shard_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_interval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retry_interval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_empty_batches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_session_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_record_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emit_consumer_lag_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKinesisStreamingSourceOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
