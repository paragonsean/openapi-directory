/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWorkflowRunsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWorkflowRunsRequest::OAIGetWorkflowRunsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWorkflowRunsRequest::OAIGetWorkflowRunsRequest() {
    this->initializeModel();
}

OAIGetWorkflowRunsRequest::~OAIGetWorkflowRunsRequest() {}

void OAIGetWorkflowRunsRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_include_graph_isSet = false;
    m_include_graph_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetWorkflowRunsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWorkflowRunsRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_include_graph_isValid = ::OpenAPI::fromJsonValue(m_include_graph, json[QString("IncludeGraph")]);
    m_include_graph_isSet = !json[QString("IncludeGraph")].isNull() && m_include_graph_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetWorkflowRunsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWorkflowRunsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_include_graph_isSet) {
        obj.insert(QString("IncludeGraph"), ::OpenAPI::toJsonValue(m_include_graph));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIGetWorkflowRunsRequest::getName() const {
    return m_name;
}
void OAIGetWorkflowRunsRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetWorkflowRunsRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetWorkflowRunsRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetWorkflowRunsRequest::getIncludeGraph() const {
    return m_include_graph;
}
void OAIGetWorkflowRunsRequest::setIncludeGraph(const bool &include_graph) {
    m_include_graph = include_graph;
    m_include_graph_isSet = true;
}

bool OAIGetWorkflowRunsRequest::is_include_graph_Set() const{
    return m_include_graph_isSet;
}

bool OAIGetWorkflowRunsRequest::is_include_graph_Valid() const{
    return m_include_graph_isValid;
}

QString OAIGetWorkflowRunsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetWorkflowRunsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetWorkflowRunsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetWorkflowRunsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetWorkflowRunsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetWorkflowRunsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetWorkflowRunsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetWorkflowRunsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetWorkflowRunsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_graph_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWorkflowRunsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
