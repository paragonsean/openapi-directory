/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetFormat::OAITargetFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetFormat::OAITargetFormat() {
    this->initializeModel();
}

OAITargetFormat::~OAITargetFormat() {}

void OAITargetFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("json", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::JSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("csv", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::CSV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("avro", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::AVRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("orc", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::ORC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("parquet", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::PARQUET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hudi", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::HUDI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("delta", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetFormat::DELTA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetFormat::JSON:
            val = "json";
            break;
        case eOAITargetFormat::CSV:
            val = "csv";
            break;
        case eOAITargetFormat::AVRO:
            val = "avro";
            break;
        case eOAITargetFormat::ORC:
            val = "orc";
            break;
        case eOAITargetFormat::PARQUET:
            val = "parquet";
            break;
        case eOAITargetFormat::HUDI:
            val = "hudi";
            break;
        case eOAITargetFormat::DELTA:
            val = "delta";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetFormat::eOAITargetFormat OAITargetFormat::getValue() const {
    return m_value;
}

void OAITargetFormat::setValue(const OAITargetFormat::eOAITargetFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
