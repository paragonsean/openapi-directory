/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClassifier.h
 *
 * &lt;p&gt;Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle. If it is, the classifier creates a schema in the form of a &lt;code&gt;StructType&lt;/code&gt; object that matches that data format.&lt;/p&gt; &lt;p&gt;You can use the standard classifiers that Glue provides, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a &lt;code&gt;grok&lt;/code&gt; classifier, an &lt;code&gt;XML&lt;/code&gt; classifier, a &lt;code&gt;JSON&lt;/code&gt; classifier, or a custom &lt;code&gt;CSV&lt;/code&gt; classifier, as specified in one of the fields in the &lt;code&gt;Classifier&lt;/code&gt; object.&lt;/p&gt;
 */

#ifndef OAIClassifier_H
#define OAIClassifier_H

#include <QJsonObject>

#include "OAIClassifier_CsvClassifier.h"
#include "OAIClassifier_GrokClassifier.h"
#include "OAIClassifier_JsonClassifier.h"
#include "OAIClassifier_XMLClassifier.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClassifier_GrokClassifier;
class OAIClassifier_XMLClassifier;
class OAIClassifier_JsonClassifier;
class OAIClassifier_CsvClassifier;

class OAIClassifier : public OAIObject {
public:
    OAIClassifier();
    OAIClassifier(QString json);
    ~OAIClassifier() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIClassifier_GrokClassifier getGrokClassifier() const;
    void setGrokClassifier(const OAIClassifier_GrokClassifier &grok_classifier);
    bool is_grok_classifier_Set() const;
    bool is_grok_classifier_Valid() const;

    OAIClassifier_XMLClassifier getXmlClassifier() const;
    void setXmlClassifier(const OAIClassifier_XMLClassifier &xml_classifier);
    bool is_xml_classifier_Set() const;
    bool is_xml_classifier_Valid() const;

    OAIClassifier_JsonClassifier getJsonClassifier() const;
    void setJsonClassifier(const OAIClassifier_JsonClassifier &json_classifier);
    bool is_json_classifier_Set() const;
    bool is_json_classifier_Valid() const;

    OAIClassifier_CsvClassifier getCsvClassifier() const;
    void setCsvClassifier(const OAIClassifier_CsvClassifier &csv_classifier);
    bool is_csv_classifier_Set() const;
    bool is_csv_classifier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIClassifier_GrokClassifier m_grok_classifier;
    bool m_grok_classifier_isSet;
    bool m_grok_classifier_isValid;

    OAIClassifier_XMLClassifier m_xml_classifier;
    bool m_xml_classifier_isSet;
    bool m_xml_classifier_isValid;

    OAIClassifier_JsonClassifier m_json_classifier;
    bool m_json_classifier_isSet;
    bool m_json_classifier_isValid;

    OAIClassifier_CsvClassifier m_csv_classifier;
    bool m_csv_classifier_isSet;
    bool m_csv_classifier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClassifier)

#endif // OAIClassifier_H
