/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectJDBCSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectJDBCSource::OAIDirectJDBCSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectJDBCSource::OAIDirectJDBCSource() {
    this->initializeModel();
}

OAIDirectJDBCSource::~OAIDirectJDBCSource() {}

void OAIDirectJDBCSource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_redshift_tmp_dir_isSet = false;
    m_redshift_tmp_dir_isValid = false;
}

void OAIDirectJDBCSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectJDBCSource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;

    m_redshift_tmp_dir_isValid = ::OpenAPI::fromJsonValue(m_redshift_tmp_dir, json[QString("RedshiftTmpDir")]);
    m_redshift_tmp_dir_isSet = !json[QString("RedshiftTmpDir")].isNull() && m_redshift_tmp_dir_isValid;
}

QString OAIDirectJDBCSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectJDBCSource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_table_isSet) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_redshift_tmp_dir_isSet) {
        obj.insert(QString("RedshiftTmpDir"), ::OpenAPI::toJsonValue(m_redshift_tmp_dir));
    }
    return obj;
}

QString OAIDirectJDBCSource::getName() const {
    return m_name;
}
void OAIDirectJDBCSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDirectJDBCSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDirectJDBCSource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDirectJDBCSource::getDatabase() const {
    return m_database;
}
void OAIDirectJDBCSource::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDirectJDBCSource::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDirectJDBCSource::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIDirectJDBCSource::getTable() const {
    return m_table;
}
void OAIDirectJDBCSource::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIDirectJDBCSource::is_table_Set() const{
    return m_table_isSet;
}

bool OAIDirectJDBCSource::is_table_Valid() const{
    return m_table_isValid;
}

QString OAIDirectJDBCSource::getConnectionName() const {
    return m_connection_name;
}
void OAIDirectJDBCSource::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIDirectJDBCSource::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIDirectJDBCSource::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

OAIJDBCConnectionType OAIDirectJDBCSource::getConnectionType() const {
    return m_connection_type;
}
void OAIDirectJDBCSource::setConnectionType(const OAIJDBCConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIDirectJDBCSource::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIDirectJDBCSource::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIDirectJDBCSource::getRedshiftTmpDir() const {
    return m_redshift_tmp_dir;
}
void OAIDirectJDBCSource::setRedshiftTmpDir(const QString &redshift_tmp_dir) {
    m_redshift_tmp_dir = redshift_tmp_dir;
    m_redshift_tmp_dir_isSet = true;
}

bool OAIDirectJDBCSource::is_redshift_tmp_dir_Set() const{
    return m_redshift_tmp_dir_isSet;
}

bool OAIDirectJDBCSource::is_redshift_tmp_dir_Valid() const{
    return m_redshift_tmp_dir_isValid;
}

bool OAIDirectJDBCSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_tmp_dir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectJDBCSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_database_isValid && m_table_isValid && m_connection_name_isValid && m_connection_type_isValid && true;
}

} // namespace OpenAPI
