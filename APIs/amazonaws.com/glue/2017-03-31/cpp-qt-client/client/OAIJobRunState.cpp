/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRunState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRunState::OAIJobRunState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRunState::OAIJobRunState() {
    this->initializeModel();
}

OAIJobRunState::~OAIJobRunState() {}

void OAIJobRunState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJobRunState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJobRunState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAITING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::WAITING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJobRunState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJobRunState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJobRunState::STARTING:
            val = "STARTING";
            break;
        case eOAIJobRunState::RUNNING:
            val = "RUNNING";
            break;
        case eOAIJobRunState::STOPPING:
            val = "STOPPING";
            break;
        case eOAIJobRunState::STOPPED:
            val = "STOPPED";
            break;
        case eOAIJobRunState::SUCCEEDED:
            val = "SUCCEEDED";
            break;
        case eOAIJobRunState::FAILED:
            val = "FAILED";
            break;
        case eOAIJobRunState::TIMEOUT:
            val = "TIMEOUT";
            break;
        case eOAIJobRunState::ERROR:
            val = "ERROR";
            break;
        case eOAIJobRunState::WAITING:
            val = "WAITING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJobRunState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJobRunState::eOAIJobRunState OAIJobRunState::getValue() const {
    return m_value;
}

void OAIJobRunState::setValue(const OAIJobRunState::eOAIJobRunState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJobRunState::isSet() const {
    
    return m_value_isSet;
}

bool OAIJobRunState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
