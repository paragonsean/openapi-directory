/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeGenConfigurationNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeGenConfigurationNode::OAICodeGenConfigurationNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeGenConfigurationNode::OAICodeGenConfigurationNode() {
    this->initializeModel();
}

OAICodeGenConfigurationNode::~OAICodeGenConfigurationNode() {}

void OAICodeGenConfigurationNode::initializeModel() {

    m_athena_connector_source_isSet = false;
    m_athena_connector_source_isValid = false;

    m_jdbc_connector_source_isSet = false;
    m_jdbc_connector_source_isValid = false;

    m_spark_connector_source_isSet = false;
    m_spark_connector_source_isValid = false;

    m_catalog_source_isSet = false;
    m_catalog_source_isValid = false;

    m_redshift_source_isSet = false;
    m_redshift_source_isValid = false;

    m_s3_catalog_source_isSet = false;
    m_s3_catalog_source_isValid = false;

    m_s3_csv_source_isSet = false;
    m_s3_csv_source_isValid = false;

    m_s3_json_source_isSet = false;
    m_s3_json_source_isValid = false;

    m_s3_parquet_source_isSet = false;
    m_s3_parquet_source_isValid = false;

    m_relational_catalog_source_isSet = false;
    m_relational_catalog_source_isValid = false;

    m_dynamo_db_catalog_source_isSet = false;
    m_dynamo_db_catalog_source_isValid = false;

    m_jdbc_connector_target_isSet = false;
    m_jdbc_connector_target_isValid = false;

    m_spark_connector_target_isSet = false;
    m_spark_connector_target_isValid = false;

    m_catalog_target_isSet = false;
    m_catalog_target_isValid = false;

    m_redshift_target_isSet = false;
    m_redshift_target_isValid = false;

    m_s3_catalog_target_isSet = false;
    m_s3_catalog_target_isValid = false;

    m_s3_glue_parquet_target_isSet = false;
    m_s3_glue_parquet_target_isValid = false;

    m_s3_direct_target_isSet = false;
    m_s3_direct_target_isValid = false;

    m_apply_mapping_isSet = false;
    m_apply_mapping_isValid = false;

    m_select_fields_isSet = false;
    m_select_fields_isValid = false;

    m_drop_fields_isSet = false;
    m_drop_fields_isValid = false;

    m_rename_field_isSet = false;
    m_rename_field_isValid = false;

    m_spigot_isSet = false;
    m_spigot_isValid = false;

    m_join_isSet = false;
    m_join_isValid = false;

    m_split_fields_isSet = false;
    m_split_fields_isValid = false;

    m_select_from_collection_isSet = false;
    m_select_from_collection_isValid = false;

    m_fill_missing_values_isSet = false;
    m_fill_missing_values_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_custom_code_isSet = false;
    m_custom_code_isValid = false;

    m_spark_sql_isSet = false;
    m_spark_sql_isValid = false;

    m_direct_kinesis_source_isSet = false;
    m_direct_kinesis_source_isValid = false;

    m_direct_kafka_source_isSet = false;
    m_direct_kafka_source_isValid = false;

    m_catalog_kinesis_source_isSet = false;
    m_catalog_kinesis_source_isValid = false;

    m_catalog_kafka_source_isSet = false;
    m_catalog_kafka_source_isValid = false;

    m_drop_null_fields_isSet = false;
    m_drop_null_fields_isValid = false;

    m_merge_isSet = false;
    m_merge_isValid = false;

    m_r_union_isSet = false;
    m_r_union_isValid = false;

    m_pii_detection_isSet = false;
    m_pii_detection_isValid = false;

    m_aggregate_isSet = false;
    m_aggregate_isValid = false;

    m_drop_duplicates_isSet = false;
    m_drop_duplicates_isValid = false;

    m_governed_catalog_target_isSet = false;
    m_governed_catalog_target_isValid = false;

    m_governed_catalog_source_isSet = false;
    m_governed_catalog_source_isValid = false;

    m_microsoft_sql_server_catalog_source_isSet = false;
    m_microsoft_sql_server_catalog_source_isValid = false;

    m_my_sql_catalog_source_isSet = false;
    m_my_sql_catalog_source_isValid = false;

    m_oracle_sql_catalog_source_isSet = false;
    m_oracle_sql_catalog_source_isValid = false;

    m_postgre_sql_catalog_source_isSet = false;
    m_postgre_sql_catalog_source_isValid = false;

    m_microsoft_sql_server_catalog_target_isSet = false;
    m_microsoft_sql_server_catalog_target_isValid = false;

    m_my_sql_catalog_target_isSet = false;
    m_my_sql_catalog_target_isValid = false;

    m_oracle_sql_catalog_target_isSet = false;
    m_oracle_sql_catalog_target_isValid = false;

    m_postgre_sql_catalog_target_isSet = false;
    m_postgre_sql_catalog_target_isValid = false;

    m_dynamic_transform_isSet = false;
    m_dynamic_transform_isValid = false;

    m_evaluate_data_quality_isSet = false;
    m_evaluate_data_quality_isValid = false;

    m_s3_catalog_hudi_source_isSet = false;
    m_s3_catalog_hudi_source_isValid = false;

    m_catalog_hudi_source_isSet = false;
    m_catalog_hudi_source_isValid = false;

    m_s3_hudi_source_isSet = false;
    m_s3_hudi_source_isValid = false;

    m_s3_hudi_catalog_target_isSet = false;
    m_s3_hudi_catalog_target_isValid = false;

    m_s3_hudi_direct_target_isSet = false;
    m_s3_hudi_direct_target_isValid = false;

    m_direct_jdbc_source_isSet = false;
    m_direct_jdbc_source_isValid = false;

    m_s3_catalog_delta_source_isSet = false;
    m_s3_catalog_delta_source_isValid = false;

    m_catalog_delta_source_isSet = false;
    m_catalog_delta_source_isValid = false;

    m_s3_delta_source_isSet = false;
    m_s3_delta_source_isValid = false;

    m_s3_delta_catalog_target_isSet = false;
    m_s3_delta_catalog_target_isValid = false;

    m_s3_delta_direct_target_isSet = false;
    m_s3_delta_direct_target_isValid = false;

    m_amazon_redshift_source_isSet = false;
    m_amazon_redshift_source_isValid = false;

    m_amazon_redshift_target_isSet = false;
    m_amazon_redshift_target_isValid = false;

    m_evaluate_data_quality_multi_frame_isSet = false;
    m_evaluate_data_quality_multi_frame_isValid = false;

    m_recipe_isSet = false;
    m_recipe_isValid = false;

    m_snowflake_source_isSet = false;
    m_snowflake_source_isValid = false;

    m_snowflake_target_isSet = false;
    m_snowflake_target_isValid = false;
}

void OAICodeGenConfigurationNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeGenConfigurationNode::fromJsonObject(QJsonObject json) {

    m_athena_connector_source_isValid = ::OpenAPI::fromJsonValue(m_athena_connector_source, json[QString("AthenaConnectorSource")]);
    m_athena_connector_source_isSet = !json[QString("AthenaConnectorSource")].isNull() && m_athena_connector_source_isValid;

    m_jdbc_connector_source_isValid = ::OpenAPI::fromJsonValue(m_jdbc_connector_source, json[QString("JDBCConnectorSource")]);
    m_jdbc_connector_source_isSet = !json[QString("JDBCConnectorSource")].isNull() && m_jdbc_connector_source_isValid;

    m_spark_connector_source_isValid = ::OpenAPI::fromJsonValue(m_spark_connector_source, json[QString("SparkConnectorSource")]);
    m_spark_connector_source_isSet = !json[QString("SparkConnectorSource")].isNull() && m_spark_connector_source_isValid;

    m_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_catalog_source, json[QString("CatalogSource")]);
    m_catalog_source_isSet = !json[QString("CatalogSource")].isNull() && m_catalog_source_isValid;

    m_redshift_source_isValid = ::OpenAPI::fromJsonValue(m_redshift_source, json[QString("RedshiftSource")]);
    m_redshift_source_isSet = !json[QString("RedshiftSource")].isNull() && m_redshift_source_isValid;

    m_s3_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_s3_catalog_source, json[QString("S3CatalogSource")]);
    m_s3_catalog_source_isSet = !json[QString("S3CatalogSource")].isNull() && m_s3_catalog_source_isValid;

    m_s3_csv_source_isValid = ::OpenAPI::fromJsonValue(m_s3_csv_source, json[QString("S3CsvSource")]);
    m_s3_csv_source_isSet = !json[QString("S3CsvSource")].isNull() && m_s3_csv_source_isValid;

    m_s3_json_source_isValid = ::OpenAPI::fromJsonValue(m_s3_json_source, json[QString("S3JsonSource")]);
    m_s3_json_source_isSet = !json[QString("S3JsonSource")].isNull() && m_s3_json_source_isValid;

    m_s3_parquet_source_isValid = ::OpenAPI::fromJsonValue(m_s3_parquet_source, json[QString("S3ParquetSource")]);
    m_s3_parquet_source_isSet = !json[QString("S3ParquetSource")].isNull() && m_s3_parquet_source_isValid;

    m_relational_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_relational_catalog_source, json[QString("RelationalCatalogSource")]);
    m_relational_catalog_source_isSet = !json[QString("RelationalCatalogSource")].isNull() && m_relational_catalog_source_isValid;

    m_dynamo_db_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_dynamo_db_catalog_source, json[QString("DynamoDBCatalogSource")]);
    m_dynamo_db_catalog_source_isSet = !json[QString("DynamoDBCatalogSource")].isNull() && m_dynamo_db_catalog_source_isValid;

    m_jdbc_connector_target_isValid = ::OpenAPI::fromJsonValue(m_jdbc_connector_target, json[QString("JDBCConnectorTarget")]);
    m_jdbc_connector_target_isSet = !json[QString("JDBCConnectorTarget")].isNull() && m_jdbc_connector_target_isValid;

    m_spark_connector_target_isValid = ::OpenAPI::fromJsonValue(m_spark_connector_target, json[QString("SparkConnectorTarget")]);
    m_spark_connector_target_isSet = !json[QString("SparkConnectorTarget")].isNull() && m_spark_connector_target_isValid;

    m_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_catalog_target, json[QString("CatalogTarget")]);
    m_catalog_target_isSet = !json[QString("CatalogTarget")].isNull() && m_catalog_target_isValid;

    m_redshift_target_isValid = ::OpenAPI::fromJsonValue(m_redshift_target, json[QString("RedshiftTarget")]);
    m_redshift_target_isSet = !json[QString("RedshiftTarget")].isNull() && m_redshift_target_isValid;

    m_s3_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_s3_catalog_target, json[QString("S3CatalogTarget")]);
    m_s3_catalog_target_isSet = !json[QString("S3CatalogTarget")].isNull() && m_s3_catalog_target_isValid;

    m_s3_glue_parquet_target_isValid = ::OpenAPI::fromJsonValue(m_s3_glue_parquet_target, json[QString("S3GlueParquetTarget")]);
    m_s3_glue_parquet_target_isSet = !json[QString("S3GlueParquetTarget")].isNull() && m_s3_glue_parquet_target_isValid;

    m_s3_direct_target_isValid = ::OpenAPI::fromJsonValue(m_s3_direct_target, json[QString("S3DirectTarget")]);
    m_s3_direct_target_isSet = !json[QString("S3DirectTarget")].isNull() && m_s3_direct_target_isValid;

    m_apply_mapping_isValid = ::OpenAPI::fromJsonValue(m_apply_mapping, json[QString("ApplyMapping")]);
    m_apply_mapping_isSet = !json[QString("ApplyMapping")].isNull() && m_apply_mapping_isValid;

    m_select_fields_isValid = ::OpenAPI::fromJsonValue(m_select_fields, json[QString("SelectFields")]);
    m_select_fields_isSet = !json[QString("SelectFields")].isNull() && m_select_fields_isValid;

    m_drop_fields_isValid = ::OpenAPI::fromJsonValue(m_drop_fields, json[QString("DropFields")]);
    m_drop_fields_isSet = !json[QString("DropFields")].isNull() && m_drop_fields_isValid;

    m_rename_field_isValid = ::OpenAPI::fromJsonValue(m_rename_field, json[QString("RenameField")]);
    m_rename_field_isSet = !json[QString("RenameField")].isNull() && m_rename_field_isValid;

    m_spigot_isValid = ::OpenAPI::fromJsonValue(m_spigot, json[QString("Spigot")]);
    m_spigot_isSet = !json[QString("Spigot")].isNull() && m_spigot_isValid;

    m_join_isValid = ::OpenAPI::fromJsonValue(m_join, json[QString("Join")]);
    m_join_isSet = !json[QString("Join")].isNull() && m_join_isValid;

    m_split_fields_isValid = ::OpenAPI::fromJsonValue(m_split_fields, json[QString("SplitFields")]);
    m_split_fields_isSet = !json[QString("SplitFields")].isNull() && m_split_fields_isValid;

    m_select_from_collection_isValid = ::OpenAPI::fromJsonValue(m_select_from_collection, json[QString("SelectFromCollection")]);
    m_select_from_collection_isSet = !json[QString("SelectFromCollection")].isNull() && m_select_from_collection_isValid;

    m_fill_missing_values_isValid = ::OpenAPI::fromJsonValue(m_fill_missing_values, json[QString("FillMissingValues")]);
    m_fill_missing_values_isSet = !json[QString("FillMissingValues")].isNull() && m_fill_missing_values_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_custom_code_isValid = ::OpenAPI::fromJsonValue(m_custom_code, json[QString("CustomCode")]);
    m_custom_code_isSet = !json[QString("CustomCode")].isNull() && m_custom_code_isValid;

    m_spark_sql_isValid = ::OpenAPI::fromJsonValue(m_spark_sql, json[QString("SparkSQL")]);
    m_spark_sql_isSet = !json[QString("SparkSQL")].isNull() && m_spark_sql_isValid;

    m_direct_kinesis_source_isValid = ::OpenAPI::fromJsonValue(m_direct_kinesis_source, json[QString("DirectKinesisSource")]);
    m_direct_kinesis_source_isSet = !json[QString("DirectKinesisSource")].isNull() && m_direct_kinesis_source_isValid;

    m_direct_kafka_source_isValid = ::OpenAPI::fromJsonValue(m_direct_kafka_source, json[QString("DirectKafkaSource")]);
    m_direct_kafka_source_isSet = !json[QString("DirectKafkaSource")].isNull() && m_direct_kafka_source_isValid;

    m_catalog_kinesis_source_isValid = ::OpenAPI::fromJsonValue(m_catalog_kinesis_source, json[QString("CatalogKinesisSource")]);
    m_catalog_kinesis_source_isSet = !json[QString("CatalogKinesisSource")].isNull() && m_catalog_kinesis_source_isValid;

    m_catalog_kafka_source_isValid = ::OpenAPI::fromJsonValue(m_catalog_kafka_source, json[QString("CatalogKafkaSource")]);
    m_catalog_kafka_source_isSet = !json[QString("CatalogKafkaSource")].isNull() && m_catalog_kafka_source_isValid;

    m_drop_null_fields_isValid = ::OpenAPI::fromJsonValue(m_drop_null_fields, json[QString("DropNullFields")]);
    m_drop_null_fields_isSet = !json[QString("DropNullFields")].isNull() && m_drop_null_fields_isValid;

    m_merge_isValid = ::OpenAPI::fromJsonValue(m_merge, json[QString("Merge")]);
    m_merge_isSet = !json[QString("Merge")].isNull() && m_merge_isValid;

    m_r_union_isValid = ::OpenAPI::fromJsonValue(m_r_union, json[QString("Union")]);
    m_r_union_isSet = !json[QString("Union")].isNull() && m_r_union_isValid;

    m_pii_detection_isValid = ::OpenAPI::fromJsonValue(m_pii_detection, json[QString("PIIDetection")]);
    m_pii_detection_isSet = !json[QString("PIIDetection")].isNull() && m_pii_detection_isValid;

    m_aggregate_isValid = ::OpenAPI::fromJsonValue(m_aggregate, json[QString("Aggregate")]);
    m_aggregate_isSet = !json[QString("Aggregate")].isNull() && m_aggregate_isValid;

    m_drop_duplicates_isValid = ::OpenAPI::fromJsonValue(m_drop_duplicates, json[QString("DropDuplicates")]);
    m_drop_duplicates_isSet = !json[QString("DropDuplicates")].isNull() && m_drop_duplicates_isValid;

    m_governed_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_governed_catalog_target, json[QString("GovernedCatalogTarget")]);
    m_governed_catalog_target_isSet = !json[QString("GovernedCatalogTarget")].isNull() && m_governed_catalog_target_isValid;

    m_governed_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_governed_catalog_source, json[QString("GovernedCatalogSource")]);
    m_governed_catalog_source_isSet = !json[QString("GovernedCatalogSource")].isNull() && m_governed_catalog_source_isValid;

    m_microsoft_sql_server_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_microsoft_sql_server_catalog_source, json[QString("MicrosoftSQLServerCatalogSource")]);
    m_microsoft_sql_server_catalog_source_isSet = !json[QString("MicrosoftSQLServerCatalogSource")].isNull() && m_microsoft_sql_server_catalog_source_isValid;

    m_my_sql_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_my_sql_catalog_source, json[QString("MySQLCatalogSource")]);
    m_my_sql_catalog_source_isSet = !json[QString("MySQLCatalogSource")].isNull() && m_my_sql_catalog_source_isValid;

    m_oracle_sql_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_oracle_sql_catalog_source, json[QString("OracleSQLCatalogSource")]);
    m_oracle_sql_catalog_source_isSet = !json[QString("OracleSQLCatalogSource")].isNull() && m_oracle_sql_catalog_source_isValid;

    m_postgre_sql_catalog_source_isValid = ::OpenAPI::fromJsonValue(m_postgre_sql_catalog_source, json[QString("PostgreSQLCatalogSource")]);
    m_postgre_sql_catalog_source_isSet = !json[QString("PostgreSQLCatalogSource")].isNull() && m_postgre_sql_catalog_source_isValid;

    m_microsoft_sql_server_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_microsoft_sql_server_catalog_target, json[QString("MicrosoftSQLServerCatalogTarget")]);
    m_microsoft_sql_server_catalog_target_isSet = !json[QString("MicrosoftSQLServerCatalogTarget")].isNull() && m_microsoft_sql_server_catalog_target_isValid;

    m_my_sql_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_my_sql_catalog_target, json[QString("MySQLCatalogTarget")]);
    m_my_sql_catalog_target_isSet = !json[QString("MySQLCatalogTarget")].isNull() && m_my_sql_catalog_target_isValid;

    m_oracle_sql_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_oracle_sql_catalog_target, json[QString("OracleSQLCatalogTarget")]);
    m_oracle_sql_catalog_target_isSet = !json[QString("OracleSQLCatalogTarget")].isNull() && m_oracle_sql_catalog_target_isValid;

    m_postgre_sql_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_postgre_sql_catalog_target, json[QString("PostgreSQLCatalogTarget")]);
    m_postgre_sql_catalog_target_isSet = !json[QString("PostgreSQLCatalogTarget")].isNull() && m_postgre_sql_catalog_target_isValid;

    m_dynamic_transform_isValid = ::OpenAPI::fromJsonValue(m_dynamic_transform, json[QString("DynamicTransform")]);
    m_dynamic_transform_isSet = !json[QString("DynamicTransform")].isNull() && m_dynamic_transform_isValid;

    m_evaluate_data_quality_isValid = ::OpenAPI::fromJsonValue(m_evaluate_data_quality, json[QString("EvaluateDataQuality")]);
    m_evaluate_data_quality_isSet = !json[QString("EvaluateDataQuality")].isNull() && m_evaluate_data_quality_isValid;

    m_s3_catalog_hudi_source_isValid = ::OpenAPI::fromJsonValue(m_s3_catalog_hudi_source, json[QString("S3CatalogHudiSource")]);
    m_s3_catalog_hudi_source_isSet = !json[QString("S3CatalogHudiSource")].isNull() && m_s3_catalog_hudi_source_isValid;

    m_catalog_hudi_source_isValid = ::OpenAPI::fromJsonValue(m_catalog_hudi_source, json[QString("CatalogHudiSource")]);
    m_catalog_hudi_source_isSet = !json[QString("CatalogHudiSource")].isNull() && m_catalog_hudi_source_isValid;

    m_s3_hudi_source_isValid = ::OpenAPI::fromJsonValue(m_s3_hudi_source, json[QString("S3HudiSource")]);
    m_s3_hudi_source_isSet = !json[QString("S3HudiSource")].isNull() && m_s3_hudi_source_isValid;

    m_s3_hudi_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_s3_hudi_catalog_target, json[QString("S3HudiCatalogTarget")]);
    m_s3_hudi_catalog_target_isSet = !json[QString("S3HudiCatalogTarget")].isNull() && m_s3_hudi_catalog_target_isValid;

    m_s3_hudi_direct_target_isValid = ::OpenAPI::fromJsonValue(m_s3_hudi_direct_target, json[QString("S3HudiDirectTarget")]);
    m_s3_hudi_direct_target_isSet = !json[QString("S3HudiDirectTarget")].isNull() && m_s3_hudi_direct_target_isValid;

    m_direct_jdbc_source_isValid = ::OpenAPI::fromJsonValue(m_direct_jdbc_source, json[QString("DirectJDBCSource")]);
    m_direct_jdbc_source_isSet = !json[QString("DirectJDBCSource")].isNull() && m_direct_jdbc_source_isValid;

    m_s3_catalog_delta_source_isValid = ::OpenAPI::fromJsonValue(m_s3_catalog_delta_source, json[QString("S3CatalogDeltaSource")]);
    m_s3_catalog_delta_source_isSet = !json[QString("S3CatalogDeltaSource")].isNull() && m_s3_catalog_delta_source_isValid;

    m_catalog_delta_source_isValid = ::OpenAPI::fromJsonValue(m_catalog_delta_source, json[QString("CatalogDeltaSource")]);
    m_catalog_delta_source_isSet = !json[QString("CatalogDeltaSource")].isNull() && m_catalog_delta_source_isValid;

    m_s3_delta_source_isValid = ::OpenAPI::fromJsonValue(m_s3_delta_source, json[QString("S3DeltaSource")]);
    m_s3_delta_source_isSet = !json[QString("S3DeltaSource")].isNull() && m_s3_delta_source_isValid;

    m_s3_delta_catalog_target_isValid = ::OpenAPI::fromJsonValue(m_s3_delta_catalog_target, json[QString("S3DeltaCatalogTarget")]);
    m_s3_delta_catalog_target_isSet = !json[QString("S3DeltaCatalogTarget")].isNull() && m_s3_delta_catalog_target_isValid;

    m_s3_delta_direct_target_isValid = ::OpenAPI::fromJsonValue(m_s3_delta_direct_target, json[QString("S3DeltaDirectTarget")]);
    m_s3_delta_direct_target_isSet = !json[QString("S3DeltaDirectTarget")].isNull() && m_s3_delta_direct_target_isValid;

    m_amazon_redshift_source_isValid = ::OpenAPI::fromJsonValue(m_amazon_redshift_source, json[QString("AmazonRedshiftSource")]);
    m_amazon_redshift_source_isSet = !json[QString("AmazonRedshiftSource")].isNull() && m_amazon_redshift_source_isValid;

    m_amazon_redshift_target_isValid = ::OpenAPI::fromJsonValue(m_amazon_redshift_target, json[QString("AmazonRedshiftTarget")]);
    m_amazon_redshift_target_isSet = !json[QString("AmazonRedshiftTarget")].isNull() && m_amazon_redshift_target_isValid;

    m_evaluate_data_quality_multi_frame_isValid = ::OpenAPI::fromJsonValue(m_evaluate_data_quality_multi_frame, json[QString("EvaluateDataQualityMultiFrame")]);
    m_evaluate_data_quality_multi_frame_isSet = !json[QString("EvaluateDataQualityMultiFrame")].isNull() && m_evaluate_data_quality_multi_frame_isValid;

    m_recipe_isValid = ::OpenAPI::fromJsonValue(m_recipe, json[QString("Recipe")]);
    m_recipe_isSet = !json[QString("Recipe")].isNull() && m_recipe_isValid;

    m_snowflake_source_isValid = ::OpenAPI::fromJsonValue(m_snowflake_source, json[QString("SnowflakeSource")]);
    m_snowflake_source_isSet = !json[QString("SnowflakeSource")].isNull() && m_snowflake_source_isValid;

    m_snowflake_target_isValid = ::OpenAPI::fromJsonValue(m_snowflake_target, json[QString("SnowflakeTarget")]);
    m_snowflake_target_isSet = !json[QString("SnowflakeTarget")].isNull() && m_snowflake_target_isValid;
}

QString OAICodeGenConfigurationNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeGenConfigurationNode::asJsonObject() const {
    QJsonObject obj;
    if (m_athena_connector_source.isSet()) {
        obj.insert(QString("AthenaConnectorSource"), ::OpenAPI::toJsonValue(m_athena_connector_source));
    }
    if (m_jdbc_connector_source.isSet()) {
        obj.insert(QString("JDBCConnectorSource"), ::OpenAPI::toJsonValue(m_jdbc_connector_source));
    }
    if (m_spark_connector_source.isSet()) {
        obj.insert(QString("SparkConnectorSource"), ::OpenAPI::toJsonValue(m_spark_connector_source));
    }
    if (m_catalog_source.isSet()) {
        obj.insert(QString("CatalogSource"), ::OpenAPI::toJsonValue(m_catalog_source));
    }
    if (m_redshift_source.isSet()) {
        obj.insert(QString("RedshiftSource"), ::OpenAPI::toJsonValue(m_redshift_source));
    }
    if (m_s3_catalog_source.isSet()) {
        obj.insert(QString("S3CatalogSource"), ::OpenAPI::toJsonValue(m_s3_catalog_source));
    }
    if (m_s3_csv_source.isSet()) {
        obj.insert(QString("S3CsvSource"), ::OpenAPI::toJsonValue(m_s3_csv_source));
    }
    if (m_s3_json_source.isSet()) {
        obj.insert(QString("S3JsonSource"), ::OpenAPI::toJsonValue(m_s3_json_source));
    }
    if (m_s3_parquet_source.isSet()) {
        obj.insert(QString("S3ParquetSource"), ::OpenAPI::toJsonValue(m_s3_parquet_source));
    }
    if (m_relational_catalog_source.isSet()) {
        obj.insert(QString("RelationalCatalogSource"), ::OpenAPI::toJsonValue(m_relational_catalog_source));
    }
    if (m_dynamo_db_catalog_source.isSet()) {
        obj.insert(QString("DynamoDBCatalogSource"), ::OpenAPI::toJsonValue(m_dynamo_db_catalog_source));
    }
    if (m_jdbc_connector_target.isSet()) {
        obj.insert(QString("JDBCConnectorTarget"), ::OpenAPI::toJsonValue(m_jdbc_connector_target));
    }
    if (m_spark_connector_target.isSet()) {
        obj.insert(QString("SparkConnectorTarget"), ::OpenAPI::toJsonValue(m_spark_connector_target));
    }
    if (m_catalog_target.isSet()) {
        obj.insert(QString("CatalogTarget"), ::OpenAPI::toJsonValue(m_catalog_target));
    }
    if (m_redshift_target.isSet()) {
        obj.insert(QString("RedshiftTarget"), ::OpenAPI::toJsonValue(m_redshift_target));
    }
    if (m_s3_catalog_target.isSet()) {
        obj.insert(QString("S3CatalogTarget"), ::OpenAPI::toJsonValue(m_s3_catalog_target));
    }
    if (m_s3_glue_parquet_target.isSet()) {
        obj.insert(QString("S3GlueParquetTarget"), ::OpenAPI::toJsonValue(m_s3_glue_parquet_target));
    }
    if (m_s3_direct_target.isSet()) {
        obj.insert(QString("S3DirectTarget"), ::OpenAPI::toJsonValue(m_s3_direct_target));
    }
    if (m_apply_mapping.isSet()) {
        obj.insert(QString("ApplyMapping"), ::OpenAPI::toJsonValue(m_apply_mapping));
    }
    if (m_select_fields.isSet()) {
        obj.insert(QString("SelectFields"), ::OpenAPI::toJsonValue(m_select_fields));
    }
    if (m_drop_fields.isSet()) {
        obj.insert(QString("DropFields"), ::OpenAPI::toJsonValue(m_drop_fields));
    }
    if (m_rename_field.isSet()) {
        obj.insert(QString("RenameField"), ::OpenAPI::toJsonValue(m_rename_field));
    }
    if (m_spigot.isSet()) {
        obj.insert(QString("Spigot"), ::OpenAPI::toJsonValue(m_spigot));
    }
    if (m_join.isSet()) {
        obj.insert(QString("Join"), ::OpenAPI::toJsonValue(m_join));
    }
    if (m_split_fields.isSet()) {
        obj.insert(QString("SplitFields"), ::OpenAPI::toJsonValue(m_split_fields));
    }
    if (m_select_from_collection.isSet()) {
        obj.insert(QString("SelectFromCollection"), ::OpenAPI::toJsonValue(m_select_from_collection));
    }
    if (m_fill_missing_values.isSet()) {
        obj.insert(QString("FillMissingValues"), ::OpenAPI::toJsonValue(m_fill_missing_values));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_custom_code.isSet()) {
        obj.insert(QString("CustomCode"), ::OpenAPI::toJsonValue(m_custom_code));
    }
    if (m_spark_sql.isSet()) {
        obj.insert(QString("SparkSQL"), ::OpenAPI::toJsonValue(m_spark_sql));
    }
    if (m_direct_kinesis_source.isSet()) {
        obj.insert(QString("DirectKinesisSource"), ::OpenAPI::toJsonValue(m_direct_kinesis_source));
    }
    if (m_direct_kafka_source.isSet()) {
        obj.insert(QString("DirectKafkaSource"), ::OpenAPI::toJsonValue(m_direct_kafka_source));
    }
    if (m_catalog_kinesis_source.isSet()) {
        obj.insert(QString("CatalogKinesisSource"), ::OpenAPI::toJsonValue(m_catalog_kinesis_source));
    }
    if (m_catalog_kafka_source.isSet()) {
        obj.insert(QString("CatalogKafkaSource"), ::OpenAPI::toJsonValue(m_catalog_kafka_source));
    }
    if (m_drop_null_fields.isSet()) {
        obj.insert(QString("DropNullFields"), ::OpenAPI::toJsonValue(m_drop_null_fields));
    }
    if (m_merge.isSet()) {
        obj.insert(QString("Merge"), ::OpenAPI::toJsonValue(m_merge));
    }
    if (m_r_union.isSet()) {
        obj.insert(QString("Union"), ::OpenAPI::toJsonValue(m_r_union));
    }
    if (m_pii_detection.isSet()) {
        obj.insert(QString("PIIDetection"), ::OpenAPI::toJsonValue(m_pii_detection));
    }
    if (m_aggregate.isSet()) {
        obj.insert(QString("Aggregate"), ::OpenAPI::toJsonValue(m_aggregate));
    }
    if (m_drop_duplicates.isSet()) {
        obj.insert(QString("DropDuplicates"), ::OpenAPI::toJsonValue(m_drop_duplicates));
    }
    if (m_governed_catalog_target.isSet()) {
        obj.insert(QString("GovernedCatalogTarget"), ::OpenAPI::toJsonValue(m_governed_catalog_target));
    }
    if (m_governed_catalog_source.isSet()) {
        obj.insert(QString("GovernedCatalogSource"), ::OpenAPI::toJsonValue(m_governed_catalog_source));
    }
    if (m_microsoft_sql_server_catalog_source.isSet()) {
        obj.insert(QString("MicrosoftSQLServerCatalogSource"), ::OpenAPI::toJsonValue(m_microsoft_sql_server_catalog_source));
    }
    if (m_my_sql_catalog_source.isSet()) {
        obj.insert(QString("MySQLCatalogSource"), ::OpenAPI::toJsonValue(m_my_sql_catalog_source));
    }
    if (m_oracle_sql_catalog_source.isSet()) {
        obj.insert(QString("OracleSQLCatalogSource"), ::OpenAPI::toJsonValue(m_oracle_sql_catalog_source));
    }
    if (m_postgre_sql_catalog_source.isSet()) {
        obj.insert(QString("PostgreSQLCatalogSource"), ::OpenAPI::toJsonValue(m_postgre_sql_catalog_source));
    }
    if (m_microsoft_sql_server_catalog_target.isSet()) {
        obj.insert(QString("MicrosoftSQLServerCatalogTarget"), ::OpenAPI::toJsonValue(m_microsoft_sql_server_catalog_target));
    }
    if (m_my_sql_catalog_target.isSet()) {
        obj.insert(QString("MySQLCatalogTarget"), ::OpenAPI::toJsonValue(m_my_sql_catalog_target));
    }
    if (m_oracle_sql_catalog_target.isSet()) {
        obj.insert(QString("OracleSQLCatalogTarget"), ::OpenAPI::toJsonValue(m_oracle_sql_catalog_target));
    }
    if (m_postgre_sql_catalog_target.isSet()) {
        obj.insert(QString("PostgreSQLCatalogTarget"), ::OpenAPI::toJsonValue(m_postgre_sql_catalog_target));
    }
    if (m_dynamic_transform.isSet()) {
        obj.insert(QString("DynamicTransform"), ::OpenAPI::toJsonValue(m_dynamic_transform));
    }
    if (m_evaluate_data_quality.isSet()) {
        obj.insert(QString("EvaluateDataQuality"), ::OpenAPI::toJsonValue(m_evaluate_data_quality));
    }
    if (m_s3_catalog_hudi_source.isSet()) {
        obj.insert(QString("S3CatalogHudiSource"), ::OpenAPI::toJsonValue(m_s3_catalog_hudi_source));
    }
    if (m_catalog_hudi_source.isSet()) {
        obj.insert(QString("CatalogHudiSource"), ::OpenAPI::toJsonValue(m_catalog_hudi_source));
    }
    if (m_s3_hudi_source.isSet()) {
        obj.insert(QString("S3HudiSource"), ::OpenAPI::toJsonValue(m_s3_hudi_source));
    }
    if (m_s3_hudi_catalog_target.isSet()) {
        obj.insert(QString("S3HudiCatalogTarget"), ::OpenAPI::toJsonValue(m_s3_hudi_catalog_target));
    }
    if (m_s3_hudi_direct_target.isSet()) {
        obj.insert(QString("S3HudiDirectTarget"), ::OpenAPI::toJsonValue(m_s3_hudi_direct_target));
    }
    if (m_direct_jdbc_source.isSet()) {
        obj.insert(QString("DirectJDBCSource"), ::OpenAPI::toJsonValue(m_direct_jdbc_source));
    }
    if (m_s3_catalog_delta_source.isSet()) {
        obj.insert(QString("S3CatalogDeltaSource"), ::OpenAPI::toJsonValue(m_s3_catalog_delta_source));
    }
    if (m_catalog_delta_source.isSet()) {
        obj.insert(QString("CatalogDeltaSource"), ::OpenAPI::toJsonValue(m_catalog_delta_source));
    }
    if (m_s3_delta_source.isSet()) {
        obj.insert(QString("S3DeltaSource"), ::OpenAPI::toJsonValue(m_s3_delta_source));
    }
    if (m_s3_delta_catalog_target.isSet()) {
        obj.insert(QString("S3DeltaCatalogTarget"), ::OpenAPI::toJsonValue(m_s3_delta_catalog_target));
    }
    if (m_s3_delta_direct_target.isSet()) {
        obj.insert(QString("S3DeltaDirectTarget"), ::OpenAPI::toJsonValue(m_s3_delta_direct_target));
    }
    if (m_amazon_redshift_source.isSet()) {
        obj.insert(QString("AmazonRedshiftSource"), ::OpenAPI::toJsonValue(m_amazon_redshift_source));
    }
    if (m_amazon_redshift_target.isSet()) {
        obj.insert(QString("AmazonRedshiftTarget"), ::OpenAPI::toJsonValue(m_amazon_redshift_target));
    }
    if (m_evaluate_data_quality_multi_frame.isSet()) {
        obj.insert(QString("EvaluateDataQualityMultiFrame"), ::OpenAPI::toJsonValue(m_evaluate_data_quality_multi_frame));
    }
    if (m_recipe.isSet()) {
        obj.insert(QString("Recipe"), ::OpenAPI::toJsonValue(m_recipe));
    }
    if (m_snowflake_source.isSet()) {
        obj.insert(QString("SnowflakeSource"), ::OpenAPI::toJsonValue(m_snowflake_source));
    }
    if (m_snowflake_target.isSet()) {
        obj.insert(QString("SnowflakeTarget"), ::OpenAPI::toJsonValue(m_snowflake_target));
    }
    return obj;
}

OAICodeGenConfigurationNode_AthenaConnectorSource OAICodeGenConfigurationNode::getAthenaConnectorSource() const {
    return m_athena_connector_source;
}
void OAICodeGenConfigurationNode::setAthenaConnectorSource(const OAICodeGenConfigurationNode_AthenaConnectorSource &athena_connector_source) {
    m_athena_connector_source = athena_connector_source;
    m_athena_connector_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_athena_connector_source_Set() const{
    return m_athena_connector_source_isSet;
}

bool OAICodeGenConfigurationNode::is_athena_connector_source_Valid() const{
    return m_athena_connector_source_isValid;
}

OAICodeGenConfigurationNode_JDBCConnectorSource OAICodeGenConfigurationNode::getJdbcConnectorSource() const {
    return m_jdbc_connector_source;
}
void OAICodeGenConfigurationNode::setJdbcConnectorSource(const OAICodeGenConfigurationNode_JDBCConnectorSource &jdbc_connector_source) {
    m_jdbc_connector_source = jdbc_connector_source;
    m_jdbc_connector_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_jdbc_connector_source_Set() const{
    return m_jdbc_connector_source_isSet;
}

bool OAICodeGenConfigurationNode::is_jdbc_connector_source_Valid() const{
    return m_jdbc_connector_source_isValid;
}

OAICodeGenConfigurationNode_SparkConnectorSource OAICodeGenConfigurationNode::getSparkConnectorSource() const {
    return m_spark_connector_source;
}
void OAICodeGenConfigurationNode::setSparkConnectorSource(const OAICodeGenConfigurationNode_SparkConnectorSource &spark_connector_source) {
    m_spark_connector_source = spark_connector_source;
    m_spark_connector_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_spark_connector_source_Set() const{
    return m_spark_connector_source_isSet;
}

bool OAICodeGenConfigurationNode::is_spark_connector_source_Valid() const{
    return m_spark_connector_source_isValid;
}

OAICodeGenConfigurationNode_CatalogSource OAICodeGenConfigurationNode::getCatalogSource() const {
    return m_catalog_source;
}
void OAICodeGenConfigurationNode::setCatalogSource(const OAICodeGenConfigurationNode_CatalogSource &catalog_source) {
    m_catalog_source = catalog_source;
    m_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_catalog_source_Set() const{
    return m_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_catalog_source_Valid() const{
    return m_catalog_source_isValid;
}

OAICodeGenConfigurationNode_RedshiftSource OAICodeGenConfigurationNode::getRedshiftSource() const {
    return m_redshift_source;
}
void OAICodeGenConfigurationNode::setRedshiftSource(const OAICodeGenConfigurationNode_RedshiftSource &redshift_source) {
    m_redshift_source = redshift_source;
    m_redshift_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_redshift_source_Set() const{
    return m_redshift_source_isSet;
}

bool OAICodeGenConfigurationNode::is_redshift_source_Valid() const{
    return m_redshift_source_isValid;
}

OAICodeGenConfigurationNode_S3CatalogSource OAICodeGenConfigurationNode::getS3CatalogSource() const {
    return m_s3_catalog_source;
}
void OAICodeGenConfigurationNode::setS3CatalogSource(const OAICodeGenConfigurationNode_S3CatalogSource &s3_catalog_source) {
    m_s3_catalog_source = s3_catalog_source;
    m_s3_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_source_Set() const{
    return m_s3_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_source_Valid() const{
    return m_s3_catalog_source_isValid;
}

OAICodeGenConfigurationNode_S3CsvSource OAICodeGenConfigurationNode::getS3CsvSource() const {
    return m_s3_csv_source;
}
void OAICodeGenConfigurationNode::setS3CsvSource(const OAICodeGenConfigurationNode_S3CsvSource &s3_csv_source) {
    m_s3_csv_source = s3_csv_source;
    m_s3_csv_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_csv_source_Set() const{
    return m_s3_csv_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_csv_source_Valid() const{
    return m_s3_csv_source_isValid;
}

OAICodeGenConfigurationNode_S3JsonSource OAICodeGenConfigurationNode::getS3JsonSource() const {
    return m_s3_json_source;
}
void OAICodeGenConfigurationNode::setS3JsonSource(const OAICodeGenConfigurationNode_S3JsonSource &s3_json_source) {
    m_s3_json_source = s3_json_source;
    m_s3_json_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_json_source_Set() const{
    return m_s3_json_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_json_source_Valid() const{
    return m_s3_json_source_isValid;
}

OAICodeGenConfigurationNode_S3ParquetSource OAICodeGenConfigurationNode::getS3ParquetSource() const {
    return m_s3_parquet_source;
}
void OAICodeGenConfigurationNode::setS3ParquetSource(const OAICodeGenConfigurationNode_S3ParquetSource &s3_parquet_source) {
    m_s3_parquet_source = s3_parquet_source;
    m_s3_parquet_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_parquet_source_Set() const{
    return m_s3_parquet_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_parquet_source_Valid() const{
    return m_s3_parquet_source_isValid;
}

OAICodeGenConfigurationNode_RelationalCatalogSource OAICodeGenConfigurationNode::getRelationalCatalogSource() const {
    return m_relational_catalog_source;
}
void OAICodeGenConfigurationNode::setRelationalCatalogSource(const OAICodeGenConfigurationNode_RelationalCatalogSource &relational_catalog_source) {
    m_relational_catalog_source = relational_catalog_source;
    m_relational_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_relational_catalog_source_Set() const{
    return m_relational_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_relational_catalog_source_Valid() const{
    return m_relational_catalog_source_isValid;
}

OAICodeGenConfigurationNode_DynamoDBCatalogSource OAICodeGenConfigurationNode::getDynamoDbCatalogSource() const {
    return m_dynamo_db_catalog_source;
}
void OAICodeGenConfigurationNode::setDynamoDbCatalogSource(const OAICodeGenConfigurationNode_DynamoDBCatalogSource &dynamo_db_catalog_source) {
    m_dynamo_db_catalog_source = dynamo_db_catalog_source;
    m_dynamo_db_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_dynamo_db_catalog_source_Set() const{
    return m_dynamo_db_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_dynamo_db_catalog_source_Valid() const{
    return m_dynamo_db_catalog_source_isValid;
}

OAICodeGenConfigurationNode_JDBCConnectorTarget OAICodeGenConfigurationNode::getJdbcConnectorTarget() const {
    return m_jdbc_connector_target;
}
void OAICodeGenConfigurationNode::setJdbcConnectorTarget(const OAICodeGenConfigurationNode_JDBCConnectorTarget &jdbc_connector_target) {
    m_jdbc_connector_target = jdbc_connector_target;
    m_jdbc_connector_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_jdbc_connector_target_Set() const{
    return m_jdbc_connector_target_isSet;
}

bool OAICodeGenConfigurationNode::is_jdbc_connector_target_Valid() const{
    return m_jdbc_connector_target_isValid;
}

OAICodeGenConfigurationNode_SparkConnectorTarget OAICodeGenConfigurationNode::getSparkConnectorTarget() const {
    return m_spark_connector_target;
}
void OAICodeGenConfigurationNode::setSparkConnectorTarget(const OAICodeGenConfigurationNode_SparkConnectorTarget &spark_connector_target) {
    m_spark_connector_target = spark_connector_target;
    m_spark_connector_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_spark_connector_target_Set() const{
    return m_spark_connector_target_isSet;
}

bool OAICodeGenConfigurationNode::is_spark_connector_target_Valid() const{
    return m_spark_connector_target_isValid;
}

OAICodeGenConfigurationNode_CatalogTarget OAICodeGenConfigurationNode::getCatalogTarget() const {
    return m_catalog_target;
}
void OAICodeGenConfigurationNode::setCatalogTarget(const OAICodeGenConfigurationNode_CatalogTarget &catalog_target) {
    m_catalog_target = catalog_target;
    m_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_catalog_target_Set() const{
    return m_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_catalog_target_Valid() const{
    return m_catalog_target_isValid;
}

OAICodeGenConfigurationNode_RedshiftTarget OAICodeGenConfigurationNode::getRedshiftTarget() const {
    return m_redshift_target;
}
void OAICodeGenConfigurationNode::setRedshiftTarget(const OAICodeGenConfigurationNode_RedshiftTarget &redshift_target) {
    m_redshift_target = redshift_target;
    m_redshift_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_redshift_target_Set() const{
    return m_redshift_target_isSet;
}

bool OAICodeGenConfigurationNode::is_redshift_target_Valid() const{
    return m_redshift_target_isValid;
}

OAICodeGenConfigurationNode_S3CatalogTarget OAICodeGenConfigurationNode::getS3CatalogTarget() const {
    return m_s3_catalog_target;
}
void OAICodeGenConfigurationNode::setS3CatalogTarget(const OAICodeGenConfigurationNode_S3CatalogTarget &s3_catalog_target) {
    m_s3_catalog_target = s3_catalog_target;
    m_s3_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_target_Set() const{
    return m_s3_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_target_Valid() const{
    return m_s3_catalog_target_isValid;
}

OAICodeGenConfigurationNode_S3GlueParquetTarget OAICodeGenConfigurationNode::getS3GlueParquetTarget() const {
    return m_s3_glue_parquet_target;
}
void OAICodeGenConfigurationNode::setS3GlueParquetTarget(const OAICodeGenConfigurationNode_S3GlueParquetTarget &s3_glue_parquet_target) {
    m_s3_glue_parquet_target = s3_glue_parquet_target;
    m_s3_glue_parquet_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_glue_parquet_target_Set() const{
    return m_s3_glue_parquet_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_glue_parquet_target_Valid() const{
    return m_s3_glue_parquet_target_isValid;
}

OAICodeGenConfigurationNode_S3DirectTarget OAICodeGenConfigurationNode::getS3DirectTarget() const {
    return m_s3_direct_target;
}
void OAICodeGenConfigurationNode::setS3DirectTarget(const OAICodeGenConfigurationNode_S3DirectTarget &s3_direct_target) {
    m_s3_direct_target = s3_direct_target;
    m_s3_direct_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_direct_target_Set() const{
    return m_s3_direct_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_direct_target_Valid() const{
    return m_s3_direct_target_isValid;
}

OAICodeGenConfigurationNode_ApplyMapping OAICodeGenConfigurationNode::getApplyMapping() const {
    return m_apply_mapping;
}
void OAICodeGenConfigurationNode::setApplyMapping(const OAICodeGenConfigurationNode_ApplyMapping &apply_mapping) {
    m_apply_mapping = apply_mapping;
    m_apply_mapping_isSet = true;
}

bool OAICodeGenConfigurationNode::is_apply_mapping_Set() const{
    return m_apply_mapping_isSet;
}

bool OAICodeGenConfigurationNode::is_apply_mapping_Valid() const{
    return m_apply_mapping_isValid;
}

OAICodeGenConfigurationNode_SelectFields OAICodeGenConfigurationNode::getSelectFields() const {
    return m_select_fields;
}
void OAICodeGenConfigurationNode::setSelectFields(const OAICodeGenConfigurationNode_SelectFields &select_fields) {
    m_select_fields = select_fields;
    m_select_fields_isSet = true;
}

bool OAICodeGenConfigurationNode::is_select_fields_Set() const{
    return m_select_fields_isSet;
}

bool OAICodeGenConfigurationNode::is_select_fields_Valid() const{
    return m_select_fields_isValid;
}

OAICodeGenConfigurationNode_DropFields OAICodeGenConfigurationNode::getDropFields() const {
    return m_drop_fields;
}
void OAICodeGenConfigurationNode::setDropFields(const OAICodeGenConfigurationNode_DropFields &drop_fields) {
    m_drop_fields = drop_fields;
    m_drop_fields_isSet = true;
}

bool OAICodeGenConfigurationNode::is_drop_fields_Set() const{
    return m_drop_fields_isSet;
}

bool OAICodeGenConfigurationNode::is_drop_fields_Valid() const{
    return m_drop_fields_isValid;
}

OAICodeGenConfigurationNode_RenameField OAICodeGenConfigurationNode::getRenameField() const {
    return m_rename_field;
}
void OAICodeGenConfigurationNode::setRenameField(const OAICodeGenConfigurationNode_RenameField &rename_field) {
    m_rename_field = rename_field;
    m_rename_field_isSet = true;
}

bool OAICodeGenConfigurationNode::is_rename_field_Set() const{
    return m_rename_field_isSet;
}

bool OAICodeGenConfigurationNode::is_rename_field_Valid() const{
    return m_rename_field_isValid;
}

OAICodeGenConfigurationNode_Spigot OAICodeGenConfigurationNode::getSpigot() const {
    return m_spigot;
}
void OAICodeGenConfigurationNode::setSpigot(const OAICodeGenConfigurationNode_Spigot &spigot) {
    m_spigot = spigot;
    m_spigot_isSet = true;
}

bool OAICodeGenConfigurationNode::is_spigot_Set() const{
    return m_spigot_isSet;
}

bool OAICodeGenConfigurationNode::is_spigot_Valid() const{
    return m_spigot_isValid;
}

OAICodeGenConfigurationNode_Join OAICodeGenConfigurationNode::getJoin() const {
    return m_join;
}
void OAICodeGenConfigurationNode::setJoin(const OAICodeGenConfigurationNode_Join &join) {
    m_join = join;
    m_join_isSet = true;
}

bool OAICodeGenConfigurationNode::is_join_Set() const{
    return m_join_isSet;
}

bool OAICodeGenConfigurationNode::is_join_Valid() const{
    return m_join_isValid;
}

OAICodeGenConfigurationNode_SplitFields OAICodeGenConfigurationNode::getSplitFields() const {
    return m_split_fields;
}
void OAICodeGenConfigurationNode::setSplitFields(const OAICodeGenConfigurationNode_SplitFields &split_fields) {
    m_split_fields = split_fields;
    m_split_fields_isSet = true;
}

bool OAICodeGenConfigurationNode::is_split_fields_Set() const{
    return m_split_fields_isSet;
}

bool OAICodeGenConfigurationNode::is_split_fields_Valid() const{
    return m_split_fields_isValid;
}

OAICodeGenConfigurationNode_SelectFromCollection OAICodeGenConfigurationNode::getSelectFromCollection() const {
    return m_select_from_collection;
}
void OAICodeGenConfigurationNode::setSelectFromCollection(const OAICodeGenConfigurationNode_SelectFromCollection &select_from_collection) {
    m_select_from_collection = select_from_collection;
    m_select_from_collection_isSet = true;
}

bool OAICodeGenConfigurationNode::is_select_from_collection_Set() const{
    return m_select_from_collection_isSet;
}

bool OAICodeGenConfigurationNode::is_select_from_collection_Valid() const{
    return m_select_from_collection_isValid;
}

OAICodeGenConfigurationNode_FillMissingValues OAICodeGenConfigurationNode::getFillMissingValues() const {
    return m_fill_missing_values;
}
void OAICodeGenConfigurationNode::setFillMissingValues(const OAICodeGenConfigurationNode_FillMissingValues &fill_missing_values) {
    m_fill_missing_values = fill_missing_values;
    m_fill_missing_values_isSet = true;
}

bool OAICodeGenConfigurationNode::is_fill_missing_values_Set() const{
    return m_fill_missing_values_isSet;
}

bool OAICodeGenConfigurationNode::is_fill_missing_values_Valid() const{
    return m_fill_missing_values_isValid;
}

OAICodeGenConfigurationNode_Filter OAICodeGenConfigurationNode::getFilter() const {
    return m_filter;
}
void OAICodeGenConfigurationNode::setFilter(const OAICodeGenConfigurationNode_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAICodeGenConfigurationNode::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAICodeGenConfigurationNode::is_filter_Valid() const{
    return m_filter_isValid;
}

OAICodeGenConfigurationNode_CustomCode OAICodeGenConfigurationNode::getCustomCode() const {
    return m_custom_code;
}
void OAICodeGenConfigurationNode::setCustomCode(const OAICodeGenConfigurationNode_CustomCode &custom_code) {
    m_custom_code = custom_code;
    m_custom_code_isSet = true;
}

bool OAICodeGenConfigurationNode::is_custom_code_Set() const{
    return m_custom_code_isSet;
}

bool OAICodeGenConfigurationNode::is_custom_code_Valid() const{
    return m_custom_code_isValid;
}

OAICodeGenConfigurationNode_SparkSQL OAICodeGenConfigurationNode::getSparkSql() const {
    return m_spark_sql;
}
void OAICodeGenConfigurationNode::setSparkSql(const OAICodeGenConfigurationNode_SparkSQL &spark_sql) {
    m_spark_sql = spark_sql;
    m_spark_sql_isSet = true;
}

bool OAICodeGenConfigurationNode::is_spark_sql_Set() const{
    return m_spark_sql_isSet;
}

bool OAICodeGenConfigurationNode::is_spark_sql_Valid() const{
    return m_spark_sql_isValid;
}

OAICodeGenConfigurationNode_DirectKinesisSource OAICodeGenConfigurationNode::getDirectKinesisSource() const {
    return m_direct_kinesis_source;
}
void OAICodeGenConfigurationNode::setDirectKinesisSource(const OAICodeGenConfigurationNode_DirectKinesisSource &direct_kinesis_source) {
    m_direct_kinesis_source = direct_kinesis_source;
    m_direct_kinesis_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_direct_kinesis_source_Set() const{
    return m_direct_kinesis_source_isSet;
}

bool OAICodeGenConfigurationNode::is_direct_kinesis_source_Valid() const{
    return m_direct_kinesis_source_isValid;
}

OAICodeGenConfigurationNode_DirectKafkaSource OAICodeGenConfigurationNode::getDirectKafkaSource() const {
    return m_direct_kafka_source;
}
void OAICodeGenConfigurationNode::setDirectKafkaSource(const OAICodeGenConfigurationNode_DirectKafkaSource &direct_kafka_source) {
    m_direct_kafka_source = direct_kafka_source;
    m_direct_kafka_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_direct_kafka_source_Set() const{
    return m_direct_kafka_source_isSet;
}

bool OAICodeGenConfigurationNode::is_direct_kafka_source_Valid() const{
    return m_direct_kafka_source_isValid;
}

OAICodeGenConfigurationNode_CatalogKinesisSource OAICodeGenConfigurationNode::getCatalogKinesisSource() const {
    return m_catalog_kinesis_source;
}
void OAICodeGenConfigurationNode::setCatalogKinesisSource(const OAICodeGenConfigurationNode_CatalogKinesisSource &catalog_kinesis_source) {
    m_catalog_kinesis_source = catalog_kinesis_source;
    m_catalog_kinesis_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_catalog_kinesis_source_Set() const{
    return m_catalog_kinesis_source_isSet;
}

bool OAICodeGenConfigurationNode::is_catalog_kinesis_source_Valid() const{
    return m_catalog_kinesis_source_isValid;
}

OAICodeGenConfigurationNode_CatalogKafkaSource OAICodeGenConfigurationNode::getCatalogKafkaSource() const {
    return m_catalog_kafka_source;
}
void OAICodeGenConfigurationNode::setCatalogKafkaSource(const OAICodeGenConfigurationNode_CatalogKafkaSource &catalog_kafka_source) {
    m_catalog_kafka_source = catalog_kafka_source;
    m_catalog_kafka_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_catalog_kafka_source_Set() const{
    return m_catalog_kafka_source_isSet;
}

bool OAICodeGenConfigurationNode::is_catalog_kafka_source_Valid() const{
    return m_catalog_kafka_source_isValid;
}

OAICodeGenConfigurationNode_DropNullFields OAICodeGenConfigurationNode::getDropNullFields() const {
    return m_drop_null_fields;
}
void OAICodeGenConfigurationNode::setDropNullFields(const OAICodeGenConfigurationNode_DropNullFields &drop_null_fields) {
    m_drop_null_fields = drop_null_fields;
    m_drop_null_fields_isSet = true;
}

bool OAICodeGenConfigurationNode::is_drop_null_fields_Set() const{
    return m_drop_null_fields_isSet;
}

bool OAICodeGenConfigurationNode::is_drop_null_fields_Valid() const{
    return m_drop_null_fields_isValid;
}

OAICodeGenConfigurationNode_Merge OAICodeGenConfigurationNode::getMerge() const {
    return m_merge;
}
void OAICodeGenConfigurationNode::setMerge(const OAICodeGenConfigurationNode_Merge &merge) {
    m_merge = merge;
    m_merge_isSet = true;
}

bool OAICodeGenConfigurationNode::is_merge_Set() const{
    return m_merge_isSet;
}

bool OAICodeGenConfigurationNode::is_merge_Valid() const{
    return m_merge_isValid;
}

OAICodeGenConfigurationNode_Union OAICodeGenConfigurationNode::getRUnion() const {
    return m_r_union;
}
void OAICodeGenConfigurationNode::setRUnion(const OAICodeGenConfigurationNode_Union &r_union) {
    m_r_union = r_union;
    m_r_union_isSet = true;
}

bool OAICodeGenConfigurationNode::is_r_union_Set() const{
    return m_r_union_isSet;
}

bool OAICodeGenConfigurationNode::is_r_union_Valid() const{
    return m_r_union_isValid;
}

OAICodeGenConfigurationNode_PIIDetection OAICodeGenConfigurationNode::getPiiDetection() const {
    return m_pii_detection;
}
void OAICodeGenConfigurationNode::setPiiDetection(const OAICodeGenConfigurationNode_PIIDetection &pii_detection) {
    m_pii_detection = pii_detection;
    m_pii_detection_isSet = true;
}

bool OAICodeGenConfigurationNode::is_pii_detection_Set() const{
    return m_pii_detection_isSet;
}

bool OAICodeGenConfigurationNode::is_pii_detection_Valid() const{
    return m_pii_detection_isValid;
}

OAICodeGenConfigurationNode_Aggregate OAICodeGenConfigurationNode::getAggregate() const {
    return m_aggregate;
}
void OAICodeGenConfigurationNode::setAggregate(const OAICodeGenConfigurationNode_Aggregate &aggregate) {
    m_aggregate = aggregate;
    m_aggregate_isSet = true;
}

bool OAICodeGenConfigurationNode::is_aggregate_Set() const{
    return m_aggregate_isSet;
}

bool OAICodeGenConfigurationNode::is_aggregate_Valid() const{
    return m_aggregate_isValid;
}

OAICodeGenConfigurationNode_DropDuplicates OAICodeGenConfigurationNode::getDropDuplicates() const {
    return m_drop_duplicates;
}
void OAICodeGenConfigurationNode::setDropDuplicates(const OAICodeGenConfigurationNode_DropDuplicates &drop_duplicates) {
    m_drop_duplicates = drop_duplicates;
    m_drop_duplicates_isSet = true;
}

bool OAICodeGenConfigurationNode::is_drop_duplicates_Set() const{
    return m_drop_duplicates_isSet;
}

bool OAICodeGenConfigurationNode::is_drop_duplicates_Valid() const{
    return m_drop_duplicates_isValid;
}

OAICodeGenConfigurationNode_GovernedCatalogTarget OAICodeGenConfigurationNode::getGovernedCatalogTarget() const {
    return m_governed_catalog_target;
}
void OAICodeGenConfigurationNode::setGovernedCatalogTarget(const OAICodeGenConfigurationNode_GovernedCatalogTarget &governed_catalog_target) {
    m_governed_catalog_target = governed_catalog_target;
    m_governed_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_governed_catalog_target_Set() const{
    return m_governed_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_governed_catalog_target_Valid() const{
    return m_governed_catalog_target_isValid;
}

OAICodeGenConfigurationNode_GovernedCatalogSource OAICodeGenConfigurationNode::getGovernedCatalogSource() const {
    return m_governed_catalog_source;
}
void OAICodeGenConfigurationNode::setGovernedCatalogSource(const OAICodeGenConfigurationNode_GovernedCatalogSource &governed_catalog_source) {
    m_governed_catalog_source = governed_catalog_source;
    m_governed_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_governed_catalog_source_Set() const{
    return m_governed_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_governed_catalog_source_Valid() const{
    return m_governed_catalog_source_isValid;
}

OAICodeGenConfigurationNode_MicrosoftSQLServerCatalogSource OAICodeGenConfigurationNode::getMicrosoftSqlServerCatalogSource() const {
    return m_microsoft_sql_server_catalog_source;
}
void OAICodeGenConfigurationNode::setMicrosoftSqlServerCatalogSource(const OAICodeGenConfigurationNode_MicrosoftSQLServerCatalogSource &microsoft_sql_server_catalog_source) {
    m_microsoft_sql_server_catalog_source = microsoft_sql_server_catalog_source;
    m_microsoft_sql_server_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_microsoft_sql_server_catalog_source_Set() const{
    return m_microsoft_sql_server_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_microsoft_sql_server_catalog_source_Valid() const{
    return m_microsoft_sql_server_catalog_source_isValid;
}

OAICodeGenConfigurationNode_MySQLCatalogSource OAICodeGenConfigurationNode::getMySqlCatalogSource() const {
    return m_my_sql_catalog_source;
}
void OAICodeGenConfigurationNode::setMySqlCatalogSource(const OAICodeGenConfigurationNode_MySQLCatalogSource &my_sql_catalog_source) {
    m_my_sql_catalog_source = my_sql_catalog_source;
    m_my_sql_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_my_sql_catalog_source_Set() const{
    return m_my_sql_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_my_sql_catalog_source_Valid() const{
    return m_my_sql_catalog_source_isValid;
}

OAICodeGenConfigurationNode_OracleSQLCatalogSource OAICodeGenConfigurationNode::getOracleSqlCatalogSource() const {
    return m_oracle_sql_catalog_source;
}
void OAICodeGenConfigurationNode::setOracleSqlCatalogSource(const OAICodeGenConfigurationNode_OracleSQLCatalogSource &oracle_sql_catalog_source) {
    m_oracle_sql_catalog_source = oracle_sql_catalog_source;
    m_oracle_sql_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_oracle_sql_catalog_source_Set() const{
    return m_oracle_sql_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_oracle_sql_catalog_source_Valid() const{
    return m_oracle_sql_catalog_source_isValid;
}

OAICodeGenConfigurationNode_PostgreSQLCatalogSource OAICodeGenConfigurationNode::getPostgreSqlCatalogSource() const {
    return m_postgre_sql_catalog_source;
}
void OAICodeGenConfigurationNode::setPostgreSqlCatalogSource(const OAICodeGenConfigurationNode_PostgreSQLCatalogSource &postgre_sql_catalog_source) {
    m_postgre_sql_catalog_source = postgre_sql_catalog_source;
    m_postgre_sql_catalog_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_postgre_sql_catalog_source_Set() const{
    return m_postgre_sql_catalog_source_isSet;
}

bool OAICodeGenConfigurationNode::is_postgre_sql_catalog_source_Valid() const{
    return m_postgre_sql_catalog_source_isValid;
}

OAICodeGenConfigurationNode_MicrosoftSQLServerCatalogTarget OAICodeGenConfigurationNode::getMicrosoftSqlServerCatalogTarget() const {
    return m_microsoft_sql_server_catalog_target;
}
void OAICodeGenConfigurationNode::setMicrosoftSqlServerCatalogTarget(const OAICodeGenConfigurationNode_MicrosoftSQLServerCatalogTarget &microsoft_sql_server_catalog_target) {
    m_microsoft_sql_server_catalog_target = microsoft_sql_server_catalog_target;
    m_microsoft_sql_server_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_microsoft_sql_server_catalog_target_Set() const{
    return m_microsoft_sql_server_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_microsoft_sql_server_catalog_target_Valid() const{
    return m_microsoft_sql_server_catalog_target_isValid;
}

OAICodeGenConfigurationNode_MySQLCatalogTarget OAICodeGenConfigurationNode::getMySqlCatalogTarget() const {
    return m_my_sql_catalog_target;
}
void OAICodeGenConfigurationNode::setMySqlCatalogTarget(const OAICodeGenConfigurationNode_MySQLCatalogTarget &my_sql_catalog_target) {
    m_my_sql_catalog_target = my_sql_catalog_target;
    m_my_sql_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_my_sql_catalog_target_Set() const{
    return m_my_sql_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_my_sql_catalog_target_Valid() const{
    return m_my_sql_catalog_target_isValid;
}

OAICodeGenConfigurationNode_OracleSQLCatalogTarget OAICodeGenConfigurationNode::getOracleSqlCatalogTarget() const {
    return m_oracle_sql_catalog_target;
}
void OAICodeGenConfigurationNode::setOracleSqlCatalogTarget(const OAICodeGenConfigurationNode_OracleSQLCatalogTarget &oracle_sql_catalog_target) {
    m_oracle_sql_catalog_target = oracle_sql_catalog_target;
    m_oracle_sql_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_oracle_sql_catalog_target_Set() const{
    return m_oracle_sql_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_oracle_sql_catalog_target_Valid() const{
    return m_oracle_sql_catalog_target_isValid;
}

OAICodeGenConfigurationNode_PostgreSQLCatalogTarget OAICodeGenConfigurationNode::getPostgreSqlCatalogTarget() const {
    return m_postgre_sql_catalog_target;
}
void OAICodeGenConfigurationNode::setPostgreSqlCatalogTarget(const OAICodeGenConfigurationNode_PostgreSQLCatalogTarget &postgre_sql_catalog_target) {
    m_postgre_sql_catalog_target = postgre_sql_catalog_target;
    m_postgre_sql_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_postgre_sql_catalog_target_Set() const{
    return m_postgre_sql_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_postgre_sql_catalog_target_Valid() const{
    return m_postgre_sql_catalog_target_isValid;
}

OAICodeGenConfigurationNode_DynamicTransform OAICodeGenConfigurationNode::getDynamicTransform() const {
    return m_dynamic_transform;
}
void OAICodeGenConfigurationNode::setDynamicTransform(const OAICodeGenConfigurationNode_DynamicTransform &dynamic_transform) {
    m_dynamic_transform = dynamic_transform;
    m_dynamic_transform_isSet = true;
}

bool OAICodeGenConfigurationNode::is_dynamic_transform_Set() const{
    return m_dynamic_transform_isSet;
}

bool OAICodeGenConfigurationNode::is_dynamic_transform_Valid() const{
    return m_dynamic_transform_isValid;
}

OAICodeGenConfigurationNode_EvaluateDataQuality OAICodeGenConfigurationNode::getEvaluateDataQuality() const {
    return m_evaluate_data_quality;
}
void OAICodeGenConfigurationNode::setEvaluateDataQuality(const OAICodeGenConfigurationNode_EvaluateDataQuality &evaluate_data_quality) {
    m_evaluate_data_quality = evaluate_data_quality;
    m_evaluate_data_quality_isSet = true;
}

bool OAICodeGenConfigurationNode::is_evaluate_data_quality_Set() const{
    return m_evaluate_data_quality_isSet;
}

bool OAICodeGenConfigurationNode::is_evaluate_data_quality_Valid() const{
    return m_evaluate_data_quality_isValid;
}

OAICodeGenConfigurationNode_S3CatalogHudiSource OAICodeGenConfigurationNode::getS3CatalogHudiSource() const {
    return m_s3_catalog_hudi_source;
}
void OAICodeGenConfigurationNode::setS3CatalogHudiSource(const OAICodeGenConfigurationNode_S3CatalogHudiSource &s3_catalog_hudi_source) {
    m_s3_catalog_hudi_source = s3_catalog_hudi_source;
    m_s3_catalog_hudi_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_hudi_source_Set() const{
    return m_s3_catalog_hudi_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_hudi_source_Valid() const{
    return m_s3_catalog_hudi_source_isValid;
}

OAICodeGenConfigurationNode_CatalogHudiSource OAICodeGenConfigurationNode::getCatalogHudiSource() const {
    return m_catalog_hudi_source;
}
void OAICodeGenConfigurationNode::setCatalogHudiSource(const OAICodeGenConfigurationNode_CatalogHudiSource &catalog_hudi_source) {
    m_catalog_hudi_source = catalog_hudi_source;
    m_catalog_hudi_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_catalog_hudi_source_Set() const{
    return m_catalog_hudi_source_isSet;
}

bool OAICodeGenConfigurationNode::is_catalog_hudi_source_Valid() const{
    return m_catalog_hudi_source_isValid;
}

OAICodeGenConfigurationNode_S3HudiSource OAICodeGenConfigurationNode::getS3HudiSource() const {
    return m_s3_hudi_source;
}
void OAICodeGenConfigurationNode::setS3HudiSource(const OAICodeGenConfigurationNode_S3HudiSource &s3_hudi_source) {
    m_s3_hudi_source = s3_hudi_source;
    m_s3_hudi_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_hudi_source_Set() const{
    return m_s3_hudi_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_hudi_source_Valid() const{
    return m_s3_hudi_source_isValid;
}

OAICodeGenConfigurationNode_S3HudiCatalogTarget OAICodeGenConfigurationNode::getS3HudiCatalogTarget() const {
    return m_s3_hudi_catalog_target;
}
void OAICodeGenConfigurationNode::setS3HudiCatalogTarget(const OAICodeGenConfigurationNode_S3HudiCatalogTarget &s3_hudi_catalog_target) {
    m_s3_hudi_catalog_target = s3_hudi_catalog_target;
    m_s3_hudi_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_hudi_catalog_target_Set() const{
    return m_s3_hudi_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_hudi_catalog_target_Valid() const{
    return m_s3_hudi_catalog_target_isValid;
}

OAICodeGenConfigurationNode_S3HudiDirectTarget OAICodeGenConfigurationNode::getS3HudiDirectTarget() const {
    return m_s3_hudi_direct_target;
}
void OAICodeGenConfigurationNode::setS3HudiDirectTarget(const OAICodeGenConfigurationNode_S3HudiDirectTarget &s3_hudi_direct_target) {
    m_s3_hudi_direct_target = s3_hudi_direct_target;
    m_s3_hudi_direct_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_hudi_direct_target_Set() const{
    return m_s3_hudi_direct_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_hudi_direct_target_Valid() const{
    return m_s3_hudi_direct_target_isValid;
}

OAIDirectJDBCSource OAICodeGenConfigurationNode::getDirectJdbcSource() const {
    return m_direct_jdbc_source;
}
void OAICodeGenConfigurationNode::setDirectJdbcSource(const OAIDirectJDBCSource &direct_jdbc_source) {
    m_direct_jdbc_source = direct_jdbc_source;
    m_direct_jdbc_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_direct_jdbc_source_Set() const{
    return m_direct_jdbc_source_isSet;
}

bool OAICodeGenConfigurationNode::is_direct_jdbc_source_Valid() const{
    return m_direct_jdbc_source_isValid;
}

OAICodeGenConfigurationNode_S3CatalogDeltaSource OAICodeGenConfigurationNode::getS3CatalogDeltaSource() const {
    return m_s3_catalog_delta_source;
}
void OAICodeGenConfigurationNode::setS3CatalogDeltaSource(const OAICodeGenConfigurationNode_S3CatalogDeltaSource &s3_catalog_delta_source) {
    m_s3_catalog_delta_source = s3_catalog_delta_source;
    m_s3_catalog_delta_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_delta_source_Set() const{
    return m_s3_catalog_delta_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_catalog_delta_source_Valid() const{
    return m_s3_catalog_delta_source_isValid;
}

OAICodeGenConfigurationNode_CatalogDeltaSource OAICodeGenConfigurationNode::getCatalogDeltaSource() const {
    return m_catalog_delta_source;
}
void OAICodeGenConfigurationNode::setCatalogDeltaSource(const OAICodeGenConfigurationNode_CatalogDeltaSource &catalog_delta_source) {
    m_catalog_delta_source = catalog_delta_source;
    m_catalog_delta_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_catalog_delta_source_Set() const{
    return m_catalog_delta_source_isSet;
}

bool OAICodeGenConfigurationNode::is_catalog_delta_source_Valid() const{
    return m_catalog_delta_source_isValid;
}

OAICodeGenConfigurationNode_S3DeltaSource OAICodeGenConfigurationNode::getS3DeltaSource() const {
    return m_s3_delta_source;
}
void OAICodeGenConfigurationNode::setS3DeltaSource(const OAICodeGenConfigurationNode_S3DeltaSource &s3_delta_source) {
    m_s3_delta_source = s3_delta_source;
    m_s3_delta_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_delta_source_Set() const{
    return m_s3_delta_source_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_delta_source_Valid() const{
    return m_s3_delta_source_isValid;
}

OAICodeGenConfigurationNode_S3DeltaCatalogTarget OAICodeGenConfigurationNode::getS3DeltaCatalogTarget() const {
    return m_s3_delta_catalog_target;
}
void OAICodeGenConfigurationNode::setS3DeltaCatalogTarget(const OAICodeGenConfigurationNode_S3DeltaCatalogTarget &s3_delta_catalog_target) {
    m_s3_delta_catalog_target = s3_delta_catalog_target;
    m_s3_delta_catalog_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_delta_catalog_target_Set() const{
    return m_s3_delta_catalog_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_delta_catalog_target_Valid() const{
    return m_s3_delta_catalog_target_isValid;
}

OAICodeGenConfigurationNode_S3DeltaDirectTarget OAICodeGenConfigurationNode::getS3DeltaDirectTarget() const {
    return m_s3_delta_direct_target;
}
void OAICodeGenConfigurationNode::setS3DeltaDirectTarget(const OAICodeGenConfigurationNode_S3DeltaDirectTarget &s3_delta_direct_target) {
    m_s3_delta_direct_target = s3_delta_direct_target;
    m_s3_delta_direct_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_s3_delta_direct_target_Set() const{
    return m_s3_delta_direct_target_isSet;
}

bool OAICodeGenConfigurationNode::is_s3_delta_direct_target_Valid() const{
    return m_s3_delta_direct_target_isValid;
}

OAICodeGenConfigurationNode_AmazonRedshiftSource OAICodeGenConfigurationNode::getAmazonRedshiftSource() const {
    return m_amazon_redshift_source;
}
void OAICodeGenConfigurationNode::setAmazonRedshiftSource(const OAICodeGenConfigurationNode_AmazonRedshiftSource &amazon_redshift_source) {
    m_amazon_redshift_source = amazon_redshift_source;
    m_amazon_redshift_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_amazon_redshift_source_Set() const{
    return m_amazon_redshift_source_isSet;
}

bool OAICodeGenConfigurationNode::is_amazon_redshift_source_Valid() const{
    return m_amazon_redshift_source_isValid;
}

OAICodeGenConfigurationNode_AmazonRedshiftTarget OAICodeGenConfigurationNode::getAmazonRedshiftTarget() const {
    return m_amazon_redshift_target;
}
void OAICodeGenConfigurationNode::setAmazonRedshiftTarget(const OAICodeGenConfigurationNode_AmazonRedshiftTarget &amazon_redshift_target) {
    m_amazon_redshift_target = amazon_redshift_target;
    m_amazon_redshift_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_amazon_redshift_target_Set() const{
    return m_amazon_redshift_target_isSet;
}

bool OAICodeGenConfigurationNode::is_amazon_redshift_target_Valid() const{
    return m_amazon_redshift_target_isValid;
}

OAICodeGenConfigurationNode_EvaluateDataQualityMultiFrame OAICodeGenConfigurationNode::getEvaluateDataQualityMultiFrame() const {
    return m_evaluate_data_quality_multi_frame;
}
void OAICodeGenConfigurationNode::setEvaluateDataQualityMultiFrame(const OAICodeGenConfigurationNode_EvaluateDataQualityMultiFrame &evaluate_data_quality_multi_frame) {
    m_evaluate_data_quality_multi_frame = evaluate_data_quality_multi_frame;
    m_evaluate_data_quality_multi_frame_isSet = true;
}

bool OAICodeGenConfigurationNode::is_evaluate_data_quality_multi_frame_Set() const{
    return m_evaluate_data_quality_multi_frame_isSet;
}

bool OAICodeGenConfigurationNode::is_evaluate_data_quality_multi_frame_Valid() const{
    return m_evaluate_data_quality_multi_frame_isValid;
}

OAICodeGenConfigurationNode_Recipe OAICodeGenConfigurationNode::getRecipe() const {
    return m_recipe;
}
void OAICodeGenConfigurationNode::setRecipe(const OAICodeGenConfigurationNode_Recipe &recipe) {
    m_recipe = recipe;
    m_recipe_isSet = true;
}

bool OAICodeGenConfigurationNode::is_recipe_Set() const{
    return m_recipe_isSet;
}

bool OAICodeGenConfigurationNode::is_recipe_Valid() const{
    return m_recipe_isValid;
}

OAICodeGenConfigurationNode_SnowflakeSource OAICodeGenConfigurationNode::getSnowflakeSource() const {
    return m_snowflake_source;
}
void OAICodeGenConfigurationNode::setSnowflakeSource(const OAICodeGenConfigurationNode_SnowflakeSource &snowflake_source) {
    m_snowflake_source = snowflake_source;
    m_snowflake_source_isSet = true;
}

bool OAICodeGenConfigurationNode::is_snowflake_source_Set() const{
    return m_snowflake_source_isSet;
}

bool OAICodeGenConfigurationNode::is_snowflake_source_Valid() const{
    return m_snowflake_source_isValid;
}

OAICodeGenConfigurationNode_SnowflakeTarget OAICodeGenConfigurationNode::getSnowflakeTarget() const {
    return m_snowflake_target;
}
void OAICodeGenConfigurationNode::setSnowflakeTarget(const OAICodeGenConfigurationNode_SnowflakeTarget &snowflake_target) {
    m_snowflake_target = snowflake_target;
    m_snowflake_target_isSet = true;
}

bool OAICodeGenConfigurationNode::is_snowflake_target_Set() const{
    return m_snowflake_target_isSet;
}

bool OAICodeGenConfigurationNode::is_snowflake_target_Valid() const{
    return m_snowflake_target_isValid;
}

bool OAICodeGenConfigurationNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_athena_connector_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jdbc_connector_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_connector_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_csv_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_json_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_parquet_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relational_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_db_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jdbc_connector_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_connector_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_glue_parquet_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_direct_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spigot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_join.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_from_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_missing_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_sql.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_kinesis_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_kafka_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_kinesis_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_kafka_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_null_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_union.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pii_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_duplicates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_governed_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_governed_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_sql_server_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_sql_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_sql_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postgre_sql_catalog_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_sql_server_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_sql_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_sql_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postgre_sql_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_transform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluate_data_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_catalog_hudi_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_hudi_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_hudi_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_hudi_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_hudi_direct_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_jdbc_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_catalog_delta_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_delta_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_delta_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_delta_catalog_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_delta_direct_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_redshift_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_redshift_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluate_data_quality_multi_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowflake_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowflake_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeGenConfigurationNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
