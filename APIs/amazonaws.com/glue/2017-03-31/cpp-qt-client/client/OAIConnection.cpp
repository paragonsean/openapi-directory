/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection::OAIConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection::OAIConnection() {
    this->initializeModel();
}

OAIConnection::~OAIConnection() {}

void OAIConnection::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_match_criteria_isSet = false;
    m_match_criteria_isValid = false;

    m_connection_properties_isSet = false;
    m_connection_properties_isValid = false;

    m_physical_connection_requirements_isSet = false;
    m_physical_connection_requirements_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;
}

void OAIConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;

    m_match_criteria_isValid = ::OpenAPI::fromJsonValue(m_match_criteria, json[QString("MatchCriteria")]);
    m_match_criteria_isSet = !json[QString("MatchCriteria")].isNull() && m_match_criteria_isValid;

    m_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_connection_properties, json[QString("ConnectionProperties")]);
    m_connection_properties_isSet = !json[QString("ConnectionProperties")].isNull() && m_connection_properties_isValid;

    m_physical_connection_requirements_isValid = ::OpenAPI::fromJsonValue(m_physical_connection_requirements, json[QString("PhysicalConnectionRequirements")]);
    m_physical_connection_requirements_isSet = !json[QString("PhysicalConnectionRequirements")].isNull() && m_physical_connection_requirements_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("LastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("LastUpdatedBy")].isNull() && m_last_updated_by_isValid;
}

QString OAIConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_match_criteria.isSet()) {
        obj.insert(QString("MatchCriteria"), ::OpenAPI::toJsonValue(m_match_criteria));
    }
    if (m_connection_properties.isSet()) {
        obj.insert(QString("ConnectionProperties"), ::OpenAPI::toJsonValue(m_connection_properties));
    }
    if (m_physical_connection_requirements.isSet()) {
        obj.insert(QString("PhysicalConnectionRequirements"), ::OpenAPI::toJsonValue(m_physical_connection_requirements));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("LastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    return obj;
}

QString OAIConnection::getName() const {
    return m_name;
}
void OAIConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnection::getDescription() const {
    return m_description;
}
void OAIConnection::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnection::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnection::is_description_Valid() const{
    return m_description_isValid;
}

OAIConnectionType OAIConnection::getConnectionType() const {
    return m_connection_type;
}
void OAIConnection::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIConnection::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIConnection::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QList OAIConnection::getMatchCriteria() const {
    return m_match_criteria;
}
void OAIConnection::setMatchCriteria(const QList &match_criteria) {
    m_match_criteria = match_criteria;
    m_match_criteria_isSet = true;
}

bool OAIConnection::is_match_criteria_Set() const{
    return m_match_criteria_isSet;
}

bool OAIConnection::is_match_criteria_Valid() const{
    return m_match_criteria_isValid;
}

QMap OAIConnection::getConnectionProperties() const {
    return m_connection_properties;
}
void OAIConnection::setConnectionProperties(const QMap &connection_properties) {
    m_connection_properties = connection_properties;
    m_connection_properties_isSet = true;
}

bool OAIConnection::is_connection_properties_Set() const{
    return m_connection_properties_isSet;
}

bool OAIConnection::is_connection_properties_Valid() const{
    return m_connection_properties_isValid;
}

OAIConnection_PhysicalConnectionRequirements OAIConnection::getPhysicalConnectionRequirements() const {
    return m_physical_connection_requirements;
}
void OAIConnection::setPhysicalConnectionRequirements(const OAIConnection_PhysicalConnectionRequirements &physical_connection_requirements) {
    m_physical_connection_requirements = physical_connection_requirements;
    m_physical_connection_requirements_isSet = true;
}

bool OAIConnection::is_physical_connection_requirements_Set() const{
    return m_physical_connection_requirements_isSet;
}

bool OAIConnection::is_physical_connection_requirements_Valid() const{
    return m_physical_connection_requirements_isValid;
}

QDateTime OAIConnection::getCreationTime() const {
    return m_creation_time;
}
void OAIConnection::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIConnection::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIConnection::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIConnection::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIConnection::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIConnection::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIConnection::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIConnection::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIConnection::setLastUpdatedBy(const QString &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIConnection::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIConnection::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

bool OAIConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_connection_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
