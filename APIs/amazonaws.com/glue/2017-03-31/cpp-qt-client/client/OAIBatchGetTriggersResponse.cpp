/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetTriggersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetTriggersResponse::OAIBatchGetTriggersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetTriggersResponse::OAIBatchGetTriggersResponse() {
    this->initializeModel();
}

OAIBatchGetTriggersResponse::~OAIBatchGetTriggersResponse() {}

void OAIBatchGetTriggersResponse::initializeModel() {

    m_triggers_isSet = false;
    m_triggers_isValid = false;

    m_triggers_not_found_isSet = false;
    m_triggers_not_found_isValid = false;
}

void OAIBatchGetTriggersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetTriggersResponse::fromJsonObject(QJsonObject json) {

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("Triggers")]);
    m_triggers_isSet = !json[QString("Triggers")].isNull() && m_triggers_isValid;

    m_triggers_not_found_isValid = ::OpenAPI::fromJsonValue(m_triggers_not_found, json[QString("TriggersNotFound")]);
    m_triggers_not_found_isSet = !json[QString("TriggersNotFound")].isNull() && m_triggers_not_found_isValid;
}

QString OAIBatchGetTriggersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetTriggersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_triggers.isSet()) {
        obj.insert(QString("Triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    if (m_triggers_not_found.isSet()) {
        obj.insert(QString("TriggersNotFound"), ::OpenAPI::toJsonValue(m_triggers_not_found));
    }
    return obj;
}

QList OAIBatchGetTriggersResponse::getTriggers() const {
    return m_triggers;
}
void OAIBatchGetTriggersResponse::setTriggers(const QList &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAIBatchGetTriggersResponse::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIBatchGetTriggersResponse::is_triggers_Valid() const{
    return m_triggers_isValid;
}

QList OAIBatchGetTriggersResponse::getTriggersNotFound() const {
    return m_triggers_not_found;
}
void OAIBatchGetTriggersResponse::setTriggersNotFound(const QList &triggers_not_found) {
    m_triggers_not_found = triggers_not_found;
    m_triggers_not_found_isSet = true;
}

bool OAIBatchGetTriggersResponse::is_triggers_not_found_Set() const{
    return m_triggers_not_found_isSet;
}

bool OAIBatchGetTriggersResponse::is_triggers_not_found_Valid() const{
    return m_triggers_not_found_isValid;
}

bool OAIBatchGetTriggersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers_not_found.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetTriggersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
