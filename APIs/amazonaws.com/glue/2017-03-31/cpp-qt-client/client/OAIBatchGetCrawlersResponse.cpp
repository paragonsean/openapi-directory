/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetCrawlersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetCrawlersResponse::OAIBatchGetCrawlersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetCrawlersResponse::OAIBatchGetCrawlersResponse() {
    this->initializeModel();
}

OAIBatchGetCrawlersResponse::~OAIBatchGetCrawlersResponse() {}

void OAIBatchGetCrawlersResponse::initializeModel() {

    m_crawlers_isSet = false;
    m_crawlers_isValid = false;

    m_crawlers_not_found_isSet = false;
    m_crawlers_not_found_isValid = false;
}

void OAIBatchGetCrawlersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetCrawlersResponse::fromJsonObject(QJsonObject json) {

    m_crawlers_isValid = ::OpenAPI::fromJsonValue(m_crawlers, json[QString("Crawlers")]);
    m_crawlers_isSet = !json[QString("Crawlers")].isNull() && m_crawlers_isValid;

    m_crawlers_not_found_isValid = ::OpenAPI::fromJsonValue(m_crawlers_not_found, json[QString("CrawlersNotFound")]);
    m_crawlers_not_found_isSet = !json[QString("CrawlersNotFound")].isNull() && m_crawlers_not_found_isValid;
}

QString OAIBatchGetCrawlersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetCrawlersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_crawlers.isSet()) {
        obj.insert(QString("Crawlers"), ::OpenAPI::toJsonValue(m_crawlers));
    }
    if (m_crawlers_not_found.isSet()) {
        obj.insert(QString("CrawlersNotFound"), ::OpenAPI::toJsonValue(m_crawlers_not_found));
    }
    return obj;
}

QList OAIBatchGetCrawlersResponse::getCrawlers() const {
    return m_crawlers;
}
void OAIBatchGetCrawlersResponse::setCrawlers(const QList &crawlers) {
    m_crawlers = crawlers;
    m_crawlers_isSet = true;
}

bool OAIBatchGetCrawlersResponse::is_crawlers_Set() const{
    return m_crawlers_isSet;
}

bool OAIBatchGetCrawlersResponse::is_crawlers_Valid() const{
    return m_crawlers_isValid;
}

QList OAIBatchGetCrawlersResponse::getCrawlersNotFound() const {
    return m_crawlers_not_found;
}
void OAIBatchGetCrawlersResponse::setCrawlersNotFound(const QList &crawlers_not_found) {
    m_crawlers_not_found = crawlers_not_found;
    m_crawlers_not_found_isSet = true;
}

bool OAIBatchGetCrawlersResponse::is_crawlers_not_found_Set() const{
    return m_crawlers_not_found_isSet;
}

bool OAIBatchGetCrawlersResponse::is_crawlers_not_found_Valid() const{
    return m_crawlers_not_found_isValid;
}

bool OAIBatchGetCrawlersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crawlers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawlers_not_found.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetCrawlersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
