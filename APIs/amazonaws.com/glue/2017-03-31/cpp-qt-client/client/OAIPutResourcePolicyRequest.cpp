/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutResourcePolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutResourcePolicyRequest::OAIPutResourcePolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutResourcePolicyRequest::OAIPutResourcePolicyRequest() {
    this->initializeModel();
}

OAIPutResourcePolicyRequest::~OAIPutResourcePolicyRequest() {}

void OAIPutResourcePolicyRequest::initializeModel() {

    m_policy_in_json_isSet = false;
    m_policy_in_json_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_policy_hash_condition_isSet = false;
    m_policy_hash_condition_isValid = false;

    m_policy_exists_condition_isSet = false;
    m_policy_exists_condition_isValid = false;

    m_enable_hybrid_isSet = false;
    m_enable_hybrid_isValid = false;
}

void OAIPutResourcePolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutResourcePolicyRequest::fromJsonObject(QJsonObject json) {

    m_policy_in_json_isValid = ::OpenAPI::fromJsonValue(m_policy_in_json, json[QString("PolicyInJson")]);
    m_policy_in_json_isSet = !json[QString("PolicyInJson")].isNull() && m_policy_in_json_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_policy_hash_condition_isValid = ::OpenAPI::fromJsonValue(m_policy_hash_condition, json[QString("PolicyHashCondition")]);
    m_policy_hash_condition_isSet = !json[QString("PolicyHashCondition")].isNull() && m_policy_hash_condition_isValid;

    m_policy_exists_condition_isValid = ::OpenAPI::fromJsonValue(m_policy_exists_condition, json[QString("PolicyExistsCondition")]);
    m_policy_exists_condition_isSet = !json[QString("PolicyExistsCondition")].isNull() && m_policy_exists_condition_isValid;

    m_enable_hybrid_isValid = ::OpenAPI::fromJsonValue(m_enable_hybrid, json[QString("EnableHybrid")]);
    m_enable_hybrid_isSet = !json[QString("EnableHybrid")].isNull() && m_enable_hybrid_isValid;
}

QString OAIPutResourcePolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutResourcePolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_in_json_isSet) {
        obj.insert(QString("PolicyInJson"), ::OpenAPI::toJsonValue(m_policy_in_json));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_policy_hash_condition_isSet) {
        obj.insert(QString("PolicyHashCondition"), ::OpenAPI::toJsonValue(m_policy_hash_condition));
    }
    if (m_policy_exists_condition.isSet()) {
        obj.insert(QString("PolicyExistsCondition"), ::OpenAPI::toJsonValue(m_policy_exists_condition));
    }
    if (m_enable_hybrid.isSet()) {
        obj.insert(QString("EnableHybrid"), ::OpenAPI::toJsonValue(m_enable_hybrid));
    }
    return obj;
}

QString OAIPutResourcePolicyRequest::getPolicyInJson() const {
    return m_policy_in_json;
}
void OAIPutResourcePolicyRequest::setPolicyInJson(const QString &policy_in_json) {
    m_policy_in_json = policy_in_json;
    m_policy_in_json_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_policy_in_json_Set() const{
    return m_policy_in_json_isSet;
}

bool OAIPutResourcePolicyRequest::is_policy_in_json_Valid() const{
    return m_policy_in_json_isValid;
}

QString OAIPutResourcePolicyRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIPutResourcePolicyRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIPutResourcePolicyRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIPutResourcePolicyRequest::getPolicyHashCondition() const {
    return m_policy_hash_condition;
}
void OAIPutResourcePolicyRequest::setPolicyHashCondition(const QString &policy_hash_condition) {
    m_policy_hash_condition = policy_hash_condition;
    m_policy_hash_condition_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_policy_hash_condition_Set() const{
    return m_policy_hash_condition_isSet;
}

bool OAIPutResourcePolicyRequest::is_policy_hash_condition_Valid() const{
    return m_policy_hash_condition_isValid;
}

OAIExistCondition OAIPutResourcePolicyRequest::getPolicyExistsCondition() const {
    return m_policy_exists_condition;
}
void OAIPutResourcePolicyRequest::setPolicyExistsCondition(const OAIExistCondition &policy_exists_condition) {
    m_policy_exists_condition = policy_exists_condition;
    m_policy_exists_condition_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_policy_exists_condition_Set() const{
    return m_policy_exists_condition_isSet;
}

bool OAIPutResourcePolicyRequest::is_policy_exists_condition_Valid() const{
    return m_policy_exists_condition_isValid;
}

OAIEnableHybridValues OAIPutResourcePolicyRequest::getEnableHybrid() const {
    return m_enable_hybrid;
}
void OAIPutResourcePolicyRequest::setEnableHybrid(const OAIEnableHybridValues &enable_hybrid) {
    m_enable_hybrid = enable_hybrid;
    m_enable_hybrid_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_enable_hybrid_Set() const{
    return m_enable_hybrid_isSet;
}

bool OAIPutResourcePolicyRequest::is_enable_hybrid_Valid() const{
    return m_enable_hybrid_isValid;
}

bool OAIPutResourcePolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_in_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_hash_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_exists_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_hybrid.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutResourcePolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_in_json_isValid && true;
}

} // namespace OpenAPI
