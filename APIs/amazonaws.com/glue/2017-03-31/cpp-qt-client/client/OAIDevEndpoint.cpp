/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevEndpoint::OAIDevEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevEndpoint::OAIDevEndpoint() {
    this->initializeModel();
}

OAIDevEndpoint::~OAIDevEndpoint() {}

void OAIDevEndpoint::initializeModel() {

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_yarn_endpoint_address_isSet = false;
    m_yarn_endpoint_address_isValid = false;

    m_private_address_isSet = false;
    m_private_address_isValid = false;

    m_zeppelin_remote_spark_interpreter_port_isSet = false;
    m_zeppelin_remote_spark_interpreter_port_isValid = false;

    m_public_address_isSet = false;
    m_public_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_extra_python_libs_s3_path_isSet = false;
    m_extra_python_libs_s3_path_isValid = false;

    m_extra_jars_s3_path_isSet = false;
    m_extra_jars_s3_path_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_last_update_status_isSet = false;
    m_last_update_status_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_modified_timestamp_isSet = false;
    m_last_modified_timestamp_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_public_keys_isSet = false;
    m_public_keys_isValid = false;

    m_security_configuration_isSet = false;
    m_security_configuration_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;
}

void OAIDevEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevEndpoint::fromJsonObject(QJsonObject json) {

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_yarn_endpoint_address_isValid = ::OpenAPI::fromJsonValue(m_yarn_endpoint_address, json[QString("YarnEndpointAddress")]);
    m_yarn_endpoint_address_isSet = !json[QString("YarnEndpointAddress")].isNull() && m_yarn_endpoint_address_isValid;

    m_private_address_isValid = ::OpenAPI::fromJsonValue(m_private_address, json[QString("PrivateAddress")]);
    m_private_address_isSet = !json[QString("PrivateAddress")].isNull() && m_private_address_isValid;

    m_zeppelin_remote_spark_interpreter_port_isValid = ::OpenAPI::fromJsonValue(m_zeppelin_remote_spark_interpreter_port, json[QString("ZeppelinRemoteSparkInterpreterPort")]);
    m_zeppelin_remote_spark_interpreter_port_isSet = !json[QString("ZeppelinRemoteSparkInterpreterPort")].isNull() && m_zeppelin_remote_spark_interpreter_port_isValid;

    m_public_address_isValid = ::OpenAPI::fromJsonValue(m_public_address, json[QString("PublicAddress")]);
    m_public_address_isSet = !json[QString("PublicAddress")].isNull() && m_public_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_extra_python_libs_s3_path_isValid = ::OpenAPI::fromJsonValue(m_extra_python_libs_s3_path, json[QString("ExtraPythonLibsS3Path")]);
    m_extra_python_libs_s3_path_isSet = !json[QString("ExtraPythonLibsS3Path")].isNull() && m_extra_python_libs_s3_path_isValid;

    m_extra_jars_s3_path_isValid = ::OpenAPI::fromJsonValue(m_extra_jars_s3_path, json[QString("ExtraJarsS3Path")]);
    m_extra_jars_s3_path_isSet = !json[QString("ExtraJarsS3Path")].isNull() && m_extra_jars_s3_path_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_last_update_status_isValid = ::OpenAPI::fromJsonValue(m_last_update_status, json[QString("LastUpdateStatus")]);
    m_last_update_status_isSet = !json[QString("LastUpdateStatus")].isNull() && m_last_update_status_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_modified_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_modified_timestamp, json[QString("LastModifiedTimestamp")]);
    m_last_modified_timestamp_isSet = !json[QString("LastModifiedTimestamp")].isNull() && m_last_modified_timestamp_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("PublicKey")]);
    m_public_key_isSet = !json[QString("PublicKey")].isNull() && m_public_key_isValid;

    m_public_keys_isValid = ::OpenAPI::fromJsonValue(m_public_keys, json[QString("PublicKeys")]);
    m_public_keys_isSet = !json[QString("PublicKeys")].isNull() && m_public_keys_isValid;

    m_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_security_configuration, json[QString("SecurityConfiguration")]);
    m_security_configuration_isSet = !json[QString("SecurityConfiguration")].isNull() && m_security_configuration_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("Arguments")]);
    m_arguments_isSet = !json[QString("Arguments")].isNull() && m_arguments_isValid;
}

QString OAIDevEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_yarn_endpoint_address_isSet) {
        obj.insert(QString("YarnEndpointAddress"), ::OpenAPI::toJsonValue(m_yarn_endpoint_address));
    }
    if (m_private_address_isSet) {
        obj.insert(QString("PrivateAddress"), ::OpenAPI::toJsonValue(m_private_address));
    }
    if (m_zeppelin_remote_spark_interpreter_port_isSet) {
        obj.insert(QString("ZeppelinRemoteSparkInterpreterPort"), ::OpenAPI::toJsonValue(m_zeppelin_remote_spark_interpreter_port));
    }
    if (m_public_address_isSet) {
        obj.insert(QString("PublicAddress"), ::OpenAPI::toJsonValue(m_public_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_extra_python_libs_s3_path_isSet) {
        obj.insert(QString("ExtraPythonLibsS3Path"), ::OpenAPI::toJsonValue(m_extra_python_libs_s3_path));
    }
    if (m_extra_jars_s3_path_isSet) {
        obj.insert(QString("ExtraJarsS3Path"), ::OpenAPI::toJsonValue(m_extra_jars_s3_path));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_last_update_status_isSet) {
        obj.insert(QString("LastUpdateStatus"), ::OpenAPI::toJsonValue(m_last_update_status));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_modified_timestamp_isSet) {
        obj.insert(QString("LastModifiedTimestamp"), ::OpenAPI::toJsonValue(m_last_modified_timestamp));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("PublicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_public_keys.isSet()) {
        obj.insert(QString("PublicKeys"), ::OpenAPI::toJsonValue(m_public_keys));
    }
    if (m_security_configuration_isSet) {
        obj.insert(QString("SecurityConfiguration"), ::OpenAPI::toJsonValue(m_security_configuration));
    }
    if (m_arguments.isSet()) {
        obj.insert(QString("Arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    return obj;
}

QString OAIDevEndpoint::getEndpointName() const {
    return m_endpoint_name;
}
void OAIDevEndpoint::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIDevEndpoint::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIDevEndpoint::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QString OAIDevEndpoint::getRoleArn() const {
    return m_role_arn;
}
void OAIDevEndpoint::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDevEndpoint::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDevEndpoint::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIDevEndpoint::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIDevEndpoint::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIDevEndpoint::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIDevEndpoint::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIDevEndpoint::getSubnetId() const {
    return m_subnet_id;
}
void OAIDevEndpoint::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIDevEndpoint::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIDevEndpoint::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIDevEndpoint::getYarnEndpointAddress() const {
    return m_yarn_endpoint_address;
}
void OAIDevEndpoint::setYarnEndpointAddress(const QString &yarn_endpoint_address) {
    m_yarn_endpoint_address = yarn_endpoint_address;
    m_yarn_endpoint_address_isSet = true;
}

bool OAIDevEndpoint::is_yarn_endpoint_address_Set() const{
    return m_yarn_endpoint_address_isSet;
}

bool OAIDevEndpoint::is_yarn_endpoint_address_Valid() const{
    return m_yarn_endpoint_address_isValid;
}

QString OAIDevEndpoint::getPrivateAddress() const {
    return m_private_address;
}
void OAIDevEndpoint::setPrivateAddress(const QString &private_address) {
    m_private_address = private_address;
    m_private_address_isSet = true;
}

bool OAIDevEndpoint::is_private_address_Set() const{
    return m_private_address_isSet;
}

bool OAIDevEndpoint::is_private_address_Valid() const{
    return m_private_address_isValid;
}

qint32 OAIDevEndpoint::getZeppelinRemoteSparkInterpreterPort() const {
    return m_zeppelin_remote_spark_interpreter_port;
}
void OAIDevEndpoint::setZeppelinRemoteSparkInterpreterPort(const qint32 &zeppelin_remote_spark_interpreter_port) {
    m_zeppelin_remote_spark_interpreter_port = zeppelin_remote_spark_interpreter_port;
    m_zeppelin_remote_spark_interpreter_port_isSet = true;
}

bool OAIDevEndpoint::is_zeppelin_remote_spark_interpreter_port_Set() const{
    return m_zeppelin_remote_spark_interpreter_port_isSet;
}

bool OAIDevEndpoint::is_zeppelin_remote_spark_interpreter_port_Valid() const{
    return m_zeppelin_remote_spark_interpreter_port_isValid;
}

QString OAIDevEndpoint::getPublicAddress() const {
    return m_public_address;
}
void OAIDevEndpoint::setPublicAddress(const QString &public_address) {
    m_public_address = public_address;
    m_public_address_isSet = true;
}

bool OAIDevEndpoint::is_public_address_Set() const{
    return m_public_address_isSet;
}

bool OAIDevEndpoint::is_public_address_Valid() const{
    return m_public_address_isValid;
}

QString OAIDevEndpoint::getStatus() const {
    return m_status;
}
void OAIDevEndpoint::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDevEndpoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDevEndpoint::is_status_Valid() const{
    return m_status_isValid;
}

OAIWorkerType OAIDevEndpoint::getWorkerType() const {
    return m_worker_type;
}
void OAIDevEndpoint::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIDevEndpoint::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIDevEndpoint::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

QString OAIDevEndpoint::getGlueVersion() const {
    return m_glue_version;
}
void OAIDevEndpoint::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAIDevEndpoint::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAIDevEndpoint::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

qint32 OAIDevEndpoint::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIDevEndpoint::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIDevEndpoint::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIDevEndpoint::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

qint32 OAIDevEndpoint::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAIDevEndpoint::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAIDevEndpoint::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAIDevEndpoint::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

QString OAIDevEndpoint::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIDevEndpoint::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIDevEndpoint::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIDevEndpoint::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIDevEndpoint::getVpcId() const {
    return m_vpc_id;
}
void OAIDevEndpoint::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIDevEndpoint::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIDevEndpoint::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIDevEndpoint::getExtraPythonLibsS3Path() const {
    return m_extra_python_libs_s3_path;
}
void OAIDevEndpoint::setExtraPythonLibsS3Path(const QString &extra_python_libs_s3_path) {
    m_extra_python_libs_s3_path = extra_python_libs_s3_path;
    m_extra_python_libs_s3_path_isSet = true;
}

bool OAIDevEndpoint::is_extra_python_libs_s3_path_Set() const{
    return m_extra_python_libs_s3_path_isSet;
}

bool OAIDevEndpoint::is_extra_python_libs_s3_path_Valid() const{
    return m_extra_python_libs_s3_path_isValid;
}

QString OAIDevEndpoint::getExtraJarsS3Path() const {
    return m_extra_jars_s3_path;
}
void OAIDevEndpoint::setExtraJarsS3Path(const QString &extra_jars_s3_path) {
    m_extra_jars_s3_path = extra_jars_s3_path;
    m_extra_jars_s3_path_isSet = true;
}

bool OAIDevEndpoint::is_extra_jars_s3_path_Set() const{
    return m_extra_jars_s3_path_isSet;
}

bool OAIDevEndpoint::is_extra_jars_s3_path_Valid() const{
    return m_extra_jars_s3_path_isValid;
}

QString OAIDevEndpoint::getFailureReason() const {
    return m_failure_reason;
}
void OAIDevEndpoint::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDevEndpoint::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDevEndpoint::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIDevEndpoint::getLastUpdateStatus() const {
    return m_last_update_status;
}
void OAIDevEndpoint::setLastUpdateStatus(const QString &last_update_status) {
    m_last_update_status = last_update_status;
    m_last_update_status_isSet = true;
}

bool OAIDevEndpoint::is_last_update_status_Set() const{
    return m_last_update_status_isSet;
}

bool OAIDevEndpoint::is_last_update_status_Valid() const{
    return m_last_update_status_isValid;
}

QDateTime OAIDevEndpoint::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIDevEndpoint::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIDevEndpoint::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIDevEndpoint::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIDevEndpoint::getLastModifiedTimestamp() const {
    return m_last_modified_timestamp;
}
void OAIDevEndpoint::setLastModifiedTimestamp(const QDateTime &last_modified_timestamp) {
    m_last_modified_timestamp = last_modified_timestamp;
    m_last_modified_timestamp_isSet = true;
}

bool OAIDevEndpoint::is_last_modified_timestamp_Set() const{
    return m_last_modified_timestamp_isSet;
}

bool OAIDevEndpoint::is_last_modified_timestamp_Valid() const{
    return m_last_modified_timestamp_isValid;
}

QString OAIDevEndpoint::getPublicKey() const {
    return m_public_key;
}
void OAIDevEndpoint::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIDevEndpoint::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIDevEndpoint::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QList OAIDevEndpoint::getPublicKeys() const {
    return m_public_keys;
}
void OAIDevEndpoint::setPublicKeys(const QList &public_keys) {
    m_public_keys = public_keys;
    m_public_keys_isSet = true;
}

bool OAIDevEndpoint::is_public_keys_Set() const{
    return m_public_keys_isSet;
}

bool OAIDevEndpoint::is_public_keys_Valid() const{
    return m_public_keys_isValid;
}

QString OAIDevEndpoint::getSecurityConfiguration() const {
    return m_security_configuration;
}
void OAIDevEndpoint::setSecurityConfiguration(const QString &security_configuration) {
    m_security_configuration = security_configuration;
    m_security_configuration_isSet = true;
}

bool OAIDevEndpoint::is_security_configuration_Set() const{
    return m_security_configuration_isSet;
}

bool OAIDevEndpoint::is_security_configuration_Valid() const{
    return m_security_configuration_isValid;
}

QMap OAIDevEndpoint::getArguments() const {
    return m_arguments;
}
void OAIDevEndpoint::setArguments(const QMap &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIDevEndpoint::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIDevEndpoint::is_arguments_Valid() const{
    return m_arguments_isValid;
}

bool OAIDevEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yarn_endpoint_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zeppelin_remote_spark_interpreter_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_python_libs_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_jars_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
