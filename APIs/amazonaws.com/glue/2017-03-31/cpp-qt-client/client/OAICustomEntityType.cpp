/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomEntityType::OAICustomEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomEntityType::OAICustomEntityType() {
    this->initializeModel();
}

OAICustomEntityType::~OAICustomEntityType() {}

void OAICustomEntityType::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_regex_string_isSet = false;
    m_regex_string_isValid = false;

    m_context_words_isSet = false;
    m_context_words_isValid = false;
}

void OAICustomEntityType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomEntityType::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_regex_string_isValid = ::OpenAPI::fromJsonValue(m_regex_string, json[QString("RegexString")]);
    m_regex_string_isSet = !json[QString("RegexString")].isNull() && m_regex_string_isValid;

    m_context_words_isValid = ::OpenAPI::fromJsonValue(m_context_words, json[QString("ContextWords")]);
    m_context_words_isSet = !json[QString("ContextWords")].isNull() && m_context_words_isValid;
}

QString OAICustomEntityType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomEntityType::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_regex_string_isSet) {
        obj.insert(QString("RegexString"), ::OpenAPI::toJsonValue(m_regex_string));
    }
    if (m_context_words.isSet()) {
        obj.insert(QString("ContextWords"), ::OpenAPI::toJsonValue(m_context_words));
    }
    return obj;
}

QString OAICustomEntityType::getName() const {
    return m_name;
}
void OAICustomEntityType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomEntityType::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomEntityType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomEntityType::getRegexString() const {
    return m_regex_string;
}
void OAICustomEntityType::setRegexString(const QString &regex_string) {
    m_regex_string = regex_string;
    m_regex_string_isSet = true;
}

bool OAICustomEntityType::is_regex_string_Set() const{
    return m_regex_string_isSet;
}

bool OAICustomEntityType::is_regex_string_Valid() const{
    return m_regex_string_isValid;
}

QList OAICustomEntityType::getContextWords() const {
    return m_context_words;
}
void OAICustomEntityType::setContextWords(const QList &context_words) {
    m_context_words = context_words;
    m_context_words_isSet = true;
}

bool OAICustomEntityType::is_context_words_Set() const{
    return m_context_words_isSet;
}

bool OAICustomEntityType::is_context_words_Valid() const{
    return m_context_words_isValid;
}

bool OAICustomEntityType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_words.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_regex_string_isValid && true;
}

} // namespace OpenAPI
