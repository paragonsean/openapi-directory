/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSchemaResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSchemaResponse::OAICreateSchemaResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSchemaResponse::OAICreateSchemaResponse() {
    this->initializeModel();
}

OAICreateSchemaResponse::~OAICreateSchemaResponse() {}

void OAICreateSchemaResponse::initializeModel() {

    m_registry_name_isSet = false;
    m_registry_name_isValid = false;

    m_registry_arn_isSet = false;
    m_registry_arn_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_schema_checkpoint_isSet = false;
    m_schema_checkpoint_isValid = false;

    m_latest_schema_version_isSet = false;
    m_latest_schema_version_isValid = false;

    m_next_schema_version_isSet = false;
    m_next_schema_version_isValid = false;

    m_schema_status_isSet = false;
    m_schema_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_schema_version_id_isSet = false;
    m_schema_version_id_isValid = false;

    m_schema_version_status_isSet = false;
    m_schema_version_status_isValid = false;
}

void OAICreateSchemaResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSchemaResponse::fromJsonObject(QJsonObject json) {

    m_registry_name_isValid = ::OpenAPI::fromJsonValue(m_registry_name, json[QString("RegistryName")]);
    m_registry_name_isSet = !json[QString("RegistryName")].isNull() && m_registry_name_isValid;

    m_registry_arn_isValid = ::OpenAPI::fromJsonValue(m_registry_arn, json[QString("RegistryArn")]);
    m_registry_arn_isSet = !json[QString("RegistryArn")].isNull() && m_registry_arn_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("SchemaName")]);
    m_schema_name_isSet = !json[QString("SchemaName")].isNull() && m_schema_name_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("DataFormat")]);
    m_data_format_isSet = !json[QString("DataFormat")].isNull() && m_data_format_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("Compatibility")]);
    m_compatibility_isSet = !json[QString("Compatibility")].isNull() && m_compatibility_isValid;

    m_schema_checkpoint_isValid = ::OpenAPI::fromJsonValue(m_schema_checkpoint, json[QString("SchemaCheckpoint")]);
    m_schema_checkpoint_isSet = !json[QString("SchemaCheckpoint")].isNull() && m_schema_checkpoint_isValid;

    m_latest_schema_version_isValid = ::OpenAPI::fromJsonValue(m_latest_schema_version, json[QString("LatestSchemaVersion")]);
    m_latest_schema_version_isSet = !json[QString("LatestSchemaVersion")].isNull() && m_latest_schema_version_isValid;

    m_next_schema_version_isValid = ::OpenAPI::fromJsonValue(m_next_schema_version, json[QString("NextSchemaVersion")]);
    m_next_schema_version_isSet = !json[QString("NextSchemaVersion")].isNull() && m_next_schema_version_isValid;

    m_schema_status_isValid = ::OpenAPI::fromJsonValue(m_schema_status, json[QString("SchemaStatus")]);
    m_schema_status_isSet = !json[QString("SchemaStatus")].isNull() && m_schema_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_schema_version_id_isValid = ::OpenAPI::fromJsonValue(m_schema_version_id, json[QString("SchemaVersionId")]);
    m_schema_version_id_isSet = !json[QString("SchemaVersionId")].isNull() && m_schema_version_id_isValid;

    m_schema_version_status_isValid = ::OpenAPI::fromJsonValue(m_schema_version_status, json[QString("SchemaVersionStatus")]);
    m_schema_version_status_isSet = !json[QString("SchemaVersionStatus")].isNull() && m_schema_version_status_isValid;
}

QString OAICreateSchemaResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSchemaResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_name_isSet) {
        obj.insert(QString("RegistryName"), ::OpenAPI::toJsonValue(m_registry_name));
    }
    if (m_registry_arn_isSet) {
        obj.insert(QString("RegistryArn"), ::OpenAPI::toJsonValue(m_registry_arn));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("SchemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_data_format.isSet()) {
        obj.insert(QString("DataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_compatibility.isSet()) {
        obj.insert(QString("Compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_schema_checkpoint_isSet) {
        obj.insert(QString("SchemaCheckpoint"), ::OpenAPI::toJsonValue(m_schema_checkpoint));
    }
    if (m_latest_schema_version_isSet) {
        obj.insert(QString("LatestSchemaVersion"), ::OpenAPI::toJsonValue(m_latest_schema_version));
    }
    if (m_next_schema_version_isSet) {
        obj.insert(QString("NextSchemaVersion"), ::OpenAPI::toJsonValue(m_next_schema_version));
    }
    if (m_schema_status.isSet()) {
        obj.insert(QString("SchemaStatus"), ::OpenAPI::toJsonValue(m_schema_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_schema_version_id_isSet) {
        obj.insert(QString("SchemaVersionId"), ::OpenAPI::toJsonValue(m_schema_version_id));
    }
    if (m_schema_version_status.isSet()) {
        obj.insert(QString("SchemaVersionStatus"), ::OpenAPI::toJsonValue(m_schema_version_status));
    }
    return obj;
}

QString OAICreateSchemaResponse::getRegistryName() const {
    return m_registry_name;
}
void OAICreateSchemaResponse::setRegistryName(const QString &registry_name) {
    m_registry_name = registry_name;
    m_registry_name_isSet = true;
}

bool OAICreateSchemaResponse::is_registry_name_Set() const{
    return m_registry_name_isSet;
}

bool OAICreateSchemaResponse::is_registry_name_Valid() const{
    return m_registry_name_isValid;
}

QString OAICreateSchemaResponse::getRegistryArn() const {
    return m_registry_arn;
}
void OAICreateSchemaResponse::setRegistryArn(const QString &registry_arn) {
    m_registry_arn = registry_arn;
    m_registry_arn_isSet = true;
}

bool OAICreateSchemaResponse::is_registry_arn_Set() const{
    return m_registry_arn_isSet;
}

bool OAICreateSchemaResponse::is_registry_arn_Valid() const{
    return m_registry_arn_isValid;
}

QString OAICreateSchemaResponse::getSchemaName() const {
    return m_schema_name;
}
void OAICreateSchemaResponse::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAICreateSchemaResponse::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAICreateSchemaResponse::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAICreateSchemaResponse::getSchemaArn() const {
    return m_schema_arn;
}
void OAICreateSchemaResponse::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAICreateSchemaResponse::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAICreateSchemaResponse::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAICreateSchemaResponse::getDescription() const {
    return m_description;
}
void OAICreateSchemaResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSchemaResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSchemaResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIDataFormat OAICreateSchemaResponse::getDataFormat() const {
    return m_data_format;
}
void OAICreateSchemaResponse::setDataFormat(const OAIDataFormat &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAICreateSchemaResponse::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAICreateSchemaResponse::is_data_format_Valid() const{
    return m_data_format_isValid;
}

OAICompatibility OAICreateSchemaResponse::getCompatibility() const {
    return m_compatibility;
}
void OAICreateSchemaResponse::setCompatibility(const OAICompatibility &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAICreateSchemaResponse::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAICreateSchemaResponse::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

qint32 OAICreateSchemaResponse::getSchemaCheckpoint() const {
    return m_schema_checkpoint;
}
void OAICreateSchemaResponse::setSchemaCheckpoint(const qint32 &schema_checkpoint) {
    m_schema_checkpoint = schema_checkpoint;
    m_schema_checkpoint_isSet = true;
}

bool OAICreateSchemaResponse::is_schema_checkpoint_Set() const{
    return m_schema_checkpoint_isSet;
}

bool OAICreateSchemaResponse::is_schema_checkpoint_Valid() const{
    return m_schema_checkpoint_isValid;
}

qint32 OAICreateSchemaResponse::getLatestSchemaVersion() const {
    return m_latest_schema_version;
}
void OAICreateSchemaResponse::setLatestSchemaVersion(const qint32 &latest_schema_version) {
    m_latest_schema_version = latest_schema_version;
    m_latest_schema_version_isSet = true;
}

bool OAICreateSchemaResponse::is_latest_schema_version_Set() const{
    return m_latest_schema_version_isSet;
}

bool OAICreateSchemaResponse::is_latest_schema_version_Valid() const{
    return m_latest_schema_version_isValid;
}

qint32 OAICreateSchemaResponse::getNextSchemaVersion() const {
    return m_next_schema_version;
}
void OAICreateSchemaResponse::setNextSchemaVersion(const qint32 &next_schema_version) {
    m_next_schema_version = next_schema_version;
    m_next_schema_version_isSet = true;
}

bool OAICreateSchemaResponse::is_next_schema_version_Set() const{
    return m_next_schema_version_isSet;
}

bool OAICreateSchemaResponse::is_next_schema_version_Valid() const{
    return m_next_schema_version_isValid;
}

OAISchemaStatus OAICreateSchemaResponse::getSchemaStatus() const {
    return m_schema_status;
}
void OAICreateSchemaResponse::setSchemaStatus(const OAISchemaStatus &schema_status) {
    m_schema_status = schema_status;
    m_schema_status_isSet = true;
}

bool OAICreateSchemaResponse::is_schema_status_Set() const{
    return m_schema_status_isSet;
}

bool OAICreateSchemaResponse::is_schema_status_Valid() const{
    return m_schema_status_isValid;
}

QMap OAICreateSchemaResponse::getTags() const {
    return m_tags;
}
void OAICreateSchemaResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSchemaResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSchemaResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateSchemaResponse::getSchemaVersionId() const {
    return m_schema_version_id;
}
void OAICreateSchemaResponse::setSchemaVersionId(const QString &schema_version_id) {
    m_schema_version_id = schema_version_id;
    m_schema_version_id_isSet = true;
}

bool OAICreateSchemaResponse::is_schema_version_id_Set() const{
    return m_schema_version_id_isSet;
}

bool OAICreateSchemaResponse::is_schema_version_id_Valid() const{
    return m_schema_version_id_isValid;
}

OAISchemaVersionStatus OAICreateSchemaResponse::getSchemaVersionStatus() const {
    return m_schema_version_status;
}
void OAICreateSchemaResponse::setSchemaVersionStatus(const OAISchemaVersionStatus &schema_version_status) {
    m_schema_version_status = schema_version_status;
    m_schema_version_status_isSet = true;
}

bool OAICreateSchemaResponse::is_schema_version_status_Set() const{
    return m_schema_version_status_isSet;
}

bool OAICreateSchemaResponse::is_schema_version_status_Valid() const{
    return m_schema_version_status_isValid;
}

bool OAICreateSchemaResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_checkpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSchemaResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
