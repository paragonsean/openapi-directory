/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITableVersion_Table.h
 *
 * 
 */

#ifndef OAITableVersion_Table_H
#define OAITableVersion_Table_H

#include <QJsonObject>

#include "OAITableInput_StorageDescriptor.h"
#include "OAITableInput_TargetTable.h"
#include "OAITable_FederatedTable.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITableInput_StorageDescriptor;
class OAITableInput_TargetTable;
class OAITable_FederatedTable;

class OAITableVersion_Table : public OAIObject {
public:
    OAITableVersion_Table();
    OAITableVersion_Table(QString json);
    ~OAITableVersion_Table() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QDateTime getCreateTime() const;
    void setCreateTime(const QDateTime &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QDateTime getUpdateTime() const;
    void setUpdateTime(const QDateTime &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QDateTime getLastAccessTime() const;
    void setLastAccessTime(const QDateTime &last_access_time);
    bool is_last_access_time_Set() const;
    bool is_last_access_time_Valid() const;

    QDateTime getLastAnalyzedTime() const;
    void setLastAnalyzedTime(const QDateTime &last_analyzed_time);
    bool is_last_analyzed_time_Set() const;
    bool is_last_analyzed_time_Valid() const;

    qint32 getRetention() const;
    void setRetention(const qint32 &retention);
    bool is_retention_Set() const;
    bool is_retention_Valid() const;

    OAITableInput_StorageDescriptor getStorageDescriptor() const;
    void setStorageDescriptor(const OAITableInput_StorageDescriptor &storage_descriptor);
    bool is_storage_descriptor_Set() const;
    bool is_storage_descriptor_Valid() const;

    QList getPartitionKeys() const;
    void setPartitionKeys(const QList &partition_keys);
    bool is_partition_keys_Set() const;
    bool is_partition_keys_Valid() const;

    QString getViewOriginalText() const;
    void setViewOriginalText(const QString &view_original_text);
    bool is_view_original_text_Set() const;
    bool is_view_original_text_Valid() const;

    QString getViewExpandedText() const;
    void setViewExpandedText(const QString &view_expanded_text);
    bool is_view_expanded_text_Set() const;
    bool is_view_expanded_text_Valid() const;

    QString getTableType() const;
    void setTableType(const QString &table_type);
    bool is_table_type_Set() const;
    bool is_table_type_Valid() const;

    QMap getParameters() const;
    void setParameters(const QMap &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    bool getIsRegisteredWithLakeFormation() const;
    void setIsRegisteredWithLakeFormation(const bool &is_registered_with_lake_formation);
    bool is_is_registered_with_lake_formation_Set() const;
    bool is_is_registered_with_lake_formation_Valid() const;

    OAITableInput_TargetTable getTargetTable() const;
    void setTargetTable(const OAITableInput_TargetTable &target_table);
    bool is_target_table_Set() const;
    bool is_target_table_Valid() const;

    QString getCatalogId() const;
    void setCatalogId(const QString &catalog_id);
    bool is_catalog_id_Set() const;
    bool is_catalog_id_Valid() const;

    QString getVersionId() const;
    void setVersionId(const QString &version_id);
    bool is_version_id_Set() const;
    bool is_version_id_Valid() const;

    OAITable_FederatedTable getFederatedTable() const;
    void setFederatedTable(const OAITable_FederatedTable &federated_table);
    bool is_federated_table_Set() const;
    bool is_federated_table_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QDateTime m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QDateTime m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QDateTime m_last_access_time;
    bool m_last_access_time_isSet;
    bool m_last_access_time_isValid;

    QDateTime m_last_analyzed_time;
    bool m_last_analyzed_time_isSet;
    bool m_last_analyzed_time_isValid;

    qint32 m_retention;
    bool m_retention_isSet;
    bool m_retention_isValid;

    OAITableInput_StorageDescriptor m_storage_descriptor;
    bool m_storage_descriptor_isSet;
    bool m_storage_descriptor_isValid;

    QList m_partition_keys;
    bool m_partition_keys_isSet;
    bool m_partition_keys_isValid;

    QString m_view_original_text;
    bool m_view_original_text_isSet;
    bool m_view_original_text_isValid;

    QString m_view_expanded_text;
    bool m_view_expanded_text_isSet;
    bool m_view_expanded_text_isValid;

    QString m_table_type;
    bool m_table_type_isSet;
    bool m_table_type_isValid;

    QMap m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    bool m_is_registered_with_lake_formation;
    bool m_is_registered_with_lake_formation_isSet;
    bool m_is_registered_with_lake_formation_isValid;

    OAITableInput_TargetTable m_target_table;
    bool m_target_table_isSet;
    bool m_target_table_isValid;

    QString m_catalog_id;
    bool m_catalog_id_isSet;
    bool m_catalog_id_isValid;

    QString m_version_id;
    bool m_version_id_isSet;
    bool m_version_id_isValid;

    OAITable_FederatedTable m_federated_table;
    bool m_federated_table_isSet;
    bool m_federated_table_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITableVersion_Table)

#endif // OAITableVersion_Table_H
