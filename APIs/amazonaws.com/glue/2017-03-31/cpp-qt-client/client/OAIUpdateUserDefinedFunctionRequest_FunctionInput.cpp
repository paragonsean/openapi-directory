/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserDefinedFunctionRequest_FunctionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserDefinedFunctionRequest_FunctionInput::OAIUpdateUserDefinedFunctionRequest_FunctionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserDefinedFunctionRequest_FunctionInput::OAIUpdateUserDefinedFunctionRequest_FunctionInput() {
    this->initializeModel();
}

OAIUpdateUserDefinedFunctionRequest_FunctionInput::~OAIUpdateUserDefinedFunctionRequest_FunctionInput() {}

void OAIUpdateUserDefinedFunctionRequest_FunctionInput::initializeModel() {

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_class_name_isSet = false;
    m_class_name_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_resource_uris_isSet = false;
    m_resource_uris_isValid = false;
}

void OAIUpdateUserDefinedFunctionRequest_FunctionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserDefinedFunctionRequest_FunctionInput::fromJsonObject(QJsonObject json) {

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("FunctionName")]);
    m_function_name_isSet = !json[QString("FunctionName")].isNull() && m_function_name_isValid;

    m_class_name_isValid = ::OpenAPI::fromJsonValue(m_class_name, json[QString("ClassName")]);
    m_class_name_isSet = !json[QString("ClassName")].isNull() && m_class_name_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("OwnerName")]);
    m_owner_name_isSet = !json[QString("OwnerName")].isNull() && m_owner_name_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(m_owner_type, json[QString("OwnerType")]);
    m_owner_type_isSet = !json[QString("OwnerType")].isNull() && m_owner_type_isValid;

    m_resource_uris_isValid = ::OpenAPI::fromJsonValue(m_resource_uris, json[QString("ResourceUris")]);
    m_resource_uris_isSet = !json[QString("ResourceUris")].isNull() && m_resource_uris_isValid;
}

QString OAIUpdateUserDefinedFunctionRequest_FunctionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserDefinedFunctionRequest_FunctionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_function_name_isSet) {
        obj.insert(QString("FunctionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_class_name_isSet) {
        obj.insert(QString("ClassName"), ::OpenAPI::toJsonValue(m_class_name));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("OwnerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_owner_type.isSet()) {
        obj.insert(QString("OwnerType"), ::OpenAPI::toJsonValue(m_owner_type));
    }
    if (m_resource_uris.isSet()) {
        obj.insert(QString("ResourceUris"), ::OpenAPI::toJsonValue(m_resource_uris));
    }
    return obj;
}

QString OAIUpdateUserDefinedFunctionRequest_FunctionInput::getFunctionName() const {
    return m_function_name;
}
void OAIUpdateUserDefinedFunctionRequest_FunctionInput::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIUpdateUserDefinedFunctionRequest_FunctionInput::getClassName() const {
    return m_class_name;
}
void OAIUpdateUserDefinedFunctionRequest_FunctionInput::setClassName(const QString &class_name) {
    m_class_name = class_name;
    m_class_name_isSet = true;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_class_name_Set() const{
    return m_class_name_isSet;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_class_name_Valid() const{
    return m_class_name_isValid;
}

QString OAIUpdateUserDefinedFunctionRequest_FunctionInput::getOwnerName() const {
    return m_owner_name;
}
void OAIUpdateUserDefinedFunctionRequest_FunctionInput::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

OAIPrincipalType OAIUpdateUserDefinedFunctionRequest_FunctionInput::getOwnerType() const {
    return m_owner_type;
}
void OAIUpdateUserDefinedFunctionRequest_FunctionInput::setOwnerType(const OAIPrincipalType &owner_type) {
    m_owner_type = owner_type;
    m_owner_type_isSet = true;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

QList OAIUpdateUserDefinedFunctionRequest_FunctionInput::getResourceUris() const {
    return m_resource_uris;
}
void OAIUpdateUserDefinedFunctionRequest_FunctionInput::setResourceUris(const QList &resource_uris) {
    m_resource_uris = resource_uris;
    m_resource_uris_isSet = true;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_resource_uris_Set() const{
    return m_resource_uris_isSet;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::is_resource_uris_Valid() const{
    return m_resource_uris_isValid;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uris.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserDefinedFunctionRequest_FunctionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
