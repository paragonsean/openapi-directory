/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsvClassifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsvClassifier::OAICsvClassifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsvClassifier::OAICsvClassifier() {
    this->initializeModel();
}

OAICsvClassifier::~OAICsvClassifier() {}

void OAICsvClassifier::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_quote_symbol_isSet = false;
    m_quote_symbol_isValid = false;

    m_contains_header_isSet = false;
    m_contains_header_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_disable_value_trimming_isSet = false;
    m_disable_value_trimming_isValid = false;

    m_allow_single_column_isSet = false;
    m_allow_single_column_isValid = false;

    m_custom_datatype_configured_isSet = false;
    m_custom_datatype_configured_isValid = false;

    m_custom_datatypes_isSet = false;
    m_custom_datatypes_isValid = false;
}

void OAICsvClassifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsvClassifier::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;

    m_quote_symbol_isValid = ::OpenAPI::fromJsonValue(m_quote_symbol, json[QString("QuoteSymbol")]);
    m_quote_symbol_isSet = !json[QString("QuoteSymbol")].isNull() && m_quote_symbol_isValid;

    m_contains_header_isValid = ::OpenAPI::fromJsonValue(m_contains_header, json[QString("ContainsHeader")]);
    m_contains_header_isSet = !json[QString("ContainsHeader")].isNull() && m_contains_header_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("Header")]);
    m_header_isSet = !json[QString("Header")].isNull() && m_header_isValid;

    m_disable_value_trimming_isValid = ::OpenAPI::fromJsonValue(m_disable_value_trimming, json[QString("DisableValueTrimming")]);
    m_disable_value_trimming_isSet = !json[QString("DisableValueTrimming")].isNull() && m_disable_value_trimming_isValid;

    m_allow_single_column_isValid = ::OpenAPI::fromJsonValue(m_allow_single_column, json[QString("AllowSingleColumn")]);
    m_allow_single_column_isSet = !json[QString("AllowSingleColumn")].isNull() && m_allow_single_column_isValid;

    m_custom_datatype_configured_isValid = ::OpenAPI::fromJsonValue(m_custom_datatype_configured, json[QString("CustomDatatypeConfigured")]);
    m_custom_datatype_configured_isSet = !json[QString("CustomDatatypeConfigured")].isNull() && m_custom_datatype_configured_isValid;

    m_custom_datatypes_isValid = ::OpenAPI::fromJsonValue(m_custom_datatypes, json[QString("CustomDatatypes")]);
    m_custom_datatypes_isSet = !json[QString("CustomDatatypes")].isNull() && m_custom_datatypes_isValid;
}

QString OAICsvClassifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsvClassifier::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_quote_symbol_isSet) {
        obj.insert(QString("QuoteSymbol"), ::OpenAPI::toJsonValue(m_quote_symbol));
    }
    if (m_contains_header.isSet()) {
        obj.insert(QString("ContainsHeader"), ::OpenAPI::toJsonValue(m_contains_header));
    }
    if (m_header.isSet()) {
        obj.insert(QString("Header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_disable_value_trimming_isSet) {
        obj.insert(QString("DisableValueTrimming"), ::OpenAPI::toJsonValue(m_disable_value_trimming));
    }
    if (m_allow_single_column_isSet) {
        obj.insert(QString("AllowSingleColumn"), ::OpenAPI::toJsonValue(m_allow_single_column));
    }
    if (m_custom_datatype_configured_isSet) {
        obj.insert(QString("CustomDatatypeConfigured"), ::OpenAPI::toJsonValue(m_custom_datatype_configured));
    }
    if (m_custom_datatypes.isSet()) {
        obj.insert(QString("CustomDatatypes"), ::OpenAPI::toJsonValue(m_custom_datatypes));
    }
    return obj;
}

QString OAICsvClassifier::getName() const {
    return m_name;
}
void OAICsvClassifier::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICsvClassifier::is_name_Set() const{
    return m_name_isSet;
}

bool OAICsvClassifier::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAICsvClassifier::getCreationTime() const {
    return m_creation_time;
}
void OAICsvClassifier::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICsvClassifier::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICsvClassifier::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICsvClassifier::getLastUpdated() const {
    return m_last_updated;
}
void OAICsvClassifier::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAICsvClassifier::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAICsvClassifier::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAICsvClassifier::getVersion() const {
    return m_version;
}
void OAICsvClassifier::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICsvClassifier::is_version_Set() const{
    return m_version_isSet;
}

bool OAICsvClassifier::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICsvClassifier::getDelimiter() const {
    return m_delimiter;
}
void OAICsvClassifier::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAICsvClassifier::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAICsvClassifier::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

QString OAICsvClassifier::getQuoteSymbol() const {
    return m_quote_symbol;
}
void OAICsvClassifier::setQuoteSymbol(const QString &quote_symbol) {
    m_quote_symbol = quote_symbol;
    m_quote_symbol_isSet = true;
}

bool OAICsvClassifier::is_quote_symbol_Set() const{
    return m_quote_symbol_isSet;
}

bool OAICsvClassifier::is_quote_symbol_Valid() const{
    return m_quote_symbol_isValid;
}

OAICsvHeaderOption OAICsvClassifier::getContainsHeader() const {
    return m_contains_header;
}
void OAICsvClassifier::setContainsHeader(const OAICsvHeaderOption &contains_header) {
    m_contains_header = contains_header;
    m_contains_header_isSet = true;
}

bool OAICsvClassifier::is_contains_header_Set() const{
    return m_contains_header_isSet;
}

bool OAICsvClassifier::is_contains_header_Valid() const{
    return m_contains_header_isValid;
}

QList OAICsvClassifier::getHeader() const {
    return m_header;
}
void OAICsvClassifier::setHeader(const QList &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAICsvClassifier::is_header_Set() const{
    return m_header_isSet;
}

bool OAICsvClassifier::is_header_Valid() const{
    return m_header_isValid;
}

bool OAICsvClassifier::getDisableValueTrimming() const {
    return m_disable_value_trimming;
}
void OAICsvClassifier::setDisableValueTrimming(const bool &disable_value_trimming) {
    m_disable_value_trimming = disable_value_trimming;
    m_disable_value_trimming_isSet = true;
}

bool OAICsvClassifier::is_disable_value_trimming_Set() const{
    return m_disable_value_trimming_isSet;
}

bool OAICsvClassifier::is_disable_value_trimming_Valid() const{
    return m_disable_value_trimming_isValid;
}

bool OAICsvClassifier::getAllowSingleColumn() const {
    return m_allow_single_column;
}
void OAICsvClassifier::setAllowSingleColumn(const bool &allow_single_column) {
    m_allow_single_column = allow_single_column;
    m_allow_single_column_isSet = true;
}

bool OAICsvClassifier::is_allow_single_column_Set() const{
    return m_allow_single_column_isSet;
}

bool OAICsvClassifier::is_allow_single_column_Valid() const{
    return m_allow_single_column_isValid;
}

bool OAICsvClassifier::getCustomDatatypeConfigured() const {
    return m_custom_datatype_configured;
}
void OAICsvClassifier::setCustomDatatypeConfigured(const bool &custom_datatype_configured) {
    m_custom_datatype_configured = custom_datatype_configured;
    m_custom_datatype_configured_isSet = true;
}

bool OAICsvClassifier::is_custom_datatype_configured_Set() const{
    return m_custom_datatype_configured_isSet;
}

bool OAICsvClassifier::is_custom_datatype_configured_Valid() const{
    return m_custom_datatype_configured_isValid;
}

QList OAICsvClassifier::getCustomDatatypes() const {
    return m_custom_datatypes;
}
void OAICsvClassifier::setCustomDatatypes(const QList &custom_datatypes) {
    m_custom_datatypes = custom_datatypes;
    m_custom_datatypes_isSet = true;
}

bool OAICsvClassifier::is_custom_datatypes_Set() const{
    return m_custom_datatypes_isSet;
}

bool OAICsvClassifier::is_custom_datatypes_Valid() const{
    return m_custom_datatypes_isValid;
}

bool OAICsvClassifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_value_trimming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_single_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_datatype_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_datatypes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsvClassifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
