/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSchemaInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSchemaInput::OAICreateSchemaInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSchemaInput::OAICreateSchemaInput() {
    this->initializeModel();
}

OAICreateSchemaInput::~OAICreateSchemaInput() {}

void OAICreateSchemaInput::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_schema_definition_isSet = false;
    m_schema_definition_isValid = false;
}

void OAICreateSchemaInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSchemaInput::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("RegistryId")]);
    m_registry_id_isSet = !json[QString("RegistryId")].isNull() && m_registry_id_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("SchemaName")]);
    m_schema_name_isSet = !json[QString("SchemaName")].isNull() && m_schema_name_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("DataFormat")]);
    m_data_format_isSet = !json[QString("DataFormat")].isNull() && m_data_format_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("Compatibility")]);
    m_compatibility_isSet = !json[QString("Compatibility")].isNull() && m_compatibility_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_schema_definition_isValid = ::OpenAPI::fromJsonValue(m_schema_definition, json[QString("SchemaDefinition")]);
    m_schema_definition_isSet = !json[QString("SchemaDefinition")].isNull() && m_schema_definition_isValid;
}

QString OAICreateSchemaInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSchemaInput::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id.isSet()) {
        obj.insert(QString("RegistryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("SchemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_data_format.isSet()) {
        obj.insert(QString("DataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_compatibility.isSet()) {
        obj.insert(QString("Compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_schema_definition_isSet) {
        obj.insert(QString("SchemaDefinition"), ::OpenAPI::toJsonValue(m_schema_definition));
    }
    return obj;
}

OAICreateSchemaInput_RegistryId OAICreateSchemaInput::getRegistryId() const {
    return m_registry_id;
}
void OAICreateSchemaInput::setRegistryId(const OAICreateSchemaInput_RegistryId &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAICreateSchemaInput::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAICreateSchemaInput::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAICreateSchemaInput::getSchemaName() const {
    return m_schema_name;
}
void OAICreateSchemaInput::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAICreateSchemaInput::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAICreateSchemaInput::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

OAIDataFormat OAICreateSchemaInput::getDataFormat() const {
    return m_data_format;
}
void OAICreateSchemaInput::setDataFormat(const OAIDataFormat &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAICreateSchemaInput::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAICreateSchemaInput::is_data_format_Valid() const{
    return m_data_format_isValid;
}

OAICompatibility OAICreateSchemaInput::getCompatibility() const {
    return m_compatibility;
}
void OAICreateSchemaInput::setCompatibility(const OAICompatibility &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAICreateSchemaInput::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAICreateSchemaInput::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

QString OAICreateSchemaInput::getDescription() const {
    return m_description;
}
void OAICreateSchemaInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSchemaInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSchemaInput::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAICreateSchemaInput::getTags() const {
    return m_tags;
}
void OAICreateSchemaInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSchemaInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSchemaInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateSchemaInput::getSchemaDefinition() const {
    return m_schema_definition;
}
void OAICreateSchemaInput::setSchemaDefinition(const QString &schema_definition) {
    m_schema_definition = schema_definition;
    m_schema_definition_isSet = true;
}

bool OAICreateSchemaInput::is_schema_definition_Set() const{
    return m_schema_definition_isSet;
}

bool OAICreateSchemaInput::is_schema_definition_Valid() const{
    return m_schema_definition_isValid;
}

bool OAICreateSchemaInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_definition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSchemaInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_name_isValid && m_data_format_isValid && true;
}

} // namespace OpenAPI
