/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeltaTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeltaTarget::OAIDeltaTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeltaTarget::OAIDeltaTarget() {
    this->initializeModel();
}

OAIDeltaTarget::~OAIDeltaTarget() {}

void OAIDeltaTarget::initializeModel() {

    m_delta_tables_isSet = false;
    m_delta_tables_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_write_manifest_isSet = false;
    m_write_manifest_isValid = false;

    m_create_native_delta_table_isSet = false;
    m_create_native_delta_table_isValid = false;
}

void OAIDeltaTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeltaTarget::fromJsonObject(QJsonObject json) {

    m_delta_tables_isValid = ::OpenAPI::fromJsonValue(m_delta_tables, json[QString("DeltaTables")]);
    m_delta_tables_isSet = !json[QString("DeltaTables")].isNull() && m_delta_tables_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_write_manifest_isValid = ::OpenAPI::fromJsonValue(m_write_manifest, json[QString("WriteManifest")]);
    m_write_manifest_isSet = !json[QString("WriteManifest")].isNull() && m_write_manifest_isValid;

    m_create_native_delta_table_isValid = ::OpenAPI::fromJsonValue(m_create_native_delta_table, json[QString("CreateNativeDeltaTable")]);
    m_create_native_delta_table_isSet = !json[QString("CreateNativeDeltaTable")].isNull() && m_create_native_delta_table_isValid;
}

QString OAIDeltaTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeltaTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_delta_tables.isSet()) {
        obj.insert(QString("DeltaTables"), ::OpenAPI::toJsonValue(m_delta_tables));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_write_manifest_isSet) {
        obj.insert(QString("WriteManifest"), ::OpenAPI::toJsonValue(m_write_manifest));
    }
    if (m_create_native_delta_table_isSet) {
        obj.insert(QString("CreateNativeDeltaTable"), ::OpenAPI::toJsonValue(m_create_native_delta_table));
    }
    return obj;
}

QList OAIDeltaTarget::getDeltaTables() const {
    return m_delta_tables;
}
void OAIDeltaTarget::setDeltaTables(const QList &delta_tables) {
    m_delta_tables = delta_tables;
    m_delta_tables_isSet = true;
}

bool OAIDeltaTarget::is_delta_tables_Set() const{
    return m_delta_tables_isSet;
}

bool OAIDeltaTarget::is_delta_tables_Valid() const{
    return m_delta_tables_isValid;
}

QString OAIDeltaTarget::getConnectionName() const {
    return m_connection_name;
}
void OAIDeltaTarget::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIDeltaTarget::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIDeltaTarget::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

bool OAIDeltaTarget::getWriteManifest() const {
    return m_write_manifest;
}
void OAIDeltaTarget::setWriteManifest(const bool &write_manifest) {
    m_write_manifest = write_manifest;
    m_write_manifest_isSet = true;
}

bool OAIDeltaTarget::is_write_manifest_Set() const{
    return m_write_manifest_isSet;
}

bool OAIDeltaTarget::is_write_manifest_Valid() const{
    return m_write_manifest_isValid;
}

bool OAIDeltaTarget::getCreateNativeDeltaTable() const {
    return m_create_native_delta_table;
}
void OAIDeltaTarget::setCreateNativeDeltaTable(const bool &create_native_delta_table) {
    m_create_native_delta_table = create_native_delta_table;
    m_create_native_delta_table_isSet = true;
}

bool OAIDeltaTarget::is_create_native_delta_table_Set() const{
    return m_create_native_delta_table_isSet;
}

bool OAIDeltaTarget::is_create_native_delta_table_Valid() const{
    return m_create_native_delta_table_isValid;
}

bool OAIDeltaTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delta_tables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_native_delta_table_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeltaTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
