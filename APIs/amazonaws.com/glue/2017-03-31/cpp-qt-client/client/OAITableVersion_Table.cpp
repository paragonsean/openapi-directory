/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableVersion_Table.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableVersion_Table::OAITableVersion_Table(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableVersion_Table::OAITableVersion_Table() {
    this->initializeModel();
}

OAITableVersion_Table::~OAITableVersion_Table() {}

void OAITableVersion_Table::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_last_access_time_isSet = false;
    m_last_access_time_isValid = false;

    m_last_analyzed_time_isSet = false;
    m_last_analyzed_time_isValid = false;

    m_retention_isSet = false;
    m_retention_isValid = false;

    m_storage_descriptor_isSet = false;
    m_storage_descriptor_isValid = false;

    m_partition_keys_isSet = false;
    m_partition_keys_isValid = false;

    m_view_original_text_isSet = false;
    m_view_original_text_isValid = false;

    m_view_expanded_text_isSet = false;
    m_view_expanded_text_isValid = false;

    m_table_type_isSet = false;
    m_table_type_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_is_registered_with_lake_formation_isSet = false;
    m_is_registered_with_lake_formation_isValid = false;

    m_target_table_isSet = false;
    m_target_table_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_federated_table_isSet = false;
    m_federated_table_isValid = false;
}

void OAITableVersion_Table::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableVersion_Table::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("UpdateTime")]);
    m_update_time_isSet = !json[QString("UpdateTime")].isNull() && m_update_time_isValid;

    m_last_access_time_isValid = ::OpenAPI::fromJsonValue(m_last_access_time, json[QString("LastAccessTime")]);
    m_last_access_time_isSet = !json[QString("LastAccessTime")].isNull() && m_last_access_time_isValid;

    m_last_analyzed_time_isValid = ::OpenAPI::fromJsonValue(m_last_analyzed_time, json[QString("LastAnalyzedTime")]);
    m_last_analyzed_time_isSet = !json[QString("LastAnalyzedTime")].isNull() && m_last_analyzed_time_isValid;

    m_retention_isValid = ::OpenAPI::fromJsonValue(m_retention, json[QString("Retention")]);
    m_retention_isSet = !json[QString("Retention")].isNull() && m_retention_isValid;

    m_storage_descriptor_isValid = ::OpenAPI::fromJsonValue(m_storage_descriptor, json[QString("StorageDescriptor")]);
    m_storage_descriptor_isSet = !json[QString("StorageDescriptor")].isNull() && m_storage_descriptor_isValid;

    m_partition_keys_isValid = ::OpenAPI::fromJsonValue(m_partition_keys, json[QString("PartitionKeys")]);
    m_partition_keys_isSet = !json[QString("PartitionKeys")].isNull() && m_partition_keys_isValid;

    m_view_original_text_isValid = ::OpenAPI::fromJsonValue(m_view_original_text, json[QString("ViewOriginalText")]);
    m_view_original_text_isSet = !json[QString("ViewOriginalText")].isNull() && m_view_original_text_isValid;

    m_view_expanded_text_isValid = ::OpenAPI::fromJsonValue(m_view_expanded_text, json[QString("ViewExpandedText")]);
    m_view_expanded_text_isSet = !json[QString("ViewExpandedText")].isNull() && m_view_expanded_text_isValid;

    m_table_type_isValid = ::OpenAPI::fromJsonValue(m_table_type, json[QString("TableType")]);
    m_table_type_isSet = !json[QString("TableType")].isNull() && m_table_type_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_is_registered_with_lake_formation_isValid = ::OpenAPI::fromJsonValue(m_is_registered_with_lake_formation, json[QString("IsRegisteredWithLakeFormation")]);
    m_is_registered_with_lake_formation_isSet = !json[QString("IsRegisteredWithLakeFormation")].isNull() && m_is_registered_with_lake_formation_isValid;

    m_target_table_isValid = ::OpenAPI::fromJsonValue(m_target_table, json[QString("TargetTable")]);
    m_target_table_isSet = !json[QString("TargetTable")].isNull() && m_target_table_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;

    m_federated_table_isValid = ::OpenAPI::fromJsonValue(m_federated_table, json[QString("FederatedTable")]);
    m_federated_table_isSet = !json[QString("FederatedTable")].isNull() && m_federated_table_isValid;
}

QString OAITableVersion_Table::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableVersion_Table::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("UpdateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_last_access_time_isSet) {
        obj.insert(QString("LastAccessTime"), ::OpenAPI::toJsonValue(m_last_access_time));
    }
    if (m_last_analyzed_time_isSet) {
        obj.insert(QString("LastAnalyzedTime"), ::OpenAPI::toJsonValue(m_last_analyzed_time));
    }
    if (m_retention_isSet) {
        obj.insert(QString("Retention"), ::OpenAPI::toJsonValue(m_retention));
    }
    if (m_storage_descriptor.isSet()) {
        obj.insert(QString("StorageDescriptor"), ::OpenAPI::toJsonValue(m_storage_descriptor));
    }
    if (m_partition_keys.isSet()) {
        obj.insert(QString("PartitionKeys"), ::OpenAPI::toJsonValue(m_partition_keys));
    }
    if (m_view_original_text_isSet) {
        obj.insert(QString("ViewOriginalText"), ::OpenAPI::toJsonValue(m_view_original_text));
    }
    if (m_view_expanded_text_isSet) {
        obj.insert(QString("ViewExpandedText"), ::OpenAPI::toJsonValue(m_view_expanded_text));
    }
    if (m_table_type_isSet) {
        obj.insert(QString("TableType"), ::OpenAPI::toJsonValue(m_table_type));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_is_registered_with_lake_formation_isSet) {
        obj.insert(QString("IsRegisteredWithLakeFormation"), ::OpenAPI::toJsonValue(m_is_registered_with_lake_formation));
    }
    if (m_target_table.isSet()) {
        obj.insert(QString("TargetTable"), ::OpenAPI::toJsonValue(m_target_table));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_federated_table.isSet()) {
        obj.insert(QString("FederatedTable"), ::OpenAPI::toJsonValue(m_federated_table));
    }
    return obj;
}

QString OAITableVersion_Table::getName() const {
    return m_name;
}
void OAITableVersion_Table::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITableVersion_Table::is_name_Set() const{
    return m_name_isSet;
}

bool OAITableVersion_Table::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITableVersion_Table::getDatabaseName() const {
    return m_database_name;
}
void OAITableVersion_Table::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAITableVersion_Table::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAITableVersion_Table::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAITableVersion_Table::getDescription() const {
    return m_description;
}
void OAITableVersion_Table::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITableVersion_Table::is_description_Set() const{
    return m_description_isSet;
}

bool OAITableVersion_Table::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITableVersion_Table::getOwner() const {
    return m_owner;
}
void OAITableVersion_Table::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAITableVersion_Table::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAITableVersion_Table::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAITableVersion_Table::getCreateTime() const {
    return m_create_time;
}
void OAITableVersion_Table::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAITableVersion_Table::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAITableVersion_Table::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAITableVersion_Table::getUpdateTime() const {
    return m_update_time;
}
void OAITableVersion_Table::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAITableVersion_Table::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAITableVersion_Table::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QDateTime OAITableVersion_Table::getLastAccessTime() const {
    return m_last_access_time;
}
void OAITableVersion_Table::setLastAccessTime(const QDateTime &last_access_time) {
    m_last_access_time = last_access_time;
    m_last_access_time_isSet = true;
}

bool OAITableVersion_Table::is_last_access_time_Set() const{
    return m_last_access_time_isSet;
}

bool OAITableVersion_Table::is_last_access_time_Valid() const{
    return m_last_access_time_isValid;
}

QDateTime OAITableVersion_Table::getLastAnalyzedTime() const {
    return m_last_analyzed_time;
}
void OAITableVersion_Table::setLastAnalyzedTime(const QDateTime &last_analyzed_time) {
    m_last_analyzed_time = last_analyzed_time;
    m_last_analyzed_time_isSet = true;
}

bool OAITableVersion_Table::is_last_analyzed_time_Set() const{
    return m_last_analyzed_time_isSet;
}

bool OAITableVersion_Table::is_last_analyzed_time_Valid() const{
    return m_last_analyzed_time_isValid;
}

qint32 OAITableVersion_Table::getRetention() const {
    return m_retention;
}
void OAITableVersion_Table::setRetention(const qint32 &retention) {
    m_retention = retention;
    m_retention_isSet = true;
}

bool OAITableVersion_Table::is_retention_Set() const{
    return m_retention_isSet;
}

bool OAITableVersion_Table::is_retention_Valid() const{
    return m_retention_isValid;
}

OAITableInput_StorageDescriptor OAITableVersion_Table::getStorageDescriptor() const {
    return m_storage_descriptor;
}
void OAITableVersion_Table::setStorageDescriptor(const OAITableInput_StorageDescriptor &storage_descriptor) {
    m_storage_descriptor = storage_descriptor;
    m_storage_descriptor_isSet = true;
}

bool OAITableVersion_Table::is_storage_descriptor_Set() const{
    return m_storage_descriptor_isSet;
}

bool OAITableVersion_Table::is_storage_descriptor_Valid() const{
    return m_storage_descriptor_isValid;
}

QList OAITableVersion_Table::getPartitionKeys() const {
    return m_partition_keys;
}
void OAITableVersion_Table::setPartitionKeys(const QList &partition_keys) {
    m_partition_keys = partition_keys;
    m_partition_keys_isSet = true;
}

bool OAITableVersion_Table::is_partition_keys_Set() const{
    return m_partition_keys_isSet;
}

bool OAITableVersion_Table::is_partition_keys_Valid() const{
    return m_partition_keys_isValid;
}

QString OAITableVersion_Table::getViewOriginalText() const {
    return m_view_original_text;
}
void OAITableVersion_Table::setViewOriginalText(const QString &view_original_text) {
    m_view_original_text = view_original_text;
    m_view_original_text_isSet = true;
}

bool OAITableVersion_Table::is_view_original_text_Set() const{
    return m_view_original_text_isSet;
}

bool OAITableVersion_Table::is_view_original_text_Valid() const{
    return m_view_original_text_isValid;
}

QString OAITableVersion_Table::getViewExpandedText() const {
    return m_view_expanded_text;
}
void OAITableVersion_Table::setViewExpandedText(const QString &view_expanded_text) {
    m_view_expanded_text = view_expanded_text;
    m_view_expanded_text_isSet = true;
}

bool OAITableVersion_Table::is_view_expanded_text_Set() const{
    return m_view_expanded_text_isSet;
}

bool OAITableVersion_Table::is_view_expanded_text_Valid() const{
    return m_view_expanded_text_isValid;
}

QString OAITableVersion_Table::getTableType() const {
    return m_table_type;
}
void OAITableVersion_Table::setTableType(const QString &table_type) {
    m_table_type = table_type;
    m_table_type_isSet = true;
}

bool OAITableVersion_Table::is_table_type_Set() const{
    return m_table_type_isSet;
}

bool OAITableVersion_Table::is_table_type_Valid() const{
    return m_table_type_isValid;
}

QMap OAITableVersion_Table::getParameters() const {
    return m_parameters;
}
void OAITableVersion_Table::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITableVersion_Table::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITableVersion_Table::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAITableVersion_Table::getCreatedBy() const {
    return m_created_by;
}
void OAITableVersion_Table::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITableVersion_Table::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITableVersion_Table::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAITableVersion_Table::getIsRegisteredWithLakeFormation() const {
    return m_is_registered_with_lake_formation;
}
void OAITableVersion_Table::setIsRegisteredWithLakeFormation(const bool &is_registered_with_lake_formation) {
    m_is_registered_with_lake_formation = is_registered_with_lake_formation;
    m_is_registered_with_lake_formation_isSet = true;
}

bool OAITableVersion_Table::is_is_registered_with_lake_formation_Set() const{
    return m_is_registered_with_lake_formation_isSet;
}

bool OAITableVersion_Table::is_is_registered_with_lake_formation_Valid() const{
    return m_is_registered_with_lake_formation_isValid;
}

OAITableInput_TargetTable OAITableVersion_Table::getTargetTable() const {
    return m_target_table;
}
void OAITableVersion_Table::setTargetTable(const OAITableInput_TargetTable &target_table) {
    m_target_table = target_table;
    m_target_table_isSet = true;
}

bool OAITableVersion_Table::is_target_table_Set() const{
    return m_target_table_isSet;
}

bool OAITableVersion_Table::is_target_table_Valid() const{
    return m_target_table_isValid;
}

QString OAITableVersion_Table::getCatalogId() const {
    return m_catalog_id;
}
void OAITableVersion_Table::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAITableVersion_Table::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAITableVersion_Table::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAITableVersion_Table::getVersionId() const {
    return m_version_id;
}
void OAITableVersion_Table::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAITableVersion_Table::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAITableVersion_Table::is_version_id_Valid() const{
    return m_version_id_isValid;
}

OAITable_FederatedTable OAITableVersion_Table::getFederatedTable() const {
    return m_federated_table;
}
void OAITableVersion_Table::setFederatedTable(const OAITable_FederatedTable &federated_table) {
    m_federated_table = federated_table;
    m_federated_table_isSet = true;
}

bool OAITableVersion_Table::is_federated_table_Set() const{
    return m_federated_table_isSet;
}

bool OAITableVersion_Table::is_federated_table_Valid() const{
    return m_federated_table_isValid;
}

bool OAITableVersion_Table::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_analyzed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_original_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_expanded_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_registered_with_lake_formation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableVersion_Table::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
