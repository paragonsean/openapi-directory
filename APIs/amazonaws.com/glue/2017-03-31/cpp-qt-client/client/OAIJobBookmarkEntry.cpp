/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobBookmarkEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobBookmarkEntry::OAIJobBookmarkEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobBookmarkEntry::OAIJobBookmarkEntry() {
    this->initializeModel();
}

OAIJobBookmarkEntry::~OAIJobBookmarkEntry() {}

void OAIJobBookmarkEntry::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_run_isSet = false;
    m_run_isValid = false;

    m_attempt_isSet = false;
    m_attempt_isValid = false;

    m_previous_run_id_isSet = false;
    m_previous_run_id_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_job_bookmark_isSet = false;
    m_job_bookmark_isValid = false;
}

void OAIJobBookmarkEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobBookmarkEntry::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_run_isValid = ::OpenAPI::fromJsonValue(m_run, json[QString("Run")]);
    m_run_isSet = !json[QString("Run")].isNull() && m_run_isValid;

    m_attempt_isValid = ::OpenAPI::fromJsonValue(m_attempt, json[QString("Attempt")]);
    m_attempt_isSet = !json[QString("Attempt")].isNull() && m_attempt_isValid;

    m_previous_run_id_isValid = ::OpenAPI::fromJsonValue(m_previous_run_id, json[QString("PreviousRunId")]);
    m_previous_run_id_isSet = !json[QString("PreviousRunId")].isNull() && m_previous_run_id_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("RunId")]);
    m_run_id_isSet = !json[QString("RunId")].isNull() && m_run_id_isValid;

    m_job_bookmark_isValid = ::OpenAPI::fromJsonValue(m_job_bookmark, json[QString("JobBookmark")]);
    m_job_bookmark_isSet = !json[QString("JobBookmark")].isNull() && m_job_bookmark_isValid;
}

QString OAIJobBookmarkEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobBookmarkEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_run_isSet) {
        obj.insert(QString("Run"), ::OpenAPI::toJsonValue(m_run));
    }
    if (m_attempt_isSet) {
        obj.insert(QString("Attempt"), ::OpenAPI::toJsonValue(m_attempt));
    }
    if (m_previous_run_id_isSet) {
        obj.insert(QString("PreviousRunId"), ::OpenAPI::toJsonValue(m_previous_run_id));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("RunId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_job_bookmark_isSet) {
        obj.insert(QString("JobBookmark"), ::OpenAPI::toJsonValue(m_job_bookmark));
    }
    return obj;
}

QString OAIJobBookmarkEntry::getJobName() const {
    return m_job_name;
}
void OAIJobBookmarkEntry::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIJobBookmarkEntry::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIJobBookmarkEntry::is_job_name_Valid() const{
    return m_job_name_isValid;
}

qint32 OAIJobBookmarkEntry::getVersion() const {
    return m_version;
}
void OAIJobBookmarkEntry::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIJobBookmarkEntry::is_version_Set() const{
    return m_version_isSet;
}

bool OAIJobBookmarkEntry::is_version_Valid() const{
    return m_version_isValid;
}

qint32 OAIJobBookmarkEntry::getRun() const {
    return m_run;
}
void OAIJobBookmarkEntry::setRun(const qint32 &run) {
    m_run = run;
    m_run_isSet = true;
}

bool OAIJobBookmarkEntry::is_run_Set() const{
    return m_run_isSet;
}

bool OAIJobBookmarkEntry::is_run_Valid() const{
    return m_run_isValid;
}

qint32 OAIJobBookmarkEntry::getAttempt() const {
    return m_attempt;
}
void OAIJobBookmarkEntry::setAttempt(const qint32 &attempt) {
    m_attempt = attempt;
    m_attempt_isSet = true;
}

bool OAIJobBookmarkEntry::is_attempt_Set() const{
    return m_attempt_isSet;
}

bool OAIJobBookmarkEntry::is_attempt_Valid() const{
    return m_attempt_isValid;
}

QString OAIJobBookmarkEntry::getPreviousRunId() const {
    return m_previous_run_id;
}
void OAIJobBookmarkEntry::setPreviousRunId(const QString &previous_run_id) {
    m_previous_run_id = previous_run_id;
    m_previous_run_id_isSet = true;
}

bool OAIJobBookmarkEntry::is_previous_run_id_Set() const{
    return m_previous_run_id_isSet;
}

bool OAIJobBookmarkEntry::is_previous_run_id_Valid() const{
    return m_previous_run_id_isValid;
}

QString OAIJobBookmarkEntry::getRunId() const {
    return m_run_id;
}
void OAIJobBookmarkEntry::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIJobBookmarkEntry::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIJobBookmarkEntry::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIJobBookmarkEntry::getJobBookmark() const {
    return m_job_bookmark;
}
void OAIJobBookmarkEntry::setJobBookmark(const QString &job_bookmark) {
    m_job_bookmark = job_bookmark;
    m_job_bookmark_isSet = true;
}

bool OAIJobBookmarkEntry::is_job_bookmark_Set() const{
    return m_job_bookmark_isSet;
}

bool OAIJobBookmarkEntry::is_job_bookmark_Valid() const{
    return m_job_bookmark_isValid;
}

bool OAIJobBookmarkEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_bookmark_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobBookmarkEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
