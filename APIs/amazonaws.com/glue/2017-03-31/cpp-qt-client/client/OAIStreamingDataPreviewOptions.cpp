/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingDataPreviewOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingDataPreviewOptions::OAIStreamingDataPreviewOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingDataPreviewOptions::OAIStreamingDataPreviewOptions() {
    this->initializeModel();
}

OAIStreamingDataPreviewOptions::~OAIStreamingDataPreviewOptions() {}

void OAIStreamingDataPreviewOptions::initializeModel() {

    m_polling_time_isSet = false;
    m_polling_time_isValid = false;

    m_record_polling_limit_isSet = false;
    m_record_polling_limit_isValid = false;
}

void OAIStreamingDataPreviewOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingDataPreviewOptions::fromJsonObject(QJsonObject json) {

    m_polling_time_isValid = ::OpenAPI::fromJsonValue(m_polling_time, json[QString("PollingTime")]);
    m_polling_time_isSet = !json[QString("PollingTime")].isNull() && m_polling_time_isValid;

    m_record_polling_limit_isValid = ::OpenAPI::fromJsonValue(m_record_polling_limit, json[QString("RecordPollingLimit")]);
    m_record_polling_limit_isSet = !json[QString("RecordPollingLimit")].isNull() && m_record_polling_limit_isValid;
}

QString OAIStreamingDataPreviewOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingDataPreviewOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_polling_time_isSet) {
        obj.insert(QString("PollingTime"), ::OpenAPI::toJsonValue(m_polling_time));
    }
    if (m_record_polling_limit_isSet) {
        obj.insert(QString("RecordPollingLimit"), ::OpenAPI::toJsonValue(m_record_polling_limit));
    }
    return obj;
}

qint32 OAIStreamingDataPreviewOptions::getPollingTime() const {
    return m_polling_time;
}
void OAIStreamingDataPreviewOptions::setPollingTime(const qint32 &polling_time) {
    m_polling_time = polling_time;
    m_polling_time_isSet = true;
}

bool OAIStreamingDataPreviewOptions::is_polling_time_Set() const{
    return m_polling_time_isSet;
}

bool OAIStreamingDataPreviewOptions::is_polling_time_Valid() const{
    return m_polling_time_isValid;
}

qint32 OAIStreamingDataPreviewOptions::getRecordPollingLimit() const {
    return m_record_polling_limit;
}
void OAIStreamingDataPreviewOptions::setRecordPollingLimit(const qint32 &record_polling_limit) {
    m_record_polling_limit = record_polling_limit;
    m_record_polling_limit_isSet = true;
}

bool OAIStreamingDataPreviewOptions::is_record_polling_limit_Set() const{
    return m_record_polling_limit_isSet;
}

bool OAIStreamingDataPreviewOptions::is_record_polling_limit_Valid() const{
    return m_record_polling_limit_isValid;
}

bool OAIStreamingDataPreviewOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_polling_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_polling_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingDataPreviewOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
