/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicTransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicTransform::OAIDynamicTransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicTransform::OAIDynamicTransform() {
    this->initializeModel();
}

OAIDynamicTransform::~OAIDynamicTransform() {}

void OAIDynamicTransform::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_transform_name_isSet = false;
    m_transform_name_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_output_schemas_isSet = false;
    m_output_schemas_isValid = false;
}

void OAIDynamicTransform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamicTransform::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_transform_name_isValid = ::OpenAPI::fromJsonValue(m_transform_name, json[QString("TransformName")]);
    m_transform_name_isSet = !json[QString("TransformName")].isNull() && m_transform_name_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("FunctionName")]);
    m_function_name_isSet = !json[QString("FunctionName")].isNull() && m_function_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_output_schemas_isValid = ::OpenAPI::fromJsonValue(m_output_schemas, json[QString("OutputSchemas")]);
    m_output_schemas_isSet = !json[QString("OutputSchemas")].isNull() && m_output_schemas_isValid;
}

QString OAIDynamicTransform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamicTransform::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_transform_name_isSet) {
        obj.insert(QString("TransformName"), ::OpenAPI::toJsonValue(m_transform_name));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_function_name_isSet) {
        obj.insert(QString("FunctionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_output_schemas.isSet()) {
        obj.insert(QString("OutputSchemas"), ::OpenAPI::toJsonValue(m_output_schemas));
    }
    return obj;
}

QString OAIDynamicTransform::getName() const {
    return m_name;
}
void OAIDynamicTransform::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDynamicTransform::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDynamicTransform::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDynamicTransform::getTransformName() const {
    return m_transform_name;
}
void OAIDynamicTransform::setTransformName(const QString &transform_name) {
    m_transform_name = transform_name;
    m_transform_name_isSet = true;
}

bool OAIDynamicTransform::is_transform_name_Set() const{
    return m_transform_name_isSet;
}

bool OAIDynamicTransform::is_transform_name_Valid() const{
    return m_transform_name_isValid;
}

QList OAIDynamicTransform::getInputs() const {
    return m_inputs;
}
void OAIDynamicTransform::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIDynamicTransform::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIDynamicTransform::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QList OAIDynamicTransform::getParameters() const {
    return m_parameters;
}
void OAIDynamicTransform::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDynamicTransform::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDynamicTransform::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIDynamicTransform::getFunctionName() const {
    return m_function_name;
}
void OAIDynamicTransform::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIDynamicTransform::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIDynamicTransform::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIDynamicTransform::getPath() const {
    return m_path;
}
void OAIDynamicTransform::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIDynamicTransform::is_path_Set() const{
    return m_path_isSet;
}

bool OAIDynamicTransform::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIDynamicTransform::getVersion() const {
    return m_version;
}
void OAIDynamicTransform::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDynamicTransform::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDynamicTransform::is_version_Valid() const{
    return m_version_isValid;
}

QList OAIDynamicTransform::getOutputSchemas() const {
    return m_output_schemas;
}
void OAIDynamicTransform::setOutputSchemas(const QList &output_schemas) {
    m_output_schemas = output_schemas;
    m_output_schemas_isSet = true;
}

bool OAIDynamicTransform::is_output_schemas_Set() const{
    return m_output_schemas_isSet;
}

bool OAIDynamicTransform::is_output_schemas_Valid() const{
    return m_output_schemas_isValid;
}

bool OAIDynamicTransform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_schemas.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamicTransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_transform_name_isValid && m_inputs_isValid && m_function_name_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
