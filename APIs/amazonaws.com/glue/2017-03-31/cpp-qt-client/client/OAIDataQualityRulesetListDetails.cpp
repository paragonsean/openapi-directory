/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataQualityRulesetListDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataQualityRulesetListDetails::OAIDataQualityRulesetListDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataQualityRulesetListDetails::OAIDataQualityRulesetListDetails() {
    this->initializeModel();
}

OAIDataQualityRulesetListDetails::~OAIDataQualityRulesetListDetails() {}

void OAIDataQualityRulesetListDetails::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_target_table_isSet = false;
    m_target_table_isValid = false;

    m_recommendation_run_id_isSet = false;
    m_recommendation_run_id_isValid = false;

    m_rule_count_isSet = false;
    m_rule_count_isValid = false;
}

void OAIDataQualityRulesetListDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataQualityRulesetListDetails::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("CreatedOn")]);
    m_created_on_isSet = !json[QString("CreatedOn")].isNull() && m_created_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_target_table_isValid = ::OpenAPI::fromJsonValue(m_target_table, json[QString("TargetTable")]);
    m_target_table_isSet = !json[QString("TargetTable")].isNull() && m_target_table_isValid;

    m_recommendation_run_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_run_id, json[QString("RecommendationRunId")]);
    m_recommendation_run_id_isSet = !json[QString("RecommendationRunId")].isNull() && m_recommendation_run_id_isValid;

    m_rule_count_isValid = ::OpenAPI::fromJsonValue(m_rule_count, json[QString("RuleCount")]);
    m_rule_count_isSet = !json[QString("RuleCount")].isNull() && m_rule_count_isValid;
}

QString OAIDataQualityRulesetListDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataQualityRulesetListDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("CreatedOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_target_table.isSet()) {
        obj.insert(QString("TargetTable"), ::OpenAPI::toJsonValue(m_target_table));
    }
    if (m_recommendation_run_id_isSet) {
        obj.insert(QString("RecommendationRunId"), ::OpenAPI::toJsonValue(m_recommendation_run_id));
    }
    if (m_rule_count_isSet) {
        obj.insert(QString("RuleCount"), ::OpenAPI::toJsonValue(m_rule_count));
    }
    return obj;
}

QString OAIDataQualityRulesetListDetails::getName() const {
    return m_name;
}
void OAIDataQualityRulesetListDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataQualityRulesetListDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataQualityRulesetListDetails::getDescription() const {
    return m_description;
}
void OAIDataQualityRulesetListDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataQualityRulesetListDetails::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIDataQualityRulesetListDetails::getCreatedOn() const {
    return m_created_on;
}
void OAIDataQualityRulesetListDetails::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIDataQualityRulesetListDetails::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QDateTime OAIDataQualityRulesetListDetails::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIDataQualityRulesetListDetails::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIDataQualityRulesetListDetails::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

OAIDataQualityRulesetListDetails_TargetTable OAIDataQualityRulesetListDetails::getTargetTable() const {
    return m_target_table;
}
void OAIDataQualityRulesetListDetails::setTargetTable(const OAIDataQualityRulesetListDetails_TargetTable &target_table) {
    m_target_table = target_table;
    m_target_table_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_target_table_Set() const{
    return m_target_table_isSet;
}

bool OAIDataQualityRulesetListDetails::is_target_table_Valid() const{
    return m_target_table_isValid;
}

QString OAIDataQualityRulesetListDetails::getRecommendationRunId() const {
    return m_recommendation_run_id;
}
void OAIDataQualityRulesetListDetails::setRecommendationRunId(const QString &recommendation_run_id) {
    m_recommendation_run_id = recommendation_run_id;
    m_recommendation_run_id_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_recommendation_run_id_Set() const{
    return m_recommendation_run_id_isSet;
}

bool OAIDataQualityRulesetListDetails::is_recommendation_run_id_Valid() const{
    return m_recommendation_run_id_isValid;
}

qint32 OAIDataQualityRulesetListDetails::getRuleCount() const {
    return m_rule_count;
}
void OAIDataQualityRulesetListDetails::setRuleCount(const qint32 &rule_count) {
    m_rule_count = rule_count;
    m_rule_count_isSet = true;
}

bool OAIDataQualityRulesetListDetails::is_rule_count_Set() const{
    return m_rule_count_isSet;
}

bool OAIDataQualityRulesetListDetails::is_rule_count_Valid() const{
    return m_rule_count_isValid;
}

bool OAIDataQualityRulesetListDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataQualityRulesetListDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
