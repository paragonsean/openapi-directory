/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpigot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpigot::OAISpigot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpigot::OAISpigot() {
    this->initializeModel();
}

OAISpigot::~OAISpigot() {}

void OAISpigot::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_topk_isSet = false;
    m_topk_isValid = false;

    m_prob_isSet = false;
    m_prob_isValid = false;
}

void OAISpigot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpigot::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_topk_isValid = ::OpenAPI::fromJsonValue(m_topk, json[QString("Topk")]);
    m_topk_isSet = !json[QString("Topk")].isNull() && m_topk_isValid;

    m_prob_isValid = ::OpenAPI::fromJsonValue(m_prob, json[QString("Prob")]);
    m_prob_isSet = !json[QString("Prob")].isNull() && m_prob_isValid;
}

QString OAISpigot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpigot::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_topk_isSet) {
        obj.insert(QString("Topk"), ::OpenAPI::toJsonValue(m_topk));
    }
    if (m_prob_isSet) {
        obj.insert(QString("Prob"), ::OpenAPI::toJsonValue(m_prob));
    }
    return obj;
}

QString OAISpigot::getName() const {
    return m_name;
}
void OAISpigot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpigot::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpigot::is_name_Valid() const{
    return m_name_isValid;
}

QList OAISpigot::getInputs() const {
    return m_inputs;
}
void OAISpigot::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAISpigot::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAISpigot::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QString OAISpigot::getPath() const {
    return m_path;
}
void OAISpigot::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISpigot::is_path_Set() const{
    return m_path_isSet;
}

bool OAISpigot::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAISpigot::getTopk() const {
    return m_topk;
}
void OAISpigot::setTopk(const qint32 &topk) {
    m_topk = topk;
    m_topk_isSet = true;
}

bool OAISpigot::is_topk_Set() const{
    return m_topk_isSet;
}

bool OAISpigot::is_topk_Valid() const{
    return m_topk_isValid;
}

double OAISpigot::getProb() const {
    return m_prob;
}
void OAISpigot::setProb(const double &prob) {
    m_prob = prob;
    m_prob_isSet = true;
}

bool OAISpigot::is_prob_Set() const{
    return m_prob_isSet;
}

bool OAISpigot::is_prob_Valid() const{
    return m_prob_isValid;
}

bool OAISpigot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prob_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpigot::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_inputs_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
