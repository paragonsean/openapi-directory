/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassifier::OAIClassifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassifier::OAIClassifier() {
    this->initializeModel();
}

OAIClassifier::~OAIClassifier() {}

void OAIClassifier::initializeModel() {

    m_grok_classifier_isSet = false;
    m_grok_classifier_isValid = false;

    m_xml_classifier_isSet = false;
    m_xml_classifier_isValid = false;

    m_json_classifier_isSet = false;
    m_json_classifier_isValid = false;

    m_csv_classifier_isSet = false;
    m_csv_classifier_isValid = false;
}

void OAIClassifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassifier::fromJsonObject(QJsonObject json) {

    m_grok_classifier_isValid = ::OpenAPI::fromJsonValue(m_grok_classifier, json[QString("GrokClassifier")]);
    m_grok_classifier_isSet = !json[QString("GrokClassifier")].isNull() && m_grok_classifier_isValid;

    m_xml_classifier_isValid = ::OpenAPI::fromJsonValue(m_xml_classifier, json[QString("XMLClassifier")]);
    m_xml_classifier_isSet = !json[QString("XMLClassifier")].isNull() && m_xml_classifier_isValid;

    m_json_classifier_isValid = ::OpenAPI::fromJsonValue(m_json_classifier, json[QString("JsonClassifier")]);
    m_json_classifier_isSet = !json[QString("JsonClassifier")].isNull() && m_json_classifier_isValid;

    m_csv_classifier_isValid = ::OpenAPI::fromJsonValue(m_csv_classifier, json[QString("CsvClassifier")]);
    m_csv_classifier_isSet = !json[QString("CsvClassifier")].isNull() && m_csv_classifier_isValid;
}

QString OAIClassifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassifier::asJsonObject() const {
    QJsonObject obj;
    if (m_grok_classifier.isSet()) {
        obj.insert(QString("GrokClassifier"), ::OpenAPI::toJsonValue(m_grok_classifier));
    }
    if (m_xml_classifier.isSet()) {
        obj.insert(QString("XMLClassifier"), ::OpenAPI::toJsonValue(m_xml_classifier));
    }
    if (m_json_classifier.isSet()) {
        obj.insert(QString("JsonClassifier"), ::OpenAPI::toJsonValue(m_json_classifier));
    }
    if (m_csv_classifier.isSet()) {
        obj.insert(QString("CsvClassifier"), ::OpenAPI::toJsonValue(m_csv_classifier));
    }
    return obj;
}

OAIClassifier_GrokClassifier OAIClassifier::getGrokClassifier() const {
    return m_grok_classifier;
}
void OAIClassifier::setGrokClassifier(const OAIClassifier_GrokClassifier &grok_classifier) {
    m_grok_classifier = grok_classifier;
    m_grok_classifier_isSet = true;
}

bool OAIClassifier::is_grok_classifier_Set() const{
    return m_grok_classifier_isSet;
}

bool OAIClassifier::is_grok_classifier_Valid() const{
    return m_grok_classifier_isValid;
}

OAIClassifier_XMLClassifier OAIClassifier::getXmlClassifier() const {
    return m_xml_classifier;
}
void OAIClassifier::setXmlClassifier(const OAIClassifier_XMLClassifier &xml_classifier) {
    m_xml_classifier = xml_classifier;
    m_xml_classifier_isSet = true;
}

bool OAIClassifier::is_xml_classifier_Set() const{
    return m_xml_classifier_isSet;
}

bool OAIClassifier::is_xml_classifier_Valid() const{
    return m_xml_classifier_isValid;
}

OAIClassifier_JsonClassifier OAIClassifier::getJsonClassifier() const {
    return m_json_classifier;
}
void OAIClassifier::setJsonClassifier(const OAIClassifier_JsonClassifier &json_classifier) {
    m_json_classifier = json_classifier;
    m_json_classifier_isSet = true;
}

bool OAIClassifier::is_json_classifier_Set() const{
    return m_json_classifier_isSet;
}

bool OAIClassifier::is_json_classifier_Valid() const{
    return m_json_classifier_isValid;
}

OAIClassifier_CsvClassifier OAIClassifier::getCsvClassifier() const {
    return m_csv_classifier;
}
void OAIClassifier::setCsvClassifier(const OAIClassifier_CsvClassifier &csv_classifier) {
    m_csv_classifier = csv_classifier;
    m_csv_classifier_isSet = true;
}

bool OAIClassifier::is_csv_classifier_Set() const{
    return m_csv_classifier_isSet;
}

bool OAIClassifier::is_csv_classifier_Valid() const{
    return m_csv_classifier_isValid;
}

bool OAIClassifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grok_classifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_classifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_classifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_classifier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
