/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeGenConfigurationNode_S3CsvSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeGenConfigurationNode_S3CsvSource::OAICodeGenConfigurationNode_S3CsvSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeGenConfigurationNode_S3CsvSource::OAICodeGenConfigurationNode_S3CsvSource() {
    this->initializeModel();
}

OAICodeGenConfigurationNode_S3CsvSource::~OAICodeGenConfigurationNode_S3CsvSource() {}

void OAICodeGenConfigurationNode_S3CsvSource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_compression_type_isSet = false;
    m_compression_type_isValid = false;

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_group_size_isSet = false;
    m_group_size_isValid = false;

    m_group_files_isSet = false;
    m_group_files_isValid = false;

    m_recurse_isSet = false;
    m_recurse_isValid = false;

    m_max_band_isSet = false;
    m_max_band_isValid = false;

    m_max_files_in_band_isSet = false;
    m_max_files_in_band_isValid = false;

    m_additional_options_isSet = false;
    m_additional_options_isValid = false;

    m_separator_isSet = false;
    m_separator_isValid = false;

    m_escaper_isSet = false;
    m_escaper_isValid = false;

    m_quote_char_isSet = false;
    m_quote_char_isValid = false;

    m_multiline_isSet = false;
    m_multiline_isValid = false;

    m_with_header_isSet = false;
    m_with_header_isValid = false;

    m_write_header_isSet = false;
    m_write_header_isValid = false;

    m_skip_first_isSet = false;
    m_skip_first_isValid = false;

    m_optimize_performance_isSet = false;
    m_optimize_performance_isValid = false;

    m_output_schemas_isSet = false;
    m_output_schemas_isValid = false;
}

void OAICodeGenConfigurationNode_S3CsvSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeGenConfigurationNode_S3CsvSource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_compression_type_isValid = ::OpenAPI::fromJsonValue(m_compression_type, json[QString("CompressionType")]);
    m_compression_type_isSet = !json[QString("CompressionType")].isNull() && m_compression_type_isValid;

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("Exclusions")]);
    m_exclusions_isSet = !json[QString("Exclusions")].isNull() && m_exclusions_isValid;

    m_group_size_isValid = ::OpenAPI::fromJsonValue(m_group_size, json[QString("GroupSize")]);
    m_group_size_isSet = !json[QString("GroupSize")].isNull() && m_group_size_isValid;

    m_group_files_isValid = ::OpenAPI::fromJsonValue(m_group_files, json[QString("GroupFiles")]);
    m_group_files_isSet = !json[QString("GroupFiles")].isNull() && m_group_files_isValid;

    m_recurse_isValid = ::OpenAPI::fromJsonValue(m_recurse, json[QString("Recurse")]);
    m_recurse_isSet = !json[QString("Recurse")].isNull() && m_recurse_isValid;

    m_max_band_isValid = ::OpenAPI::fromJsonValue(m_max_band, json[QString("MaxBand")]);
    m_max_band_isSet = !json[QString("MaxBand")].isNull() && m_max_band_isValid;

    m_max_files_in_band_isValid = ::OpenAPI::fromJsonValue(m_max_files_in_band, json[QString("MaxFilesInBand")]);
    m_max_files_in_band_isSet = !json[QString("MaxFilesInBand")].isNull() && m_max_files_in_band_isValid;

    m_additional_options_isValid = ::OpenAPI::fromJsonValue(m_additional_options, json[QString("AdditionalOptions")]);
    m_additional_options_isSet = !json[QString("AdditionalOptions")].isNull() && m_additional_options_isValid;

    m_separator_isValid = ::OpenAPI::fromJsonValue(m_separator, json[QString("Separator")]);
    m_separator_isSet = !json[QString("Separator")].isNull() && m_separator_isValid;

    m_escaper_isValid = ::OpenAPI::fromJsonValue(m_escaper, json[QString("Escaper")]);
    m_escaper_isSet = !json[QString("Escaper")].isNull() && m_escaper_isValid;

    m_quote_char_isValid = ::OpenAPI::fromJsonValue(m_quote_char, json[QString("QuoteChar")]);
    m_quote_char_isSet = !json[QString("QuoteChar")].isNull() && m_quote_char_isValid;

    m_multiline_isValid = ::OpenAPI::fromJsonValue(m_multiline, json[QString("Multiline")]);
    m_multiline_isSet = !json[QString("Multiline")].isNull() && m_multiline_isValid;

    m_with_header_isValid = ::OpenAPI::fromJsonValue(m_with_header, json[QString("WithHeader")]);
    m_with_header_isSet = !json[QString("WithHeader")].isNull() && m_with_header_isValid;

    m_write_header_isValid = ::OpenAPI::fromJsonValue(m_write_header, json[QString("WriteHeader")]);
    m_write_header_isSet = !json[QString("WriteHeader")].isNull() && m_write_header_isValid;

    m_skip_first_isValid = ::OpenAPI::fromJsonValue(m_skip_first, json[QString("SkipFirst")]);
    m_skip_first_isSet = !json[QString("SkipFirst")].isNull() && m_skip_first_isValid;

    m_optimize_performance_isValid = ::OpenAPI::fromJsonValue(m_optimize_performance, json[QString("OptimizePerformance")]);
    m_optimize_performance_isSet = !json[QString("OptimizePerformance")].isNull() && m_optimize_performance_isValid;

    m_output_schemas_isValid = ::OpenAPI::fromJsonValue(m_output_schemas, json[QString("OutputSchemas")]);
    m_output_schemas_isSet = !json[QString("OutputSchemas")].isNull() && m_output_schemas_isValid;
}

QString OAICodeGenConfigurationNode_S3CsvSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeGenConfigurationNode_S3CsvSource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_paths.isSet()) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_compression_type.isSet()) {
        obj.insert(QString("CompressionType"), ::OpenAPI::toJsonValue(m_compression_type));
    }
    if (m_exclusions.isSet()) {
        obj.insert(QString("Exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_group_size_isSet) {
        obj.insert(QString("GroupSize"), ::OpenAPI::toJsonValue(m_group_size));
    }
    if (m_group_files_isSet) {
        obj.insert(QString("GroupFiles"), ::OpenAPI::toJsonValue(m_group_files));
    }
    if (m_recurse_isSet) {
        obj.insert(QString("Recurse"), ::OpenAPI::toJsonValue(m_recurse));
    }
    if (m_max_band_isSet) {
        obj.insert(QString("MaxBand"), ::OpenAPI::toJsonValue(m_max_band));
    }
    if (m_max_files_in_band_isSet) {
        obj.insert(QString("MaxFilesInBand"), ::OpenAPI::toJsonValue(m_max_files_in_band));
    }
    if (m_additional_options.isSet()) {
        obj.insert(QString("AdditionalOptions"), ::OpenAPI::toJsonValue(m_additional_options));
    }
    if (m_separator.isSet()) {
        obj.insert(QString("Separator"), ::OpenAPI::toJsonValue(m_separator));
    }
    if (m_escaper_isSet) {
        obj.insert(QString("Escaper"), ::OpenAPI::toJsonValue(m_escaper));
    }
    if (m_quote_char.isSet()) {
        obj.insert(QString("QuoteChar"), ::OpenAPI::toJsonValue(m_quote_char));
    }
    if (m_multiline_isSet) {
        obj.insert(QString("Multiline"), ::OpenAPI::toJsonValue(m_multiline));
    }
    if (m_with_header_isSet) {
        obj.insert(QString("WithHeader"), ::OpenAPI::toJsonValue(m_with_header));
    }
    if (m_write_header_isSet) {
        obj.insert(QString("WriteHeader"), ::OpenAPI::toJsonValue(m_write_header));
    }
    if (m_skip_first_isSet) {
        obj.insert(QString("SkipFirst"), ::OpenAPI::toJsonValue(m_skip_first));
    }
    if (m_optimize_performance_isSet) {
        obj.insert(QString("OptimizePerformance"), ::OpenAPI::toJsonValue(m_optimize_performance));
    }
    if (m_output_schemas.isSet()) {
        obj.insert(QString("OutputSchemas"), ::OpenAPI::toJsonValue(m_output_schemas));
    }
    return obj;
}

QString OAICodeGenConfigurationNode_S3CsvSource::getName() const {
    return m_name;
}
void OAICodeGenConfigurationNode_S3CsvSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICodeGenConfigurationNode_S3CsvSource::getPaths() const {
    return m_paths;
}
void OAICodeGenConfigurationNode_S3CsvSource::setPaths(const QList &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_paths_Valid() const{
    return m_paths_isValid;
}

OAICompressionType OAICodeGenConfigurationNode_S3CsvSource::getCompressionType() const {
    return m_compression_type;
}
void OAICodeGenConfigurationNode_S3CsvSource::setCompressionType(const OAICompressionType &compression_type) {
    m_compression_type = compression_type;
    m_compression_type_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_compression_type_Set() const{
    return m_compression_type_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_compression_type_Valid() const{
    return m_compression_type_isValid;
}

QList OAICodeGenConfigurationNode_S3CsvSource::getExclusions() const {
    return m_exclusions;
}
void OAICodeGenConfigurationNode_S3CsvSource::setExclusions(const QList &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QString OAICodeGenConfigurationNode_S3CsvSource::getGroupSize() const {
    return m_group_size;
}
void OAICodeGenConfigurationNode_S3CsvSource::setGroupSize(const QString &group_size) {
    m_group_size = group_size;
    m_group_size_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_group_size_Set() const{
    return m_group_size_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_group_size_Valid() const{
    return m_group_size_isValid;
}

QString OAICodeGenConfigurationNode_S3CsvSource::getGroupFiles() const {
    return m_group_files;
}
void OAICodeGenConfigurationNode_S3CsvSource::setGroupFiles(const QString &group_files) {
    m_group_files = group_files;
    m_group_files_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_group_files_Set() const{
    return m_group_files_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_group_files_Valid() const{
    return m_group_files_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::getRecurse() const {
    return m_recurse;
}
void OAICodeGenConfigurationNode_S3CsvSource::setRecurse(const bool &recurse) {
    m_recurse = recurse;
    m_recurse_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_recurse_Set() const{
    return m_recurse_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_recurse_Valid() const{
    return m_recurse_isValid;
}

qint32 OAICodeGenConfigurationNode_S3CsvSource::getMaxBand() const {
    return m_max_band;
}
void OAICodeGenConfigurationNode_S3CsvSource::setMaxBand(const qint32 &max_band) {
    m_max_band = max_band;
    m_max_band_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_max_band_Set() const{
    return m_max_band_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_max_band_Valid() const{
    return m_max_band_isValid;
}

qint32 OAICodeGenConfigurationNode_S3CsvSource::getMaxFilesInBand() const {
    return m_max_files_in_band;
}
void OAICodeGenConfigurationNode_S3CsvSource::setMaxFilesInBand(const qint32 &max_files_in_band) {
    m_max_files_in_band = max_files_in_band;
    m_max_files_in_band_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_max_files_in_band_Set() const{
    return m_max_files_in_band_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_max_files_in_band_Valid() const{
    return m_max_files_in_band_isValid;
}

OAIS3CsvSource_AdditionalOptions OAICodeGenConfigurationNode_S3CsvSource::getAdditionalOptions() const {
    return m_additional_options;
}
void OAICodeGenConfigurationNode_S3CsvSource::setAdditionalOptions(const OAIS3CsvSource_AdditionalOptions &additional_options) {
    m_additional_options = additional_options;
    m_additional_options_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_additional_options_Set() const{
    return m_additional_options_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_additional_options_Valid() const{
    return m_additional_options_isValid;
}

OAISeparator OAICodeGenConfigurationNode_S3CsvSource::getSeparator() const {
    return m_separator;
}
void OAICodeGenConfigurationNode_S3CsvSource::setSeparator(const OAISeparator &separator) {
    m_separator = separator;
    m_separator_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_separator_Set() const{
    return m_separator_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_separator_Valid() const{
    return m_separator_isValid;
}

QString OAICodeGenConfigurationNode_S3CsvSource::getEscaper() const {
    return m_escaper;
}
void OAICodeGenConfigurationNode_S3CsvSource::setEscaper(const QString &escaper) {
    m_escaper = escaper;
    m_escaper_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_escaper_Set() const{
    return m_escaper_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_escaper_Valid() const{
    return m_escaper_isValid;
}

OAIQuoteChar OAICodeGenConfigurationNode_S3CsvSource::getQuoteChar() const {
    return m_quote_char;
}
void OAICodeGenConfigurationNode_S3CsvSource::setQuoteChar(const OAIQuoteChar &quote_char) {
    m_quote_char = quote_char;
    m_quote_char_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_quote_char_Set() const{
    return m_quote_char_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_quote_char_Valid() const{
    return m_quote_char_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::getMultiline() const {
    return m_multiline;
}
void OAICodeGenConfigurationNode_S3CsvSource::setMultiline(const bool &multiline) {
    m_multiline = multiline;
    m_multiline_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_multiline_Set() const{
    return m_multiline_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_multiline_Valid() const{
    return m_multiline_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::getWithHeader() const {
    return m_with_header;
}
void OAICodeGenConfigurationNode_S3CsvSource::setWithHeader(const bool &with_header) {
    m_with_header = with_header;
    m_with_header_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_with_header_Set() const{
    return m_with_header_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_with_header_Valid() const{
    return m_with_header_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::getWriteHeader() const {
    return m_write_header;
}
void OAICodeGenConfigurationNode_S3CsvSource::setWriteHeader(const bool &write_header) {
    m_write_header = write_header;
    m_write_header_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_write_header_Set() const{
    return m_write_header_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_write_header_Valid() const{
    return m_write_header_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::getSkipFirst() const {
    return m_skip_first;
}
void OAICodeGenConfigurationNode_S3CsvSource::setSkipFirst(const bool &skip_first) {
    m_skip_first = skip_first;
    m_skip_first_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_skip_first_Set() const{
    return m_skip_first_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_skip_first_Valid() const{
    return m_skip_first_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::getOptimizePerformance() const {
    return m_optimize_performance;
}
void OAICodeGenConfigurationNode_S3CsvSource::setOptimizePerformance(const bool &optimize_performance) {
    m_optimize_performance = optimize_performance;
    m_optimize_performance_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_optimize_performance_Set() const{
    return m_optimize_performance_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_optimize_performance_Valid() const{
    return m_optimize_performance_isValid;
}

QList OAICodeGenConfigurationNode_S3CsvSource::getOutputSchemas() const {
    return m_output_schemas;
}
void OAICodeGenConfigurationNode_S3CsvSource::setOutputSchemas(const QList &output_schemas) {
    m_output_schemas = output_schemas;
    m_output_schemas_isSet = true;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_output_schemas_Set() const{
    return m_output_schemas_isSet;
}

bool OAICodeGenConfigurationNode_S3CsvSource::is_output_schemas_Valid() const{
    return m_output_schemas_isValid;
}

bool OAICodeGenConfigurationNode_S3CsvSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_band_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_files_in_band_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_escaper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_char.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimize_performance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_schemas.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeGenConfigurationNode_S3CsvSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_paths_isValid && m_separator_isValid && m_quote_char_isValid && true;
}

} // namespace OpenAPI
