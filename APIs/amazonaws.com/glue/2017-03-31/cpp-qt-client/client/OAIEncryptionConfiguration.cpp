/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionConfiguration::OAIEncryptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionConfiguration::OAIEncryptionConfiguration() {
    this->initializeModel();
}

OAIEncryptionConfiguration::~OAIEncryptionConfiguration() {}

void OAIEncryptionConfiguration::initializeModel() {

    m_s3_encryption_isSet = false;
    m_s3_encryption_isValid = false;

    m_cloud_watch_encryption_isSet = false;
    m_cloud_watch_encryption_isValid = false;

    m_job_bookmarks_encryption_isSet = false;
    m_job_bookmarks_encryption_isValid = false;
}

void OAIEncryptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionConfiguration::fromJsonObject(QJsonObject json) {

    m_s3_encryption_isValid = ::OpenAPI::fromJsonValue(m_s3_encryption, json[QString("S3Encryption")]);
    m_s3_encryption_isSet = !json[QString("S3Encryption")].isNull() && m_s3_encryption_isValid;

    m_cloud_watch_encryption_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_encryption, json[QString("CloudWatchEncryption")]);
    m_cloud_watch_encryption_isSet = !json[QString("CloudWatchEncryption")].isNull() && m_cloud_watch_encryption_isValid;

    m_job_bookmarks_encryption_isValid = ::OpenAPI::fromJsonValue(m_job_bookmarks_encryption, json[QString("JobBookmarksEncryption")]);
    m_job_bookmarks_encryption_isSet = !json[QString("JobBookmarksEncryption")].isNull() && m_job_bookmarks_encryption_isValid;
}

QString OAIEncryptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_encryption.isSet()) {
        obj.insert(QString("S3Encryption"), ::OpenAPI::toJsonValue(m_s3_encryption));
    }
    if (m_cloud_watch_encryption.isSet()) {
        obj.insert(QString("CloudWatchEncryption"), ::OpenAPI::toJsonValue(m_cloud_watch_encryption));
    }
    if (m_job_bookmarks_encryption.isSet()) {
        obj.insert(QString("JobBookmarksEncryption"), ::OpenAPI::toJsonValue(m_job_bookmarks_encryption));
    }
    return obj;
}

QList OAIEncryptionConfiguration::getS3Encryption() const {
    return m_s3_encryption;
}
void OAIEncryptionConfiguration::setS3Encryption(const QList &s3_encryption) {
    m_s3_encryption = s3_encryption;
    m_s3_encryption_isSet = true;
}

bool OAIEncryptionConfiguration::is_s3_encryption_Set() const{
    return m_s3_encryption_isSet;
}

bool OAIEncryptionConfiguration::is_s3_encryption_Valid() const{
    return m_s3_encryption_isValid;
}

OAIEncryptionConfiguration_CloudWatchEncryption OAIEncryptionConfiguration::getCloudWatchEncryption() const {
    return m_cloud_watch_encryption;
}
void OAIEncryptionConfiguration::setCloudWatchEncryption(const OAIEncryptionConfiguration_CloudWatchEncryption &cloud_watch_encryption) {
    m_cloud_watch_encryption = cloud_watch_encryption;
    m_cloud_watch_encryption_isSet = true;
}

bool OAIEncryptionConfiguration::is_cloud_watch_encryption_Set() const{
    return m_cloud_watch_encryption_isSet;
}

bool OAIEncryptionConfiguration::is_cloud_watch_encryption_Valid() const{
    return m_cloud_watch_encryption_isValid;
}

OAIEncryptionConfiguration_JobBookmarksEncryption OAIEncryptionConfiguration::getJobBookmarksEncryption() const {
    return m_job_bookmarks_encryption;
}
void OAIEncryptionConfiguration::setJobBookmarksEncryption(const OAIEncryptionConfiguration_JobBookmarksEncryption &job_bookmarks_encryption) {
    m_job_bookmarks_encryption = job_bookmarks_encryption;
    m_job_bookmarks_encryption_isSet = true;
}

bool OAIEncryptionConfiguration::is_job_bookmarks_encryption_Set() const{
    return m_job_bookmarks_encryption_isSet;
}

bool OAIEncryptionConfiguration::is_job_bookmarks_encryption_Valid() const{
    return m_job_bookmarks_encryption_isValid;
}

bool OAIEncryptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_bookmarks_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
