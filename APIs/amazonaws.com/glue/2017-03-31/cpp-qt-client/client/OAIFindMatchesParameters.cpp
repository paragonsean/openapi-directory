/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindMatchesParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindMatchesParameters::OAIFindMatchesParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindMatchesParameters::OAIFindMatchesParameters() {
    this->initializeModel();
}

OAIFindMatchesParameters::~OAIFindMatchesParameters() {}

void OAIFindMatchesParameters::initializeModel() {

    m_primary_key_column_name_isSet = false;
    m_primary_key_column_name_isValid = false;

    m_precision_recall_tradeoff_isSet = false;
    m_precision_recall_tradeoff_isValid = false;

    m_accuracy_cost_tradeoff_isSet = false;
    m_accuracy_cost_tradeoff_isValid = false;

    m_enforce_provided_labels_isSet = false;
    m_enforce_provided_labels_isValid = false;
}

void OAIFindMatchesParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindMatchesParameters::fromJsonObject(QJsonObject json) {

    m_primary_key_column_name_isValid = ::OpenAPI::fromJsonValue(m_primary_key_column_name, json[QString("PrimaryKeyColumnName")]);
    m_primary_key_column_name_isSet = !json[QString("PrimaryKeyColumnName")].isNull() && m_primary_key_column_name_isValid;

    m_precision_recall_tradeoff_isValid = ::OpenAPI::fromJsonValue(m_precision_recall_tradeoff, json[QString("PrecisionRecallTradeoff")]);
    m_precision_recall_tradeoff_isSet = !json[QString("PrecisionRecallTradeoff")].isNull() && m_precision_recall_tradeoff_isValid;

    m_accuracy_cost_tradeoff_isValid = ::OpenAPI::fromJsonValue(m_accuracy_cost_tradeoff, json[QString("AccuracyCostTradeoff")]);
    m_accuracy_cost_tradeoff_isSet = !json[QString("AccuracyCostTradeoff")].isNull() && m_accuracy_cost_tradeoff_isValid;

    m_enforce_provided_labels_isValid = ::OpenAPI::fromJsonValue(m_enforce_provided_labels, json[QString("EnforceProvidedLabels")]);
    m_enforce_provided_labels_isSet = !json[QString("EnforceProvidedLabels")].isNull() && m_enforce_provided_labels_isValid;
}

QString OAIFindMatchesParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindMatchesParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_key_column_name_isSet) {
        obj.insert(QString("PrimaryKeyColumnName"), ::OpenAPI::toJsonValue(m_primary_key_column_name));
    }
    if (m_precision_recall_tradeoff_isSet) {
        obj.insert(QString("PrecisionRecallTradeoff"), ::OpenAPI::toJsonValue(m_precision_recall_tradeoff));
    }
    if (m_accuracy_cost_tradeoff_isSet) {
        obj.insert(QString("AccuracyCostTradeoff"), ::OpenAPI::toJsonValue(m_accuracy_cost_tradeoff));
    }
    if (m_enforce_provided_labels_isSet) {
        obj.insert(QString("EnforceProvidedLabels"), ::OpenAPI::toJsonValue(m_enforce_provided_labels));
    }
    return obj;
}

QString OAIFindMatchesParameters::getPrimaryKeyColumnName() const {
    return m_primary_key_column_name;
}
void OAIFindMatchesParameters::setPrimaryKeyColumnName(const QString &primary_key_column_name) {
    m_primary_key_column_name = primary_key_column_name;
    m_primary_key_column_name_isSet = true;
}

bool OAIFindMatchesParameters::is_primary_key_column_name_Set() const{
    return m_primary_key_column_name_isSet;
}

bool OAIFindMatchesParameters::is_primary_key_column_name_Valid() const{
    return m_primary_key_column_name_isValid;
}

double OAIFindMatchesParameters::getPrecisionRecallTradeoff() const {
    return m_precision_recall_tradeoff;
}
void OAIFindMatchesParameters::setPrecisionRecallTradeoff(const double &precision_recall_tradeoff) {
    m_precision_recall_tradeoff = precision_recall_tradeoff;
    m_precision_recall_tradeoff_isSet = true;
}

bool OAIFindMatchesParameters::is_precision_recall_tradeoff_Set() const{
    return m_precision_recall_tradeoff_isSet;
}

bool OAIFindMatchesParameters::is_precision_recall_tradeoff_Valid() const{
    return m_precision_recall_tradeoff_isValid;
}

double OAIFindMatchesParameters::getAccuracyCostTradeoff() const {
    return m_accuracy_cost_tradeoff;
}
void OAIFindMatchesParameters::setAccuracyCostTradeoff(const double &accuracy_cost_tradeoff) {
    m_accuracy_cost_tradeoff = accuracy_cost_tradeoff;
    m_accuracy_cost_tradeoff_isSet = true;
}

bool OAIFindMatchesParameters::is_accuracy_cost_tradeoff_Set() const{
    return m_accuracy_cost_tradeoff_isSet;
}

bool OAIFindMatchesParameters::is_accuracy_cost_tradeoff_Valid() const{
    return m_accuracy_cost_tradeoff_isValid;
}

bool OAIFindMatchesParameters::getEnforceProvidedLabels() const {
    return m_enforce_provided_labels;
}
void OAIFindMatchesParameters::setEnforceProvidedLabels(const bool &enforce_provided_labels) {
    m_enforce_provided_labels = enforce_provided_labels;
    m_enforce_provided_labels_isSet = true;
}

bool OAIFindMatchesParameters::is_enforce_provided_labels_Set() const{
    return m_enforce_provided_labels_isSet;
}

bool OAIFindMatchesParameters::is_enforce_provided_labels_Valid() const{
    return m_enforce_provided_labels_isValid;
}

bool OAIFindMatchesParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_key_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_recall_tradeoff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accuracy_cost_tradeoff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_provided_labels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindMatchesParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
