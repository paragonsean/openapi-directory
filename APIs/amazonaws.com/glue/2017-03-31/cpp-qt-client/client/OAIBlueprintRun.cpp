/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlueprintRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlueprintRun::OAIBlueprintRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlueprintRun::OAIBlueprintRun() {
    this->initializeModel();
}

OAIBlueprintRun::~OAIBlueprintRun() {}

void OAIBlueprintRun::initializeModel() {

    m_blueprint_name_isSet = false;
    m_blueprint_name_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_workflow_name_isSet = false;
    m_workflow_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_rollback_error_message_isSet = false;
    m_rollback_error_message_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIBlueprintRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlueprintRun::fromJsonObject(QJsonObject json) {

    m_blueprint_name_isValid = ::OpenAPI::fromJsonValue(m_blueprint_name, json[QString("BlueprintName")]);
    m_blueprint_name_isSet = !json[QString("BlueprintName")].isNull() && m_blueprint_name_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("RunId")]);
    m_run_id_isSet = !json[QString("RunId")].isNull() && m_run_id_isValid;

    m_workflow_name_isValid = ::OpenAPI::fromJsonValue(m_workflow_name, json[QString("WorkflowName")]);
    m_workflow_name_isSet = !json[QString("WorkflowName")].isNull() && m_workflow_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_rollback_error_message_isValid = ::OpenAPI::fromJsonValue(m_rollback_error_message, json[QString("RollbackErrorMessage")]);
    m_rollback_error_message_isSet = !json[QString("RollbackErrorMessage")].isNull() && m_rollback_error_message_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIBlueprintRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlueprintRun::asJsonObject() const {
    QJsonObject obj;
    if (m_blueprint_name_isSet) {
        obj.insert(QString("BlueprintName"), ::OpenAPI::toJsonValue(m_blueprint_name));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("RunId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_workflow_name_isSet) {
        obj.insert(QString("WorkflowName"), ::OpenAPI::toJsonValue(m_workflow_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_rollback_error_message_isSet) {
        obj.insert(QString("RollbackErrorMessage"), ::OpenAPI::toJsonValue(m_rollback_error_message));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIBlueprintRun::getBlueprintName() const {
    return m_blueprint_name;
}
void OAIBlueprintRun::setBlueprintName(const QString &blueprint_name) {
    m_blueprint_name = blueprint_name;
    m_blueprint_name_isSet = true;
}

bool OAIBlueprintRun::is_blueprint_name_Set() const{
    return m_blueprint_name_isSet;
}

bool OAIBlueprintRun::is_blueprint_name_Valid() const{
    return m_blueprint_name_isValid;
}

QString OAIBlueprintRun::getRunId() const {
    return m_run_id;
}
void OAIBlueprintRun::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIBlueprintRun::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIBlueprintRun::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIBlueprintRun::getWorkflowName() const {
    return m_workflow_name;
}
void OAIBlueprintRun::setWorkflowName(const QString &workflow_name) {
    m_workflow_name = workflow_name;
    m_workflow_name_isSet = true;
}

bool OAIBlueprintRun::is_workflow_name_Set() const{
    return m_workflow_name_isSet;
}

bool OAIBlueprintRun::is_workflow_name_Valid() const{
    return m_workflow_name_isValid;
}

OAIBlueprintRunState OAIBlueprintRun::getState() const {
    return m_state;
}
void OAIBlueprintRun::setState(const OAIBlueprintRunState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBlueprintRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBlueprintRun::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIBlueprintRun::getStartedOn() const {
    return m_started_on;
}
void OAIBlueprintRun::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIBlueprintRun::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIBlueprintRun::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAIBlueprintRun::getCompletedOn() const {
    return m_completed_on;
}
void OAIBlueprintRun::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIBlueprintRun::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIBlueprintRun::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

QString OAIBlueprintRun::getErrorMessage() const {
    return m_error_message;
}
void OAIBlueprintRun::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBlueprintRun::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBlueprintRun::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIBlueprintRun::getRollbackErrorMessage() const {
    return m_rollback_error_message;
}
void OAIBlueprintRun::setRollbackErrorMessage(const QString &rollback_error_message) {
    m_rollback_error_message = rollback_error_message;
    m_rollback_error_message_isSet = true;
}

bool OAIBlueprintRun::is_rollback_error_message_Set() const{
    return m_rollback_error_message_isSet;
}

bool OAIBlueprintRun::is_rollback_error_message_Valid() const{
    return m_rollback_error_message_isValid;
}

QString OAIBlueprintRun::getParameters() const {
    return m_parameters;
}
void OAIBlueprintRun::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIBlueprintRun::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIBlueprintRun::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIBlueprintRun::getRoleArn() const {
    return m_role_arn;
}
void OAIBlueprintRun::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIBlueprintRun::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIBlueprintRun::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIBlueprintRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blueprint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlueprintRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
