/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeGenNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeGenNode::OAICodeGenNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeGenNode::OAICodeGenNode() {
    this->initializeModel();
}

OAICodeGenNode::~OAICodeGenNode() {}

void OAICodeGenNode::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_args_isSet = false;
    m_args_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;
}

void OAICodeGenNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeGenNode::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("Args")]);
    m_args_isSet = !json[QString("Args")].isNull() && m_args_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("LineNumber")]);
    m_line_number_isSet = !json[QString("LineNumber")].isNull() && m_line_number_isValid;
}

QString OAICodeGenNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeGenNode::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_args.isSet()) {
        obj.insert(QString("Args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("LineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    return obj;
}

QString OAICodeGenNode::getId() const {
    return m_id;
}
void OAICodeGenNode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICodeGenNode::is_id_Set() const{
    return m_id_isSet;
}

bool OAICodeGenNode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICodeGenNode::getNodeType() const {
    return m_node_type;
}
void OAICodeGenNode::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAICodeGenNode::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAICodeGenNode::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QList OAICodeGenNode::getArgs() const {
    return m_args;
}
void OAICodeGenNode::setArgs(const QList &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAICodeGenNode::is_args_Set() const{
    return m_args_isSet;
}

bool OAICodeGenNode::is_args_Valid() const{
    return m_args_isValid;
}

qint32 OAICodeGenNode::getLineNumber() const {
    return m_line_number;
}
void OAICodeGenNode::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAICodeGenNode::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAICodeGenNode::is_line_number_Valid() const{
    return m_line_number_isValid;
}

bool OAICodeGenNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_args.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeGenNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_node_type_isValid && m_args_isValid && true;
}

} // namespace OpenAPI
