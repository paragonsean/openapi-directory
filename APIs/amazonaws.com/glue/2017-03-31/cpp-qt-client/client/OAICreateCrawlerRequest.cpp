/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCrawlerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCrawlerRequest::OAICreateCrawlerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCrawlerRequest::OAICreateCrawlerRequest() {
    this->initializeModel();
}

OAICreateCrawlerRequest::~OAICreateCrawlerRequest() {}

void OAICreateCrawlerRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_classifiers_isSet = false;
    m_classifiers_isValid = false;

    m_table_prefix_isSet = false;
    m_table_prefix_isValid = false;

    m_schema_change_policy_isSet = false;
    m_schema_change_policy_isValid = false;

    m_recrawl_policy_isSet = false;
    m_recrawl_policy_isValid = false;

    m_lineage_configuration_isSet = false;
    m_lineage_configuration_isValid = false;

    m_lake_formation_configuration_isSet = false;
    m_lake_formation_configuration_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_crawler_security_configuration_isSet = false;
    m_crawler_security_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateCrawlerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCrawlerRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_classifiers_isValid = ::OpenAPI::fromJsonValue(m_classifiers, json[QString("Classifiers")]);
    m_classifiers_isSet = !json[QString("Classifiers")].isNull() && m_classifiers_isValid;

    m_table_prefix_isValid = ::OpenAPI::fromJsonValue(m_table_prefix, json[QString("TablePrefix")]);
    m_table_prefix_isSet = !json[QString("TablePrefix")].isNull() && m_table_prefix_isValid;

    m_schema_change_policy_isValid = ::OpenAPI::fromJsonValue(m_schema_change_policy, json[QString("SchemaChangePolicy")]);
    m_schema_change_policy_isSet = !json[QString("SchemaChangePolicy")].isNull() && m_schema_change_policy_isValid;

    m_recrawl_policy_isValid = ::OpenAPI::fromJsonValue(m_recrawl_policy, json[QString("RecrawlPolicy")]);
    m_recrawl_policy_isSet = !json[QString("RecrawlPolicy")].isNull() && m_recrawl_policy_isValid;

    m_lineage_configuration_isValid = ::OpenAPI::fromJsonValue(m_lineage_configuration, json[QString("LineageConfiguration")]);
    m_lineage_configuration_isSet = !json[QString("LineageConfiguration")].isNull() && m_lineage_configuration_isValid;

    m_lake_formation_configuration_isValid = ::OpenAPI::fromJsonValue(m_lake_formation_configuration, json[QString("LakeFormationConfiguration")]);
    m_lake_formation_configuration_isSet = !json[QString("LakeFormationConfiguration")].isNull() && m_lake_formation_configuration_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_crawler_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_crawler_security_configuration, json[QString("CrawlerSecurityConfiguration")]);
    m_crawler_security_configuration_isSet = !json[QString("CrawlerSecurityConfiguration")].isNull() && m_crawler_security_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateCrawlerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCrawlerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_classifiers.isSet()) {
        obj.insert(QString("Classifiers"), ::OpenAPI::toJsonValue(m_classifiers));
    }
    if (m_table_prefix_isSet) {
        obj.insert(QString("TablePrefix"), ::OpenAPI::toJsonValue(m_table_prefix));
    }
    if (m_schema_change_policy.isSet()) {
        obj.insert(QString("SchemaChangePolicy"), ::OpenAPI::toJsonValue(m_schema_change_policy));
    }
    if (m_recrawl_policy.isSet()) {
        obj.insert(QString("RecrawlPolicy"), ::OpenAPI::toJsonValue(m_recrawl_policy));
    }
    if (m_lineage_configuration.isSet()) {
        obj.insert(QString("LineageConfiguration"), ::OpenAPI::toJsonValue(m_lineage_configuration));
    }
    if (m_lake_formation_configuration.isSet()) {
        obj.insert(QString("LakeFormationConfiguration"), ::OpenAPI::toJsonValue(m_lake_formation_configuration));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_crawler_security_configuration_isSet) {
        obj.insert(QString("CrawlerSecurityConfiguration"), ::OpenAPI::toJsonValue(m_crawler_security_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateCrawlerRequest::getName() const {
    return m_name;
}
void OAICreateCrawlerRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateCrawlerRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateCrawlerRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateCrawlerRequest::getRole() const {
    return m_role;
}
void OAICreateCrawlerRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateCrawlerRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateCrawlerRequest::is_role_Valid() const{
    return m_role_isValid;
}

QString OAICreateCrawlerRequest::getDatabaseName() const {
    return m_database_name;
}
void OAICreateCrawlerRequest::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAICreateCrawlerRequest::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAICreateCrawlerRequest::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAICreateCrawlerRequest::getDescription() const {
    return m_description;
}
void OAICreateCrawlerRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateCrawlerRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateCrawlerRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateCrawlerRequest_Targets OAICreateCrawlerRequest::getTargets() const {
    return m_targets;
}
void OAICreateCrawlerRequest::setTargets(const OAICreateCrawlerRequest_Targets &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAICreateCrawlerRequest::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAICreateCrawlerRequest::is_targets_Valid() const{
    return m_targets_isValid;
}

QString OAICreateCrawlerRequest::getSchedule() const {
    return m_schedule;
}
void OAICreateCrawlerRequest::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAICreateCrawlerRequest::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAICreateCrawlerRequest::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QList OAICreateCrawlerRequest::getClassifiers() const {
    return m_classifiers;
}
void OAICreateCrawlerRequest::setClassifiers(const QList &classifiers) {
    m_classifiers = classifiers;
    m_classifiers_isSet = true;
}

bool OAICreateCrawlerRequest::is_classifiers_Set() const{
    return m_classifiers_isSet;
}

bool OAICreateCrawlerRequest::is_classifiers_Valid() const{
    return m_classifiers_isValid;
}

QString OAICreateCrawlerRequest::getTablePrefix() const {
    return m_table_prefix;
}
void OAICreateCrawlerRequest::setTablePrefix(const QString &table_prefix) {
    m_table_prefix = table_prefix;
    m_table_prefix_isSet = true;
}

bool OAICreateCrawlerRequest::is_table_prefix_Set() const{
    return m_table_prefix_isSet;
}

bool OAICreateCrawlerRequest::is_table_prefix_Valid() const{
    return m_table_prefix_isValid;
}

OAICreateCrawlerRequest_SchemaChangePolicy OAICreateCrawlerRequest::getSchemaChangePolicy() const {
    return m_schema_change_policy;
}
void OAICreateCrawlerRequest::setSchemaChangePolicy(const OAICreateCrawlerRequest_SchemaChangePolicy &schema_change_policy) {
    m_schema_change_policy = schema_change_policy;
    m_schema_change_policy_isSet = true;
}

bool OAICreateCrawlerRequest::is_schema_change_policy_Set() const{
    return m_schema_change_policy_isSet;
}

bool OAICreateCrawlerRequest::is_schema_change_policy_Valid() const{
    return m_schema_change_policy_isValid;
}

OAICreateCrawlerRequest_RecrawlPolicy OAICreateCrawlerRequest::getRecrawlPolicy() const {
    return m_recrawl_policy;
}
void OAICreateCrawlerRequest::setRecrawlPolicy(const OAICreateCrawlerRequest_RecrawlPolicy &recrawl_policy) {
    m_recrawl_policy = recrawl_policy;
    m_recrawl_policy_isSet = true;
}

bool OAICreateCrawlerRequest::is_recrawl_policy_Set() const{
    return m_recrawl_policy_isSet;
}

bool OAICreateCrawlerRequest::is_recrawl_policy_Valid() const{
    return m_recrawl_policy_isValid;
}

OAICreateCrawlerRequest_LineageConfiguration OAICreateCrawlerRequest::getLineageConfiguration() const {
    return m_lineage_configuration;
}
void OAICreateCrawlerRequest::setLineageConfiguration(const OAICreateCrawlerRequest_LineageConfiguration &lineage_configuration) {
    m_lineage_configuration = lineage_configuration;
    m_lineage_configuration_isSet = true;
}

bool OAICreateCrawlerRequest::is_lineage_configuration_Set() const{
    return m_lineage_configuration_isSet;
}

bool OAICreateCrawlerRequest::is_lineage_configuration_Valid() const{
    return m_lineage_configuration_isValid;
}

OAICreateCrawlerRequest_LakeFormationConfiguration OAICreateCrawlerRequest::getLakeFormationConfiguration() const {
    return m_lake_formation_configuration;
}
void OAICreateCrawlerRequest::setLakeFormationConfiguration(const OAICreateCrawlerRequest_LakeFormationConfiguration &lake_formation_configuration) {
    m_lake_formation_configuration = lake_formation_configuration;
    m_lake_formation_configuration_isSet = true;
}

bool OAICreateCrawlerRequest::is_lake_formation_configuration_Set() const{
    return m_lake_formation_configuration_isSet;
}

bool OAICreateCrawlerRequest::is_lake_formation_configuration_Valid() const{
    return m_lake_formation_configuration_isValid;
}

QString OAICreateCrawlerRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateCrawlerRequest::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateCrawlerRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateCrawlerRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICreateCrawlerRequest::getCrawlerSecurityConfiguration() const {
    return m_crawler_security_configuration;
}
void OAICreateCrawlerRequest::setCrawlerSecurityConfiguration(const QString &crawler_security_configuration) {
    m_crawler_security_configuration = crawler_security_configuration;
    m_crawler_security_configuration_isSet = true;
}

bool OAICreateCrawlerRequest::is_crawler_security_configuration_Set() const{
    return m_crawler_security_configuration_isSet;
}

bool OAICreateCrawlerRequest::is_crawler_security_configuration_Valid() const{
    return m_crawler_security_configuration_isValid;
}

QMap OAICreateCrawlerRequest::getTags() const {
    return m_tags;
}
void OAICreateCrawlerRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCrawlerRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCrawlerRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateCrawlerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_change_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recrawl_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineage_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lake_formation_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawler_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCrawlerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_role_isValid && m_targets_isValid && true;
}

} // namespace OpenAPI
