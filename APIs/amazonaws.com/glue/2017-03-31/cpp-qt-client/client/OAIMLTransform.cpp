/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMLTransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMLTransform::OAIMLTransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMLTransform::OAIMLTransform() {
    this->initializeModel();
}

OAIMLTransform::~OAIMLTransform() {}

void OAIMLTransform::initializeModel() {

    m_transform_id_isSet = false;
    m_transform_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_input_record_tables_isSet = false;
    m_input_record_tables_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_evaluation_metrics_isSet = false;
    m_evaluation_metrics_isValid = false;

    m_label_count_isSet = false;
    m_label_count_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_max_retries_isSet = false;
    m_max_retries_isValid = false;

    m_transform_encryption_isSet = false;
    m_transform_encryption_isValid = false;
}

void OAIMLTransform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMLTransform::fromJsonObject(QJsonObject json) {

    m_transform_id_isValid = ::OpenAPI::fromJsonValue(m_transform_id, json[QString("TransformId")]);
    m_transform_id_isSet = !json[QString("TransformId")].isNull() && m_transform_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("CreatedOn")]);
    m_created_on_isSet = !json[QString("CreatedOn")].isNull() && m_created_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_input_record_tables_isValid = ::OpenAPI::fromJsonValue(m_input_record_tables, json[QString("InputRecordTables")]);
    m_input_record_tables_isSet = !json[QString("InputRecordTables")].isNull() && m_input_record_tables_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_evaluation_metrics_isValid = ::OpenAPI::fromJsonValue(m_evaluation_metrics, json[QString("EvaluationMetrics")]);
    m_evaluation_metrics_isSet = !json[QString("EvaluationMetrics")].isNull() && m_evaluation_metrics_isValid;

    m_label_count_isValid = ::OpenAPI::fromJsonValue(m_label_count, json[QString("LabelCount")]);
    m_label_count_isSet = !json[QString("LabelCount")].isNull() && m_label_count_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_max_retries_isValid = ::OpenAPI::fromJsonValue(m_max_retries, json[QString("MaxRetries")]);
    m_max_retries_isSet = !json[QString("MaxRetries")].isNull() && m_max_retries_isValid;

    m_transform_encryption_isValid = ::OpenAPI::fromJsonValue(m_transform_encryption, json[QString("TransformEncryption")]);
    m_transform_encryption_isSet = !json[QString("TransformEncryption")].isNull() && m_transform_encryption_isValid;
}

QString OAIMLTransform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMLTransform::asJsonObject() const {
    QJsonObject obj;
    if (m_transform_id_isSet) {
        obj.insert(QString("TransformId"), ::OpenAPI::toJsonValue(m_transform_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("CreatedOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_input_record_tables.isSet()) {
        obj.insert(QString("InputRecordTables"), ::OpenAPI::toJsonValue(m_input_record_tables));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_evaluation_metrics.isSet()) {
        obj.insert(QString("EvaluationMetrics"), ::OpenAPI::toJsonValue(m_evaluation_metrics));
    }
    if (m_label_count_isSet) {
        obj.insert(QString("LabelCount"), ::OpenAPI::toJsonValue(m_label_count));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_max_retries_isSet) {
        obj.insert(QString("MaxRetries"), ::OpenAPI::toJsonValue(m_max_retries));
    }
    if (m_transform_encryption.isSet()) {
        obj.insert(QString("TransformEncryption"), ::OpenAPI::toJsonValue(m_transform_encryption));
    }
    return obj;
}

QString OAIMLTransform::getTransformId() const {
    return m_transform_id;
}
void OAIMLTransform::setTransformId(const QString &transform_id) {
    m_transform_id = transform_id;
    m_transform_id_isSet = true;
}

bool OAIMLTransform::is_transform_id_Set() const{
    return m_transform_id_isSet;
}

bool OAIMLTransform::is_transform_id_Valid() const{
    return m_transform_id_isValid;
}

QString OAIMLTransform::getName() const {
    return m_name;
}
void OAIMLTransform::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMLTransform::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMLTransform::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMLTransform::getDescription() const {
    return m_description;
}
void OAIMLTransform::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMLTransform::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMLTransform::is_description_Valid() const{
    return m_description_isValid;
}

OAITransformStatusType OAIMLTransform::getStatus() const {
    return m_status;
}
void OAIMLTransform::setStatus(const OAITransformStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMLTransform::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMLTransform::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIMLTransform::getCreatedOn() const {
    return m_created_on;
}
void OAIMLTransform::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIMLTransform::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIMLTransform::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QDateTime OAIMLTransform::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIMLTransform::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIMLTransform::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIMLTransform::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QList OAIMLTransform::getInputRecordTables() const {
    return m_input_record_tables;
}
void OAIMLTransform::setInputRecordTables(const QList &input_record_tables) {
    m_input_record_tables = input_record_tables;
    m_input_record_tables_isSet = true;
}

bool OAIMLTransform::is_input_record_tables_Set() const{
    return m_input_record_tables_isSet;
}

bool OAIMLTransform::is_input_record_tables_Valid() const{
    return m_input_record_tables_isValid;
}

OAIMLTransform_Parameters OAIMLTransform::getParameters() const {
    return m_parameters;
}
void OAIMLTransform::setParameters(const OAIMLTransform_Parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIMLTransform::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIMLTransform::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIMLTransform_EvaluationMetrics OAIMLTransform::getEvaluationMetrics() const {
    return m_evaluation_metrics;
}
void OAIMLTransform::setEvaluationMetrics(const OAIMLTransform_EvaluationMetrics &evaluation_metrics) {
    m_evaluation_metrics = evaluation_metrics;
    m_evaluation_metrics_isSet = true;
}

bool OAIMLTransform::is_evaluation_metrics_Set() const{
    return m_evaluation_metrics_isSet;
}

bool OAIMLTransform::is_evaluation_metrics_Valid() const{
    return m_evaluation_metrics_isValid;
}

qint32 OAIMLTransform::getLabelCount() const {
    return m_label_count;
}
void OAIMLTransform::setLabelCount(const qint32 &label_count) {
    m_label_count = label_count;
    m_label_count_isSet = true;
}

bool OAIMLTransform::is_label_count_Set() const{
    return m_label_count_isSet;
}

bool OAIMLTransform::is_label_count_Valid() const{
    return m_label_count_isValid;
}

QList OAIMLTransform::getSchema() const {
    return m_schema;
}
void OAIMLTransform::setSchema(const QList &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIMLTransform::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIMLTransform::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIMLTransform::getRole() const {
    return m_role;
}
void OAIMLTransform::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIMLTransform::is_role_Set() const{
    return m_role_isSet;
}

bool OAIMLTransform::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIMLTransform::getGlueVersion() const {
    return m_glue_version;
}
void OAIMLTransform::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAIMLTransform::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAIMLTransform::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

double OAIMLTransform::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIMLTransform::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIMLTransform::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIMLTransform::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

OAIWorkerType OAIMLTransform::getWorkerType() const {
    return m_worker_type;
}
void OAIMLTransform::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIMLTransform::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIMLTransform::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

qint32 OAIMLTransform::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIMLTransform::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIMLTransform::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIMLTransform::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

qint32 OAIMLTransform::getTimeout() const {
    return m_timeout;
}
void OAIMLTransform::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIMLTransform::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIMLTransform::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIMLTransform::getMaxRetries() const {
    return m_max_retries;
}
void OAIMLTransform::setMaxRetries(const qint32 &max_retries) {
    m_max_retries = max_retries;
    m_max_retries_isSet = true;
}

bool OAIMLTransform::is_max_retries_Set() const{
    return m_max_retries_isSet;
}

bool OAIMLTransform::is_max_retries_Valid() const{
    return m_max_retries_isValid;
}

OAICreateMLTransformRequest_TransformEncryption OAIMLTransform::getTransformEncryption() const {
    return m_transform_encryption;
}
void OAIMLTransform::setTransformEncryption(const OAICreateMLTransformRequest_TransformEncryption &transform_encryption) {
    m_transform_encryption = transform_encryption;
    m_transform_encryption_isSet = true;
}

bool OAIMLTransform::is_transform_encryption_Set() const{
    return m_transform_encryption_isSet;
}

bool OAIMLTransform::is_transform_encryption_Valid() const{
    return m_transform_encryption_isValid;
}

bool OAIMLTransform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transform_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_record_tables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMLTransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
