/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatementOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatementOutput::OAIStatementOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatementOutput::OAIStatementOutput() {
    this->initializeModel();
}

OAIStatementOutput::~OAIStatementOutput() {}

void OAIStatementOutput::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_execution_count_isSet = false;
    m_execution_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_name_isSet = false;
    m_error_name_isValid = false;

    m_error_value_isSet = false;
    m_error_value_isValid = false;

    m_traceback_isSet = false;
    m_traceback_isValid = false;
}

void OAIStatementOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatementOutput::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_execution_count_isValid = ::OpenAPI::fromJsonValue(m_execution_count, json[QString("ExecutionCount")]);
    m_execution_count_isSet = !json[QString("ExecutionCount")].isNull() && m_execution_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_name_isValid = ::OpenAPI::fromJsonValue(m_error_name, json[QString("ErrorName")]);
    m_error_name_isSet = !json[QString("ErrorName")].isNull() && m_error_name_isValid;

    m_error_value_isValid = ::OpenAPI::fromJsonValue(m_error_value, json[QString("ErrorValue")]);
    m_error_value_isSet = !json[QString("ErrorValue")].isNull() && m_error_value_isValid;

    m_traceback_isValid = ::OpenAPI::fromJsonValue(m_traceback, json[QString("Traceback")]);
    m_traceback_isSet = !json[QString("Traceback")].isNull() && m_traceback_isValid;
}

QString OAIStatementOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatementOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_execution_count_isSet) {
        obj.insert(QString("ExecutionCount"), ::OpenAPI::toJsonValue(m_execution_count));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_name_isSet) {
        obj.insert(QString("ErrorName"), ::OpenAPI::toJsonValue(m_error_name));
    }
    if (m_error_value_isSet) {
        obj.insert(QString("ErrorValue"), ::OpenAPI::toJsonValue(m_error_value));
    }
    if (m_traceback.isSet()) {
        obj.insert(QString("Traceback"), ::OpenAPI::toJsonValue(m_traceback));
    }
    return obj;
}

OAIStatementOutput_Data OAIStatementOutput::getData() const {
    return m_data;
}
void OAIStatementOutput::setData(const OAIStatementOutput_Data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIStatementOutput::is_data_Set() const{
    return m_data_isSet;
}

bool OAIStatementOutput::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIStatementOutput::getExecutionCount() const {
    return m_execution_count;
}
void OAIStatementOutput::setExecutionCount(const qint32 &execution_count) {
    m_execution_count = execution_count;
    m_execution_count_isSet = true;
}

bool OAIStatementOutput::is_execution_count_Set() const{
    return m_execution_count_isSet;
}

bool OAIStatementOutput::is_execution_count_Valid() const{
    return m_execution_count_isValid;
}

OAIStatementState OAIStatementOutput::getStatus() const {
    return m_status;
}
void OAIStatementOutput::setStatus(const OAIStatementState &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStatementOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStatementOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStatementOutput::getErrorName() const {
    return m_error_name;
}
void OAIStatementOutput::setErrorName(const QString &error_name) {
    m_error_name = error_name;
    m_error_name_isSet = true;
}

bool OAIStatementOutput::is_error_name_Set() const{
    return m_error_name_isSet;
}

bool OAIStatementOutput::is_error_name_Valid() const{
    return m_error_name_isValid;
}

QString OAIStatementOutput::getErrorValue() const {
    return m_error_value;
}
void OAIStatementOutput::setErrorValue(const QString &error_value) {
    m_error_value = error_value;
    m_error_value_isSet = true;
}

bool OAIStatementOutput::is_error_value_Set() const{
    return m_error_value_isSet;
}

bool OAIStatementOutput::is_error_value_Valid() const{
    return m_error_value_isValid;
}

QList OAIStatementOutput::getTraceback() const {
    return m_traceback;
}
void OAIStatementOutput::setTraceback(const QList &traceback) {
    m_traceback = traceback;
    m_traceback_isSet = true;
}

bool OAIStatementOutput::is_traceback_Set() const{
    return m_traceback_isSet;
}

bool OAIStatementOutput::is_traceback_Valid() const{
    return m_traceback_isValid;
}

bool OAIStatementOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traceback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatementOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
