/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWorkflowRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWorkflowRequest::OAIUpdateWorkflowRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWorkflowRequest::OAIUpdateWorkflowRequest() {
    this->initializeModel();
}

OAIUpdateWorkflowRequest::~OAIUpdateWorkflowRequest() {}

void OAIUpdateWorkflowRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_default_run_properties_isSet = false;
    m_default_run_properties_isValid = false;

    m_max_concurrent_runs_isSet = false;
    m_max_concurrent_runs_isValid = false;
}

void OAIUpdateWorkflowRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWorkflowRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_default_run_properties_isValid = ::OpenAPI::fromJsonValue(m_default_run_properties, json[QString("DefaultRunProperties")]);
    m_default_run_properties_isSet = !json[QString("DefaultRunProperties")].isNull() && m_default_run_properties_isValid;

    m_max_concurrent_runs_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_runs, json[QString("MaxConcurrentRuns")]);
    m_max_concurrent_runs_isSet = !json[QString("MaxConcurrentRuns")].isNull() && m_max_concurrent_runs_isValid;
}

QString OAIUpdateWorkflowRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWorkflowRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_default_run_properties.isSet()) {
        obj.insert(QString("DefaultRunProperties"), ::OpenAPI::toJsonValue(m_default_run_properties));
    }
    if (m_max_concurrent_runs_isSet) {
        obj.insert(QString("MaxConcurrentRuns"), ::OpenAPI::toJsonValue(m_max_concurrent_runs));
    }
    return obj;
}

QString OAIUpdateWorkflowRequest::getName() const {
    return m_name;
}
void OAIUpdateWorkflowRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateWorkflowRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateWorkflowRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateWorkflowRequest::getDescription() const {
    return m_description;
}
void OAIUpdateWorkflowRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateWorkflowRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateWorkflowRequest::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAIUpdateWorkflowRequest::getDefaultRunProperties() const {
    return m_default_run_properties;
}
void OAIUpdateWorkflowRequest::setDefaultRunProperties(const QMap &default_run_properties) {
    m_default_run_properties = default_run_properties;
    m_default_run_properties_isSet = true;
}

bool OAIUpdateWorkflowRequest::is_default_run_properties_Set() const{
    return m_default_run_properties_isSet;
}

bool OAIUpdateWorkflowRequest::is_default_run_properties_Valid() const{
    return m_default_run_properties_isValid;
}

qint32 OAIUpdateWorkflowRequest::getMaxConcurrentRuns() const {
    return m_max_concurrent_runs;
}
void OAIUpdateWorkflowRequest::setMaxConcurrentRuns(const qint32 &max_concurrent_runs) {
    m_max_concurrent_runs = max_concurrent_runs;
    m_max_concurrent_runs_isSet = true;
}

bool OAIUpdateWorkflowRequest::is_max_concurrent_runs_Set() const{
    return m_max_concurrent_runs_isSet;
}

bool OAIUpdateWorkflowRequest::is_max_concurrent_runs_Valid() const{
    return m_max_concurrent_runs_isValid;
}

bool OAIUpdateWorkflowRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_runs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWorkflowRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
