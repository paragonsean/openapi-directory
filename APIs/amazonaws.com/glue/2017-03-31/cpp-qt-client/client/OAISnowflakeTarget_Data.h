/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISnowflakeTarget_Data.h
 *
 * 
 */

#ifndef OAISnowflakeTarget_Data_H
#define OAISnowflakeTarget_Data_H

#include <QJsonObject>

#include "OAISnowflakeNodeData_Connection.h"
#include "OAISnowflakeNodeData_IamRole.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISnowflakeNodeData_Connection;
class OAISnowflakeNodeData_IamRole;

class OAISnowflakeTarget_Data : public OAIObject {
public:
    OAISnowflakeTarget_Data();
    OAISnowflakeTarget_Data(QString json);
    ~OAISnowflakeTarget_Data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    OAISnowflakeNodeData_Connection getConnection() const;
    void setConnection(const OAISnowflakeNodeData_Connection &connection);
    bool is_connection_Set() const;
    bool is_connection_Valid() const;

    QString getSchema() const;
    void setSchema(const QString &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    QString getTable() const;
    void setTable(const QString &table);
    bool is_table_Set() const;
    bool is_table_Valid() const;

    QString getDatabase() const;
    void setDatabase(const QString &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getTempDir() const;
    void setTempDir(const QString &temp_dir);
    bool is_temp_dir_Set() const;
    bool is_temp_dir_Valid() const;

    OAISnowflakeNodeData_IamRole getIamRole() const;
    void setIamRole(const OAISnowflakeNodeData_IamRole &iam_role);
    bool is_iam_role_Set() const;
    bool is_iam_role_Valid() const;

    QMap getAdditionalOptions() const;
    void setAdditionalOptions(const QMap &additional_options);
    bool is_additional_options_Set() const;
    bool is_additional_options_Valid() const;

    QString getSampleQuery() const;
    void setSampleQuery(const QString &sample_query);
    bool is_sample_query_Set() const;
    bool is_sample_query_Valid() const;

    QString getPreAction() const;
    void setPreAction(const QString &pre_action);
    bool is_pre_action_Set() const;
    bool is_pre_action_Valid() const;

    QString getPostAction() const;
    void setPostAction(const QString &post_action);
    bool is_post_action_Set() const;
    bool is_post_action_Valid() const;

    QString getAction() const;
    void setAction(const QString &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    bool getUpsert() const;
    void setUpsert(const bool &upsert);
    bool is_upsert_Set() const;
    bool is_upsert_Valid() const;

    QString getMergeAction() const;
    void setMergeAction(const QString &merge_action);
    bool is_merge_action_Set() const;
    bool is_merge_action_Valid() const;

    QString getMergeWhenMatched() const;
    void setMergeWhenMatched(const QString &merge_when_matched);
    bool is_merge_when_matched_Set() const;
    bool is_merge_when_matched_Valid() const;

    QString getMergeWhenNotMatched() const;
    void setMergeWhenNotMatched(const QString &merge_when_not_matched);
    bool is_merge_when_not_matched_Set() const;
    bool is_merge_when_not_matched_Valid() const;

    QString getMergeClause() const;
    void setMergeClause(const QString &merge_clause);
    bool is_merge_clause_Set() const;
    bool is_merge_clause_Valid() const;

    QString getStagingTable() const;
    void setStagingTable(const QString &staging_table);
    bool is_staging_table_Set() const;
    bool is_staging_table_Valid() const;

    QList getSelectedColumns() const;
    void setSelectedColumns(const QList &selected_columns);
    bool is_selected_columns_Set() const;
    bool is_selected_columns_Valid() const;

    bool getAutoPushdown() const;
    void setAutoPushdown(const bool &auto_pushdown);
    bool is_auto_pushdown_Set() const;
    bool is_auto_pushdown_Valid() const;

    QList getTableSchema() const;
    void setTableSchema(const QList &table_schema);
    bool is_table_schema_Set() const;
    bool is_table_schema_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    OAISnowflakeNodeData_Connection m_connection;
    bool m_connection_isSet;
    bool m_connection_isValid;

    QString m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    QString m_table;
    bool m_table_isSet;
    bool m_table_isValid;

    QString m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_temp_dir;
    bool m_temp_dir_isSet;
    bool m_temp_dir_isValid;

    OAISnowflakeNodeData_IamRole m_iam_role;
    bool m_iam_role_isSet;
    bool m_iam_role_isValid;

    QMap m_additional_options;
    bool m_additional_options_isSet;
    bool m_additional_options_isValid;

    QString m_sample_query;
    bool m_sample_query_isSet;
    bool m_sample_query_isValid;

    QString m_pre_action;
    bool m_pre_action_isSet;
    bool m_pre_action_isValid;

    QString m_post_action;
    bool m_post_action_isSet;
    bool m_post_action_isValid;

    QString m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    bool m_upsert;
    bool m_upsert_isSet;
    bool m_upsert_isValid;

    QString m_merge_action;
    bool m_merge_action_isSet;
    bool m_merge_action_isValid;

    QString m_merge_when_matched;
    bool m_merge_when_matched_isSet;
    bool m_merge_when_matched_isValid;

    QString m_merge_when_not_matched;
    bool m_merge_when_not_matched_isSet;
    bool m_merge_when_not_matched_isValid;

    QString m_merge_clause;
    bool m_merge_clause_isSet;
    bool m_merge_clause_isValid;

    QString m_staging_table;
    bool m_staging_table_isSet;
    bool m_staging_table_isValid;

    QList m_selected_columns;
    bool m_selected_columns_isSet;
    bool m_selected_columns_isValid;

    bool m_auto_pushdown;
    bool m_auto_pushdown_isSet;
    bool m_auto_pushdown_isValid;

    QList m_table_schema;
    bool m_table_schema_isSet;
    bool m_table_schema_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISnowflakeTarget_Data)

#endif // OAISnowflakeTarget_Data_H
