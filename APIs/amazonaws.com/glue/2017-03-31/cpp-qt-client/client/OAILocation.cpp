/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_jdbc_isSet = false;
    m_jdbc_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;

    m_dynamo_db_isSet = false;
    m_dynamo_db_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_jdbc_isValid = ::OpenAPI::fromJsonValue(m_jdbc, json[QString("Jdbc")]);
    m_jdbc_isSet = !json[QString("Jdbc")].isNull() && m_jdbc_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;

    m_dynamo_db_isValid = ::OpenAPI::fromJsonValue(m_dynamo_db, json[QString("DynamoDB")]);
    m_dynamo_db_isSet = !json[QString("DynamoDB")].isNull() && m_dynamo_db_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_jdbc.isSet()) {
        obj.insert(QString("Jdbc"), ::OpenAPI::toJsonValue(m_jdbc));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    if (m_dynamo_db.isSet()) {
        obj.insert(QString("DynamoDB"), ::OpenAPI::toJsonValue(m_dynamo_db));
    }
    return obj;
}

QList OAILocation::getJdbc() const {
    return m_jdbc;
}
void OAILocation::setJdbc(const QList &jdbc) {
    m_jdbc = jdbc;
    m_jdbc_isSet = true;
}

bool OAILocation::is_jdbc_Set() const{
    return m_jdbc_isSet;
}

bool OAILocation::is_jdbc_Valid() const{
    return m_jdbc_isValid;
}

QList OAILocation::getS3() const {
    return m_s3;
}
void OAILocation::setS3(const QList &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAILocation::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAILocation::is_s3_Valid() const{
    return m_s3_isValid;
}

QList OAILocation::getDynamoDb() const {
    return m_dynamo_db;
}
void OAILocation::setDynamoDb(const QList &dynamo_db) {
    m_dynamo_db = dynamo_db;
    m_dynamo_db_isSet = true;
}

bool OAILocation::is_dynamo_db_Set() const{
    return m_dynamo_db_isSet;
}

bool OAILocation::is_dynamo_db_Valid() const{
    return m_dynamo_db_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jdbc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_db.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
