/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunStatementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunStatementRequest::OAIRunStatementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunStatementRequest::OAIRunStatementRequest() {
    this->initializeModel();
}

OAIRunStatementRequest::~OAIRunStatementRequest() {}

void OAIRunStatementRequest::initializeModel() {

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_request_origin_isSet = false;
    m_request_origin_isValid = false;
}

void OAIRunStatementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunStatementRequest::fromJsonObject(QJsonObject json) {

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("SessionId")]);
    m_session_id_isSet = !json[QString("SessionId")].isNull() && m_session_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_request_origin_isValid = ::OpenAPI::fromJsonValue(m_request_origin, json[QString("RequestOrigin")]);
    m_request_origin_isSet = !json[QString("RequestOrigin")].isNull() && m_request_origin_isValid;
}

QString OAIRunStatementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunStatementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_session_id_isSet) {
        obj.insert(QString("SessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_request_origin_isSet) {
        obj.insert(QString("RequestOrigin"), ::OpenAPI::toJsonValue(m_request_origin));
    }
    return obj;
}

QString OAIRunStatementRequest::getSessionId() const {
    return m_session_id;
}
void OAIRunStatementRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIRunStatementRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIRunStatementRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIRunStatementRequest::getCode() const {
    return m_code;
}
void OAIRunStatementRequest::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRunStatementRequest::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRunStatementRequest::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIRunStatementRequest::getRequestOrigin() const {
    return m_request_origin;
}
void OAIRunStatementRequest::setRequestOrigin(const QString &request_origin) {
    m_request_origin = request_origin;
    m_request_origin_isSet = true;
}

bool OAIRunStatementRequest::is_request_origin_Set() const{
    return m_request_origin_isSet;
}

bool OAIRunStatementRequest::is_request_origin_Valid() const{
    return m_request_origin_isValid;
}

bool OAIRunStatementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_origin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunStatementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_session_id_isValid && m_code_isValid && true;
}

} // namespace OpenAPI
