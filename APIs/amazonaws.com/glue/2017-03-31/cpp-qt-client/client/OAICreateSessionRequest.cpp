/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSessionRequest::OAICreateSessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSessionRequest::OAICreateSessionRequest() {
    this->initializeModel();
}

OAICreateSessionRequest::~OAICreateSessionRequest() {}

void OAICreateSessionRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_default_arguments_isSet = false;
    m_default_arguments_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_security_configuration_isSet = false;
    m_security_configuration_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_request_origin_isSet = false;
    m_request_origin_isValid = false;
}

void OAICreateSessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSessionRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("Command")]);
    m_command_isSet = !json[QString("Command")].isNull() && m_command_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("IdleTimeout")]);
    m_idle_timeout_isSet = !json[QString("IdleTimeout")].isNull() && m_idle_timeout_isValid;

    m_default_arguments_isValid = ::OpenAPI::fromJsonValue(m_default_arguments, json[QString("DefaultArguments")]);
    m_default_arguments_isSet = !json[QString("DefaultArguments")].isNull() && m_default_arguments_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("Connections")]);
    m_connections_isSet = !json[QString("Connections")].isNull() && m_connections_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_security_configuration, json[QString("SecurityConfiguration")]);
    m_security_configuration_isSet = !json[QString("SecurityConfiguration")].isNull() && m_security_configuration_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_request_origin_isValid = ::OpenAPI::fromJsonValue(m_request_origin, json[QString("RequestOrigin")]);
    m_request_origin_isSet = !json[QString("RequestOrigin")].isNull() && m_request_origin_isValid;
}

QString OAICreateSessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_command.isSet()) {
        obj.insert(QString("Command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("IdleTimeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_default_arguments.isSet()) {
        obj.insert(QString("DefaultArguments"), ::OpenAPI::toJsonValue(m_default_arguments));
    }
    if (m_connections.isSet()) {
        obj.insert(QString("Connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_security_configuration_isSet) {
        obj.insert(QString("SecurityConfiguration"), ::OpenAPI::toJsonValue(m_security_configuration));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_request_origin_isSet) {
        obj.insert(QString("RequestOrigin"), ::OpenAPI::toJsonValue(m_request_origin));
    }
    return obj;
}

QString OAICreateSessionRequest::getId() const {
    return m_id;
}
void OAICreateSessionRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateSessionRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateSessionRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateSessionRequest::getDescription() const {
    return m_description;
}
void OAICreateSessionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSessionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSessionRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSessionRequest::getRole() const {
    return m_role;
}
void OAICreateSessionRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateSessionRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateSessionRequest::is_role_Valid() const{
    return m_role_isValid;
}

OAICreateSessionRequest_Command OAICreateSessionRequest::getCommand() const {
    return m_command;
}
void OAICreateSessionRequest::setCommand(const OAICreateSessionRequest_Command &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAICreateSessionRequest::is_command_Set() const{
    return m_command_isSet;
}

bool OAICreateSessionRequest::is_command_Valid() const{
    return m_command_isValid;
}

qint32 OAICreateSessionRequest::getTimeout() const {
    return m_timeout;
}
void OAICreateSessionRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAICreateSessionRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAICreateSessionRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAICreateSessionRequest::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAICreateSessionRequest::setIdleTimeout(const qint32 &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAICreateSessionRequest::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAICreateSessionRequest::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

QMap OAICreateSessionRequest::getDefaultArguments() const {
    return m_default_arguments;
}
void OAICreateSessionRequest::setDefaultArguments(const QMap &default_arguments) {
    m_default_arguments = default_arguments;
    m_default_arguments_isSet = true;
}

bool OAICreateSessionRequest::is_default_arguments_Set() const{
    return m_default_arguments_isSet;
}

bool OAICreateSessionRequest::is_default_arguments_Valid() const{
    return m_default_arguments_isValid;
}

OAICreateSessionRequest_Connections OAICreateSessionRequest::getConnections() const {
    return m_connections;
}
void OAICreateSessionRequest::setConnections(const OAICreateSessionRequest_Connections &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAICreateSessionRequest::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAICreateSessionRequest::is_connections_Valid() const{
    return m_connections_isValid;
}

double OAICreateSessionRequest::getMaxCapacity() const {
    return m_max_capacity;
}
void OAICreateSessionRequest::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAICreateSessionRequest::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAICreateSessionRequest::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

qint32 OAICreateSessionRequest::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAICreateSessionRequest::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAICreateSessionRequest::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAICreateSessionRequest::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

OAIWorkerType OAICreateSessionRequest::getWorkerType() const {
    return m_worker_type;
}
void OAICreateSessionRequest::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAICreateSessionRequest::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAICreateSessionRequest::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

QString OAICreateSessionRequest::getSecurityConfiguration() const {
    return m_security_configuration;
}
void OAICreateSessionRequest::setSecurityConfiguration(const QString &security_configuration) {
    m_security_configuration = security_configuration;
    m_security_configuration_isSet = true;
}

bool OAICreateSessionRequest::is_security_configuration_Set() const{
    return m_security_configuration_isSet;
}

bool OAICreateSessionRequest::is_security_configuration_Valid() const{
    return m_security_configuration_isValid;
}

QString OAICreateSessionRequest::getGlueVersion() const {
    return m_glue_version;
}
void OAICreateSessionRequest::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAICreateSessionRequest::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAICreateSessionRequest::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

QMap OAICreateSessionRequest::getTags() const {
    return m_tags;
}
void OAICreateSessionRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSessionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSessionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateSessionRequest::getRequestOrigin() const {
    return m_request_origin;
}
void OAICreateSessionRequest::setRequestOrigin(const QString &request_origin) {
    m_request_origin = request_origin;
    m_request_origin_isSet = true;
}

bool OAICreateSessionRequest::is_request_origin_Set() const{
    return m_request_origin_isSet;
}

bool OAICreateSessionRequest::is_request_origin_Valid() const{
    return m_request_origin_isValid;
}

bool OAICreateSessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_origin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_role_isValid && m_command_isValid && true;
}

} // namespace OpenAPI
