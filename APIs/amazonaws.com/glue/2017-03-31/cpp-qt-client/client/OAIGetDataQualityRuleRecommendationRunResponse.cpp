/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDataQualityRuleRecommendationRunResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDataQualityRuleRecommendationRunResponse::OAIGetDataQualityRuleRecommendationRunResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDataQualityRuleRecommendationRunResponse::OAIGetDataQualityRuleRecommendationRunResponse() {
    this->initializeModel();
}

OAIGetDataQualityRuleRecommendationRunResponse::~OAIGetDataQualityRuleRecommendationRunResponse() {}

void OAIGetDataQualityRuleRecommendationRunResponse::initializeModel() {

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_string_isSet = false;
    m_error_string_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_execution_time_isSet = false;
    m_execution_time_isValid = false;

    m_recommended_ruleset_isSet = false;
    m_recommended_ruleset_isValid = false;

    m_created_ruleset_name_isSet = false;
    m_created_ruleset_name_isValid = false;
}

void OAIGetDataQualityRuleRecommendationRunResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDataQualityRuleRecommendationRunResponse::fromJsonObject(QJsonObject json) {

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("RunId")]);
    m_run_id_isSet = !json[QString("RunId")].isNull() && m_run_id_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_string_isValid = ::OpenAPI::fromJsonValue(m_error_string, json[QString("ErrorString")]);
    m_error_string_isSet = !json[QString("ErrorString")].isNull() && m_error_string_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_execution_time_isValid = ::OpenAPI::fromJsonValue(m_execution_time, json[QString("ExecutionTime")]);
    m_execution_time_isSet = !json[QString("ExecutionTime")].isNull() && m_execution_time_isValid;

    m_recommended_ruleset_isValid = ::OpenAPI::fromJsonValue(m_recommended_ruleset, json[QString("RecommendedRuleset")]);
    m_recommended_ruleset_isSet = !json[QString("RecommendedRuleset")].isNull() && m_recommended_ruleset_isValid;

    m_created_ruleset_name_isValid = ::OpenAPI::fromJsonValue(m_created_ruleset_name, json[QString("CreatedRulesetName")]);
    m_created_ruleset_name_isSet = !json[QString("CreatedRulesetName")].isNull() && m_created_ruleset_name_isValid;
}

QString OAIGetDataQualityRuleRecommendationRunResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDataQualityRuleRecommendationRunResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_run_id_isSet) {
        obj.insert(QString("RunId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_string_isSet) {
        obj.insert(QString("ErrorString"), ::OpenAPI::toJsonValue(m_error_string));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_execution_time_isSet) {
        obj.insert(QString("ExecutionTime"), ::OpenAPI::toJsonValue(m_execution_time));
    }
    if (m_recommended_ruleset_isSet) {
        obj.insert(QString("RecommendedRuleset"), ::OpenAPI::toJsonValue(m_recommended_ruleset));
    }
    if (m_created_ruleset_name_isSet) {
        obj.insert(QString("CreatedRulesetName"), ::OpenAPI::toJsonValue(m_created_ruleset_name));
    }
    return obj;
}

QString OAIGetDataQualityRuleRecommendationRunResponse::getRunId() const {
    return m_run_id;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_run_id_Valid() const{
    return m_run_id_isValid;
}

OAIGetDataQualityRuleRecommendationRunResponse_DataSource OAIGetDataQualityRuleRecommendationRunResponse::getDataSource() const {
    return m_data_source;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setDataSource(const OAIGetDataQualityRuleRecommendationRunResponse_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIGetDataQualityRuleRecommendationRunResponse::getRole() const {
    return m_role;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIGetDataQualityRuleRecommendationRunResponse::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

qint32 OAIGetDataQualityRuleRecommendationRunResponse::getTimeout() const {
    return m_timeout;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_timeout_Valid() const{
    return m_timeout_isValid;
}

OAITaskStatusType OAIGetDataQualityRuleRecommendationRunResponse::getStatus() const {
    return m_status;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setStatus(const OAITaskStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetDataQualityRuleRecommendationRunResponse::getErrorString() const {
    return m_error_string;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setErrorString(const QString &error_string) {
    m_error_string = error_string;
    m_error_string_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_error_string_Set() const{
    return m_error_string_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_error_string_Valid() const{
    return m_error_string_isValid;
}

QDateTime OAIGetDataQualityRuleRecommendationRunResponse::getStartedOn() const {
    return m_started_on;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAIGetDataQualityRuleRecommendationRunResponse::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QDateTime OAIGetDataQualityRuleRecommendationRunResponse::getCompletedOn() const {
    return m_completed_on;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

qint32 OAIGetDataQualityRuleRecommendationRunResponse::getExecutionTime() const {
    return m_execution_time;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setExecutionTime(const qint32 &execution_time) {
    m_execution_time = execution_time;
    m_execution_time_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_execution_time_Set() const{
    return m_execution_time_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_execution_time_Valid() const{
    return m_execution_time_isValid;
}

QString OAIGetDataQualityRuleRecommendationRunResponse::getRecommendedRuleset() const {
    return m_recommended_ruleset;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setRecommendedRuleset(const QString &recommended_ruleset) {
    m_recommended_ruleset = recommended_ruleset;
    m_recommended_ruleset_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_recommended_ruleset_Set() const{
    return m_recommended_ruleset_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_recommended_ruleset_Valid() const{
    return m_recommended_ruleset_isValid;
}

QString OAIGetDataQualityRuleRecommendationRunResponse::getCreatedRulesetName() const {
    return m_created_ruleset_name;
}
void OAIGetDataQualityRuleRecommendationRunResponse::setCreatedRulesetName(const QString &created_ruleset_name) {
    m_created_ruleset_name = created_ruleset_name;
    m_created_ruleset_name_isSet = true;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_created_ruleset_name_Set() const{
    return m_created_ruleset_name_isSet;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::is_created_ruleset_name_Valid() const{
    return m_created_ruleset_name_isValid;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_ruleset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_ruleset_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDataQualityRuleRecommendationRunResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
