/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrawler.h
 *
 * Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the Glue Data Catalog.
 */

#ifndef OAICrawler_H
#define OAICrawler_H

#include <QJsonObject>

#include "OAICrawlerState.h"
#include "OAICrawler_LakeFormationConfiguration.h"
#include "OAICrawler_LastCrawl.h"
#include "OAICrawler_LineageConfiguration.h"
#include "OAICrawler_Schedule.h"
#include "OAICrawler_SchemaChangePolicy.h"
#include "OAICrawler_Targets.h"
#include "OAICreateCrawlerRequest_RecrawlPolicy.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICrawler_Targets;
class OAICreateCrawlerRequest_RecrawlPolicy;
class OAICrawler_SchemaChangePolicy;
class OAICrawler_LineageConfiguration;
class OAICrawler_Schedule;
class OAICrawler_LastCrawl;
class OAICrawler_LakeFormationConfiguration;

class OAICrawler : public OAIObject {
public:
    OAICrawler();
    OAICrawler(QString json);
    ~OAICrawler() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    OAICrawler_Targets getTargets() const;
    void setTargets(const OAICrawler_Targets &targets);
    bool is_targets_Set() const;
    bool is_targets_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getClassifiers() const;
    void setClassifiers(const QList &classifiers);
    bool is_classifiers_Set() const;
    bool is_classifiers_Valid() const;

    OAICreateCrawlerRequest_RecrawlPolicy getRecrawlPolicy() const;
    void setRecrawlPolicy(const OAICreateCrawlerRequest_RecrawlPolicy &recrawl_policy);
    bool is_recrawl_policy_Set() const;
    bool is_recrawl_policy_Valid() const;

    OAICrawler_SchemaChangePolicy getSchemaChangePolicy() const;
    void setSchemaChangePolicy(const OAICrawler_SchemaChangePolicy &schema_change_policy);
    bool is_schema_change_policy_Set() const;
    bool is_schema_change_policy_Valid() const;

    OAICrawler_LineageConfiguration getLineageConfiguration() const;
    void setLineageConfiguration(const OAICrawler_LineageConfiguration &lineage_configuration);
    bool is_lineage_configuration_Set() const;
    bool is_lineage_configuration_Valid() const;

    OAICrawlerState getState() const;
    void setState(const OAICrawlerState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTablePrefix() const;
    void setTablePrefix(const QString &table_prefix);
    bool is_table_prefix_Set() const;
    bool is_table_prefix_Valid() const;

    OAICrawler_Schedule getSchedule() const;
    void setSchedule(const OAICrawler_Schedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    qint32 getCrawlElapsedTime() const;
    void setCrawlElapsedTime(const qint32 &crawl_elapsed_time);
    bool is_crawl_elapsed_time_Set() const;
    bool is_crawl_elapsed_time_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    OAICrawler_LastCrawl getLastCrawl() const;
    void setLastCrawl(const OAICrawler_LastCrawl &last_crawl);
    bool is_last_crawl_Set() const;
    bool is_last_crawl_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getConfiguration() const;
    void setConfiguration(const QString &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    QString getCrawlerSecurityConfiguration() const;
    void setCrawlerSecurityConfiguration(const QString &crawler_security_configuration);
    bool is_crawler_security_configuration_Set() const;
    bool is_crawler_security_configuration_Valid() const;

    OAICrawler_LakeFormationConfiguration getLakeFormationConfiguration() const;
    void setLakeFormationConfiguration(const OAICrawler_LakeFormationConfiguration &lake_formation_configuration);
    bool is_lake_formation_configuration_Set() const;
    bool is_lake_formation_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    OAICrawler_Targets m_targets;
    bool m_targets_isSet;
    bool m_targets_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_classifiers;
    bool m_classifiers_isSet;
    bool m_classifiers_isValid;

    OAICreateCrawlerRequest_RecrawlPolicy m_recrawl_policy;
    bool m_recrawl_policy_isSet;
    bool m_recrawl_policy_isValid;

    OAICrawler_SchemaChangePolicy m_schema_change_policy;
    bool m_schema_change_policy_isSet;
    bool m_schema_change_policy_isValid;

    OAICrawler_LineageConfiguration m_lineage_configuration;
    bool m_lineage_configuration_isSet;
    bool m_lineage_configuration_isValid;

    OAICrawlerState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_table_prefix;
    bool m_table_prefix_isSet;
    bool m_table_prefix_isValid;

    OAICrawler_Schedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    qint32 m_crawl_elapsed_time;
    bool m_crawl_elapsed_time_isSet;
    bool m_crawl_elapsed_time_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    OAICrawler_LastCrawl m_last_crawl;
    bool m_last_crawl_isSet;
    bool m_last_crawl_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    QString m_crawler_security_configuration;
    bool m_crawler_security_configuration_isSet;
    bool m_crawler_security_configuration_isValid;

    OAICrawler_LakeFormationConfiguration m_lake_formation_configuration;
    bool m_lake_formation_configuration_isSet;
    bool m_lake_formation_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrawler)

#endif // OAICrawler_H
