/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJDBCConnectorSource_AdditionalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJDBCConnectorSource_AdditionalOptions::OAIJDBCConnectorSource_AdditionalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJDBCConnectorSource_AdditionalOptions::OAIJDBCConnectorSource_AdditionalOptions() {
    this->initializeModel();
}

OAIJDBCConnectorSource_AdditionalOptions::~OAIJDBCConnectorSource_AdditionalOptions() {}

void OAIJDBCConnectorSource_AdditionalOptions::initializeModel() {

    m_filter_predicate_isSet = false;
    m_filter_predicate_isValid = false;

    m_partition_column_isSet = false;
    m_partition_column_isValid = false;

    m_lower_bound_isSet = false;
    m_lower_bound_isValid = false;

    m_upper_bound_isSet = false;
    m_upper_bound_isValid = false;

    m_num_partitions_isSet = false;
    m_num_partitions_isValid = false;

    m_job_bookmark_keys_isSet = false;
    m_job_bookmark_keys_isValid = false;

    m_job_bookmark_keys_sort_order_isSet = false;
    m_job_bookmark_keys_sort_order_isValid = false;

    m_data_type_mapping_isSet = false;
    m_data_type_mapping_isValid = false;
}

void OAIJDBCConnectorSource_AdditionalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJDBCConnectorSource_AdditionalOptions::fromJsonObject(QJsonObject json) {

    m_filter_predicate_isValid = ::OpenAPI::fromJsonValue(m_filter_predicate, json[QString("FilterPredicate")]);
    m_filter_predicate_isSet = !json[QString("FilterPredicate")].isNull() && m_filter_predicate_isValid;

    m_partition_column_isValid = ::OpenAPI::fromJsonValue(m_partition_column, json[QString("PartitionColumn")]);
    m_partition_column_isSet = !json[QString("PartitionColumn")].isNull() && m_partition_column_isValid;

    m_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_lower_bound, json[QString("LowerBound")]);
    m_lower_bound_isSet = !json[QString("LowerBound")].isNull() && m_lower_bound_isValid;

    m_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_upper_bound, json[QString("UpperBound")]);
    m_upper_bound_isSet = !json[QString("UpperBound")].isNull() && m_upper_bound_isValid;

    m_num_partitions_isValid = ::OpenAPI::fromJsonValue(m_num_partitions, json[QString("NumPartitions")]);
    m_num_partitions_isSet = !json[QString("NumPartitions")].isNull() && m_num_partitions_isValid;

    m_job_bookmark_keys_isValid = ::OpenAPI::fromJsonValue(m_job_bookmark_keys, json[QString("JobBookmarkKeys")]);
    m_job_bookmark_keys_isSet = !json[QString("JobBookmarkKeys")].isNull() && m_job_bookmark_keys_isValid;

    m_job_bookmark_keys_sort_order_isValid = ::OpenAPI::fromJsonValue(m_job_bookmark_keys_sort_order, json[QString("JobBookmarkKeysSortOrder")]);
    m_job_bookmark_keys_sort_order_isSet = !json[QString("JobBookmarkKeysSortOrder")].isNull() && m_job_bookmark_keys_sort_order_isValid;

    m_data_type_mapping_isValid = ::OpenAPI::fromJsonValue(m_data_type_mapping, json[QString("DataTypeMapping")]);
    m_data_type_mapping_isSet = !json[QString("DataTypeMapping")].isNull() && m_data_type_mapping_isValid;
}

QString OAIJDBCConnectorSource_AdditionalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJDBCConnectorSource_AdditionalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_predicate_isSet) {
        obj.insert(QString("FilterPredicate"), ::OpenAPI::toJsonValue(m_filter_predicate));
    }
    if (m_partition_column_isSet) {
        obj.insert(QString("PartitionColumn"), ::OpenAPI::toJsonValue(m_partition_column));
    }
    if (m_lower_bound_isSet) {
        obj.insert(QString("LowerBound"), ::OpenAPI::toJsonValue(m_lower_bound));
    }
    if (m_upper_bound_isSet) {
        obj.insert(QString("UpperBound"), ::OpenAPI::toJsonValue(m_upper_bound));
    }
    if (m_num_partitions_isSet) {
        obj.insert(QString("NumPartitions"), ::OpenAPI::toJsonValue(m_num_partitions));
    }
    if (m_job_bookmark_keys.isSet()) {
        obj.insert(QString("JobBookmarkKeys"), ::OpenAPI::toJsonValue(m_job_bookmark_keys));
    }
    if (m_job_bookmark_keys_sort_order_isSet) {
        obj.insert(QString("JobBookmarkKeysSortOrder"), ::OpenAPI::toJsonValue(m_job_bookmark_keys_sort_order));
    }
    if (m_data_type_mapping.isSet()) {
        obj.insert(QString("DataTypeMapping"), ::OpenAPI::toJsonValue(m_data_type_mapping));
    }
    return obj;
}

QString OAIJDBCConnectorSource_AdditionalOptions::getFilterPredicate() const {
    return m_filter_predicate;
}
void OAIJDBCConnectorSource_AdditionalOptions::setFilterPredicate(const QString &filter_predicate) {
    m_filter_predicate = filter_predicate;
    m_filter_predicate_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_filter_predicate_Set() const{
    return m_filter_predicate_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_filter_predicate_Valid() const{
    return m_filter_predicate_isValid;
}

QString OAIJDBCConnectorSource_AdditionalOptions::getPartitionColumn() const {
    return m_partition_column;
}
void OAIJDBCConnectorSource_AdditionalOptions::setPartitionColumn(const QString &partition_column) {
    m_partition_column = partition_column;
    m_partition_column_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_partition_column_Set() const{
    return m_partition_column_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_partition_column_Valid() const{
    return m_partition_column_isValid;
}

qint32 OAIJDBCConnectorSource_AdditionalOptions::getLowerBound() const {
    return m_lower_bound;
}
void OAIJDBCConnectorSource_AdditionalOptions::setLowerBound(const qint32 &lower_bound) {
    m_lower_bound = lower_bound;
    m_lower_bound_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_lower_bound_Set() const{
    return m_lower_bound_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_lower_bound_Valid() const{
    return m_lower_bound_isValid;
}

qint32 OAIJDBCConnectorSource_AdditionalOptions::getUpperBound() const {
    return m_upper_bound;
}
void OAIJDBCConnectorSource_AdditionalOptions::setUpperBound(const qint32 &upper_bound) {
    m_upper_bound = upper_bound;
    m_upper_bound_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_upper_bound_Set() const{
    return m_upper_bound_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_upper_bound_Valid() const{
    return m_upper_bound_isValid;
}

qint32 OAIJDBCConnectorSource_AdditionalOptions::getNumPartitions() const {
    return m_num_partitions;
}
void OAIJDBCConnectorSource_AdditionalOptions::setNumPartitions(const qint32 &num_partitions) {
    m_num_partitions = num_partitions;
    m_num_partitions_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_num_partitions_Set() const{
    return m_num_partitions_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_num_partitions_Valid() const{
    return m_num_partitions_isValid;
}

QList OAIJDBCConnectorSource_AdditionalOptions::getJobBookmarkKeys() const {
    return m_job_bookmark_keys;
}
void OAIJDBCConnectorSource_AdditionalOptions::setJobBookmarkKeys(const QList &job_bookmark_keys) {
    m_job_bookmark_keys = job_bookmark_keys;
    m_job_bookmark_keys_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_job_bookmark_keys_Set() const{
    return m_job_bookmark_keys_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_job_bookmark_keys_Valid() const{
    return m_job_bookmark_keys_isValid;
}

QString OAIJDBCConnectorSource_AdditionalOptions::getJobBookmarkKeysSortOrder() const {
    return m_job_bookmark_keys_sort_order;
}
void OAIJDBCConnectorSource_AdditionalOptions::setJobBookmarkKeysSortOrder(const QString &job_bookmark_keys_sort_order) {
    m_job_bookmark_keys_sort_order = job_bookmark_keys_sort_order;
    m_job_bookmark_keys_sort_order_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_job_bookmark_keys_sort_order_Set() const{
    return m_job_bookmark_keys_sort_order_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_job_bookmark_keys_sort_order_Valid() const{
    return m_job_bookmark_keys_sort_order_isValid;
}

QMap OAIJDBCConnectorSource_AdditionalOptions::getDataTypeMapping() const {
    return m_data_type_mapping;
}
void OAIJDBCConnectorSource_AdditionalOptions::setDataTypeMapping(const QMap &data_type_mapping) {
    m_data_type_mapping = data_type_mapping;
    m_data_type_mapping_isSet = true;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_data_type_mapping_Set() const{
    return m_data_type_mapping_isSet;
}

bool OAIJDBCConnectorSource_AdditionalOptions::is_data_type_mapping_Valid() const{
    return m_data_type_mapping_isValid;
}

bool OAIJDBCConnectorSource_AdditionalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_predicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_partitions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_bookmark_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_bookmark_keys_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJDBCConnectorSource_AdditionalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
