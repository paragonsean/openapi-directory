/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings() {
    this->initializeModel();
}

OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::~OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings() {}

void OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::initializeModel() {

    m_encryption_at_rest_isSet = false;
    m_encryption_at_rest_isValid = false;

    m_connection_password_encryption_isSet = false;
    m_connection_password_encryption_isValid = false;
}

void OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::fromJsonObject(QJsonObject json) {

    m_encryption_at_rest_isValid = ::OpenAPI::fromJsonValue(m_encryption_at_rest, json[QString("EncryptionAtRest")]);
    m_encryption_at_rest_isSet = !json[QString("EncryptionAtRest")].isNull() && m_encryption_at_rest_isValid;

    m_connection_password_encryption_isValid = ::OpenAPI::fromJsonValue(m_connection_password_encryption, json[QString("ConnectionPasswordEncryption")]);
    m_connection_password_encryption_isSet = !json[QString("ConnectionPasswordEncryption")].isNull() && m_connection_password_encryption_isValid;
}

QString OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_at_rest.isSet()) {
        obj.insert(QString("EncryptionAtRest"), ::OpenAPI::toJsonValue(m_encryption_at_rest));
    }
    if (m_connection_password_encryption.isSet()) {
        obj.insert(QString("ConnectionPasswordEncryption"), ::OpenAPI::toJsonValue(m_connection_password_encryption));
    }
    return obj;
}

OAIDataCatalogEncryptionSettings_EncryptionAtRest OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::getEncryptionAtRest() const {
    return m_encryption_at_rest;
}
void OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::setEncryptionAtRest(const OAIDataCatalogEncryptionSettings_EncryptionAtRest &encryption_at_rest) {
    m_encryption_at_rest = encryption_at_rest;
    m_encryption_at_rest_isSet = true;
}

bool OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::is_encryption_at_rest_Set() const{
    return m_encryption_at_rest_isSet;
}

bool OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::is_encryption_at_rest_Valid() const{
    return m_encryption_at_rest_isValid;
}

OAIDataCatalogEncryptionSettings_ConnectionPasswordEncryption OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::getConnectionPasswordEncryption() const {
    return m_connection_password_encryption;
}
void OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::setConnectionPasswordEncryption(const OAIDataCatalogEncryptionSettings_ConnectionPasswordEncryption &connection_password_encryption) {
    m_connection_password_encryption = connection_password_encryption;
    m_connection_password_encryption_isSet = true;
}

bool OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::is_connection_password_encryption_Set() const{
    return m_connection_password_encryption_isSet;
}

bool OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::is_connection_password_encryption_Valid() const{
    return m_connection_password_encryption_isValid;
}

bool OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_at_rest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_password_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDataCatalogEncryptionSettingsResponse_DataCatalogEncryptionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
