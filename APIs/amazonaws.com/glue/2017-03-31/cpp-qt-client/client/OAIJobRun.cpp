/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRun::OAIJobRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRun::OAIJobRun() {
    this->initializeModel();
}

OAIJobRun::~OAIJobRun() {}

void OAIJobRun::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_attempt_isSet = false;
    m_attempt_isValid = false;

    m_previous_run_id_isSet = false;
    m_previous_run_id_isValid = false;

    m_trigger_name_isSet = false;
    m_trigger_name_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_job_run_state_isSet = false;
    m_job_run_state_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_predecessor_runs_isSet = false;
    m_predecessor_runs_isValid = false;

    m_allocated_capacity_isSet = false;
    m_allocated_capacity_isValid = false;

    m_execution_time_isSet = false;
    m_execution_time_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_security_configuration_isSet = false;
    m_security_configuration_isValid = false;

    m_log_group_name_isSet = false;
    m_log_group_name_isValid = false;

    m_notification_property_isSet = false;
    m_notification_property_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;

    m_dpu_seconds_isSet = false;
    m_dpu_seconds_isValid = false;

    m_execution_class_isSet = false;
    m_execution_class_isValid = false;
}

void OAIJobRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobRun::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_attempt_isValid = ::OpenAPI::fromJsonValue(m_attempt, json[QString("Attempt")]);
    m_attempt_isSet = !json[QString("Attempt")].isNull() && m_attempt_isValid;

    m_previous_run_id_isValid = ::OpenAPI::fromJsonValue(m_previous_run_id, json[QString("PreviousRunId")]);
    m_previous_run_id_isSet = !json[QString("PreviousRunId")].isNull() && m_previous_run_id_isValid;

    m_trigger_name_isValid = ::OpenAPI::fromJsonValue(m_trigger_name, json[QString("TriggerName")]);
    m_trigger_name_isSet = !json[QString("TriggerName")].isNull() && m_trigger_name_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_job_run_state_isValid = ::OpenAPI::fromJsonValue(m_job_run_state, json[QString("JobRunState")]);
    m_job_run_state_isSet = !json[QString("JobRunState")].isNull() && m_job_run_state_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("Arguments")]);
    m_arguments_isSet = !json[QString("Arguments")].isNull() && m_arguments_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_predecessor_runs_isValid = ::OpenAPI::fromJsonValue(m_predecessor_runs, json[QString("PredecessorRuns")]);
    m_predecessor_runs_isSet = !json[QString("PredecessorRuns")].isNull() && m_predecessor_runs_isValid;

    m_allocated_capacity_isValid = ::OpenAPI::fromJsonValue(m_allocated_capacity, json[QString("AllocatedCapacity")]);
    m_allocated_capacity_isSet = !json[QString("AllocatedCapacity")].isNull() && m_allocated_capacity_isValid;

    m_execution_time_isValid = ::OpenAPI::fromJsonValue(m_execution_time, json[QString("ExecutionTime")]);
    m_execution_time_isSet = !json[QString("ExecutionTime")].isNull() && m_execution_time_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_security_configuration, json[QString("SecurityConfiguration")]);
    m_security_configuration_isSet = !json[QString("SecurityConfiguration")].isNull() && m_security_configuration_isValid;

    m_log_group_name_isValid = ::OpenAPI::fromJsonValue(m_log_group_name, json[QString("LogGroupName")]);
    m_log_group_name_isSet = !json[QString("LogGroupName")].isNull() && m_log_group_name_isValid;

    m_notification_property_isValid = ::OpenAPI::fromJsonValue(m_notification_property, json[QString("NotificationProperty")]);
    m_notification_property_isSet = !json[QString("NotificationProperty")].isNull() && m_notification_property_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;

    m_dpu_seconds_isValid = ::OpenAPI::fromJsonValue(m_dpu_seconds, json[QString("DPUSeconds")]);
    m_dpu_seconds_isSet = !json[QString("DPUSeconds")].isNull() && m_dpu_seconds_isValid;

    m_execution_class_isValid = ::OpenAPI::fromJsonValue(m_execution_class, json[QString("ExecutionClass")]);
    m_execution_class_isSet = !json[QString("ExecutionClass")].isNull() && m_execution_class_isValid;
}

QString OAIJobRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobRun::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_attempt_isSet) {
        obj.insert(QString("Attempt"), ::OpenAPI::toJsonValue(m_attempt));
    }
    if (m_previous_run_id_isSet) {
        obj.insert(QString("PreviousRunId"), ::OpenAPI::toJsonValue(m_previous_run_id));
    }
    if (m_trigger_name_isSet) {
        obj.insert(QString("TriggerName"), ::OpenAPI::toJsonValue(m_trigger_name));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_job_run_state.isSet()) {
        obj.insert(QString("JobRunState"), ::OpenAPI::toJsonValue(m_job_run_state));
    }
    if (m_arguments.isSet()) {
        obj.insert(QString("Arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_predecessor_runs.isSet()) {
        obj.insert(QString("PredecessorRuns"), ::OpenAPI::toJsonValue(m_predecessor_runs));
    }
    if (m_allocated_capacity_isSet) {
        obj.insert(QString("AllocatedCapacity"), ::OpenAPI::toJsonValue(m_allocated_capacity));
    }
    if (m_execution_time_isSet) {
        obj.insert(QString("ExecutionTime"), ::OpenAPI::toJsonValue(m_execution_time));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_security_configuration_isSet) {
        obj.insert(QString("SecurityConfiguration"), ::OpenAPI::toJsonValue(m_security_configuration));
    }
    if (m_log_group_name_isSet) {
        obj.insert(QString("LogGroupName"), ::OpenAPI::toJsonValue(m_log_group_name));
    }
    if (m_notification_property.isSet()) {
        obj.insert(QString("NotificationProperty"), ::OpenAPI::toJsonValue(m_notification_property));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    if (m_dpu_seconds_isSet) {
        obj.insert(QString("DPUSeconds"), ::OpenAPI::toJsonValue(m_dpu_seconds));
    }
    if (m_execution_class.isSet()) {
        obj.insert(QString("ExecutionClass"), ::OpenAPI::toJsonValue(m_execution_class));
    }
    return obj;
}

QString OAIJobRun::getId() const {
    return m_id;
}
void OAIJobRun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobRun::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobRun::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIJobRun::getAttempt() const {
    return m_attempt;
}
void OAIJobRun::setAttempt(const qint32 &attempt) {
    m_attempt = attempt;
    m_attempt_isSet = true;
}

bool OAIJobRun::is_attempt_Set() const{
    return m_attempt_isSet;
}

bool OAIJobRun::is_attempt_Valid() const{
    return m_attempt_isValid;
}

QString OAIJobRun::getPreviousRunId() const {
    return m_previous_run_id;
}
void OAIJobRun::setPreviousRunId(const QString &previous_run_id) {
    m_previous_run_id = previous_run_id;
    m_previous_run_id_isSet = true;
}

bool OAIJobRun::is_previous_run_id_Set() const{
    return m_previous_run_id_isSet;
}

bool OAIJobRun::is_previous_run_id_Valid() const{
    return m_previous_run_id_isValid;
}

QString OAIJobRun::getTriggerName() const {
    return m_trigger_name;
}
void OAIJobRun::setTriggerName(const QString &trigger_name) {
    m_trigger_name = trigger_name;
    m_trigger_name_isSet = true;
}

bool OAIJobRun::is_trigger_name_Set() const{
    return m_trigger_name_isSet;
}

bool OAIJobRun::is_trigger_name_Valid() const{
    return m_trigger_name_isValid;
}

QString OAIJobRun::getJobName() const {
    return m_job_name;
}
void OAIJobRun::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIJobRun::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIJobRun::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QDateTime OAIJobRun::getStartedOn() const {
    return m_started_on;
}
void OAIJobRun::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIJobRun::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIJobRun::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAIJobRun::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIJobRun::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIJobRun::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIJobRun::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QDateTime OAIJobRun::getCompletedOn() const {
    return m_completed_on;
}
void OAIJobRun::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIJobRun::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIJobRun::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

OAIJobRunState OAIJobRun::getJobRunState() const {
    return m_job_run_state;
}
void OAIJobRun::setJobRunState(const OAIJobRunState &job_run_state) {
    m_job_run_state = job_run_state;
    m_job_run_state_isSet = true;
}

bool OAIJobRun::is_job_run_state_Set() const{
    return m_job_run_state_isSet;
}

bool OAIJobRun::is_job_run_state_Valid() const{
    return m_job_run_state_isValid;
}

QMap OAIJobRun::getArguments() const {
    return m_arguments;
}
void OAIJobRun::setArguments(const QMap &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIJobRun::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIJobRun::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIJobRun::getErrorMessage() const {
    return m_error_message;
}
void OAIJobRun::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIJobRun::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIJobRun::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList OAIJobRun::getPredecessorRuns() const {
    return m_predecessor_runs;
}
void OAIJobRun::setPredecessorRuns(const QList &predecessor_runs) {
    m_predecessor_runs = predecessor_runs;
    m_predecessor_runs_isSet = true;
}

bool OAIJobRun::is_predecessor_runs_Set() const{
    return m_predecessor_runs_isSet;
}

bool OAIJobRun::is_predecessor_runs_Valid() const{
    return m_predecessor_runs_isValid;
}

qint32 OAIJobRun::getAllocatedCapacity() const {
    return m_allocated_capacity;
}
void OAIJobRun::setAllocatedCapacity(const qint32 &allocated_capacity) {
    m_allocated_capacity = allocated_capacity;
    m_allocated_capacity_isSet = true;
}

bool OAIJobRun::is_allocated_capacity_Set() const{
    return m_allocated_capacity_isSet;
}

bool OAIJobRun::is_allocated_capacity_Valid() const{
    return m_allocated_capacity_isValid;
}

qint32 OAIJobRun::getExecutionTime() const {
    return m_execution_time;
}
void OAIJobRun::setExecutionTime(const qint32 &execution_time) {
    m_execution_time = execution_time;
    m_execution_time_isSet = true;
}

bool OAIJobRun::is_execution_time_Set() const{
    return m_execution_time_isSet;
}

bool OAIJobRun::is_execution_time_Valid() const{
    return m_execution_time_isValid;
}

qint32 OAIJobRun::getTimeout() const {
    return m_timeout;
}
void OAIJobRun::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIJobRun::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIJobRun::is_timeout_Valid() const{
    return m_timeout_isValid;
}

double OAIJobRun::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIJobRun::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIJobRun::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIJobRun::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

OAIWorkerType OAIJobRun::getWorkerType() const {
    return m_worker_type;
}
void OAIJobRun::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIJobRun::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIJobRun::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

qint32 OAIJobRun::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIJobRun::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIJobRun::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIJobRun::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

QString OAIJobRun::getSecurityConfiguration() const {
    return m_security_configuration;
}
void OAIJobRun::setSecurityConfiguration(const QString &security_configuration) {
    m_security_configuration = security_configuration;
    m_security_configuration_isSet = true;
}

bool OAIJobRun::is_security_configuration_Set() const{
    return m_security_configuration_isSet;
}

bool OAIJobRun::is_security_configuration_Valid() const{
    return m_security_configuration_isValid;
}

QString OAIJobRun::getLogGroupName() const {
    return m_log_group_name;
}
void OAIJobRun::setLogGroupName(const QString &log_group_name) {
    m_log_group_name = log_group_name;
    m_log_group_name_isSet = true;
}

bool OAIJobRun::is_log_group_name_Set() const{
    return m_log_group_name_isSet;
}

bool OAIJobRun::is_log_group_name_Valid() const{
    return m_log_group_name_isValid;
}

OAIStartJobRunRequest_NotificationProperty OAIJobRun::getNotificationProperty() const {
    return m_notification_property;
}
void OAIJobRun::setNotificationProperty(const OAIStartJobRunRequest_NotificationProperty &notification_property) {
    m_notification_property = notification_property;
    m_notification_property_isSet = true;
}

bool OAIJobRun::is_notification_property_Set() const{
    return m_notification_property_isSet;
}

bool OAIJobRun::is_notification_property_Valid() const{
    return m_notification_property_isValid;
}

QString OAIJobRun::getGlueVersion() const {
    return m_glue_version;
}
void OAIJobRun::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAIJobRun::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAIJobRun::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

double OAIJobRun::getDpuSeconds() const {
    return m_dpu_seconds;
}
void OAIJobRun::setDpuSeconds(const double &dpu_seconds) {
    m_dpu_seconds = dpu_seconds;
    m_dpu_seconds_isSet = true;
}

bool OAIJobRun::is_dpu_seconds_Set() const{
    return m_dpu_seconds_isSet;
}

bool OAIJobRun::is_dpu_seconds_Valid() const{
    return m_dpu_seconds_isValid;
}

OAIExecutionClass OAIJobRun::getExecutionClass() const {
    return m_execution_class;
}
void OAIJobRun::setExecutionClass(const OAIExecutionClass &execution_class) {
    m_execution_class = execution_class;
    m_execution_class_isSet = true;
}

bool OAIJobRun::is_execution_class_Set() const{
    return m_execution_class_isSet;
}

bool OAIJobRun::is_execution_class_Valid() const{
    return m_execution_class_isValid;
}

bool OAIJobRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predecessor_runs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpu_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
