/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingEntry::OAIMappingEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingEntry::OAIMappingEntry() {
    this->initializeModel();
}

OAIMappingEntry::~OAIMappingEntry() {}

void OAIMappingEntry::initializeModel() {

    m_source_table_isSet = false;
    m_source_table_isValid = false;

    m_source_path_isSet = false;
    m_source_path_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_target_table_isSet = false;
    m_target_table_isValid = false;

    m_target_path_isSet = false;
    m_target_path_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;
}

void OAIMappingEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingEntry::fromJsonObject(QJsonObject json) {

    m_source_table_isValid = ::OpenAPI::fromJsonValue(m_source_table, json[QString("SourceTable")]);
    m_source_table_isSet = !json[QString("SourceTable")].isNull() && m_source_table_isValid;

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("SourcePath")]);
    m_source_path_isSet = !json[QString("SourcePath")].isNull() && m_source_path_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_target_table_isValid = ::OpenAPI::fromJsonValue(m_target_table, json[QString("TargetTable")]);
    m_target_table_isSet = !json[QString("TargetTable")].isNull() && m_target_table_isValid;

    m_target_path_isValid = ::OpenAPI::fromJsonValue(m_target_path, json[QString("TargetPath")]);
    m_target_path_isSet = !json[QString("TargetPath")].isNull() && m_target_path_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("TargetType")]);
    m_target_type_isSet = !json[QString("TargetType")].isNull() && m_target_type_isValid;
}

QString OAIMappingEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_source_table_isSet) {
        obj.insert(QString("SourceTable"), ::OpenAPI::toJsonValue(m_source_table));
    }
    if (m_source_path_isSet) {
        obj.insert(QString("SourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_target_table_isSet) {
        obj.insert(QString("TargetTable"), ::OpenAPI::toJsonValue(m_target_table));
    }
    if (m_target_path_isSet) {
        obj.insert(QString("TargetPath"), ::OpenAPI::toJsonValue(m_target_path));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("TargetType"), ::OpenAPI::toJsonValue(m_target_type));
    }
    return obj;
}

QString OAIMappingEntry::getSourceTable() const {
    return m_source_table;
}
void OAIMappingEntry::setSourceTable(const QString &source_table) {
    m_source_table = source_table;
    m_source_table_isSet = true;
}

bool OAIMappingEntry::is_source_table_Set() const{
    return m_source_table_isSet;
}

bool OAIMappingEntry::is_source_table_Valid() const{
    return m_source_table_isValid;
}

QString OAIMappingEntry::getSourcePath() const {
    return m_source_path;
}
void OAIMappingEntry::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAIMappingEntry::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAIMappingEntry::is_source_path_Valid() const{
    return m_source_path_isValid;
}

QString OAIMappingEntry::getSourceType() const {
    return m_source_type;
}
void OAIMappingEntry::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIMappingEntry::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIMappingEntry::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIMappingEntry::getTargetTable() const {
    return m_target_table;
}
void OAIMappingEntry::setTargetTable(const QString &target_table) {
    m_target_table = target_table;
    m_target_table_isSet = true;
}

bool OAIMappingEntry::is_target_table_Set() const{
    return m_target_table_isSet;
}

bool OAIMappingEntry::is_target_table_Valid() const{
    return m_target_table_isValid;
}

QString OAIMappingEntry::getTargetPath() const {
    return m_target_path;
}
void OAIMappingEntry::setTargetPath(const QString &target_path) {
    m_target_path = target_path;
    m_target_path_isSet = true;
}

bool OAIMappingEntry::is_target_path_Set() const{
    return m_target_path_isSet;
}

bool OAIMappingEntry::is_target_path_Valid() const{
    return m_target_path_isValid;
}

QString OAIMappingEntry::getTargetType() const {
    return m_target_type;
}
void OAIMappingEntry::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIMappingEntry::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIMappingEntry::is_target_type_Valid() const{
    return m_target_type_isValid;
}

bool OAIMappingEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
