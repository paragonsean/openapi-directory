/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDataQualityRulesetEvaluationRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDataQualityRulesetEvaluationRunRequest::OAIStartDataQualityRulesetEvaluationRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDataQualityRulesetEvaluationRunRequest::OAIStartDataQualityRulesetEvaluationRunRequest() {
    this->initializeModel();
}

OAIStartDataQualityRulesetEvaluationRunRequest::~OAIStartDataQualityRulesetEvaluationRunRequest() {}

void OAIStartDataQualityRulesetEvaluationRunRequest::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_additional_run_options_isSet = false;
    m_additional_run_options_isValid = false;

    m_ruleset_names_isSet = false;
    m_ruleset_names_isValid = false;

    m_additional_data_sources_isSet = false;
    m_additional_data_sources_isValid = false;
}

void OAIStartDataQualityRulesetEvaluationRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDataQualityRulesetEvaluationRunRequest::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_additional_run_options_isValid = ::OpenAPI::fromJsonValue(m_additional_run_options, json[QString("AdditionalRunOptions")]);
    m_additional_run_options_isSet = !json[QString("AdditionalRunOptions")].isNull() && m_additional_run_options_isValid;

    m_ruleset_names_isValid = ::OpenAPI::fromJsonValue(m_ruleset_names, json[QString("RulesetNames")]);
    m_ruleset_names_isSet = !json[QString("RulesetNames")].isNull() && m_ruleset_names_isValid;

    m_additional_data_sources_isValid = ::OpenAPI::fromJsonValue(m_additional_data_sources, json[QString("AdditionalDataSources")]);
    m_additional_data_sources_isSet = !json[QString("AdditionalDataSources")].isNull() && m_additional_data_sources_isValid;
}

QString OAIStartDataQualityRulesetEvaluationRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDataQualityRulesetEvaluationRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_additional_run_options.isSet()) {
        obj.insert(QString("AdditionalRunOptions"), ::OpenAPI::toJsonValue(m_additional_run_options));
    }
    if (m_ruleset_names.isSet()) {
        obj.insert(QString("RulesetNames"), ::OpenAPI::toJsonValue(m_ruleset_names));
    }
    if (m_additional_data_sources.isSet()) {
        obj.insert(QString("AdditionalDataSources"), ::OpenAPI::toJsonValue(m_additional_data_sources));
    }
    return obj;
}

OAIStartDataQualityRuleRecommendationRunRequest_DataSource OAIStartDataQualityRulesetEvaluationRunRequest::getDataSource() const {
    return m_data_source;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setDataSource(const OAIStartDataQualityRuleRecommendationRunRequest_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIStartDataQualityRulesetEvaluationRunRequest::getRole() const {
    return m_role;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIStartDataQualityRulesetEvaluationRunRequest::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

qint32 OAIStartDataQualityRulesetEvaluationRunRequest::getTimeout() const {
    return m_timeout;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIStartDataQualityRulesetEvaluationRunRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIGetDataQualityRulesetEvaluationRunResponse_AdditionalRunOptions OAIStartDataQualityRulesetEvaluationRunRequest::getAdditionalRunOptions() const {
    return m_additional_run_options;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setAdditionalRunOptions(const OAIGetDataQualityRulesetEvaluationRunResponse_AdditionalRunOptions &additional_run_options) {
    m_additional_run_options = additional_run_options;
    m_additional_run_options_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_additional_run_options_Set() const{
    return m_additional_run_options_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_additional_run_options_Valid() const{
    return m_additional_run_options_isValid;
}

QList OAIStartDataQualityRulesetEvaluationRunRequest::getRulesetNames() const {
    return m_ruleset_names;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setRulesetNames(const QList &ruleset_names) {
    m_ruleset_names = ruleset_names;
    m_ruleset_names_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_ruleset_names_Set() const{
    return m_ruleset_names_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_ruleset_names_Valid() const{
    return m_ruleset_names_isValid;
}

QMap OAIStartDataQualityRulesetEvaluationRunRequest::getAdditionalDataSources() const {
    return m_additional_data_sources;
}
void OAIStartDataQualityRulesetEvaluationRunRequest::setAdditionalDataSources(const QMap &additional_data_sources) {
    m_additional_data_sources = additional_data_sources;
    m_additional_data_sources_isSet = true;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_additional_data_sources_Set() const{
    return m_additional_data_sources_isSet;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::is_additional_data_sources_Valid() const{
    return m_additional_data_sources_isValid;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_run_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruleset_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDataQualityRulesetEvaluationRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && m_role_isValid && m_ruleset_names_isValid && true;
}

} // namespace OpenAPI
