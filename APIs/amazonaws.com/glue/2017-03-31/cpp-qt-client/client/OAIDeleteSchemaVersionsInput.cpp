/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteSchemaVersionsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteSchemaVersionsInput::OAIDeleteSchemaVersionsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteSchemaVersionsInput::OAIDeleteSchemaVersionsInput() {
    this->initializeModel();
}

OAIDeleteSchemaVersionsInput::~OAIDeleteSchemaVersionsInput() {}

void OAIDeleteSchemaVersionsInput::initializeModel() {

    m_schema_id_isSet = false;
    m_schema_id_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIDeleteSchemaVersionsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteSchemaVersionsInput::fromJsonObject(QJsonObject json) {

    m_schema_id_isValid = ::OpenAPI::fromJsonValue(m_schema_id, json[QString("SchemaId")]);
    m_schema_id_isSet = !json[QString("SchemaId")].isNull() && m_schema_id_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("Versions")]);
    m_versions_isSet = !json[QString("Versions")].isNull() && m_versions_isValid;
}

QString OAIDeleteSchemaVersionsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteSchemaVersionsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_id.isSet()) {
        obj.insert(QString("SchemaId"), ::OpenAPI::toJsonValue(m_schema_id));
    }
    if (m_versions_isSet) {
        obj.insert(QString("Versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

OAIDeleteSchemaInput_SchemaId OAIDeleteSchemaVersionsInput::getSchemaId() const {
    return m_schema_id;
}
void OAIDeleteSchemaVersionsInput::setSchemaId(const OAIDeleteSchemaInput_SchemaId &schema_id) {
    m_schema_id = schema_id;
    m_schema_id_isSet = true;
}

bool OAIDeleteSchemaVersionsInput::is_schema_id_Set() const{
    return m_schema_id_isSet;
}

bool OAIDeleteSchemaVersionsInput::is_schema_id_Valid() const{
    return m_schema_id_isValid;
}

QString OAIDeleteSchemaVersionsInput::getVersions() const {
    return m_versions;
}
void OAIDeleteSchemaVersionsInput::setVersions(const QString &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIDeleteSchemaVersionsInput::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIDeleteSchemaVersionsInput::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIDeleteSchemaVersionsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteSchemaVersionsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_id_isValid && m_versions_isValid && true;
}

} // namespace OpenAPI
