/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerState::OAITriggerState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerState::OAITriggerState() {
    this->initializeModel();
}

OAITriggerState::~OAITriggerState() {}

void OAITriggerState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITriggerState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITriggerState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::ACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::ACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::DEACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::DEACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITriggerState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITriggerState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITriggerState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITriggerState::CREATING:
            val = "CREATING";
            break;
        case eOAITriggerState::CREATED:
            val = "CREATED";
            break;
        case eOAITriggerState::ACTIVATING:
            val = "ACTIVATING";
            break;
        case eOAITriggerState::ACTIVATED:
            val = "ACTIVATED";
            break;
        case eOAITriggerState::DEACTIVATING:
            val = "DEACTIVATING";
            break;
        case eOAITriggerState::DEACTIVATED:
            val = "DEACTIVATED";
            break;
        case eOAITriggerState::DELETING:
            val = "DELETING";
            break;
        case eOAITriggerState::UPDATING:
            val = "UPDATING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITriggerState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITriggerState::eOAITriggerState OAITriggerState::getValue() const {
    return m_value;
}

void OAITriggerState::setValue(const OAITriggerState::eOAITriggerState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITriggerState::isSet() const {
    
    return m_value_isSet;
}

bool OAITriggerState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
