/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSchemaVersionMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSchemaVersionMetadataResponse::OAIPutSchemaVersionMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSchemaVersionMetadataResponse::OAIPutSchemaVersionMetadataResponse() {
    this->initializeModel();
}

OAIPutSchemaVersionMetadataResponse::~OAIPutSchemaVersionMetadataResponse() {}

void OAIPutSchemaVersionMetadataResponse::initializeModel() {

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_registry_name_isSet = false;
    m_registry_name_isValid = false;

    m_latest_version_isSet = false;
    m_latest_version_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_schema_version_id_isSet = false;
    m_schema_version_id_isValid = false;

    m_metadata_key_isSet = false;
    m_metadata_key_isValid = false;

    m_metadata_value_isSet = false;
    m_metadata_value_isValid = false;
}

void OAIPutSchemaVersionMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSchemaVersionMetadataResponse::fromJsonObject(QJsonObject json) {

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("SchemaName")]);
    m_schema_name_isSet = !json[QString("SchemaName")].isNull() && m_schema_name_isValid;

    m_registry_name_isValid = ::OpenAPI::fromJsonValue(m_registry_name, json[QString("RegistryName")]);
    m_registry_name_isSet = !json[QString("RegistryName")].isNull() && m_registry_name_isValid;

    m_latest_version_isValid = ::OpenAPI::fromJsonValue(m_latest_version, json[QString("LatestVersion")]);
    m_latest_version_isSet = !json[QString("LatestVersion")].isNull() && m_latest_version_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_schema_version_id_isValid = ::OpenAPI::fromJsonValue(m_schema_version_id, json[QString("SchemaVersionId")]);
    m_schema_version_id_isSet = !json[QString("SchemaVersionId")].isNull() && m_schema_version_id_isValid;

    m_metadata_key_isValid = ::OpenAPI::fromJsonValue(m_metadata_key, json[QString("MetadataKey")]);
    m_metadata_key_isSet = !json[QString("MetadataKey")].isNull() && m_metadata_key_isValid;

    m_metadata_value_isValid = ::OpenAPI::fromJsonValue(m_metadata_value, json[QString("MetadataValue")]);
    m_metadata_value_isSet = !json[QString("MetadataValue")].isNull() && m_metadata_value_isValid;
}

QString OAIPutSchemaVersionMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSchemaVersionMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("SchemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_registry_name_isSet) {
        obj.insert(QString("RegistryName"), ::OpenAPI::toJsonValue(m_registry_name));
    }
    if (m_latest_version_isSet) {
        obj.insert(QString("LatestVersion"), ::OpenAPI::toJsonValue(m_latest_version));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_schema_version_id_isSet) {
        obj.insert(QString("SchemaVersionId"), ::OpenAPI::toJsonValue(m_schema_version_id));
    }
    if (m_metadata_key_isSet) {
        obj.insert(QString("MetadataKey"), ::OpenAPI::toJsonValue(m_metadata_key));
    }
    if (m_metadata_value_isSet) {
        obj.insert(QString("MetadataValue"), ::OpenAPI::toJsonValue(m_metadata_value));
    }
    return obj;
}

QString OAIPutSchemaVersionMetadataResponse::getSchemaArn() const {
    return m_schema_arn;
}
void OAIPutSchemaVersionMetadataResponse::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAIPutSchemaVersionMetadataResponse::getSchemaName() const {
    return m_schema_name;
}
void OAIPutSchemaVersionMetadataResponse::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIPutSchemaVersionMetadataResponse::getRegistryName() const {
    return m_registry_name;
}
void OAIPutSchemaVersionMetadataResponse::setRegistryName(const QString &registry_name) {
    m_registry_name = registry_name;
    m_registry_name_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_registry_name_Set() const{
    return m_registry_name_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_registry_name_Valid() const{
    return m_registry_name_isValid;
}

bool OAIPutSchemaVersionMetadataResponse::getLatestVersion() const {
    return m_latest_version;
}
void OAIPutSchemaVersionMetadataResponse::setLatestVersion(const bool &latest_version) {
    m_latest_version = latest_version;
    m_latest_version_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_latest_version_Set() const{
    return m_latest_version_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_latest_version_Valid() const{
    return m_latest_version_isValid;
}

qint32 OAIPutSchemaVersionMetadataResponse::getVersionNumber() const {
    return m_version_number;
}
void OAIPutSchemaVersionMetadataResponse::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_version_number_Valid() const{
    return m_version_number_isValid;
}

QString OAIPutSchemaVersionMetadataResponse::getSchemaVersionId() const {
    return m_schema_version_id;
}
void OAIPutSchemaVersionMetadataResponse::setSchemaVersionId(const QString &schema_version_id) {
    m_schema_version_id = schema_version_id;
    m_schema_version_id_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_schema_version_id_Set() const{
    return m_schema_version_id_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_schema_version_id_Valid() const{
    return m_schema_version_id_isValid;
}

QString OAIPutSchemaVersionMetadataResponse::getMetadataKey() const {
    return m_metadata_key;
}
void OAIPutSchemaVersionMetadataResponse::setMetadataKey(const QString &metadata_key) {
    m_metadata_key = metadata_key;
    m_metadata_key_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_metadata_key_Set() const{
    return m_metadata_key_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_metadata_key_Valid() const{
    return m_metadata_key_isValid;
}

QString OAIPutSchemaVersionMetadataResponse::getMetadataValue() const {
    return m_metadata_value;
}
void OAIPutSchemaVersionMetadataResponse::setMetadataValue(const QString &metadata_value) {
    m_metadata_value = metadata_value;
    m_metadata_value_isSet = true;
}

bool OAIPutSchemaVersionMetadataResponse::is_metadata_value_Set() const{
    return m_metadata_value_isSet;
}

bool OAIPutSchemaVersionMetadataResponse::is_metadata_value_Valid() const{
    return m_metadata_value_isValid;
}

bool OAIPutSchemaVersionMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSchemaVersionMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
