/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggFunction::OAIAggFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggFunction::OAIAggFunction() {
    this->initializeModel();
}

OAIAggFunction::~OAIAggFunction() {}

void OAIAggFunction::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAggFunction::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAggFunction::fromJson(QString jsonString) {
    
    if ( jsonString.compare("avg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::AVG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("countDistinct", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::COUNTDISTINCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("first", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::FIRST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("last", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::LAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kurtosis", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::KURTOSIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("max", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::MAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("min", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("skewness", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::SKEWNESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stddev_samp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::STDDEV_SAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stddev_pop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::STDDEV_POP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sum", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::SUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sumDistinct", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::SUMDISTINCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("var_samp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::VAR_SAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("var_pop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAggFunction::VAR_POP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAggFunction::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAggFunction::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAggFunction::AVG:
            val = "avg";
            break;
        case eOAIAggFunction::COUNTDISTINCT:
            val = "countDistinct";
            break;
        case eOAIAggFunction::COUNT:
            val = "count";
            break;
        case eOAIAggFunction::FIRST:
            val = "first";
            break;
        case eOAIAggFunction::LAST:
            val = "last";
            break;
        case eOAIAggFunction::KURTOSIS:
            val = "kurtosis";
            break;
        case eOAIAggFunction::MAX:
            val = "max";
            break;
        case eOAIAggFunction::MIN:
            val = "min";
            break;
        case eOAIAggFunction::SKEWNESS:
            val = "skewness";
            break;
        case eOAIAggFunction::STDDEV_SAMP:
            val = "stddev_samp";
            break;
        case eOAIAggFunction::STDDEV_POP:
            val = "stddev_pop";
            break;
        case eOAIAggFunction::SUM:
            val = "sum";
            break;
        case eOAIAggFunction::SUMDISTINCT:
            val = "sumDistinct";
            break;
        case eOAIAggFunction::VAR_SAMP:
            val = "var_samp";
            break;
        case eOAIAggFunction::VAR_POP:
            val = "var_pop";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAggFunction::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAggFunction::eOAIAggFunction OAIAggFunction::getValue() const {
    return m_value;
}

void OAIAggFunction::setValue(const OAIAggFunction::eOAIAggFunction& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAggFunction::isSet() const {
    
    return m_value_isSet;
}

bool OAIAggFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
