/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionPropertyKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionPropertyKey::OAIConnectionPropertyKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionPropertyKey::OAIConnectionPropertyKey() {
    this->initializeModel();
}

OAIConnectionPropertyKey::~OAIConnectionPropertyKey() {}

void OAIConnectionPropertyKey::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConnectionPropertyKey::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConnectionPropertyKey::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::HOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::PORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USERNAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::USERNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCRYPTED_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::ENCRYPTED_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JDBC_DRIVER_JAR_URI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::JDBC_DRIVER_JAR_URI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JDBC_DRIVER_CLASS_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::JDBC_DRIVER_CLASS_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JDBC_ENGINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::JDBC_ENGINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JDBC_ENGINE_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::JDBC_ENGINE_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIG_FILES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CONFIG_FILES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTANCE_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::INSTANCE_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JDBC_CONNECTION_URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::JDBC_CONNECTION_URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JDBC_ENFORCE_SSL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::JDBC_ENFORCE_SSL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM_JDBC_CERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CUSTOM_JDBC_CERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SKIP_CUSTOM_JDBC_CERT_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::SKIP_CUSTOM_JDBC_CERT_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM_JDBC_CERT_STRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CUSTOM_JDBC_CERT_STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONNECTION_URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CONNECTION_URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_BOOTSTRAP_SERVERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_BOOTSTRAP_SERVERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SSL_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SSL_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_CUSTOM_CERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_CUSTOM_CERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SKIP_CUSTOM_CERT_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SKIP_CUSTOM_CERT_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_CLIENT_KEYSTORE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_CLIENT_KEYSTORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_CLIENT_KEYSTORE_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_CLIENT_KEYSTORE_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_CLIENT_KEY_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_CLIENT_KEY_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECRET_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::SECRET_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONNECTOR_URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CONNECTOR_URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONNECTOR_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CONNECTOR_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONNECTOR_CLASS_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::CONNECTOR_CLASS_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_MECHANISM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_MECHANISM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_SCRAM_USERNAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_SCRAM_USERNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_SCRAM_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_SCRAM_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_SCRAM_SECRETS_ARN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_SCRAM_SECRETS_ARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_GSSAPI_KEYTAB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_KEYTAB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_GSSAPI_KRB5_CONF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_KRB5_CONF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_GSSAPI_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA_SASL_GSSAPI_PRINCIPAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_PRINCIPAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConnectionPropertyKey::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConnectionPropertyKey::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConnectionPropertyKey::HOST:
            val = "HOST";
            break;
        case eOAIConnectionPropertyKey::PORT:
            val = "PORT";
            break;
        case eOAIConnectionPropertyKey::USERNAME:
            val = "USERNAME";
            break;
        case eOAIConnectionPropertyKey::PASSWORD:
            val = "PASSWORD";
            break;
        case eOAIConnectionPropertyKey::ENCRYPTED_PASSWORD:
            val = "ENCRYPTED_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::JDBC_DRIVER_JAR_URI:
            val = "JDBC_DRIVER_JAR_URI";
            break;
        case eOAIConnectionPropertyKey::JDBC_DRIVER_CLASS_NAME:
            val = "JDBC_DRIVER_CLASS_NAME";
            break;
        case eOAIConnectionPropertyKey::JDBC_ENGINE:
            val = "JDBC_ENGINE";
            break;
        case eOAIConnectionPropertyKey::JDBC_ENGINE_VERSION:
            val = "JDBC_ENGINE_VERSION";
            break;
        case eOAIConnectionPropertyKey::CONFIG_FILES:
            val = "CONFIG_FILES";
            break;
        case eOAIConnectionPropertyKey::INSTANCE_ID:
            val = "INSTANCE_ID";
            break;
        case eOAIConnectionPropertyKey::JDBC_CONNECTION_URL:
            val = "JDBC_CONNECTION_URL";
            break;
        case eOAIConnectionPropertyKey::JDBC_ENFORCE_SSL:
            val = "JDBC_ENFORCE_SSL";
            break;
        case eOAIConnectionPropertyKey::CUSTOM_JDBC_CERT:
            val = "CUSTOM_JDBC_CERT";
            break;
        case eOAIConnectionPropertyKey::SKIP_CUSTOM_JDBC_CERT_VALIDATION:
            val = "SKIP_CUSTOM_JDBC_CERT_VALIDATION";
            break;
        case eOAIConnectionPropertyKey::CUSTOM_JDBC_CERT_STRING:
            val = "CUSTOM_JDBC_CERT_STRING";
            break;
        case eOAIConnectionPropertyKey::CONNECTION_URL:
            val = "CONNECTION_URL";
            break;
        case eOAIConnectionPropertyKey::KAFKA_BOOTSTRAP_SERVERS:
            val = "KAFKA_BOOTSTRAP_SERVERS";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SSL_ENABLED:
            val = "KAFKA_SSL_ENABLED";
            break;
        case eOAIConnectionPropertyKey::KAFKA_CUSTOM_CERT:
            val = "KAFKA_CUSTOM_CERT";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SKIP_CUSTOM_CERT_VALIDATION:
            val = "KAFKA_SKIP_CUSTOM_CERT_VALIDATION";
            break;
        case eOAIConnectionPropertyKey::KAFKA_CLIENT_KEYSTORE:
            val = "KAFKA_CLIENT_KEYSTORE";
            break;
        case eOAIConnectionPropertyKey::KAFKA_CLIENT_KEYSTORE_PASSWORD:
            val = "KAFKA_CLIENT_KEYSTORE_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::KAFKA_CLIENT_KEY_PASSWORD:
            val = "KAFKA_CLIENT_KEY_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD:
            val = "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD:
            val = "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::SECRET_ID:
            val = "SECRET_ID";
            break;
        case eOAIConnectionPropertyKey::CONNECTOR_URL:
            val = "CONNECTOR_URL";
            break;
        case eOAIConnectionPropertyKey::CONNECTOR_TYPE:
            val = "CONNECTOR_TYPE";
            break;
        case eOAIConnectionPropertyKey::CONNECTOR_CLASS_NAME:
            val = "CONNECTOR_CLASS_NAME";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_MECHANISM:
            val = "KAFKA_SASL_MECHANISM";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_SCRAM_USERNAME:
            val = "KAFKA_SASL_SCRAM_USERNAME";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_SCRAM_PASSWORD:
            val = "KAFKA_SASL_SCRAM_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_SCRAM_SECRETS_ARN:
            val = "KAFKA_SASL_SCRAM_SECRETS_ARN";
            break;
        case eOAIConnectionPropertyKey::ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD:
            val = "ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_KEYTAB:
            val = "KAFKA_SASL_GSSAPI_KEYTAB";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_KRB5_CONF:
            val = "KAFKA_SASL_GSSAPI_KRB5_CONF";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_SERVICE:
            val = "KAFKA_SASL_GSSAPI_SERVICE";
            break;
        case eOAIConnectionPropertyKey::KAFKA_SASL_GSSAPI_PRINCIPAL:
            val = "KAFKA_SASL_GSSAPI_PRINCIPAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConnectionPropertyKey::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConnectionPropertyKey::eOAIConnectionPropertyKey OAIConnectionPropertyKey::getValue() const {
    return m_value;
}

void OAIConnectionPropertyKey::setValue(const OAIConnectionPropertyKey::eOAIConnectionPropertyKey& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConnectionPropertyKey::isSet() const {
    
    return m_value_isSet;
}

bool OAIConnectionPropertyKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
