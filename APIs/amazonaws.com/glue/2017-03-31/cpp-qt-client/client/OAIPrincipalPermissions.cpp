/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrincipalPermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrincipalPermissions::OAIPrincipalPermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrincipalPermissions::OAIPrincipalPermissions() {
    this->initializeModel();
}

OAIPrincipalPermissions::~OAIPrincipalPermissions() {}

void OAIPrincipalPermissions::initializeModel() {

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIPrincipalPermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrincipalPermissions::fromJsonObject(QJsonObject json) {

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;
}

QString OAIPrincipalPermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrincipalPermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_principal.isSet()) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

OAIPrincipalPermissions_Principal OAIPrincipalPermissions::getPrincipal() const {
    return m_principal;
}
void OAIPrincipalPermissions::setPrincipal(const OAIPrincipalPermissions_Principal &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIPrincipalPermissions::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIPrincipalPermissions::is_principal_Valid() const{
    return m_principal_isValid;
}

QList OAIPrincipalPermissions::getPermissions() const {
    return m_permissions;
}
void OAIPrincipalPermissions::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIPrincipalPermissions::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIPrincipalPermissions::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIPrincipalPermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrincipalPermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
