/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformEncryption::OAITransformEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformEncryption::OAITransformEncryption() {
    this->initializeModel();
}

OAITransformEncryption::~OAITransformEncryption() {}

void OAITransformEncryption::initializeModel() {

    m_ml_user_data_encryption_isSet = false;
    m_ml_user_data_encryption_isValid = false;

    m_task_run_security_configuration_name_isSet = false;
    m_task_run_security_configuration_name_isValid = false;
}

void OAITransformEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformEncryption::fromJsonObject(QJsonObject json) {

    m_ml_user_data_encryption_isValid = ::OpenAPI::fromJsonValue(m_ml_user_data_encryption, json[QString("MlUserDataEncryption")]);
    m_ml_user_data_encryption_isSet = !json[QString("MlUserDataEncryption")].isNull() && m_ml_user_data_encryption_isValid;

    m_task_run_security_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_task_run_security_configuration_name, json[QString("TaskRunSecurityConfigurationName")]);
    m_task_run_security_configuration_name_isSet = !json[QString("TaskRunSecurityConfigurationName")].isNull() && m_task_run_security_configuration_name_isValid;
}

QString OAITransformEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_ml_user_data_encryption.isSet()) {
        obj.insert(QString("MlUserDataEncryption"), ::OpenAPI::toJsonValue(m_ml_user_data_encryption));
    }
    if (m_task_run_security_configuration_name_isSet) {
        obj.insert(QString("TaskRunSecurityConfigurationName"), ::OpenAPI::toJsonValue(m_task_run_security_configuration_name));
    }
    return obj;
}

OAITransformEncryption_MlUserDataEncryption OAITransformEncryption::getMlUserDataEncryption() const {
    return m_ml_user_data_encryption;
}
void OAITransformEncryption::setMlUserDataEncryption(const OAITransformEncryption_MlUserDataEncryption &ml_user_data_encryption) {
    m_ml_user_data_encryption = ml_user_data_encryption;
    m_ml_user_data_encryption_isSet = true;
}

bool OAITransformEncryption::is_ml_user_data_encryption_Set() const{
    return m_ml_user_data_encryption_isSet;
}

bool OAITransformEncryption::is_ml_user_data_encryption_Valid() const{
    return m_ml_user_data_encryption_isValid;
}

QString OAITransformEncryption::getTaskRunSecurityConfigurationName() const {
    return m_task_run_security_configuration_name;
}
void OAITransformEncryption::setTaskRunSecurityConfigurationName(const QString &task_run_security_configuration_name) {
    m_task_run_security_configuration_name = task_run_security_configuration_name;
    m_task_run_security_configuration_name_isSet = true;
}

bool OAITransformEncryption::is_task_run_security_configuration_name_Set() const{
    return m_task_run_security_configuration_name_isSet;
}

bool OAITransformEncryption::is_task_run_security_configuration_name_Valid() const{
    return m_task_run_security_configuration_name_isValid;
}

bool OAITransformEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ml_user_data_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_run_security_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
