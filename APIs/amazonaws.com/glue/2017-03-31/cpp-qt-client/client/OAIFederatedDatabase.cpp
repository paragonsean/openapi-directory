/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFederatedDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFederatedDatabase::OAIFederatedDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFederatedDatabase::OAIFederatedDatabase() {
    this->initializeModel();
}

OAIFederatedDatabase::~OAIFederatedDatabase() {}

void OAIFederatedDatabase::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;
}

void OAIFederatedDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFederatedDatabase::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;
}

QString OAIFederatedDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFederatedDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    return obj;
}

QString OAIFederatedDatabase::getIdentifier() const {
    return m_identifier;
}
void OAIFederatedDatabase::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFederatedDatabase::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFederatedDatabase::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIFederatedDatabase::getConnectionName() const {
    return m_connection_name;
}
void OAIFederatedDatabase::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIFederatedDatabase::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIFederatedDatabase::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

bool OAIFederatedDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFederatedDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
