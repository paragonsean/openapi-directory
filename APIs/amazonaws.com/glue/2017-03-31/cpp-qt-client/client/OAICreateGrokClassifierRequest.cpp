/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGrokClassifierRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGrokClassifierRequest::OAICreateGrokClassifierRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGrokClassifierRequest::OAICreateGrokClassifierRequest() {
    this->initializeModel();
}

OAICreateGrokClassifierRequest::~OAICreateGrokClassifierRequest() {}

void OAICreateGrokClassifierRequest::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_grok_pattern_isSet = false;
    m_grok_pattern_isValid = false;

    m_custom_patterns_isSet = false;
    m_custom_patterns_isValid = false;
}

void OAICreateGrokClassifierRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGrokClassifierRequest::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("Classification")]);
    m_classification_isSet = !json[QString("Classification")].isNull() && m_classification_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_grok_pattern_isValid = ::OpenAPI::fromJsonValue(m_grok_pattern, json[QString("GrokPattern")]);
    m_grok_pattern_isSet = !json[QString("GrokPattern")].isNull() && m_grok_pattern_isValid;

    m_custom_patterns_isValid = ::OpenAPI::fromJsonValue(m_custom_patterns, json[QString("CustomPatterns")]);
    m_custom_patterns_isSet = !json[QString("CustomPatterns")].isNull() && m_custom_patterns_isValid;
}

QString OAICreateGrokClassifierRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGrokClassifierRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_isSet) {
        obj.insert(QString("Classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_grok_pattern_isSet) {
        obj.insert(QString("GrokPattern"), ::OpenAPI::toJsonValue(m_grok_pattern));
    }
    if (m_custom_patterns_isSet) {
        obj.insert(QString("CustomPatterns"), ::OpenAPI::toJsonValue(m_custom_patterns));
    }
    return obj;
}

QString OAICreateGrokClassifierRequest::getClassification() const {
    return m_classification;
}
void OAICreateGrokClassifierRequest::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAICreateGrokClassifierRequest::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAICreateGrokClassifierRequest::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAICreateGrokClassifierRequest::getName() const {
    return m_name;
}
void OAICreateGrokClassifierRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateGrokClassifierRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateGrokClassifierRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateGrokClassifierRequest::getGrokPattern() const {
    return m_grok_pattern;
}
void OAICreateGrokClassifierRequest::setGrokPattern(const QString &grok_pattern) {
    m_grok_pattern = grok_pattern;
    m_grok_pattern_isSet = true;
}

bool OAICreateGrokClassifierRequest::is_grok_pattern_Set() const{
    return m_grok_pattern_isSet;
}

bool OAICreateGrokClassifierRequest::is_grok_pattern_Valid() const{
    return m_grok_pattern_isValid;
}

QString OAICreateGrokClassifierRequest::getCustomPatterns() const {
    return m_custom_patterns;
}
void OAICreateGrokClassifierRequest::setCustomPatterns(const QString &custom_patterns) {
    m_custom_patterns = custom_patterns;
    m_custom_patterns_isSet = true;
}

bool OAICreateGrokClassifierRequest::is_custom_patterns_Set() const{
    return m_custom_patterns_isSet;
}

bool OAICreateGrokClassifierRequest::is_custom_patterns_Valid() const{
    return m_custom_patterns_isValid;
}

bool OAICreateGrokClassifierRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grok_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_patterns_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGrokClassifierRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_name_isValid && m_grok_pattern_isValid && true;
}

} // namespace OpenAPI
