/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuerySchemaVersionMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuerySchemaVersionMetadataResponse::OAIQuerySchemaVersionMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuerySchemaVersionMetadataResponse::OAIQuerySchemaVersionMetadataResponse() {
    this->initializeModel();
}

OAIQuerySchemaVersionMetadataResponse::~OAIQuerySchemaVersionMetadataResponse() {}

void OAIQuerySchemaVersionMetadataResponse::initializeModel() {

    m_metadata_info_map_isSet = false;
    m_metadata_info_map_isValid = false;

    m_schema_version_id_isSet = false;
    m_schema_version_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIQuerySchemaVersionMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuerySchemaVersionMetadataResponse::fromJsonObject(QJsonObject json) {

    m_metadata_info_map_isValid = ::OpenAPI::fromJsonValue(m_metadata_info_map, json[QString("MetadataInfoMap")]);
    m_metadata_info_map_isSet = !json[QString("MetadataInfoMap")].isNull() && m_metadata_info_map_isValid;

    m_schema_version_id_isValid = ::OpenAPI::fromJsonValue(m_schema_version_id, json[QString("SchemaVersionId")]);
    m_schema_version_id_isSet = !json[QString("SchemaVersionId")].isNull() && m_schema_version_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIQuerySchemaVersionMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuerySchemaVersionMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_info_map.isSet()) {
        obj.insert(QString("MetadataInfoMap"), ::OpenAPI::toJsonValue(m_metadata_info_map));
    }
    if (m_schema_version_id_isSet) {
        obj.insert(QString("SchemaVersionId"), ::OpenAPI::toJsonValue(m_schema_version_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QMap OAIQuerySchemaVersionMetadataResponse::getMetadataInfoMap() const {
    return m_metadata_info_map;
}
void OAIQuerySchemaVersionMetadataResponse::setMetadataInfoMap(const QMap &metadata_info_map) {
    m_metadata_info_map = metadata_info_map;
    m_metadata_info_map_isSet = true;
}

bool OAIQuerySchemaVersionMetadataResponse::is_metadata_info_map_Set() const{
    return m_metadata_info_map_isSet;
}

bool OAIQuerySchemaVersionMetadataResponse::is_metadata_info_map_Valid() const{
    return m_metadata_info_map_isValid;
}

QString OAIQuerySchemaVersionMetadataResponse::getSchemaVersionId() const {
    return m_schema_version_id;
}
void OAIQuerySchemaVersionMetadataResponse::setSchemaVersionId(const QString &schema_version_id) {
    m_schema_version_id = schema_version_id;
    m_schema_version_id_isSet = true;
}

bool OAIQuerySchemaVersionMetadataResponse::is_schema_version_id_Set() const{
    return m_schema_version_id_isSet;
}

bool OAIQuerySchemaVersionMetadataResponse::is_schema_version_id_Valid() const{
    return m_schema_version_id_isValid;
}

QString OAIQuerySchemaVersionMetadataResponse::getNextToken() const {
    return m_next_token;
}
void OAIQuerySchemaVersionMetadataResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIQuerySchemaVersionMetadataResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIQuerySchemaVersionMetadataResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIQuerySchemaVersionMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_info_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuerySchemaVersionMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
