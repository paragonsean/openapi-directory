/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnStatisticsError_ColumnStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnStatisticsError_ColumnStatistics::OAIColumnStatisticsError_ColumnStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnStatisticsError_ColumnStatistics::OAIColumnStatisticsError_ColumnStatistics() {
    this->initializeModel();
}

OAIColumnStatisticsError_ColumnStatistics::~OAIColumnStatisticsError_ColumnStatistics() {}

void OAIColumnStatisticsError_ColumnStatistics::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_column_type_isSet = false;
    m_column_type_isValid = false;

    m_analyzed_time_isSet = false;
    m_analyzed_time_isValid = false;

    m_statistics_data_isSet = false;
    m_statistics_data_isValid = false;
}

void OAIColumnStatisticsError_ColumnStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnStatisticsError_ColumnStatistics::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_column_type_isValid = ::OpenAPI::fromJsonValue(m_column_type, json[QString("ColumnType")]);
    m_column_type_isSet = !json[QString("ColumnType")].isNull() && m_column_type_isValid;

    m_analyzed_time_isValid = ::OpenAPI::fromJsonValue(m_analyzed_time, json[QString("AnalyzedTime")]);
    m_analyzed_time_isSet = !json[QString("AnalyzedTime")].isNull() && m_analyzed_time_isValid;

    m_statistics_data_isValid = ::OpenAPI::fromJsonValue(m_statistics_data, json[QString("StatisticsData")]);
    m_statistics_data_isSet = !json[QString("StatisticsData")].isNull() && m_statistics_data_isValid;
}

QString OAIColumnStatisticsError_ColumnStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnStatisticsError_ColumnStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_column_type_isSet) {
        obj.insert(QString("ColumnType"), ::OpenAPI::toJsonValue(m_column_type));
    }
    if (m_analyzed_time_isSet) {
        obj.insert(QString("AnalyzedTime"), ::OpenAPI::toJsonValue(m_analyzed_time));
    }
    if (m_statistics_data.isSet()) {
        obj.insert(QString("StatisticsData"), ::OpenAPI::toJsonValue(m_statistics_data));
    }
    return obj;
}

QString OAIColumnStatisticsError_ColumnStatistics::getColumnName() const {
    return m_column_name;
}
void OAIColumnStatisticsError_ColumnStatistics::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIColumnStatisticsError_ColumnStatistics::getColumnType() const {
    return m_column_type;
}
void OAIColumnStatisticsError_ColumnStatistics::setColumnType(const QString &column_type) {
    m_column_type = column_type;
    m_column_type_isSet = true;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_column_type_Set() const{
    return m_column_type_isSet;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_column_type_Valid() const{
    return m_column_type_isValid;
}

QDateTime OAIColumnStatisticsError_ColumnStatistics::getAnalyzedTime() const {
    return m_analyzed_time;
}
void OAIColumnStatisticsError_ColumnStatistics::setAnalyzedTime(const QDateTime &analyzed_time) {
    m_analyzed_time = analyzed_time;
    m_analyzed_time_isSet = true;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_analyzed_time_Set() const{
    return m_analyzed_time_isSet;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_analyzed_time_Valid() const{
    return m_analyzed_time_isValid;
}

OAIColumnStatistics_StatisticsData OAIColumnStatisticsError_ColumnStatistics::getStatisticsData() const {
    return m_statistics_data;
}
void OAIColumnStatisticsError_ColumnStatistics::setStatisticsData(const OAIColumnStatistics_StatisticsData &statistics_data) {
    m_statistics_data = statistics_data;
    m_statistics_data_isSet = true;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_statistics_data_Set() const{
    return m_statistics_data_isSet;
}

bool OAIColumnStatisticsError_ColumnStatistics::is_statistics_data_Valid() const{
    return m_statistics_data_isValid;
}

bool OAIColumnStatisticsError_ColumnStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyzed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnStatisticsError_ColumnStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_column_type_isValid && m_analyzed_time_isValid && m_statistics_data_isValid && true;
}

} // namespace OpenAPI
