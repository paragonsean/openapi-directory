/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDescriptor_SchemaReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDescriptor_SchemaReference::OAIStorageDescriptor_SchemaReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDescriptor_SchemaReference::OAIStorageDescriptor_SchemaReference() {
    this->initializeModel();
}

OAIStorageDescriptor_SchemaReference::~OAIStorageDescriptor_SchemaReference() {}

void OAIStorageDescriptor_SchemaReference::initializeModel() {

    m_schema_id_isSet = false;
    m_schema_id_isValid = false;

    m_schema_version_id_isSet = false;
    m_schema_version_id_isValid = false;

    m_schema_version_number_isSet = false;
    m_schema_version_number_isValid = false;
}

void OAIStorageDescriptor_SchemaReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDescriptor_SchemaReference::fromJsonObject(QJsonObject json) {

    m_schema_id_isValid = ::OpenAPI::fromJsonValue(m_schema_id, json[QString("SchemaId")]);
    m_schema_id_isSet = !json[QString("SchemaId")].isNull() && m_schema_id_isValid;

    m_schema_version_id_isValid = ::OpenAPI::fromJsonValue(m_schema_version_id, json[QString("SchemaVersionId")]);
    m_schema_version_id_isSet = !json[QString("SchemaVersionId")].isNull() && m_schema_version_id_isValid;

    m_schema_version_number_isValid = ::OpenAPI::fromJsonValue(m_schema_version_number, json[QString("SchemaVersionNumber")]);
    m_schema_version_number_isSet = !json[QString("SchemaVersionNumber")].isNull() && m_schema_version_number_isValid;
}

QString OAIStorageDescriptor_SchemaReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDescriptor_SchemaReference::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_id.isSet()) {
        obj.insert(QString("SchemaId"), ::OpenAPI::toJsonValue(m_schema_id));
    }
    if (m_schema_version_id_isSet) {
        obj.insert(QString("SchemaVersionId"), ::OpenAPI::toJsonValue(m_schema_version_id));
    }
    if (m_schema_version_number_isSet) {
        obj.insert(QString("SchemaVersionNumber"), ::OpenAPI::toJsonValue(m_schema_version_number));
    }
    return obj;
}

OAISchemaReference_SchemaId OAIStorageDescriptor_SchemaReference::getSchemaId() const {
    return m_schema_id;
}
void OAIStorageDescriptor_SchemaReference::setSchemaId(const OAISchemaReference_SchemaId &schema_id) {
    m_schema_id = schema_id;
    m_schema_id_isSet = true;
}

bool OAIStorageDescriptor_SchemaReference::is_schema_id_Set() const{
    return m_schema_id_isSet;
}

bool OAIStorageDescriptor_SchemaReference::is_schema_id_Valid() const{
    return m_schema_id_isValid;
}

QString OAIStorageDescriptor_SchemaReference::getSchemaVersionId() const {
    return m_schema_version_id;
}
void OAIStorageDescriptor_SchemaReference::setSchemaVersionId(const QString &schema_version_id) {
    m_schema_version_id = schema_version_id;
    m_schema_version_id_isSet = true;
}

bool OAIStorageDescriptor_SchemaReference::is_schema_version_id_Set() const{
    return m_schema_version_id_isSet;
}

bool OAIStorageDescriptor_SchemaReference::is_schema_version_id_Valid() const{
    return m_schema_version_id_isValid;
}

qint32 OAIStorageDescriptor_SchemaReference::getSchemaVersionNumber() const {
    return m_schema_version_number;
}
void OAIStorageDescriptor_SchemaReference::setSchemaVersionNumber(const qint32 &schema_version_number) {
    m_schema_version_number = schema_version_number;
    m_schema_version_number_isSet = true;
}

bool OAIStorageDescriptor_SchemaReference::is_schema_version_number_Set() const{
    return m_schema_version_number_isSet;
}

bool OAIStorageDescriptor_SchemaReference::is_schema_version_number_Valid() const{
    return m_schema_version_number_isValid;
}

bool OAIStorageDescriptor_SchemaReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDescriptor_SchemaReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
