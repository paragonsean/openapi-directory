/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompatibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompatibility::OAICompatibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompatibility::OAICompatibility() {
    this->initializeModel();
}

OAICompatibility::~OAICompatibility() {}

void OAICompatibility::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICompatibility::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICompatibility::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKWARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::BACKWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKWARD_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::BACKWARD_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORWARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::FORWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORWARD_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::FORWARD_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::FULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FULL_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompatibility::FULL_ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICompatibility::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICompatibility::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICompatibility::NONE:
            val = "NONE";
            break;
        case eOAICompatibility::DISABLED:
            val = "DISABLED";
            break;
        case eOAICompatibility::BACKWARD:
            val = "BACKWARD";
            break;
        case eOAICompatibility::BACKWARD_ALL:
            val = "BACKWARD_ALL";
            break;
        case eOAICompatibility::FORWARD:
            val = "FORWARD";
            break;
        case eOAICompatibility::FORWARD_ALL:
            val = "FORWARD_ALL";
            break;
        case eOAICompatibility::FULL:
            val = "FULL";
            break;
        case eOAICompatibility::FULL_ALL:
            val = "FULL_ALL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICompatibility::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICompatibility::eOAICompatibility OAICompatibility::getValue() const {
    return m_value;
}

void OAICompatibility::setValue(const OAICompatibility::eOAICompatibility& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICompatibility::isSet() const {
    
    return m_value_isSet;
}

bool OAICompatibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
