/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRegistryInput_RegistryId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRegistryInput_RegistryId::OAIDeleteRegistryInput_RegistryId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRegistryInput_RegistryId::OAIDeleteRegistryInput_RegistryId() {
    this->initializeModel();
}

OAIDeleteRegistryInput_RegistryId::~OAIDeleteRegistryInput_RegistryId() {}

void OAIDeleteRegistryInput_RegistryId::initializeModel() {

    m_registry_name_isSet = false;
    m_registry_name_isValid = false;

    m_registry_arn_isSet = false;
    m_registry_arn_isValid = false;
}

void OAIDeleteRegistryInput_RegistryId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRegistryInput_RegistryId::fromJsonObject(QJsonObject json) {

    m_registry_name_isValid = ::OpenAPI::fromJsonValue(m_registry_name, json[QString("RegistryName")]);
    m_registry_name_isSet = !json[QString("RegistryName")].isNull() && m_registry_name_isValid;

    m_registry_arn_isValid = ::OpenAPI::fromJsonValue(m_registry_arn, json[QString("RegistryArn")]);
    m_registry_arn_isSet = !json[QString("RegistryArn")].isNull() && m_registry_arn_isValid;
}

QString OAIDeleteRegistryInput_RegistryId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRegistryInput_RegistryId::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_name_isSet) {
        obj.insert(QString("RegistryName"), ::OpenAPI::toJsonValue(m_registry_name));
    }
    if (m_registry_arn_isSet) {
        obj.insert(QString("RegistryArn"), ::OpenAPI::toJsonValue(m_registry_arn));
    }
    return obj;
}

QString OAIDeleteRegistryInput_RegistryId::getRegistryName() const {
    return m_registry_name;
}
void OAIDeleteRegistryInput_RegistryId::setRegistryName(const QString &registry_name) {
    m_registry_name = registry_name;
    m_registry_name_isSet = true;
}

bool OAIDeleteRegistryInput_RegistryId::is_registry_name_Set() const{
    return m_registry_name_isSet;
}

bool OAIDeleteRegistryInput_RegistryId::is_registry_name_Valid() const{
    return m_registry_name_isValid;
}

QString OAIDeleteRegistryInput_RegistryId::getRegistryArn() const {
    return m_registry_arn;
}
void OAIDeleteRegistryInput_RegistryId::setRegistryArn(const QString &registry_arn) {
    m_registry_arn = registry_arn;
    m_registry_arn_isSet = true;
}

bool OAIDeleteRegistryInput_RegistryId::is_registry_arn_Set() const{
    return m_registry_arn_isSet;
}

bool OAIDeleteRegistryInput_RegistryId::is_registry_arn_Valid() const{
    return m_registry_arn_isValid;
}

bool OAIDeleteRegistryInput_RegistryId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRegistryInput_RegistryId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
