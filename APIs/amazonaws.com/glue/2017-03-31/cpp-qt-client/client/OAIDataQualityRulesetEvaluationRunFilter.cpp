/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataQualityRulesetEvaluationRunFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataQualityRulesetEvaluationRunFilter::OAIDataQualityRulesetEvaluationRunFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataQualityRulesetEvaluationRunFilter::OAIDataQualityRulesetEvaluationRunFilter() {
    this->initializeModel();
}

OAIDataQualityRulesetEvaluationRunFilter::~OAIDataQualityRulesetEvaluationRunFilter() {}

void OAIDataQualityRulesetEvaluationRunFilter::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_started_before_isSet = false;
    m_started_before_isValid = false;

    m_started_after_isSet = false;
    m_started_after_isValid = false;
}

void OAIDataQualityRulesetEvaluationRunFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataQualityRulesetEvaluationRunFilter::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_started_before_isValid = ::OpenAPI::fromJsonValue(m_started_before, json[QString("StartedBefore")]);
    m_started_before_isSet = !json[QString("StartedBefore")].isNull() && m_started_before_isValid;

    m_started_after_isValid = ::OpenAPI::fromJsonValue(m_started_after, json[QString("StartedAfter")]);
    m_started_after_isSet = !json[QString("StartedAfter")].isNull() && m_started_after_isValid;
}

QString OAIDataQualityRulesetEvaluationRunFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataQualityRulesetEvaluationRunFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_started_before_isSet) {
        obj.insert(QString("StartedBefore"), ::OpenAPI::toJsonValue(m_started_before));
    }
    if (m_started_after_isSet) {
        obj.insert(QString("StartedAfter"), ::OpenAPI::toJsonValue(m_started_after));
    }
    return obj;
}

OAIDataQualityRulesetEvaluationRunFilter_DataSource OAIDataQualityRulesetEvaluationRunFilter::getDataSource() const {
    return m_data_source;
}
void OAIDataQualityRulesetEvaluationRunFilter::setDataSource(const OAIDataQualityRulesetEvaluationRunFilter_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDataQualityRulesetEvaluationRunFilter::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDataQualityRulesetEvaluationRunFilter::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QDateTime OAIDataQualityRulesetEvaluationRunFilter::getStartedBefore() const {
    return m_started_before;
}
void OAIDataQualityRulesetEvaluationRunFilter::setStartedBefore(const QDateTime &started_before) {
    m_started_before = started_before;
    m_started_before_isSet = true;
}

bool OAIDataQualityRulesetEvaluationRunFilter::is_started_before_Set() const{
    return m_started_before_isSet;
}

bool OAIDataQualityRulesetEvaluationRunFilter::is_started_before_Valid() const{
    return m_started_before_isValid;
}

QDateTime OAIDataQualityRulesetEvaluationRunFilter::getStartedAfter() const {
    return m_started_after;
}
void OAIDataQualityRulesetEvaluationRunFilter::setStartedAfter(const QDateTime &started_after) {
    m_started_after = started_after;
    m_started_after_isSet = true;
}

bool OAIDataQualityRulesetEvaluationRunFilter::is_started_after_Set() const{
    return m_started_after_isSet;
}

bool OAIDataQualityRulesetEvaluationRunFilter::is_started_after_Valid() const{
    return m_started_after_isValid;
}

bool OAIDataQualityRulesetEvaluationRunFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataQualityRulesetEvaluationRunFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && true;
}

} // namespace OpenAPI
