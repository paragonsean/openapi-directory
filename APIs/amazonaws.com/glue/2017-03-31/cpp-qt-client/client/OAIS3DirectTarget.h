/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIS3DirectTarget.h
 *
 * Specifies a data target that writes to Amazon S3.
 */

#ifndef OAIS3DirectTarget_H
#define OAIS3DirectTarget_H

#include <QJsonObject>

#include "OAIS3GlueParquetTarget_SchemaChangePolicy.h"
#include "OAITargetFormat.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIS3GlueParquetTarget_SchemaChangePolicy;

class OAIS3DirectTarget : public OAIObject {
public:
    OAIS3DirectTarget();
    OAIS3DirectTarget(QString json);
    ~OAIS3DirectTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getInputs() const;
    void setInputs(const QList &inputs);
    bool is_inputs_Set() const;
    bool is_inputs_Valid() const;

    QList getPartitionKeys() const;
    void setPartitionKeys(const QList &partition_keys);
    bool is_partition_keys_Set() const;
    bool is_partition_keys_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getCompression() const;
    void setCompression(const QString &compression);
    bool is_compression_Set() const;
    bool is_compression_Valid() const;

    OAITargetFormat getFormat() const;
    void setFormat(const OAITargetFormat &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    OAIS3GlueParquetTarget_SchemaChangePolicy getSchemaChangePolicy() const;
    void setSchemaChangePolicy(const OAIS3GlueParquetTarget_SchemaChangePolicy &schema_change_policy);
    bool is_schema_change_policy_Set() const;
    bool is_schema_change_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_inputs;
    bool m_inputs_isSet;
    bool m_inputs_isValid;

    QList m_partition_keys;
    bool m_partition_keys_isSet;
    bool m_partition_keys_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_compression;
    bool m_compression_isSet;
    bool m_compression_isValid;

    OAITargetFormat m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    OAIS3GlueParquetTarget_SchemaChangePolicy m_schema_change_policy;
    bool m_schema_change_policy_isSet;
    bool m_schema_change_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIS3DirectTarget)

#endif // OAIS3DirectTarget_H
