/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICodeGenConfigurationNode_S3CsvSource.h
 *
 * 
 */

#ifndef OAICodeGenConfigurationNode_S3CsvSource_H
#define OAICodeGenConfigurationNode_S3CsvSource_H

#include <QJsonObject>

#include "OAICompressionType.h"
#include "OAIQuoteChar.h"
#include "OAIS3CsvSource_AdditionalOptions.h"
#include "OAISeparator.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIS3CsvSource_AdditionalOptions;

class OAICodeGenConfigurationNode_S3CsvSource : public OAIObject {
public:
    OAICodeGenConfigurationNode_S3CsvSource();
    OAICodeGenConfigurationNode_S3CsvSource(QString json);
    ~OAICodeGenConfigurationNode_S3CsvSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getPaths() const;
    void setPaths(const QList &paths);
    bool is_paths_Set() const;
    bool is_paths_Valid() const;

    OAICompressionType getCompressionType() const;
    void setCompressionType(const OAICompressionType &compression_type);
    bool is_compression_type_Set() const;
    bool is_compression_type_Valid() const;

    QList getExclusions() const;
    void setExclusions(const QList &exclusions);
    bool is_exclusions_Set() const;
    bool is_exclusions_Valid() const;

    QString getGroupSize() const;
    void setGroupSize(const QString &group_size);
    bool is_group_size_Set() const;
    bool is_group_size_Valid() const;

    QString getGroupFiles() const;
    void setGroupFiles(const QString &group_files);
    bool is_group_files_Set() const;
    bool is_group_files_Valid() const;

    bool getRecurse() const;
    void setRecurse(const bool &recurse);
    bool is_recurse_Set() const;
    bool is_recurse_Valid() const;

    qint32 getMaxBand() const;
    void setMaxBand(const qint32 &max_band);
    bool is_max_band_Set() const;
    bool is_max_band_Valid() const;

    qint32 getMaxFilesInBand() const;
    void setMaxFilesInBand(const qint32 &max_files_in_band);
    bool is_max_files_in_band_Set() const;
    bool is_max_files_in_band_Valid() const;

    OAIS3CsvSource_AdditionalOptions getAdditionalOptions() const;
    void setAdditionalOptions(const OAIS3CsvSource_AdditionalOptions &additional_options);
    bool is_additional_options_Set() const;
    bool is_additional_options_Valid() const;

    OAISeparator getSeparator() const;
    void setSeparator(const OAISeparator &separator);
    bool is_separator_Set() const;
    bool is_separator_Valid() const;

    QString getEscaper() const;
    void setEscaper(const QString &escaper);
    bool is_escaper_Set() const;
    bool is_escaper_Valid() const;

    OAIQuoteChar getQuoteChar() const;
    void setQuoteChar(const OAIQuoteChar &quote_char);
    bool is_quote_char_Set() const;
    bool is_quote_char_Valid() const;

    bool getMultiline() const;
    void setMultiline(const bool &multiline);
    bool is_multiline_Set() const;
    bool is_multiline_Valid() const;

    bool getWithHeader() const;
    void setWithHeader(const bool &with_header);
    bool is_with_header_Set() const;
    bool is_with_header_Valid() const;

    bool getWriteHeader() const;
    void setWriteHeader(const bool &write_header);
    bool is_write_header_Set() const;
    bool is_write_header_Valid() const;

    bool getSkipFirst() const;
    void setSkipFirst(const bool &skip_first);
    bool is_skip_first_Set() const;
    bool is_skip_first_Valid() const;

    bool getOptimizePerformance() const;
    void setOptimizePerformance(const bool &optimize_performance);
    bool is_optimize_performance_Set() const;
    bool is_optimize_performance_Valid() const;

    QList getOutputSchemas() const;
    void setOutputSchemas(const QList &output_schemas);
    bool is_output_schemas_Set() const;
    bool is_output_schemas_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_paths;
    bool m_paths_isSet;
    bool m_paths_isValid;

    OAICompressionType m_compression_type;
    bool m_compression_type_isSet;
    bool m_compression_type_isValid;

    QList m_exclusions;
    bool m_exclusions_isSet;
    bool m_exclusions_isValid;

    QString m_group_size;
    bool m_group_size_isSet;
    bool m_group_size_isValid;

    QString m_group_files;
    bool m_group_files_isSet;
    bool m_group_files_isValid;

    bool m_recurse;
    bool m_recurse_isSet;
    bool m_recurse_isValid;

    qint32 m_max_band;
    bool m_max_band_isSet;
    bool m_max_band_isValid;

    qint32 m_max_files_in_band;
    bool m_max_files_in_band_isSet;
    bool m_max_files_in_band_isValid;

    OAIS3CsvSource_AdditionalOptions m_additional_options;
    bool m_additional_options_isSet;
    bool m_additional_options_isValid;

    OAISeparator m_separator;
    bool m_separator_isSet;
    bool m_separator_isValid;

    QString m_escaper;
    bool m_escaper_isSet;
    bool m_escaper_isValid;

    OAIQuoteChar m_quote_char;
    bool m_quote_char_isSet;
    bool m_quote_char_isValid;

    bool m_multiline;
    bool m_multiline_isSet;
    bool m_multiline_isValid;

    bool m_with_header;
    bool m_with_header_isSet;
    bool m_with_header_isValid;

    bool m_write_header;
    bool m_write_header_isSet;
    bool m_write_header_isValid;

    bool m_skip_first;
    bool m_skip_first_isSet;
    bool m_skip_first_isValid;

    bool m_optimize_performance;
    bool m_optimize_performance_isSet;
    bool m_optimize_performance_isValid;

    QList m_output_schemas;
    bool m_output_schemas_isSet;
    bool m_output_schemas_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICodeGenConfigurationNode_S3CsvSource)

#endif // OAICodeGenConfigurationNode_S3CsvSource_H
