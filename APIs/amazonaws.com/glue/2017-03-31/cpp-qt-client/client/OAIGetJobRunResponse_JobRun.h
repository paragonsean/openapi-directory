/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetJobRunResponse_JobRun.h
 *
 * 
 */

#ifndef OAIGetJobRunResponse_JobRun_H
#define OAIGetJobRunResponse_JobRun_H

#include <QJsonObject>

#include "OAIExecutionClass.h"
#include "OAIJobRunState.h"
#include "OAIStartJobRunRequest_NotificationProperty.h"
#include "OAIWorkerType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStartJobRunRequest_NotificationProperty;

class OAIGetJobRunResponse_JobRun : public OAIObject {
public:
    OAIGetJobRunResponse_JobRun();
    OAIGetJobRunResponse_JobRun(QString json);
    ~OAIGetJobRunResponse_JobRun() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getAttempt() const;
    void setAttempt(const qint32 &attempt);
    bool is_attempt_Set() const;
    bool is_attempt_Valid() const;

    QString getPreviousRunId() const;
    void setPreviousRunId(const QString &previous_run_id);
    bool is_previous_run_id_Set() const;
    bool is_previous_run_id_Valid() const;

    QString getTriggerName() const;
    void setTriggerName(const QString &trigger_name);
    bool is_trigger_name_Set() const;
    bool is_trigger_name_Valid() const;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    QDateTime getStartedOn() const;
    void setStartedOn(const QDateTime &started_on);
    bool is_started_on_Set() const;
    bool is_started_on_Valid() const;

    QDateTime getLastModifiedOn() const;
    void setLastModifiedOn(const QDateTime &last_modified_on);
    bool is_last_modified_on_Set() const;
    bool is_last_modified_on_Valid() const;

    QDateTime getCompletedOn() const;
    void setCompletedOn(const QDateTime &completed_on);
    bool is_completed_on_Set() const;
    bool is_completed_on_Valid() const;

    OAIJobRunState getJobRunState() const;
    void setJobRunState(const OAIJobRunState &job_run_state);
    bool is_job_run_state_Set() const;
    bool is_job_run_state_Valid() const;

    QMap getArguments() const;
    void setArguments(const QMap &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QList getPredecessorRuns() const;
    void setPredecessorRuns(const QList &predecessor_runs);
    bool is_predecessor_runs_Set() const;
    bool is_predecessor_runs_Valid() const;

    qint32 getAllocatedCapacity() const;
    void setAllocatedCapacity(const qint32 &allocated_capacity);
    bool is_allocated_capacity_Set() const;
    bool is_allocated_capacity_Valid() const;

    qint32 getExecutionTime() const;
    void setExecutionTime(const qint32 &execution_time);
    bool is_execution_time_Set() const;
    bool is_execution_time_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    double getMaxCapacity() const;
    void setMaxCapacity(const double &max_capacity);
    bool is_max_capacity_Set() const;
    bool is_max_capacity_Valid() const;

    OAIWorkerType getWorkerType() const;
    void setWorkerType(const OAIWorkerType &worker_type);
    bool is_worker_type_Set() const;
    bool is_worker_type_Valid() const;

    qint32 getNumberOfWorkers() const;
    void setNumberOfWorkers(const qint32 &number_of_workers);
    bool is_number_of_workers_Set() const;
    bool is_number_of_workers_Valid() const;

    QString getSecurityConfiguration() const;
    void setSecurityConfiguration(const QString &security_configuration);
    bool is_security_configuration_Set() const;
    bool is_security_configuration_Valid() const;

    QString getLogGroupName() const;
    void setLogGroupName(const QString &log_group_name);
    bool is_log_group_name_Set() const;
    bool is_log_group_name_Valid() const;

    OAIStartJobRunRequest_NotificationProperty getNotificationProperty() const;
    void setNotificationProperty(const OAIStartJobRunRequest_NotificationProperty &notification_property);
    bool is_notification_property_Set() const;
    bool is_notification_property_Valid() const;

    QString getGlueVersion() const;
    void setGlueVersion(const QString &glue_version);
    bool is_glue_version_Set() const;
    bool is_glue_version_Valid() const;

    double getDpuSeconds() const;
    void setDpuSeconds(const double &dpu_seconds);
    bool is_dpu_seconds_Set() const;
    bool is_dpu_seconds_Valid() const;

    OAIExecutionClass getExecutionClass() const;
    void setExecutionClass(const OAIExecutionClass &execution_class);
    bool is_execution_class_Set() const;
    bool is_execution_class_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_attempt;
    bool m_attempt_isSet;
    bool m_attempt_isValid;

    QString m_previous_run_id;
    bool m_previous_run_id_isSet;
    bool m_previous_run_id_isValid;

    QString m_trigger_name;
    bool m_trigger_name_isSet;
    bool m_trigger_name_isValid;

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    QDateTime m_started_on;
    bool m_started_on_isSet;
    bool m_started_on_isValid;

    QDateTime m_last_modified_on;
    bool m_last_modified_on_isSet;
    bool m_last_modified_on_isValid;

    QDateTime m_completed_on;
    bool m_completed_on_isSet;
    bool m_completed_on_isValid;

    OAIJobRunState m_job_run_state;
    bool m_job_run_state_isSet;
    bool m_job_run_state_isValid;

    QMap m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QList m_predecessor_runs;
    bool m_predecessor_runs_isSet;
    bool m_predecessor_runs_isValid;

    qint32 m_allocated_capacity;
    bool m_allocated_capacity_isSet;
    bool m_allocated_capacity_isValid;

    qint32 m_execution_time;
    bool m_execution_time_isSet;
    bool m_execution_time_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    double m_max_capacity;
    bool m_max_capacity_isSet;
    bool m_max_capacity_isValid;

    OAIWorkerType m_worker_type;
    bool m_worker_type_isSet;
    bool m_worker_type_isValid;

    qint32 m_number_of_workers;
    bool m_number_of_workers_isSet;
    bool m_number_of_workers_isValid;

    QString m_security_configuration;
    bool m_security_configuration_isSet;
    bool m_security_configuration_isValid;

    QString m_log_group_name;
    bool m_log_group_name_isSet;
    bool m_log_group_name_isValid;

    OAIStartJobRunRequest_NotificationProperty m_notification_property;
    bool m_notification_property_isSet;
    bool m_notification_property_isValid;

    QString m_glue_version;
    bool m_glue_version_isSet;
    bool m_glue_version_isValid;

    double m_dpu_seconds;
    bool m_dpu_seconds_isSet;
    bool m_dpu_seconds_isValid;

    OAIExecutionClass m_execution_class;
    bool m_execution_class_isSet;
    bool m_execution_class_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetJobRunResponse_JobRun)

#endif // OAIGetJobRunResponse_JobRun_H
