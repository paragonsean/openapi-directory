/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateSchemaInput.h
 *
 * 
 */

#ifndef OAICreateSchemaInput_H
#define OAICreateSchemaInput_H

#include <QJsonObject>

#include "OAICompatibility.h"
#include "OAICreateSchemaInput_RegistryId.h"
#include "OAIDataFormat.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateSchemaInput_RegistryId;

class OAICreateSchemaInput : public OAIObject {
public:
    OAICreateSchemaInput();
    OAICreateSchemaInput(QString json);
    ~OAICreateSchemaInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateSchemaInput_RegistryId getRegistryId() const;
    void setRegistryId(const OAICreateSchemaInput_RegistryId &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    QString getSchemaName() const;
    void setSchemaName(const QString &schema_name);
    bool is_schema_name_Set() const;
    bool is_schema_name_Valid() const;

    OAIDataFormat getDataFormat() const;
    void setDataFormat(const OAIDataFormat &data_format);
    bool is_data_format_Set() const;
    bool is_data_format_Valid() const;

    OAICompatibility getCompatibility() const;
    void setCompatibility(const OAICompatibility &compatibility);
    bool is_compatibility_Set() const;
    bool is_compatibility_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getSchemaDefinition() const;
    void setSchemaDefinition(const QString &schema_definition);
    bool is_schema_definition_Set() const;
    bool is_schema_definition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateSchemaInput_RegistryId m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;

    QString m_schema_name;
    bool m_schema_name_isSet;
    bool m_schema_name_isValid;

    OAIDataFormat m_data_format;
    bool m_data_format_isSet;
    bool m_data_format_isValid;

    OAICompatibility m_compatibility;
    bool m_compatibility_isSet;
    bool m_compatibility_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_schema_definition;
    bool m_schema_definition_isSet;
    bool m_schema_definition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateSchemaInput)

#endif // OAICreateSchemaInput_H
