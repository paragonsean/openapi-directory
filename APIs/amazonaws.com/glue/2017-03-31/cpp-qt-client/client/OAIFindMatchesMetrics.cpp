/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindMatchesMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindMatchesMetrics::OAIFindMatchesMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindMatchesMetrics::OAIFindMatchesMetrics() {
    this->initializeModel();
}

OAIFindMatchesMetrics::~OAIFindMatchesMetrics() {}

void OAIFindMatchesMetrics::initializeModel() {

    m_area_under_pr_curve_isSet = false;
    m_area_under_pr_curve_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_f1_isSet = false;
    m_f1_isValid = false;

    m_confusion_matrix_isSet = false;
    m_confusion_matrix_isValid = false;

    m_column_importances_isSet = false;
    m_column_importances_isValid = false;
}

void OAIFindMatchesMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindMatchesMetrics::fromJsonObject(QJsonObject json) {

    m_area_under_pr_curve_isValid = ::OpenAPI::fromJsonValue(m_area_under_pr_curve, json[QString("AreaUnderPRCurve")]);
    m_area_under_pr_curve_isSet = !json[QString("AreaUnderPRCurve")].isNull() && m_area_under_pr_curve_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("Precision")]);
    m_precision_isSet = !json[QString("Precision")].isNull() && m_precision_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("Recall")]);
    m_recall_isSet = !json[QString("Recall")].isNull() && m_recall_isValid;

    m_f1_isValid = ::OpenAPI::fromJsonValue(m_f1, json[QString("F1")]);
    m_f1_isSet = !json[QString("F1")].isNull() && m_f1_isValid;

    m_confusion_matrix_isValid = ::OpenAPI::fromJsonValue(m_confusion_matrix, json[QString("ConfusionMatrix")]);
    m_confusion_matrix_isSet = !json[QString("ConfusionMatrix")].isNull() && m_confusion_matrix_isValid;

    m_column_importances_isValid = ::OpenAPI::fromJsonValue(m_column_importances, json[QString("ColumnImportances")]);
    m_column_importances_isSet = !json[QString("ColumnImportances")].isNull() && m_column_importances_isValid;
}

QString OAIFindMatchesMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindMatchesMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_area_under_pr_curve_isSet) {
        obj.insert(QString("AreaUnderPRCurve"), ::OpenAPI::toJsonValue(m_area_under_pr_curve));
    }
    if (m_precision_isSet) {
        obj.insert(QString("Precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_recall_isSet) {
        obj.insert(QString("Recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_f1_isSet) {
        obj.insert(QString("F1"), ::OpenAPI::toJsonValue(m_f1));
    }
    if (m_confusion_matrix.isSet()) {
        obj.insert(QString("ConfusionMatrix"), ::OpenAPI::toJsonValue(m_confusion_matrix));
    }
    if (m_column_importances.isSet()) {
        obj.insert(QString("ColumnImportances"), ::OpenAPI::toJsonValue(m_column_importances));
    }
    return obj;
}

double OAIFindMatchesMetrics::getAreaUnderPrCurve() const {
    return m_area_under_pr_curve;
}
void OAIFindMatchesMetrics::setAreaUnderPrCurve(const double &area_under_pr_curve) {
    m_area_under_pr_curve = area_under_pr_curve;
    m_area_under_pr_curve_isSet = true;
}

bool OAIFindMatchesMetrics::is_area_under_pr_curve_Set() const{
    return m_area_under_pr_curve_isSet;
}

bool OAIFindMatchesMetrics::is_area_under_pr_curve_Valid() const{
    return m_area_under_pr_curve_isValid;
}

double OAIFindMatchesMetrics::getPrecision() const {
    return m_precision;
}
void OAIFindMatchesMetrics::setPrecision(const double &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIFindMatchesMetrics::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIFindMatchesMetrics::is_precision_Valid() const{
    return m_precision_isValid;
}

double OAIFindMatchesMetrics::getRecall() const {
    return m_recall;
}
void OAIFindMatchesMetrics::setRecall(const double &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAIFindMatchesMetrics::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAIFindMatchesMetrics::is_recall_Valid() const{
    return m_recall_isValid;
}

double OAIFindMatchesMetrics::getF1() const {
    return m_f1;
}
void OAIFindMatchesMetrics::setF1(const double &f1) {
    m_f1 = f1;
    m_f1_isSet = true;
}

bool OAIFindMatchesMetrics::is_f1_Set() const{
    return m_f1_isSet;
}

bool OAIFindMatchesMetrics::is_f1_Valid() const{
    return m_f1_isValid;
}

OAIFindMatchesMetrics_ConfusionMatrix OAIFindMatchesMetrics::getConfusionMatrix() const {
    return m_confusion_matrix;
}
void OAIFindMatchesMetrics::setConfusionMatrix(const OAIFindMatchesMetrics_ConfusionMatrix &confusion_matrix) {
    m_confusion_matrix = confusion_matrix;
    m_confusion_matrix_isSet = true;
}

bool OAIFindMatchesMetrics::is_confusion_matrix_Set() const{
    return m_confusion_matrix_isSet;
}

bool OAIFindMatchesMetrics::is_confusion_matrix_Valid() const{
    return m_confusion_matrix_isValid;
}

QList OAIFindMatchesMetrics::getColumnImportances() const {
    return m_column_importances;
}
void OAIFindMatchesMetrics::setColumnImportances(const QList &column_importances) {
    m_column_importances = column_importances;
    m_column_importances_isSet = true;
}

bool OAIFindMatchesMetrics::is_column_importances_Set() const{
    return m_column_importances_isSet;
}

bool OAIFindMatchesMetrics::is_column_importances_Valid() const{
    return m_column_importances_isValid;
}

bool OAIFindMatchesMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_under_pr_curve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confusion_matrix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_importances.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindMatchesMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
