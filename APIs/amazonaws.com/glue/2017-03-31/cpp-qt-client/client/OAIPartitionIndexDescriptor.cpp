/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionIndexDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionIndexDescriptor::OAIPartitionIndexDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionIndexDescriptor::OAIPartitionIndexDescriptor() {
    this->initializeModel();
}

OAIPartitionIndexDescriptor::~OAIPartitionIndexDescriptor() {}

void OAIPartitionIndexDescriptor::initializeModel() {

    m_index_name_isSet = false;
    m_index_name_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_index_status_isSet = false;
    m_index_status_isValid = false;

    m_backfill_errors_isSet = false;
    m_backfill_errors_isValid = false;
}

void OAIPartitionIndexDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionIndexDescriptor::fromJsonObject(QJsonObject json) {

    m_index_name_isValid = ::OpenAPI::fromJsonValue(m_index_name, json[QString("IndexName")]);
    m_index_name_isSet = !json[QString("IndexName")].isNull() && m_index_name_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("Keys")]);
    m_keys_isSet = !json[QString("Keys")].isNull() && m_keys_isValid;

    m_index_status_isValid = ::OpenAPI::fromJsonValue(m_index_status, json[QString("IndexStatus")]);
    m_index_status_isSet = !json[QString("IndexStatus")].isNull() && m_index_status_isValid;

    m_backfill_errors_isValid = ::OpenAPI::fromJsonValue(m_backfill_errors, json[QString("BackfillErrors")]);
    m_backfill_errors_isSet = !json[QString("BackfillErrors")].isNull() && m_backfill_errors_isValid;
}

QString OAIPartitionIndexDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionIndexDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_index_name_isSet) {
        obj.insert(QString("IndexName"), ::OpenAPI::toJsonValue(m_index_name));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("Keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_index_status.isSet()) {
        obj.insert(QString("IndexStatus"), ::OpenAPI::toJsonValue(m_index_status));
    }
    if (m_backfill_errors.isSet()) {
        obj.insert(QString("BackfillErrors"), ::OpenAPI::toJsonValue(m_backfill_errors));
    }
    return obj;
}

QString OAIPartitionIndexDescriptor::getIndexName() const {
    return m_index_name;
}
void OAIPartitionIndexDescriptor::setIndexName(const QString &index_name) {
    m_index_name = index_name;
    m_index_name_isSet = true;
}

bool OAIPartitionIndexDescriptor::is_index_name_Set() const{
    return m_index_name_isSet;
}

bool OAIPartitionIndexDescriptor::is_index_name_Valid() const{
    return m_index_name_isValid;
}

QList OAIPartitionIndexDescriptor::getKeys() const {
    return m_keys;
}
void OAIPartitionIndexDescriptor::setKeys(const QList &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIPartitionIndexDescriptor::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIPartitionIndexDescriptor::is_keys_Valid() const{
    return m_keys_isValid;
}

OAIPartitionIndexStatus OAIPartitionIndexDescriptor::getIndexStatus() const {
    return m_index_status;
}
void OAIPartitionIndexDescriptor::setIndexStatus(const OAIPartitionIndexStatus &index_status) {
    m_index_status = index_status;
    m_index_status_isSet = true;
}

bool OAIPartitionIndexDescriptor::is_index_status_Set() const{
    return m_index_status_isSet;
}

bool OAIPartitionIndexDescriptor::is_index_status_Valid() const{
    return m_index_status_isValid;
}

QList OAIPartitionIndexDescriptor::getBackfillErrors() const {
    return m_backfill_errors;
}
void OAIPartitionIndexDescriptor::setBackfillErrors(const QList &backfill_errors) {
    m_backfill_errors = backfill_errors;
    m_backfill_errors_isSet = true;
}

bool OAIPartitionIndexDescriptor::is_backfill_errors_Set() const{
    return m_backfill_errors_isSet;
}

bool OAIPartitionIndexDescriptor::is_backfill_errors_Valid() const{
    return m_backfill_errors_isValid;
}

bool OAIPartitionIndexDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backfill_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionIndexDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_name_isValid && m_keys_isValid && m_index_status_isValid && true;
}

} // namespace OpenAPI
