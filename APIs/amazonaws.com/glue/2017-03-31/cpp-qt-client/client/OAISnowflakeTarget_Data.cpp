/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnowflakeTarget_Data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnowflakeTarget_Data::OAISnowflakeTarget_Data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnowflakeTarget_Data::OAISnowflakeTarget_Data() {
    this->initializeModel();
}

OAISnowflakeTarget_Data::~OAISnowflakeTarget_Data() {}

void OAISnowflakeTarget_Data::initializeModel() {

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_temp_dir_isSet = false;
    m_temp_dir_isValid = false;

    m_iam_role_isSet = false;
    m_iam_role_isValid = false;

    m_additional_options_isSet = false;
    m_additional_options_isValid = false;

    m_sample_query_isSet = false;
    m_sample_query_isValid = false;

    m_pre_action_isSet = false;
    m_pre_action_isValid = false;

    m_post_action_isSet = false;
    m_post_action_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_upsert_isSet = false;
    m_upsert_isValid = false;

    m_merge_action_isSet = false;
    m_merge_action_isValid = false;

    m_merge_when_matched_isSet = false;
    m_merge_when_matched_isValid = false;

    m_merge_when_not_matched_isSet = false;
    m_merge_when_not_matched_isValid = false;

    m_merge_clause_isSet = false;
    m_merge_clause_isValid = false;

    m_staging_table_isSet = false;
    m_staging_table_isValid = false;

    m_selected_columns_isSet = false;
    m_selected_columns_isValid = false;

    m_auto_pushdown_isSet = false;
    m_auto_pushdown_isValid = false;

    m_table_schema_isSet = false;
    m_table_schema_isValid = false;
}

void OAISnowflakeTarget_Data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnowflakeTarget_Data::fromJsonObject(QJsonObject json) {

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("Connection")]);
    m_connection_isSet = !json[QString("Connection")].isNull() && m_connection_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_temp_dir_isValid = ::OpenAPI::fromJsonValue(m_temp_dir, json[QString("TempDir")]);
    m_temp_dir_isSet = !json[QString("TempDir")].isNull() && m_temp_dir_isValid;

    m_iam_role_isValid = ::OpenAPI::fromJsonValue(m_iam_role, json[QString("IamRole")]);
    m_iam_role_isSet = !json[QString("IamRole")].isNull() && m_iam_role_isValid;

    m_additional_options_isValid = ::OpenAPI::fromJsonValue(m_additional_options, json[QString("AdditionalOptions")]);
    m_additional_options_isSet = !json[QString("AdditionalOptions")].isNull() && m_additional_options_isValid;

    m_sample_query_isValid = ::OpenAPI::fromJsonValue(m_sample_query, json[QString("SampleQuery")]);
    m_sample_query_isSet = !json[QString("SampleQuery")].isNull() && m_sample_query_isValid;

    m_pre_action_isValid = ::OpenAPI::fromJsonValue(m_pre_action, json[QString("PreAction")]);
    m_pre_action_isSet = !json[QString("PreAction")].isNull() && m_pre_action_isValid;

    m_post_action_isValid = ::OpenAPI::fromJsonValue(m_post_action, json[QString("PostAction")]);
    m_post_action_isSet = !json[QString("PostAction")].isNull() && m_post_action_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_upsert_isValid = ::OpenAPI::fromJsonValue(m_upsert, json[QString("Upsert")]);
    m_upsert_isSet = !json[QString("Upsert")].isNull() && m_upsert_isValid;

    m_merge_action_isValid = ::OpenAPI::fromJsonValue(m_merge_action, json[QString("MergeAction")]);
    m_merge_action_isSet = !json[QString("MergeAction")].isNull() && m_merge_action_isValid;

    m_merge_when_matched_isValid = ::OpenAPI::fromJsonValue(m_merge_when_matched, json[QString("MergeWhenMatched")]);
    m_merge_when_matched_isSet = !json[QString("MergeWhenMatched")].isNull() && m_merge_when_matched_isValid;

    m_merge_when_not_matched_isValid = ::OpenAPI::fromJsonValue(m_merge_when_not_matched, json[QString("MergeWhenNotMatched")]);
    m_merge_when_not_matched_isSet = !json[QString("MergeWhenNotMatched")].isNull() && m_merge_when_not_matched_isValid;

    m_merge_clause_isValid = ::OpenAPI::fromJsonValue(m_merge_clause, json[QString("MergeClause")]);
    m_merge_clause_isSet = !json[QString("MergeClause")].isNull() && m_merge_clause_isValid;

    m_staging_table_isValid = ::OpenAPI::fromJsonValue(m_staging_table, json[QString("StagingTable")]);
    m_staging_table_isSet = !json[QString("StagingTable")].isNull() && m_staging_table_isValid;

    m_selected_columns_isValid = ::OpenAPI::fromJsonValue(m_selected_columns, json[QString("SelectedColumns")]);
    m_selected_columns_isSet = !json[QString("SelectedColumns")].isNull() && m_selected_columns_isValid;

    m_auto_pushdown_isValid = ::OpenAPI::fromJsonValue(m_auto_pushdown, json[QString("AutoPushdown")]);
    m_auto_pushdown_isSet = !json[QString("AutoPushdown")].isNull() && m_auto_pushdown_isValid;

    m_table_schema_isValid = ::OpenAPI::fromJsonValue(m_table_schema, json[QString("TableSchema")]);
    m_table_schema_isSet = !json[QString("TableSchema")].isNull() && m_table_schema_isValid;
}

QString OAISnowflakeTarget_Data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnowflakeTarget_Data::asJsonObject() const {
    QJsonObject obj;
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_connection.isSet()) {
        obj.insert(QString("Connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_table_isSet) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_temp_dir_isSet) {
        obj.insert(QString("TempDir"), ::OpenAPI::toJsonValue(m_temp_dir));
    }
    if (m_iam_role.isSet()) {
        obj.insert(QString("IamRole"), ::OpenAPI::toJsonValue(m_iam_role));
    }
    if (m_additional_options.isSet()) {
        obj.insert(QString("AdditionalOptions"), ::OpenAPI::toJsonValue(m_additional_options));
    }
    if (m_sample_query_isSet) {
        obj.insert(QString("SampleQuery"), ::OpenAPI::toJsonValue(m_sample_query));
    }
    if (m_pre_action_isSet) {
        obj.insert(QString("PreAction"), ::OpenAPI::toJsonValue(m_pre_action));
    }
    if (m_post_action_isSet) {
        obj.insert(QString("PostAction"), ::OpenAPI::toJsonValue(m_post_action));
    }
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_upsert_isSet) {
        obj.insert(QString("Upsert"), ::OpenAPI::toJsonValue(m_upsert));
    }
    if (m_merge_action_isSet) {
        obj.insert(QString("MergeAction"), ::OpenAPI::toJsonValue(m_merge_action));
    }
    if (m_merge_when_matched_isSet) {
        obj.insert(QString("MergeWhenMatched"), ::OpenAPI::toJsonValue(m_merge_when_matched));
    }
    if (m_merge_when_not_matched_isSet) {
        obj.insert(QString("MergeWhenNotMatched"), ::OpenAPI::toJsonValue(m_merge_when_not_matched));
    }
    if (m_merge_clause_isSet) {
        obj.insert(QString("MergeClause"), ::OpenAPI::toJsonValue(m_merge_clause));
    }
    if (m_staging_table_isSet) {
        obj.insert(QString("StagingTable"), ::OpenAPI::toJsonValue(m_staging_table));
    }
    if (m_selected_columns.isSet()) {
        obj.insert(QString("SelectedColumns"), ::OpenAPI::toJsonValue(m_selected_columns));
    }
    if (m_auto_pushdown_isSet) {
        obj.insert(QString("AutoPushdown"), ::OpenAPI::toJsonValue(m_auto_pushdown));
    }
    if (m_table_schema.isSet()) {
        obj.insert(QString("TableSchema"), ::OpenAPI::toJsonValue(m_table_schema));
    }
    return obj;
}

QString OAISnowflakeTarget_Data::getSourceType() const {
    return m_source_type;
}
void OAISnowflakeTarget_Data::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAISnowflakeTarget_Data::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAISnowflakeTarget_Data::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAISnowflakeNodeData_Connection OAISnowflakeTarget_Data::getConnection() const {
    return m_connection;
}
void OAISnowflakeTarget_Data::setConnection(const OAISnowflakeNodeData_Connection &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAISnowflakeTarget_Data::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAISnowflakeTarget_Data::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAISnowflakeTarget_Data::getSchema() const {
    return m_schema;
}
void OAISnowflakeTarget_Data::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISnowflakeTarget_Data::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISnowflakeTarget_Data::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAISnowflakeTarget_Data::getTable() const {
    return m_table;
}
void OAISnowflakeTarget_Data::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAISnowflakeTarget_Data::is_table_Set() const{
    return m_table_isSet;
}

bool OAISnowflakeTarget_Data::is_table_Valid() const{
    return m_table_isValid;
}

QString OAISnowflakeTarget_Data::getDatabase() const {
    return m_database;
}
void OAISnowflakeTarget_Data::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAISnowflakeTarget_Data::is_database_Set() const{
    return m_database_isSet;
}

bool OAISnowflakeTarget_Data::is_database_Valid() const{
    return m_database_isValid;
}

QString OAISnowflakeTarget_Data::getTempDir() const {
    return m_temp_dir;
}
void OAISnowflakeTarget_Data::setTempDir(const QString &temp_dir) {
    m_temp_dir = temp_dir;
    m_temp_dir_isSet = true;
}

bool OAISnowflakeTarget_Data::is_temp_dir_Set() const{
    return m_temp_dir_isSet;
}

bool OAISnowflakeTarget_Data::is_temp_dir_Valid() const{
    return m_temp_dir_isValid;
}

OAISnowflakeNodeData_IamRole OAISnowflakeTarget_Data::getIamRole() const {
    return m_iam_role;
}
void OAISnowflakeTarget_Data::setIamRole(const OAISnowflakeNodeData_IamRole &iam_role) {
    m_iam_role = iam_role;
    m_iam_role_isSet = true;
}

bool OAISnowflakeTarget_Data::is_iam_role_Set() const{
    return m_iam_role_isSet;
}

bool OAISnowflakeTarget_Data::is_iam_role_Valid() const{
    return m_iam_role_isValid;
}

QMap OAISnowflakeTarget_Data::getAdditionalOptions() const {
    return m_additional_options;
}
void OAISnowflakeTarget_Data::setAdditionalOptions(const QMap &additional_options) {
    m_additional_options = additional_options;
    m_additional_options_isSet = true;
}

bool OAISnowflakeTarget_Data::is_additional_options_Set() const{
    return m_additional_options_isSet;
}

bool OAISnowflakeTarget_Data::is_additional_options_Valid() const{
    return m_additional_options_isValid;
}

QString OAISnowflakeTarget_Data::getSampleQuery() const {
    return m_sample_query;
}
void OAISnowflakeTarget_Data::setSampleQuery(const QString &sample_query) {
    m_sample_query = sample_query;
    m_sample_query_isSet = true;
}

bool OAISnowflakeTarget_Data::is_sample_query_Set() const{
    return m_sample_query_isSet;
}

bool OAISnowflakeTarget_Data::is_sample_query_Valid() const{
    return m_sample_query_isValid;
}

QString OAISnowflakeTarget_Data::getPreAction() const {
    return m_pre_action;
}
void OAISnowflakeTarget_Data::setPreAction(const QString &pre_action) {
    m_pre_action = pre_action;
    m_pre_action_isSet = true;
}

bool OAISnowflakeTarget_Data::is_pre_action_Set() const{
    return m_pre_action_isSet;
}

bool OAISnowflakeTarget_Data::is_pre_action_Valid() const{
    return m_pre_action_isValid;
}

QString OAISnowflakeTarget_Data::getPostAction() const {
    return m_post_action;
}
void OAISnowflakeTarget_Data::setPostAction(const QString &post_action) {
    m_post_action = post_action;
    m_post_action_isSet = true;
}

bool OAISnowflakeTarget_Data::is_post_action_Set() const{
    return m_post_action_isSet;
}

bool OAISnowflakeTarget_Data::is_post_action_Valid() const{
    return m_post_action_isValid;
}

QString OAISnowflakeTarget_Data::getAction() const {
    return m_action;
}
void OAISnowflakeTarget_Data::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAISnowflakeTarget_Data::is_action_Set() const{
    return m_action_isSet;
}

bool OAISnowflakeTarget_Data::is_action_Valid() const{
    return m_action_isValid;
}

bool OAISnowflakeTarget_Data::getUpsert() const {
    return m_upsert;
}
void OAISnowflakeTarget_Data::setUpsert(const bool &upsert) {
    m_upsert = upsert;
    m_upsert_isSet = true;
}

bool OAISnowflakeTarget_Data::is_upsert_Set() const{
    return m_upsert_isSet;
}

bool OAISnowflakeTarget_Data::is_upsert_Valid() const{
    return m_upsert_isValid;
}

QString OAISnowflakeTarget_Data::getMergeAction() const {
    return m_merge_action;
}
void OAISnowflakeTarget_Data::setMergeAction(const QString &merge_action) {
    m_merge_action = merge_action;
    m_merge_action_isSet = true;
}

bool OAISnowflakeTarget_Data::is_merge_action_Set() const{
    return m_merge_action_isSet;
}

bool OAISnowflakeTarget_Data::is_merge_action_Valid() const{
    return m_merge_action_isValid;
}

QString OAISnowflakeTarget_Data::getMergeWhenMatched() const {
    return m_merge_when_matched;
}
void OAISnowflakeTarget_Data::setMergeWhenMatched(const QString &merge_when_matched) {
    m_merge_when_matched = merge_when_matched;
    m_merge_when_matched_isSet = true;
}

bool OAISnowflakeTarget_Data::is_merge_when_matched_Set() const{
    return m_merge_when_matched_isSet;
}

bool OAISnowflakeTarget_Data::is_merge_when_matched_Valid() const{
    return m_merge_when_matched_isValid;
}

QString OAISnowflakeTarget_Data::getMergeWhenNotMatched() const {
    return m_merge_when_not_matched;
}
void OAISnowflakeTarget_Data::setMergeWhenNotMatched(const QString &merge_when_not_matched) {
    m_merge_when_not_matched = merge_when_not_matched;
    m_merge_when_not_matched_isSet = true;
}

bool OAISnowflakeTarget_Data::is_merge_when_not_matched_Set() const{
    return m_merge_when_not_matched_isSet;
}

bool OAISnowflakeTarget_Data::is_merge_when_not_matched_Valid() const{
    return m_merge_when_not_matched_isValid;
}

QString OAISnowflakeTarget_Data::getMergeClause() const {
    return m_merge_clause;
}
void OAISnowflakeTarget_Data::setMergeClause(const QString &merge_clause) {
    m_merge_clause = merge_clause;
    m_merge_clause_isSet = true;
}

bool OAISnowflakeTarget_Data::is_merge_clause_Set() const{
    return m_merge_clause_isSet;
}

bool OAISnowflakeTarget_Data::is_merge_clause_Valid() const{
    return m_merge_clause_isValid;
}

QString OAISnowflakeTarget_Data::getStagingTable() const {
    return m_staging_table;
}
void OAISnowflakeTarget_Data::setStagingTable(const QString &staging_table) {
    m_staging_table = staging_table;
    m_staging_table_isSet = true;
}

bool OAISnowflakeTarget_Data::is_staging_table_Set() const{
    return m_staging_table_isSet;
}

bool OAISnowflakeTarget_Data::is_staging_table_Valid() const{
    return m_staging_table_isValid;
}

QList OAISnowflakeTarget_Data::getSelectedColumns() const {
    return m_selected_columns;
}
void OAISnowflakeTarget_Data::setSelectedColumns(const QList &selected_columns) {
    m_selected_columns = selected_columns;
    m_selected_columns_isSet = true;
}

bool OAISnowflakeTarget_Data::is_selected_columns_Set() const{
    return m_selected_columns_isSet;
}

bool OAISnowflakeTarget_Data::is_selected_columns_Valid() const{
    return m_selected_columns_isValid;
}

bool OAISnowflakeTarget_Data::getAutoPushdown() const {
    return m_auto_pushdown;
}
void OAISnowflakeTarget_Data::setAutoPushdown(const bool &auto_pushdown) {
    m_auto_pushdown = auto_pushdown;
    m_auto_pushdown_isSet = true;
}

bool OAISnowflakeTarget_Data::is_auto_pushdown_Set() const{
    return m_auto_pushdown_isSet;
}

bool OAISnowflakeTarget_Data::is_auto_pushdown_Valid() const{
    return m_auto_pushdown_isValid;
}

QList OAISnowflakeTarget_Data::getTableSchema() const {
    return m_table_schema;
}
void OAISnowflakeTarget_Data::setTableSchema(const QList &table_schema) {
    m_table_schema = table_schema;
    m_table_schema_isSet = true;
}

bool OAISnowflakeTarget_Data::is_table_schema_Set() const{
    return m_table_schema_isSet;
}

bool OAISnowflakeTarget_Data::is_table_schema_Valid() const{
    return m_table_schema_isValid;
}

bool OAISnowflakeTarget_Data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upsert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_when_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_when_not_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_clause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_pushdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnowflakeTarget_Data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
