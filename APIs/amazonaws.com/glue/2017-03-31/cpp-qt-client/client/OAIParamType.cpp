/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParamType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParamType::OAIParamType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParamType::OAIParamType() {
    this->initializeModel();
}

OAIParamType::~OAIParamType() {}

void OAIParamType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIParamType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIParamType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("str", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::STR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("int", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::INT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("float", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("complex", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::COMPLEX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bool", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::BOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("list", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::LIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("null", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParamType::r_NULL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIParamType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIParamType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIParamType::STR:
            val = "str";
            break;
        case eOAIParamType::INT:
            val = "int";
            break;
        case eOAIParamType::FLOAT:
            val = "float";
            break;
        case eOAIParamType::COMPLEX:
            val = "complex";
            break;
        case eOAIParamType::BOOL:
            val = "bool";
            break;
        case eOAIParamType::LIST:
            val = "list";
            break;
        case eOAIParamType::r_NULL:
            val = "null";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIParamType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIParamType::eOAIParamType OAIParamType::getValue() const {
    return m_value;
}

void OAIParamType::setValue(const OAIParamType::eOAIParamType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIParamType::isSet() const {
    
    return m_value_isSet;
}

bool OAIParamType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
