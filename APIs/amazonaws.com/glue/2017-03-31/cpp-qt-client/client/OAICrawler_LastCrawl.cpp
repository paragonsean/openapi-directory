/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawler_LastCrawl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawler_LastCrawl::OAICrawler_LastCrawl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawler_LastCrawl::OAICrawler_LastCrawl() {
    this->initializeModel();
}

OAICrawler_LastCrawl::~OAICrawler_LastCrawl() {}

void OAICrawler_LastCrawl::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_log_group_isSet = false;
    m_log_group_isValid = false;

    m_log_stream_isSet = false;
    m_log_stream_isValid = false;

    m_message_prefix_isSet = false;
    m_message_prefix_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAICrawler_LastCrawl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawler_LastCrawl::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_log_group_isValid = ::OpenAPI::fromJsonValue(m_log_group, json[QString("LogGroup")]);
    m_log_group_isSet = !json[QString("LogGroup")].isNull() && m_log_group_isValid;

    m_log_stream_isValid = ::OpenAPI::fromJsonValue(m_log_stream, json[QString("LogStream")]);
    m_log_stream_isSet = !json[QString("LogStream")].isNull() && m_log_stream_isValid;

    m_message_prefix_isValid = ::OpenAPI::fromJsonValue(m_message_prefix, json[QString("MessagePrefix")]);
    m_message_prefix_isSet = !json[QString("MessagePrefix")].isNull() && m_message_prefix_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;
}

QString OAICrawler_LastCrawl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawler_LastCrawl::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_log_group_isSet) {
        obj.insert(QString("LogGroup"), ::OpenAPI::toJsonValue(m_log_group));
    }
    if (m_log_stream_isSet) {
        obj.insert(QString("LogStream"), ::OpenAPI::toJsonValue(m_log_stream));
    }
    if (m_message_prefix_isSet) {
        obj.insert(QString("MessagePrefix"), ::OpenAPI::toJsonValue(m_message_prefix));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

OAILastCrawlStatus OAICrawler_LastCrawl::getStatus() const {
    return m_status;
}
void OAICrawler_LastCrawl::setStatus(const OAILastCrawlStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICrawler_LastCrawl::is_status_Set() const{
    return m_status_isSet;
}

bool OAICrawler_LastCrawl::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICrawler_LastCrawl::getErrorMessage() const {
    return m_error_message;
}
void OAICrawler_LastCrawl::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAICrawler_LastCrawl::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAICrawler_LastCrawl::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAICrawler_LastCrawl::getLogGroup() const {
    return m_log_group;
}
void OAICrawler_LastCrawl::setLogGroup(const QString &log_group) {
    m_log_group = log_group;
    m_log_group_isSet = true;
}

bool OAICrawler_LastCrawl::is_log_group_Set() const{
    return m_log_group_isSet;
}

bool OAICrawler_LastCrawl::is_log_group_Valid() const{
    return m_log_group_isValid;
}

QString OAICrawler_LastCrawl::getLogStream() const {
    return m_log_stream;
}
void OAICrawler_LastCrawl::setLogStream(const QString &log_stream) {
    m_log_stream = log_stream;
    m_log_stream_isSet = true;
}

bool OAICrawler_LastCrawl::is_log_stream_Set() const{
    return m_log_stream_isSet;
}

bool OAICrawler_LastCrawl::is_log_stream_Valid() const{
    return m_log_stream_isValid;
}

QString OAICrawler_LastCrawl::getMessagePrefix() const {
    return m_message_prefix;
}
void OAICrawler_LastCrawl::setMessagePrefix(const QString &message_prefix) {
    m_message_prefix = message_prefix;
    m_message_prefix_isSet = true;
}

bool OAICrawler_LastCrawl::is_message_prefix_Set() const{
    return m_message_prefix_isSet;
}

bool OAICrawler_LastCrawl::is_message_prefix_Valid() const{
    return m_message_prefix_isValid;
}

QDateTime OAICrawler_LastCrawl::getStartTime() const {
    return m_start_time;
}
void OAICrawler_LastCrawl::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICrawler_LastCrawl::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICrawler_LastCrawl::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAICrawler_LastCrawl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawler_LastCrawl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
