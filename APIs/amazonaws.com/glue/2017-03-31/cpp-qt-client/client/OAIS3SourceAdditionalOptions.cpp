/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3SourceAdditionalOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3SourceAdditionalOptions::OAIS3SourceAdditionalOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3SourceAdditionalOptions::OAIS3SourceAdditionalOptions() {
    this->initializeModel();
}

OAIS3SourceAdditionalOptions::~OAIS3SourceAdditionalOptions() {}

void OAIS3SourceAdditionalOptions::initializeModel() {

    m_bounded_size_isSet = false;
    m_bounded_size_isValid = false;

    m_bounded_files_isSet = false;
    m_bounded_files_isValid = false;
}

void OAIS3SourceAdditionalOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3SourceAdditionalOptions::fromJsonObject(QJsonObject json) {

    m_bounded_size_isValid = ::OpenAPI::fromJsonValue(m_bounded_size, json[QString("BoundedSize")]);
    m_bounded_size_isSet = !json[QString("BoundedSize")].isNull() && m_bounded_size_isValid;

    m_bounded_files_isValid = ::OpenAPI::fromJsonValue(m_bounded_files, json[QString("BoundedFiles")]);
    m_bounded_files_isSet = !json[QString("BoundedFiles")].isNull() && m_bounded_files_isValid;
}

QString OAIS3SourceAdditionalOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3SourceAdditionalOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bounded_size_isSet) {
        obj.insert(QString("BoundedSize"), ::OpenAPI::toJsonValue(m_bounded_size));
    }
    if (m_bounded_files_isSet) {
        obj.insert(QString("BoundedFiles"), ::OpenAPI::toJsonValue(m_bounded_files));
    }
    return obj;
}

qint32 OAIS3SourceAdditionalOptions::getBoundedSize() const {
    return m_bounded_size;
}
void OAIS3SourceAdditionalOptions::setBoundedSize(const qint32 &bounded_size) {
    m_bounded_size = bounded_size;
    m_bounded_size_isSet = true;
}

bool OAIS3SourceAdditionalOptions::is_bounded_size_Set() const{
    return m_bounded_size_isSet;
}

bool OAIS3SourceAdditionalOptions::is_bounded_size_Valid() const{
    return m_bounded_size_isValid;
}

qint32 OAIS3SourceAdditionalOptions::getBoundedFiles() const {
    return m_bounded_files;
}
void OAIS3SourceAdditionalOptions::setBoundedFiles(const qint32 &bounded_files) {
    m_bounded_files = bounded_files;
    m_bounded_files_isSet = true;
}

bool OAIS3SourceAdditionalOptions::is_bounded_files_Set() const{
    return m_bounded_files_isSet;
}

bool OAIS3SourceAdditionalOptions::is_bounded_files_Valid() const{
    return m_bounded_files_isValid;
}

bool OAIS3SourceAdditionalOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounded_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounded_files_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3SourceAdditionalOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
