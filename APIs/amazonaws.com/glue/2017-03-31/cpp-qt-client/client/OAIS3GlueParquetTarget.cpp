/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3GlueParquetTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3GlueParquetTarget::OAIS3GlueParquetTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3GlueParquetTarget::OAIS3GlueParquetTarget() {
    this->initializeModel();
}

OAIS3GlueParquetTarget::~OAIS3GlueParquetTarget() {}

void OAIS3GlueParquetTarget::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_partition_keys_isSet = false;
    m_partition_keys_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_schema_change_policy_isSet = false;
    m_schema_change_policy_isValid = false;
}

void OAIS3GlueParquetTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3GlueParquetTarget::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_partition_keys_isValid = ::OpenAPI::fromJsonValue(m_partition_keys, json[QString("PartitionKeys")]);
    m_partition_keys_isSet = !json[QString("PartitionKeys")].isNull() && m_partition_keys_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("Compression")]);
    m_compression_isSet = !json[QString("Compression")].isNull() && m_compression_isValid;

    m_schema_change_policy_isValid = ::OpenAPI::fromJsonValue(m_schema_change_policy, json[QString("SchemaChangePolicy")]);
    m_schema_change_policy_isSet = !json[QString("SchemaChangePolicy")].isNull() && m_schema_change_policy_isValid;
}

QString OAIS3GlueParquetTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3GlueParquetTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_partition_keys.isSet()) {
        obj.insert(QString("PartitionKeys"), ::OpenAPI::toJsonValue(m_partition_keys));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_compression.isSet()) {
        obj.insert(QString("Compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_schema_change_policy.isSet()) {
        obj.insert(QString("SchemaChangePolicy"), ::OpenAPI::toJsonValue(m_schema_change_policy));
    }
    return obj;
}

QString OAIS3GlueParquetTarget::getName() const {
    return m_name;
}
void OAIS3GlueParquetTarget::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIS3GlueParquetTarget::is_name_Set() const{
    return m_name_isSet;
}

bool OAIS3GlueParquetTarget::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIS3GlueParquetTarget::getInputs() const {
    return m_inputs;
}
void OAIS3GlueParquetTarget::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIS3GlueParquetTarget::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIS3GlueParquetTarget::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QList OAIS3GlueParquetTarget::getPartitionKeys() const {
    return m_partition_keys;
}
void OAIS3GlueParquetTarget::setPartitionKeys(const QList &partition_keys) {
    m_partition_keys = partition_keys;
    m_partition_keys_isSet = true;
}

bool OAIS3GlueParquetTarget::is_partition_keys_Set() const{
    return m_partition_keys_isSet;
}

bool OAIS3GlueParquetTarget::is_partition_keys_Valid() const{
    return m_partition_keys_isValid;
}

QString OAIS3GlueParquetTarget::getPath() const {
    return m_path;
}
void OAIS3GlueParquetTarget::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIS3GlueParquetTarget::is_path_Set() const{
    return m_path_isSet;
}

bool OAIS3GlueParquetTarget::is_path_Valid() const{
    return m_path_isValid;
}

OAIParquetCompressionType OAIS3GlueParquetTarget::getCompression() const {
    return m_compression;
}
void OAIS3GlueParquetTarget::setCompression(const OAIParquetCompressionType &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAIS3GlueParquetTarget::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAIS3GlueParquetTarget::is_compression_Valid() const{
    return m_compression_isValid;
}

OAIS3GlueParquetTarget_SchemaChangePolicy OAIS3GlueParquetTarget::getSchemaChangePolicy() const {
    return m_schema_change_policy;
}
void OAIS3GlueParquetTarget::setSchemaChangePolicy(const OAIS3GlueParquetTarget_SchemaChangePolicy &schema_change_policy) {
    m_schema_change_policy = schema_change_policy;
    m_schema_change_policy_isSet = true;
}

bool OAIS3GlueParquetTarget::is_schema_change_policy_Set() const{
    return m_schema_change_policy_isSet;
}

bool OAIS3GlueParquetTarget::is_schema_change_policy_Valid() const{
    return m_schema_change_policy_isValid;
}

bool OAIS3GlueParquetTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_change_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3GlueParquetTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_inputs_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
