/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetConnectionsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetConnectionsFilter::OAIGetConnectionsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetConnectionsFilter::OAIGetConnectionsFilter() {
    this->initializeModel();
}

OAIGetConnectionsFilter::~OAIGetConnectionsFilter() {}

void OAIGetConnectionsFilter::initializeModel() {

    m_match_criteria_isSet = false;
    m_match_criteria_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;
}

void OAIGetConnectionsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetConnectionsFilter::fromJsonObject(QJsonObject json) {

    m_match_criteria_isValid = ::OpenAPI::fromJsonValue(m_match_criteria, json[QString("MatchCriteria")]);
    m_match_criteria_isSet = !json[QString("MatchCriteria")].isNull() && m_match_criteria_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;
}

QString OAIGetConnectionsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetConnectionsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_match_criteria.isSet()) {
        obj.insert(QString("MatchCriteria"), ::OpenAPI::toJsonValue(m_match_criteria));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    return obj;
}

QList OAIGetConnectionsFilter::getMatchCriteria() const {
    return m_match_criteria;
}
void OAIGetConnectionsFilter::setMatchCriteria(const QList &match_criteria) {
    m_match_criteria = match_criteria;
    m_match_criteria_isSet = true;
}

bool OAIGetConnectionsFilter::is_match_criteria_Set() const{
    return m_match_criteria_isSet;
}

bool OAIGetConnectionsFilter::is_match_criteria_Valid() const{
    return m_match_criteria_isValid;
}

OAIConnectionType OAIGetConnectionsFilter::getConnectionType() const {
    return m_connection_type;
}
void OAIGetConnectionsFilter::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIGetConnectionsFilter::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIGetConnectionsFilter::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

bool OAIGetConnectionsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetConnectionsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
