/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStatementResponse_Statement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStatementResponse_Statement::OAIGetStatementResponse_Statement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStatementResponse_Statement::OAIGetStatementResponse_Statement() {
    this->initializeModel();
}

OAIGetStatementResponse_Statement::~OAIGetStatementResponse_Statement() {}

void OAIGetStatementResponse_Statement::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;
}

void OAIGetStatementResponse_Statement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStatementResponse_Statement::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("Output")]);
    m_output_isSet = !json[QString("Output")].isNull() && m_output_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("Progress")]);
    m_progress_isSet = !json[QString("Progress")].isNull() && m_progress_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;
}

QString OAIGetStatementResponse_Statement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStatementResponse_Statement::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_output.isSet()) {
        obj.insert(QString("Output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_progress_isSet) {
        obj.insert(QString("Progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    return obj;
}

qint32 OAIGetStatementResponse_Statement::getId() const {
    return m_id;
}
void OAIGetStatementResponse_Statement::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetStatementResponse_Statement::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetStatementResponse_Statement::getCode() const {
    return m_code;
}
void OAIGetStatementResponse_Statement::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGetStatementResponse_Statement::is_code_Valid() const{
    return m_code_isValid;
}

OAIStatementState OAIGetStatementResponse_Statement::getState() const {
    return m_state;
}
void OAIGetStatementResponse_Statement::setState(const OAIStatementState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetStatementResponse_Statement::is_state_Valid() const{
    return m_state_isValid;
}

OAIStatement_Output OAIGetStatementResponse_Statement::getOutput() const {
    return m_output;
}
void OAIGetStatementResponse_Statement::setOutput(const OAIStatement_Output &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_output_Set() const{
    return m_output_isSet;
}

bool OAIGetStatementResponse_Statement::is_output_Valid() const{
    return m_output_isValid;
}

double OAIGetStatementResponse_Statement::getProgress() const {
    return m_progress;
}
void OAIGetStatementResponse_Statement::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIGetStatementResponse_Statement::is_progress_Valid() const{
    return m_progress_isValid;
}

qint32 OAIGetStatementResponse_Statement::getStartedOn() const {
    return m_started_on;
}
void OAIGetStatementResponse_Statement::setStartedOn(const qint32 &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIGetStatementResponse_Statement::is_started_on_Valid() const{
    return m_started_on_isValid;
}

qint32 OAIGetStatementResponse_Statement::getCompletedOn() const {
    return m_completed_on;
}
void OAIGetStatementResponse_Statement::setCompletedOn(const qint32 &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIGetStatementResponse_Statement::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIGetStatementResponse_Statement::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

bool OAIGetStatementResponse_Statement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStatementResponse_Statement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
