/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataQualityRulesetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataQualityRulesetRequest::OAICreateDataQualityRulesetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataQualityRulesetRequest::OAICreateDataQualityRulesetRequest() {
    this->initializeModel();
}

OAICreateDataQualityRulesetRequest::~OAICreateDataQualityRulesetRequest() {}

void OAICreateDataQualityRulesetRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ruleset_isSet = false;
    m_ruleset_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_target_table_isSet = false;
    m_target_table_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateDataQualityRulesetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataQualityRulesetRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_ruleset_isValid = ::OpenAPI::fromJsonValue(m_ruleset, json[QString("Ruleset")]);
    m_ruleset_isSet = !json[QString("Ruleset")].isNull() && m_ruleset_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_target_table_isValid = ::OpenAPI::fromJsonValue(m_target_table, json[QString("TargetTable")]);
    m_target_table_isSet = !json[QString("TargetTable")].isNull() && m_target_table_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateDataQualityRulesetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataQualityRulesetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ruleset_isSet) {
        obj.insert(QString("Ruleset"), ::OpenAPI::toJsonValue(m_ruleset));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_target_table.isSet()) {
        obj.insert(QString("TargetTable"), ::OpenAPI::toJsonValue(m_target_table));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateDataQualityRulesetRequest::getName() const {
    return m_name;
}
void OAICreateDataQualityRulesetRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDataQualityRulesetRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDataQualityRulesetRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateDataQualityRulesetRequest::getDescription() const {
    return m_description;
}
void OAICreateDataQualityRulesetRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDataQualityRulesetRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDataQualityRulesetRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateDataQualityRulesetRequest::getRuleset() const {
    return m_ruleset;
}
void OAICreateDataQualityRulesetRequest::setRuleset(const QString &ruleset) {
    m_ruleset = ruleset;
    m_ruleset_isSet = true;
}

bool OAICreateDataQualityRulesetRequest::is_ruleset_Set() const{
    return m_ruleset_isSet;
}

bool OAICreateDataQualityRulesetRequest::is_ruleset_Valid() const{
    return m_ruleset_isValid;
}

QMap OAICreateDataQualityRulesetRequest::getTags() const {
    return m_tags;
}
void OAICreateDataQualityRulesetRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataQualityRulesetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataQualityRulesetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateDataQualityRulesetRequest_TargetTable OAICreateDataQualityRulesetRequest::getTargetTable() const {
    return m_target_table;
}
void OAICreateDataQualityRulesetRequest::setTargetTable(const OAICreateDataQualityRulesetRequest_TargetTable &target_table) {
    m_target_table = target_table;
    m_target_table_isSet = true;
}

bool OAICreateDataQualityRulesetRequest::is_target_table_Set() const{
    return m_target_table_isSet;
}

bool OAICreateDataQualityRulesetRequest::is_target_table_Valid() const{
    return m_target_table_isValid;
}

QString OAICreateDataQualityRulesetRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDataQualityRulesetRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDataQualityRulesetRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDataQualityRulesetRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateDataQualityRulesetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruleset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataQualityRulesetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_ruleset_isValid && true;
}

} // namespace OpenAPI
