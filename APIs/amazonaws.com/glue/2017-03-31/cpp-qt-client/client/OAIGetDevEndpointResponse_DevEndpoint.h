/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDevEndpointResponse_DevEndpoint.h
 *
 * 
 */

#ifndef OAIGetDevEndpointResponse_DevEndpoint_H
#define OAIGetDevEndpointResponse_DevEndpoint_H

#include <QJsonObject>

#include "OAIWorkerType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDevEndpointResponse_DevEndpoint : public OAIObject {
public:
    OAIGetDevEndpointResponse_DevEndpoint();
    OAIGetDevEndpointResponse_DevEndpoint(QString json);
    ~OAIGetDevEndpointResponse_DevEndpoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEndpointName() const;
    void setEndpointName(const QString &endpoint_name);
    bool is_endpoint_name_Set() const;
    bool is_endpoint_name_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    QString getYarnEndpointAddress() const;
    void setYarnEndpointAddress(const QString &yarn_endpoint_address);
    bool is_yarn_endpoint_address_Set() const;
    bool is_yarn_endpoint_address_Valid() const;

    QString getPrivateAddress() const;
    void setPrivateAddress(const QString &private_address);
    bool is_private_address_Set() const;
    bool is_private_address_Valid() const;

    qint32 getZeppelinRemoteSparkInterpreterPort() const;
    void setZeppelinRemoteSparkInterpreterPort(const qint32 &zeppelin_remote_spark_interpreter_port);
    bool is_zeppelin_remote_spark_interpreter_port_Set() const;
    bool is_zeppelin_remote_spark_interpreter_port_Valid() const;

    QString getPublicAddress() const;
    void setPublicAddress(const QString &public_address);
    bool is_public_address_Set() const;
    bool is_public_address_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIWorkerType getWorkerType() const;
    void setWorkerType(const OAIWorkerType &worker_type);
    bool is_worker_type_Set() const;
    bool is_worker_type_Valid() const;

    QString getGlueVersion() const;
    void setGlueVersion(const QString &glue_version);
    bool is_glue_version_Set() const;
    bool is_glue_version_Valid() const;

    qint32 getNumberOfWorkers() const;
    void setNumberOfWorkers(const qint32 &number_of_workers);
    bool is_number_of_workers_Set() const;
    bool is_number_of_workers_Valid() const;

    qint32 getNumberOfNodes() const;
    void setNumberOfNodes(const qint32 &number_of_nodes);
    bool is_number_of_nodes_Set() const;
    bool is_number_of_nodes_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    QString getExtraPythonLibsS3Path() const;
    void setExtraPythonLibsS3Path(const QString &extra_python_libs_s3_path);
    bool is_extra_python_libs_s3_path_Set() const;
    bool is_extra_python_libs_s3_path_Valid() const;

    QString getExtraJarsS3Path() const;
    void setExtraJarsS3Path(const QString &extra_jars_s3_path);
    bool is_extra_jars_s3_path_Set() const;
    bool is_extra_jars_s3_path_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QString getLastUpdateStatus() const;
    void setLastUpdateStatus(const QString &last_update_status);
    bool is_last_update_status_Set() const;
    bool is_last_update_status_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QDateTime getLastModifiedTimestamp() const;
    void setLastModifiedTimestamp(const QDateTime &last_modified_timestamp);
    bool is_last_modified_timestamp_Set() const;
    bool is_last_modified_timestamp_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QList getPublicKeys() const;
    void setPublicKeys(const QList &public_keys);
    bool is_public_keys_Set() const;
    bool is_public_keys_Valid() const;

    QString getSecurityConfiguration() const;
    void setSecurityConfiguration(const QString &security_configuration);
    bool is_security_configuration_Set() const;
    bool is_security_configuration_Valid() const;

    QMap getArguments() const;
    void setArguments(const QMap &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_endpoint_name;
    bool m_endpoint_name_isSet;
    bool m_endpoint_name_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    QString m_yarn_endpoint_address;
    bool m_yarn_endpoint_address_isSet;
    bool m_yarn_endpoint_address_isValid;

    QString m_private_address;
    bool m_private_address_isSet;
    bool m_private_address_isValid;

    qint32 m_zeppelin_remote_spark_interpreter_port;
    bool m_zeppelin_remote_spark_interpreter_port_isSet;
    bool m_zeppelin_remote_spark_interpreter_port_isValid;

    QString m_public_address;
    bool m_public_address_isSet;
    bool m_public_address_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIWorkerType m_worker_type;
    bool m_worker_type_isSet;
    bool m_worker_type_isValid;

    QString m_glue_version;
    bool m_glue_version_isSet;
    bool m_glue_version_isValid;

    qint32 m_number_of_workers;
    bool m_number_of_workers_isSet;
    bool m_number_of_workers_isValid;

    qint32 m_number_of_nodes;
    bool m_number_of_nodes_isSet;
    bool m_number_of_nodes_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    QString m_extra_python_libs_s3_path;
    bool m_extra_python_libs_s3_path_isSet;
    bool m_extra_python_libs_s3_path_isValid;

    QString m_extra_jars_s3_path;
    bool m_extra_jars_s3_path_isSet;
    bool m_extra_jars_s3_path_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QString m_last_update_status;
    bool m_last_update_status_isSet;
    bool m_last_update_status_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QDateTime m_last_modified_timestamp;
    bool m_last_modified_timestamp_isSet;
    bool m_last_modified_timestamp_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QList m_public_keys;
    bool m_public_keys_isSet;
    bool m_public_keys_isValid;

    QString m_security_configuration;
    bool m_security_configuration_isSet;
    bool m_security_configuration_isValid;

    QMap m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDevEndpointResponse_DevEndpoint)

#endif // OAIGetDevEndpointResponse_DevEndpoint_H
