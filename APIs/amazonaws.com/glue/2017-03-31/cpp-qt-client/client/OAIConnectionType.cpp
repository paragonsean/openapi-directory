/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionType::OAIConnectionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionType::OAIConnectionType() {
    this->initializeModel();
}

OAIConnectionType::~OAIConnectionType() {}

void OAIConnectionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConnectionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConnectionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("JDBC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::JDBC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SFTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::SFTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONGODB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::MONGODB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KAFKA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::KAFKA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NETWORK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::NETWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARKETPLACE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::MARKETPLACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConnectionType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConnectionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConnectionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConnectionType::JDBC:
            val = "JDBC";
            break;
        case eOAIConnectionType::SFTP:
            val = "SFTP";
            break;
        case eOAIConnectionType::MONGODB:
            val = "MONGODB";
            break;
        case eOAIConnectionType::KAFKA:
            val = "KAFKA";
            break;
        case eOAIConnectionType::NETWORK:
            val = "NETWORK";
            break;
        case eOAIConnectionType::MARKETPLACE:
            val = "MARKETPLACE";
            break;
        case eOAIConnectionType::CUSTOM:
            val = "CUSTOM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConnectionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConnectionType::eOAIConnectionType OAIConnectionType::getValue() const {
    return m_value;
}

void OAIConnectionType::setValue(const OAIConnectionType::eOAIConnectionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConnectionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIConnectionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
