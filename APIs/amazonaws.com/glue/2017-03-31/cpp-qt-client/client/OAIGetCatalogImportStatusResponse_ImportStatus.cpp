/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCatalogImportStatusResponse_ImportStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCatalogImportStatusResponse_ImportStatus::OAIGetCatalogImportStatusResponse_ImportStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCatalogImportStatusResponse_ImportStatus::OAIGetCatalogImportStatusResponse_ImportStatus() {
    this->initializeModel();
}

OAIGetCatalogImportStatusResponse_ImportStatus::~OAIGetCatalogImportStatusResponse_ImportStatus() {}

void OAIGetCatalogImportStatusResponse_ImportStatus::initializeModel() {

    m_import_completed_isSet = false;
    m_import_completed_isValid = false;

    m_import_time_isSet = false;
    m_import_time_isValid = false;

    m_imported_by_isSet = false;
    m_imported_by_isValid = false;
}

void OAIGetCatalogImportStatusResponse_ImportStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCatalogImportStatusResponse_ImportStatus::fromJsonObject(QJsonObject json) {

    m_import_completed_isValid = ::OpenAPI::fromJsonValue(m_import_completed, json[QString("ImportCompleted")]);
    m_import_completed_isSet = !json[QString("ImportCompleted")].isNull() && m_import_completed_isValid;

    m_import_time_isValid = ::OpenAPI::fromJsonValue(m_import_time, json[QString("ImportTime")]);
    m_import_time_isSet = !json[QString("ImportTime")].isNull() && m_import_time_isValid;

    m_imported_by_isValid = ::OpenAPI::fromJsonValue(m_imported_by, json[QString("ImportedBy")]);
    m_imported_by_isSet = !json[QString("ImportedBy")].isNull() && m_imported_by_isValid;
}

QString OAIGetCatalogImportStatusResponse_ImportStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCatalogImportStatusResponse_ImportStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_import_completed_isSet) {
        obj.insert(QString("ImportCompleted"), ::OpenAPI::toJsonValue(m_import_completed));
    }
    if (m_import_time_isSet) {
        obj.insert(QString("ImportTime"), ::OpenAPI::toJsonValue(m_import_time));
    }
    if (m_imported_by_isSet) {
        obj.insert(QString("ImportedBy"), ::OpenAPI::toJsonValue(m_imported_by));
    }
    return obj;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::getImportCompleted() const {
    return m_import_completed;
}
void OAIGetCatalogImportStatusResponse_ImportStatus::setImportCompleted(const bool &import_completed) {
    m_import_completed = import_completed;
    m_import_completed_isSet = true;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::is_import_completed_Set() const{
    return m_import_completed_isSet;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::is_import_completed_Valid() const{
    return m_import_completed_isValid;
}

QDateTime OAIGetCatalogImportStatusResponse_ImportStatus::getImportTime() const {
    return m_import_time;
}
void OAIGetCatalogImportStatusResponse_ImportStatus::setImportTime(const QDateTime &import_time) {
    m_import_time = import_time;
    m_import_time_isSet = true;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::is_import_time_Set() const{
    return m_import_time_isSet;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::is_import_time_Valid() const{
    return m_import_time_isValid;
}

QString OAIGetCatalogImportStatusResponse_ImportStatus::getImportedBy() const {
    return m_imported_by;
}
void OAIGetCatalogImportStatusResponse_ImportStatus::setImportedBy(const QString &imported_by) {
    m_imported_by = imported_by;
    m_imported_by_isSet = true;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::is_imported_by_Set() const{
    return m_imported_by_isSet;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::is_imported_by_Valid() const{
    return m_imported_by_isValid;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCatalogImportStatusResponse_ImportStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
