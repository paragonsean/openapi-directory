/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMLTransformRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMLTransformRequest::OAIUpdateMLTransformRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMLTransformRequest::OAIUpdateMLTransformRequest() {
    this->initializeModel();
}

OAIUpdateMLTransformRequest::~OAIUpdateMLTransformRequest() {}

void OAIUpdateMLTransformRequest::initializeModel() {

    m_transform_id_isSet = false;
    m_transform_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_max_retries_isSet = false;
    m_max_retries_isValid = false;
}

void OAIUpdateMLTransformRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMLTransformRequest::fromJsonObject(QJsonObject json) {

    m_transform_id_isValid = ::OpenAPI::fromJsonValue(m_transform_id, json[QString("TransformId")]);
    m_transform_id_isSet = !json[QString("TransformId")].isNull() && m_transform_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_max_retries_isValid = ::OpenAPI::fromJsonValue(m_max_retries, json[QString("MaxRetries")]);
    m_max_retries_isSet = !json[QString("MaxRetries")].isNull() && m_max_retries_isValid;
}

QString OAIUpdateMLTransformRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMLTransformRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_transform_id_isSet) {
        obj.insert(QString("TransformId"), ::OpenAPI::toJsonValue(m_transform_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_max_retries_isSet) {
        obj.insert(QString("MaxRetries"), ::OpenAPI::toJsonValue(m_max_retries));
    }
    return obj;
}

QString OAIUpdateMLTransformRequest::getTransformId() const {
    return m_transform_id;
}
void OAIUpdateMLTransformRequest::setTransformId(const QString &transform_id) {
    m_transform_id = transform_id;
    m_transform_id_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_transform_id_Set() const{
    return m_transform_id_isSet;
}

bool OAIUpdateMLTransformRequest::is_transform_id_Valid() const{
    return m_transform_id_isValid;
}

QString OAIUpdateMLTransformRequest::getName() const {
    return m_name;
}
void OAIUpdateMLTransformRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateMLTransformRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateMLTransformRequest::getDescription() const {
    return m_description;
}
void OAIUpdateMLTransformRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateMLTransformRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateMLTransformRequest_Parameters OAIUpdateMLTransformRequest::getParameters() const {
    return m_parameters;
}
void OAIUpdateMLTransformRequest::setParameters(const OAIUpdateMLTransformRequest_Parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIUpdateMLTransformRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIUpdateMLTransformRequest::getRole() const {
    return m_role;
}
void OAIUpdateMLTransformRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUpdateMLTransformRequest::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIUpdateMLTransformRequest::getGlueVersion() const {
    return m_glue_version;
}
void OAIUpdateMLTransformRequest::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAIUpdateMLTransformRequest::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

double OAIUpdateMLTransformRequest::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIUpdateMLTransformRequest::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIUpdateMLTransformRequest::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

OAIWorkerType OAIUpdateMLTransformRequest::getWorkerType() const {
    return m_worker_type;
}
void OAIUpdateMLTransformRequest::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIUpdateMLTransformRequest::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

qint32 OAIUpdateMLTransformRequest::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIUpdateMLTransformRequest::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIUpdateMLTransformRequest::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

qint32 OAIUpdateMLTransformRequest::getTimeout() const {
    return m_timeout;
}
void OAIUpdateMLTransformRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIUpdateMLTransformRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIUpdateMLTransformRequest::getMaxRetries() const {
    return m_max_retries;
}
void OAIUpdateMLTransformRequest::setMaxRetries(const qint32 &max_retries) {
    m_max_retries = max_retries;
    m_max_retries_isSet = true;
}

bool OAIUpdateMLTransformRequest::is_max_retries_Set() const{
    return m_max_retries_isSet;
}

bool OAIUpdateMLTransformRequest::is_max_retries_Valid() const{
    return m_max_retries_isValid;
}

bool OAIUpdateMLTransformRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transform_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMLTransformRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transform_id_isValid && true;
}

} // namespace OpenAPI
