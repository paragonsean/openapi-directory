/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckSchemaVersionValidityInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckSchemaVersionValidityInput::OAICheckSchemaVersionValidityInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckSchemaVersionValidityInput::OAICheckSchemaVersionValidityInput() {
    this->initializeModel();
}

OAICheckSchemaVersionValidityInput::~OAICheckSchemaVersionValidityInput() {}

void OAICheckSchemaVersionValidityInput::initializeModel() {

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_schema_definition_isSet = false;
    m_schema_definition_isValid = false;
}

void OAICheckSchemaVersionValidityInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckSchemaVersionValidityInput::fromJsonObject(QJsonObject json) {

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("DataFormat")]);
    m_data_format_isSet = !json[QString("DataFormat")].isNull() && m_data_format_isValid;

    m_schema_definition_isValid = ::OpenAPI::fromJsonValue(m_schema_definition, json[QString("SchemaDefinition")]);
    m_schema_definition_isSet = !json[QString("SchemaDefinition")].isNull() && m_schema_definition_isValid;
}

QString OAICheckSchemaVersionValidityInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckSchemaVersionValidityInput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_format.isSet()) {
        obj.insert(QString("DataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_schema_definition_isSet) {
        obj.insert(QString("SchemaDefinition"), ::OpenAPI::toJsonValue(m_schema_definition));
    }
    return obj;
}

OAIDataFormat OAICheckSchemaVersionValidityInput::getDataFormat() const {
    return m_data_format;
}
void OAICheckSchemaVersionValidityInput::setDataFormat(const OAIDataFormat &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAICheckSchemaVersionValidityInput::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAICheckSchemaVersionValidityInput::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAICheckSchemaVersionValidityInput::getSchemaDefinition() const {
    return m_schema_definition;
}
void OAICheckSchemaVersionValidityInput::setSchemaDefinition(const QString &schema_definition) {
    m_schema_definition = schema_definition;
    m_schema_definition_isSet = true;
}

bool OAICheckSchemaVersionValidityInput::is_schema_definition_Set() const{
    return m_schema_definition_isSet;
}

bool OAICheckSchemaVersionValidityInput::is_schema_definition_Valid() const{
    return m_schema_definition_isValid;
}

bool OAICheckSchemaVersionValidityInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_definition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckSchemaVersionValidityInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_format_isValid && m_schema_definition_isValid && true;
}

} // namespace OpenAPI
