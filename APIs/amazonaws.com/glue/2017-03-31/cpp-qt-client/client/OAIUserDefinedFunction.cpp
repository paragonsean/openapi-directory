/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDefinedFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDefinedFunction::OAIUserDefinedFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDefinedFunction::OAIUserDefinedFunction() {
    this->initializeModel();
}

OAIUserDefinedFunction::~OAIUserDefinedFunction() {}

void OAIUserDefinedFunction::initializeModel() {

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_class_name_isSet = false;
    m_class_name_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_resource_uris_isSet = false;
    m_resource_uris_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;
}

void OAIUserDefinedFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDefinedFunction::fromJsonObject(QJsonObject json) {

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("FunctionName")]);
    m_function_name_isSet = !json[QString("FunctionName")].isNull() && m_function_name_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_class_name_isValid = ::OpenAPI::fromJsonValue(m_class_name, json[QString("ClassName")]);
    m_class_name_isSet = !json[QString("ClassName")].isNull() && m_class_name_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("OwnerName")]);
    m_owner_name_isSet = !json[QString("OwnerName")].isNull() && m_owner_name_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(m_owner_type, json[QString("OwnerType")]);
    m_owner_type_isSet = !json[QString("OwnerType")].isNull() && m_owner_type_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_resource_uris_isValid = ::OpenAPI::fromJsonValue(m_resource_uris, json[QString("ResourceUris")]);
    m_resource_uris_isSet = !json[QString("ResourceUris")].isNull() && m_resource_uris_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;
}

QString OAIUserDefinedFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDefinedFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_function_name_isSet) {
        obj.insert(QString("FunctionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_class_name_isSet) {
        obj.insert(QString("ClassName"), ::OpenAPI::toJsonValue(m_class_name));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("OwnerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_owner_type.isSet()) {
        obj.insert(QString("OwnerType"), ::OpenAPI::toJsonValue(m_owner_type));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_resource_uris.isSet()) {
        obj.insert(QString("ResourceUris"), ::OpenAPI::toJsonValue(m_resource_uris));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    return obj;
}

QString OAIUserDefinedFunction::getFunctionName() const {
    return m_function_name;
}
void OAIUserDefinedFunction::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIUserDefinedFunction::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIUserDefinedFunction::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIUserDefinedFunction::getDatabaseName() const {
    return m_database_name;
}
void OAIUserDefinedFunction::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUserDefinedFunction::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUserDefinedFunction::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIUserDefinedFunction::getClassName() const {
    return m_class_name;
}
void OAIUserDefinedFunction::setClassName(const QString &class_name) {
    m_class_name = class_name;
    m_class_name_isSet = true;
}

bool OAIUserDefinedFunction::is_class_name_Set() const{
    return m_class_name_isSet;
}

bool OAIUserDefinedFunction::is_class_name_Valid() const{
    return m_class_name_isValid;
}

QString OAIUserDefinedFunction::getOwnerName() const {
    return m_owner_name;
}
void OAIUserDefinedFunction::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIUserDefinedFunction::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIUserDefinedFunction::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

OAIPrincipalType OAIUserDefinedFunction::getOwnerType() const {
    return m_owner_type;
}
void OAIUserDefinedFunction::setOwnerType(const OAIPrincipalType &owner_type) {
    m_owner_type = owner_type;
    m_owner_type_isSet = true;
}

bool OAIUserDefinedFunction::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIUserDefinedFunction::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

QDateTime OAIUserDefinedFunction::getCreateTime() const {
    return m_create_time;
}
void OAIUserDefinedFunction::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIUserDefinedFunction::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIUserDefinedFunction::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList OAIUserDefinedFunction::getResourceUris() const {
    return m_resource_uris;
}
void OAIUserDefinedFunction::setResourceUris(const QList &resource_uris) {
    m_resource_uris = resource_uris;
    m_resource_uris_isSet = true;
}

bool OAIUserDefinedFunction::is_resource_uris_Set() const{
    return m_resource_uris_isSet;
}

bool OAIUserDefinedFunction::is_resource_uris_Valid() const{
    return m_resource_uris_isValid;
}

QString OAIUserDefinedFunction::getCatalogId() const {
    return m_catalog_id;
}
void OAIUserDefinedFunction::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIUserDefinedFunction::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIUserDefinedFunction::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

bool OAIUserDefinedFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDefinedFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
