/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionInput_PhysicalConnectionRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionInput_PhysicalConnectionRequirements::OAIConnectionInput_PhysicalConnectionRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionInput_PhysicalConnectionRequirements::OAIConnectionInput_PhysicalConnectionRequirements() {
    this->initializeModel();
}

OAIConnectionInput_PhysicalConnectionRequirements::~OAIConnectionInput_PhysicalConnectionRequirements() {}

void OAIConnectionInput_PhysicalConnectionRequirements::initializeModel() {

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_security_group_id_list_isSet = false;
    m_security_group_id_list_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;
}

void OAIConnectionInput_PhysicalConnectionRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionInput_PhysicalConnectionRequirements::fromJsonObject(QJsonObject json) {

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_security_group_id_list_isValid = ::OpenAPI::fromJsonValue(m_security_group_id_list, json[QString("SecurityGroupIdList")]);
    m_security_group_id_list_isSet = !json[QString("SecurityGroupIdList")].isNull() && m_security_group_id_list_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;
}

QString OAIConnectionInput_PhysicalConnectionRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionInput_PhysicalConnectionRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_security_group_id_list.isSet()) {
        obj.insert(QString("SecurityGroupIdList"), ::OpenAPI::toJsonValue(m_security_group_id_list));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    return obj;
}

QString OAIConnectionInput_PhysicalConnectionRequirements::getSubnetId() const {
    return m_subnet_id;
}
void OAIConnectionInput_PhysicalConnectionRequirements::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QList OAIConnectionInput_PhysicalConnectionRequirements::getSecurityGroupIdList() const {
    return m_security_group_id_list;
}
void OAIConnectionInput_PhysicalConnectionRequirements::setSecurityGroupIdList(const QList &security_group_id_list) {
    m_security_group_id_list = security_group_id_list;
    m_security_group_id_list_isSet = true;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::is_security_group_id_list_Set() const{
    return m_security_group_id_list_isSet;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::is_security_group_id_list_Valid() const{
    return m_security_group_id_list_isValid;
}

QString OAIConnectionInput_PhysicalConnectionRequirements::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIConnectionInput_PhysicalConnectionRequirements::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_id_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionInput_PhysicalConnectionRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
