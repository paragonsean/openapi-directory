/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPIIDetection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPIIDetection::OAIPIIDetection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPIIDetection::OAIPIIDetection() {
    this->initializeModel();
}

OAIPIIDetection::~OAIPIIDetection() {}

void OAIPIIDetection::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_pii_type_isSet = false;
    m_pii_type_isValid = false;

    m_entity_types_to_detect_isSet = false;
    m_entity_types_to_detect_isValid = false;

    m_output_column_name_isSet = false;
    m_output_column_name_isValid = false;

    m_sample_fraction_isSet = false;
    m_sample_fraction_isValid = false;

    m_threshold_fraction_isSet = false;
    m_threshold_fraction_isValid = false;

    m_mask_value_isSet = false;
    m_mask_value_isValid = false;
}

void OAIPIIDetection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPIIDetection::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_pii_type_isValid = ::OpenAPI::fromJsonValue(m_pii_type, json[QString("PiiType")]);
    m_pii_type_isSet = !json[QString("PiiType")].isNull() && m_pii_type_isValid;

    m_entity_types_to_detect_isValid = ::OpenAPI::fromJsonValue(m_entity_types_to_detect, json[QString("EntityTypesToDetect")]);
    m_entity_types_to_detect_isSet = !json[QString("EntityTypesToDetect")].isNull() && m_entity_types_to_detect_isValid;

    m_output_column_name_isValid = ::OpenAPI::fromJsonValue(m_output_column_name, json[QString("OutputColumnName")]);
    m_output_column_name_isSet = !json[QString("OutputColumnName")].isNull() && m_output_column_name_isValid;

    m_sample_fraction_isValid = ::OpenAPI::fromJsonValue(m_sample_fraction, json[QString("SampleFraction")]);
    m_sample_fraction_isSet = !json[QString("SampleFraction")].isNull() && m_sample_fraction_isValid;

    m_threshold_fraction_isValid = ::OpenAPI::fromJsonValue(m_threshold_fraction, json[QString("ThresholdFraction")]);
    m_threshold_fraction_isSet = !json[QString("ThresholdFraction")].isNull() && m_threshold_fraction_isValid;

    m_mask_value_isValid = ::OpenAPI::fromJsonValue(m_mask_value, json[QString("MaskValue")]);
    m_mask_value_isSet = !json[QString("MaskValue")].isNull() && m_mask_value_isValid;
}

QString OAIPIIDetection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPIIDetection::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_pii_type.isSet()) {
        obj.insert(QString("PiiType"), ::OpenAPI::toJsonValue(m_pii_type));
    }
    if (m_entity_types_to_detect.isSet()) {
        obj.insert(QString("EntityTypesToDetect"), ::OpenAPI::toJsonValue(m_entity_types_to_detect));
    }
    if (m_output_column_name_isSet) {
        obj.insert(QString("OutputColumnName"), ::OpenAPI::toJsonValue(m_output_column_name));
    }
    if (m_sample_fraction_isSet) {
        obj.insert(QString("SampleFraction"), ::OpenAPI::toJsonValue(m_sample_fraction));
    }
    if (m_threshold_fraction_isSet) {
        obj.insert(QString("ThresholdFraction"), ::OpenAPI::toJsonValue(m_threshold_fraction));
    }
    if (m_mask_value_isSet) {
        obj.insert(QString("MaskValue"), ::OpenAPI::toJsonValue(m_mask_value));
    }
    return obj;
}

QString OAIPIIDetection::getName() const {
    return m_name;
}
void OAIPIIDetection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPIIDetection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPIIDetection::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIPIIDetection::getInputs() const {
    return m_inputs;
}
void OAIPIIDetection::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIPIIDetection::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIPIIDetection::is_inputs_Valid() const{
    return m_inputs_isValid;
}

OAIPiiType OAIPIIDetection::getPiiType() const {
    return m_pii_type;
}
void OAIPIIDetection::setPiiType(const OAIPiiType &pii_type) {
    m_pii_type = pii_type;
    m_pii_type_isSet = true;
}

bool OAIPIIDetection::is_pii_type_Set() const{
    return m_pii_type_isSet;
}

bool OAIPIIDetection::is_pii_type_Valid() const{
    return m_pii_type_isValid;
}

QList OAIPIIDetection::getEntityTypesToDetect() const {
    return m_entity_types_to_detect;
}
void OAIPIIDetection::setEntityTypesToDetect(const QList &entity_types_to_detect) {
    m_entity_types_to_detect = entity_types_to_detect;
    m_entity_types_to_detect_isSet = true;
}

bool OAIPIIDetection::is_entity_types_to_detect_Set() const{
    return m_entity_types_to_detect_isSet;
}

bool OAIPIIDetection::is_entity_types_to_detect_Valid() const{
    return m_entity_types_to_detect_isValid;
}

QString OAIPIIDetection::getOutputColumnName() const {
    return m_output_column_name;
}
void OAIPIIDetection::setOutputColumnName(const QString &output_column_name) {
    m_output_column_name = output_column_name;
    m_output_column_name_isSet = true;
}

bool OAIPIIDetection::is_output_column_name_Set() const{
    return m_output_column_name_isSet;
}

bool OAIPIIDetection::is_output_column_name_Valid() const{
    return m_output_column_name_isValid;
}

double OAIPIIDetection::getSampleFraction() const {
    return m_sample_fraction;
}
void OAIPIIDetection::setSampleFraction(const double &sample_fraction) {
    m_sample_fraction = sample_fraction;
    m_sample_fraction_isSet = true;
}

bool OAIPIIDetection::is_sample_fraction_Set() const{
    return m_sample_fraction_isSet;
}

bool OAIPIIDetection::is_sample_fraction_Valid() const{
    return m_sample_fraction_isValid;
}

double OAIPIIDetection::getThresholdFraction() const {
    return m_threshold_fraction;
}
void OAIPIIDetection::setThresholdFraction(const double &threshold_fraction) {
    m_threshold_fraction = threshold_fraction;
    m_threshold_fraction_isSet = true;
}

bool OAIPIIDetection::is_threshold_fraction_Set() const{
    return m_threshold_fraction_isSet;
}

bool OAIPIIDetection::is_threshold_fraction_Valid() const{
    return m_threshold_fraction_isValid;
}

QString OAIPIIDetection::getMaskValue() const {
    return m_mask_value;
}
void OAIPIIDetection::setMaskValue(const QString &mask_value) {
    m_mask_value = mask_value;
    m_mask_value_isSet = true;
}

bool OAIPIIDetection::is_mask_value_Set() const{
    return m_mask_value_isSet;
}

bool OAIPIIDetection::is_mask_value_Valid() const{
    return m_mask_value_isValid;
}

bool OAIPIIDetection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pii_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_types_to_detect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPIIDetection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_inputs_isValid && m_pii_type_isValid && m_entity_types_to_detect_isValid && true;
}

} // namespace OpenAPI
