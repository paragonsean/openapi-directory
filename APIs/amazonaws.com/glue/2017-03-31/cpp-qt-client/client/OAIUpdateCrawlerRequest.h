/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateCrawlerRequest.h
 *
 * 
 */

#ifndef OAIUpdateCrawlerRequest_H
#define OAIUpdateCrawlerRequest_H

#include <QJsonObject>

#include "OAICreateCrawlerRequest_LakeFormationConfiguration.h"
#include "OAICreateCrawlerRequest_LineageConfiguration.h"
#include "OAICreateCrawlerRequest_RecrawlPolicy.h"
#include "OAICreateCrawlerRequest_SchemaChangePolicy.h"
#include "OAIUpdateCrawlerRequest_Targets.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateCrawlerRequest_Targets;
class OAICreateCrawlerRequest_SchemaChangePolicy;
class OAICreateCrawlerRequest_RecrawlPolicy;
class OAICreateCrawlerRequest_LineageConfiguration;
class OAICreateCrawlerRequest_LakeFormationConfiguration;

class OAIUpdateCrawlerRequest : public OAIObject {
public:
    OAIUpdateCrawlerRequest();
    OAIUpdateCrawlerRequest(QString json);
    ~OAIUpdateCrawlerRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIUpdateCrawlerRequest_Targets getTargets() const;
    void setTargets(const OAIUpdateCrawlerRequest_Targets &targets);
    bool is_targets_Set() const;
    bool is_targets_Valid() const;

    QString getSchedule() const;
    void setSchedule(const QString &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QList getClassifiers() const;
    void setClassifiers(const QList &classifiers);
    bool is_classifiers_Set() const;
    bool is_classifiers_Valid() const;

    QString getTablePrefix() const;
    void setTablePrefix(const QString &table_prefix);
    bool is_table_prefix_Set() const;
    bool is_table_prefix_Valid() const;

    OAICreateCrawlerRequest_SchemaChangePolicy getSchemaChangePolicy() const;
    void setSchemaChangePolicy(const OAICreateCrawlerRequest_SchemaChangePolicy &schema_change_policy);
    bool is_schema_change_policy_Set() const;
    bool is_schema_change_policy_Valid() const;

    OAICreateCrawlerRequest_RecrawlPolicy getRecrawlPolicy() const;
    void setRecrawlPolicy(const OAICreateCrawlerRequest_RecrawlPolicy &recrawl_policy);
    bool is_recrawl_policy_Set() const;
    bool is_recrawl_policy_Valid() const;

    OAICreateCrawlerRequest_LineageConfiguration getLineageConfiguration() const;
    void setLineageConfiguration(const OAICreateCrawlerRequest_LineageConfiguration &lineage_configuration);
    bool is_lineage_configuration_Set() const;
    bool is_lineage_configuration_Valid() const;

    OAICreateCrawlerRequest_LakeFormationConfiguration getLakeFormationConfiguration() const;
    void setLakeFormationConfiguration(const OAICreateCrawlerRequest_LakeFormationConfiguration &lake_formation_configuration);
    bool is_lake_formation_configuration_Set() const;
    bool is_lake_formation_configuration_Valid() const;

    QString getConfiguration() const;
    void setConfiguration(const QString &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    QString getCrawlerSecurityConfiguration() const;
    void setCrawlerSecurityConfiguration(const QString &crawler_security_configuration);
    bool is_crawler_security_configuration_Set() const;
    bool is_crawler_security_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIUpdateCrawlerRequest_Targets m_targets;
    bool m_targets_isSet;
    bool m_targets_isValid;

    QString m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QList m_classifiers;
    bool m_classifiers_isSet;
    bool m_classifiers_isValid;

    QString m_table_prefix;
    bool m_table_prefix_isSet;
    bool m_table_prefix_isValid;

    OAICreateCrawlerRequest_SchemaChangePolicy m_schema_change_policy;
    bool m_schema_change_policy_isSet;
    bool m_schema_change_policy_isValid;

    OAICreateCrawlerRequest_RecrawlPolicy m_recrawl_policy;
    bool m_recrawl_policy_isSet;
    bool m_recrawl_policy_isValid;

    OAICreateCrawlerRequest_LineageConfiguration m_lineage_configuration;
    bool m_lineage_configuration_isSet;
    bool m_lineage_configuration_isValid;

    OAICreateCrawlerRequest_LakeFormationConfiguration m_lake_formation_configuration;
    bool m_lake_formation_configuration_isSet;
    bool m_lake_formation_configuration_isValid;

    QString m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    QString m_crawler_security_configuration;
    bool m_crawler_security_configuration_isSet;
    bool m_crawler_security_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateCrawlerRequest)

#endif // OAIUpdateCrawlerRequest_H
