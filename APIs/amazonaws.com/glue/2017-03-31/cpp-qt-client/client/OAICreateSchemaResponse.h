/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateSchemaResponse.h
 *
 * 
 */

#ifndef OAICreateSchemaResponse_H
#define OAICreateSchemaResponse_H

#include <QJsonObject>

#include "OAICompatibility.h"
#include "OAIDataFormat.h"
#include "OAISchemaStatus.h"
#include "OAISchemaVersionStatus.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateSchemaResponse : public OAIObject {
public:
    OAICreateSchemaResponse();
    OAICreateSchemaResponse(QString json);
    ~OAICreateSchemaResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryName() const;
    void setRegistryName(const QString &registry_name);
    bool is_registry_name_Set() const;
    bool is_registry_name_Valid() const;

    QString getRegistryArn() const;
    void setRegistryArn(const QString &registry_arn);
    bool is_registry_arn_Set() const;
    bool is_registry_arn_Valid() const;

    QString getSchemaName() const;
    void setSchemaName(const QString &schema_name);
    bool is_schema_name_Set() const;
    bool is_schema_name_Valid() const;

    QString getSchemaArn() const;
    void setSchemaArn(const QString &schema_arn);
    bool is_schema_arn_Set() const;
    bool is_schema_arn_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIDataFormat getDataFormat() const;
    void setDataFormat(const OAIDataFormat &data_format);
    bool is_data_format_Set() const;
    bool is_data_format_Valid() const;

    OAICompatibility getCompatibility() const;
    void setCompatibility(const OAICompatibility &compatibility);
    bool is_compatibility_Set() const;
    bool is_compatibility_Valid() const;

    qint32 getSchemaCheckpoint() const;
    void setSchemaCheckpoint(const qint32 &schema_checkpoint);
    bool is_schema_checkpoint_Set() const;
    bool is_schema_checkpoint_Valid() const;

    qint32 getLatestSchemaVersion() const;
    void setLatestSchemaVersion(const qint32 &latest_schema_version);
    bool is_latest_schema_version_Set() const;
    bool is_latest_schema_version_Valid() const;

    qint32 getNextSchemaVersion() const;
    void setNextSchemaVersion(const qint32 &next_schema_version);
    bool is_next_schema_version_Set() const;
    bool is_next_schema_version_Valid() const;

    OAISchemaStatus getSchemaStatus() const;
    void setSchemaStatus(const OAISchemaStatus &schema_status);
    bool is_schema_status_Set() const;
    bool is_schema_status_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getSchemaVersionId() const;
    void setSchemaVersionId(const QString &schema_version_id);
    bool is_schema_version_id_Set() const;
    bool is_schema_version_id_Valid() const;

    OAISchemaVersionStatus getSchemaVersionStatus() const;
    void setSchemaVersionStatus(const OAISchemaVersionStatus &schema_version_status);
    bool is_schema_version_status_Set() const;
    bool is_schema_version_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_name;
    bool m_registry_name_isSet;
    bool m_registry_name_isValid;

    QString m_registry_arn;
    bool m_registry_arn_isSet;
    bool m_registry_arn_isValid;

    QString m_schema_name;
    bool m_schema_name_isSet;
    bool m_schema_name_isValid;

    QString m_schema_arn;
    bool m_schema_arn_isSet;
    bool m_schema_arn_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIDataFormat m_data_format;
    bool m_data_format_isSet;
    bool m_data_format_isValid;

    OAICompatibility m_compatibility;
    bool m_compatibility_isSet;
    bool m_compatibility_isValid;

    qint32 m_schema_checkpoint;
    bool m_schema_checkpoint_isSet;
    bool m_schema_checkpoint_isValid;

    qint32 m_latest_schema_version;
    bool m_latest_schema_version_isSet;
    bool m_latest_schema_version_isValid;

    qint32 m_next_schema_version;
    bool m_next_schema_version_isSet;
    bool m_next_schema_version_isValid;

    OAISchemaStatus m_schema_status;
    bool m_schema_status_isSet;
    bool m_schema_status_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_schema_version_id;
    bool m_schema_version_id_isSet;
    bool m_schema_version_id_isValid;

    OAISchemaVersionStatus m_schema_version_status;
    bool m_schema_version_status_isSet;
    bool m_schema_version_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateSchemaResponse)

#endif // OAICreateSchemaResponse_H
