/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeGenConfigurationNode_DirectKinesisSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeGenConfigurationNode_DirectKinesisSource::OAICodeGenConfigurationNode_DirectKinesisSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeGenConfigurationNode_DirectKinesisSource::OAICodeGenConfigurationNode_DirectKinesisSource() {
    this->initializeModel();
}

OAICodeGenConfigurationNode_DirectKinesisSource::~OAICodeGenConfigurationNode_DirectKinesisSource() {}

void OAICodeGenConfigurationNode_DirectKinesisSource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_window_size_isSet = false;
    m_window_size_isValid = false;

    m_detect_schema_isSet = false;
    m_detect_schema_isValid = false;

    m_streaming_options_isSet = false;
    m_streaming_options_isValid = false;

    m_data_preview_options_isSet = false;
    m_data_preview_options_isValid = false;
}

void OAICodeGenConfigurationNode_DirectKinesisSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeGenConfigurationNode_DirectKinesisSource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_window_size_isValid = ::OpenAPI::fromJsonValue(m_window_size, json[QString("WindowSize")]);
    m_window_size_isSet = !json[QString("WindowSize")].isNull() && m_window_size_isValid;

    m_detect_schema_isValid = ::OpenAPI::fromJsonValue(m_detect_schema, json[QString("DetectSchema")]);
    m_detect_schema_isSet = !json[QString("DetectSchema")].isNull() && m_detect_schema_isValid;

    m_streaming_options_isValid = ::OpenAPI::fromJsonValue(m_streaming_options, json[QString("StreamingOptions")]);
    m_streaming_options_isSet = !json[QString("StreamingOptions")].isNull() && m_streaming_options_isValid;

    m_data_preview_options_isValid = ::OpenAPI::fromJsonValue(m_data_preview_options, json[QString("DataPreviewOptions")]);
    m_data_preview_options_isSet = !json[QString("DataPreviewOptions")].isNull() && m_data_preview_options_isValid;
}

QString OAICodeGenConfigurationNode_DirectKinesisSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeGenConfigurationNode_DirectKinesisSource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_window_size_isSet) {
        obj.insert(QString("WindowSize"), ::OpenAPI::toJsonValue(m_window_size));
    }
    if (m_detect_schema_isSet) {
        obj.insert(QString("DetectSchema"), ::OpenAPI::toJsonValue(m_detect_schema));
    }
    if (m_streaming_options.isSet()) {
        obj.insert(QString("StreamingOptions"), ::OpenAPI::toJsonValue(m_streaming_options));
    }
    if (m_data_preview_options.isSet()) {
        obj.insert(QString("DataPreviewOptions"), ::OpenAPI::toJsonValue(m_data_preview_options));
    }
    return obj;
}

QString OAICodeGenConfigurationNode_DirectKinesisSource::getName() const {
    return m_name;
}
void OAICodeGenConfigurationNode_DirectKinesisSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICodeGenConfigurationNode_DirectKinesisSource::getWindowSize() const {
    return m_window_size;
}
void OAICodeGenConfigurationNode_DirectKinesisSource::setWindowSize(const qint32 &window_size) {
    m_window_size = window_size;
    m_window_size_isSet = true;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_window_size_Set() const{
    return m_window_size_isSet;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_window_size_Valid() const{
    return m_window_size_isValid;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::getDetectSchema() const {
    return m_detect_schema;
}
void OAICodeGenConfigurationNode_DirectKinesisSource::setDetectSchema(const bool &detect_schema) {
    m_detect_schema = detect_schema;
    m_detect_schema_isSet = true;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_detect_schema_Set() const{
    return m_detect_schema_isSet;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_detect_schema_Valid() const{
    return m_detect_schema_isValid;
}

OAICatalogKinesisSource_StreamingOptions OAICodeGenConfigurationNode_DirectKinesisSource::getStreamingOptions() const {
    return m_streaming_options;
}
void OAICodeGenConfigurationNode_DirectKinesisSource::setStreamingOptions(const OAICatalogKinesisSource_StreamingOptions &streaming_options) {
    m_streaming_options = streaming_options;
    m_streaming_options_isSet = true;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_streaming_options_Set() const{
    return m_streaming_options_isSet;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_streaming_options_Valid() const{
    return m_streaming_options_isValid;
}

OAICatalogKinesisSource_DataPreviewOptions OAICodeGenConfigurationNode_DirectKinesisSource::getDataPreviewOptions() const {
    return m_data_preview_options;
}
void OAICodeGenConfigurationNode_DirectKinesisSource::setDataPreviewOptions(const OAICatalogKinesisSource_DataPreviewOptions &data_preview_options) {
    m_data_preview_options = data_preview_options;
    m_data_preview_options_isSet = true;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_data_preview_options_Set() const{
    return m_data_preview_options_isSet;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::is_data_preview_options_Valid() const{
    return m_data_preview_options_isValid;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_preview_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeGenConfigurationNode_DirectKinesisSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
