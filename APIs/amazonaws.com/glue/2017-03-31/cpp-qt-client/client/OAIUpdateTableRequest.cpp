/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTableRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTableRequest::OAIUpdateTableRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTableRequest::OAIUpdateTableRequest() {
    this->initializeModel();
}

OAIUpdateTableRequest::~OAIUpdateTableRequest() {}

void OAIUpdateTableRequest::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_table_input_isSet = false;
    m_table_input_isValid = false;

    m_skip_archive_isSet = false;
    m_skip_archive_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIUpdateTableRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTableRequest::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_table_input_isValid = ::OpenAPI::fromJsonValue(m_table_input, json[QString("TableInput")]);
    m_table_input_isSet = !json[QString("TableInput")].isNull() && m_table_input_isValid;

    m_skip_archive_isValid = ::OpenAPI::fromJsonValue(m_skip_archive, json[QString("SkipArchive")]);
    m_skip_archive_isSet = !json[QString("SkipArchive")].isNull() && m_skip_archive_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("TransactionId")]);
    m_transaction_id_isSet = !json[QString("TransactionId")].isNull() && m_transaction_id_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;
}

QString OAIUpdateTableRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTableRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_table_input.isSet()) {
        obj.insert(QString("TableInput"), ::OpenAPI::toJsonValue(m_table_input));
    }
    if (m_skip_archive_isSet) {
        obj.insert(QString("SkipArchive"), ::OpenAPI::toJsonValue(m_skip_archive));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("TransactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIUpdateTableRequest::getCatalogId() const {
    return m_catalog_id;
}
void OAIUpdateTableRequest::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIUpdateTableRequest::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIUpdateTableRequest::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAIUpdateTableRequest::getDatabaseName() const {
    return m_database_name;
}
void OAIUpdateTableRequest::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUpdateTableRequest::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUpdateTableRequest::is_database_name_Valid() const{
    return m_database_name_isValid;
}

OAIUpdateTableRequest_TableInput OAIUpdateTableRequest::getTableInput() const {
    return m_table_input;
}
void OAIUpdateTableRequest::setTableInput(const OAIUpdateTableRequest_TableInput &table_input) {
    m_table_input = table_input;
    m_table_input_isSet = true;
}

bool OAIUpdateTableRequest::is_table_input_Set() const{
    return m_table_input_isSet;
}

bool OAIUpdateTableRequest::is_table_input_Valid() const{
    return m_table_input_isValid;
}

bool OAIUpdateTableRequest::getSkipArchive() const {
    return m_skip_archive;
}
void OAIUpdateTableRequest::setSkipArchive(const bool &skip_archive) {
    m_skip_archive = skip_archive;
    m_skip_archive_isSet = true;
}

bool OAIUpdateTableRequest::is_skip_archive_Set() const{
    return m_skip_archive_isSet;
}

bool OAIUpdateTableRequest::is_skip_archive_Valid() const{
    return m_skip_archive_isValid;
}

QString OAIUpdateTableRequest::getTransactionId() const {
    return m_transaction_id;
}
void OAIUpdateTableRequest::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIUpdateTableRequest::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIUpdateTableRequest::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIUpdateTableRequest::getVersionId() const {
    return m_version_id;
}
void OAIUpdateTableRequest::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIUpdateTableRequest::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIUpdateTableRequest::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIUpdateTableRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_archive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTableRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_name_isValid && m_table_input_isValid && true;
}

} // namespace OpenAPI
