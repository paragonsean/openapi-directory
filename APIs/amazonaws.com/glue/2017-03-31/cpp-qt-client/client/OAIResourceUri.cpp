/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceUri.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceUri::OAIResourceUri(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceUri::OAIResourceUri() {
    this->initializeModel();
}

OAIResourceUri::~OAIResourceUri() {}

void OAIResourceUri::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIResourceUri::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceUri::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;
}

QString OAIResourceUri::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceUri::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIResourceType OAIResourceUri::getResourceType() const {
    return m_resource_type;
}
void OAIResourceUri::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceUri::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceUri::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIResourceUri::getUri() const {
    return m_uri;
}
void OAIResourceUri::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIResourceUri::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIResourceUri::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIResourceUri::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceUri::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
