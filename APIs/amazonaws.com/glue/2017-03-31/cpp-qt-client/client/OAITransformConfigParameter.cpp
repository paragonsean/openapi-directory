/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformConfigParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformConfigParameter::OAITransformConfigParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformConfigParameter::OAITransformConfigParameter() {
    this->initializeModel();
}

OAITransformConfigParameter::~OAITransformConfigParameter() {}

void OAITransformConfigParameter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validation_rule_isSet = false;
    m_validation_rule_isValid = false;

    m_validation_message_isSet = false;
    m_validation_message_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_list_type_isSet = false;
    m_list_type_isValid = false;

    m_is_optional_isSet = false;
    m_is_optional_isValid = false;
}

void OAITransformConfigParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformConfigParameter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_validation_rule_isValid = ::OpenAPI::fromJsonValue(m_validation_rule, json[QString("ValidationRule")]);
    m_validation_rule_isSet = !json[QString("ValidationRule")].isNull() && m_validation_rule_isValid;

    m_validation_message_isValid = ::OpenAPI::fromJsonValue(m_validation_message, json[QString("ValidationMessage")]);
    m_validation_message_isSet = !json[QString("ValidationMessage")].isNull() && m_validation_message_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_list_type_isValid = ::OpenAPI::fromJsonValue(m_list_type, json[QString("ListType")]);
    m_list_type_isSet = !json[QString("ListType")].isNull() && m_list_type_isValid;

    m_is_optional_isValid = ::OpenAPI::fromJsonValue(m_is_optional, json[QString("IsOptional")]);
    m_is_optional_isSet = !json[QString("IsOptional")].isNull() && m_is_optional_isValid;
}

QString OAITransformConfigParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformConfigParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validation_rule_isSet) {
        obj.insert(QString("ValidationRule"), ::OpenAPI::toJsonValue(m_validation_rule));
    }
    if (m_validation_message_isSet) {
        obj.insert(QString("ValidationMessage"), ::OpenAPI::toJsonValue(m_validation_message));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_list_type.isSet()) {
        obj.insert(QString("ListType"), ::OpenAPI::toJsonValue(m_list_type));
    }
    if (m_is_optional_isSet) {
        obj.insert(QString("IsOptional"), ::OpenAPI::toJsonValue(m_is_optional));
    }
    return obj;
}

QString OAITransformConfigParameter::getName() const {
    return m_name;
}
void OAITransformConfigParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransformConfigParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransformConfigParameter::is_name_Valid() const{
    return m_name_isValid;
}

OAIParamType OAITransformConfigParameter::getType() const {
    return m_type;
}
void OAITransformConfigParameter::setType(const OAIParamType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransformConfigParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransformConfigParameter::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransformConfigParameter::getValidationRule() const {
    return m_validation_rule;
}
void OAITransformConfigParameter::setValidationRule(const QString &validation_rule) {
    m_validation_rule = validation_rule;
    m_validation_rule_isSet = true;
}

bool OAITransformConfigParameter::is_validation_rule_Set() const{
    return m_validation_rule_isSet;
}

bool OAITransformConfigParameter::is_validation_rule_Valid() const{
    return m_validation_rule_isValid;
}

QString OAITransformConfigParameter::getValidationMessage() const {
    return m_validation_message;
}
void OAITransformConfigParameter::setValidationMessage(const QString &validation_message) {
    m_validation_message = validation_message;
    m_validation_message_isSet = true;
}

bool OAITransformConfigParameter::is_validation_message_Set() const{
    return m_validation_message_isSet;
}

bool OAITransformConfigParameter::is_validation_message_Valid() const{
    return m_validation_message_isValid;
}

QList OAITransformConfigParameter::getValue() const {
    return m_value;
}
void OAITransformConfigParameter::setValue(const QList &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITransformConfigParameter::is_value_Set() const{
    return m_value_isSet;
}

bool OAITransformConfigParameter::is_value_Valid() const{
    return m_value_isValid;
}

OAIParamType OAITransformConfigParameter::getListType() const {
    return m_list_type;
}
void OAITransformConfigParameter::setListType(const OAIParamType &list_type) {
    m_list_type = list_type;
    m_list_type_isSet = true;
}

bool OAITransformConfigParameter::is_list_type_Set() const{
    return m_list_type_isSet;
}

bool OAITransformConfigParameter::is_list_type_Valid() const{
    return m_list_type_isValid;
}

bool OAITransformConfigParameter::getIsOptional() const {
    return m_is_optional;
}
void OAITransformConfigParameter::setIsOptional(const bool &is_optional) {
    m_is_optional = is_optional;
    m_is_optional_isSet = true;
}

bool OAITransformConfigParameter::is_is_optional_Set() const{
    return m_is_optional_isSet;
}

bool OAITransformConfigParameter::is_is_optional_Valid() const{
    return m_is_optional_isValid;
}

bool OAITransformConfigParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_optional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformConfigParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
