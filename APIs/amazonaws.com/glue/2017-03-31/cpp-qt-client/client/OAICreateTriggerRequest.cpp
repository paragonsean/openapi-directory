/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTriggerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTriggerRequest::OAICreateTriggerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTriggerRequest::OAICreateTriggerRequest() {
    this->initializeModel();
}

OAICreateTriggerRequest::~OAICreateTriggerRequest() {}

void OAICreateTriggerRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_workflow_name_isSet = false;
    m_workflow_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_predicate_isSet = false;
    m_predicate_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_start_on_creation_isSet = false;
    m_start_on_creation_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_event_batching_condition_isSet = false;
    m_event_batching_condition_isValid = false;
}

void OAICreateTriggerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTriggerRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_workflow_name_isValid = ::OpenAPI::fromJsonValue(m_workflow_name, json[QString("WorkflowName")]);
    m_workflow_name_isSet = !json[QString("WorkflowName")].isNull() && m_workflow_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_predicate_isValid = ::OpenAPI::fromJsonValue(m_predicate, json[QString("Predicate")]);
    m_predicate_isSet = !json[QString("Predicate")].isNull() && m_predicate_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_start_on_creation_isValid = ::OpenAPI::fromJsonValue(m_start_on_creation, json[QString("StartOnCreation")]);
    m_start_on_creation_isSet = !json[QString("StartOnCreation")].isNull() && m_start_on_creation_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_event_batching_condition_isValid = ::OpenAPI::fromJsonValue(m_event_batching_condition, json[QString("EventBatchingCondition")]);
    m_event_batching_condition_isSet = !json[QString("EventBatchingCondition")].isNull() && m_event_batching_condition_isValid;
}

QString OAICreateTriggerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTriggerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_workflow_name_isSet) {
        obj.insert(QString("WorkflowName"), ::OpenAPI::toJsonValue(m_workflow_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_predicate.isSet()) {
        obj.insert(QString("Predicate"), ::OpenAPI::toJsonValue(m_predicate));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_start_on_creation_isSet) {
        obj.insert(QString("StartOnCreation"), ::OpenAPI::toJsonValue(m_start_on_creation));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_event_batching_condition.isSet()) {
        obj.insert(QString("EventBatchingCondition"), ::OpenAPI::toJsonValue(m_event_batching_condition));
    }
    return obj;
}

QString OAICreateTriggerRequest::getName() const {
    return m_name;
}
void OAICreateTriggerRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTriggerRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTriggerRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateTriggerRequest::getWorkflowName() const {
    return m_workflow_name;
}
void OAICreateTriggerRequest::setWorkflowName(const QString &workflow_name) {
    m_workflow_name = workflow_name;
    m_workflow_name_isSet = true;
}

bool OAICreateTriggerRequest::is_workflow_name_Set() const{
    return m_workflow_name_isSet;
}

bool OAICreateTriggerRequest::is_workflow_name_Valid() const{
    return m_workflow_name_isValid;
}

OAITriggerType OAICreateTriggerRequest::getType() const {
    return m_type;
}
void OAICreateTriggerRequest::setType(const OAITriggerType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateTriggerRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateTriggerRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateTriggerRequest::getSchedule() const {
    return m_schedule;
}
void OAICreateTriggerRequest::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAICreateTriggerRequest::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAICreateTriggerRequest::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAICreateTriggerRequest_Predicate OAICreateTriggerRequest::getPredicate() const {
    return m_predicate;
}
void OAICreateTriggerRequest::setPredicate(const OAICreateTriggerRequest_Predicate &predicate) {
    m_predicate = predicate;
    m_predicate_isSet = true;
}

bool OAICreateTriggerRequest::is_predicate_Set() const{
    return m_predicate_isSet;
}

bool OAICreateTriggerRequest::is_predicate_Valid() const{
    return m_predicate_isValid;
}

QList OAICreateTriggerRequest::getActions() const {
    return m_actions;
}
void OAICreateTriggerRequest::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICreateTriggerRequest::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICreateTriggerRequest::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAICreateTriggerRequest::getDescription() const {
    return m_description;
}
void OAICreateTriggerRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateTriggerRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateTriggerRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateTriggerRequest::getStartOnCreation() const {
    return m_start_on_creation;
}
void OAICreateTriggerRequest::setStartOnCreation(const bool &start_on_creation) {
    m_start_on_creation = start_on_creation;
    m_start_on_creation_isSet = true;
}

bool OAICreateTriggerRequest::is_start_on_creation_Set() const{
    return m_start_on_creation_isSet;
}

bool OAICreateTriggerRequest::is_start_on_creation_Valid() const{
    return m_start_on_creation_isValid;
}

QMap OAICreateTriggerRequest::getTags() const {
    return m_tags;
}
void OAICreateTriggerRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTriggerRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTriggerRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateTriggerRequest_EventBatchingCondition OAICreateTriggerRequest::getEventBatchingCondition() const {
    return m_event_batching_condition;
}
void OAICreateTriggerRequest::setEventBatchingCondition(const OAICreateTriggerRequest_EventBatchingCondition &event_batching_condition) {
    m_event_batching_condition = event_batching_condition;
    m_event_batching_condition_isSet = true;
}

bool OAICreateTriggerRequest::is_event_batching_condition_Set() const{
    return m_event_batching_condition_isSet;
}

bool OAICreateTriggerRequest::is_event_batching_condition_Valid() const{
    return m_event_batching_condition_isValid;
}

bool OAICreateTriggerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_batching_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTriggerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_actions_isValid && true;
}

} // namespace OpenAPI
