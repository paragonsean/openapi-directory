/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfusionMatrix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfusionMatrix::OAIConfusionMatrix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfusionMatrix::OAIConfusionMatrix() {
    this->initializeModel();
}

OAIConfusionMatrix::~OAIConfusionMatrix() {}

void OAIConfusionMatrix::initializeModel() {

    m_num_true_positives_isSet = false;
    m_num_true_positives_isValid = false;

    m_num_false_positives_isSet = false;
    m_num_false_positives_isValid = false;

    m_num_true_negatives_isSet = false;
    m_num_true_negatives_isValid = false;

    m_num_false_negatives_isSet = false;
    m_num_false_negatives_isValid = false;
}

void OAIConfusionMatrix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfusionMatrix::fromJsonObject(QJsonObject json) {

    m_num_true_positives_isValid = ::OpenAPI::fromJsonValue(m_num_true_positives, json[QString("NumTruePositives")]);
    m_num_true_positives_isSet = !json[QString("NumTruePositives")].isNull() && m_num_true_positives_isValid;

    m_num_false_positives_isValid = ::OpenAPI::fromJsonValue(m_num_false_positives, json[QString("NumFalsePositives")]);
    m_num_false_positives_isSet = !json[QString("NumFalsePositives")].isNull() && m_num_false_positives_isValid;

    m_num_true_negatives_isValid = ::OpenAPI::fromJsonValue(m_num_true_negatives, json[QString("NumTrueNegatives")]);
    m_num_true_negatives_isSet = !json[QString("NumTrueNegatives")].isNull() && m_num_true_negatives_isValid;

    m_num_false_negatives_isValid = ::OpenAPI::fromJsonValue(m_num_false_negatives, json[QString("NumFalseNegatives")]);
    m_num_false_negatives_isSet = !json[QString("NumFalseNegatives")].isNull() && m_num_false_negatives_isValid;
}

QString OAIConfusionMatrix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfusionMatrix::asJsonObject() const {
    QJsonObject obj;
    if (m_num_true_positives_isSet) {
        obj.insert(QString("NumTruePositives"), ::OpenAPI::toJsonValue(m_num_true_positives));
    }
    if (m_num_false_positives_isSet) {
        obj.insert(QString("NumFalsePositives"), ::OpenAPI::toJsonValue(m_num_false_positives));
    }
    if (m_num_true_negatives_isSet) {
        obj.insert(QString("NumTrueNegatives"), ::OpenAPI::toJsonValue(m_num_true_negatives));
    }
    if (m_num_false_negatives_isSet) {
        obj.insert(QString("NumFalseNegatives"), ::OpenAPI::toJsonValue(m_num_false_negatives));
    }
    return obj;
}

qint32 OAIConfusionMatrix::getNumTruePositives() const {
    return m_num_true_positives;
}
void OAIConfusionMatrix::setNumTruePositives(const qint32 &num_true_positives) {
    m_num_true_positives = num_true_positives;
    m_num_true_positives_isSet = true;
}

bool OAIConfusionMatrix::is_num_true_positives_Set() const{
    return m_num_true_positives_isSet;
}

bool OAIConfusionMatrix::is_num_true_positives_Valid() const{
    return m_num_true_positives_isValid;
}

qint32 OAIConfusionMatrix::getNumFalsePositives() const {
    return m_num_false_positives;
}
void OAIConfusionMatrix::setNumFalsePositives(const qint32 &num_false_positives) {
    m_num_false_positives = num_false_positives;
    m_num_false_positives_isSet = true;
}

bool OAIConfusionMatrix::is_num_false_positives_Set() const{
    return m_num_false_positives_isSet;
}

bool OAIConfusionMatrix::is_num_false_positives_Valid() const{
    return m_num_false_positives_isValid;
}

qint32 OAIConfusionMatrix::getNumTrueNegatives() const {
    return m_num_true_negatives;
}
void OAIConfusionMatrix::setNumTrueNegatives(const qint32 &num_true_negatives) {
    m_num_true_negatives = num_true_negatives;
    m_num_true_negatives_isSet = true;
}

bool OAIConfusionMatrix::is_num_true_negatives_Set() const{
    return m_num_true_negatives_isSet;
}

bool OAIConfusionMatrix::is_num_true_negatives_Valid() const{
    return m_num_true_negatives_isValid;
}

qint32 OAIConfusionMatrix::getNumFalseNegatives() const {
    return m_num_false_negatives;
}
void OAIConfusionMatrix::setNumFalseNegatives(const qint32 &num_false_negatives) {
    m_num_false_negatives = num_false_negatives;
    m_num_false_negatives_isSet = true;
}

bool OAIConfusionMatrix::is_num_false_negatives_Set() const{
    return m_num_false_negatives_isSet;
}

bool OAIConfusionMatrix::is_num_false_negatives_Valid() const{
    return m_num_false_negatives_isValid;
}

bool OAIConfusionMatrix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_true_positives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_false_positives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_true_negatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_false_negatives_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfusionMatrix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
