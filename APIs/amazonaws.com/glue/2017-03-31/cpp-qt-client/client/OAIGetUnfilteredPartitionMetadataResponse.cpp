/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUnfilteredPartitionMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUnfilteredPartitionMetadataResponse::OAIGetUnfilteredPartitionMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUnfilteredPartitionMetadataResponse::OAIGetUnfilteredPartitionMetadataResponse() {
    this->initializeModel();
}

OAIGetUnfilteredPartitionMetadataResponse::~OAIGetUnfilteredPartitionMetadataResponse() {}

void OAIGetUnfilteredPartitionMetadataResponse::initializeModel() {

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_authorized_columns_isSet = false;
    m_authorized_columns_isValid = false;

    m_is_registered_with_lake_formation_isSet = false;
    m_is_registered_with_lake_formation_isValid = false;
}

void OAIGetUnfilteredPartitionMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUnfilteredPartitionMetadataResponse::fromJsonObject(QJsonObject json) {

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("Partition")]);
    m_partition_isSet = !json[QString("Partition")].isNull() && m_partition_isValid;

    m_authorized_columns_isValid = ::OpenAPI::fromJsonValue(m_authorized_columns, json[QString("AuthorizedColumns")]);
    m_authorized_columns_isSet = !json[QString("AuthorizedColumns")].isNull() && m_authorized_columns_isValid;

    m_is_registered_with_lake_formation_isValid = ::OpenAPI::fromJsonValue(m_is_registered_with_lake_formation, json[QString("IsRegisteredWithLakeFormation")]);
    m_is_registered_with_lake_formation_isSet = !json[QString("IsRegisteredWithLakeFormation")].isNull() && m_is_registered_with_lake_formation_isValid;
}

QString OAIGetUnfilteredPartitionMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUnfilteredPartitionMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_partition.isSet()) {
        obj.insert(QString("Partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_authorized_columns.isSet()) {
        obj.insert(QString("AuthorizedColumns"), ::OpenAPI::toJsonValue(m_authorized_columns));
    }
    if (m_is_registered_with_lake_formation_isSet) {
        obj.insert(QString("IsRegisteredWithLakeFormation"), ::OpenAPI::toJsonValue(m_is_registered_with_lake_formation));
    }
    return obj;
}

OAIGetUnfilteredPartitionMetadataResponse_Partition OAIGetUnfilteredPartitionMetadataResponse::getPartition() const {
    return m_partition;
}
void OAIGetUnfilteredPartitionMetadataResponse::setPartition(const OAIGetUnfilteredPartitionMetadataResponse_Partition &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIGetUnfilteredPartitionMetadataResponse::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIGetUnfilteredPartitionMetadataResponse::is_partition_Valid() const{
    return m_partition_isValid;
}

QList OAIGetUnfilteredPartitionMetadataResponse::getAuthorizedColumns() const {
    return m_authorized_columns;
}
void OAIGetUnfilteredPartitionMetadataResponse::setAuthorizedColumns(const QList &authorized_columns) {
    m_authorized_columns = authorized_columns;
    m_authorized_columns_isSet = true;
}

bool OAIGetUnfilteredPartitionMetadataResponse::is_authorized_columns_Set() const{
    return m_authorized_columns_isSet;
}

bool OAIGetUnfilteredPartitionMetadataResponse::is_authorized_columns_Valid() const{
    return m_authorized_columns_isValid;
}

bool OAIGetUnfilteredPartitionMetadataResponse::getIsRegisteredWithLakeFormation() const {
    return m_is_registered_with_lake_formation;
}
void OAIGetUnfilteredPartitionMetadataResponse::setIsRegisteredWithLakeFormation(const bool &is_registered_with_lake_formation) {
    m_is_registered_with_lake_formation = is_registered_with_lake_formation;
    m_is_registered_with_lake_formation_isSet = true;
}

bool OAIGetUnfilteredPartitionMetadataResponse::is_is_registered_with_lake_formation_Set() const{
    return m_is_registered_with_lake_formation_isSet;
}

bool OAIGetUnfilteredPartitionMetadataResponse::is_is_registered_with_lake_formation_Valid() const{
    return m_is_registered_with_lake_formation_isValid;
}

bool OAIGetUnfilteredPartitionMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_registered_with_lake_formation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUnfilteredPartitionMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
