/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerType::OAIWorkerType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerType::OAIWorkerType() {
    this->initializeModel();
}

OAIWorkerType::~OAIWorkerType() {}

void OAIWorkerType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIWorkerType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIWorkerType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Standard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("G.1X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::G_1X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("G.2X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::G_2X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("G.025X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::G_025X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("G.4X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::G_4X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("G.8X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::G_8X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Z.2X", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkerType::Z_2X;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIWorkerType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIWorkerType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIWorkerType::STANDARD:
            val = "Standard";
            break;
        case eOAIWorkerType::G_1X:
            val = "G.1X";
            break;
        case eOAIWorkerType::G_2X:
            val = "G.2X";
            break;
        case eOAIWorkerType::G_025X:
            val = "G.025X";
            break;
        case eOAIWorkerType::G_4X:
            val = "G.4X";
            break;
        case eOAIWorkerType::G_8X:
            val = "G.8X";
            break;
        case eOAIWorkerType::Z_2X:
            val = "Z.2X";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIWorkerType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIWorkerType::eOAIWorkerType OAIWorkerType::getValue() const {
    return m_value;
}

void OAIWorkerType::setValue(const OAIWorkerType::eOAIWorkerType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIWorkerType::isSet() const {
    
    return m_value_isSet;
}

bool OAIWorkerType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
