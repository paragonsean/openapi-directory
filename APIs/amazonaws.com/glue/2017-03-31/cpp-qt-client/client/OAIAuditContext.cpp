/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditContext::OAIAuditContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditContext::OAIAuditContext() {
    this->initializeModel();
}

OAIAuditContext::~OAIAuditContext() {}

void OAIAuditContext::initializeModel() {

    m_additional_audit_context_isSet = false;
    m_additional_audit_context_isValid = false;

    m_requested_columns_isSet = false;
    m_requested_columns_isValid = false;

    m_all_columns_requested_isSet = false;
    m_all_columns_requested_isValid = false;
}

void OAIAuditContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditContext::fromJsonObject(QJsonObject json) {

    m_additional_audit_context_isValid = ::OpenAPI::fromJsonValue(m_additional_audit_context, json[QString("AdditionalAuditContext")]);
    m_additional_audit_context_isSet = !json[QString("AdditionalAuditContext")].isNull() && m_additional_audit_context_isValid;

    m_requested_columns_isValid = ::OpenAPI::fromJsonValue(m_requested_columns, json[QString("RequestedColumns")]);
    m_requested_columns_isSet = !json[QString("RequestedColumns")].isNull() && m_requested_columns_isValid;

    m_all_columns_requested_isValid = ::OpenAPI::fromJsonValue(m_all_columns_requested, json[QString("AllColumnsRequested")]);
    m_all_columns_requested_isSet = !json[QString("AllColumnsRequested")].isNull() && m_all_columns_requested_isValid;
}

QString OAIAuditContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditContext::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_audit_context_isSet) {
        obj.insert(QString("AdditionalAuditContext"), ::OpenAPI::toJsonValue(m_additional_audit_context));
    }
    if (m_requested_columns.isSet()) {
        obj.insert(QString("RequestedColumns"), ::OpenAPI::toJsonValue(m_requested_columns));
    }
    if (m_all_columns_requested_isSet) {
        obj.insert(QString("AllColumnsRequested"), ::OpenAPI::toJsonValue(m_all_columns_requested));
    }
    return obj;
}

QString OAIAuditContext::getAdditionalAuditContext() const {
    return m_additional_audit_context;
}
void OAIAuditContext::setAdditionalAuditContext(const QString &additional_audit_context) {
    m_additional_audit_context = additional_audit_context;
    m_additional_audit_context_isSet = true;
}

bool OAIAuditContext::is_additional_audit_context_Set() const{
    return m_additional_audit_context_isSet;
}

bool OAIAuditContext::is_additional_audit_context_Valid() const{
    return m_additional_audit_context_isValid;
}

QList OAIAuditContext::getRequestedColumns() const {
    return m_requested_columns;
}
void OAIAuditContext::setRequestedColumns(const QList &requested_columns) {
    m_requested_columns = requested_columns;
    m_requested_columns_isSet = true;
}

bool OAIAuditContext::is_requested_columns_Set() const{
    return m_requested_columns_isSet;
}

bool OAIAuditContext::is_requested_columns_Valid() const{
    return m_requested_columns_isValid;
}

bool OAIAuditContext::getAllColumnsRequested() const {
    return m_all_columns_requested;
}
void OAIAuditContext::setAllColumnsRequested(const bool &all_columns_requested) {
    m_all_columns_requested = all_columns_requested;
    m_all_columns_requested_isSet = true;
}

bool OAIAuditContext::is_all_columns_requested_Set() const{
    return m_all_columns_requested_isSet;
}

bool OAIAuditContext::is_all_columns_requested_Valid() const{
    return m_all_columns_requested_isValid;
}

bool OAIAuditContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_audit_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_columns_requested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
