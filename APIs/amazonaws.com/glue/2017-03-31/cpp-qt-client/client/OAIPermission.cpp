/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPermission::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPermission::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::SELECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::ALTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DROP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::DROP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::INSERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_DATABASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::CREATE_DATABASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::CREATE_TABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_LOCATION_ACCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermission::DATA_LOCATION_ACCESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPermission::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPermission::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPermission::ALL:
            val = "ALL";
            break;
        case eOAIPermission::SELECT:
            val = "SELECT";
            break;
        case eOAIPermission::ALTER:
            val = "ALTER";
            break;
        case eOAIPermission::DROP:
            val = "DROP";
            break;
        case eOAIPermission::DELETE:
            val = "DELETE";
            break;
        case eOAIPermission::INSERT:
            val = "INSERT";
            break;
        case eOAIPermission::CREATE_DATABASE:
            val = "CREATE_DATABASE";
            break;
        case eOAIPermission::CREATE_TABLE:
            val = "CREATE_TABLE";
            break;
        case eOAIPermission::DATA_LOCATION_ACCESS:
            val = "DATA_LOCATION_ACCESS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPermission::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPermission::eOAIPermission OAIPermission::getValue() const {
    return m_value;
}

void OAIPermission::setValue(const OAIPermission::eOAIPermission& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPermission::isSet() const {
    
    return m_value_isSet;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
