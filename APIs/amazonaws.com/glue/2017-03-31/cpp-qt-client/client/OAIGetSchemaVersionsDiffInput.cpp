/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSchemaVersionsDiffInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSchemaVersionsDiffInput::OAIGetSchemaVersionsDiffInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSchemaVersionsDiffInput::OAIGetSchemaVersionsDiffInput() {
    this->initializeModel();
}

OAIGetSchemaVersionsDiffInput::~OAIGetSchemaVersionsDiffInput() {}

void OAIGetSchemaVersionsDiffInput::initializeModel() {

    m_schema_id_isSet = false;
    m_schema_id_isValid = false;

    m_first_schema_version_number_isSet = false;
    m_first_schema_version_number_isValid = false;

    m_second_schema_version_number_isSet = false;
    m_second_schema_version_number_isValid = false;

    m_schema_diff_type_isSet = false;
    m_schema_diff_type_isValid = false;
}

void OAIGetSchemaVersionsDiffInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSchemaVersionsDiffInput::fromJsonObject(QJsonObject json) {

    m_schema_id_isValid = ::OpenAPI::fromJsonValue(m_schema_id, json[QString("SchemaId")]);
    m_schema_id_isSet = !json[QString("SchemaId")].isNull() && m_schema_id_isValid;

    m_first_schema_version_number_isValid = ::OpenAPI::fromJsonValue(m_first_schema_version_number, json[QString("FirstSchemaVersionNumber")]);
    m_first_schema_version_number_isSet = !json[QString("FirstSchemaVersionNumber")].isNull() && m_first_schema_version_number_isValid;

    m_second_schema_version_number_isValid = ::OpenAPI::fromJsonValue(m_second_schema_version_number, json[QString("SecondSchemaVersionNumber")]);
    m_second_schema_version_number_isSet = !json[QString("SecondSchemaVersionNumber")].isNull() && m_second_schema_version_number_isValid;

    m_schema_diff_type_isValid = ::OpenAPI::fromJsonValue(m_schema_diff_type, json[QString("SchemaDiffType")]);
    m_schema_diff_type_isSet = !json[QString("SchemaDiffType")].isNull() && m_schema_diff_type_isValid;
}

QString OAIGetSchemaVersionsDiffInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSchemaVersionsDiffInput::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_id.isSet()) {
        obj.insert(QString("SchemaId"), ::OpenAPI::toJsonValue(m_schema_id));
    }
    if (m_first_schema_version_number.isSet()) {
        obj.insert(QString("FirstSchemaVersionNumber"), ::OpenAPI::toJsonValue(m_first_schema_version_number));
    }
    if (m_second_schema_version_number.isSet()) {
        obj.insert(QString("SecondSchemaVersionNumber"), ::OpenAPI::toJsonValue(m_second_schema_version_number));
    }
    if (m_schema_diff_type.isSet()) {
        obj.insert(QString("SchemaDiffType"), ::OpenAPI::toJsonValue(m_schema_diff_type));
    }
    return obj;
}

OAIGetSchemaByDefinitionInput_SchemaId OAIGetSchemaVersionsDiffInput::getSchemaId() const {
    return m_schema_id;
}
void OAIGetSchemaVersionsDiffInput::setSchemaId(const OAIGetSchemaByDefinitionInput_SchemaId &schema_id) {
    m_schema_id = schema_id;
    m_schema_id_isSet = true;
}

bool OAIGetSchemaVersionsDiffInput::is_schema_id_Set() const{
    return m_schema_id_isSet;
}

bool OAIGetSchemaVersionsDiffInput::is_schema_id_Valid() const{
    return m_schema_id_isValid;
}

OAIGetSchemaVersionsDiffInput_FirstSchemaVersionNumber OAIGetSchemaVersionsDiffInput::getFirstSchemaVersionNumber() const {
    return m_first_schema_version_number;
}
void OAIGetSchemaVersionsDiffInput::setFirstSchemaVersionNumber(const OAIGetSchemaVersionsDiffInput_FirstSchemaVersionNumber &first_schema_version_number) {
    m_first_schema_version_number = first_schema_version_number;
    m_first_schema_version_number_isSet = true;
}

bool OAIGetSchemaVersionsDiffInput::is_first_schema_version_number_Set() const{
    return m_first_schema_version_number_isSet;
}

bool OAIGetSchemaVersionsDiffInput::is_first_schema_version_number_Valid() const{
    return m_first_schema_version_number_isValid;
}

OAIGetSchemaVersionsDiffInput_SecondSchemaVersionNumber OAIGetSchemaVersionsDiffInput::getSecondSchemaVersionNumber() const {
    return m_second_schema_version_number;
}
void OAIGetSchemaVersionsDiffInput::setSecondSchemaVersionNumber(const OAIGetSchemaVersionsDiffInput_SecondSchemaVersionNumber &second_schema_version_number) {
    m_second_schema_version_number = second_schema_version_number;
    m_second_schema_version_number_isSet = true;
}

bool OAIGetSchemaVersionsDiffInput::is_second_schema_version_number_Set() const{
    return m_second_schema_version_number_isSet;
}

bool OAIGetSchemaVersionsDiffInput::is_second_schema_version_number_Valid() const{
    return m_second_schema_version_number_isValid;
}

OAISchemaDiffType OAIGetSchemaVersionsDiffInput::getSchemaDiffType() const {
    return m_schema_diff_type;
}
void OAIGetSchemaVersionsDiffInput::setSchemaDiffType(const OAISchemaDiffType &schema_diff_type) {
    m_schema_diff_type = schema_diff_type;
    m_schema_diff_type_isSet = true;
}

bool OAIGetSchemaVersionsDiffInput::is_schema_diff_type_Set() const{
    return m_schema_diff_type_isSet;
}

bool OAIGetSchemaVersionsDiffInput::is_schema_diff_type_Valid() const{
    return m_schema_diff_type_isValid;
}

bool OAIGetSchemaVersionsDiffInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_schema_version_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_schema_version_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_diff_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSchemaVersionsDiffInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_id_isValid && m_first_schema_version_number_isValid && m_second_schema_version_number_isValid && m_schema_diff_type_isValid && true;
}

} // namespace OpenAPI
