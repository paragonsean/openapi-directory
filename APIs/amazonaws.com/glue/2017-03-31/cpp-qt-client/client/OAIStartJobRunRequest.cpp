/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartJobRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartJobRunRequest::OAIStartJobRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartJobRunRequest::OAIStartJobRunRequest() {
    this->initializeModel();
}

OAIStartJobRunRequest::~OAIStartJobRunRequest() {}

void OAIStartJobRunRequest::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_run_id_isSet = false;
    m_job_run_id_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_allocated_capacity_isSet = false;
    m_allocated_capacity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_security_configuration_isSet = false;
    m_security_configuration_isValid = false;

    m_notification_property_isSet = false;
    m_notification_property_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_execution_class_isSet = false;
    m_execution_class_isValid = false;
}

void OAIStartJobRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartJobRunRequest::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_run_id_isValid = ::OpenAPI::fromJsonValue(m_job_run_id, json[QString("JobRunId")]);
    m_job_run_id_isSet = !json[QString("JobRunId")].isNull() && m_job_run_id_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("Arguments")]);
    m_arguments_isSet = !json[QString("Arguments")].isNull() && m_arguments_isValid;

    m_allocated_capacity_isValid = ::OpenAPI::fromJsonValue(m_allocated_capacity, json[QString("AllocatedCapacity")]);
    m_allocated_capacity_isSet = !json[QString("AllocatedCapacity")].isNull() && m_allocated_capacity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_security_configuration, json[QString("SecurityConfiguration")]);
    m_security_configuration_isSet = !json[QString("SecurityConfiguration")].isNull() && m_security_configuration_isValid;

    m_notification_property_isValid = ::OpenAPI::fromJsonValue(m_notification_property, json[QString("NotificationProperty")]);
    m_notification_property_isSet = !json[QString("NotificationProperty")].isNull() && m_notification_property_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_execution_class_isValid = ::OpenAPI::fromJsonValue(m_execution_class, json[QString("ExecutionClass")]);
    m_execution_class_isSet = !json[QString("ExecutionClass")].isNull() && m_execution_class_isValid;
}

QString OAIStartJobRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartJobRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_run_id_isSet) {
        obj.insert(QString("JobRunId"), ::OpenAPI::toJsonValue(m_job_run_id));
    }
    if (m_arguments.isSet()) {
        obj.insert(QString("Arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_allocated_capacity_isSet) {
        obj.insert(QString("AllocatedCapacity"), ::OpenAPI::toJsonValue(m_allocated_capacity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_security_configuration_isSet) {
        obj.insert(QString("SecurityConfiguration"), ::OpenAPI::toJsonValue(m_security_configuration));
    }
    if (m_notification_property.isSet()) {
        obj.insert(QString("NotificationProperty"), ::OpenAPI::toJsonValue(m_notification_property));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_execution_class.isSet()) {
        obj.insert(QString("ExecutionClass"), ::OpenAPI::toJsonValue(m_execution_class));
    }
    return obj;
}

QString OAIStartJobRunRequest::getJobName() const {
    return m_job_name;
}
void OAIStartJobRunRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartJobRunRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartJobRunRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIStartJobRunRequest::getJobRunId() const {
    return m_job_run_id;
}
void OAIStartJobRunRequest::setJobRunId(const QString &job_run_id) {
    m_job_run_id = job_run_id;
    m_job_run_id_isSet = true;
}

bool OAIStartJobRunRequest::is_job_run_id_Set() const{
    return m_job_run_id_isSet;
}

bool OAIStartJobRunRequest::is_job_run_id_Valid() const{
    return m_job_run_id_isValid;
}

QMap OAIStartJobRunRequest::getArguments() const {
    return m_arguments;
}
void OAIStartJobRunRequest::setArguments(const QMap &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIStartJobRunRequest::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIStartJobRunRequest::is_arguments_Valid() const{
    return m_arguments_isValid;
}

qint32 OAIStartJobRunRequest::getAllocatedCapacity() const {
    return m_allocated_capacity;
}
void OAIStartJobRunRequest::setAllocatedCapacity(const qint32 &allocated_capacity) {
    m_allocated_capacity = allocated_capacity;
    m_allocated_capacity_isSet = true;
}

bool OAIStartJobRunRequest::is_allocated_capacity_Set() const{
    return m_allocated_capacity_isSet;
}

bool OAIStartJobRunRequest::is_allocated_capacity_Valid() const{
    return m_allocated_capacity_isValid;
}

qint32 OAIStartJobRunRequest::getTimeout() const {
    return m_timeout;
}
void OAIStartJobRunRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIStartJobRunRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIStartJobRunRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

double OAIStartJobRunRequest::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIStartJobRunRequest::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIStartJobRunRequest::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIStartJobRunRequest::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

QString OAIStartJobRunRequest::getSecurityConfiguration() const {
    return m_security_configuration;
}
void OAIStartJobRunRequest::setSecurityConfiguration(const QString &security_configuration) {
    m_security_configuration = security_configuration;
    m_security_configuration_isSet = true;
}

bool OAIStartJobRunRequest::is_security_configuration_Set() const{
    return m_security_configuration_isSet;
}

bool OAIStartJobRunRequest::is_security_configuration_Valid() const{
    return m_security_configuration_isValid;
}

OAIStartJobRunRequest_NotificationProperty OAIStartJobRunRequest::getNotificationProperty() const {
    return m_notification_property;
}
void OAIStartJobRunRequest::setNotificationProperty(const OAIStartJobRunRequest_NotificationProperty &notification_property) {
    m_notification_property = notification_property;
    m_notification_property_isSet = true;
}

bool OAIStartJobRunRequest::is_notification_property_Set() const{
    return m_notification_property_isSet;
}

bool OAIStartJobRunRequest::is_notification_property_Valid() const{
    return m_notification_property_isValid;
}

OAIWorkerType OAIStartJobRunRequest::getWorkerType() const {
    return m_worker_type;
}
void OAIStartJobRunRequest::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIStartJobRunRequest::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIStartJobRunRequest::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

qint32 OAIStartJobRunRequest::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIStartJobRunRequest::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIStartJobRunRequest::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIStartJobRunRequest::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

OAIExecutionClass OAIStartJobRunRequest::getExecutionClass() const {
    return m_execution_class;
}
void OAIStartJobRunRequest::setExecutionClass(const OAIExecutionClass &execution_class) {
    m_execution_class = execution_class;
    m_execution_class_isSet = true;
}

bool OAIStartJobRunRequest::is_execution_class_Set() const{
    return m_execution_class_isSet;
}

bool OAIStartJobRunRequest::is_execution_class_Valid() const{
    return m_execution_class_isValid;
}

bool OAIStartJobRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartJobRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_name_isValid && true;
}

} // namespace OpenAPI
