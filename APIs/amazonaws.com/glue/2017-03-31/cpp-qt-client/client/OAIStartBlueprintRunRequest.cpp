/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBlueprintRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBlueprintRunRequest::OAIStartBlueprintRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBlueprintRunRequest::OAIStartBlueprintRunRequest() {
    this->initializeModel();
}

OAIStartBlueprintRunRequest::~OAIStartBlueprintRunRequest() {}

void OAIStartBlueprintRunRequest::initializeModel() {

    m_blueprint_name_isSet = false;
    m_blueprint_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIStartBlueprintRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBlueprintRunRequest::fromJsonObject(QJsonObject json) {

    m_blueprint_name_isValid = ::OpenAPI::fromJsonValue(m_blueprint_name, json[QString("BlueprintName")]);
    m_blueprint_name_isSet = !json[QString("BlueprintName")].isNull() && m_blueprint_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIStartBlueprintRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBlueprintRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_blueprint_name_isSet) {
        obj.insert(QString("BlueprintName"), ::OpenAPI::toJsonValue(m_blueprint_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIStartBlueprintRunRequest::getBlueprintName() const {
    return m_blueprint_name;
}
void OAIStartBlueprintRunRequest::setBlueprintName(const QString &blueprint_name) {
    m_blueprint_name = blueprint_name;
    m_blueprint_name_isSet = true;
}

bool OAIStartBlueprintRunRequest::is_blueprint_name_Set() const{
    return m_blueprint_name_isSet;
}

bool OAIStartBlueprintRunRequest::is_blueprint_name_Valid() const{
    return m_blueprint_name_isValid;
}

QString OAIStartBlueprintRunRequest::getParameters() const {
    return m_parameters;
}
void OAIStartBlueprintRunRequest::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStartBlueprintRunRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStartBlueprintRunRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIStartBlueprintRunRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIStartBlueprintRunRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIStartBlueprintRunRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIStartBlueprintRunRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIStartBlueprintRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blueprint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBlueprintRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blueprint_name_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
