/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlsFilter::OAICrawlsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlsFilter::OAICrawlsFilter() {
    this->initializeModel();
}

OAICrawlsFilter::~OAICrawlsFilter() {}

void OAICrawlsFilter::initializeModel() {

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_filter_operator_isSet = false;
    m_filter_operator_isValid = false;

    m_field_value_isSet = false;
    m_field_value_isValid = false;
}

void OAICrawlsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlsFilter::fromJsonObject(QJsonObject json) {

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("FieldName")]);
    m_field_name_isSet = !json[QString("FieldName")].isNull() && m_field_name_isValid;

    m_filter_operator_isValid = ::OpenAPI::fromJsonValue(m_filter_operator, json[QString("FilterOperator")]);
    m_filter_operator_isSet = !json[QString("FilterOperator")].isNull() && m_filter_operator_isValid;

    m_field_value_isValid = ::OpenAPI::fromJsonValue(m_field_value, json[QString("FieldValue")]);
    m_field_value_isSet = !json[QString("FieldValue")].isNull() && m_field_value_isValid;
}

QString OAICrawlsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_field_name.isSet()) {
        obj.insert(QString("FieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_filter_operator.isSet()) {
        obj.insert(QString("FilterOperator"), ::OpenAPI::toJsonValue(m_filter_operator));
    }
    if (m_field_value_isSet) {
        obj.insert(QString("FieldValue"), ::OpenAPI::toJsonValue(m_field_value));
    }
    return obj;
}

OAIFieldName OAICrawlsFilter::getFieldName() const {
    return m_field_name;
}
void OAICrawlsFilter::setFieldName(const OAIFieldName &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAICrawlsFilter::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAICrawlsFilter::is_field_name_Valid() const{
    return m_field_name_isValid;
}

OAIFilterOperator OAICrawlsFilter::getFilterOperator() const {
    return m_filter_operator;
}
void OAICrawlsFilter::setFilterOperator(const OAIFilterOperator &filter_operator) {
    m_filter_operator = filter_operator;
    m_filter_operator_isSet = true;
}

bool OAICrawlsFilter::is_filter_operator_Set() const{
    return m_filter_operator_isSet;
}

bool OAICrawlsFilter::is_filter_operator_Valid() const{
    return m_filter_operator_isValid;
}

QString OAICrawlsFilter::getFieldValue() const {
    return m_field_value;
}
void OAICrawlsFilter::setFieldValue(const QString &field_value) {
    m_field_value = field_value;
    m_field_value_isSet = true;
}

bool OAICrawlsFilter::is_field_value_Set() const{
    return m_field_value_isSet;
}

bool OAICrawlsFilter::is_field_value_Valid() const{
    return m_field_value_isValid;
}

bool OAICrawlsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
