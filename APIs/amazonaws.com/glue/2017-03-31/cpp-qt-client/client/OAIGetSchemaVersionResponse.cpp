/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSchemaVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSchemaVersionResponse::OAIGetSchemaVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSchemaVersionResponse::OAIGetSchemaVersionResponse() {
    this->initializeModel();
}

OAIGetSchemaVersionResponse::~OAIGetSchemaVersionResponse() {}

void OAIGetSchemaVersionResponse::initializeModel() {

    m_schema_version_id_isSet = false;
    m_schema_version_id_isValid = false;

    m_schema_definition_isSet = false;
    m_schema_definition_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIGetSchemaVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSchemaVersionResponse::fromJsonObject(QJsonObject json) {

    m_schema_version_id_isValid = ::OpenAPI::fromJsonValue(m_schema_version_id, json[QString("SchemaVersionId")]);
    m_schema_version_id_isSet = !json[QString("SchemaVersionId")].isNull() && m_schema_version_id_isValid;

    m_schema_definition_isValid = ::OpenAPI::fromJsonValue(m_schema_definition, json[QString("SchemaDefinition")]);
    m_schema_definition_isSet = !json[QString("SchemaDefinition")].isNull() && m_schema_definition_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("DataFormat")]);
    m_data_format_isSet = !json[QString("DataFormat")].isNull() && m_data_format_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;
}

QString OAIGetSchemaVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSchemaVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_version_id_isSet) {
        obj.insert(QString("SchemaVersionId"), ::OpenAPI::toJsonValue(m_schema_version_id));
    }
    if (m_schema_definition_isSet) {
        obj.insert(QString("SchemaDefinition"), ::OpenAPI::toJsonValue(m_schema_definition));
    }
    if (m_data_format.isSet()) {
        obj.insert(QString("DataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    return obj;
}

QString OAIGetSchemaVersionResponse::getSchemaVersionId() const {
    return m_schema_version_id;
}
void OAIGetSchemaVersionResponse::setSchemaVersionId(const QString &schema_version_id) {
    m_schema_version_id = schema_version_id;
    m_schema_version_id_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_schema_version_id_Set() const{
    return m_schema_version_id_isSet;
}

bool OAIGetSchemaVersionResponse::is_schema_version_id_Valid() const{
    return m_schema_version_id_isValid;
}

QString OAIGetSchemaVersionResponse::getSchemaDefinition() const {
    return m_schema_definition;
}
void OAIGetSchemaVersionResponse::setSchemaDefinition(const QString &schema_definition) {
    m_schema_definition = schema_definition;
    m_schema_definition_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_schema_definition_Set() const{
    return m_schema_definition_isSet;
}

bool OAIGetSchemaVersionResponse::is_schema_definition_Valid() const{
    return m_schema_definition_isValid;
}

OAIDataFormat OAIGetSchemaVersionResponse::getDataFormat() const {
    return m_data_format;
}
void OAIGetSchemaVersionResponse::setDataFormat(const OAIDataFormat &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIGetSchemaVersionResponse::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAIGetSchemaVersionResponse::getSchemaArn() const {
    return m_schema_arn;
}
void OAIGetSchemaVersionResponse::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIGetSchemaVersionResponse::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

qint32 OAIGetSchemaVersionResponse::getVersionNumber() const {
    return m_version_number;
}
void OAIGetSchemaVersionResponse::setVersionNumber(const qint32 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIGetSchemaVersionResponse::is_version_number_Valid() const{
    return m_version_number_isValid;
}

OAISchemaVersionStatus OAIGetSchemaVersionResponse::getStatus() const {
    return m_status;
}
void OAIGetSchemaVersionResponse::setStatus(const OAISchemaVersionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetSchemaVersionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetSchemaVersionResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIGetSchemaVersionResponse::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIGetSchemaVersionResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIGetSchemaVersionResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIGetSchemaVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSchemaVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
