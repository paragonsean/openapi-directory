/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJDBCConnectorTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJDBCConnectorTarget::OAIJDBCConnectorTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJDBCConnectorTarget::OAIJDBCConnectorTarget() {
    this->initializeModel();
}

OAIJDBCConnectorTarget::~OAIJDBCConnectorTarget() {}

void OAIJDBCConnectorTarget::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_connection_table_isSet = false;
    m_connection_table_isValid = false;

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_additional_options_isSet = false;
    m_additional_options_isValid = false;

    m_output_schemas_isSet = false;
    m_output_schemas_isValid = false;
}

void OAIJDBCConnectorTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJDBCConnectorTarget::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_connection_table_isValid = ::OpenAPI::fromJsonValue(m_connection_table, json[QString("ConnectionTable")]);
    m_connection_table_isSet = !json[QString("ConnectionTable")].isNull() && m_connection_table_isValid;

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("ConnectorName")]);
    m_connector_name_isSet = !json[QString("ConnectorName")].isNull() && m_connector_name_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;

    m_additional_options_isValid = ::OpenAPI::fromJsonValue(m_additional_options, json[QString("AdditionalOptions")]);
    m_additional_options_isSet = !json[QString("AdditionalOptions")].isNull() && m_additional_options_isValid;

    m_output_schemas_isValid = ::OpenAPI::fromJsonValue(m_output_schemas, json[QString("OutputSchemas")]);
    m_output_schemas_isSet = !json[QString("OutputSchemas")].isNull() && m_output_schemas_isValid;
}

QString OAIJDBCConnectorTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJDBCConnectorTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_connection_table_isSet) {
        obj.insert(QString("ConnectionTable"), ::OpenAPI::toJsonValue(m_connection_table));
    }
    if (m_connector_name_isSet) {
        obj.insert(QString("ConnectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_additional_options.isSet()) {
        obj.insert(QString("AdditionalOptions"), ::OpenAPI::toJsonValue(m_additional_options));
    }
    if (m_output_schemas.isSet()) {
        obj.insert(QString("OutputSchemas"), ::OpenAPI::toJsonValue(m_output_schemas));
    }
    return obj;
}

QString OAIJDBCConnectorTarget::getName() const {
    return m_name;
}
void OAIJDBCConnectorTarget::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJDBCConnectorTarget::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJDBCConnectorTarget::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIJDBCConnectorTarget::getInputs() const {
    return m_inputs;
}
void OAIJDBCConnectorTarget::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIJDBCConnectorTarget::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIJDBCConnectorTarget::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QString OAIJDBCConnectorTarget::getConnectionName() const {
    return m_connection_name;
}
void OAIJDBCConnectorTarget::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIJDBCConnectorTarget::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIJDBCConnectorTarget::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

QString OAIJDBCConnectorTarget::getConnectionTable() const {
    return m_connection_table;
}
void OAIJDBCConnectorTarget::setConnectionTable(const QString &connection_table) {
    m_connection_table = connection_table;
    m_connection_table_isSet = true;
}

bool OAIJDBCConnectorTarget::is_connection_table_Set() const{
    return m_connection_table_isSet;
}

bool OAIJDBCConnectorTarget::is_connection_table_Valid() const{
    return m_connection_table_isValid;
}

QString OAIJDBCConnectorTarget::getConnectorName() const {
    return m_connector_name;
}
void OAIJDBCConnectorTarget::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIJDBCConnectorTarget::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIJDBCConnectorTarget::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

QString OAIJDBCConnectorTarget::getConnectionType() const {
    return m_connection_type;
}
void OAIJDBCConnectorTarget::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIJDBCConnectorTarget::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIJDBCConnectorTarget::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QMap OAIJDBCConnectorTarget::getAdditionalOptions() const {
    return m_additional_options;
}
void OAIJDBCConnectorTarget::setAdditionalOptions(const QMap &additional_options) {
    m_additional_options = additional_options;
    m_additional_options_isSet = true;
}

bool OAIJDBCConnectorTarget::is_additional_options_Set() const{
    return m_additional_options_isSet;
}

bool OAIJDBCConnectorTarget::is_additional_options_Valid() const{
    return m_additional_options_isValid;
}

QList OAIJDBCConnectorTarget::getOutputSchemas() const {
    return m_output_schemas;
}
void OAIJDBCConnectorTarget::setOutputSchemas(const QList &output_schemas) {
    m_output_schemas = output_schemas;
    m_output_schemas_isSet = true;
}

bool OAIJDBCConnectorTarget::is_output_schemas_Set() const{
    return m_output_schemas_isSet;
}

bool OAIJDBCConnectorTarget::is_output_schemas_Valid() const{
    return m_output_schemas_isValid;
}

bool OAIJDBCConnectorTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_schemas.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJDBCConnectorTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_inputs_isValid && m_connection_name_isValid && m_connection_table_isValid && m_connector_name_isValid && m_connection_type_isValid && true;
}

} // namespace OpenAPI
