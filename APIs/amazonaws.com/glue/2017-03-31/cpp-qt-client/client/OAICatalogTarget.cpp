/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogTarget::OAICatalogTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogTarget::OAICatalogTarget() {
    this->initializeModel();
}

OAICatalogTarget::~OAICatalogTarget() {}

void OAICatalogTarget::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_event_queue_arn_isSet = false;
    m_event_queue_arn_isValid = false;

    m_dlq_event_queue_arn_isSet = false;
    m_dlq_event_queue_arn_isValid = false;
}

void OAICatalogTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogTarget::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("Tables")]);
    m_tables_isSet = !json[QString("Tables")].isNull() && m_tables_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_event_queue_arn_isValid = ::OpenAPI::fromJsonValue(m_event_queue_arn, json[QString("EventQueueArn")]);
    m_event_queue_arn_isSet = !json[QString("EventQueueArn")].isNull() && m_event_queue_arn_isValid;

    m_dlq_event_queue_arn_isValid = ::OpenAPI::fromJsonValue(m_dlq_event_queue_arn, json[QString("DlqEventQueueArn")]);
    m_dlq_event_queue_arn_isSet = !json[QString("DlqEventQueueArn")].isNull() && m_dlq_event_queue_arn_isValid;
}

QString OAICatalogTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_tables.isSet()) {
        obj.insert(QString("Tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_event_queue_arn_isSet) {
        obj.insert(QString("EventQueueArn"), ::OpenAPI::toJsonValue(m_event_queue_arn));
    }
    if (m_dlq_event_queue_arn_isSet) {
        obj.insert(QString("DlqEventQueueArn"), ::OpenAPI::toJsonValue(m_dlq_event_queue_arn));
    }
    return obj;
}

QString OAICatalogTarget::getDatabaseName() const {
    return m_database_name;
}
void OAICatalogTarget::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAICatalogTarget::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAICatalogTarget::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QList OAICatalogTarget::getTables() const {
    return m_tables;
}
void OAICatalogTarget::setTables(const QList &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAICatalogTarget::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAICatalogTarget::is_tables_Valid() const{
    return m_tables_isValid;
}

QString OAICatalogTarget::getConnectionName() const {
    return m_connection_name;
}
void OAICatalogTarget::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAICatalogTarget::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAICatalogTarget::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

QString OAICatalogTarget::getEventQueueArn() const {
    return m_event_queue_arn;
}
void OAICatalogTarget::setEventQueueArn(const QString &event_queue_arn) {
    m_event_queue_arn = event_queue_arn;
    m_event_queue_arn_isSet = true;
}

bool OAICatalogTarget::is_event_queue_arn_Set() const{
    return m_event_queue_arn_isSet;
}

bool OAICatalogTarget::is_event_queue_arn_Valid() const{
    return m_event_queue_arn_isValid;
}

QString OAICatalogTarget::getDlqEventQueueArn() const {
    return m_dlq_event_queue_arn;
}
void OAICatalogTarget::setDlqEventQueueArn(const QString &dlq_event_queue_arn) {
    m_dlq_event_queue_arn = dlq_event_queue_arn;
    m_dlq_event_queue_arn_isSet = true;
}

bool OAICatalogTarget::is_dlq_event_queue_arn_Set() const{
    return m_dlq_event_queue_arn_isSet;
}

bool OAICatalogTarget::is_dlq_event_queue_arn_Valid() const{
    return m_dlq_event_queue_arn_isValid;
}

bool OAICatalogTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_queue_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dlq_event_queue_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_name_isValid && m_tables_isValid && true;
}

} // namespace OpenAPI
