/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapping::OAIMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapping::OAIMapping() {
    this->initializeModel();
}

OAIMapping::~OAIMapping() {}

void OAIMapping::initializeModel() {

    m_to_key_isSet = false;
    m_to_key_isValid = false;

    m_from_path_isSet = false;
    m_from_path_isValid = false;

    m_from_type_isSet = false;
    m_from_type_isValid = false;

    m_to_type_isSet = false;
    m_to_type_isValid = false;

    m_dropped_isSet = false;
    m_dropped_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;
}

void OAIMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapping::fromJsonObject(QJsonObject json) {

    m_to_key_isValid = ::OpenAPI::fromJsonValue(m_to_key, json[QString("ToKey")]);
    m_to_key_isSet = !json[QString("ToKey")].isNull() && m_to_key_isValid;

    m_from_path_isValid = ::OpenAPI::fromJsonValue(m_from_path, json[QString("FromPath")]);
    m_from_path_isSet = !json[QString("FromPath")].isNull() && m_from_path_isValid;

    m_from_type_isValid = ::OpenAPI::fromJsonValue(m_from_type, json[QString("FromType")]);
    m_from_type_isSet = !json[QString("FromType")].isNull() && m_from_type_isValid;

    m_to_type_isValid = ::OpenAPI::fromJsonValue(m_to_type, json[QString("ToType")]);
    m_to_type_isSet = !json[QString("ToType")].isNull() && m_to_type_isValid;

    m_dropped_isValid = ::OpenAPI::fromJsonValue(m_dropped, json[QString("Dropped")]);
    m_dropped_isSet = !json[QString("Dropped")].isNull() && m_dropped_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("Children")]);
    m_children_isSet = !json[QString("Children")].isNull() && m_children_isValid;
}

QString OAIMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_to_key_isSet) {
        obj.insert(QString("ToKey"), ::OpenAPI::toJsonValue(m_to_key));
    }
    if (m_from_path.isSet()) {
        obj.insert(QString("FromPath"), ::OpenAPI::toJsonValue(m_from_path));
    }
    if (m_from_type_isSet) {
        obj.insert(QString("FromType"), ::OpenAPI::toJsonValue(m_from_type));
    }
    if (m_to_type_isSet) {
        obj.insert(QString("ToType"), ::OpenAPI::toJsonValue(m_to_type));
    }
    if (m_dropped_isSet) {
        obj.insert(QString("Dropped"), ::OpenAPI::toJsonValue(m_dropped));
    }
    if (m_children.isSet()) {
        obj.insert(QString("Children"), ::OpenAPI::toJsonValue(m_children));
    }
    return obj;
}

QString OAIMapping::getToKey() const {
    return m_to_key;
}
void OAIMapping::setToKey(const QString &to_key) {
    m_to_key = to_key;
    m_to_key_isSet = true;
}

bool OAIMapping::is_to_key_Set() const{
    return m_to_key_isSet;
}

bool OAIMapping::is_to_key_Valid() const{
    return m_to_key_isValid;
}

QList OAIMapping::getFromPath() const {
    return m_from_path;
}
void OAIMapping::setFromPath(const QList &from_path) {
    m_from_path = from_path;
    m_from_path_isSet = true;
}

bool OAIMapping::is_from_path_Set() const{
    return m_from_path_isSet;
}

bool OAIMapping::is_from_path_Valid() const{
    return m_from_path_isValid;
}

QString OAIMapping::getFromType() const {
    return m_from_type;
}
void OAIMapping::setFromType(const QString &from_type) {
    m_from_type = from_type;
    m_from_type_isSet = true;
}

bool OAIMapping::is_from_type_Set() const{
    return m_from_type_isSet;
}

bool OAIMapping::is_from_type_Valid() const{
    return m_from_type_isValid;
}

QString OAIMapping::getToType() const {
    return m_to_type;
}
void OAIMapping::setToType(const QString &to_type) {
    m_to_type = to_type;
    m_to_type_isSet = true;
}

bool OAIMapping::is_to_type_Set() const{
    return m_to_type_isSet;
}

bool OAIMapping::is_to_type_Valid() const{
    return m_to_type_isValid;
}

bool OAIMapping::getDropped() const {
    return m_dropped;
}
void OAIMapping::setDropped(const bool &dropped) {
    m_dropped = dropped;
    m_dropped_isSet = true;
}

bool OAIMapping::is_dropped_Set() const{
    return m_dropped_isSet;
}

bool OAIMapping::is_dropped_Valid() const{
    return m_dropped_isValid;
}

QList OAIMapping::getChildren() const {
    return m_children;
}
void OAIMapping::setChildren(const QList &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIMapping::is_children_Set() const{
    return m_children_isSet;
}

bool OAIMapping::is_children_Valid() const{
    return m_children_isValid;
}

bool OAIMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_to_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
