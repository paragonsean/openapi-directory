/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStringColumnStatisticsData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStringColumnStatisticsData::OAIStringColumnStatisticsData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStringColumnStatisticsData::OAIStringColumnStatisticsData() {
    this->initializeModel();
}

OAIStringColumnStatisticsData::~OAIStringColumnStatisticsData() {}

void OAIStringColumnStatisticsData::initializeModel() {

    m_maximum_length_isSet = false;
    m_maximum_length_isValid = false;

    m_average_length_isSet = false;
    m_average_length_isValid = false;

    m_number_of_nulls_isSet = false;
    m_number_of_nulls_isValid = false;

    m_number_of_distinct_values_isSet = false;
    m_number_of_distinct_values_isValid = false;
}

void OAIStringColumnStatisticsData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStringColumnStatisticsData::fromJsonObject(QJsonObject json) {

    m_maximum_length_isValid = ::OpenAPI::fromJsonValue(m_maximum_length, json[QString("MaximumLength")]);
    m_maximum_length_isSet = !json[QString("MaximumLength")].isNull() && m_maximum_length_isValid;

    m_average_length_isValid = ::OpenAPI::fromJsonValue(m_average_length, json[QString("AverageLength")]);
    m_average_length_isSet = !json[QString("AverageLength")].isNull() && m_average_length_isValid;

    m_number_of_nulls_isValid = ::OpenAPI::fromJsonValue(m_number_of_nulls, json[QString("NumberOfNulls")]);
    m_number_of_nulls_isSet = !json[QString("NumberOfNulls")].isNull() && m_number_of_nulls_isValid;

    m_number_of_distinct_values_isValid = ::OpenAPI::fromJsonValue(m_number_of_distinct_values, json[QString("NumberOfDistinctValues")]);
    m_number_of_distinct_values_isSet = !json[QString("NumberOfDistinctValues")].isNull() && m_number_of_distinct_values_isValid;
}

QString OAIStringColumnStatisticsData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStringColumnStatisticsData::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_length_isSet) {
        obj.insert(QString("MaximumLength"), ::OpenAPI::toJsonValue(m_maximum_length));
    }
    if (m_average_length_isSet) {
        obj.insert(QString("AverageLength"), ::OpenAPI::toJsonValue(m_average_length));
    }
    if (m_number_of_nulls_isSet) {
        obj.insert(QString("NumberOfNulls"), ::OpenAPI::toJsonValue(m_number_of_nulls));
    }
    if (m_number_of_distinct_values_isSet) {
        obj.insert(QString("NumberOfDistinctValues"), ::OpenAPI::toJsonValue(m_number_of_distinct_values));
    }
    return obj;
}

qint32 OAIStringColumnStatisticsData::getMaximumLength() const {
    return m_maximum_length;
}
void OAIStringColumnStatisticsData::setMaximumLength(const qint32 &maximum_length) {
    m_maximum_length = maximum_length;
    m_maximum_length_isSet = true;
}

bool OAIStringColumnStatisticsData::is_maximum_length_Set() const{
    return m_maximum_length_isSet;
}

bool OAIStringColumnStatisticsData::is_maximum_length_Valid() const{
    return m_maximum_length_isValid;
}

double OAIStringColumnStatisticsData::getAverageLength() const {
    return m_average_length;
}
void OAIStringColumnStatisticsData::setAverageLength(const double &average_length) {
    m_average_length = average_length;
    m_average_length_isSet = true;
}

bool OAIStringColumnStatisticsData::is_average_length_Set() const{
    return m_average_length_isSet;
}

bool OAIStringColumnStatisticsData::is_average_length_Valid() const{
    return m_average_length_isValid;
}

qint32 OAIStringColumnStatisticsData::getNumberOfNulls() const {
    return m_number_of_nulls;
}
void OAIStringColumnStatisticsData::setNumberOfNulls(const qint32 &number_of_nulls) {
    m_number_of_nulls = number_of_nulls;
    m_number_of_nulls_isSet = true;
}

bool OAIStringColumnStatisticsData::is_number_of_nulls_Set() const{
    return m_number_of_nulls_isSet;
}

bool OAIStringColumnStatisticsData::is_number_of_nulls_Valid() const{
    return m_number_of_nulls_isValid;
}

qint32 OAIStringColumnStatisticsData::getNumberOfDistinctValues() const {
    return m_number_of_distinct_values;
}
void OAIStringColumnStatisticsData::setNumberOfDistinctValues(const qint32 &number_of_distinct_values) {
    m_number_of_distinct_values = number_of_distinct_values;
    m_number_of_distinct_values_isSet = true;
}

bool OAIStringColumnStatisticsData::is_number_of_distinct_values_Set() const{
    return m_number_of_distinct_values_isSet;
}

bool OAIStringColumnStatisticsData::is_number_of_distinct_values_Valid() const{
    return m_number_of_distinct_values_isValid;
}

bool OAIStringColumnStatisticsData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_distinct_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStringColumnStatisticsData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_maximum_length_isValid && m_average_length_isValid && m_number_of_nulls_isValid && m_number_of_distinct_values_isValid && true;
}

} // namespace OpenAPI
