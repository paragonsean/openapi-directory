/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow::OAIWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow::OAIWorkflow() {
    this->initializeModel();
}

OAIWorkflow::~OAIWorkflow() {}

void OAIWorkflow::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_default_run_properties_isSet = false;
    m_default_run_properties_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_last_run_isSet = false;
    m_last_run_isValid = false;

    m_graph_isSet = false;
    m_graph_isValid = false;

    m_max_concurrent_runs_isSet = false;
    m_max_concurrent_runs_isValid = false;

    m_blueprint_details_isSet = false;
    m_blueprint_details_isValid = false;
}

void OAIWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_default_run_properties_isValid = ::OpenAPI::fromJsonValue(m_default_run_properties, json[QString("DefaultRunProperties")]);
    m_default_run_properties_isSet = !json[QString("DefaultRunProperties")].isNull() && m_default_run_properties_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("CreatedOn")]);
    m_created_on_isSet = !json[QString("CreatedOn")].isNull() && m_created_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_last_run_isValid = ::OpenAPI::fromJsonValue(m_last_run, json[QString("LastRun")]);
    m_last_run_isSet = !json[QString("LastRun")].isNull() && m_last_run_isValid;

    m_graph_isValid = ::OpenAPI::fromJsonValue(m_graph, json[QString("Graph")]);
    m_graph_isSet = !json[QString("Graph")].isNull() && m_graph_isValid;

    m_max_concurrent_runs_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_runs, json[QString("MaxConcurrentRuns")]);
    m_max_concurrent_runs_isSet = !json[QString("MaxConcurrentRuns")].isNull() && m_max_concurrent_runs_isValid;

    m_blueprint_details_isValid = ::OpenAPI::fromJsonValue(m_blueprint_details, json[QString("BlueprintDetails")]);
    m_blueprint_details_isSet = !json[QString("BlueprintDetails")].isNull() && m_blueprint_details_isValid;
}

QString OAIWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_default_run_properties.isSet()) {
        obj.insert(QString("DefaultRunProperties"), ::OpenAPI::toJsonValue(m_default_run_properties));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("CreatedOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_last_run.isSet()) {
        obj.insert(QString("LastRun"), ::OpenAPI::toJsonValue(m_last_run));
    }
    if (m_graph.isSet()) {
        obj.insert(QString("Graph"), ::OpenAPI::toJsonValue(m_graph));
    }
    if (m_max_concurrent_runs_isSet) {
        obj.insert(QString("MaxConcurrentRuns"), ::OpenAPI::toJsonValue(m_max_concurrent_runs));
    }
    if (m_blueprint_details.isSet()) {
        obj.insert(QString("BlueprintDetails"), ::OpenAPI::toJsonValue(m_blueprint_details));
    }
    return obj;
}

QString OAIWorkflow::getName() const {
    return m_name;
}
void OAIWorkflow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflow::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflow::getDescription() const {
    return m_description;
}
void OAIWorkflow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkflow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkflow::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAIWorkflow::getDefaultRunProperties() const {
    return m_default_run_properties;
}
void OAIWorkflow::setDefaultRunProperties(const QMap &default_run_properties) {
    m_default_run_properties = default_run_properties;
    m_default_run_properties_isSet = true;
}

bool OAIWorkflow::is_default_run_properties_Set() const{
    return m_default_run_properties_isSet;
}

bool OAIWorkflow::is_default_run_properties_Valid() const{
    return m_default_run_properties_isValid;
}

QDateTime OAIWorkflow::getCreatedOn() const {
    return m_created_on;
}
void OAIWorkflow::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIWorkflow::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIWorkflow::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QDateTime OAIWorkflow::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIWorkflow::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIWorkflow::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIWorkflow::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

OAIWorkflow_LastRun OAIWorkflow::getLastRun() const {
    return m_last_run;
}
void OAIWorkflow::setLastRun(const OAIWorkflow_LastRun &last_run) {
    m_last_run = last_run;
    m_last_run_isSet = true;
}

bool OAIWorkflow::is_last_run_Set() const{
    return m_last_run_isSet;
}

bool OAIWorkflow::is_last_run_Valid() const{
    return m_last_run_isValid;
}

OAIWorkflow_Graph OAIWorkflow::getGraph() const {
    return m_graph;
}
void OAIWorkflow::setGraph(const OAIWorkflow_Graph &graph) {
    m_graph = graph;
    m_graph_isSet = true;
}

bool OAIWorkflow::is_graph_Set() const{
    return m_graph_isSet;
}

bool OAIWorkflow::is_graph_Valid() const{
    return m_graph_isValid;
}

qint32 OAIWorkflow::getMaxConcurrentRuns() const {
    return m_max_concurrent_runs;
}
void OAIWorkflow::setMaxConcurrentRuns(const qint32 &max_concurrent_runs) {
    m_max_concurrent_runs = max_concurrent_runs;
    m_max_concurrent_runs_isSet = true;
}

bool OAIWorkflow::is_max_concurrent_runs_Set() const{
    return m_max_concurrent_runs_isSet;
}

bool OAIWorkflow::is_max_concurrent_runs_Valid() const{
    return m_max_concurrent_runs_isValid;
}

OAIWorkflow_BlueprintDetails OAIWorkflow::getBlueprintDetails() const {
    return m_blueprint_details;
}
void OAIWorkflow::setBlueprintDetails(const OAIWorkflow_BlueprintDetails &blueprint_details) {
    m_blueprint_details = blueprint_details;
    m_blueprint_details_isSet = true;
}

bool OAIWorkflow::is_blueprint_details_Set() const{
    return m_blueprint_details_isSet;
}

bool OAIWorkflow::is_blueprint_details_Valid() const{
    return m_blueprint_details_isValid;
}

bool OAIWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blueprint_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
