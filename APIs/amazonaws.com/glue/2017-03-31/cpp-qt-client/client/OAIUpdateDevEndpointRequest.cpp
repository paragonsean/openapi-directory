/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDevEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDevEndpointRequest::OAIUpdateDevEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDevEndpointRequest::OAIUpdateDevEndpointRequest() {
    this->initializeModel();
}

OAIUpdateDevEndpointRequest::~OAIUpdateDevEndpointRequest() {}

void OAIUpdateDevEndpointRequest::initializeModel() {

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_add_public_keys_isSet = false;
    m_add_public_keys_isValid = false;

    m_delete_public_keys_isSet = false;
    m_delete_public_keys_isValid = false;

    m_custom_libraries_isSet = false;
    m_custom_libraries_isValid = false;

    m_update_etl_libraries_isSet = false;
    m_update_etl_libraries_isValid = false;

    m_delete_arguments_isSet = false;
    m_delete_arguments_isValid = false;

    m_add_arguments_isSet = false;
    m_add_arguments_isValid = false;
}

void OAIUpdateDevEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDevEndpointRequest::fromJsonObject(QJsonObject json) {

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("PublicKey")]);
    m_public_key_isSet = !json[QString("PublicKey")].isNull() && m_public_key_isValid;

    m_add_public_keys_isValid = ::OpenAPI::fromJsonValue(m_add_public_keys, json[QString("AddPublicKeys")]);
    m_add_public_keys_isSet = !json[QString("AddPublicKeys")].isNull() && m_add_public_keys_isValid;

    m_delete_public_keys_isValid = ::OpenAPI::fromJsonValue(m_delete_public_keys, json[QString("DeletePublicKeys")]);
    m_delete_public_keys_isSet = !json[QString("DeletePublicKeys")].isNull() && m_delete_public_keys_isValid;

    m_custom_libraries_isValid = ::OpenAPI::fromJsonValue(m_custom_libraries, json[QString("CustomLibraries")]);
    m_custom_libraries_isSet = !json[QString("CustomLibraries")].isNull() && m_custom_libraries_isValid;

    m_update_etl_libraries_isValid = ::OpenAPI::fromJsonValue(m_update_etl_libraries, json[QString("UpdateEtlLibraries")]);
    m_update_etl_libraries_isSet = !json[QString("UpdateEtlLibraries")].isNull() && m_update_etl_libraries_isValid;

    m_delete_arguments_isValid = ::OpenAPI::fromJsonValue(m_delete_arguments, json[QString("DeleteArguments")]);
    m_delete_arguments_isSet = !json[QString("DeleteArguments")].isNull() && m_delete_arguments_isValid;

    m_add_arguments_isValid = ::OpenAPI::fromJsonValue(m_add_arguments, json[QString("AddArguments")]);
    m_add_arguments_isSet = !json[QString("AddArguments")].isNull() && m_add_arguments_isValid;
}

QString OAIUpdateDevEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDevEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("PublicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_add_public_keys.isSet()) {
        obj.insert(QString("AddPublicKeys"), ::OpenAPI::toJsonValue(m_add_public_keys));
    }
    if (m_delete_public_keys.isSet()) {
        obj.insert(QString("DeletePublicKeys"), ::OpenAPI::toJsonValue(m_delete_public_keys));
    }
    if (m_custom_libraries.isSet()) {
        obj.insert(QString("CustomLibraries"), ::OpenAPI::toJsonValue(m_custom_libraries));
    }
    if (m_update_etl_libraries_isSet) {
        obj.insert(QString("UpdateEtlLibraries"), ::OpenAPI::toJsonValue(m_update_etl_libraries));
    }
    if (m_delete_arguments.isSet()) {
        obj.insert(QString("DeleteArguments"), ::OpenAPI::toJsonValue(m_delete_arguments));
    }
    if (m_add_arguments.isSet()) {
        obj.insert(QString("AddArguments"), ::OpenAPI::toJsonValue(m_add_arguments));
    }
    return obj;
}

QString OAIUpdateDevEndpointRequest::getEndpointName() const {
    return m_endpoint_name;
}
void OAIUpdateDevEndpointRequest::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIUpdateDevEndpointRequest::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QString OAIUpdateDevEndpointRequest::getPublicKey() const {
    return m_public_key;
}
void OAIUpdateDevEndpointRequest::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIUpdateDevEndpointRequest::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QList OAIUpdateDevEndpointRequest::getAddPublicKeys() const {
    return m_add_public_keys;
}
void OAIUpdateDevEndpointRequest::setAddPublicKeys(const QList &add_public_keys) {
    m_add_public_keys = add_public_keys;
    m_add_public_keys_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_add_public_keys_Set() const{
    return m_add_public_keys_isSet;
}

bool OAIUpdateDevEndpointRequest::is_add_public_keys_Valid() const{
    return m_add_public_keys_isValid;
}

QList OAIUpdateDevEndpointRequest::getDeletePublicKeys() const {
    return m_delete_public_keys;
}
void OAIUpdateDevEndpointRequest::setDeletePublicKeys(const QList &delete_public_keys) {
    m_delete_public_keys = delete_public_keys;
    m_delete_public_keys_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_delete_public_keys_Set() const{
    return m_delete_public_keys_isSet;
}

bool OAIUpdateDevEndpointRequest::is_delete_public_keys_Valid() const{
    return m_delete_public_keys_isValid;
}

OAIUpdateDevEndpointRequest_CustomLibraries OAIUpdateDevEndpointRequest::getCustomLibraries() const {
    return m_custom_libraries;
}
void OAIUpdateDevEndpointRequest::setCustomLibraries(const OAIUpdateDevEndpointRequest_CustomLibraries &custom_libraries) {
    m_custom_libraries = custom_libraries;
    m_custom_libraries_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_custom_libraries_Set() const{
    return m_custom_libraries_isSet;
}

bool OAIUpdateDevEndpointRequest::is_custom_libraries_Valid() const{
    return m_custom_libraries_isValid;
}

bool OAIUpdateDevEndpointRequest::getUpdateEtlLibraries() const {
    return m_update_etl_libraries;
}
void OAIUpdateDevEndpointRequest::setUpdateEtlLibraries(const bool &update_etl_libraries) {
    m_update_etl_libraries = update_etl_libraries;
    m_update_etl_libraries_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_update_etl_libraries_Set() const{
    return m_update_etl_libraries_isSet;
}

bool OAIUpdateDevEndpointRequest::is_update_etl_libraries_Valid() const{
    return m_update_etl_libraries_isValid;
}

QList OAIUpdateDevEndpointRequest::getDeleteArguments() const {
    return m_delete_arguments;
}
void OAIUpdateDevEndpointRequest::setDeleteArguments(const QList &delete_arguments) {
    m_delete_arguments = delete_arguments;
    m_delete_arguments_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_delete_arguments_Set() const{
    return m_delete_arguments_isSet;
}

bool OAIUpdateDevEndpointRequest::is_delete_arguments_Valid() const{
    return m_delete_arguments_isValid;
}

QMap OAIUpdateDevEndpointRequest::getAddArguments() const {
    return m_add_arguments;
}
void OAIUpdateDevEndpointRequest::setAddArguments(const QMap &add_arguments) {
    m_add_arguments = add_arguments;
    m_add_arguments_isSet = true;
}

bool OAIUpdateDevEndpointRequest::is_add_arguments_Set() const{
    return m_add_arguments_isSet;
}

bool OAIUpdateDevEndpointRequest::is_add_arguments_Valid() const{
    return m_add_arguments_isValid;
}

bool OAIUpdateDevEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_public_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_public_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_libraries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_etl_libraries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDevEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_name_isValid && true;
}

} // namespace OpenAPI
