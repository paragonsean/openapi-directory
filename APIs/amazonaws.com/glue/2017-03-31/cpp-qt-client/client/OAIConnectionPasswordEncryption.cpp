/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionPasswordEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionPasswordEncryption::OAIConnectionPasswordEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionPasswordEncryption::OAIConnectionPasswordEncryption() {
    this->initializeModel();
}

OAIConnectionPasswordEncryption::~OAIConnectionPasswordEncryption() {}

void OAIConnectionPasswordEncryption::initializeModel() {

    m_return_connection_password_encrypted_isSet = false;
    m_return_connection_password_encrypted_isValid = false;

    m_aws_kms_key_id_isSet = false;
    m_aws_kms_key_id_isValid = false;
}

void OAIConnectionPasswordEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionPasswordEncryption::fromJsonObject(QJsonObject json) {

    m_return_connection_password_encrypted_isValid = ::OpenAPI::fromJsonValue(m_return_connection_password_encrypted, json[QString("ReturnConnectionPasswordEncrypted")]);
    m_return_connection_password_encrypted_isSet = !json[QString("ReturnConnectionPasswordEncrypted")].isNull() && m_return_connection_password_encrypted_isValid;

    m_aws_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_aws_kms_key_id, json[QString("AwsKmsKeyId")]);
    m_aws_kms_key_id_isSet = !json[QString("AwsKmsKeyId")].isNull() && m_aws_kms_key_id_isValid;
}

QString OAIConnectionPasswordEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionPasswordEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_return_connection_password_encrypted_isSet) {
        obj.insert(QString("ReturnConnectionPasswordEncrypted"), ::OpenAPI::toJsonValue(m_return_connection_password_encrypted));
    }
    if (m_aws_kms_key_id_isSet) {
        obj.insert(QString("AwsKmsKeyId"), ::OpenAPI::toJsonValue(m_aws_kms_key_id));
    }
    return obj;
}

bool OAIConnectionPasswordEncryption::getReturnConnectionPasswordEncrypted() const {
    return m_return_connection_password_encrypted;
}
void OAIConnectionPasswordEncryption::setReturnConnectionPasswordEncrypted(const bool &return_connection_password_encrypted) {
    m_return_connection_password_encrypted = return_connection_password_encrypted;
    m_return_connection_password_encrypted_isSet = true;
}

bool OAIConnectionPasswordEncryption::is_return_connection_password_encrypted_Set() const{
    return m_return_connection_password_encrypted_isSet;
}

bool OAIConnectionPasswordEncryption::is_return_connection_password_encrypted_Valid() const{
    return m_return_connection_password_encrypted_isValid;
}

QString OAIConnectionPasswordEncryption::getAwsKmsKeyId() const {
    return m_aws_kms_key_id;
}
void OAIConnectionPasswordEncryption::setAwsKmsKeyId(const QString &aws_kms_key_id) {
    m_aws_kms_key_id = aws_kms_key_id;
    m_aws_kms_key_id_isSet = true;
}

bool OAIConnectionPasswordEncryption::is_aws_kms_key_id_Set() const{
    return m_aws_kms_key_id_isSet;
}

bool OAIConnectionPasswordEncryption::is_aws_kms_key_id_Valid() const{
    return m_aws_kms_key_id_isValid;
}

bool OAIConnectionPasswordEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_connection_password_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionPasswordEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_return_connection_password_encrypted_isValid && true;
}

} // namespace OpenAPI
