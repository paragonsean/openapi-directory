/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableInput::OAITableInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableInput::OAITableInput() {
    this->initializeModel();
}

OAITableInput::~OAITableInput() {}

void OAITableInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_last_access_time_isSet = false;
    m_last_access_time_isValid = false;

    m_last_analyzed_time_isSet = false;
    m_last_analyzed_time_isValid = false;

    m_retention_isSet = false;
    m_retention_isValid = false;

    m_storage_descriptor_isSet = false;
    m_storage_descriptor_isValid = false;

    m_partition_keys_isSet = false;
    m_partition_keys_isValid = false;

    m_view_original_text_isSet = false;
    m_view_original_text_isValid = false;

    m_view_expanded_text_isSet = false;
    m_view_expanded_text_isValid = false;

    m_table_type_isSet = false;
    m_table_type_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_target_table_isSet = false;
    m_target_table_isValid = false;
}

void OAITableInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_last_access_time_isValid = ::OpenAPI::fromJsonValue(m_last_access_time, json[QString("LastAccessTime")]);
    m_last_access_time_isSet = !json[QString("LastAccessTime")].isNull() && m_last_access_time_isValid;

    m_last_analyzed_time_isValid = ::OpenAPI::fromJsonValue(m_last_analyzed_time, json[QString("LastAnalyzedTime")]);
    m_last_analyzed_time_isSet = !json[QString("LastAnalyzedTime")].isNull() && m_last_analyzed_time_isValid;

    m_retention_isValid = ::OpenAPI::fromJsonValue(m_retention, json[QString("Retention")]);
    m_retention_isSet = !json[QString("Retention")].isNull() && m_retention_isValid;

    m_storage_descriptor_isValid = ::OpenAPI::fromJsonValue(m_storage_descriptor, json[QString("StorageDescriptor")]);
    m_storage_descriptor_isSet = !json[QString("StorageDescriptor")].isNull() && m_storage_descriptor_isValid;

    m_partition_keys_isValid = ::OpenAPI::fromJsonValue(m_partition_keys, json[QString("PartitionKeys")]);
    m_partition_keys_isSet = !json[QString("PartitionKeys")].isNull() && m_partition_keys_isValid;

    m_view_original_text_isValid = ::OpenAPI::fromJsonValue(m_view_original_text, json[QString("ViewOriginalText")]);
    m_view_original_text_isSet = !json[QString("ViewOriginalText")].isNull() && m_view_original_text_isValid;

    m_view_expanded_text_isValid = ::OpenAPI::fromJsonValue(m_view_expanded_text, json[QString("ViewExpandedText")]);
    m_view_expanded_text_isSet = !json[QString("ViewExpandedText")].isNull() && m_view_expanded_text_isValid;

    m_table_type_isValid = ::OpenAPI::fromJsonValue(m_table_type, json[QString("TableType")]);
    m_table_type_isSet = !json[QString("TableType")].isNull() && m_table_type_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_target_table_isValid = ::OpenAPI::fromJsonValue(m_target_table, json[QString("TargetTable")]);
    m_target_table_isSet = !json[QString("TargetTable")].isNull() && m_target_table_isValid;
}

QString OAITableInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_last_access_time_isSet) {
        obj.insert(QString("LastAccessTime"), ::OpenAPI::toJsonValue(m_last_access_time));
    }
    if (m_last_analyzed_time_isSet) {
        obj.insert(QString("LastAnalyzedTime"), ::OpenAPI::toJsonValue(m_last_analyzed_time));
    }
    if (m_retention_isSet) {
        obj.insert(QString("Retention"), ::OpenAPI::toJsonValue(m_retention));
    }
    if (m_storage_descriptor.isSet()) {
        obj.insert(QString("StorageDescriptor"), ::OpenAPI::toJsonValue(m_storage_descriptor));
    }
    if (m_partition_keys.isSet()) {
        obj.insert(QString("PartitionKeys"), ::OpenAPI::toJsonValue(m_partition_keys));
    }
    if (m_view_original_text_isSet) {
        obj.insert(QString("ViewOriginalText"), ::OpenAPI::toJsonValue(m_view_original_text));
    }
    if (m_view_expanded_text_isSet) {
        obj.insert(QString("ViewExpandedText"), ::OpenAPI::toJsonValue(m_view_expanded_text));
    }
    if (m_table_type_isSet) {
        obj.insert(QString("TableType"), ::OpenAPI::toJsonValue(m_table_type));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_target_table.isSet()) {
        obj.insert(QString("TargetTable"), ::OpenAPI::toJsonValue(m_target_table));
    }
    return obj;
}

QString OAITableInput::getName() const {
    return m_name;
}
void OAITableInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITableInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAITableInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITableInput::getDescription() const {
    return m_description;
}
void OAITableInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITableInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAITableInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITableInput::getOwner() const {
    return m_owner;
}
void OAITableInput::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAITableInput::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAITableInput::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAITableInput::getLastAccessTime() const {
    return m_last_access_time;
}
void OAITableInput::setLastAccessTime(const QDateTime &last_access_time) {
    m_last_access_time = last_access_time;
    m_last_access_time_isSet = true;
}

bool OAITableInput::is_last_access_time_Set() const{
    return m_last_access_time_isSet;
}

bool OAITableInput::is_last_access_time_Valid() const{
    return m_last_access_time_isValid;
}

QDateTime OAITableInput::getLastAnalyzedTime() const {
    return m_last_analyzed_time;
}
void OAITableInput::setLastAnalyzedTime(const QDateTime &last_analyzed_time) {
    m_last_analyzed_time = last_analyzed_time;
    m_last_analyzed_time_isSet = true;
}

bool OAITableInput::is_last_analyzed_time_Set() const{
    return m_last_analyzed_time_isSet;
}

bool OAITableInput::is_last_analyzed_time_Valid() const{
    return m_last_analyzed_time_isValid;
}

qint32 OAITableInput::getRetention() const {
    return m_retention;
}
void OAITableInput::setRetention(const qint32 &retention) {
    m_retention = retention;
    m_retention_isSet = true;
}

bool OAITableInput::is_retention_Set() const{
    return m_retention_isSet;
}

bool OAITableInput::is_retention_Valid() const{
    return m_retention_isValid;
}

OAITableInput_StorageDescriptor OAITableInput::getStorageDescriptor() const {
    return m_storage_descriptor;
}
void OAITableInput::setStorageDescriptor(const OAITableInput_StorageDescriptor &storage_descriptor) {
    m_storage_descriptor = storage_descriptor;
    m_storage_descriptor_isSet = true;
}

bool OAITableInput::is_storage_descriptor_Set() const{
    return m_storage_descriptor_isSet;
}

bool OAITableInput::is_storage_descriptor_Valid() const{
    return m_storage_descriptor_isValid;
}

QList OAITableInput::getPartitionKeys() const {
    return m_partition_keys;
}
void OAITableInput::setPartitionKeys(const QList &partition_keys) {
    m_partition_keys = partition_keys;
    m_partition_keys_isSet = true;
}

bool OAITableInput::is_partition_keys_Set() const{
    return m_partition_keys_isSet;
}

bool OAITableInput::is_partition_keys_Valid() const{
    return m_partition_keys_isValid;
}

QString OAITableInput::getViewOriginalText() const {
    return m_view_original_text;
}
void OAITableInput::setViewOriginalText(const QString &view_original_text) {
    m_view_original_text = view_original_text;
    m_view_original_text_isSet = true;
}

bool OAITableInput::is_view_original_text_Set() const{
    return m_view_original_text_isSet;
}

bool OAITableInput::is_view_original_text_Valid() const{
    return m_view_original_text_isValid;
}

QString OAITableInput::getViewExpandedText() const {
    return m_view_expanded_text;
}
void OAITableInput::setViewExpandedText(const QString &view_expanded_text) {
    m_view_expanded_text = view_expanded_text;
    m_view_expanded_text_isSet = true;
}

bool OAITableInput::is_view_expanded_text_Set() const{
    return m_view_expanded_text_isSet;
}

bool OAITableInput::is_view_expanded_text_Valid() const{
    return m_view_expanded_text_isValid;
}

QString OAITableInput::getTableType() const {
    return m_table_type;
}
void OAITableInput::setTableType(const QString &table_type) {
    m_table_type = table_type;
    m_table_type_isSet = true;
}

bool OAITableInput::is_table_type_Set() const{
    return m_table_type_isSet;
}

bool OAITableInput::is_table_type_Valid() const{
    return m_table_type_isValid;
}

QMap OAITableInput::getParameters() const {
    return m_parameters;
}
void OAITableInput::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITableInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITableInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAITableInput_TargetTable OAITableInput::getTargetTable() const {
    return m_target_table;
}
void OAITableInput::setTargetTable(const OAITableInput_TargetTable &target_table) {
    m_target_table = target_table;
    m_target_table_isSet = true;
}

bool OAITableInput::is_target_table_Set() const{
    return m_target_table_isSet;
}

bool OAITableInput::is_target_table_Valid() const{
    return m_target_table_isValid;
}

bool OAITableInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_analyzed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_original_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_expanded_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
