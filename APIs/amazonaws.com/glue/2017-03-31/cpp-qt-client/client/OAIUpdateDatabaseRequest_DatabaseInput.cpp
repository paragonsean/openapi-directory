/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDatabaseRequest_DatabaseInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDatabaseRequest_DatabaseInput::OAIUpdateDatabaseRequest_DatabaseInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDatabaseRequest_DatabaseInput::OAIUpdateDatabaseRequest_DatabaseInput() {
    this->initializeModel();
}

OAIUpdateDatabaseRequest_DatabaseInput::~OAIUpdateDatabaseRequest_DatabaseInput() {}

void OAIUpdateDatabaseRequest_DatabaseInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_create_table_default_permissions_isSet = false;
    m_create_table_default_permissions_isValid = false;

    m_target_database_isSet = false;
    m_target_database_isValid = false;

    m_federated_database_isSet = false;
    m_federated_database_isValid = false;
}

void OAIUpdateDatabaseRequest_DatabaseInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDatabaseRequest_DatabaseInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_create_table_default_permissions_isValid = ::OpenAPI::fromJsonValue(m_create_table_default_permissions, json[QString("CreateTableDefaultPermissions")]);
    m_create_table_default_permissions_isSet = !json[QString("CreateTableDefaultPermissions")].isNull() && m_create_table_default_permissions_isValid;

    m_target_database_isValid = ::OpenAPI::fromJsonValue(m_target_database, json[QString("TargetDatabase")]);
    m_target_database_isSet = !json[QString("TargetDatabase")].isNull() && m_target_database_isValid;

    m_federated_database_isValid = ::OpenAPI::fromJsonValue(m_federated_database, json[QString("FederatedDatabase")]);
    m_federated_database_isSet = !json[QString("FederatedDatabase")].isNull() && m_federated_database_isValid;
}

QString OAIUpdateDatabaseRequest_DatabaseInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDatabaseRequest_DatabaseInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_create_table_default_permissions.isSet()) {
        obj.insert(QString("CreateTableDefaultPermissions"), ::OpenAPI::toJsonValue(m_create_table_default_permissions));
    }
    if (m_target_database.isSet()) {
        obj.insert(QString("TargetDatabase"), ::OpenAPI::toJsonValue(m_target_database));
    }
    if (m_federated_database.isSet()) {
        obj.insert(QString("FederatedDatabase"), ::OpenAPI::toJsonValue(m_federated_database));
    }
    return obj;
}

QString OAIUpdateDatabaseRequest_DatabaseInput::getName() const {
    return m_name;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateDatabaseRequest_DatabaseInput::getDescription() const {
    return m_description;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateDatabaseRequest_DatabaseInput::getLocationUri() const {
    return m_location_uri;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

QMap OAIUpdateDatabaseRequest_DatabaseInput::getParameters() const {
    return m_parameters;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAIUpdateDatabaseRequest_DatabaseInput::getCreateTableDefaultPermissions() const {
    return m_create_table_default_permissions;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setCreateTableDefaultPermissions(const QList &create_table_default_permissions) {
    m_create_table_default_permissions = create_table_default_permissions;
    m_create_table_default_permissions_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_create_table_default_permissions_Set() const{
    return m_create_table_default_permissions_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_create_table_default_permissions_Valid() const{
    return m_create_table_default_permissions_isValid;
}

OAIDatabaseInput_TargetDatabase OAIUpdateDatabaseRequest_DatabaseInput::getTargetDatabase() const {
    return m_target_database;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setTargetDatabase(const OAIDatabaseInput_TargetDatabase &target_database) {
    m_target_database = target_database;
    m_target_database_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_target_database_Set() const{
    return m_target_database_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_target_database_Valid() const{
    return m_target_database_isValid;
}

OAIDatabaseInput_FederatedDatabase OAIUpdateDatabaseRequest_DatabaseInput::getFederatedDatabase() const {
    return m_federated_database;
}
void OAIUpdateDatabaseRequest_DatabaseInput::setFederatedDatabase(const OAIDatabaseInput_FederatedDatabase &federated_database) {
    m_federated_database = federated_database;
    m_federated_database_isSet = true;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_federated_database_Set() const{
    return m_federated_database_isSet;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::is_federated_database_Valid() const{
    return m_federated_database_isValid;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_table_default_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_database.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDatabaseRequest_DatabaseInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
