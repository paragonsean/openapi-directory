/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvaluateDataQualityMultiFrame.h
 *
 * Specifies your data quality evaluation criteria.
 */

#ifndef OAIEvaluateDataQualityMultiFrame_H
#define OAIEvaluateDataQualityMultiFrame_H

#include <QJsonObject>

#include "OAIEvaluateDataQuality_PublishingOptions.h"
#include "OAIEvaluateDataQuality_StopJobOnFailureOptions.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEvaluateDataQuality_PublishingOptions;
class OAIEvaluateDataQuality_StopJobOnFailureOptions;

class OAIEvaluateDataQualityMultiFrame : public OAIObject {
public:
    OAIEvaluateDataQualityMultiFrame();
    OAIEvaluateDataQualityMultiFrame(QString json);
    ~OAIEvaluateDataQualityMultiFrame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getInputs() const;
    void setInputs(const QList &inputs);
    bool is_inputs_Set() const;
    bool is_inputs_Valid() const;

    QMap getAdditionalDataSources() const;
    void setAdditionalDataSources(const QMap &additional_data_sources);
    bool is_additional_data_sources_Set() const;
    bool is_additional_data_sources_Valid() const;

    QString getRuleset() const;
    void setRuleset(const QString &ruleset);
    bool is_ruleset_Set() const;
    bool is_ruleset_Valid() const;

    OAIEvaluateDataQuality_PublishingOptions getPublishingOptions() const;
    void setPublishingOptions(const OAIEvaluateDataQuality_PublishingOptions &publishing_options);
    bool is_publishing_options_Set() const;
    bool is_publishing_options_Valid() const;

    QMap getAdditionalOptions() const;
    void setAdditionalOptions(const QMap &additional_options);
    bool is_additional_options_Set() const;
    bool is_additional_options_Valid() const;

    OAIEvaluateDataQuality_StopJobOnFailureOptions getStopJobOnFailureOptions() const;
    void setStopJobOnFailureOptions(const OAIEvaluateDataQuality_StopJobOnFailureOptions &stop_job_on_failure_options);
    bool is_stop_job_on_failure_options_Set() const;
    bool is_stop_job_on_failure_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_inputs;
    bool m_inputs_isSet;
    bool m_inputs_isValid;

    QMap m_additional_data_sources;
    bool m_additional_data_sources_isSet;
    bool m_additional_data_sources_isValid;

    QString m_ruleset;
    bool m_ruleset_isSet;
    bool m_ruleset_isValid;

    OAIEvaluateDataQuality_PublishingOptions m_publishing_options;
    bool m_publishing_options_isSet;
    bool m_publishing_options_isValid;

    QMap m_additional_options;
    bool m_additional_options_isSet;
    bool m_additional_options_isValid;

    OAIEvaluateDataQuality_StopJobOnFailureOptions m_stop_job_on_failure_options;
    bool m_stop_job_on_failure_options_isSet;
    bool m_stop_job_on_failure_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvaluateDataQualityMultiFrame)

#endif // OAIEvaluateDataQualityMultiFrame_H
