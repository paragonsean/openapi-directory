/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalogKafkaSource_StreamingOptions.h
 *
 * 
 */

#ifndef OAICatalogKafkaSource_StreamingOptions_H
#define OAICatalogKafkaSource_StreamingOptions_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICatalogKafkaSource_StreamingOptions : public OAIObject {
public:
    OAICatalogKafkaSource_StreamingOptions();
    OAICatalogKafkaSource_StreamingOptions(QString json);
    ~OAICatalogKafkaSource_StreamingOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBootstrapServers() const;
    void setBootstrapServers(const QString &bootstrap_servers);
    bool is_bootstrap_servers_Set() const;
    bool is_bootstrap_servers_Valid() const;

    QString getSecurityProtocol() const;
    void setSecurityProtocol(const QString &security_protocol);
    bool is_security_protocol_Set() const;
    bool is_security_protocol_Valid() const;

    QString getConnectionName() const;
    void setConnectionName(const QString &connection_name);
    bool is_connection_name_Set() const;
    bool is_connection_name_Valid() const;

    QString getTopicName() const;
    void setTopicName(const QString &topic_name);
    bool is_topic_name_Set() const;
    bool is_topic_name_Valid() const;

    QString getAssign() const;
    void setAssign(const QString &assign);
    bool is_assign_Set() const;
    bool is_assign_Valid() const;

    QString getSubscribePattern() const;
    void setSubscribePattern(const QString &subscribe_pattern);
    bool is_subscribe_pattern_Set() const;
    bool is_subscribe_pattern_Valid() const;

    QString getClassification() const;
    void setClassification(const QString &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QString getDelimiter() const;
    void setDelimiter(const QString &delimiter);
    bool is_delimiter_Set() const;
    bool is_delimiter_Valid() const;

    QString getStartingOffsets() const;
    void setStartingOffsets(const QString &starting_offsets);
    bool is_starting_offsets_Set() const;
    bool is_starting_offsets_Valid() const;

    QString getEndingOffsets() const;
    void setEndingOffsets(const QString &ending_offsets);
    bool is_ending_offsets_Set() const;
    bool is_ending_offsets_Valid() const;

    qint32 getPollTimeoutMs() const;
    void setPollTimeoutMs(const qint32 &poll_timeout_ms);
    bool is_poll_timeout_ms_Set() const;
    bool is_poll_timeout_ms_Valid() const;

    qint32 getNumRetries() const;
    void setNumRetries(const qint32 &num_retries);
    bool is_num_retries_Set() const;
    bool is_num_retries_Valid() const;

    qint32 getRetryIntervalMs() const;
    void setRetryIntervalMs(const qint32 &retry_interval_ms);
    bool is_retry_interval_ms_Set() const;
    bool is_retry_interval_ms_Valid() const;

    qint32 getMaxOffsetsPerTrigger() const;
    void setMaxOffsetsPerTrigger(const qint32 &max_offsets_per_trigger);
    bool is_max_offsets_per_trigger_Set() const;
    bool is_max_offsets_per_trigger_Valid() const;

    qint32 getMinPartitions() const;
    void setMinPartitions(const qint32 &min_partitions);
    bool is_min_partitions_Set() const;
    bool is_min_partitions_Valid() const;

    bool getIncludeHeaders() const;
    void setIncludeHeaders(const bool &include_headers);
    bool is_include_headers_Set() const;
    bool is_include_headers_Valid() const;

    QString getAddRecordTimestamp() const;
    void setAddRecordTimestamp(const QString &add_record_timestamp);
    bool is_add_record_timestamp_Set() const;
    bool is_add_record_timestamp_Valid() const;

    QString getEmitConsumerLagMetrics() const;
    void setEmitConsumerLagMetrics(const QString &emit_consumer_lag_metrics);
    bool is_emit_consumer_lag_metrics_Set() const;
    bool is_emit_consumer_lag_metrics_Valid() const;

    QDateTime getStartingTimestamp() const;
    void setStartingTimestamp(const QDateTime &starting_timestamp);
    bool is_starting_timestamp_Set() const;
    bool is_starting_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bootstrap_servers;
    bool m_bootstrap_servers_isSet;
    bool m_bootstrap_servers_isValid;

    QString m_security_protocol;
    bool m_security_protocol_isSet;
    bool m_security_protocol_isValid;

    QString m_connection_name;
    bool m_connection_name_isSet;
    bool m_connection_name_isValid;

    QString m_topic_name;
    bool m_topic_name_isSet;
    bool m_topic_name_isValid;

    QString m_assign;
    bool m_assign_isSet;
    bool m_assign_isValid;

    QString m_subscribe_pattern;
    bool m_subscribe_pattern_isSet;
    bool m_subscribe_pattern_isValid;

    QString m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QString m_delimiter;
    bool m_delimiter_isSet;
    bool m_delimiter_isValid;

    QString m_starting_offsets;
    bool m_starting_offsets_isSet;
    bool m_starting_offsets_isValid;

    QString m_ending_offsets;
    bool m_ending_offsets_isSet;
    bool m_ending_offsets_isValid;

    qint32 m_poll_timeout_ms;
    bool m_poll_timeout_ms_isSet;
    bool m_poll_timeout_ms_isValid;

    qint32 m_num_retries;
    bool m_num_retries_isSet;
    bool m_num_retries_isValid;

    qint32 m_retry_interval_ms;
    bool m_retry_interval_ms_isSet;
    bool m_retry_interval_ms_isValid;

    qint32 m_max_offsets_per_trigger;
    bool m_max_offsets_per_trigger_isSet;
    bool m_max_offsets_per_trigger_isValid;

    qint32 m_min_partitions;
    bool m_min_partitions_isSet;
    bool m_min_partitions_isValid;

    bool m_include_headers;
    bool m_include_headers_isSet;
    bool m_include_headers_isValid;

    QString m_add_record_timestamp;
    bool m_add_record_timestamp_isSet;
    bool m_add_record_timestamp_isValid;

    QString m_emit_consumer_lag_metrics;
    bool m_emit_consumer_lag_metrics_isSet;
    bool m_emit_consumer_lag_metrics_isValid;

    QDateTime m_starting_timestamp;
    bool m_starting_timestamp_isSet;
    bool m_starting_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalogKafkaSource_StreamingOptions)

#endif // OAICatalogKafkaSource_StreamingOptions_H
