/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMLTaskRunResponse_Properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMLTaskRunResponse_Properties::OAIGetMLTaskRunResponse_Properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMLTaskRunResponse_Properties::OAIGetMLTaskRunResponse_Properties() {
    this->initializeModel();
}

OAIGetMLTaskRunResponse_Properties::~OAIGetMLTaskRunResponse_Properties() {}

void OAIGetMLTaskRunResponse_Properties::initializeModel() {

    m_task_type_isSet = false;
    m_task_type_isValid = false;

    m_import_labels_task_run_properties_isSet = false;
    m_import_labels_task_run_properties_isValid = false;

    m_export_labels_task_run_properties_isSet = false;
    m_export_labels_task_run_properties_isValid = false;

    m_labeling_set_generation_task_run_properties_isSet = false;
    m_labeling_set_generation_task_run_properties_isValid = false;

    m_find_matches_task_run_properties_isSet = false;
    m_find_matches_task_run_properties_isValid = false;
}

void OAIGetMLTaskRunResponse_Properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMLTaskRunResponse_Properties::fromJsonObject(QJsonObject json) {

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("TaskType")]);
    m_task_type_isSet = !json[QString("TaskType")].isNull() && m_task_type_isValid;

    m_import_labels_task_run_properties_isValid = ::OpenAPI::fromJsonValue(m_import_labels_task_run_properties, json[QString("ImportLabelsTaskRunProperties")]);
    m_import_labels_task_run_properties_isSet = !json[QString("ImportLabelsTaskRunProperties")].isNull() && m_import_labels_task_run_properties_isValid;

    m_export_labels_task_run_properties_isValid = ::OpenAPI::fromJsonValue(m_export_labels_task_run_properties, json[QString("ExportLabelsTaskRunProperties")]);
    m_export_labels_task_run_properties_isSet = !json[QString("ExportLabelsTaskRunProperties")].isNull() && m_export_labels_task_run_properties_isValid;

    m_labeling_set_generation_task_run_properties_isValid = ::OpenAPI::fromJsonValue(m_labeling_set_generation_task_run_properties, json[QString("LabelingSetGenerationTaskRunProperties")]);
    m_labeling_set_generation_task_run_properties_isSet = !json[QString("LabelingSetGenerationTaskRunProperties")].isNull() && m_labeling_set_generation_task_run_properties_isValid;

    m_find_matches_task_run_properties_isValid = ::OpenAPI::fromJsonValue(m_find_matches_task_run_properties, json[QString("FindMatchesTaskRunProperties")]);
    m_find_matches_task_run_properties_isSet = !json[QString("FindMatchesTaskRunProperties")].isNull() && m_find_matches_task_run_properties_isValid;
}

QString OAIGetMLTaskRunResponse_Properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMLTaskRunResponse_Properties::asJsonObject() const {
    QJsonObject obj;
    if (m_task_type.isSet()) {
        obj.insert(QString("TaskType"), ::OpenAPI::toJsonValue(m_task_type));
    }
    if (m_import_labels_task_run_properties.isSet()) {
        obj.insert(QString("ImportLabelsTaskRunProperties"), ::OpenAPI::toJsonValue(m_import_labels_task_run_properties));
    }
    if (m_export_labels_task_run_properties.isSet()) {
        obj.insert(QString("ExportLabelsTaskRunProperties"), ::OpenAPI::toJsonValue(m_export_labels_task_run_properties));
    }
    if (m_labeling_set_generation_task_run_properties.isSet()) {
        obj.insert(QString("LabelingSetGenerationTaskRunProperties"), ::OpenAPI::toJsonValue(m_labeling_set_generation_task_run_properties));
    }
    if (m_find_matches_task_run_properties.isSet()) {
        obj.insert(QString("FindMatchesTaskRunProperties"), ::OpenAPI::toJsonValue(m_find_matches_task_run_properties));
    }
    return obj;
}

OAITaskType OAIGetMLTaskRunResponse_Properties::getTaskType() const {
    return m_task_type;
}
void OAIGetMLTaskRunResponse_Properties::setTaskType(const OAITaskType &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAIGetMLTaskRunResponse_Properties::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAIGetMLTaskRunResponse_Properties::is_task_type_Valid() const{
    return m_task_type_isValid;
}

OAITaskRunProperties_ImportLabelsTaskRunProperties OAIGetMLTaskRunResponse_Properties::getImportLabelsTaskRunProperties() const {
    return m_import_labels_task_run_properties;
}
void OAIGetMLTaskRunResponse_Properties::setImportLabelsTaskRunProperties(const OAITaskRunProperties_ImportLabelsTaskRunProperties &import_labels_task_run_properties) {
    m_import_labels_task_run_properties = import_labels_task_run_properties;
    m_import_labels_task_run_properties_isSet = true;
}

bool OAIGetMLTaskRunResponse_Properties::is_import_labels_task_run_properties_Set() const{
    return m_import_labels_task_run_properties_isSet;
}

bool OAIGetMLTaskRunResponse_Properties::is_import_labels_task_run_properties_Valid() const{
    return m_import_labels_task_run_properties_isValid;
}

OAITaskRunProperties_ExportLabelsTaskRunProperties OAIGetMLTaskRunResponse_Properties::getExportLabelsTaskRunProperties() const {
    return m_export_labels_task_run_properties;
}
void OAIGetMLTaskRunResponse_Properties::setExportLabelsTaskRunProperties(const OAITaskRunProperties_ExportLabelsTaskRunProperties &export_labels_task_run_properties) {
    m_export_labels_task_run_properties = export_labels_task_run_properties;
    m_export_labels_task_run_properties_isSet = true;
}

bool OAIGetMLTaskRunResponse_Properties::is_export_labels_task_run_properties_Set() const{
    return m_export_labels_task_run_properties_isSet;
}

bool OAIGetMLTaskRunResponse_Properties::is_export_labels_task_run_properties_Valid() const{
    return m_export_labels_task_run_properties_isValid;
}

OAITaskRunProperties_LabelingSetGenerationTaskRunProperties OAIGetMLTaskRunResponse_Properties::getLabelingSetGenerationTaskRunProperties() const {
    return m_labeling_set_generation_task_run_properties;
}
void OAIGetMLTaskRunResponse_Properties::setLabelingSetGenerationTaskRunProperties(const OAITaskRunProperties_LabelingSetGenerationTaskRunProperties &labeling_set_generation_task_run_properties) {
    m_labeling_set_generation_task_run_properties = labeling_set_generation_task_run_properties;
    m_labeling_set_generation_task_run_properties_isSet = true;
}

bool OAIGetMLTaskRunResponse_Properties::is_labeling_set_generation_task_run_properties_Set() const{
    return m_labeling_set_generation_task_run_properties_isSet;
}

bool OAIGetMLTaskRunResponse_Properties::is_labeling_set_generation_task_run_properties_Valid() const{
    return m_labeling_set_generation_task_run_properties_isValid;
}

OAITaskRunProperties_FindMatchesTaskRunProperties OAIGetMLTaskRunResponse_Properties::getFindMatchesTaskRunProperties() const {
    return m_find_matches_task_run_properties;
}
void OAIGetMLTaskRunResponse_Properties::setFindMatchesTaskRunProperties(const OAITaskRunProperties_FindMatchesTaskRunProperties &find_matches_task_run_properties) {
    m_find_matches_task_run_properties = find_matches_task_run_properties;
    m_find_matches_task_run_properties_isSet = true;
}

bool OAIGetMLTaskRunResponse_Properties::is_find_matches_task_run_properties_Set() const{
    return m_find_matches_task_run_properties_isSet;
}

bool OAIGetMLTaskRunResponse_Properties::is_find_matches_task_run_properties_Valid() const{
    return m_find_matches_task_run_properties_isValid;
}

bool OAIGetMLTaskRunResponse_Properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_labels_task_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_labels_task_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_set_generation_task_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_find_matches_task_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMLTaskRunResponse_Properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
