/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectSchemaChangePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectSchemaChangePolicy::OAIDirectSchemaChangePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectSchemaChangePolicy::OAIDirectSchemaChangePolicy() {
    this->initializeModel();
}

OAIDirectSchemaChangePolicy::~OAIDirectSchemaChangePolicy() {}

void OAIDirectSchemaChangePolicy::initializeModel() {

    m_enable_update_catalog_isSet = false;
    m_enable_update_catalog_isValid = false;

    m_update_behavior_isSet = false;
    m_update_behavior_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;
}

void OAIDirectSchemaChangePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectSchemaChangePolicy::fromJsonObject(QJsonObject json) {

    m_enable_update_catalog_isValid = ::OpenAPI::fromJsonValue(m_enable_update_catalog, json[QString("EnableUpdateCatalog")]);
    m_enable_update_catalog_isSet = !json[QString("EnableUpdateCatalog")].isNull() && m_enable_update_catalog_isValid;

    m_update_behavior_isValid = ::OpenAPI::fromJsonValue(m_update_behavior, json[QString("UpdateBehavior")]);
    m_update_behavior_isSet = !json[QString("UpdateBehavior")].isNull() && m_update_behavior_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;
}

QString OAIDirectSchemaChangePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectSchemaChangePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_update_catalog_isSet) {
        obj.insert(QString("EnableUpdateCatalog"), ::OpenAPI::toJsonValue(m_enable_update_catalog));
    }
    if (m_update_behavior.isSet()) {
        obj.insert(QString("UpdateBehavior"), ::OpenAPI::toJsonValue(m_update_behavior));
    }
    if (m_table_isSet) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    return obj;
}

bool OAIDirectSchemaChangePolicy::getEnableUpdateCatalog() const {
    return m_enable_update_catalog;
}
void OAIDirectSchemaChangePolicy::setEnableUpdateCatalog(const bool &enable_update_catalog) {
    m_enable_update_catalog = enable_update_catalog;
    m_enable_update_catalog_isSet = true;
}

bool OAIDirectSchemaChangePolicy::is_enable_update_catalog_Set() const{
    return m_enable_update_catalog_isSet;
}

bool OAIDirectSchemaChangePolicy::is_enable_update_catalog_Valid() const{
    return m_enable_update_catalog_isValid;
}

OAIUpdateCatalogBehavior OAIDirectSchemaChangePolicy::getUpdateBehavior() const {
    return m_update_behavior;
}
void OAIDirectSchemaChangePolicy::setUpdateBehavior(const OAIUpdateCatalogBehavior &update_behavior) {
    m_update_behavior = update_behavior;
    m_update_behavior_isSet = true;
}

bool OAIDirectSchemaChangePolicy::is_update_behavior_Set() const{
    return m_update_behavior_isSet;
}

bool OAIDirectSchemaChangePolicy::is_update_behavior_Valid() const{
    return m_update_behavior_isValid;
}

QString OAIDirectSchemaChangePolicy::getTable() const {
    return m_table;
}
void OAIDirectSchemaChangePolicy::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIDirectSchemaChangePolicy::is_table_Set() const{
    return m_table_isSet;
}

bool OAIDirectSchemaChangePolicy::is_table_Valid() const{
    return m_table_isValid;
}

QString OAIDirectSchemaChangePolicy::getDatabase() const {
    return m_database;
}
void OAIDirectSchemaChangePolicy::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDirectSchemaChangePolicy::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDirectSchemaChangePolicy::is_database_Valid() const{
    return m_database_isValid;
}

bool OAIDirectSchemaChangePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_update_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectSchemaChangePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
