/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamoDBTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamoDBTarget::OAIDynamoDBTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamoDBTarget::OAIDynamoDBTarget() {
    this->initializeModel();
}

OAIDynamoDBTarget::~OAIDynamoDBTarget() {}

void OAIDynamoDBTarget::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_scan_all_isSet = false;
    m_scan_all_isValid = false;

    m_scan_rate_isSet = false;
    m_scan_rate_isValid = false;
}

void OAIDynamoDBTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamoDBTarget::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_scan_all_isValid = ::OpenAPI::fromJsonValue(m_scan_all, json[QString("scanAll")]);
    m_scan_all_isSet = !json[QString("scanAll")].isNull() && m_scan_all_isValid;

    m_scan_rate_isValid = ::OpenAPI::fromJsonValue(m_scan_rate, json[QString("scanRate")]);
    m_scan_rate_isSet = !json[QString("scanRate")].isNull() && m_scan_rate_isValid;
}

QString OAIDynamoDBTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamoDBTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_scan_all_isSet) {
        obj.insert(QString("scanAll"), ::OpenAPI::toJsonValue(m_scan_all));
    }
    if (m_scan_rate_isSet) {
        obj.insert(QString("scanRate"), ::OpenAPI::toJsonValue(m_scan_rate));
    }
    return obj;
}

QString OAIDynamoDBTarget::getPath() const {
    return m_path;
}
void OAIDynamoDBTarget::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIDynamoDBTarget::is_path_Set() const{
    return m_path_isSet;
}

bool OAIDynamoDBTarget::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIDynamoDBTarget::getScanAll() const {
    return m_scan_all;
}
void OAIDynamoDBTarget::setScanAll(const bool &scan_all) {
    m_scan_all = scan_all;
    m_scan_all_isSet = true;
}

bool OAIDynamoDBTarget::is_scan_all_Set() const{
    return m_scan_all_isSet;
}

bool OAIDynamoDBTarget::is_scan_all_Valid() const{
    return m_scan_all_isValid;
}

double OAIDynamoDBTarget::getScanRate() const {
    return m_scan_rate;
}
void OAIDynamoDBTarget::setScanRate(const double &scan_rate) {
    m_scan_rate = scan_rate;
    m_scan_rate_isSet = true;
}

bool OAIDynamoDBTarget::is_scan_rate_Set() const{
    return m_scan_rate_isSet;
}

bool OAIDynamoDBTarget::is_scan_rate_Valid() const{
    return m_scan_rate_isValid;
}

bool OAIDynamoDBTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamoDBTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
