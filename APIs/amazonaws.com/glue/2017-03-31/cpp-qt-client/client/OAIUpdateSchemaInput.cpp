/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchemaInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchemaInput::OAIUpdateSchemaInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchemaInput::OAIUpdateSchemaInput() {
    this->initializeModel();
}

OAIUpdateSchemaInput::~OAIUpdateSchemaInput() {}

void OAIUpdateSchemaInput::initializeModel() {

    m_schema_id_isSet = false;
    m_schema_id_isValid = false;

    m_schema_version_number_isSet = false;
    m_schema_version_number_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIUpdateSchemaInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchemaInput::fromJsonObject(QJsonObject json) {

    m_schema_id_isValid = ::OpenAPI::fromJsonValue(m_schema_id, json[QString("SchemaId")]);
    m_schema_id_isSet = !json[QString("SchemaId")].isNull() && m_schema_id_isValid;

    m_schema_version_number_isValid = ::OpenAPI::fromJsonValue(m_schema_version_number, json[QString("SchemaVersionNumber")]);
    m_schema_version_number_isSet = !json[QString("SchemaVersionNumber")].isNull() && m_schema_version_number_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("Compatibility")]);
    m_compatibility_isSet = !json[QString("Compatibility")].isNull() && m_compatibility_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIUpdateSchemaInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchemaInput::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_id.isSet()) {
        obj.insert(QString("SchemaId"), ::OpenAPI::toJsonValue(m_schema_id));
    }
    if (m_schema_version_number.isSet()) {
        obj.insert(QString("SchemaVersionNumber"), ::OpenAPI::toJsonValue(m_schema_version_number));
    }
    if (m_compatibility.isSet()) {
        obj.insert(QString("Compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

OAIGetSchemaByDefinitionInput_SchemaId OAIUpdateSchemaInput::getSchemaId() const {
    return m_schema_id;
}
void OAIUpdateSchemaInput::setSchemaId(const OAIGetSchemaByDefinitionInput_SchemaId &schema_id) {
    m_schema_id = schema_id;
    m_schema_id_isSet = true;
}

bool OAIUpdateSchemaInput::is_schema_id_Set() const{
    return m_schema_id_isSet;
}

bool OAIUpdateSchemaInput::is_schema_id_Valid() const{
    return m_schema_id_isValid;
}

OAIUpdateSchemaInput_SchemaVersionNumber OAIUpdateSchemaInput::getSchemaVersionNumber() const {
    return m_schema_version_number;
}
void OAIUpdateSchemaInput::setSchemaVersionNumber(const OAIUpdateSchemaInput_SchemaVersionNumber &schema_version_number) {
    m_schema_version_number = schema_version_number;
    m_schema_version_number_isSet = true;
}

bool OAIUpdateSchemaInput::is_schema_version_number_Set() const{
    return m_schema_version_number_isSet;
}

bool OAIUpdateSchemaInput::is_schema_version_number_Valid() const{
    return m_schema_version_number_isValid;
}

OAICompatibility OAIUpdateSchemaInput::getCompatibility() const {
    return m_compatibility;
}
void OAIUpdateSchemaInput::setCompatibility(const OAICompatibility &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAIUpdateSchemaInput::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAIUpdateSchemaInput::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

QString OAIUpdateSchemaInput::getDescription() const {
    return m_description;
}
void OAIUpdateSchemaInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateSchemaInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateSchemaInput::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateSchemaInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchemaInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_id_isValid && true;
}

} // namespace OpenAPI
