/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlerMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlerMetrics::OAICrawlerMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlerMetrics::OAICrawlerMetrics() {
    this->initializeModel();
}

OAICrawlerMetrics::~OAICrawlerMetrics() {}

void OAICrawlerMetrics::initializeModel() {

    m_crawler_name_isSet = false;
    m_crawler_name_isValid = false;

    m_time_left_seconds_isSet = false;
    m_time_left_seconds_isValid = false;

    m_still_estimating_isSet = false;
    m_still_estimating_isValid = false;

    m_last_runtime_seconds_isSet = false;
    m_last_runtime_seconds_isValid = false;

    m_median_runtime_seconds_isSet = false;
    m_median_runtime_seconds_isValid = false;

    m_tables_created_isSet = false;
    m_tables_created_isValid = false;

    m_tables_updated_isSet = false;
    m_tables_updated_isValid = false;

    m_tables_deleted_isSet = false;
    m_tables_deleted_isValid = false;
}

void OAICrawlerMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlerMetrics::fromJsonObject(QJsonObject json) {

    m_crawler_name_isValid = ::OpenAPI::fromJsonValue(m_crawler_name, json[QString("CrawlerName")]);
    m_crawler_name_isSet = !json[QString("CrawlerName")].isNull() && m_crawler_name_isValid;

    m_time_left_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_left_seconds, json[QString("TimeLeftSeconds")]);
    m_time_left_seconds_isSet = !json[QString("TimeLeftSeconds")].isNull() && m_time_left_seconds_isValid;

    m_still_estimating_isValid = ::OpenAPI::fromJsonValue(m_still_estimating, json[QString("StillEstimating")]);
    m_still_estimating_isSet = !json[QString("StillEstimating")].isNull() && m_still_estimating_isValid;

    m_last_runtime_seconds_isValid = ::OpenAPI::fromJsonValue(m_last_runtime_seconds, json[QString("LastRuntimeSeconds")]);
    m_last_runtime_seconds_isSet = !json[QString("LastRuntimeSeconds")].isNull() && m_last_runtime_seconds_isValid;

    m_median_runtime_seconds_isValid = ::OpenAPI::fromJsonValue(m_median_runtime_seconds, json[QString("MedianRuntimeSeconds")]);
    m_median_runtime_seconds_isSet = !json[QString("MedianRuntimeSeconds")].isNull() && m_median_runtime_seconds_isValid;

    m_tables_created_isValid = ::OpenAPI::fromJsonValue(m_tables_created, json[QString("TablesCreated")]);
    m_tables_created_isSet = !json[QString("TablesCreated")].isNull() && m_tables_created_isValid;

    m_tables_updated_isValid = ::OpenAPI::fromJsonValue(m_tables_updated, json[QString("TablesUpdated")]);
    m_tables_updated_isSet = !json[QString("TablesUpdated")].isNull() && m_tables_updated_isValid;

    m_tables_deleted_isValid = ::OpenAPI::fromJsonValue(m_tables_deleted, json[QString("TablesDeleted")]);
    m_tables_deleted_isSet = !json[QString("TablesDeleted")].isNull() && m_tables_deleted_isValid;
}

QString OAICrawlerMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlerMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_crawler_name_isSet) {
        obj.insert(QString("CrawlerName"), ::OpenAPI::toJsonValue(m_crawler_name));
    }
    if (m_time_left_seconds_isSet) {
        obj.insert(QString("TimeLeftSeconds"), ::OpenAPI::toJsonValue(m_time_left_seconds));
    }
    if (m_still_estimating_isSet) {
        obj.insert(QString("StillEstimating"), ::OpenAPI::toJsonValue(m_still_estimating));
    }
    if (m_last_runtime_seconds_isSet) {
        obj.insert(QString("LastRuntimeSeconds"), ::OpenAPI::toJsonValue(m_last_runtime_seconds));
    }
    if (m_median_runtime_seconds_isSet) {
        obj.insert(QString("MedianRuntimeSeconds"), ::OpenAPI::toJsonValue(m_median_runtime_seconds));
    }
    if (m_tables_created_isSet) {
        obj.insert(QString("TablesCreated"), ::OpenAPI::toJsonValue(m_tables_created));
    }
    if (m_tables_updated_isSet) {
        obj.insert(QString("TablesUpdated"), ::OpenAPI::toJsonValue(m_tables_updated));
    }
    if (m_tables_deleted_isSet) {
        obj.insert(QString("TablesDeleted"), ::OpenAPI::toJsonValue(m_tables_deleted));
    }
    return obj;
}

QString OAICrawlerMetrics::getCrawlerName() const {
    return m_crawler_name;
}
void OAICrawlerMetrics::setCrawlerName(const QString &crawler_name) {
    m_crawler_name = crawler_name;
    m_crawler_name_isSet = true;
}

bool OAICrawlerMetrics::is_crawler_name_Set() const{
    return m_crawler_name_isSet;
}

bool OAICrawlerMetrics::is_crawler_name_Valid() const{
    return m_crawler_name_isValid;
}

double OAICrawlerMetrics::getTimeLeftSeconds() const {
    return m_time_left_seconds;
}
void OAICrawlerMetrics::setTimeLeftSeconds(const double &time_left_seconds) {
    m_time_left_seconds = time_left_seconds;
    m_time_left_seconds_isSet = true;
}

bool OAICrawlerMetrics::is_time_left_seconds_Set() const{
    return m_time_left_seconds_isSet;
}

bool OAICrawlerMetrics::is_time_left_seconds_Valid() const{
    return m_time_left_seconds_isValid;
}

bool OAICrawlerMetrics::getStillEstimating() const {
    return m_still_estimating;
}
void OAICrawlerMetrics::setStillEstimating(const bool &still_estimating) {
    m_still_estimating = still_estimating;
    m_still_estimating_isSet = true;
}

bool OAICrawlerMetrics::is_still_estimating_Set() const{
    return m_still_estimating_isSet;
}

bool OAICrawlerMetrics::is_still_estimating_Valid() const{
    return m_still_estimating_isValid;
}

double OAICrawlerMetrics::getLastRuntimeSeconds() const {
    return m_last_runtime_seconds;
}
void OAICrawlerMetrics::setLastRuntimeSeconds(const double &last_runtime_seconds) {
    m_last_runtime_seconds = last_runtime_seconds;
    m_last_runtime_seconds_isSet = true;
}

bool OAICrawlerMetrics::is_last_runtime_seconds_Set() const{
    return m_last_runtime_seconds_isSet;
}

bool OAICrawlerMetrics::is_last_runtime_seconds_Valid() const{
    return m_last_runtime_seconds_isValid;
}

double OAICrawlerMetrics::getMedianRuntimeSeconds() const {
    return m_median_runtime_seconds;
}
void OAICrawlerMetrics::setMedianRuntimeSeconds(const double &median_runtime_seconds) {
    m_median_runtime_seconds = median_runtime_seconds;
    m_median_runtime_seconds_isSet = true;
}

bool OAICrawlerMetrics::is_median_runtime_seconds_Set() const{
    return m_median_runtime_seconds_isSet;
}

bool OAICrawlerMetrics::is_median_runtime_seconds_Valid() const{
    return m_median_runtime_seconds_isValid;
}

qint32 OAICrawlerMetrics::getTablesCreated() const {
    return m_tables_created;
}
void OAICrawlerMetrics::setTablesCreated(const qint32 &tables_created) {
    m_tables_created = tables_created;
    m_tables_created_isSet = true;
}

bool OAICrawlerMetrics::is_tables_created_Set() const{
    return m_tables_created_isSet;
}

bool OAICrawlerMetrics::is_tables_created_Valid() const{
    return m_tables_created_isValid;
}

qint32 OAICrawlerMetrics::getTablesUpdated() const {
    return m_tables_updated;
}
void OAICrawlerMetrics::setTablesUpdated(const qint32 &tables_updated) {
    m_tables_updated = tables_updated;
    m_tables_updated_isSet = true;
}

bool OAICrawlerMetrics::is_tables_updated_Set() const{
    return m_tables_updated_isSet;
}

bool OAICrawlerMetrics::is_tables_updated_Valid() const{
    return m_tables_updated_isValid;
}

qint32 OAICrawlerMetrics::getTablesDeleted() const {
    return m_tables_deleted;
}
void OAICrawlerMetrics::setTablesDeleted(const qint32 &tables_deleted) {
    m_tables_deleted = tables_deleted;
    m_tables_deleted_isSet = true;
}

bool OAICrawlerMetrics::is_tables_deleted_Set() const{
    return m_tables_deleted_isSet;
}

bool OAICrawlerMetrics::is_tables_deleted_Valid() const{
    return m_tables_deleted_isValid;
}

bool OAICrawlerMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crawler_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_left_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_still_estimating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_runtime_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_runtime_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlerMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
