/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlueprint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlueprint::OAIBlueprint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlueprint::OAIBlueprint() {
    this->initializeModel();
}

OAIBlueprint::~OAIBlueprint() {}

void OAIBlueprint::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_parameter_spec_isSet = false;
    m_parameter_spec_isValid = false;

    m_blueprint_location_isSet = false;
    m_blueprint_location_isValid = false;

    m_blueprint_service_location_isSet = false;
    m_blueprint_service_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_last_active_definition_isSet = false;
    m_last_active_definition_isValid = false;
}

void OAIBlueprint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlueprint::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("CreatedOn")]);
    m_created_on_isSet = !json[QString("CreatedOn")].isNull() && m_created_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_parameter_spec_isValid = ::OpenAPI::fromJsonValue(m_parameter_spec, json[QString("ParameterSpec")]);
    m_parameter_spec_isSet = !json[QString("ParameterSpec")].isNull() && m_parameter_spec_isValid;

    m_blueprint_location_isValid = ::OpenAPI::fromJsonValue(m_blueprint_location, json[QString("BlueprintLocation")]);
    m_blueprint_location_isSet = !json[QString("BlueprintLocation")].isNull() && m_blueprint_location_isValid;

    m_blueprint_service_location_isValid = ::OpenAPI::fromJsonValue(m_blueprint_service_location, json[QString("BlueprintServiceLocation")]);
    m_blueprint_service_location_isSet = !json[QString("BlueprintServiceLocation")].isNull() && m_blueprint_service_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_last_active_definition_isValid = ::OpenAPI::fromJsonValue(m_last_active_definition, json[QString("LastActiveDefinition")]);
    m_last_active_definition_isSet = !json[QString("LastActiveDefinition")].isNull() && m_last_active_definition_isValid;
}

QString OAIBlueprint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlueprint::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("CreatedOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_parameter_spec_isSet) {
        obj.insert(QString("ParameterSpec"), ::OpenAPI::toJsonValue(m_parameter_spec));
    }
    if (m_blueprint_location_isSet) {
        obj.insert(QString("BlueprintLocation"), ::OpenAPI::toJsonValue(m_blueprint_location));
    }
    if (m_blueprint_service_location_isSet) {
        obj.insert(QString("BlueprintServiceLocation"), ::OpenAPI::toJsonValue(m_blueprint_service_location));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_last_active_definition.isSet()) {
        obj.insert(QString("LastActiveDefinition"), ::OpenAPI::toJsonValue(m_last_active_definition));
    }
    return obj;
}

QString OAIBlueprint::getName() const {
    return m_name;
}
void OAIBlueprint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBlueprint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBlueprint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBlueprint::getDescription() const {
    return m_description;
}
void OAIBlueprint::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBlueprint::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBlueprint::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIBlueprint::getCreatedOn() const {
    return m_created_on;
}
void OAIBlueprint::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIBlueprint::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIBlueprint::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QDateTime OAIBlueprint::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIBlueprint::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIBlueprint::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIBlueprint::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QString OAIBlueprint::getParameterSpec() const {
    return m_parameter_spec;
}
void OAIBlueprint::setParameterSpec(const QString &parameter_spec) {
    m_parameter_spec = parameter_spec;
    m_parameter_spec_isSet = true;
}

bool OAIBlueprint::is_parameter_spec_Set() const{
    return m_parameter_spec_isSet;
}

bool OAIBlueprint::is_parameter_spec_Valid() const{
    return m_parameter_spec_isValid;
}

QString OAIBlueprint::getBlueprintLocation() const {
    return m_blueprint_location;
}
void OAIBlueprint::setBlueprintLocation(const QString &blueprint_location) {
    m_blueprint_location = blueprint_location;
    m_blueprint_location_isSet = true;
}

bool OAIBlueprint::is_blueprint_location_Set() const{
    return m_blueprint_location_isSet;
}

bool OAIBlueprint::is_blueprint_location_Valid() const{
    return m_blueprint_location_isValid;
}

QString OAIBlueprint::getBlueprintServiceLocation() const {
    return m_blueprint_service_location;
}
void OAIBlueprint::setBlueprintServiceLocation(const QString &blueprint_service_location) {
    m_blueprint_service_location = blueprint_service_location;
    m_blueprint_service_location_isSet = true;
}

bool OAIBlueprint::is_blueprint_service_location_Set() const{
    return m_blueprint_service_location_isSet;
}

bool OAIBlueprint::is_blueprint_service_location_Valid() const{
    return m_blueprint_service_location_isValid;
}

OAIBlueprintStatus OAIBlueprint::getStatus() const {
    return m_status;
}
void OAIBlueprint::setStatus(const OAIBlueprintStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBlueprint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBlueprint::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBlueprint::getErrorMessage() const {
    return m_error_message;
}
void OAIBlueprint::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBlueprint::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBlueprint::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIBlueprint_LastActiveDefinition OAIBlueprint::getLastActiveDefinition() const {
    return m_last_active_definition;
}
void OAIBlueprint::setLastActiveDefinition(const OAIBlueprint_LastActiveDefinition &last_active_definition) {
    m_last_active_definition = last_active_definition;
    m_last_active_definition_isSet = true;
}

bool OAIBlueprint::is_last_active_definition_Set() const{
    return m_last_active_definition_isSet;
}

bool OAIBlueprint::is_last_active_definition_Valid() const{
    return m_last_active_definition_isValid;
}

bool OAIBlueprint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_spec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blueprint_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blueprint_service_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_active_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlueprint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
