/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJDBCDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJDBCDataType::OAIJDBCDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJDBCDataType::OAIJDBCDataType() {
    this->initializeModel();
}

OAIJDBCDataType::~OAIJDBCDataType() {}

void OAIJDBCDataType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJDBCDataType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJDBCDataType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ARRAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::ARRAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIGINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::BIGINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BINARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::BINARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::BIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLOB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::BLOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOOLEAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::CHAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLOB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::CLOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATALINK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::DATALINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DECIMAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::DECIMAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTINCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::DISTINCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOUBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::DOUBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLOAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTEGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAVA_OBJECT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::JAVA_OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LONGNVARCHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::LONGNVARCHAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LONGVARBINARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::LONGVARBINARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LONGVARCHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::LONGVARCHAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NCHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::NCHAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NCLOB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::NCLOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::r_NULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NUMERIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::NUMERIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NVARCHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::NVARCHAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::REAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::REF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REF_CURSOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::REF_CURSOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROWID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::ROWID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SMALLINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::SMALLINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQLXML", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::SQLXML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STRUCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::STRUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::TIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_WITH_TIMEZONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::TIME_WITH_TIMEZONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMESTAMP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::TIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMESTAMP_WITH_TIMEZONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::TIMESTAMP_WITH_TIMEZONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TINYINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::TINYINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VARBINARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::VARBINARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VARCHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJDBCDataType::VARCHAR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJDBCDataType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJDBCDataType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJDBCDataType::ARRAY:
            val = "ARRAY";
            break;
        case eOAIJDBCDataType::BIGINT:
            val = "BIGINT";
            break;
        case eOAIJDBCDataType::BINARY:
            val = "BINARY";
            break;
        case eOAIJDBCDataType::BIT:
            val = "BIT";
            break;
        case eOAIJDBCDataType::BLOB:
            val = "BLOB";
            break;
        case eOAIJDBCDataType::BOOLEAN:
            val = "BOOLEAN";
            break;
        case eOAIJDBCDataType::CHAR:
            val = "CHAR";
            break;
        case eOAIJDBCDataType::CLOB:
            val = "CLOB";
            break;
        case eOAIJDBCDataType::DATALINK:
            val = "DATALINK";
            break;
        case eOAIJDBCDataType::DATE:
            val = "DATE";
            break;
        case eOAIJDBCDataType::DECIMAL:
            val = "DECIMAL";
            break;
        case eOAIJDBCDataType::DISTINCT:
            val = "DISTINCT";
            break;
        case eOAIJDBCDataType::DOUBLE:
            val = "DOUBLE";
            break;
        case eOAIJDBCDataType::FLOAT:
            val = "FLOAT";
            break;
        case eOAIJDBCDataType::INTEGER:
            val = "INTEGER";
            break;
        case eOAIJDBCDataType::JAVA_OBJECT:
            val = "JAVA_OBJECT";
            break;
        case eOAIJDBCDataType::LONGNVARCHAR:
            val = "LONGNVARCHAR";
            break;
        case eOAIJDBCDataType::LONGVARBINARY:
            val = "LONGVARBINARY";
            break;
        case eOAIJDBCDataType::LONGVARCHAR:
            val = "LONGVARCHAR";
            break;
        case eOAIJDBCDataType::NCHAR:
            val = "NCHAR";
            break;
        case eOAIJDBCDataType::NCLOB:
            val = "NCLOB";
            break;
        case eOAIJDBCDataType::r_NULL:
            val = "NULL";
            break;
        case eOAIJDBCDataType::NUMERIC:
            val = "NUMERIC";
            break;
        case eOAIJDBCDataType::NVARCHAR:
            val = "NVARCHAR";
            break;
        case eOAIJDBCDataType::OTHER:
            val = "OTHER";
            break;
        case eOAIJDBCDataType::REAL:
            val = "REAL";
            break;
        case eOAIJDBCDataType::REF:
            val = "REF";
            break;
        case eOAIJDBCDataType::REF_CURSOR:
            val = "REF_CURSOR";
            break;
        case eOAIJDBCDataType::ROWID:
            val = "ROWID";
            break;
        case eOAIJDBCDataType::SMALLINT:
            val = "SMALLINT";
            break;
        case eOAIJDBCDataType::SQLXML:
            val = "SQLXML";
            break;
        case eOAIJDBCDataType::STRUCT:
            val = "STRUCT";
            break;
        case eOAIJDBCDataType::TIME:
            val = "TIME";
            break;
        case eOAIJDBCDataType::TIME_WITH_TIMEZONE:
            val = "TIME_WITH_TIMEZONE";
            break;
        case eOAIJDBCDataType::TIMESTAMP:
            val = "TIMESTAMP";
            break;
        case eOAIJDBCDataType::TIMESTAMP_WITH_TIMEZONE:
            val = "TIMESTAMP_WITH_TIMEZONE";
            break;
        case eOAIJDBCDataType::TINYINT:
            val = "TINYINT";
            break;
        case eOAIJDBCDataType::VARBINARY:
            val = "VARBINARY";
            break;
        case eOAIJDBCDataType::VARCHAR:
            val = "VARCHAR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJDBCDataType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJDBCDataType::eOAIJDBCDataType OAIJDBCDataType::getValue() const {
    return m_value;
}

void OAIJDBCDataType::setValue(const OAIJDBCDataType::eOAIJDBCDataType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJDBCDataType::isSet() const {
    
    return m_value_isSet;
}

bool OAIJDBCDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
