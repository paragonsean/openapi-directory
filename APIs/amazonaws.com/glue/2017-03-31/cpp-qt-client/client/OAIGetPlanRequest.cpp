/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPlanRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPlanRequest::OAIGetPlanRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPlanRequest::OAIGetPlanRequest() {
    this->initializeModel();
}

OAIGetPlanRequest::~OAIGetPlanRequest() {}

void OAIGetPlanRequest::initializeModel() {

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_additional_plan_options_map_isSet = false;
    m_additional_plan_options_map_isValid = false;
}

void OAIGetPlanRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPlanRequest::fromJsonObject(QJsonObject json) {

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("Mapping")]);
    m_mapping_isSet = !json[QString("Mapping")].isNull() && m_mapping_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("Sinks")]);
    m_sinks_isSet = !json[QString("Sinks")].isNull() && m_sinks_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_additional_plan_options_map_isValid = ::OpenAPI::fromJsonValue(m_additional_plan_options_map, json[QString("AdditionalPlanOptionsMap")]);
    m_additional_plan_options_map_isSet = !json[QString("AdditionalPlanOptionsMap")].isNull() && m_additional_plan_options_map_isValid;
}

QString OAIGetPlanRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPlanRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_mapping.isSet()) {
        obj.insert(QString("Mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_sinks.isSet()) {
        obj.insert(QString("Sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_language.isSet()) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_additional_plan_options_map.isSet()) {
        obj.insert(QString("AdditionalPlanOptionsMap"), ::OpenAPI::toJsonValue(m_additional_plan_options_map));
    }
    return obj;
}

QList OAIGetPlanRequest::getMapping() const {
    return m_mapping;
}
void OAIGetPlanRequest::setMapping(const QList &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAIGetPlanRequest::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIGetPlanRequest::is_mapping_Valid() const{
    return m_mapping_isValid;
}

OAIGetPlanRequest_Source OAIGetPlanRequest::getSource() const {
    return m_source;
}
void OAIGetPlanRequest::setSource(const OAIGetPlanRequest_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGetPlanRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGetPlanRequest::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIGetPlanRequest::getSinks() const {
    return m_sinks;
}
void OAIGetPlanRequest::setSinks(const QList &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAIGetPlanRequest::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAIGetPlanRequest::is_sinks_Valid() const{
    return m_sinks_isValid;
}

OAIGetPlanRequest_Location OAIGetPlanRequest::getLocation() const {
    return m_location;
}
void OAIGetPlanRequest::setLocation(const OAIGetPlanRequest_Location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGetPlanRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGetPlanRequest::is_location_Valid() const{
    return m_location_isValid;
}

OAILanguage OAIGetPlanRequest::getLanguage() const {
    return m_language;
}
void OAIGetPlanRequest::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIGetPlanRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAIGetPlanRequest::is_language_Valid() const{
    return m_language_isValid;
}

QMap OAIGetPlanRequest::getAdditionalPlanOptionsMap() const {
    return m_additional_plan_options_map;
}
void OAIGetPlanRequest::setAdditionalPlanOptionsMap(const QMap &additional_plan_options_map) {
    m_additional_plan_options_map = additional_plan_options_map;
    m_additional_plan_options_map_isSet = true;
}

bool OAIGetPlanRequest::is_additional_plan_options_map_Set() const{
    return m_additional_plan_options_map_isSet;
}

bool OAIGetPlanRequest::is_additional_plan_options_map_Valid() const{
    return m_additional_plan_options_map_isValid;
}

bool OAIGetPlanRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_plan_options_map.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPlanRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mapping_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
