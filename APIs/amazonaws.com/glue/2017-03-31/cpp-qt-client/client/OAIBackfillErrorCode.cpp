/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackfillErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackfillErrorCode::OAIBackfillErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackfillErrorCode::OAIBackfillErrorCode() {
    this->initializeModel();
}

OAIBackfillErrorCode::~OAIBackfillErrorCode() {}

void OAIBackfillErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBackfillErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBackfillErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ENCRYPTED_PARTITION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackfillErrorCode::ENCRYPTED_PARTITION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackfillErrorCode::INTERNAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_PARTITION_TYPE_DATA_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackfillErrorCode::INVALID_PARTITION_TYPE_DATA_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_PARTITION_VALUE_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackfillErrorCode::MISSING_PARTITION_VALUE_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_PARTITION_CHARACTER_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackfillErrorCode::UNSUPPORTED_PARTITION_CHARACTER_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBackfillErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBackfillErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBackfillErrorCode::ENCRYPTED_PARTITION_ERROR:
            val = "ENCRYPTED_PARTITION_ERROR";
            break;
        case eOAIBackfillErrorCode::INTERNAL_ERROR:
            val = "INTERNAL_ERROR";
            break;
        case eOAIBackfillErrorCode::INVALID_PARTITION_TYPE_DATA_ERROR:
            val = "INVALID_PARTITION_TYPE_DATA_ERROR";
            break;
        case eOAIBackfillErrorCode::MISSING_PARTITION_VALUE_ERROR:
            val = "MISSING_PARTITION_VALUE_ERROR";
            break;
        case eOAIBackfillErrorCode::UNSUPPORTED_PARTITION_CHARACTER_ERROR:
            val = "UNSUPPORTED_PARTITION_CHARACTER_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBackfillErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBackfillErrorCode::eOAIBackfillErrorCode OAIBackfillErrorCode::getValue() const {
    return m_value;
}

void OAIBackfillErrorCode::setValue(const OAIBackfillErrorCode::eOAIBackfillErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBackfillErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIBackfillErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
