/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDescriptor::OAIStorageDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDescriptor::OAIStorageDescriptor() {
    this->initializeModel();
}

OAIStorageDescriptor::~OAIStorageDescriptor() {}

void OAIStorageDescriptor::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_additional_locations_isSet = false;
    m_additional_locations_isValid = false;

    m_input_format_isSet = false;
    m_input_format_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_compressed_isSet = false;
    m_compressed_isValid = false;

    m_number_of_buckets_isSet = false;
    m_number_of_buckets_isValid = false;

    m_serde_info_isSet = false;
    m_serde_info_isValid = false;

    m_bucket_columns_isSet = false;
    m_bucket_columns_isValid = false;

    m_sort_columns_isSet = false;
    m_sort_columns_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_skewed_info_isSet = false;
    m_skewed_info_isValid = false;

    m_stored_as_sub_directories_isSet = false;
    m_stored_as_sub_directories_isValid = false;

    m_schema_reference_isSet = false;
    m_schema_reference_isValid = false;
}

void OAIStorageDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDescriptor::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_additional_locations_isValid = ::OpenAPI::fromJsonValue(m_additional_locations, json[QString("AdditionalLocations")]);
    m_additional_locations_isSet = !json[QString("AdditionalLocations")].isNull() && m_additional_locations_isValid;

    m_input_format_isValid = ::OpenAPI::fromJsonValue(m_input_format, json[QString("InputFormat")]);
    m_input_format_isSet = !json[QString("InputFormat")].isNull() && m_input_format_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_compressed_isValid = ::OpenAPI::fromJsonValue(m_compressed, json[QString("Compressed")]);
    m_compressed_isSet = !json[QString("Compressed")].isNull() && m_compressed_isValid;

    m_number_of_buckets_isValid = ::OpenAPI::fromJsonValue(m_number_of_buckets, json[QString("NumberOfBuckets")]);
    m_number_of_buckets_isSet = !json[QString("NumberOfBuckets")].isNull() && m_number_of_buckets_isValid;

    m_serde_info_isValid = ::OpenAPI::fromJsonValue(m_serde_info, json[QString("SerdeInfo")]);
    m_serde_info_isSet = !json[QString("SerdeInfo")].isNull() && m_serde_info_isValid;

    m_bucket_columns_isValid = ::OpenAPI::fromJsonValue(m_bucket_columns, json[QString("BucketColumns")]);
    m_bucket_columns_isSet = !json[QString("BucketColumns")].isNull() && m_bucket_columns_isValid;

    m_sort_columns_isValid = ::OpenAPI::fromJsonValue(m_sort_columns, json[QString("SortColumns")]);
    m_sort_columns_isSet = !json[QString("SortColumns")].isNull() && m_sort_columns_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_skewed_info_isValid = ::OpenAPI::fromJsonValue(m_skewed_info, json[QString("SkewedInfo")]);
    m_skewed_info_isSet = !json[QString("SkewedInfo")].isNull() && m_skewed_info_isValid;

    m_stored_as_sub_directories_isValid = ::OpenAPI::fromJsonValue(m_stored_as_sub_directories, json[QString("StoredAsSubDirectories")]);
    m_stored_as_sub_directories_isSet = !json[QString("StoredAsSubDirectories")].isNull() && m_stored_as_sub_directories_isValid;

    m_schema_reference_isValid = ::OpenAPI::fromJsonValue(m_schema_reference, json[QString("SchemaReference")]);
    m_schema_reference_isSet = !json[QString("SchemaReference")].isNull() && m_schema_reference_isValid;
}

QString OAIStorageDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_additional_locations.isSet()) {
        obj.insert(QString("AdditionalLocations"), ::OpenAPI::toJsonValue(m_additional_locations));
    }
    if (m_input_format_isSet) {
        obj.insert(QString("InputFormat"), ::OpenAPI::toJsonValue(m_input_format));
    }
    if (m_output_format_isSet) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_compressed_isSet) {
        obj.insert(QString("Compressed"), ::OpenAPI::toJsonValue(m_compressed));
    }
    if (m_number_of_buckets_isSet) {
        obj.insert(QString("NumberOfBuckets"), ::OpenAPI::toJsonValue(m_number_of_buckets));
    }
    if (m_serde_info.isSet()) {
        obj.insert(QString("SerdeInfo"), ::OpenAPI::toJsonValue(m_serde_info));
    }
    if (m_bucket_columns.isSet()) {
        obj.insert(QString("BucketColumns"), ::OpenAPI::toJsonValue(m_bucket_columns));
    }
    if (m_sort_columns.isSet()) {
        obj.insert(QString("SortColumns"), ::OpenAPI::toJsonValue(m_sort_columns));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_skewed_info.isSet()) {
        obj.insert(QString("SkewedInfo"), ::OpenAPI::toJsonValue(m_skewed_info));
    }
    if (m_stored_as_sub_directories_isSet) {
        obj.insert(QString("StoredAsSubDirectories"), ::OpenAPI::toJsonValue(m_stored_as_sub_directories));
    }
    if (m_schema_reference.isSet()) {
        obj.insert(QString("SchemaReference"), ::OpenAPI::toJsonValue(m_schema_reference));
    }
    return obj;
}

QList OAIStorageDescriptor::getColumns() const {
    return m_columns;
}
void OAIStorageDescriptor::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIStorageDescriptor::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIStorageDescriptor::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIStorageDescriptor::getLocation() const {
    return m_location;
}
void OAIStorageDescriptor::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIStorageDescriptor::is_location_Set() const{
    return m_location_isSet;
}

bool OAIStorageDescriptor::is_location_Valid() const{
    return m_location_isValid;
}

QList OAIStorageDescriptor::getAdditionalLocations() const {
    return m_additional_locations;
}
void OAIStorageDescriptor::setAdditionalLocations(const QList &additional_locations) {
    m_additional_locations = additional_locations;
    m_additional_locations_isSet = true;
}

bool OAIStorageDescriptor::is_additional_locations_Set() const{
    return m_additional_locations_isSet;
}

bool OAIStorageDescriptor::is_additional_locations_Valid() const{
    return m_additional_locations_isValid;
}

QString OAIStorageDescriptor::getInputFormat() const {
    return m_input_format;
}
void OAIStorageDescriptor::setInputFormat(const QString &input_format) {
    m_input_format = input_format;
    m_input_format_isSet = true;
}

bool OAIStorageDescriptor::is_input_format_Set() const{
    return m_input_format_isSet;
}

bool OAIStorageDescriptor::is_input_format_Valid() const{
    return m_input_format_isValid;
}

QString OAIStorageDescriptor::getOutputFormat() const {
    return m_output_format;
}
void OAIStorageDescriptor::setOutputFormat(const QString &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIStorageDescriptor::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIStorageDescriptor::is_output_format_Valid() const{
    return m_output_format_isValid;
}

bool OAIStorageDescriptor::getCompressed() const {
    return m_compressed;
}
void OAIStorageDescriptor::setCompressed(const bool &compressed) {
    m_compressed = compressed;
    m_compressed_isSet = true;
}

bool OAIStorageDescriptor::is_compressed_Set() const{
    return m_compressed_isSet;
}

bool OAIStorageDescriptor::is_compressed_Valid() const{
    return m_compressed_isValid;
}

qint32 OAIStorageDescriptor::getNumberOfBuckets() const {
    return m_number_of_buckets;
}
void OAIStorageDescriptor::setNumberOfBuckets(const qint32 &number_of_buckets) {
    m_number_of_buckets = number_of_buckets;
    m_number_of_buckets_isSet = true;
}

bool OAIStorageDescriptor::is_number_of_buckets_Set() const{
    return m_number_of_buckets_isSet;
}

bool OAIStorageDescriptor::is_number_of_buckets_Valid() const{
    return m_number_of_buckets_isValid;
}

OAIStorageDescriptor_SerdeInfo OAIStorageDescriptor::getSerdeInfo() const {
    return m_serde_info;
}
void OAIStorageDescriptor::setSerdeInfo(const OAIStorageDescriptor_SerdeInfo &serde_info) {
    m_serde_info = serde_info;
    m_serde_info_isSet = true;
}

bool OAIStorageDescriptor::is_serde_info_Set() const{
    return m_serde_info_isSet;
}

bool OAIStorageDescriptor::is_serde_info_Valid() const{
    return m_serde_info_isValid;
}

QList OAIStorageDescriptor::getBucketColumns() const {
    return m_bucket_columns;
}
void OAIStorageDescriptor::setBucketColumns(const QList &bucket_columns) {
    m_bucket_columns = bucket_columns;
    m_bucket_columns_isSet = true;
}

bool OAIStorageDescriptor::is_bucket_columns_Set() const{
    return m_bucket_columns_isSet;
}

bool OAIStorageDescriptor::is_bucket_columns_Valid() const{
    return m_bucket_columns_isValid;
}

QList OAIStorageDescriptor::getSortColumns() const {
    return m_sort_columns;
}
void OAIStorageDescriptor::setSortColumns(const QList &sort_columns) {
    m_sort_columns = sort_columns;
    m_sort_columns_isSet = true;
}

bool OAIStorageDescriptor::is_sort_columns_Set() const{
    return m_sort_columns_isSet;
}

bool OAIStorageDescriptor::is_sort_columns_Valid() const{
    return m_sort_columns_isValid;
}

QMap OAIStorageDescriptor::getParameters() const {
    return m_parameters;
}
void OAIStorageDescriptor::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStorageDescriptor::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStorageDescriptor::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIStorageDescriptor_SkewedInfo OAIStorageDescriptor::getSkewedInfo() const {
    return m_skewed_info;
}
void OAIStorageDescriptor::setSkewedInfo(const OAIStorageDescriptor_SkewedInfo &skewed_info) {
    m_skewed_info = skewed_info;
    m_skewed_info_isSet = true;
}

bool OAIStorageDescriptor::is_skewed_info_Set() const{
    return m_skewed_info_isSet;
}

bool OAIStorageDescriptor::is_skewed_info_Valid() const{
    return m_skewed_info_isValid;
}

bool OAIStorageDescriptor::getStoredAsSubDirectories() const {
    return m_stored_as_sub_directories;
}
void OAIStorageDescriptor::setStoredAsSubDirectories(const bool &stored_as_sub_directories) {
    m_stored_as_sub_directories = stored_as_sub_directories;
    m_stored_as_sub_directories_isSet = true;
}

bool OAIStorageDescriptor::is_stored_as_sub_directories_Set() const{
    return m_stored_as_sub_directories_isSet;
}

bool OAIStorageDescriptor::is_stored_as_sub_directories_Valid() const{
    return m_stored_as_sub_directories_isValid;
}

OAIStorageDescriptor_SchemaReference OAIStorageDescriptor::getSchemaReference() const {
    return m_schema_reference;
}
void OAIStorageDescriptor::setSchemaReference(const OAIStorageDescriptor_SchemaReference &schema_reference) {
    m_schema_reference = schema_reference;
    m_schema_reference_isSet = true;
}

bool OAIStorageDescriptor::is_schema_reference_Set() const{
    return m_schema_reference_isSet;
}

bool OAIStorageDescriptor::is_schema_reference_Valid() const{
    return m_schema_reference_isValid;
}

bool OAIStorageDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serde_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skewed_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_as_sub_directories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
