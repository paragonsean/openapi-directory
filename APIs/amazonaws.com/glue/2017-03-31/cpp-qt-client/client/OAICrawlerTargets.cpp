/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlerTargets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlerTargets::OAICrawlerTargets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlerTargets::OAICrawlerTargets() {
    this->initializeModel();
}

OAICrawlerTargets::~OAICrawlerTargets() {}

void OAICrawlerTargets::initializeModel() {

    m_s3_targets_isSet = false;
    m_s3_targets_isValid = false;

    m_jdbc_targets_isSet = false;
    m_jdbc_targets_isValid = false;

    m_mongo_db_targets_isSet = false;
    m_mongo_db_targets_isValid = false;

    m_dynamo_db_targets_isSet = false;
    m_dynamo_db_targets_isValid = false;

    m_catalog_targets_isSet = false;
    m_catalog_targets_isValid = false;

    m_delta_targets_isSet = false;
    m_delta_targets_isValid = false;

    m_iceberg_targets_isSet = false;
    m_iceberg_targets_isValid = false;

    m_hudi_targets_isSet = false;
    m_hudi_targets_isValid = false;
}

void OAICrawlerTargets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlerTargets::fromJsonObject(QJsonObject json) {

    m_s3_targets_isValid = ::OpenAPI::fromJsonValue(m_s3_targets, json[QString("S3Targets")]);
    m_s3_targets_isSet = !json[QString("S3Targets")].isNull() && m_s3_targets_isValid;

    m_jdbc_targets_isValid = ::OpenAPI::fromJsonValue(m_jdbc_targets, json[QString("JdbcTargets")]);
    m_jdbc_targets_isSet = !json[QString("JdbcTargets")].isNull() && m_jdbc_targets_isValid;

    m_mongo_db_targets_isValid = ::OpenAPI::fromJsonValue(m_mongo_db_targets, json[QString("MongoDBTargets")]);
    m_mongo_db_targets_isSet = !json[QString("MongoDBTargets")].isNull() && m_mongo_db_targets_isValid;

    m_dynamo_db_targets_isValid = ::OpenAPI::fromJsonValue(m_dynamo_db_targets, json[QString("DynamoDBTargets")]);
    m_dynamo_db_targets_isSet = !json[QString("DynamoDBTargets")].isNull() && m_dynamo_db_targets_isValid;

    m_catalog_targets_isValid = ::OpenAPI::fromJsonValue(m_catalog_targets, json[QString("CatalogTargets")]);
    m_catalog_targets_isSet = !json[QString("CatalogTargets")].isNull() && m_catalog_targets_isValid;

    m_delta_targets_isValid = ::OpenAPI::fromJsonValue(m_delta_targets, json[QString("DeltaTargets")]);
    m_delta_targets_isSet = !json[QString("DeltaTargets")].isNull() && m_delta_targets_isValid;

    m_iceberg_targets_isValid = ::OpenAPI::fromJsonValue(m_iceberg_targets, json[QString("IcebergTargets")]);
    m_iceberg_targets_isSet = !json[QString("IcebergTargets")].isNull() && m_iceberg_targets_isValid;

    m_hudi_targets_isValid = ::OpenAPI::fromJsonValue(m_hudi_targets, json[QString("HudiTargets")]);
    m_hudi_targets_isSet = !json[QString("HudiTargets")].isNull() && m_hudi_targets_isValid;
}

QString OAICrawlerTargets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlerTargets::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_targets.isSet()) {
        obj.insert(QString("S3Targets"), ::OpenAPI::toJsonValue(m_s3_targets));
    }
    if (m_jdbc_targets.isSet()) {
        obj.insert(QString("JdbcTargets"), ::OpenAPI::toJsonValue(m_jdbc_targets));
    }
    if (m_mongo_db_targets.isSet()) {
        obj.insert(QString("MongoDBTargets"), ::OpenAPI::toJsonValue(m_mongo_db_targets));
    }
    if (m_dynamo_db_targets.isSet()) {
        obj.insert(QString("DynamoDBTargets"), ::OpenAPI::toJsonValue(m_dynamo_db_targets));
    }
    if (m_catalog_targets.isSet()) {
        obj.insert(QString("CatalogTargets"), ::OpenAPI::toJsonValue(m_catalog_targets));
    }
    if (m_delta_targets.isSet()) {
        obj.insert(QString("DeltaTargets"), ::OpenAPI::toJsonValue(m_delta_targets));
    }
    if (m_iceberg_targets.isSet()) {
        obj.insert(QString("IcebergTargets"), ::OpenAPI::toJsonValue(m_iceberg_targets));
    }
    if (m_hudi_targets.isSet()) {
        obj.insert(QString("HudiTargets"), ::OpenAPI::toJsonValue(m_hudi_targets));
    }
    return obj;
}

QList OAICrawlerTargets::getS3Targets() const {
    return m_s3_targets;
}
void OAICrawlerTargets::setS3Targets(const QList &s3_targets) {
    m_s3_targets = s3_targets;
    m_s3_targets_isSet = true;
}

bool OAICrawlerTargets::is_s3_targets_Set() const{
    return m_s3_targets_isSet;
}

bool OAICrawlerTargets::is_s3_targets_Valid() const{
    return m_s3_targets_isValid;
}

QList OAICrawlerTargets::getJdbcTargets() const {
    return m_jdbc_targets;
}
void OAICrawlerTargets::setJdbcTargets(const QList &jdbc_targets) {
    m_jdbc_targets = jdbc_targets;
    m_jdbc_targets_isSet = true;
}

bool OAICrawlerTargets::is_jdbc_targets_Set() const{
    return m_jdbc_targets_isSet;
}

bool OAICrawlerTargets::is_jdbc_targets_Valid() const{
    return m_jdbc_targets_isValid;
}

QList OAICrawlerTargets::getMongoDbTargets() const {
    return m_mongo_db_targets;
}
void OAICrawlerTargets::setMongoDbTargets(const QList &mongo_db_targets) {
    m_mongo_db_targets = mongo_db_targets;
    m_mongo_db_targets_isSet = true;
}

bool OAICrawlerTargets::is_mongo_db_targets_Set() const{
    return m_mongo_db_targets_isSet;
}

bool OAICrawlerTargets::is_mongo_db_targets_Valid() const{
    return m_mongo_db_targets_isValid;
}

QList OAICrawlerTargets::getDynamoDbTargets() const {
    return m_dynamo_db_targets;
}
void OAICrawlerTargets::setDynamoDbTargets(const QList &dynamo_db_targets) {
    m_dynamo_db_targets = dynamo_db_targets;
    m_dynamo_db_targets_isSet = true;
}

bool OAICrawlerTargets::is_dynamo_db_targets_Set() const{
    return m_dynamo_db_targets_isSet;
}

bool OAICrawlerTargets::is_dynamo_db_targets_Valid() const{
    return m_dynamo_db_targets_isValid;
}

QList OAICrawlerTargets::getCatalogTargets() const {
    return m_catalog_targets;
}
void OAICrawlerTargets::setCatalogTargets(const QList &catalog_targets) {
    m_catalog_targets = catalog_targets;
    m_catalog_targets_isSet = true;
}

bool OAICrawlerTargets::is_catalog_targets_Set() const{
    return m_catalog_targets_isSet;
}

bool OAICrawlerTargets::is_catalog_targets_Valid() const{
    return m_catalog_targets_isValid;
}

QList OAICrawlerTargets::getDeltaTargets() const {
    return m_delta_targets;
}
void OAICrawlerTargets::setDeltaTargets(const QList &delta_targets) {
    m_delta_targets = delta_targets;
    m_delta_targets_isSet = true;
}

bool OAICrawlerTargets::is_delta_targets_Set() const{
    return m_delta_targets_isSet;
}

bool OAICrawlerTargets::is_delta_targets_Valid() const{
    return m_delta_targets_isValid;
}

QList OAICrawlerTargets::getIcebergTargets() const {
    return m_iceberg_targets;
}
void OAICrawlerTargets::setIcebergTargets(const QList &iceberg_targets) {
    m_iceberg_targets = iceberg_targets;
    m_iceberg_targets_isSet = true;
}

bool OAICrawlerTargets::is_iceberg_targets_Set() const{
    return m_iceberg_targets_isSet;
}

bool OAICrawlerTargets::is_iceberg_targets_Valid() const{
    return m_iceberg_targets_isValid;
}

QList OAICrawlerTargets::getHudiTargets() const {
    return m_hudi_targets;
}
void OAICrawlerTargets::setHudiTargets(const QList &hudi_targets) {
    m_hudi_targets = hudi_targets;
    m_hudi_targets_isSet = true;
}

bool OAICrawlerTargets::is_hudi_targets_Set() const{
    return m_hudi_targets_isSet;
}

bool OAICrawlerTargets::is_hudi_targets_Valid() const{
    return m_hudi_targets_isValid;
}

bool OAICrawlerTargets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jdbc_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mongo_db_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_db_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iceberg_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hudi_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlerTargets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
