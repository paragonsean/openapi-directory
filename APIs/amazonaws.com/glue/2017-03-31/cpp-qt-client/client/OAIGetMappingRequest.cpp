/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMappingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMappingRequest::OAIGetMappingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMappingRequest::OAIGetMappingRequest() {
    this->initializeModel();
}

OAIGetMappingRequest::~OAIGetMappingRequest() {}

void OAIGetMappingRequest::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIGetMappingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMappingRequest::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("Sinks")]);
    m_sinks_isSet = !json[QString("Sinks")].isNull() && m_sinks_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;
}

QString OAIGetMappingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMappingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_sinks.isSet()) {
        obj.insert(QString("Sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

OAIGetMappingRequest_Source OAIGetMappingRequest::getSource() const {
    return m_source;
}
void OAIGetMappingRequest::setSource(const OAIGetMappingRequest_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGetMappingRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGetMappingRequest::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIGetMappingRequest::getSinks() const {
    return m_sinks;
}
void OAIGetMappingRequest::setSinks(const QList &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAIGetMappingRequest::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAIGetMappingRequest::is_sinks_Valid() const{
    return m_sinks_isValid;
}

OAIGetMappingRequest_Location OAIGetMappingRequest::getLocation() const {
    return m_location;
}
void OAIGetMappingRequest::setLocation(const OAIGetMappingRequest_Location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGetMappingRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGetMappingRequest::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIGetMappingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMappingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
