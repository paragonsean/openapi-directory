/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITableInput_StorageDescriptor.h
 *
 * 
 */

#ifndef OAITableInput_StorageDescriptor_H
#define OAITableInput_StorageDescriptor_H

#include <QJsonObject>

#include "OAIStorageDescriptor_SchemaReference.h"
#include "OAIStorageDescriptor_SerdeInfo.h"
#include "OAIStorageDescriptor_SkewedInfo.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStorageDescriptor_SerdeInfo;
class OAIStorageDescriptor_SkewedInfo;
class OAIStorageDescriptor_SchemaReference;

class OAITableInput_StorageDescriptor : public OAIObject {
public:
    OAITableInput_StorageDescriptor();
    OAITableInput_StorageDescriptor(QString json);
    ~OAITableInput_StorageDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getColumns() const;
    void setColumns(const QList &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QList getAdditionalLocations() const;
    void setAdditionalLocations(const QList &additional_locations);
    bool is_additional_locations_Set() const;
    bool is_additional_locations_Valid() const;

    QString getInputFormat() const;
    void setInputFormat(const QString &input_format);
    bool is_input_format_Set() const;
    bool is_input_format_Valid() const;

    QString getOutputFormat() const;
    void setOutputFormat(const QString &output_format);
    bool is_output_format_Set() const;
    bool is_output_format_Valid() const;

    bool getCompressed() const;
    void setCompressed(const bool &compressed);
    bool is_compressed_Set() const;
    bool is_compressed_Valid() const;

    qint32 getNumberOfBuckets() const;
    void setNumberOfBuckets(const qint32 &number_of_buckets);
    bool is_number_of_buckets_Set() const;
    bool is_number_of_buckets_Valid() const;

    OAIStorageDescriptor_SerdeInfo getSerdeInfo() const;
    void setSerdeInfo(const OAIStorageDescriptor_SerdeInfo &serde_info);
    bool is_serde_info_Set() const;
    bool is_serde_info_Valid() const;

    QList getBucketColumns() const;
    void setBucketColumns(const QList &bucket_columns);
    bool is_bucket_columns_Set() const;
    bool is_bucket_columns_Valid() const;

    QList getSortColumns() const;
    void setSortColumns(const QList &sort_columns);
    bool is_sort_columns_Set() const;
    bool is_sort_columns_Valid() const;

    QMap getParameters() const;
    void setParameters(const QMap &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    OAIStorageDescriptor_SkewedInfo getSkewedInfo() const;
    void setSkewedInfo(const OAIStorageDescriptor_SkewedInfo &skewed_info);
    bool is_skewed_info_Set() const;
    bool is_skewed_info_Valid() const;

    bool getStoredAsSubDirectories() const;
    void setStoredAsSubDirectories(const bool &stored_as_sub_directories);
    bool is_stored_as_sub_directories_Set() const;
    bool is_stored_as_sub_directories_Valid() const;

    OAIStorageDescriptor_SchemaReference getSchemaReference() const;
    void setSchemaReference(const OAIStorageDescriptor_SchemaReference &schema_reference);
    bool is_schema_reference_Set() const;
    bool is_schema_reference_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QList m_additional_locations;
    bool m_additional_locations_isSet;
    bool m_additional_locations_isValid;

    QString m_input_format;
    bool m_input_format_isSet;
    bool m_input_format_isValid;

    QString m_output_format;
    bool m_output_format_isSet;
    bool m_output_format_isValid;

    bool m_compressed;
    bool m_compressed_isSet;
    bool m_compressed_isValid;

    qint32 m_number_of_buckets;
    bool m_number_of_buckets_isSet;
    bool m_number_of_buckets_isValid;

    OAIStorageDescriptor_SerdeInfo m_serde_info;
    bool m_serde_info_isSet;
    bool m_serde_info_isValid;

    QList m_bucket_columns;
    bool m_bucket_columns_isSet;
    bool m_bucket_columns_isValid;

    QList m_sort_columns;
    bool m_sort_columns_isSet;
    bool m_sort_columns_isValid;

    QMap m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    OAIStorageDescriptor_SkewedInfo m_skewed_info;
    bool m_skewed_info_isSet;
    bool m_skewed_info_isValid;

    bool m_stored_as_sub_directories;
    bool m_stored_as_sub_directories_isSet;
    bool m_stored_as_sub_directories_isValid;

    OAIStorageDescriptor_SchemaReference m_schema_reference;
    bool m_schema_reference_isSet;
    bool m_schema_reference_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITableInput_StorageDescriptor)

#endif // OAITableInput_StorageDescriptor_H
