/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluateDataQuality_PublishingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluateDataQuality_PublishingOptions::OAIEvaluateDataQuality_PublishingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluateDataQuality_PublishingOptions::OAIEvaluateDataQuality_PublishingOptions() {
    this->initializeModel();
}

OAIEvaluateDataQuality_PublishingOptions::~OAIEvaluateDataQuality_PublishingOptions() {}

void OAIEvaluateDataQuality_PublishingOptions::initializeModel() {

    m_evaluation_context_isSet = false;
    m_evaluation_context_isValid = false;

    m_results_s3_prefix_isSet = false;
    m_results_s3_prefix_isValid = false;

    m_cloud_watch_metrics_enabled_isSet = false;
    m_cloud_watch_metrics_enabled_isValid = false;

    m_results_publishing_enabled_isSet = false;
    m_results_publishing_enabled_isValid = false;
}

void OAIEvaluateDataQuality_PublishingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluateDataQuality_PublishingOptions::fromJsonObject(QJsonObject json) {

    m_evaluation_context_isValid = ::OpenAPI::fromJsonValue(m_evaluation_context, json[QString("EvaluationContext")]);
    m_evaluation_context_isSet = !json[QString("EvaluationContext")].isNull() && m_evaluation_context_isValid;

    m_results_s3_prefix_isValid = ::OpenAPI::fromJsonValue(m_results_s3_prefix, json[QString("ResultsS3Prefix")]);
    m_results_s3_prefix_isSet = !json[QString("ResultsS3Prefix")].isNull() && m_results_s3_prefix_isValid;

    m_cloud_watch_metrics_enabled_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_metrics_enabled, json[QString("CloudWatchMetricsEnabled")]);
    m_cloud_watch_metrics_enabled_isSet = !json[QString("CloudWatchMetricsEnabled")].isNull() && m_cloud_watch_metrics_enabled_isValid;

    m_results_publishing_enabled_isValid = ::OpenAPI::fromJsonValue(m_results_publishing_enabled, json[QString("ResultsPublishingEnabled")]);
    m_results_publishing_enabled_isSet = !json[QString("ResultsPublishingEnabled")].isNull() && m_results_publishing_enabled_isValid;
}

QString OAIEvaluateDataQuality_PublishingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluateDataQuality_PublishingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_context_isSet) {
        obj.insert(QString("EvaluationContext"), ::OpenAPI::toJsonValue(m_evaluation_context));
    }
    if (m_results_s3_prefix_isSet) {
        obj.insert(QString("ResultsS3Prefix"), ::OpenAPI::toJsonValue(m_results_s3_prefix));
    }
    if (m_cloud_watch_metrics_enabled_isSet) {
        obj.insert(QString("CloudWatchMetricsEnabled"), ::OpenAPI::toJsonValue(m_cloud_watch_metrics_enabled));
    }
    if (m_results_publishing_enabled_isSet) {
        obj.insert(QString("ResultsPublishingEnabled"), ::OpenAPI::toJsonValue(m_results_publishing_enabled));
    }
    return obj;
}

QString OAIEvaluateDataQuality_PublishingOptions::getEvaluationContext() const {
    return m_evaluation_context;
}
void OAIEvaluateDataQuality_PublishingOptions::setEvaluationContext(const QString &evaluation_context) {
    m_evaluation_context = evaluation_context;
    m_evaluation_context_isSet = true;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_evaluation_context_Set() const{
    return m_evaluation_context_isSet;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_evaluation_context_Valid() const{
    return m_evaluation_context_isValid;
}

QString OAIEvaluateDataQuality_PublishingOptions::getResultsS3Prefix() const {
    return m_results_s3_prefix;
}
void OAIEvaluateDataQuality_PublishingOptions::setResultsS3Prefix(const QString &results_s3_prefix) {
    m_results_s3_prefix = results_s3_prefix;
    m_results_s3_prefix_isSet = true;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_results_s3_prefix_Set() const{
    return m_results_s3_prefix_isSet;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_results_s3_prefix_Valid() const{
    return m_results_s3_prefix_isValid;
}

bool OAIEvaluateDataQuality_PublishingOptions::getCloudWatchMetricsEnabled() const {
    return m_cloud_watch_metrics_enabled;
}
void OAIEvaluateDataQuality_PublishingOptions::setCloudWatchMetricsEnabled(const bool &cloud_watch_metrics_enabled) {
    m_cloud_watch_metrics_enabled = cloud_watch_metrics_enabled;
    m_cloud_watch_metrics_enabled_isSet = true;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_cloud_watch_metrics_enabled_Set() const{
    return m_cloud_watch_metrics_enabled_isSet;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_cloud_watch_metrics_enabled_Valid() const{
    return m_cloud_watch_metrics_enabled_isValid;
}

bool OAIEvaluateDataQuality_PublishingOptions::getResultsPublishingEnabled() const {
    return m_results_publishing_enabled;
}
void OAIEvaluateDataQuality_PublishingOptions::setResultsPublishingEnabled(const bool &results_publishing_enabled) {
    m_results_publishing_enabled = results_publishing_enabled;
    m_results_publishing_enabled_isSet = true;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_results_publishing_enabled_Set() const{
    return m_results_publishing_enabled_isSet;
}

bool OAIEvaluateDataQuality_PublishingOptions::is_results_publishing_enabled_Valid() const{
    return m_results_publishing_enabled_isValid;
}

bool OAIEvaluateDataQuality_PublishingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_s3_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_metrics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_publishing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluateDataQuality_PublishingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
