/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetUnfilteredPartitionMetadataRequest.h
 *
 * 
 */

#ifndef OAIGetUnfilteredPartitionMetadataRequest_H
#define OAIGetUnfilteredPartitionMetadataRequest_H

#include <QJsonObject>

#include "OAIGetUnfilteredPartitionMetadataRequest_AuditContext.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetUnfilteredPartitionMetadataRequest_AuditContext;

class OAIGetUnfilteredPartitionMetadataRequest : public OAIObject {
public:
    OAIGetUnfilteredPartitionMetadataRequest();
    OAIGetUnfilteredPartitionMetadataRequest(QString json);
    ~OAIGetUnfilteredPartitionMetadataRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCatalogId() const;
    void setCatalogId(const QString &catalog_id);
    bool is_catalog_id_Set() const;
    bool is_catalog_id_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    QList getPartitionValues() const;
    void setPartitionValues(const QList &partition_values);
    bool is_partition_values_Set() const;
    bool is_partition_values_Valid() const;

    OAIGetUnfilteredPartitionMetadataRequest_AuditContext getAuditContext() const;
    void setAuditContext(const OAIGetUnfilteredPartitionMetadataRequest_AuditContext &audit_context);
    bool is_audit_context_Set() const;
    bool is_audit_context_Valid() const;

    QList getSupportedPermissionTypes() const;
    void setSupportedPermissionTypes(const QList &supported_permission_types);
    bool is_supported_permission_types_Set() const;
    bool is_supported_permission_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_catalog_id;
    bool m_catalog_id_isSet;
    bool m_catalog_id_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    QList m_partition_values;
    bool m_partition_values_isSet;
    bool m_partition_values_isValid;

    OAIGetUnfilteredPartitionMetadataRequest_AuditContext m_audit_context;
    bool m_audit_context_isSet;
    bool m_audit_context_isValid;

    QList m_supported_permission_types;
    bool m_supported_permission_types_isSet;
    bool m_supported_permission_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetUnfilteredPartitionMetadataRequest)

#endif // OAIGetUnfilteredPartitionMetadataRequest_H
