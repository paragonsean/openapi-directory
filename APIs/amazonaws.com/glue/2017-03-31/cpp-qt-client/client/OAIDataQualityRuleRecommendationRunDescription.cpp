/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataQualityRuleRecommendationRunDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataQualityRuleRecommendationRunDescription::OAIDataQualityRuleRecommendationRunDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataQualityRuleRecommendationRunDescription::OAIDataQualityRuleRecommendationRunDescription() {
    this->initializeModel();
}

OAIDataQualityRuleRecommendationRunDescription::~OAIDataQualityRuleRecommendationRunDescription() {}

void OAIDataQualityRuleRecommendationRunDescription::initializeModel() {

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;
}

void OAIDataQualityRuleRecommendationRunDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataQualityRuleRecommendationRunDescription::fromJsonObject(QJsonObject json) {

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("RunId")]);
    m_run_id_isSet = !json[QString("RunId")].isNull() && m_run_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;
}

QString OAIDataQualityRuleRecommendationRunDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataQualityRuleRecommendationRunDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_run_id_isSet) {
        obj.insert(QString("RunId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    return obj;
}

QString OAIDataQualityRuleRecommendationRunDescription::getRunId() const {
    return m_run_id;
}
void OAIDataQualityRuleRecommendationRunDescription::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_run_id_Valid() const{
    return m_run_id_isValid;
}

OAITaskStatusType OAIDataQualityRuleRecommendationRunDescription::getStatus() const {
    return m_status;
}
void OAIDataQualityRuleRecommendationRunDescription::setStatus(const OAITaskStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDataQualityRuleRecommendationRunDescription::getStartedOn() const {
    return m_started_on;
}
void OAIDataQualityRuleRecommendationRunDescription::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_started_on_Valid() const{
    return m_started_on_isValid;
}

OAIDataQualityRuleRecommendationRunDescription_DataSource OAIDataQualityRuleRecommendationRunDescription::getDataSource() const {
    return m_data_source;
}
void OAIDataQualityRuleRecommendationRunDescription::setDataSource(const OAIDataQualityRuleRecommendationRunDescription_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDataQualityRuleRecommendationRunDescription::is_data_source_Valid() const{
    return m_data_source_isValid;
}

bool OAIDataQualityRuleRecommendationRunDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataQualityRuleRecommendationRunDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
