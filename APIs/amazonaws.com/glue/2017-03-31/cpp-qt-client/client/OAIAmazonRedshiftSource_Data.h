/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAmazonRedshiftSource_Data.h
 *
 * 
 */

#ifndef OAIAmazonRedshiftSource_Data_H
#define OAIAmazonRedshiftSource_Data_H

#include <QJsonObject>

#include "OAIAmazonRedshiftNodeData_CatalogDatabase.h"
#include "OAIAmazonRedshiftNodeData_CatalogTable.h"
#include "OAIAmazonRedshiftNodeData_Connection.h"
#include "OAIAmazonRedshiftNodeData_IamRole.h"
#include "OAIAmazonRedshiftNodeData_Schema.h"
#include "OAIAmazonRedshiftNodeData_Table.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmazonRedshiftNodeData_Connection;
class OAIAmazonRedshiftNodeData_Schema;
class OAIAmazonRedshiftNodeData_Table;
class OAIAmazonRedshiftNodeData_CatalogDatabase;
class OAIAmazonRedshiftNodeData_CatalogTable;
class OAIAmazonRedshiftNodeData_IamRole;

class OAIAmazonRedshiftSource_Data : public OAIObject {
public:
    OAIAmazonRedshiftSource_Data();
    OAIAmazonRedshiftSource_Data(QString json);
    ~OAIAmazonRedshiftSource_Data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessType() const;
    void setAccessType(const QString &access_type);
    bool is_access_type_Set() const;
    bool is_access_type_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    OAIAmazonRedshiftNodeData_Connection getConnection() const;
    void setConnection(const OAIAmazonRedshiftNodeData_Connection &connection);
    bool is_connection_Set() const;
    bool is_connection_Valid() const;

    OAIAmazonRedshiftNodeData_Schema getSchema() const;
    void setSchema(const OAIAmazonRedshiftNodeData_Schema &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    OAIAmazonRedshiftNodeData_Table getTable() const;
    void setTable(const OAIAmazonRedshiftNodeData_Table &table);
    bool is_table_Set() const;
    bool is_table_Valid() const;

    OAIAmazonRedshiftNodeData_CatalogDatabase getCatalogDatabase() const;
    void setCatalogDatabase(const OAIAmazonRedshiftNodeData_CatalogDatabase &catalog_database);
    bool is_catalog_database_Set() const;
    bool is_catalog_database_Valid() const;

    OAIAmazonRedshiftNodeData_CatalogTable getCatalogTable() const;
    void setCatalogTable(const OAIAmazonRedshiftNodeData_CatalogTable &catalog_table);
    bool is_catalog_table_Set() const;
    bool is_catalog_table_Valid() const;

    QString getCatalogRedshiftSchema() const;
    void setCatalogRedshiftSchema(const QString &catalog_redshift_schema);
    bool is_catalog_redshift_schema_Set() const;
    bool is_catalog_redshift_schema_Valid() const;

    QString getCatalogRedshiftTable() const;
    void setCatalogRedshiftTable(const QString &catalog_redshift_table);
    bool is_catalog_redshift_table_Set() const;
    bool is_catalog_redshift_table_Valid() const;

    QString getTempDir() const;
    void setTempDir(const QString &temp_dir);
    bool is_temp_dir_Set() const;
    bool is_temp_dir_Valid() const;

    OAIAmazonRedshiftNodeData_IamRole getIamRole() const;
    void setIamRole(const OAIAmazonRedshiftNodeData_IamRole &iam_role);
    bool is_iam_role_Set() const;
    bool is_iam_role_Valid() const;

    QList getAdvancedOptions() const;
    void setAdvancedOptions(const QList &advanced_options);
    bool is_advanced_options_Set() const;
    bool is_advanced_options_Valid() const;

    QString getSampleQuery() const;
    void setSampleQuery(const QString &sample_query);
    bool is_sample_query_Set() const;
    bool is_sample_query_Valid() const;

    QString getPreAction() const;
    void setPreAction(const QString &pre_action);
    bool is_pre_action_Set() const;
    bool is_pre_action_Valid() const;

    QString getPostAction() const;
    void setPostAction(const QString &post_action);
    bool is_post_action_Set() const;
    bool is_post_action_Valid() const;

    QString getAction() const;
    void setAction(const QString &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    QString getTablePrefix() const;
    void setTablePrefix(const QString &table_prefix);
    bool is_table_prefix_Set() const;
    bool is_table_prefix_Valid() const;

    bool getUpsert() const;
    void setUpsert(const bool &upsert);
    bool is_upsert_Set() const;
    bool is_upsert_Valid() const;

    QString getMergeAction() const;
    void setMergeAction(const QString &merge_action);
    bool is_merge_action_Set() const;
    bool is_merge_action_Valid() const;

    QString getMergeWhenMatched() const;
    void setMergeWhenMatched(const QString &merge_when_matched);
    bool is_merge_when_matched_Set() const;
    bool is_merge_when_matched_Valid() const;

    QString getMergeWhenNotMatched() const;
    void setMergeWhenNotMatched(const QString &merge_when_not_matched);
    bool is_merge_when_not_matched_Set() const;
    bool is_merge_when_not_matched_Valid() const;

    QString getMergeClause() const;
    void setMergeClause(const QString &merge_clause);
    bool is_merge_clause_Set() const;
    bool is_merge_clause_Valid() const;

    QString getCrawlerConnection() const;
    void setCrawlerConnection(const QString &crawler_connection);
    bool is_crawler_connection_Set() const;
    bool is_crawler_connection_Valid() const;

    QList getTableSchema() const;
    void setTableSchema(const QList &table_schema);
    bool is_table_schema_Set() const;
    bool is_table_schema_Valid() const;

    QString getStagingTable() const;
    void setStagingTable(const QString &staging_table);
    bool is_staging_table_Set() const;
    bool is_staging_table_Valid() const;

    QList getSelectedColumns() const;
    void setSelectedColumns(const QList &selected_columns);
    bool is_selected_columns_Set() const;
    bool is_selected_columns_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_type;
    bool m_access_type_isSet;
    bool m_access_type_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    OAIAmazonRedshiftNodeData_Connection m_connection;
    bool m_connection_isSet;
    bool m_connection_isValid;

    OAIAmazonRedshiftNodeData_Schema m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    OAIAmazonRedshiftNodeData_Table m_table;
    bool m_table_isSet;
    bool m_table_isValid;

    OAIAmazonRedshiftNodeData_CatalogDatabase m_catalog_database;
    bool m_catalog_database_isSet;
    bool m_catalog_database_isValid;

    OAIAmazonRedshiftNodeData_CatalogTable m_catalog_table;
    bool m_catalog_table_isSet;
    bool m_catalog_table_isValid;

    QString m_catalog_redshift_schema;
    bool m_catalog_redshift_schema_isSet;
    bool m_catalog_redshift_schema_isValid;

    QString m_catalog_redshift_table;
    bool m_catalog_redshift_table_isSet;
    bool m_catalog_redshift_table_isValid;

    QString m_temp_dir;
    bool m_temp_dir_isSet;
    bool m_temp_dir_isValid;

    OAIAmazonRedshiftNodeData_IamRole m_iam_role;
    bool m_iam_role_isSet;
    bool m_iam_role_isValid;

    QList m_advanced_options;
    bool m_advanced_options_isSet;
    bool m_advanced_options_isValid;

    QString m_sample_query;
    bool m_sample_query_isSet;
    bool m_sample_query_isValid;

    QString m_pre_action;
    bool m_pre_action_isSet;
    bool m_pre_action_isValid;

    QString m_post_action;
    bool m_post_action_isSet;
    bool m_post_action_isValid;

    QString m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    QString m_table_prefix;
    bool m_table_prefix_isSet;
    bool m_table_prefix_isValid;

    bool m_upsert;
    bool m_upsert_isSet;
    bool m_upsert_isValid;

    QString m_merge_action;
    bool m_merge_action_isSet;
    bool m_merge_action_isValid;

    QString m_merge_when_matched;
    bool m_merge_when_matched_isSet;
    bool m_merge_when_matched_isValid;

    QString m_merge_when_not_matched;
    bool m_merge_when_not_matched_isSet;
    bool m_merge_when_not_matched_isValid;

    QString m_merge_clause;
    bool m_merge_clause_isSet;
    bool m_merge_clause_isValid;

    QString m_crawler_connection;
    bool m_crawler_connection_isSet;
    bool m_crawler_connection_isValid;

    QList m_table_schema;
    bool m_table_schema_isSet;
    bool m_table_schema_isValid;

    QString m_staging_table;
    bool m_staging_table_isSet;
    bool m_staging_table_isValid;

    QList m_selected_columns;
    bool m_selected_columns_isSet;
    bool m_selected_columns_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAmazonRedshiftSource_Data)

#endif // OAIAmazonRedshiftSource_Data_H
