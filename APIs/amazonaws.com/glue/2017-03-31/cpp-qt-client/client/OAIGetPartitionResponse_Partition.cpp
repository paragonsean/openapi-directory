/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPartitionResponse_Partition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPartitionResponse_Partition::OAIGetPartitionResponse_Partition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPartitionResponse_Partition::OAIGetPartitionResponse_Partition() {
    this->initializeModel();
}

OAIGetPartitionResponse_Partition::~OAIGetPartitionResponse_Partition() {}

void OAIGetPartitionResponse_Partition::initializeModel() {

    m_values_isSet = false;
    m_values_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_access_time_isSet = false;
    m_last_access_time_isValid = false;

    m_storage_descriptor_isSet = false;
    m_storage_descriptor_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_last_analyzed_time_isSet = false;
    m_last_analyzed_time_isValid = false;

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;
}

void OAIGetPartitionResponse_Partition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPartitionResponse_Partition::fromJsonObject(QJsonObject json) {

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_access_time_isValid = ::OpenAPI::fromJsonValue(m_last_access_time, json[QString("LastAccessTime")]);
    m_last_access_time_isSet = !json[QString("LastAccessTime")].isNull() && m_last_access_time_isValid;

    m_storage_descriptor_isValid = ::OpenAPI::fromJsonValue(m_storage_descriptor, json[QString("StorageDescriptor")]);
    m_storage_descriptor_isSet = !json[QString("StorageDescriptor")].isNull() && m_storage_descriptor_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_last_analyzed_time_isValid = ::OpenAPI::fromJsonValue(m_last_analyzed_time, json[QString("LastAnalyzedTime")]);
    m_last_analyzed_time_isSet = !json[QString("LastAnalyzedTime")].isNull() && m_last_analyzed_time_isValid;

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;
}

QString OAIGetPartitionResponse_Partition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPartitionResponse_Partition::asJsonObject() const {
    QJsonObject obj;
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_access_time_isSet) {
        obj.insert(QString("LastAccessTime"), ::OpenAPI::toJsonValue(m_last_access_time));
    }
    if (m_storage_descriptor.isSet()) {
        obj.insert(QString("StorageDescriptor"), ::OpenAPI::toJsonValue(m_storage_descriptor));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_last_analyzed_time_isSet) {
        obj.insert(QString("LastAnalyzedTime"), ::OpenAPI::toJsonValue(m_last_analyzed_time));
    }
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    return obj;
}

QList OAIGetPartitionResponse_Partition::getValues() const {
    return m_values;
}
void OAIGetPartitionResponse_Partition::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGetPartitionResponse_Partition::is_values_Valid() const{
    return m_values_isValid;
}

QString OAIGetPartitionResponse_Partition::getDatabaseName() const {
    return m_database_name;
}
void OAIGetPartitionResponse_Partition::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIGetPartitionResponse_Partition::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIGetPartitionResponse_Partition::getTableName() const {
    return m_table_name;
}
void OAIGetPartitionResponse_Partition::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIGetPartitionResponse_Partition::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QDateTime OAIGetPartitionResponse_Partition::getCreationTime() const {
    return m_creation_time;
}
void OAIGetPartitionResponse_Partition::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetPartitionResponse_Partition::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIGetPartitionResponse_Partition::getLastAccessTime() const {
    return m_last_access_time;
}
void OAIGetPartitionResponse_Partition::setLastAccessTime(const QDateTime &last_access_time) {
    m_last_access_time = last_access_time;
    m_last_access_time_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_last_access_time_Set() const{
    return m_last_access_time_isSet;
}

bool OAIGetPartitionResponse_Partition::is_last_access_time_Valid() const{
    return m_last_access_time_isValid;
}

OAIPartitionInput_StorageDescriptor OAIGetPartitionResponse_Partition::getStorageDescriptor() const {
    return m_storage_descriptor;
}
void OAIGetPartitionResponse_Partition::setStorageDescriptor(const OAIPartitionInput_StorageDescriptor &storage_descriptor) {
    m_storage_descriptor = storage_descriptor;
    m_storage_descriptor_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_storage_descriptor_Set() const{
    return m_storage_descriptor_isSet;
}

bool OAIGetPartitionResponse_Partition::is_storage_descriptor_Valid() const{
    return m_storage_descriptor_isValid;
}

QMap OAIGetPartitionResponse_Partition::getParameters() const {
    return m_parameters;
}
void OAIGetPartitionResponse_Partition::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGetPartitionResponse_Partition::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QDateTime OAIGetPartitionResponse_Partition::getLastAnalyzedTime() const {
    return m_last_analyzed_time;
}
void OAIGetPartitionResponse_Partition::setLastAnalyzedTime(const QDateTime &last_analyzed_time) {
    m_last_analyzed_time = last_analyzed_time;
    m_last_analyzed_time_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_last_analyzed_time_Set() const{
    return m_last_analyzed_time_isSet;
}

bool OAIGetPartitionResponse_Partition::is_last_analyzed_time_Valid() const{
    return m_last_analyzed_time_isValid;
}

QString OAIGetPartitionResponse_Partition::getCatalogId() const {
    return m_catalog_id;
}
void OAIGetPartitionResponse_Partition::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIGetPartitionResponse_Partition::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIGetPartitionResponse_Partition::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

bool OAIGetPartitionResponse_Partition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_analyzed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPartitionResponse_Partition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
