/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowRunStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowRunStatistics::OAIWorkflowRunStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowRunStatistics::OAIWorkflowRunStatistics() {
    this->initializeModel();
}

OAIWorkflowRunStatistics::~OAIWorkflowRunStatistics() {}

void OAIWorkflowRunStatistics::initializeModel() {

    m_total_actions_isSet = false;
    m_total_actions_isValid = false;

    m_timeout_actions_isSet = false;
    m_timeout_actions_isValid = false;

    m_failed_actions_isSet = false;
    m_failed_actions_isValid = false;

    m_stopped_actions_isSet = false;
    m_stopped_actions_isValid = false;

    m_succeeded_actions_isSet = false;
    m_succeeded_actions_isValid = false;

    m_running_actions_isSet = false;
    m_running_actions_isValid = false;

    m_errored_actions_isSet = false;
    m_errored_actions_isValid = false;

    m_waiting_actions_isSet = false;
    m_waiting_actions_isValid = false;
}

void OAIWorkflowRunStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowRunStatistics::fromJsonObject(QJsonObject json) {

    m_total_actions_isValid = ::OpenAPI::fromJsonValue(m_total_actions, json[QString("TotalActions")]);
    m_total_actions_isSet = !json[QString("TotalActions")].isNull() && m_total_actions_isValid;

    m_timeout_actions_isValid = ::OpenAPI::fromJsonValue(m_timeout_actions, json[QString("TimeoutActions")]);
    m_timeout_actions_isSet = !json[QString("TimeoutActions")].isNull() && m_timeout_actions_isValid;

    m_failed_actions_isValid = ::OpenAPI::fromJsonValue(m_failed_actions, json[QString("FailedActions")]);
    m_failed_actions_isSet = !json[QString("FailedActions")].isNull() && m_failed_actions_isValid;

    m_stopped_actions_isValid = ::OpenAPI::fromJsonValue(m_stopped_actions, json[QString("StoppedActions")]);
    m_stopped_actions_isSet = !json[QString("StoppedActions")].isNull() && m_stopped_actions_isValid;

    m_succeeded_actions_isValid = ::OpenAPI::fromJsonValue(m_succeeded_actions, json[QString("SucceededActions")]);
    m_succeeded_actions_isSet = !json[QString("SucceededActions")].isNull() && m_succeeded_actions_isValid;

    m_running_actions_isValid = ::OpenAPI::fromJsonValue(m_running_actions, json[QString("RunningActions")]);
    m_running_actions_isSet = !json[QString("RunningActions")].isNull() && m_running_actions_isValid;

    m_errored_actions_isValid = ::OpenAPI::fromJsonValue(m_errored_actions, json[QString("ErroredActions")]);
    m_errored_actions_isSet = !json[QString("ErroredActions")].isNull() && m_errored_actions_isValid;

    m_waiting_actions_isValid = ::OpenAPI::fromJsonValue(m_waiting_actions, json[QString("WaitingActions")]);
    m_waiting_actions_isSet = !json[QString("WaitingActions")].isNull() && m_waiting_actions_isValid;
}

QString OAIWorkflowRunStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowRunStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_total_actions_isSet) {
        obj.insert(QString("TotalActions"), ::OpenAPI::toJsonValue(m_total_actions));
    }
    if (m_timeout_actions_isSet) {
        obj.insert(QString("TimeoutActions"), ::OpenAPI::toJsonValue(m_timeout_actions));
    }
    if (m_failed_actions_isSet) {
        obj.insert(QString("FailedActions"), ::OpenAPI::toJsonValue(m_failed_actions));
    }
    if (m_stopped_actions_isSet) {
        obj.insert(QString("StoppedActions"), ::OpenAPI::toJsonValue(m_stopped_actions));
    }
    if (m_succeeded_actions_isSet) {
        obj.insert(QString("SucceededActions"), ::OpenAPI::toJsonValue(m_succeeded_actions));
    }
    if (m_running_actions_isSet) {
        obj.insert(QString("RunningActions"), ::OpenAPI::toJsonValue(m_running_actions));
    }
    if (m_errored_actions_isSet) {
        obj.insert(QString("ErroredActions"), ::OpenAPI::toJsonValue(m_errored_actions));
    }
    if (m_waiting_actions_isSet) {
        obj.insert(QString("WaitingActions"), ::OpenAPI::toJsonValue(m_waiting_actions));
    }
    return obj;
}

qint32 OAIWorkflowRunStatistics::getTotalActions() const {
    return m_total_actions;
}
void OAIWorkflowRunStatistics::setTotalActions(const qint32 &total_actions) {
    m_total_actions = total_actions;
    m_total_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_total_actions_Set() const{
    return m_total_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_total_actions_Valid() const{
    return m_total_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getTimeoutActions() const {
    return m_timeout_actions;
}
void OAIWorkflowRunStatistics::setTimeoutActions(const qint32 &timeout_actions) {
    m_timeout_actions = timeout_actions;
    m_timeout_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_timeout_actions_Set() const{
    return m_timeout_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_timeout_actions_Valid() const{
    return m_timeout_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getFailedActions() const {
    return m_failed_actions;
}
void OAIWorkflowRunStatistics::setFailedActions(const qint32 &failed_actions) {
    m_failed_actions = failed_actions;
    m_failed_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_failed_actions_Set() const{
    return m_failed_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_failed_actions_Valid() const{
    return m_failed_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getStoppedActions() const {
    return m_stopped_actions;
}
void OAIWorkflowRunStatistics::setStoppedActions(const qint32 &stopped_actions) {
    m_stopped_actions = stopped_actions;
    m_stopped_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_stopped_actions_Set() const{
    return m_stopped_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_stopped_actions_Valid() const{
    return m_stopped_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getSucceededActions() const {
    return m_succeeded_actions;
}
void OAIWorkflowRunStatistics::setSucceededActions(const qint32 &succeeded_actions) {
    m_succeeded_actions = succeeded_actions;
    m_succeeded_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_succeeded_actions_Set() const{
    return m_succeeded_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_succeeded_actions_Valid() const{
    return m_succeeded_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getRunningActions() const {
    return m_running_actions;
}
void OAIWorkflowRunStatistics::setRunningActions(const qint32 &running_actions) {
    m_running_actions = running_actions;
    m_running_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_running_actions_Set() const{
    return m_running_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_running_actions_Valid() const{
    return m_running_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getErroredActions() const {
    return m_errored_actions;
}
void OAIWorkflowRunStatistics::setErroredActions(const qint32 &errored_actions) {
    m_errored_actions = errored_actions;
    m_errored_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_errored_actions_Set() const{
    return m_errored_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_errored_actions_Valid() const{
    return m_errored_actions_isValid;
}

qint32 OAIWorkflowRunStatistics::getWaitingActions() const {
    return m_waiting_actions;
}
void OAIWorkflowRunStatistics::setWaitingActions(const qint32 &waiting_actions) {
    m_waiting_actions = waiting_actions;
    m_waiting_actions_isSet = true;
}

bool OAIWorkflowRunStatistics::is_waiting_actions_Set() const{
    return m_waiting_actions_isSet;
}

bool OAIWorkflowRunStatistics::is_waiting_actions_Valid() const{
    return m_waiting_actions_isValid;
}

bool OAIWorkflowRunStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errored_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waiting_actions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowRunStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
