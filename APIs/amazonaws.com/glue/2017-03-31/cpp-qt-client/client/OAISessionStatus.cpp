/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionStatus::OAISessionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionStatus::OAISessionStatus() {
    this->initializeModel();
}

OAISessionStatus::~OAISessionStatus() {}

void OAISessionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISessionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISessionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROVISIONING", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionStatus::PROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionStatus::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISessionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISessionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISessionStatus::PROVISIONING:
            val = "PROVISIONING";
            break;
        case eOAISessionStatus::READY:
            val = "READY";
            break;
        case eOAISessionStatus::FAILED:
            val = "FAILED";
            break;
        case eOAISessionStatus::TIMEOUT:
            val = "TIMEOUT";
            break;
        case eOAISessionStatus::STOPPING:
            val = "STOPPING";
            break;
        case eOAISessionStatus::STOPPED:
            val = "STOPPED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISessionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISessionStatus::eOAISessionStatus OAISessionStatus::getValue() const {
    return m_value;
}

void OAISessionStatus::setValue(const OAISessionStatus::eOAISessionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISessionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAISessionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
