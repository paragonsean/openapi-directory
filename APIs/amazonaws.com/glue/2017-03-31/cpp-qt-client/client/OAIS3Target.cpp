/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Target::OAIS3Target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Target::OAIS3Target() {
    this->initializeModel();
}

OAIS3Target::~OAIS3Target() {}

void OAIS3Target::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_sample_size_isSet = false;
    m_sample_size_isValid = false;

    m_event_queue_arn_isSet = false;
    m_event_queue_arn_isValid = false;

    m_dlq_event_queue_arn_isSet = false;
    m_dlq_event_queue_arn_isValid = false;
}

void OAIS3Target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Target::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("Exclusions")]);
    m_exclusions_isSet = !json[QString("Exclusions")].isNull() && m_exclusions_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("ConnectionName")]);
    m_connection_name_isSet = !json[QString("ConnectionName")].isNull() && m_connection_name_isValid;

    m_sample_size_isValid = ::OpenAPI::fromJsonValue(m_sample_size, json[QString("SampleSize")]);
    m_sample_size_isSet = !json[QString("SampleSize")].isNull() && m_sample_size_isValid;

    m_event_queue_arn_isValid = ::OpenAPI::fromJsonValue(m_event_queue_arn, json[QString("EventQueueArn")]);
    m_event_queue_arn_isSet = !json[QString("EventQueueArn")].isNull() && m_event_queue_arn_isValid;

    m_dlq_event_queue_arn_isValid = ::OpenAPI::fromJsonValue(m_dlq_event_queue_arn, json[QString("DlqEventQueueArn")]);
    m_dlq_event_queue_arn_isSet = !json[QString("DlqEventQueueArn")].isNull() && m_dlq_event_queue_arn_isValid;
}

QString OAIS3Target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Target::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_exclusions.isSet()) {
        obj.insert(QString("Exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("ConnectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_sample_size_isSet) {
        obj.insert(QString("SampleSize"), ::OpenAPI::toJsonValue(m_sample_size));
    }
    if (m_event_queue_arn_isSet) {
        obj.insert(QString("EventQueueArn"), ::OpenAPI::toJsonValue(m_event_queue_arn));
    }
    if (m_dlq_event_queue_arn_isSet) {
        obj.insert(QString("DlqEventQueueArn"), ::OpenAPI::toJsonValue(m_dlq_event_queue_arn));
    }
    return obj;
}

QString OAIS3Target::getPath() const {
    return m_path;
}
void OAIS3Target::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIS3Target::is_path_Set() const{
    return m_path_isSet;
}

bool OAIS3Target::is_path_Valid() const{
    return m_path_isValid;
}

QList OAIS3Target::getExclusions() const {
    return m_exclusions;
}
void OAIS3Target::setExclusions(const QList &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAIS3Target::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAIS3Target::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QString OAIS3Target::getConnectionName() const {
    return m_connection_name;
}
void OAIS3Target::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIS3Target::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIS3Target::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

qint32 OAIS3Target::getSampleSize() const {
    return m_sample_size;
}
void OAIS3Target::setSampleSize(const qint32 &sample_size) {
    m_sample_size = sample_size;
    m_sample_size_isSet = true;
}

bool OAIS3Target::is_sample_size_Set() const{
    return m_sample_size_isSet;
}

bool OAIS3Target::is_sample_size_Valid() const{
    return m_sample_size_isValid;
}

QString OAIS3Target::getEventQueueArn() const {
    return m_event_queue_arn;
}
void OAIS3Target::setEventQueueArn(const QString &event_queue_arn) {
    m_event_queue_arn = event_queue_arn;
    m_event_queue_arn_isSet = true;
}

bool OAIS3Target::is_event_queue_arn_Set() const{
    return m_event_queue_arn_isSet;
}

bool OAIS3Target::is_event_queue_arn_Valid() const{
    return m_event_queue_arn_isValid;
}

QString OAIS3Target::getDlqEventQueueArn() const {
    return m_dlq_event_queue_arn;
}
void OAIS3Target::setDlqEventQueueArn(const QString &dlq_event_queue_arn) {
    m_dlq_event_queue_arn = dlq_event_queue_arn;
    m_dlq_event_queue_arn_isSet = true;
}

bool OAIS3Target::is_dlq_event_queue_arn_Set() const{
    return m_dlq_event_queue_arn_isSet;
}

bool OAIS3Target::is_dlq_event_queue_arn_Valid() const{
    return m_dlq_event_queue_arn_isValid;
}

bool OAIS3Target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_queue_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dlq_event_queue_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
