/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSourceControlFromJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSourceControlFromJobRequest::OAIUpdateSourceControlFromJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSourceControlFromJobRequest::OAIUpdateSourceControlFromJobRequest() {
    this->initializeModel();
}

OAIUpdateSourceControlFromJobRequest::~OAIUpdateSourceControlFromJobRequest() {}

void OAIUpdateSourceControlFromJobRequest::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_repository_owner_isSet = false;
    m_repository_owner_isValid = false;

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_auth_strategy_isSet = false;
    m_auth_strategy_isValid = false;

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;
}

void OAIUpdateSourceControlFromJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSourceControlFromJobRequest::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("Provider")]);
    m_provider_isSet = !json[QString("Provider")].isNull() && m_provider_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("RepositoryName")]);
    m_repository_name_isSet = !json[QString("RepositoryName")].isNull() && m_repository_name_isValid;

    m_repository_owner_isValid = ::OpenAPI::fromJsonValue(m_repository_owner, json[QString("RepositoryOwner")]);
    m_repository_owner_isSet = !json[QString("RepositoryOwner")].isNull() && m_repository_owner_isValid;

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("BranchName")]);
    m_branch_name_isSet = !json[QString("BranchName")].isNull() && m_branch_name_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("Folder")]);
    m_folder_isSet = !json[QString("Folder")].isNull() && m_folder_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("CommitId")]);
    m_commit_id_isSet = !json[QString("CommitId")].isNull() && m_commit_id_isValid;

    m_auth_strategy_isValid = ::OpenAPI::fromJsonValue(m_auth_strategy, json[QString("AuthStrategy")]);
    m_auth_strategy_isSet = !json[QString("AuthStrategy")].isNull() && m_auth_strategy_isValid;

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("AuthToken")]);
    m_auth_token_isSet = !json[QString("AuthToken")].isNull() && m_auth_token_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSourceControlFromJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("Provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("RepositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_repository_owner_isSet) {
        obj.insert(QString("RepositoryOwner"), ::OpenAPI::toJsonValue(m_repository_owner));
    }
    if (m_branch_name_isSet) {
        obj.insert(QString("BranchName"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_folder_isSet) {
        obj.insert(QString("Folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("CommitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_auth_strategy.isSet()) {
        obj.insert(QString("AuthStrategy"), ::OpenAPI::toJsonValue(m_auth_strategy));
    }
    if (m_auth_token_isSet) {
        obj.insert(QString("AuthToken"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    return obj;
}

QString OAIUpdateSourceControlFromJobRequest::getJobName() const {
    return m_job_name;
}
void OAIUpdateSourceControlFromJobRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAISourceControlProvider OAIUpdateSourceControlFromJobRequest::getProvider() const {
    return m_provider;
}
void OAIUpdateSourceControlFromJobRequest::setProvider(const OAISourceControlProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAIUpdateSourceControlFromJobRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::getRepositoryOwner() const {
    return m_repository_owner;
}
void OAIUpdateSourceControlFromJobRequest::setRepositoryOwner(const QString &repository_owner) {
    m_repository_owner = repository_owner;
    m_repository_owner_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_repository_owner_Set() const{
    return m_repository_owner_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_repository_owner_Valid() const{
    return m_repository_owner_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::getBranchName() const {
    return m_branch_name;
}
void OAIUpdateSourceControlFromJobRequest::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::getFolder() const {
    return m_folder;
}
void OAIUpdateSourceControlFromJobRequest::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::getCommitId() const {
    return m_commit_id;
}
void OAIUpdateSourceControlFromJobRequest::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

OAISourceControlAuthStrategy OAIUpdateSourceControlFromJobRequest::getAuthStrategy() const {
    return m_auth_strategy;
}
void OAIUpdateSourceControlFromJobRequest::setAuthStrategy(const OAISourceControlAuthStrategy &auth_strategy) {
    m_auth_strategy = auth_strategy;
    m_auth_strategy_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_auth_strategy_Set() const{
    return m_auth_strategy_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_auth_strategy_Valid() const{
    return m_auth_strategy_isValid;
}

QString OAIUpdateSourceControlFromJobRequest::getAuthToken() const {
    return m_auth_token;
}
void OAIUpdateSourceControlFromJobRequest::setAuthToken(const QString &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAIUpdateSourceControlFromJobRequest::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAIUpdateSourceControlFromJobRequest::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

bool OAIUpdateSourceControlFromJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSourceControlFromJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
