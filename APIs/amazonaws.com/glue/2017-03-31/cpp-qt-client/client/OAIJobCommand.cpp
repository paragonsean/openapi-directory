/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobCommand::OAIJobCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobCommand::OAIJobCommand() {
    this->initializeModel();
}

OAIJobCommand::~OAIJobCommand() {}

void OAIJobCommand::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_script_location_isSet = false;
    m_script_location_isValid = false;

    m_python_version_isSet = false;
    m_python_version_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;
}

void OAIJobCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobCommand::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_script_location_isValid = ::OpenAPI::fromJsonValue(m_script_location, json[QString("ScriptLocation")]);
    m_script_location_isSet = !json[QString("ScriptLocation")].isNull() && m_script_location_isValid;

    m_python_version_isValid = ::OpenAPI::fromJsonValue(m_python_version, json[QString("PythonVersion")]);
    m_python_version_isSet = !json[QString("PythonVersion")].isNull() && m_python_version_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("Runtime")]);
    m_runtime_isSet = !json[QString("Runtime")].isNull() && m_runtime_isValid;
}

QString OAIJobCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_script_location_isSet) {
        obj.insert(QString("ScriptLocation"), ::OpenAPI::toJsonValue(m_script_location));
    }
    if (m_python_version_isSet) {
        obj.insert(QString("PythonVersion"), ::OpenAPI::toJsonValue(m_python_version));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("Runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    return obj;
}

QString OAIJobCommand::getName() const {
    return m_name;
}
void OAIJobCommand::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobCommand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobCommand::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJobCommand::getScriptLocation() const {
    return m_script_location;
}
void OAIJobCommand::setScriptLocation(const QString &script_location) {
    m_script_location = script_location;
    m_script_location_isSet = true;
}

bool OAIJobCommand::is_script_location_Set() const{
    return m_script_location_isSet;
}

bool OAIJobCommand::is_script_location_Valid() const{
    return m_script_location_isValid;
}

QString OAIJobCommand::getPythonVersion() const {
    return m_python_version;
}
void OAIJobCommand::setPythonVersion(const QString &python_version) {
    m_python_version = python_version;
    m_python_version_isSet = true;
}

bool OAIJobCommand::is_python_version_Set() const{
    return m_python_version_isSet;
}

bool OAIJobCommand::is_python_version_Valid() const{
    return m_python_version_isValid;
}

QString OAIJobCommand::getRuntime() const {
    return m_runtime;
}
void OAIJobCommand::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIJobCommand::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIJobCommand::is_runtime_Valid() const{
    return m_runtime_isValid;
}

bool OAIJobCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
