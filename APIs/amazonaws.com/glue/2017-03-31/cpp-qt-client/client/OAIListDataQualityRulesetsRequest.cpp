/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataQualityRulesetsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataQualityRulesetsRequest::OAIListDataQualityRulesetsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataQualityRulesetsRequest::OAIListDataQualityRulesetsRequest() {
    this->initializeModel();
}

OAIListDataQualityRulesetsRequest::~OAIListDataQualityRulesetsRequest() {}

void OAIListDataQualityRulesetsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIListDataQualityRulesetsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataQualityRulesetsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIListDataQualityRulesetsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataQualityRulesetsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIListDataQualityRulesetsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListDataQualityRulesetsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDataQualityRulesetsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDataQualityRulesetsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListDataQualityRulesetsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListDataQualityRulesetsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListDataQualityRulesetsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListDataQualityRulesetsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIListDataQualityRulesetsRequest_Filter OAIListDataQualityRulesetsRequest::getFilter() const {
    return m_filter;
}
void OAIListDataQualityRulesetsRequest::setFilter(const OAIListDataQualityRulesetsRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListDataQualityRulesetsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListDataQualityRulesetsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap OAIListDataQualityRulesetsRequest::getTags() const {
    return m_tags;
}
void OAIListDataQualityRulesetsRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIListDataQualityRulesetsRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIListDataQualityRulesetsRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIListDataQualityRulesetsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataQualityRulesetsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
