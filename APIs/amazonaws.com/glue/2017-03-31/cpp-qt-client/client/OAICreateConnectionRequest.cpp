/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConnectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConnectionRequest::OAICreateConnectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConnectionRequest::OAICreateConnectionRequest() {
    this->initializeModel();
}

OAICreateConnectionRequest::~OAICreateConnectionRequest() {}

void OAICreateConnectionRequest::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_connection_input_isSet = false;
    m_connection_input_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateConnectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConnectionRequest::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_connection_input_isValid = ::OpenAPI::fromJsonValue(m_connection_input, json[QString("ConnectionInput")]);
    m_connection_input_isSet = !json[QString("ConnectionInput")].isNull() && m_connection_input_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateConnectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConnectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_connection_input.isSet()) {
        obj.insert(QString("ConnectionInput"), ::OpenAPI::toJsonValue(m_connection_input));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateConnectionRequest::getCatalogId() const {
    return m_catalog_id;
}
void OAICreateConnectionRequest::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAICreateConnectionRequest::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICreateConnectionRequest::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

OAICreateConnectionRequest_ConnectionInput OAICreateConnectionRequest::getConnectionInput() const {
    return m_connection_input;
}
void OAICreateConnectionRequest::setConnectionInput(const OAICreateConnectionRequest_ConnectionInput &connection_input) {
    m_connection_input = connection_input;
    m_connection_input_isSet = true;
}

bool OAICreateConnectionRequest::is_connection_input_Set() const{
    return m_connection_input_isSet;
}

bool OAICreateConnectionRequest::is_connection_input_Valid() const{
    return m_connection_input_isValid;
}

QMap OAICreateConnectionRequest::getTags() const {
    return m_tags;
}
void OAICreateConnectionRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateConnectionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateConnectionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateConnectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConnectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_input_isValid && true;
}

} // namespace OpenAPI
