/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateJobRequest_JobUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateJobRequest_JobUpdate::OAIUpdateJobRequest_JobUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateJobRequest_JobUpdate::OAIUpdateJobRequest_JobUpdate() {
    this->initializeModel();
}

OAIUpdateJobRequest_JobUpdate::~OAIUpdateJobRequest_JobUpdate() {}

void OAIUpdateJobRequest_JobUpdate::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_execution_property_isSet = false;
    m_execution_property_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_default_arguments_isSet = false;
    m_default_arguments_isValid = false;

    m_non_overridable_arguments_isSet = false;
    m_non_overridable_arguments_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_max_retries_isSet = false;
    m_max_retries_isValid = false;

    m_allocated_capacity_isSet = false;
    m_allocated_capacity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_security_configuration_isSet = false;
    m_security_configuration_isValid = false;

    m_notification_property_isSet = false;
    m_notification_property_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;

    m_code_gen_configuration_nodes_isSet = false;
    m_code_gen_configuration_nodes_isValid = false;

    m_execution_class_isSet = false;
    m_execution_class_isValid = false;

    m_source_control_details_isSet = false;
    m_source_control_details_isValid = false;
}

void OAIUpdateJobRequest_JobUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateJobRequest_JobUpdate::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("LogUri")]);
    m_log_uri_isSet = !json[QString("LogUri")].isNull() && m_log_uri_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_execution_property_isValid = ::OpenAPI::fromJsonValue(m_execution_property, json[QString("ExecutionProperty")]);
    m_execution_property_isSet = !json[QString("ExecutionProperty")].isNull() && m_execution_property_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("Command")]);
    m_command_isSet = !json[QString("Command")].isNull() && m_command_isValid;

    m_default_arguments_isValid = ::OpenAPI::fromJsonValue(m_default_arguments, json[QString("DefaultArguments")]);
    m_default_arguments_isSet = !json[QString("DefaultArguments")].isNull() && m_default_arguments_isValid;

    m_non_overridable_arguments_isValid = ::OpenAPI::fromJsonValue(m_non_overridable_arguments, json[QString("NonOverridableArguments")]);
    m_non_overridable_arguments_isSet = !json[QString("NonOverridableArguments")].isNull() && m_non_overridable_arguments_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("Connections")]);
    m_connections_isSet = !json[QString("Connections")].isNull() && m_connections_isValid;

    m_max_retries_isValid = ::OpenAPI::fromJsonValue(m_max_retries, json[QString("MaxRetries")]);
    m_max_retries_isSet = !json[QString("MaxRetries")].isNull() && m_max_retries_isValid;

    m_allocated_capacity_isValid = ::OpenAPI::fromJsonValue(m_allocated_capacity, json[QString("AllocatedCapacity")]);
    m_allocated_capacity_isSet = !json[QString("AllocatedCapacity")].isNull() && m_allocated_capacity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("WorkerType")]);
    m_worker_type_isSet = !json[QString("WorkerType")].isNull() && m_worker_type_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("NumberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("NumberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_security_configuration, json[QString("SecurityConfiguration")]);
    m_security_configuration_isSet = !json[QString("SecurityConfiguration")].isNull() && m_security_configuration_isValid;

    m_notification_property_isValid = ::OpenAPI::fromJsonValue(m_notification_property, json[QString("NotificationProperty")]);
    m_notification_property_isSet = !json[QString("NotificationProperty")].isNull() && m_notification_property_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;

    m_code_gen_configuration_nodes_isValid = ::OpenAPI::fromJsonValue(m_code_gen_configuration_nodes, json[QString("CodeGenConfigurationNodes")]);
    m_code_gen_configuration_nodes_isSet = !json[QString("CodeGenConfigurationNodes")].isNull() && m_code_gen_configuration_nodes_isValid;

    m_execution_class_isValid = ::OpenAPI::fromJsonValue(m_execution_class, json[QString("ExecutionClass")]);
    m_execution_class_isSet = !json[QString("ExecutionClass")].isNull() && m_execution_class_isValid;

    m_source_control_details_isValid = ::OpenAPI::fromJsonValue(m_source_control_details, json[QString("SourceControlDetails")]);
    m_source_control_details_isSet = !json[QString("SourceControlDetails")].isNull() && m_source_control_details_isValid;
}

QString OAIUpdateJobRequest_JobUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateJobRequest_JobUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("LogUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_execution_property.isSet()) {
        obj.insert(QString("ExecutionProperty"), ::OpenAPI::toJsonValue(m_execution_property));
    }
    if (m_command.isSet()) {
        obj.insert(QString("Command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_default_arguments.isSet()) {
        obj.insert(QString("DefaultArguments"), ::OpenAPI::toJsonValue(m_default_arguments));
    }
    if (m_non_overridable_arguments.isSet()) {
        obj.insert(QString("NonOverridableArguments"), ::OpenAPI::toJsonValue(m_non_overridable_arguments));
    }
    if (m_connections.isSet()) {
        obj.insert(QString("Connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_max_retries_isSet) {
        obj.insert(QString("MaxRetries"), ::OpenAPI::toJsonValue(m_max_retries));
    }
    if (m_allocated_capacity_isSet) {
        obj.insert(QString("AllocatedCapacity"), ::OpenAPI::toJsonValue(m_allocated_capacity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_worker_type.isSet()) {
        obj.insert(QString("WorkerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("NumberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_security_configuration_isSet) {
        obj.insert(QString("SecurityConfiguration"), ::OpenAPI::toJsonValue(m_security_configuration));
    }
    if (m_notification_property.isSet()) {
        obj.insert(QString("NotificationProperty"), ::OpenAPI::toJsonValue(m_notification_property));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    if (m_code_gen_configuration_nodes.isSet()) {
        obj.insert(QString("CodeGenConfigurationNodes"), ::OpenAPI::toJsonValue(m_code_gen_configuration_nodes));
    }
    if (m_execution_class.isSet()) {
        obj.insert(QString("ExecutionClass"), ::OpenAPI::toJsonValue(m_execution_class));
    }
    if (m_source_control_details.isSet()) {
        obj.insert(QString("SourceControlDetails"), ::OpenAPI::toJsonValue(m_source_control_details));
    }
    return obj;
}

QString OAIUpdateJobRequest_JobUpdate::getDescription() const {
    return m_description;
}
void OAIUpdateJobRequest_JobUpdate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateJobRequest_JobUpdate::getLogUri() const {
    return m_log_uri;
}
void OAIUpdateJobRequest_JobUpdate::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

QString OAIUpdateJobRequest_JobUpdate::getRole() const {
    return m_role;
}
void OAIUpdateJobRequest_JobUpdate::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_role_Valid() const{
    return m_role_isValid;
}

OAICreateJobRequest_ExecutionProperty OAIUpdateJobRequest_JobUpdate::getExecutionProperty() const {
    return m_execution_property;
}
void OAIUpdateJobRequest_JobUpdate::setExecutionProperty(const OAICreateJobRequest_ExecutionProperty &execution_property) {
    m_execution_property = execution_property;
    m_execution_property_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_execution_property_Set() const{
    return m_execution_property_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_execution_property_Valid() const{
    return m_execution_property_isValid;
}

OAIJobUpdate_Command OAIUpdateJobRequest_JobUpdate::getCommand() const {
    return m_command;
}
void OAIUpdateJobRequest_JobUpdate::setCommand(const OAIJobUpdate_Command &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_command_Set() const{
    return m_command_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_command_Valid() const{
    return m_command_isValid;
}

QMap OAIUpdateJobRequest_JobUpdate::getDefaultArguments() const {
    return m_default_arguments;
}
void OAIUpdateJobRequest_JobUpdate::setDefaultArguments(const QMap &default_arguments) {
    m_default_arguments = default_arguments;
    m_default_arguments_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_default_arguments_Set() const{
    return m_default_arguments_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_default_arguments_Valid() const{
    return m_default_arguments_isValid;
}

QMap OAIUpdateJobRequest_JobUpdate::getNonOverridableArguments() const {
    return m_non_overridable_arguments;
}
void OAIUpdateJobRequest_JobUpdate::setNonOverridableArguments(const QMap &non_overridable_arguments) {
    m_non_overridable_arguments = non_overridable_arguments;
    m_non_overridable_arguments_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_non_overridable_arguments_Set() const{
    return m_non_overridable_arguments_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_non_overridable_arguments_Valid() const{
    return m_non_overridable_arguments_isValid;
}

OAICreateJobRequest_Connections OAIUpdateJobRequest_JobUpdate::getConnections() const {
    return m_connections;
}
void OAIUpdateJobRequest_JobUpdate::setConnections(const OAICreateJobRequest_Connections &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_connections_Valid() const{
    return m_connections_isValid;
}

qint32 OAIUpdateJobRequest_JobUpdate::getMaxRetries() const {
    return m_max_retries;
}
void OAIUpdateJobRequest_JobUpdate::setMaxRetries(const qint32 &max_retries) {
    m_max_retries = max_retries;
    m_max_retries_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_max_retries_Set() const{
    return m_max_retries_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_max_retries_Valid() const{
    return m_max_retries_isValid;
}

qint32 OAIUpdateJobRequest_JobUpdate::getAllocatedCapacity() const {
    return m_allocated_capacity;
}
void OAIUpdateJobRequest_JobUpdate::setAllocatedCapacity(const qint32 &allocated_capacity) {
    m_allocated_capacity = allocated_capacity;
    m_allocated_capacity_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_allocated_capacity_Set() const{
    return m_allocated_capacity_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_allocated_capacity_Valid() const{
    return m_allocated_capacity_isValid;
}

qint32 OAIUpdateJobRequest_JobUpdate::getTimeout() const {
    return m_timeout;
}
void OAIUpdateJobRequest_JobUpdate::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_timeout_Valid() const{
    return m_timeout_isValid;
}

double OAIUpdateJobRequest_JobUpdate::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIUpdateJobRequest_JobUpdate::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

OAIWorkerType OAIUpdateJobRequest_JobUpdate::getWorkerType() const {
    return m_worker_type;
}
void OAIUpdateJobRequest_JobUpdate::setWorkerType(const OAIWorkerType &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

qint32 OAIUpdateJobRequest_JobUpdate::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIUpdateJobRequest_JobUpdate::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

QString OAIUpdateJobRequest_JobUpdate::getSecurityConfiguration() const {
    return m_security_configuration;
}
void OAIUpdateJobRequest_JobUpdate::setSecurityConfiguration(const QString &security_configuration) {
    m_security_configuration = security_configuration;
    m_security_configuration_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_security_configuration_Set() const{
    return m_security_configuration_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_security_configuration_Valid() const{
    return m_security_configuration_isValid;
}

OAIJobUpdate_NotificationProperty OAIUpdateJobRequest_JobUpdate::getNotificationProperty() const {
    return m_notification_property;
}
void OAIUpdateJobRequest_JobUpdate::setNotificationProperty(const OAIJobUpdate_NotificationProperty &notification_property) {
    m_notification_property = notification_property;
    m_notification_property_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_notification_property_Set() const{
    return m_notification_property_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_notification_property_Valid() const{
    return m_notification_property_isValid;
}

QString OAIUpdateJobRequest_JobUpdate::getGlueVersion() const {
    return m_glue_version;
}
void OAIUpdateJobRequest_JobUpdate::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

QMap OAIUpdateJobRequest_JobUpdate::getCodeGenConfigurationNodes() const {
    return m_code_gen_configuration_nodes;
}
void OAIUpdateJobRequest_JobUpdate::setCodeGenConfigurationNodes(const QMap &code_gen_configuration_nodes) {
    m_code_gen_configuration_nodes = code_gen_configuration_nodes;
    m_code_gen_configuration_nodes_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_code_gen_configuration_nodes_Set() const{
    return m_code_gen_configuration_nodes_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_code_gen_configuration_nodes_Valid() const{
    return m_code_gen_configuration_nodes_isValid;
}

OAIExecutionClass OAIUpdateJobRequest_JobUpdate::getExecutionClass() const {
    return m_execution_class;
}
void OAIUpdateJobRequest_JobUpdate::setExecutionClass(const OAIExecutionClass &execution_class) {
    m_execution_class = execution_class;
    m_execution_class_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_execution_class_Set() const{
    return m_execution_class_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_execution_class_Valid() const{
    return m_execution_class_isValid;
}

OAICreateJobRequest_SourceControlDetails OAIUpdateJobRequest_JobUpdate::getSourceControlDetails() const {
    return m_source_control_details;
}
void OAIUpdateJobRequest_JobUpdate::setSourceControlDetails(const OAICreateJobRequest_SourceControlDetails &source_control_details) {
    m_source_control_details = source_control_details;
    m_source_control_details_isSet = true;
}

bool OAIUpdateJobRequest_JobUpdate::is_source_control_details_Set() const{
    return m_source_control_details_isSet;
}

bool OAIUpdateJobRequest_JobUpdate::is_source_control_details_Valid() const{
    return m_source_control_details_isValid;
}

bool OAIUpdateJobRequest_JobUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_overridable_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_gen_configuration_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_control_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateJobRequest_JobUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
