/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartJobRunRequest.h
 *
 * 
 */

#ifndef OAIStartJobRunRequest_H
#define OAIStartJobRunRequest_H

#include <QJsonObject>

#include "OAIExecutionClass.h"
#include "OAIStartJobRunRequest_NotificationProperty.h"
#include "OAIWorkerType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStartJobRunRequest_NotificationProperty;

class OAIStartJobRunRequest : public OAIObject {
public:
    OAIStartJobRunRequest();
    OAIStartJobRunRequest(QString json);
    ~OAIStartJobRunRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    QString getJobRunId() const;
    void setJobRunId(const QString &job_run_id);
    bool is_job_run_id_Set() const;
    bool is_job_run_id_Valid() const;

    QMap getArguments() const;
    void setArguments(const QMap &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    qint32 getAllocatedCapacity() const;
    void setAllocatedCapacity(const qint32 &allocated_capacity);
    bool is_allocated_capacity_Set() const;
    bool is_allocated_capacity_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    double getMaxCapacity() const;
    void setMaxCapacity(const double &max_capacity);
    bool is_max_capacity_Set() const;
    bool is_max_capacity_Valid() const;

    QString getSecurityConfiguration() const;
    void setSecurityConfiguration(const QString &security_configuration);
    bool is_security_configuration_Set() const;
    bool is_security_configuration_Valid() const;

    OAIStartJobRunRequest_NotificationProperty getNotificationProperty() const;
    void setNotificationProperty(const OAIStartJobRunRequest_NotificationProperty &notification_property);
    bool is_notification_property_Set() const;
    bool is_notification_property_Valid() const;

    OAIWorkerType getWorkerType() const;
    void setWorkerType(const OAIWorkerType &worker_type);
    bool is_worker_type_Set() const;
    bool is_worker_type_Valid() const;

    qint32 getNumberOfWorkers() const;
    void setNumberOfWorkers(const qint32 &number_of_workers);
    bool is_number_of_workers_Set() const;
    bool is_number_of_workers_Valid() const;

    OAIExecutionClass getExecutionClass() const;
    void setExecutionClass(const OAIExecutionClass &execution_class);
    bool is_execution_class_Set() const;
    bool is_execution_class_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    QString m_job_run_id;
    bool m_job_run_id_isSet;
    bool m_job_run_id_isValid;

    QMap m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    qint32 m_allocated_capacity;
    bool m_allocated_capacity_isSet;
    bool m_allocated_capacity_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    double m_max_capacity;
    bool m_max_capacity_isSet;
    bool m_max_capacity_isValid;

    QString m_security_configuration;
    bool m_security_configuration_isSet;
    bool m_security_configuration_isValid;

    OAIStartJobRunRequest_NotificationProperty m_notification_property;
    bool m_notification_property_isSet;
    bool m_notification_property_isValid;

    OAIWorkerType m_worker_type;
    bool m_worker_type_isSet;
    bool m_worker_type_isValid;

    qint32 m_number_of_workers;
    bool m_number_of_workers_isSet;
    bool m_number_of_workers_isValid;

    OAIExecutionClass m_execution_class;
    bool m_execution_class_isSet;
    bool m_execution_class_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartJobRunRequest)

#endif // OAIStartJobRunRequest_H
