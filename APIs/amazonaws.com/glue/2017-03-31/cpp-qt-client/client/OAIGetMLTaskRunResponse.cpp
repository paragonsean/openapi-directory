/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMLTaskRunResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMLTaskRunResponse::OAIGetMLTaskRunResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMLTaskRunResponse::OAIGetMLTaskRunResponse() {
    this->initializeModel();
}

OAIGetMLTaskRunResponse::~OAIGetMLTaskRunResponse() {}

void OAIGetMLTaskRunResponse::initializeModel() {

    m_transform_id_isSet = false;
    m_transform_id_isValid = false;

    m_task_run_id_isSet = false;
    m_task_run_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_log_group_name_isSet = false;
    m_log_group_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_error_string_isSet = false;
    m_error_string_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_execution_time_isSet = false;
    m_execution_time_isValid = false;
}

void OAIGetMLTaskRunResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMLTaskRunResponse::fromJsonObject(QJsonObject json) {

    m_transform_id_isValid = ::OpenAPI::fromJsonValue(m_transform_id, json[QString("TransformId")]);
    m_transform_id_isSet = !json[QString("TransformId")].isNull() && m_transform_id_isValid;

    m_task_run_id_isValid = ::OpenAPI::fromJsonValue(m_task_run_id, json[QString("TaskRunId")]);
    m_task_run_id_isSet = !json[QString("TaskRunId")].isNull() && m_task_run_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_log_group_name_isValid = ::OpenAPI::fromJsonValue(m_log_group_name, json[QString("LogGroupName")]);
    m_log_group_name_isSet = !json[QString("LogGroupName")].isNull() && m_log_group_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_error_string_isValid = ::OpenAPI::fromJsonValue(m_error_string, json[QString("ErrorString")]);
    m_error_string_isSet = !json[QString("ErrorString")].isNull() && m_error_string_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("LastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("LastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_execution_time_isValid = ::OpenAPI::fromJsonValue(m_execution_time, json[QString("ExecutionTime")]);
    m_execution_time_isSet = !json[QString("ExecutionTime")].isNull() && m_execution_time_isValid;
}

QString OAIGetMLTaskRunResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMLTaskRunResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_transform_id_isSet) {
        obj.insert(QString("TransformId"), ::OpenAPI::toJsonValue(m_transform_id));
    }
    if (m_task_run_id_isSet) {
        obj.insert(QString("TaskRunId"), ::OpenAPI::toJsonValue(m_task_run_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_log_group_name_isSet) {
        obj.insert(QString("LogGroupName"), ::OpenAPI::toJsonValue(m_log_group_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_error_string_isSet) {
        obj.insert(QString("ErrorString"), ::OpenAPI::toJsonValue(m_error_string));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("LastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_execution_time_isSet) {
        obj.insert(QString("ExecutionTime"), ::OpenAPI::toJsonValue(m_execution_time));
    }
    return obj;
}

QString OAIGetMLTaskRunResponse::getTransformId() const {
    return m_transform_id;
}
void OAIGetMLTaskRunResponse::setTransformId(const QString &transform_id) {
    m_transform_id = transform_id;
    m_transform_id_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_transform_id_Set() const{
    return m_transform_id_isSet;
}

bool OAIGetMLTaskRunResponse::is_transform_id_Valid() const{
    return m_transform_id_isValid;
}

QString OAIGetMLTaskRunResponse::getTaskRunId() const {
    return m_task_run_id;
}
void OAIGetMLTaskRunResponse::setTaskRunId(const QString &task_run_id) {
    m_task_run_id = task_run_id;
    m_task_run_id_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_task_run_id_Set() const{
    return m_task_run_id_isSet;
}

bool OAIGetMLTaskRunResponse::is_task_run_id_Valid() const{
    return m_task_run_id_isValid;
}

OAITaskStatusType OAIGetMLTaskRunResponse::getStatus() const {
    return m_status;
}
void OAIGetMLTaskRunResponse::setStatus(const OAITaskStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetMLTaskRunResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetMLTaskRunResponse::getLogGroupName() const {
    return m_log_group_name;
}
void OAIGetMLTaskRunResponse::setLogGroupName(const QString &log_group_name) {
    m_log_group_name = log_group_name;
    m_log_group_name_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_log_group_name_Set() const{
    return m_log_group_name_isSet;
}

bool OAIGetMLTaskRunResponse::is_log_group_name_Valid() const{
    return m_log_group_name_isValid;
}

OAIGetMLTaskRunResponse_Properties OAIGetMLTaskRunResponse::getProperties() const {
    return m_properties;
}
void OAIGetMLTaskRunResponse::setProperties(const OAIGetMLTaskRunResponse_Properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGetMLTaskRunResponse::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIGetMLTaskRunResponse::getErrorString() const {
    return m_error_string;
}
void OAIGetMLTaskRunResponse::setErrorString(const QString &error_string) {
    m_error_string = error_string;
    m_error_string_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_error_string_Set() const{
    return m_error_string_isSet;
}

bool OAIGetMLTaskRunResponse::is_error_string_Valid() const{
    return m_error_string_isValid;
}

QDateTime OAIGetMLTaskRunResponse::getStartedOn() const {
    return m_started_on;
}
void OAIGetMLTaskRunResponse::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIGetMLTaskRunResponse::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAIGetMLTaskRunResponse::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIGetMLTaskRunResponse::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIGetMLTaskRunResponse::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QDateTime OAIGetMLTaskRunResponse::getCompletedOn() const {
    return m_completed_on;
}
void OAIGetMLTaskRunResponse::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIGetMLTaskRunResponse::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

qint32 OAIGetMLTaskRunResponse::getExecutionTime() const {
    return m_execution_time;
}
void OAIGetMLTaskRunResponse::setExecutionTime(const qint32 &execution_time) {
    m_execution_time = execution_time;
    m_execution_time_isSet = true;
}

bool OAIGetMLTaskRunResponse::is_execution_time_Set() const{
    return m_execution_time_isSet;
}

bool OAIGetMLTaskRunResponse::is_execution_time_Valid() const{
    return m_execution_time_isValid;
}

bool OAIGetMLTaskRunResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transform_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMLTaskRunResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
