/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteConnectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteConnectionResponse::OAIBatchDeleteConnectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteConnectionResponse::OAIBatchDeleteConnectionResponse() {
    this->initializeModel();
}

OAIBatchDeleteConnectionResponse::~OAIBatchDeleteConnectionResponse() {}

void OAIBatchDeleteConnectionResponse::initializeModel() {

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIBatchDeleteConnectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteConnectionResponse::fromJsonObject(QJsonObject json) {

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("Succeeded")]);
    m_succeeded_isSet = !json[QString("Succeeded")].isNull() && m_succeeded_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;
}

QString OAIBatchDeleteConnectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteConnectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_succeeded.isSet()) {
        obj.insert(QString("Succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QList OAIBatchDeleteConnectionResponse::getSucceeded() const {
    return m_succeeded;
}
void OAIBatchDeleteConnectionResponse::setSucceeded(const QList &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAIBatchDeleteConnectionResponse::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAIBatchDeleteConnectionResponse::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

QMap OAIBatchDeleteConnectionResponse::getErrors() const {
    return m_errors;
}
void OAIBatchDeleteConnectionResponse::setErrors(const QMap &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchDeleteConnectionResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchDeleteConnectionResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIBatchDeleteConnectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_succeeded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteConnectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
