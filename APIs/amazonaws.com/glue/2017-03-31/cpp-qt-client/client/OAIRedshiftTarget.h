/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRedshiftTarget.h
 *
 * Specifies a target that uses Amazon Redshift.
 */

#ifndef OAIRedshiftTarget_H
#define OAIRedshiftTarget_H

#include <QJsonObject>

#include "OAIRedshiftTarget_UpsertRedshiftOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRedshiftTarget_UpsertRedshiftOptions;

class OAIRedshiftTarget : public OAIObject {
public:
    OAIRedshiftTarget();
    OAIRedshiftTarget(QString json);
    ~OAIRedshiftTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getInputs() const;
    void setInputs(const QList &inputs);
    bool is_inputs_Set() const;
    bool is_inputs_Valid() const;

    QString getDatabase() const;
    void setDatabase(const QString &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getTable() const;
    void setTable(const QString &table);
    bool is_table_Set() const;
    bool is_table_Valid() const;

    QString getRedshiftTmpDir() const;
    void setRedshiftTmpDir(const QString &redshift_tmp_dir);
    bool is_redshift_tmp_dir_Set() const;
    bool is_redshift_tmp_dir_Valid() const;

    QString getTmpDirIamRole() const;
    void setTmpDirIamRole(const QString &tmp_dir_iam_role);
    bool is_tmp_dir_iam_role_Set() const;
    bool is_tmp_dir_iam_role_Valid() const;

    OAIRedshiftTarget_UpsertRedshiftOptions getUpsertRedshiftOptions() const;
    void setUpsertRedshiftOptions(const OAIRedshiftTarget_UpsertRedshiftOptions &upsert_redshift_options);
    bool is_upsert_redshift_options_Set() const;
    bool is_upsert_redshift_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_inputs;
    bool m_inputs_isSet;
    bool m_inputs_isValid;

    QString m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_table;
    bool m_table_isSet;
    bool m_table_isValid;

    QString m_redshift_tmp_dir;
    bool m_redshift_tmp_dir_isSet;
    bool m_redshift_tmp_dir_isValid;

    QString m_tmp_dir_iam_role;
    bool m_tmp_dir_iam_role_isSet;
    bool m_tmp_dir_iam_role_isValid;

    OAIRedshiftTarget_UpsertRedshiftOptions m_upsert_redshift_options;
    bool m_upsert_redshift_options_isSet;
    bool m_upsert_redshift_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRedshiftTarget)

#endif // OAIRedshiftTarget_H
