/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportLabelsTaskRunProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportLabelsTaskRunProperties::OAIImportLabelsTaskRunProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportLabelsTaskRunProperties::OAIImportLabelsTaskRunProperties() {
    this->initializeModel();
}

OAIImportLabelsTaskRunProperties::~OAIImportLabelsTaskRunProperties() {}

void OAIImportLabelsTaskRunProperties::initializeModel() {

    m_input_s3_path_isSet = false;
    m_input_s3_path_isValid = false;

    m_replace_isSet = false;
    m_replace_isValid = false;
}

void OAIImportLabelsTaskRunProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportLabelsTaskRunProperties::fromJsonObject(QJsonObject json) {

    m_input_s3_path_isValid = ::OpenAPI::fromJsonValue(m_input_s3_path, json[QString("InputS3Path")]);
    m_input_s3_path_isSet = !json[QString("InputS3Path")].isNull() && m_input_s3_path_isValid;

    m_replace_isValid = ::OpenAPI::fromJsonValue(m_replace, json[QString("Replace")]);
    m_replace_isSet = !json[QString("Replace")].isNull() && m_replace_isValid;
}

QString OAIImportLabelsTaskRunProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportLabelsTaskRunProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_input_s3_path_isSet) {
        obj.insert(QString("InputS3Path"), ::OpenAPI::toJsonValue(m_input_s3_path));
    }
    if (m_replace_isSet) {
        obj.insert(QString("Replace"), ::OpenAPI::toJsonValue(m_replace));
    }
    return obj;
}

QString OAIImportLabelsTaskRunProperties::getInputS3Path() const {
    return m_input_s3_path;
}
void OAIImportLabelsTaskRunProperties::setInputS3Path(const QString &input_s3_path) {
    m_input_s3_path = input_s3_path;
    m_input_s3_path_isSet = true;
}

bool OAIImportLabelsTaskRunProperties::is_input_s3_path_Set() const{
    return m_input_s3_path_isSet;
}

bool OAIImportLabelsTaskRunProperties::is_input_s3_path_Valid() const{
    return m_input_s3_path_isValid;
}

bool OAIImportLabelsTaskRunProperties::getReplace() const {
    return m_replace;
}
void OAIImportLabelsTaskRunProperties::setReplace(const bool &replace) {
    m_replace = replace;
    m_replace_isSet = true;
}

bool OAIImportLabelsTaskRunProperties::is_replace_Set() const{
    return m_replace_isSet;
}

bool OAIImportLabelsTaskRunProperties::is_replace_Valid() const{
    return m_replace_isValid;
}

bool OAIImportLabelsTaskRunProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportLabelsTaskRunProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
