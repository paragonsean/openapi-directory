/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataQualityResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataQualityResult::OAIDataQualityResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataQualityResult::OAIDataQualityResult() {
    this->initializeModel();
}

OAIDataQualityResult::~OAIDataQualityResult() {}

void OAIDataQualityResult::initializeModel() {

    m_result_id_isSet = false;
    m_result_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_ruleset_name_isSet = false;
    m_ruleset_name_isValid = false;

    m_evaluation_context_isSet = false;
    m_evaluation_context_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_run_id_isSet = false;
    m_job_run_id_isValid = false;

    m_ruleset_evaluation_run_id_isSet = false;
    m_ruleset_evaluation_run_id_isValid = false;

    m_rule_results_isSet = false;
    m_rule_results_isValid = false;
}

void OAIDataQualityResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataQualityResult::fromJsonObject(QJsonObject json) {

    m_result_id_isValid = ::OpenAPI::fromJsonValue(m_result_id, json[QString("ResultId")]);
    m_result_id_isSet = !json[QString("ResultId")].isNull() && m_result_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_ruleset_name_isValid = ::OpenAPI::fromJsonValue(m_ruleset_name, json[QString("RulesetName")]);
    m_ruleset_name_isSet = !json[QString("RulesetName")].isNull() && m_ruleset_name_isValid;

    m_evaluation_context_isValid = ::OpenAPI::fromJsonValue(m_evaluation_context, json[QString("EvaluationContext")]);
    m_evaluation_context_isSet = !json[QString("EvaluationContext")].isNull() && m_evaluation_context_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_run_id_isValid = ::OpenAPI::fromJsonValue(m_job_run_id, json[QString("JobRunId")]);
    m_job_run_id_isSet = !json[QString("JobRunId")].isNull() && m_job_run_id_isValid;

    m_ruleset_evaluation_run_id_isValid = ::OpenAPI::fromJsonValue(m_ruleset_evaluation_run_id, json[QString("RulesetEvaluationRunId")]);
    m_ruleset_evaluation_run_id_isSet = !json[QString("RulesetEvaluationRunId")].isNull() && m_ruleset_evaluation_run_id_isValid;

    m_rule_results_isValid = ::OpenAPI::fromJsonValue(m_rule_results, json[QString("RuleResults")]);
    m_rule_results_isSet = !json[QString("RuleResults")].isNull() && m_rule_results_isValid;
}

QString OAIDataQualityResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataQualityResult::asJsonObject() const {
    QJsonObject obj;
    if (m_result_id_isSet) {
        obj.insert(QString("ResultId"), ::OpenAPI::toJsonValue(m_result_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_ruleset_name_isSet) {
        obj.insert(QString("RulesetName"), ::OpenAPI::toJsonValue(m_ruleset_name));
    }
    if (m_evaluation_context_isSet) {
        obj.insert(QString("EvaluationContext"), ::OpenAPI::toJsonValue(m_evaluation_context));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_run_id_isSet) {
        obj.insert(QString("JobRunId"), ::OpenAPI::toJsonValue(m_job_run_id));
    }
    if (m_ruleset_evaluation_run_id_isSet) {
        obj.insert(QString("RulesetEvaluationRunId"), ::OpenAPI::toJsonValue(m_ruleset_evaluation_run_id));
    }
    if (m_rule_results.isSet()) {
        obj.insert(QString("RuleResults"), ::OpenAPI::toJsonValue(m_rule_results));
    }
    return obj;
}

QString OAIDataQualityResult::getResultId() const {
    return m_result_id;
}
void OAIDataQualityResult::setResultId(const QString &result_id) {
    m_result_id = result_id;
    m_result_id_isSet = true;
}

bool OAIDataQualityResult::is_result_id_Set() const{
    return m_result_id_isSet;
}

bool OAIDataQualityResult::is_result_id_Valid() const{
    return m_result_id_isValid;
}

double OAIDataQualityResult::getScore() const {
    return m_score;
}
void OAIDataQualityResult::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDataQualityResult::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDataQualityResult::is_score_Valid() const{
    return m_score_isValid;
}

OAIGetDataQualityResultResponse_DataSource OAIDataQualityResult::getDataSource() const {
    return m_data_source;
}
void OAIDataQualityResult::setDataSource(const OAIGetDataQualityResultResponse_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDataQualityResult::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDataQualityResult::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIDataQualityResult::getRulesetName() const {
    return m_ruleset_name;
}
void OAIDataQualityResult::setRulesetName(const QString &ruleset_name) {
    m_ruleset_name = ruleset_name;
    m_ruleset_name_isSet = true;
}

bool OAIDataQualityResult::is_ruleset_name_Set() const{
    return m_ruleset_name_isSet;
}

bool OAIDataQualityResult::is_ruleset_name_Valid() const{
    return m_ruleset_name_isValid;
}

QString OAIDataQualityResult::getEvaluationContext() const {
    return m_evaluation_context;
}
void OAIDataQualityResult::setEvaluationContext(const QString &evaluation_context) {
    m_evaluation_context = evaluation_context;
    m_evaluation_context_isSet = true;
}

bool OAIDataQualityResult::is_evaluation_context_Set() const{
    return m_evaluation_context_isSet;
}

bool OAIDataQualityResult::is_evaluation_context_Valid() const{
    return m_evaluation_context_isValid;
}

QDateTime OAIDataQualityResult::getStartedOn() const {
    return m_started_on;
}
void OAIDataQualityResult::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIDataQualityResult::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIDataQualityResult::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAIDataQualityResult::getCompletedOn() const {
    return m_completed_on;
}
void OAIDataQualityResult::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIDataQualityResult::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIDataQualityResult::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

QString OAIDataQualityResult::getJobName() const {
    return m_job_name;
}
void OAIDataQualityResult::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIDataQualityResult::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIDataQualityResult::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIDataQualityResult::getJobRunId() const {
    return m_job_run_id;
}
void OAIDataQualityResult::setJobRunId(const QString &job_run_id) {
    m_job_run_id = job_run_id;
    m_job_run_id_isSet = true;
}

bool OAIDataQualityResult::is_job_run_id_Set() const{
    return m_job_run_id_isSet;
}

bool OAIDataQualityResult::is_job_run_id_Valid() const{
    return m_job_run_id_isValid;
}

QString OAIDataQualityResult::getRulesetEvaluationRunId() const {
    return m_ruleset_evaluation_run_id;
}
void OAIDataQualityResult::setRulesetEvaluationRunId(const QString &ruleset_evaluation_run_id) {
    m_ruleset_evaluation_run_id = ruleset_evaluation_run_id;
    m_ruleset_evaluation_run_id_isSet = true;
}

bool OAIDataQualityResult::is_ruleset_evaluation_run_id_Set() const{
    return m_ruleset_evaluation_run_id_isSet;
}

bool OAIDataQualityResult::is_ruleset_evaluation_run_id_Valid() const{
    return m_ruleset_evaluation_run_id_isValid;
}

QList OAIDataQualityResult::getRuleResults() const {
    return m_rule_results;
}
void OAIDataQualityResult::setRuleResults(const QList &rule_results) {
    m_rule_results = rule_results;
    m_rule_results_isSet = true;
}

bool OAIDataQualityResult::is_rule_results_Set() const{
    return m_rule_results_isSet;
}

bool OAIDataQualityResult::is_rule_results_Valid() const{
    return m_rule_results_isValid;
}

bool OAIDataQualityResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruleset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruleset_evaluation_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataQualityResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
