/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_default_arguments_isSet = false;
    m_default_arguments_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_security_configuration_isSet = false;
    m_security_configuration_isValid = false;

    m_glue_version_isSet = false;
    m_glue_version_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("CreatedOn")]);
    m_created_on_isSet = !json[QString("CreatedOn")].isNull() && m_created_on_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("Command")]);
    m_command_isSet = !json[QString("Command")].isNull() && m_command_isValid;

    m_default_arguments_isValid = ::OpenAPI::fromJsonValue(m_default_arguments, json[QString("DefaultArguments")]);
    m_default_arguments_isSet = !json[QString("DefaultArguments")].isNull() && m_default_arguments_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("Connections")]);
    m_connections_isSet = !json[QString("Connections")].isNull() && m_connections_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("Progress")]);
    m_progress_isSet = !json[QString("Progress")].isNull() && m_progress_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_security_configuration_isValid = ::OpenAPI::fromJsonValue(m_security_configuration, json[QString("SecurityConfiguration")]);
    m_security_configuration_isSet = !json[QString("SecurityConfiguration")].isNull() && m_security_configuration_isValid;

    m_glue_version_isValid = ::OpenAPI::fromJsonValue(m_glue_version, json[QString("GlueVersion")]);
    m_glue_version_isSet = !json[QString("GlueVersion")].isNull() && m_glue_version_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("CreatedOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_command.isSet()) {
        obj.insert(QString("Command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_default_arguments.isSet()) {
        obj.insert(QString("DefaultArguments"), ::OpenAPI::toJsonValue(m_default_arguments));
    }
    if (m_connections.isSet()) {
        obj.insert(QString("Connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_progress_isSet) {
        obj.insert(QString("Progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_security_configuration_isSet) {
        obj.insert(QString("SecurityConfiguration"), ::OpenAPI::toJsonValue(m_security_configuration));
    }
    if (m_glue_version_isSet) {
        obj.insert(QString("GlueVersion"), ::OpenAPI::toJsonValue(m_glue_version));
    }
    return obj;
}

QString OAISession::getId() const {
    return m_id;
}
void OAISession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISession::is_id_Set() const{
    return m_id_isSet;
}

bool OAISession::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAISession::getCreatedOn() const {
    return m_created_on;
}
void OAISession::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAISession::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAISession::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAISessionStatus OAISession::getStatus() const {
    return m_status;
}
void OAISession::setStatus(const OAISessionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISession::is_status_Set() const{
    return m_status_isSet;
}

bool OAISession::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISession::getErrorMessage() const {
    return m_error_message;
}
void OAISession::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAISession::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAISession::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAISession::getDescription() const {
    return m_description;
}
void OAISession::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISession::is_description_Set() const{
    return m_description_isSet;
}

bool OAISession::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISession::getRole() const {
    return m_role;
}
void OAISession::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAISession::is_role_Set() const{
    return m_role_isSet;
}

bool OAISession::is_role_Valid() const{
    return m_role_isValid;
}

OAISession_Command OAISession::getCommand() const {
    return m_command;
}
void OAISession::setCommand(const OAISession_Command &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAISession::is_command_Set() const{
    return m_command_isSet;
}

bool OAISession::is_command_Valid() const{
    return m_command_isValid;
}

QMap OAISession::getDefaultArguments() const {
    return m_default_arguments;
}
void OAISession::setDefaultArguments(const QMap &default_arguments) {
    m_default_arguments = default_arguments;
    m_default_arguments_isSet = true;
}

bool OAISession::is_default_arguments_Set() const{
    return m_default_arguments_isSet;
}

bool OAISession::is_default_arguments_Valid() const{
    return m_default_arguments_isValid;
}

OAISession_Connections OAISession::getConnections() const {
    return m_connections;
}
void OAISession::setConnections(const OAISession_Connections &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAISession::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAISession::is_connections_Valid() const{
    return m_connections_isValid;
}

double OAISession::getProgress() const {
    return m_progress;
}
void OAISession::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAISession::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAISession::is_progress_Valid() const{
    return m_progress_isValid;
}

double OAISession::getMaxCapacity() const {
    return m_max_capacity;
}
void OAISession::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAISession::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAISession::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

QString OAISession::getSecurityConfiguration() const {
    return m_security_configuration;
}
void OAISession::setSecurityConfiguration(const QString &security_configuration) {
    m_security_configuration = security_configuration;
    m_security_configuration_isSet = true;
}

bool OAISession::is_security_configuration_Set() const{
    return m_security_configuration_isSet;
}

bool OAISession::is_security_configuration_Valid() const{
    return m_security_configuration_isValid;
}

QString OAISession::getGlueVersion() const {
    return m_glue_version;
}
void OAISession::setGlueVersion(const QString &glue_version) {
    m_glue_version = glue_version;
    m_glue_version_isSet = true;
}

bool OAISession::is_glue_version_Set() const{
    return m_glue_version_isSet;
}

bool OAISession::is_glue_version_Valid() const{
    return m_glue_version_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glue_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
