/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongColumnStatisticsData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongColumnStatisticsData::OAILongColumnStatisticsData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongColumnStatisticsData::OAILongColumnStatisticsData() {
    this->initializeModel();
}

OAILongColumnStatisticsData::~OAILongColumnStatisticsData() {}

void OAILongColumnStatisticsData::initializeModel() {

    m_minimum_value_isSet = false;
    m_minimum_value_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_number_of_nulls_isSet = false;
    m_number_of_nulls_isValid = false;

    m_number_of_distinct_values_isSet = false;
    m_number_of_distinct_values_isValid = false;
}

void OAILongColumnStatisticsData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongColumnStatisticsData::fromJsonObject(QJsonObject json) {

    m_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_value, json[QString("MinimumValue")]);
    m_minimum_value_isSet = !json[QString("MinimumValue")].isNull() && m_minimum_value_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("MaximumValue")]);
    m_maximum_value_isSet = !json[QString("MaximumValue")].isNull() && m_maximum_value_isValid;

    m_number_of_nulls_isValid = ::OpenAPI::fromJsonValue(m_number_of_nulls, json[QString("NumberOfNulls")]);
    m_number_of_nulls_isSet = !json[QString("NumberOfNulls")].isNull() && m_number_of_nulls_isValid;

    m_number_of_distinct_values_isValid = ::OpenAPI::fromJsonValue(m_number_of_distinct_values, json[QString("NumberOfDistinctValues")]);
    m_number_of_distinct_values_isSet = !json[QString("NumberOfDistinctValues")].isNull() && m_number_of_distinct_values_isValid;
}

QString OAILongColumnStatisticsData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongColumnStatisticsData::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_value_isSet) {
        obj.insert(QString("MinimumValue"), ::OpenAPI::toJsonValue(m_minimum_value));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("MaximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_number_of_nulls_isSet) {
        obj.insert(QString("NumberOfNulls"), ::OpenAPI::toJsonValue(m_number_of_nulls));
    }
    if (m_number_of_distinct_values_isSet) {
        obj.insert(QString("NumberOfDistinctValues"), ::OpenAPI::toJsonValue(m_number_of_distinct_values));
    }
    return obj;
}

qint32 OAILongColumnStatisticsData::getMinimumValue() const {
    return m_minimum_value;
}
void OAILongColumnStatisticsData::setMinimumValue(const qint32 &minimum_value) {
    m_minimum_value = minimum_value;
    m_minimum_value_isSet = true;
}

bool OAILongColumnStatisticsData::is_minimum_value_Set() const{
    return m_minimum_value_isSet;
}

bool OAILongColumnStatisticsData::is_minimum_value_Valid() const{
    return m_minimum_value_isValid;
}

qint32 OAILongColumnStatisticsData::getMaximumValue() const {
    return m_maximum_value;
}
void OAILongColumnStatisticsData::setMaximumValue(const qint32 &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAILongColumnStatisticsData::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAILongColumnStatisticsData::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

qint32 OAILongColumnStatisticsData::getNumberOfNulls() const {
    return m_number_of_nulls;
}
void OAILongColumnStatisticsData::setNumberOfNulls(const qint32 &number_of_nulls) {
    m_number_of_nulls = number_of_nulls;
    m_number_of_nulls_isSet = true;
}

bool OAILongColumnStatisticsData::is_number_of_nulls_Set() const{
    return m_number_of_nulls_isSet;
}

bool OAILongColumnStatisticsData::is_number_of_nulls_Valid() const{
    return m_number_of_nulls_isValid;
}

qint32 OAILongColumnStatisticsData::getNumberOfDistinctValues() const {
    return m_number_of_distinct_values;
}
void OAILongColumnStatisticsData::setNumberOfDistinctValues(const qint32 &number_of_distinct_values) {
    m_number_of_distinct_values = number_of_distinct_values;
    m_number_of_distinct_values_isSet = true;
}

bool OAILongColumnStatisticsData::is_number_of_distinct_values_Set() const{
    return m_number_of_distinct_values_isSet;
}

bool OAILongColumnStatisticsData::is_number_of_distinct_values_Valid() const{
    return m_number_of_distinct_values_isValid;
}

bool OAILongColumnStatisticsData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_distinct_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongColumnStatisticsData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_of_nulls_isValid && m_number_of_distinct_values_isValid && true;
}

} // namespace OpenAPI
