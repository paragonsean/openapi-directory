/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetDevEndpointsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetDevEndpointsResponse::OAIBatchGetDevEndpointsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetDevEndpointsResponse::OAIBatchGetDevEndpointsResponse() {
    this->initializeModel();
}

OAIBatchGetDevEndpointsResponse::~OAIBatchGetDevEndpointsResponse() {}

void OAIBatchGetDevEndpointsResponse::initializeModel() {

    m_dev_endpoints_isSet = false;
    m_dev_endpoints_isValid = false;

    m_dev_endpoints_not_found_isSet = false;
    m_dev_endpoints_not_found_isValid = false;
}

void OAIBatchGetDevEndpointsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetDevEndpointsResponse::fromJsonObject(QJsonObject json) {

    m_dev_endpoints_isValid = ::OpenAPI::fromJsonValue(m_dev_endpoints, json[QString("DevEndpoints")]);
    m_dev_endpoints_isSet = !json[QString("DevEndpoints")].isNull() && m_dev_endpoints_isValid;

    m_dev_endpoints_not_found_isValid = ::OpenAPI::fromJsonValue(m_dev_endpoints_not_found, json[QString("DevEndpointsNotFound")]);
    m_dev_endpoints_not_found_isSet = !json[QString("DevEndpointsNotFound")].isNull() && m_dev_endpoints_not_found_isValid;
}

QString OAIBatchGetDevEndpointsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetDevEndpointsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dev_endpoints.isSet()) {
        obj.insert(QString("DevEndpoints"), ::OpenAPI::toJsonValue(m_dev_endpoints));
    }
    if (m_dev_endpoints_not_found.isSet()) {
        obj.insert(QString("DevEndpointsNotFound"), ::OpenAPI::toJsonValue(m_dev_endpoints_not_found));
    }
    return obj;
}

QList OAIBatchGetDevEndpointsResponse::getDevEndpoints() const {
    return m_dev_endpoints;
}
void OAIBatchGetDevEndpointsResponse::setDevEndpoints(const QList &dev_endpoints) {
    m_dev_endpoints = dev_endpoints;
    m_dev_endpoints_isSet = true;
}

bool OAIBatchGetDevEndpointsResponse::is_dev_endpoints_Set() const{
    return m_dev_endpoints_isSet;
}

bool OAIBatchGetDevEndpointsResponse::is_dev_endpoints_Valid() const{
    return m_dev_endpoints_isValid;
}

QList OAIBatchGetDevEndpointsResponse::getDevEndpointsNotFound() const {
    return m_dev_endpoints_not_found;
}
void OAIBatchGetDevEndpointsResponse::setDevEndpointsNotFound(const QList &dev_endpoints_not_found) {
    m_dev_endpoints_not_found = dev_endpoints_not_found;
    m_dev_endpoints_not_found_isSet = true;
}

bool OAIBatchGetDevEndpointsResponse::is_dev_endpoints_not_found_Set() const{
    return m_dev_endpoints_not_found_isSet;
}

bool OAIBatchGetDevEndpointsResponse::is_dev_endpoints_not_found_Valid() const{
    return m_dev_endpoints_not_found_isValid;
}

bool OAIBatchGetDevEndpointsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dev_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dev_endpoints_not_found.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetDevEndpointsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
