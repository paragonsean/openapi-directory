/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow_LastRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow_LastRun::OAIWorkflow_LastRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow_LastRun::OAIWorkflow_LastRun() {
    this->initializeModel();
}

OAIWorkflow_LastRun::~OAIWorkflow_LastRun() {}

void OAIWorkflow_LastRun::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_workflow_run_id_isSet = false;
    m_workflow_run_id_isValid = false;

    m_previous_run_id_isSet = false;
    m_previous_run_id_isValid = false;

    m_workflow_run_properties_isSet = false;
    m_workflow_run_properties_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_graph_isSet = false;
    m_graph_isValid = false;

    m_starting_event_batch_condition_isSet = false;
    m_starting_event_batch_condition_isValid = false;
}

void OAIWorkflow_LastRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow_LastRun::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_workflow_run_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_run_id, json[QString("WorkflowRunId")]);
    m_workflow_run_id_isSet = !json[QString("WorkflowRunId")].isNull() && m_workflow_run_id_isValid;

    m_previous_run_id_isValid = ::OpenAPI::fromJsonValue(m_previous_run_id, json[QString("PreviousRunId")]);
    m_previous_run_id_isSet = !json[QString("PreviousRunId")].isNull() && m_previous_run_id_isValid;

    m_workflow_run_properties_isValid = ::OpenAPI::fromJsonValue(m_workflow_run_properties, json[QString("WorkflowRunProperties")]);
    m_workflow_run_properties_isSet = !json[QString("WorkflowRunProperties")].isNull() && m_workflow_run_properties_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("StartedOn")]);
    m_started_on_isSet = !json[QString("StartedOn")].isNull() && m_started_on_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("CompletedOn")]);
    m_completed_on_isSet = !json[QString("CompletedOn")].isNull() && m_completed_on_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("Statistics")]);
    m_statistics_isSet = !json[QString("Statistics")].isNull() && m_statistics_isValid;

    m_graph_isValid = ::OpenAPI::fromJsonValue(m_graph, json[QString("Graph")]);
    m_graph_isSet = !json[QString("Graph")].isNull() && m_graph_isValid;

    m_starting_event_batch_condition_isValid = ::OpenAPI::fromJsonValue(m_starting_event_batch_condition, json[QString("StartingEventBatchCondition")]);
    m_starting_event_batch_condition_isSet = !json[QString("StartingEventBatchCondition")].isNull() && m_starting_event_batch_condition_isValid;
}

QString OAIWorkflow_LastRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow_LastRun::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_workflow_run_id_isSet) {
        obj.insert(QString("WorkflowRunId"), ::OpenAPI::toJsonValue(m_workflow_run_id));
    }
    if (m_previous_run_id_isSet) {
        obj.insert(QString("PreviousRunId"), ::OpenAPI::toJsonValue(m_previous_run_id));
    }
    if (m_workflow_run_properties.isSet()) {
        obj.insert(QString("WorkflowRunProperties"), ::OpenAPI::toJsonValue(m_workflow_run_properties));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("StartedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("CompletedOn"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("Statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_graph.isSet()) {
        obj.insert(QString("Graph"), ::OpenAPI::toJsonValue(m_graph));
    }
    if (m_starting_event_batch_condition.isSet()) {
        obj.insert(QString("StartingEventBatchCondition"), ::OpenAPI::toJsonValue(m_starting_event_batch_condition));
    }
    return obj;
}

QString OAIWorkflow_LastRun::getName() const {
    return m_name;
}
void OAIWorkflow_LastRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflow_LastRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflow_LastRun::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflow_LastRun::getWorkflowRunId() const {
    return m_workflow_run_id;
}
void OAIWorkflow_LastRun::setWorkflowRunId(const QString &workflow_run_id) {
    m_workflow_run_id = workflow_run_id;
    m_workflow_run_id_isSet = true;
}

bool OAIWorkflow_LastRun::is_workflow_run_id_Set() const{
    return m_workflow_run_id_isSet;
}

bool OAIWorkflow_LastRun::is_workflow_run_id_Valid() const{
    return m_workflow_run_id_isValid;
}

QString OAIWorkflow_LastRun::getPreviousRunId() const {
    return m_previous_run_id;
}
void OAIWorkflow_LastRun::setPreviousRunId(const QString &previous_run_id) {
    m_previous_run_id = previous_run_id;
    m_previous_run_id_isSet = true;
}

bool OAIWorkflow_LastRun::is_previous_run_id_Set() const{
    return m_previous_run_id_isSet;
}

bool OAIWorkflow_LastRun::is_previous_run_id_Valid() const{
    return m_previous_run_id_isValid;
}

QMap OAIWorkflow_LastRun::getWorkflowRunProperties() const {
    return m_workflow_run_properties;
}
void OAIWorkflow_LastRun::setWorkflowRunProperties(const QMap &workflow_run_properties) {
    m_workflow_run_properties = workflow_run_properties;
    m_workflow_run_properties_isSet = true;
}

bool OAIWorkflow_LastRun::is_workflow_run_properties_Set() const{
    return m_workflow_run_properties_isSet;
}

bool OAIWorkflow_LastRun::is_workflow_run_properties_Valid() const{
    return m_workflow_run_properties_isValid;
}

QDateTime OAIWorkflow_LastRun::getStartedOn() const {
    return m_started_on;
}
void OAIWorkflow_LastRun::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIWorkflow_LastRun::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIWorkflow_LastRun::is_started_on_Valid() const{
    return m_started_on_isValid;
}

QDateTime OAIWorkflow_LastRun::getCompletedOn() const {
    return m_completed_on;
}
void OAIWorkflow_LastRun::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIWorkflow_LastRun::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIWorkflow_LastRun::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

OAIWorkflowRunStatus OAIWorkflow_LastRun::getStatus() const {
    return m_status;
}
void OAIWorkflow_LastRun::setStatus(const OAIWorkflowRunStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflow_LastRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflow_LastRun::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWorkflow_LastRun::getErrorMessage() const {
    return m_error_message;
}
void OAIWorkflow_LastRun::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIWorkflow_LastRun::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIWorkflow_LastRun::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIWorkflowRun_Statistics OAIWorkflow_LastRun::getStatistics() const {
    return m_statistics;
}
void OAIWorkflow_LastRun::setStatistics(const OAIWorkflowRun_Statistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIWorkflow_LastRun::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIWorkflow_LastRun::is_statistics_Valid() const{
    return m_statistics_isValid;
}

OAIWorkflow_Graph OAIWorkflow_LastRun::getGraph() const {
    return m_graph;
}
void OAIWorkflow_LastRun::setGraph(const OAIWorkflow_Graph &graph) {
    m_graph = graph;
    m_graph_isSet = true;
}

bool OAIWorkflow_LastRun::is_graph_Set() const{
    return m_graph_isSet;
}

bool OAIWorkflow_LastRun::is_graph_Valid() const{
    return m_graph_isValid;
}

OAIWorkflowRun_StartingEventBatchCondition OAIWorkflow_LastRun::getStartingEventBatchCondition() const {
    return m_starting_event_batch_condition;
}
void OAIWorkflow_LastRun::setStartingEventBatchCondition(const OAIWorkflowRun_StartingEventBatchCondition &starting_event_batch_condition) {
    m_starting_event_batch_condition = starting_event_batch_condition;
    m_starting_event_batch_condition_isSet = true;
}

bool OAIWorkflow_LastRun::is_starting_event_batch_condition_Set() const{
    return m_starting_event_batch_condition_isSet;
}

bool OAIWorkflow_LastRun::is_starting_event_batch_condition_Valid() const{
    return m_starting_event_batch_condition_isValid;
}

bool OAIWorkflow_LastRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_run_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_event_batch_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow_LastRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
