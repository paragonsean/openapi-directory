/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStatusType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStatusType::OAITaskStatusType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStatusType::OAITaskStatusType() {
    this->initializeModel();
}

OAITaskStatusType::~OAITaskStatusType() {}

void OAITaskStatusType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITaskStatusType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITaskStatusType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatusType::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITaskStatusType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITaskStatusType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITaskStatusType::STARTING:
            val = "STARTING";
            break;
        case eOAITaskStatusType::RUNNING:
            val = "RUNNING";
            break;
        case eOAITaskStatusType::STOPPING:
            val = "STOPPING";
            break;
        case eOAITaskStatusType::STOPPED:
            val = "STOPPED";
            break;
        case eOAITaskStatusType::SUCCEEDED:
            val = "SUCCEEDED";
            break;
        case eOAITaskStatusType::FAILED:
            val = "FAILED";
            break;
        case eOAITaskStatusType::TIMEOUT:
            val = "TIMEOUT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITaskStatusType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITaskStatusType::eOAITaskStatusType OAITaskStatusType::getValue() const {
    return m_value;
}

void OAITaskStatusType::setValue(const OAITaskStatusType::eOAITaskStatusType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITaskStatusType::isSet() const {
    
    return m_value_isSet;
}

bool OAITaskStatusType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
