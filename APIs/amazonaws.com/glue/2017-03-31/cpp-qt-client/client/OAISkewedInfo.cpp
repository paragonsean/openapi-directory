/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkewedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkewedInfo::OAISkewedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkewedInfo::OAISkewedInfo() {
    this->initializeModel();
}

OAISkewedInfo::~OAISkewedInfo() {}

void OAISkewedInfo::initializeModel() {

    m_skewed_column_names_isSet = false;
    m_skewed_column_names_isValid = false;

    m_skewed_column_values_isSet = false;
    m_skewed_column_values_isValid = false;

    m_skewed_column_value_location_maps_isSet = false;
    m_skewed_column_value_location_maps_isValid = false;
}

void OAISkewedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkewedInfo::fromJsonObject(QJsonObject json) {

    m_skewed_column_names_isValid = ::OpenAPI::fromJsonValue(m_skewed_column_names, json[QString("SkewedColumnNames")]);
    m_skewed_column_names_isSet = !json[QString("SkewedColumnNames")].isNull() && m_skewed_column_names_isValid;

    m_skewed_column_values_isValid = ::OpenAPI::fromJsonValue(m_skewed_column_values, json[QString("SkewedColumnValues")]);
    m_skewed_column_values_isSet = !json[QString("SkewedColumnValues")].isNull() && m_skewed_column_values_isValid;

    m_skewed_column_value_location_maps_isValid = ::OpenAPI::fromJsonValue(m_skewed_column_value_location_maps, json[QString("SkewedColumnValueLocationMaps")]);
    m_skewed_column_value_location_maps_isSet = !json[QString("SkewedColumnValueLocationMaps")].isNull() && m_skewed_column_value_location_maps_isValid;
}

QString OAISkewedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkewedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_skewed_column_names.isSet()) {
        obj.insert(QString("SkewedColumnNames"), ::OpenAPI::toJsonValue(m_skewed_column_names));
    }
    if (m_skewed_column_values.isSet()) {
        obj.insert(QString("SkewedColumnValues"), ::OpenAPI::toJsonValue(m_skewed_column_values));
    }
    if (m_skewed_column_value_location_maps.isSet()) {
        obj.insert(QString("SkewedColumnValueLocationMaps"), ::OpenAPI::toJsonValue(m_skewed_column_value_location_maps));
    }
    return obj;
}

QList OAISkewedInfo::getSkewedColumnNames() const {
    return m_skewed_column_names;
}
void OAISkewedInfo::setSkewedColumnNames(const QList &skewed_column_names) {
    m_skewed_column_names = skewed_column_names;
    m_skewed_column_names_isSet = true;
}

bool OAISkewedInfo::is_skewed_column_names_Set() const{
    return m_skewed_column_names_isSet;
}

bool OAISkewedInfo::is_skewed_column_names_Valid() const{
    return m_skewed_column_names_isValid;
}

QList OAISkewedInfo::getSkewedColumnValues() const {
    return m_skewed_column_values;
}
void OAISkewedInfo::setSkewedColumnValues(const QList &skewed_column_values) {
    m_skewed_column_values = skewed_column_values;
    m_skewed_column_values_isSet = true;
}

bool OAISkewedInfo::is_skewed_column_values_Set() const{
    return m_skewed_column_values_isSet;
}

bool OAISkewedInfo::is_skewed_column_values_Valid() const{
    return m_skewed_column_values_isValid;
}

QMap OAISkewedInfo::getSkewedColumnValueLocationMaps() const {
    return m_skewed_column_value_location_maps;
}
void OAISkewedInfo::setSkewedColumnValueLocationMaps(const QMap &skewed_column_value_location_maps) {
    m_skewed_column_value_location_maps = skewed_column_value_location_maps;
    m_skewed_column_value_location_maps_isSet = true;
}

bool OAISkewedInfo::is_skewed_column_value_location_maps_Set() const{
    return m_skewed_column_value_location_maps_isSet;
}

bool OAISkewedInfo::is_skewed_column_value_location_maps_Valid() const{
    return m_skewed_column_value_location_maps_isValid;
}

bool OAISkewedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_skewed_column_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skewed_column_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skewed_column_value_location_maps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkewedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
