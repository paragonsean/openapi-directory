/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalogKinesisSource_StreamingOptions.h
 *
 * 
 */

#ifndef OAICatalogKinesisSource_StreamingOptions_H
#define OAICatalogKinesisSource_StreamingOptions_H

#include <QJsonObject>

#include "OAIStartingPosition.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICatalogKinesisSource_StreamingOptions : public OAIObject {
public:
    OAICatalogKinesisSource_StreamingOptions();
    OAICatalogKinesisSource_StreamingOptions(QString json);
    ~OAICatalogKinesisSource_StreamingOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEndpointUrl() const;
    void setEndpointUrl(const QString &endpoint_url);
    bool is_endpoint_url_Set() const;
    bool is_endpoint_url_Valid() const;

    QString getStreamName() const;
    void setStreamName(const QString &stream_name);
    bool is_stream_name_Set() const;
    bool is_stream_name_Valid() const;

    QString getClassification() const;
    void setClassification(const QString &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QString getDelimiter() const;
    void setDelimiter(const QString &delimiter);
    bool is_delimiter_Set() const;
    bool is_delimiter_Valid() const;

    OAIStartingPosition getStartingPosition() const;
    void setStartingPosition(const OAIStartingPosition &starting_position);
    bool is_starting_position_Set() const;
    bool is_starting_position_Valid() const;

    qint32 getMaxFetchTimeInMs() const;
    void setMaxFetchTimeInMs(const qint32 &max_fetch_time_in_ms);
    bool is_max_fetch_time_in_ms_Set() const;
    bool is_max_fetch_time_in_ms_Valid() const;

    qint32 getMaxFetchRecordsPerShard() const;
    void setMaxFetchRecordsPerShard(const qint32 &max_fetch_records_per_shard);
    bool is_max_fetch_records_per_shard_Set() const;
    bool is_max_fetch_records_per_shard_Valid() const;

    qint32 getMaxRecordPerRead() const;
    void setMaxRecordPerRead(const qint32 &max_record_per_read);
    bool is_max_record_per_read_Set() const;
    bool is_max_record_per_read_Valid() const;

    bool getAddIdleTimeBetweenReads() const;
    void setAddIdleTimeBetweenReads(const bool &add_idle_time_between_reads);
    bool is_add_idle_time_between_reads_Set() const;
    bool is_add_idle_time_between_reads_Valid() const;

    qint32 getIdleTimeBetweenReadsInMs() const;
    void setIdleTimeBetweenReadsInMs(const qint32 &idle_time_between_reads_in_ms);
    bool is_idle_time_between_reads_in_ms_Set() const;
    bool is_idle_time_between_reads_in_ms_Valid() const;

    qint32 getDescribeShardInterval() const;
    void setDescribeShardInterval(const qint32 &describe_shard_interval);
    bool is_describe_shard_interval_Set() const;
    bool is_describe_shard_interval_Valid() const;

    qint32 getNumRetries() const;
    void setNumRetries(const qint32 &num_retries);
    bool is_num_retries_Set() const;
    bool is_num_retries_Valid() const;

    qint32 getRetryIntervalMs() const;
    void setRetryIntervalMs(const qint32 &retry_interval_ms);
    bool is_retry_interval_ms_Set() const;
    bool is_retry_interval_ms_Valid() const;

    qint32 getMaxRetryIntervalMs() const;
    void setMaxRetryIntervalMs(const qint32 &max_retry_interval_ms);
    bool is_max_retry_interval_ms_Set() const;
    bool is_max_retry_interval_ms_Valid() const;

    bool getAvoidEmptyBatches() const;
    void setAvoidEmptyBatches(const bool &avoid_empty_batches);
    bool is_avoid_empty_batches_Set() const;
    bool is_avoid_empty_batches_Valid() const;

    QString getStreamArn() const;
    void setStreamArn(const QString &stream_arn);
    bool is_stream_arn_Set() const;
    bool is_stream_arn_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getRoleSessionName() const;
    void setRoleSessionName(const QString &role_session_name);
    bool is_role_session_name_Set() const;
    bool is_role_session_name_Valid() const;

    QString getAddRecordTimestamp() const;
    void setAddRecordTimestamp(const QString &add_record_timestamp);
    bool is_add_record_timestamp_Set() const;
    bool is_add_record_timestamp_Valid() const;

    QString getEmitConsumerLagMetrics() const;
    void setEmitConsumerLagMetrics(const QString &emit_consumer_lag_metrics);
    bool is_emit_consumer_lag_metrics_Set() const;
    bool is_emit_consumer_lag_metrics_Valid() const;

    QDateTime getStartingTimestamp() const;
    void setStartingTimestamp(const QDateTime &starting_timestamp);
    bool is_starting_timestamp_Set() const;
    bool is_starting_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_endpoint_url;
    bool m_endpoint_url_isSet;
    bool m_endpoint_url_isValid;

    QString m_stream_name;
    bool m_stream_name_isSet;
    bool m_stream_name_isValid;

    QString m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QString m_delimiter;
    bool m_delimiter_isSet;
    bool m_delimiter_isValid;

    OAIStartingPosition m_starting_position;
    bool m_starting_position_isSet;
    bool m_starting_position_isValid;

    qint32 m_max_fetch_time_in_ms;
    bool m_max_fetch_time_in_ms_isSet;
    bool m_max_fetch_time_in_ms_isValid;

    qint32 m_max_fetch_records_per_shard;
    bool m_max_fetch_records_per_shard_isSet;
    bool m_max_fetch_records_per_shard_isValid;

    qint32 m_max_record_per_read;
    bool m_max_record_per_read_isSet;
    bool m_max_record_per_read_isValid;

    bool m_add_idle_time_between_reads;
    bool m_add_idle_time_between_reads_isSet;
    bool m_add_idle_time_between_reads_isValid;

    qint32 m_idle_time_between_reads_in_ms;
    bool m_idle_time_between_reads_in_ms_isSet;
    bool m_idle_time_between_reads_in_ms_isValid;

    qint32 m_describe_shard_interval;
    bool m_describe_shard_interval_isSet;
    bool m_describe_shard_interval_isValid;

    qint32 m_num_retries;
    bool m_num_retries_isSet;
    bool m_num_retries_isValid;

    qint32 m_retry_interval_ms;
    bool m_retry_interval_ms_isSet;
    bool m_retry_interval_ms_isValid;

    qint32 m_max_retry_interval_ms;
    bool m_max_retry_interval_ms_isSet;
    bool m_max_retry_interval_ms_isValid;

    bool m_avoid_empty_batches;
    bool m_avoid_empty_batches_isSet;
    bool m_avoid_empty_batches_isValid;

    QString m_stream_arn;
    bool m_stream_arn_isSet;
    bool m_stream_arn_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_role_session_name;
    bool m_role_session_name_isSet;
    bool m_role_session_name_isValid;

    QString m_add_record_timestamp;
    bool m_add_record_timestamp_isSet;
    bool m_add_record_timestamp_isValid;

    QString m_emit_consumer_lag_metrics;
    bool m_emit_consumer_lag_metrics_isSet;
    bool m_emit_consumer_lag_metrics_isValid;

    QDateTime m_starting_timestamp;
    bool m_starting_timestamp_isSet;
    bool m_starting_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalogKinesisSource_StreamingOptions)

#endif // OAICatalogKinesisSource_StreamingOptions_H
