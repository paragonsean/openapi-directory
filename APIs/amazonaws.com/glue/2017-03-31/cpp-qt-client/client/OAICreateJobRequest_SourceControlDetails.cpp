/**
 * AWS Glue
 * <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobRequest_SourceControlDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobRequest_SourceControlDetails::OAICreateJobRequest_SourceControlDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobRequest_SourceControlDetails::OAICreateJobRequest_SourceControlDetails() {
    this->initializeModel();
}

OAICreateJobRequest_SourceControlDetails::~OAICreateJobRequest_SourceControlDetails() {}

void OAICreateJobRequest_SourceControlDetails::initializeModel() {

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_last_commit_id_isSet = false;
    m_last_commit_id_isValid = false;

    m_auth_strategy_isSet = false;
    m_auth_strategy_isValid = false;

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;
}

void OAICreateJobRequest_SourceControlDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobRequest_SourceControlDetails::fromJsonObject(QJsonObject json) {

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("Provider")]);
    m_provider_isSet = !json[QString("Provider")].isNull() && m_provider_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("Repository")]);
    m_repository_isSet = !json[QString("Repository")].isNull() && m_repository_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("Branch")]);
    m_branch_isSet = !json[QString("Branch")].isNull() && m_branch_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("Folder")]);
    m_folder_isSet = !json[QString("Folder")].isNull() && m_folder_isValid;

    m_last_commit_id_isValid = ::OpenAPI::fromJsonValue(m_last_commit_id, json[QString("LastCommitId")]);
    m_last_commit_id_isSet = !json[QString("LastCommitId")].isNull() && m_last_commit_id_isValid;

    m_auth_strategy_isValid = ::OpenAPI::fromJsonValue(m_auth_strategy, json[QString("AuthStrategy")]);
    m_auth_strategy_isSet = !json[QString("AuthStrategy")].isNull() && m_auth_strategy_isValid;

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("AuthToken")]);
    m_auth_token_isSet = !json[QString("AuthToken")].isNull() && m_auth_token_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobRequest_SourceControlDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_provider.isSet()) {
        obj.insert(QString("Provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_repository_isSet) {
        obj.insert(QString("Repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_branch_isSet) {
        obj.insert(QString("Branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_folder_isSet) {
        obj.insert(QString("Folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_last_commit_id_isSet) {
        obj.insert(QString("LastCommitId"), ::OpenAPI::toJsonValue(m_last_commit_id));
    }
    if (m_auth_strategy.isSet()) {
        obj.insert(QString("AuthStrategy"), ::OpenAPI::toJsonValue(m_auth_strategy));
    }
    if (m_auth_token_isSet) {
        obj.insert(QString("AuthToken"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    return obj;
}

OAISourceControlProvider OAICreateJobRequest_SourceControlDetails::getProvider() const {
    return m_provider;
}
void OAICreateJobRequest_SourceControlDetails::setProvider(const OAISourceControlProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::getRepository() const {
    return m_repository;
}
void OAICreateJobRequest_SourceControlDetails::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::getOwner() const {
    return m_owner;
}
void OAICreateJobRequest_SourceControlDetails::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::getBranch() const {
    return m_branch;
}
void OAICreateJobRequest_SourceControlDetails::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::getFolder() const {
    return m_folder;
}
void OAICreateJobRequest_SourceControlDetails::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::getLastCommitId() const {
    return m_last_commit_id;
}
void OAICreateJobRequest_SourceControlDetails::setLastCommitId(const QString &last_commit_id) {
    m_last_commit_id = last_commit_id;
    m_last_commit_id_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_last_commit_id_Set() const{
    return m_last_commit_id_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_last_commit_id_Valid() const{
    return m_last_commit_id_isValid;
}

OAISourceControlAuthStrategy OAICreateJobRequest_SourceControlDetails::getAuthStrategy() const {
    return m_auth_strategy;
}
void OAICreateJobRequest_SourceControlDetails::setAuthStrategy(const OAISourceControlAuthStrategy &auth_strategy) {
    m_auth_strategy = auth_strategy;
    m_auth_strategy_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_auth_strategy_Set() const{
    return m_auth_strategy_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_auth_strategy_Valid() const{
    return m_auth_strategy_isValid;
}

QString OAICreateJobRequest_SourceControlDetails::getAuthToken() const {
    return m_auth_token;
}
void OAICreateJobRequest_SourceControlDetails::setAuthToken(const QString &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAICreateJobRequest_SourceControlDetails::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAICreateJobRequest_SourceControlDetails::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

bool OAICreateJobRequest_SourceControlDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobRequest_SourceControlDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
