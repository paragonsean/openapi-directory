/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceQuota_UsageMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceQuota_UsageMetric::OAIServiceQuota_UsageMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceQuota_UsageMetric::OAIServiceQuota_UsageMetric() {
    this->initializeModel();
}

OAIServiceQuota_UsageMetric::~OAIServiceQuota_UsageMetric() {}

void OAIServiceQuota_UsageMetric::initializeModel() {

    m_metric_namespace_isSet = false;
    m_metric_namespace_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metric_dimensions_isSet = false;
    m_metric_dimensions_isValid = false;

    m_metric_statistic_recommendation_isSet = false;
    m_metric_statistic_recommendation_isValid = false;
}

void OAIServiceQuota_UsageMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceQuota_UsageMetric::fromJsonObject(QJsonObject json) {

    m_metric_namespace_isValid = ::OpenAPI::fromJsonValue(m_metric_namespace, json[QString("MetricNamespace")]);
    m_metric_namespace_isSet = !json[QString("MetricNamespace")].isNull() && m_metric_namespace_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_metric_dimensions_isValid = ::OpenAPI::fromJsonValue(m_metric_dimensions, json[QString("MetricDimensions")]);
    m_metric_dimensions_isSet = !json[QString("MetricDimensions")].isNull() && m_metric_dimensions_isValid;

    m_metric_statistic_recommendation_isValid = ::OpenAPI::fromJsonValue(m_metric_statistic_recommendation, json[QString("MetricStatisticRecommendation")]);
    m_metric_statistic_recommendation_isSet = !json[QString("MetricStatisticRecommendation")].isNull() && m_metric_statistic_recommendation_isValid;
}

QString OAIServiceQuota_UsageMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceQuota_UsageMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_namespace_isSet) {
        obj.insert(QString("MetricNamespace"), ::OpenAPI::toJsonValue(m_metric_namespace));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metric_dimensions.isSet()) {
        obj.insert(QString("MetricDimensions"), ::OpenAPI::toJsonValue(m_metric_dimensions));
    }
    if (m_metric_statistic_recommendation_isSet) {
        obj.insert(QString("MetricStatisticRecommendation"), ::OpenAPI::toJsonValue(m_metric_statistic_recommendation));
    }
    return obj;
}

QString OAIServiceQuota_UsageMetric::getMetricNamespace() const {
    return m_metric_namespace;
}
void OAIServiceQuota_UsageMetric::setMetricNamespace(const QString &metric_namespace) {
    m_metric_namespace = metric_namespace;
    m_metric_namespace_isSet = true;
}

bool OAIServiceQuota_UsageMetric::is_metric_namespace_Set() const{
    return m_metric_namespace_isSet;
}

bool OAIServiceQuota_UsageMetric::is_metric_namespace_Valid() const{
    return m_metric_namespace_isValid;
}

QString OAIServiceQuota_UsageMetric::getMetricName() const {
    return m_metric_name;
}
void OAIServiceQuota_UsageMetric::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIServiceQuota_UsageMetric::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIServiceQuota_UsageMetric::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QMap OAIServiceQuota_UsageMetric::getMetricDimensions() const {
    return m_metric_dimensions;
}
void OAIServiceQuota_UsageMetric::setMetricDimensions(const QMap &metric_dimensions) {
    m_metric_dimensions = metric_dimensions;
    m_metric_dimensions_isSet = true;
}

bool OAIServiceQuota_UsageMetric::is_metric_dimensions_Set() const{
    return m_metric_dimensions_isSet;
}

bool OAIServiceQuota_UsageMetric::is_metric_dimensions_Valid() const{
    return m_metric_dimensions_isValid;
}

QString OAIServiceQuota_UsageMetric::getMetricStatisticRecommendation() const {
    return m_metric_statistic_recommendation;
}
void OAIServiceQuota_UsageMetric::setMetricStatisticRecommendation(const QString &metric_statistic_recommendation) {
    m_metric_statistic_recommendation = metric_statistic_recommendation;
    m_metric_statistic_recommendation_isSet = true;
}

bool OAIServiceQuota_UsageMetric::is_metric_statistic_recommendation_Set() const{
    return m_metric_statistic_recommendation_isSet;
}

bool OAIServiceQuota_UsageMetric::is_metric_statistic_recommendation_Valid() const{
    return m_metric_statistic_recommendation_isValid;
}

bool OAIServiceQuota_UsageMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_statistic_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceQuota_UsageMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
