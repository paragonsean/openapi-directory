/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceQuotaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceQuotaRequest::OAIGetServiceQuotaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceQuotaRequest::OAIGetServiceQuotaRequest() {
    this->initializeModel();
}

OAIGetServiceQuotaRequest::~OAIGetServiceQuotaRequest() {}

void OAIGetServiceQuotaRequest::initializeModel() {

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_quota_code_isSet = false;
    m_quota_code_isValid = false;
}

void OAIGetServiceQuotaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceQuotaRequest::fromJsonObject(QJsonObject json) {

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("ServiceCode")]);
    m_service_code_isSet = !json[QString("ServiceCode")].isNull() && m_service_code_isValid;

    m_quota_code_isValid = ::OpenAPI::fromJsonValue(m_quota_code, json[QString("QuotaCode")]);
    m_quota_code_isSet = !json[QString("QuotaCode")].isNull() && m_quota_code_isValid;
}

QString OAIGetServiceQuotaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceQuotaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_code_isSet) {
        obj.insert(QString("ServiceCode"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_quota_code_isSet) {
        obj.insert(QString("QuotaCode"), ::OpenAPI::toJsonValue(m_quota_code));
    }
    return obj;
}

QString OAIGetServiceQuotaRequest::getServiceCode() const {
    return m_service_code;
}
void OAIGetServiceQuotaRequest::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIGetServiceQuotaRequest::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIGetServiceQuotaRequest::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAIGetServiceQuotaRequest::getQuotaCode() const {
    return m_quota_code;
}
void OAIGetServiceQuotaRequest::setQuotaCode(const QString &quota_code) {
    m_quota_code = quota_code;
    m_quota_code_isSet = true;
}

bool OAIGetServiceQuotaRequest::is_quota_code_Set() const{
    return m_quota_code_isSet;
}

bool OAIGetServiceQuotaRequest::is_quota_code_Valid() const{
    return m_quota_code_isValid;
}

bool OAIGetServiceQuotaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceQuotaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_code_isValid && m_quota_code_isValid && true;
}

} // namespace OpenAPI
