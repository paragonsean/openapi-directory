/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceInfo::OAIServiceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceInfo::OAIServiceInfo() {
    this->initializeModel();
}

OAIServiceInfo::~OAIServiceInfo() {}

void OAIServiceInfo::initializeModel() {

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIServiceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceInfo::fromJsonObject(QJsonObject json) {

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("ServiceCode")]);
    m_service_code_isSet = !json[QString("ServiceCode")].isNull() && m_service_code_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;
}

QString OAIServiceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_service_code_isSet) {
        obj.insert(QString("ServiceCode"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIServiceInfo::getServiceCode() const {
    return m_service_code;
}
void OAIServiceInfo::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIServiceInfo::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIServiceInfo::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAIServiceInfo::getServiceName() const {
    return m_service_name;
}
void OAIServiceInfo::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceInfo::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceInfo::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIServiceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
