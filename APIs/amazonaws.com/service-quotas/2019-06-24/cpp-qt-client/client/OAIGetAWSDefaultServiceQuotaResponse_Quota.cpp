/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAWSDefaultServiceQuotaResponse_Quota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAWSDefaultServiceQuotaResponse_Quota::OAIGetAWSDefaultServiceQuotaResponse_Quota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAWSDefaultServiceQuotaResponse_Quota::OAIGetAWSDefaultServiceQuotaResponse_Quota() {
    this->initializeModel();
}

OAIGetAWSDefaultServiceQuotaResponse_Quota::~OAIGetAWSDefaultServiceQuotaResponse_Quota() {}

void OAIGetAWSDefaultServiceQuotaResponse_Quota::initializeModel() {

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_quota_arn_isSet = false;
    m_quota_arn_isValid = false;

    m_quota_code_isSet = false;
    m_quota_code_isValid = false;

    m_quota_name_isSet = false;
    m_quota_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_adjustable_isSet = false;
    m_adjustable_isValid = false;

    m_global_quota_isSet = false;
    m_global_quota_isValid = false;

    m_usage_metric_isSet = false;
    m_usage_metric_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_error_reason_isSet = false;
    m_error_reason_isValid = false;
}

void OAIGetAWSDefaultServiceQuotaResponse_Quota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAWSDefaultServiceQuotaResponse_Quota::fromJsonObject(QJsonObject json) {

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("ServiceCode")]);
    m_service_code_isSet = !json[QString("ServiceCode")].isNull() && m_service_code_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_quota_arn_isValid = ::OpenAPI::fromJsonValue(m_quota_arn, json[QString("QuotaArn")]);
    m_quota_arn_isSet = !json[QString("QuotaArn")].isNull() && m_quota_arn_isValid;

    m_quota_code_isValid = ::OpenAPI::fromJsonValue(m_quota_code, json[QString("QuotaCode")]);
    m_quota_code_isSet = !json[QString("QuotaCode")].isNull() && m_quota_code_isValid;

    m_quota_name_isValid = ::OpenAPI::fromJsonValue(m_quota_name, json[QString("QuotaName")]);
    m_quota_name_isSet = !json[QString("QuotaName")].isNull() && m_quota_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_adjustable_isValid = ::OpenAPI::fromJsonValue(m_adjustable, json[QString("Adjustable")]);
    m_adjustable_isSet = !json[QString("Adjustable")].isNull() && m_adjustable_isValid;

    m_global_quota_isValid = ::OpenAPI::fromJsonValue(m_global_quota, json[QString("GlobalQuota")]);
    m_global_quota_isSet = !json[QString("GlobalQuota")].isNull() && m_global_quota_isValid;

    m_usage_metric_isValid = ::OpenAPI::fromJsonValue(m_usage_metric, json[QString("UsageMetric")]);
    m_usage_metric_isSet = !json[QString("UsageMetric")].isNull() && m_usage_metric_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_error_reason_isValid = ::OpenAPI::fromJsonValue(m_error_reason, json[QString("ErrorReason")]);
    m_error_reason_isSet = !json[QString("ErrorReason")].isNull() && m_error_reason_isValid;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAWSDefaultServiceQuotaResponse_Quota::asJsonObject() const {
    QJsonObject obj;
    if (m_service_code_isSet) {
        obj.insert(QString("ServiceCode"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_quota_arn_isSet) {
        obj.insert(QString("QuotaArn"), ::OpenAPI::toJsonValue(m_quota_arn));
    }
    if (m_quota_code_isSet) {
        obj.insert(QString("QuotaCode"), ::OpenAPI::toJsonValue(m_quota_code));
    }
    if (m_quota_name_isSet) {
        obj.insert(QString("QuotaName"), ::OpenAPI::toJsonValue(m_quota_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_adjustable_isSet) {
        obj.insert(QString("Adjustable"), ::OpenAPI::toJsonValue(m_adjustable));
    }
    if (m_global_quota_isSet) {
        obj.insert(QString("GlobalQuota"), ::OpenAPI::toJsonValue(m_global_quota));
    }
    if (m_usage_metric.isSet()) {
        obj.insert(QString("UsageMetric"), ::OpenAPI::toJsonValue(m_usage_metric));
    }
    if (m_period.isSet()) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_error_reason.isSet()) {
        obj.insert(QString("ErrorReason"), ::OpenAPI::toJsonValue(m_error_reason));
    }
    return obj;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::getServiceCode() const {
    return m_service_code;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::getServiceName() const {
    return m_service_name;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::getQuotaArn() const {
    return m_quota_arn;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setQuotaArn(const QString &quota_arn) {
    m_quota_arn = quota_arn;
    m_quota_arn_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_quota_arn_Set() const{
    return m_quota_arn_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_quota_arn_Valid() const{
    return m_quota_arn_isValid;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::getQuotaCode() const {
    return m_quota_code;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setQuotaCode(const QString &quota_code) {
    m_quota_code = quota_code;
    m_quota_code_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_quota_code_Set() const{
    return m_quota_code_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_quota_code_Valid() const{
    return m_quota_code_isValid;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::getQuotaName() const {
    return m_quota_name;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setQuotaName(const QString &quota_name) {
    m_quota_name = quota_name;
    m_quota_name_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_quota_name_Set() const{
    return m_quota_name_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_quota_name_Valid() const{
    return m_quota_name_isValid;
}

double OAIGetAWSDefaultServiceQuotaResponse_Quota::getValue() const {
    return m_value;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIGetAWSDefaultServiceQuotaResponse_Quota::getUnit() const {
    return m_unit;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::getAdjustable() const {
    return m_adjustable;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setAdjustable(const bool &adjustable) {
    m_adjustable = adjustable;
    m_adjustable_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_adjustable_Set() const{
    return m_adjustable_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_adjustable_Valid() const{
    return m_adjustable_isValid;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::getGlobalQuota() const {
    return m_global_quota;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setGlobalQuota(const bool &global_quota) {
    m_global_quota = global_quota;
    m_global_quota_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_global_quota_Set() const{
    return m_global_quota_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_global_quota_Valid() const{
    return m_global_quota_isValid;
}

OAIServiceQuota_UsageMetric OAIGetAWSDefaultServiceQuotaResponse_Quota::getUsageMetric() const {
    return m_usage_metric;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setUsageMetric(const OAIServiceQuota_UsageMetric &usage_metric) {
    m_usage_metric = usage_metric;
    m_usage_metric_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_usage_metric_Set() const{
    return m_usage_metric_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_usage_metric_Valid() const{
    return m_usage_metric_isValid;
}

OAIServiceQuota_Period OAIGetAWSDefaultServiceQuotaResponse_Quota::getPeriod() const {
    return m_period;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setPeriod(const OAIServiceQuota_Period &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_period_Valid() const{
    return m_period_isValid;
}

OAIServiceQuota_ErrorReason OAIGetAWSDefaultServiceQuotaResponse_Quota::getErrorReason() const {
    return m_error_reason;
}
void OAIGetAWSDefaultServiceQuotaResponse_Quota::setErrorReason(const OAIServiceQuota_ErrorReason &error_reason) {
    m_error_reason = error_reason;
    m_error_reason_isSet = true;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_error_reason_Set() const{
    return m_error_reason_isSet;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::is_error_reason_Valid() const{
    return m_error_reason_isValid;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjustable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAWSDefaultServiceQuotaResponse_Quota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
