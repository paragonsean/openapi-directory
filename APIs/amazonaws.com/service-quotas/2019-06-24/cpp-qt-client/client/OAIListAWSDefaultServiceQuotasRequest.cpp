/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAWSDefaultServiceQuotasRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAWSDefaultServiceQuotasRequest::OAIListAWSDefaultServiceQuotasRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAWSDefaultServiceQuotasRequest::OAIListAWSDefaultServiceQuotasRequest() {
    this->initializeModel();
}

OAIListAWSDefaultServiceQuotasRequest::~OAIListAWSDefaultServiceQuotasRequest() {}

void OAIListAWSDefaultServiceQuotasRequest::initializeModel() {

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListAWSDefaultServiceQuotasRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAWSDefaultServiceQuotasRequest::fromJsonObject(QJsonObject json) {

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("ServiceCode")]);
    m_service_code_isSet = !json[QString("ServiceCode")].isNull() && m_service_code_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListAWSDefaultServiceQuotasRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAWSDefaultServiceQuotasRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_code_isSet) {
        obj.insert(QString("ServiceCode"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListAWSDefaultServiceQuotasRequest::getServiceCode() const {
    return m_service_code;
}
void OAIListAWSDefaultServiceQuotasRequest::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIListAWSDefaultServiceQuotasRequest::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIListAWSDefaultServiceQuotasRequest::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAIListAWSDefaultServiceQuotasRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAWSDefaultServiceQuotasRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAWSDefaultServiceQuotasRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAWSDefaultServiceQuotasRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListAWSDefaultServiceQuotasRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAWSDefaultServiceQuotasRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAWSDefaultServiceQuotasRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAWSDefaultServiceQuotasRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListAWSDefaultServiceQuotasRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAWSDefaultServiceQuotasRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_code_isValid && true;
}

} // namespace OpenAPI
