/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestedServiceQuotaChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestedServiceQuotaChange::OAIRequestedServiceQuotaChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestedServiceQuotaChange::OAIRequestedServiceQuotaChange() {
    this->initializeModel();
}

OAIRequestedServiceQuotaChange::~OAIRequestedServiceQuotaChange() {}

void OAIRequestedServiceQuotaChange::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_case_id_isSet = false;
    m_case_id_isValid = false;

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_quota_code_isSet = false;
    m_quota_code_isValid = false;

    m_quota_name_isSet = false;
    m_quota_name_isValid = false;

    m_desired_value_isSet = false;
    m_desired_value_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;

    m_quota_arn_isSet = false;
    m_quota_arn_isValid = false;

    m_global_quota_isSet = false;
    m_global_quota_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIRequestedServiceQuotaChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestedServiceQuotaChange::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_case_id_isValid = ::OpenAPI::fromJsonValue(m_case_id, json[QString("CaseId")]);
    m_case_id_isSet = !json[QString("CaseId")].isNull() && m_case_id_isValid;

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("ServiceCode")]);
    m_service_code_isSet = !json[QString("ServiceCode")].isNull() && m_service_code_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_quota_code_isValid = ::OpenAPI::fromJsonValue(m_quota_code, json[QString("QuotaCode")]);
    m_quota_code_isSet = !json[QString("QuotaCode")].isNull() && m_quota_code_isValid;

    m_quota_name_isValid = ::OpenAPI::fromJsonValue(m_quota_name, json[QString("QuotaName")]);
    m_quota_name_isSet = !json[QString("QuotaName")].isNull() && m_quota_name_isValid;

    m_desired_value_isValid = ::OpenAPI::fromJsonValue(m_desired_value, json[QString("DesiredValue")]);
    m_desired_value_isSet = !json[QString("DesiredValue")].isNull() && m_desired_value_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("Requester")]);
    m_requester_isSet = !json[QString("Requester")].isNull() && m_requester_isValid;

    m_quota_arn_isValid = ::OpenAPI::fromJsonValue(m_quota_arn, json[QString("QuotaArn")]);
    m_quota_arn_isSet = !json[QString("QuotaArn")].isNull() && m_quota_arn_isValid;

    m_global_quota_isValid = ::OpenAPI::fromJsonValue(m_global_quota, json[QString("GlobalQuota")]);
    m_global_quota_isSet = !json[QString("GlobalQuota")].isNull() && m_global_quota_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIRequestedServiceQuotaChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestedServiceQuotaChange::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_case_id_isSet) {
        obj.insert(QString("CaseId"), ::OpenAPI::toJsonValue(m_case_id));
    }
    if (m_service_code_isSet) {
        obj.insert(QString("ServiceCode"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_quota_code_isSet) {
        obj.insert(QString("QuotaCode"), ::OpenAPI::toJsonValue(m_quota_code));
    }
    if (m_quota_name_isSet) {
        obj.insert(QString("QuotaName"), ::OpenAPI::toJsonValue(m_quota_name));
    }
    if (m_desired_value_isSet) {
        obj.insert(QString("DesiredValue"), ::OpenAPI::toJsonValue(m_desired_value));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_requester_isSet) {
        obj.insert(QString("Requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    if (m_quota_arn_isSet) {
        obj.insert(QString("QuotaArn"), ::OpenAPI::toJsonValue(m_quota_arn));
    }
    if (m_global_quota_isSet) {
        obj.insert(QString("GlobalQuota"), ::OpenAPI::toJsonValue(m_global_quota));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIRequestedServiceQuotaChange::getId() const {
    return m_id;
}
void OAIRequestedServiceQuotaChange::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRequestedServiceQuotaChange::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRequestedServiceQuotaChange::getCaseId() const {
    return m_case_id;
}
void OAIRequestedServiceQuotaChange::setCaseId(const QString &case_id) {
    m_case_id = case_id;
    m_case_id_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_case_id_Set() const{
    return m_case_id_isSet;
}

bool OAIRequestedServiceQuotaChange::is_case_id_Valid() const{
    return m_case_id_isValid;
}

QString OAIRequestedServiceQuotaChange::getServiceCode() const {
    return m_service_code;
}
void OAIRequestedServiceQuotaChange::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIRequestedServiceQuotaChange::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAIRequestedServiceQuotaChange::getServiceName() const {
    return m_service_name;
}
void OAIRequestedServiceQuotaChange::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIRequestedServiceQuotaChange::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIRequestedServiceQuotaChange::getQuotaCode() const {
    return m_quota_code;
}
void OAIRequestedServiceQuotaChange::setQuotaCode(const QString &quota_code) {
    m_quota_code = quota_code;
    m_quota_code_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_quota_code_Set() const{
    return m_quota_code_isSet;
}

bool OAIRequestedServiceQuotaChange::is_quota_code_Valid() const{
    return m_quota_code_isValid;
}

QString OAIRequestedServiceQuotaChange::getQuotaName() const {
    return m_quota_name;
}
void OAIRequestedServiceQuotaChange::setQuotaName(const QString &quota_name) {
    m_quota_name = quota_name;
    m_quota_name_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_quota_name_Set() const{
    return m_quota_name_isSet;
}

bool OAIRequestedServiceQuotaChange::is_quota_name_Valid() const{
    return m_quota_name_isValid;
}

double OAIRequestedServiceQuotaChange::getDesiredValue() const {
    return m_desired_value;
}
void OAIRequestedServiceQuotaChange::setDesiredValue(const double &desired_value) {
    m_desired_value = desired_value;
    m_desired_value_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_desired_value_Set() const{
    return m_desired_value_isSet;
}

bool OAIRequestedServiceQuotaChange::is_desired_value_Valid() const{
    return m_desired_value_isValid;
}

OAIRequestStatus OAIRequestedServiceQuotaChange::getStatus() const {
    return m_status;
}
void OAIRequestedServiceQuotaChange::setStatus(const OAIRequestStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRequestedServiceQuotaChange::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIRequestedServiceQuotaChange::getCreated() const {
    return m_created;
}
void OAIRequestedServiceQuotaChange::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRequestedServiceQuotaChange::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIRequestedServiceQuotaChange::getLastUpdated() const {
    return m_last_updated;
}
void OAIRequestedServiceQuotaChange::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIRequestedServiceQuotaChange::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIRequestedServiceQuotaChange::getRequester() const {
    return m_requester;
}
void OAIRequestedServiceQuotaChange::setRequester(const QString &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAIRequestedServiceQuotaChange::is_requester_Valid() const{
    return m_requester_isValid;
}

QString OAIRequestedServiceQuotaChange::getQuotaArn() const {
    return m_quota_arn;
}
void OAIRequestedServiceQuotaChange::setQuotaArn(const QString &quota_arn) {
    m_quota_arn = quota_arn;
    m_quota_arn_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_quota_arn_Set() const{
    return m_quota_arn_isSet;
}

bool OAIRequestedServiceQuotaChange::is_quota_arn_Valid() const{
    return m_quota_arn_isValid;
}

bool OAIRequestedServiceQuotaChange::getGlobalQuota() const {
    return m_global_quota;
}
void OAIRequestedServiceQuotaChange::setGlobalQuota(const bool &global_quota) {
    m_global_quota = global_quota;
    m_global_quota_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_global_quota_Set() const{
    return m_global_quota_isSet;
}

bool OAIRequestedServiceQuotaChange::is_global_quota_Valid() const{
    return m_global_quota_isValid;
}

QString OAIRequestedServiceQuotaChange::getUnit() const {
    return m_unit;
}
void OAIRequestedServiceQuotaChange::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIRequestedServiceQuotaChange::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIRequestedServiceQuotaChange::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIRequestedServiceQuotaChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestedServiceQuotaChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
