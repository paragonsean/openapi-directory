/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaPeriod::OAIQuotaPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaPeriod::OAIQuotaPeriod() {
    this->initializeModel();
}

OAIQuotaPeriod::~OAIQuotaPeriod() {}

void OAIQuotaPeriod::initializeModel() {

    m_period_value_isSet = false;
    m_period_value_isValid = false;

    m_period_unit_isSet = false;
    m_period_unit_isValid = false;
}

void OAIQuotaPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaPeriod::fromJsonObject(QJsonObject json) {

    m_period_value_isValid = ::OpenAPI::fromJsonValue(m_period_value, json[QString("PeriodValue")]);
    m_period_value_isSet = !json[QString("PeriodValue")].isNull() && m_period_value_isValid;

    m_period_unit_isValid = ::OpenAPI::fromJsonValue(m_period_unit, json[QString("PeriodUnit")]);
    m_period_unit_isSet = !json[QString("PeriodUnit")].isNull() && m_period_unit_isValid;
}

QString OAIQuotaPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_period_value_isSet) {
        obj.insert(QString("PeriodValue"), ::OpenAPI::toJsonValue(m_period_value));
    }
    if (m_period_unit.isSet()) {
        obj.insert(QString("PeriodUnit"), ::OpenAPI::toJsonValue(m_period_unit));
    }
    return obj;
}

qint32 OAIQuotaPeriod::getPeriodValue() const {
    return m_period_value;
}
void OAIQuotaPeriod::setPeriodValue(const qint32 &period_value) {
    m_period_value = period_value;
    m_period_value_isSet = true;
}

bool OAIQuotaPeriod::is_period_value_Set() const{
    return m_period_value_isSet;
}

bool OAIQuotaPeriod::is_period_value_Valid() const{
    return m_period_value_isValid;
}

OAIPeriodUnit OAIQuotaPeriod::getPeriodUnit() const {
    return m_period_unit;
}
void OAIQuotaPeriod::setPeriodUnit(const OAIPeriodUnit &period_unit) {
    m_period_unit = period_unit;
    m_period_unit_isSet = true;
}

bool OAIQuotaPeriod::is_period_unit_Set() const{
    return m_period_unit_isSet;
}

bool OAIQuotaPeriod::is_period_unit_Valid() const{
    return m_period_unit_isValid;
}

bool OAIQuotaPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_period_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
