/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorReason::OAIErrorReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorReason::OAIErrorReason() {
    this->initializeModel();
}

OAIErrorReason::~OAIErrorReason() {}

void OAIErrorReason::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIErrorReason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorReason::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;
}

QString OAIErrorReason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorReason::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

OAIErrorCode OAIErrorReason::getErrorCode() const {
    return m_error_code;
}
void OAIErrorReason::setErrorCode(const OAIErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIErrorReason::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIErrorReason::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIErrorReason::getErrorMessage() const {
    return m_error_message;
}
void OAIErrorReason::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIErrorReason::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIErrorReason::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIErrorReason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
