/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListServiceQuotasResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListServiceQuotasResponse::OAIListServiceQuotasResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListServiceQuotasResponse::OAIListServiceQuotasResponse() {
    this->initializeModel();
}

OAIListServiceQuotasResponse::~OAIListServiceQuotasResponse() {}

void OAIListServiceQuotasResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_quotas_isSet = false;
    m_quotas_isValid = false;
}

void OAIListServiceQuotasResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListServiceQuotasResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_quotas_isValid = ::OpenAPI::fromJsonValue(m_quotas, json[QString("Quotas")]);
    m_quotas_isSet = !json[QString("Quotas")].isNull() && m_quotas_isValid;
}

QString OAIListServiceQuotasResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListServiceQuotasResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_quotas.isSet()) {
        obj.insert(QString("Quotas"), ::OpenAPI::toJsonValue(m_quotas));
    }
    return obj;
}

QString OAIListServiceQuotasResponse::getNextToken() const {
    return m_next_token;
}
void OAIListServiceQuotasResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListServiceQuotasResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListServiceQuotasResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListServiceQuotasResponse::getQuotas() const {
    return m_quotas;
}
void OAIListServiceQuotasResponse::setQuotas(const QList &quotas) {
    m_quotas = quotas;
    m_quotas_isSet = true;
}

bool OAIListServiceQuotasResponse::is_quotas_Set() const{
    return m_quotas_isSet;
}

bool OAIListServiceQuotasResponse::is_quotas_Valid() const{
    return m_quotas_isValid;
}

bool OAIListServiceQuotasResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quotas.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListServiceQuotasResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
