/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleteServiceQuotaIncreaseRequestFromTemplateRequest.h"
#include "OAIGetAWSDefaultServiceQuotaRequest.h"
#include "OAIGetAWSDefaultServiceQuotaResponse.h"
#include "OAIGetAssociationForServiceQuotaTemplateResponse.h"
#include "OAIGetRequestedServiceQuotaChangeRequest.h"
#include "OAIGetRequestedServiceQuotaChangeResponse.h"
#include "OAIGetServiceQuotaIncreaseRequestFromTemplateRequest.h"
#include "OAIGetServiceQuotaIncreaseRequestFromTemplateResponse.h"
#include "OAIGetServiceQuotaRequest.h"
#include "OAIGetServiceQuotaResponse.h"
#include "OAIListAWSDefaultServiceQuotasRequest.h"
#include "OAIListAWSDefaultServiceQuotasResponse.h"
#include "OAIListRequestedServiceQuotaChangeHistoryByQuotaRequest.h"
#include "OAIListRequestedServiceQuotaChangeHistoryByQuotaResponse.h"
#include "OAIListRequestedServiceQuotaChangeHistoryRequest.h"
#include "OAIListRequestedServiceQuotaChangeHistoryResponse.h"
#include "OAIListServiceQuotaIncreaseRequestsInTemplateRequest.h"
#include "OAIListServiceQuotaIncreaseRequestsInTemplateResponse.h"
#include "OAIListServiceQuotasRequest.h"
#include "OAIListServiceQuotasResponse.h"
#include "OAIListServicesRequest.h"
#include "OAIListServicesResponse.h"
#include "OAIListTagsForResourceRequest.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIObject.h"
#include "OAIPutServiceQuotaIncreaseRequestIntoTemplateRequest.h"
#include "OAIPutServiceQuotaIncreaseRequestIntoTemplateResponse.h"
#include "OAIRequestServiceQuotaIncreaseRequest.h"
#include "OAIRequestServiceQuotaIncreaseResponse.h"
#include "OAITagResourceRequest.h"
#include "OAIUntagResourceRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateServiceQuotaTemplate(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_service_quota_increase_request_from_template_request OAIDeleteServiceQuotaIncreaseRequestFromTemplateRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteServiceQuotaIncreaseRequestFromTemplate(const QString &x_amz_target, const OAIDeleteServiceQuotaIncreaseRequestFromTemplateRequest &oai_delete_service_quota_increase_request_from_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateServiceQuotaTemplate(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_aws_default_service_quota_request OAIGetAWSDefaultServiceQuotaRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAWSDefaultServiceQuota(const QString &x_amz_target, const OAIGetAWSDefaultServiceQuotaRequest &oai_get_aws_default_service_quota_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAssociationForServiceQuotaTemplate(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_requested_service_quota_change_request OAIGetRequestedServiceQuotaChangeRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRequestedServiceQuotaChange(const QString &x_amz_target, const OAIGetRequestedServiceQuotaChangeRequest &oai_get_requested_service_quota_change_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_service_quota_request OAIGetServiceQuotaRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getServiceQuota(const QString &x_amz_target, const OAIGetServiceQuotaRequest &oai_get_service_quota_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_service_quota_increase_request_from_template_request OAIGetServiceQuotaIncreaseRequestFromTemplateRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getServiceQuotaIncreaseRequestFromTemplate(const QString &x_amz_target, const OAIGetServiceQuotaIncreaseRequestFromTemplateRequest &oai_get_service_quota_increase_request_from_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_aws_default_service_quotas_request OAIListAWSDefaultServiceQuotasRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAWSDefaultServiceQuotas(const QString &x_amz_target, const OAIListAWSDefaultServiceQuotasRequest &oai_list_aws_default_service_quotas_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_requested_service_quota_change_history_request OAIListRequestedServiceQuotaChangeHistoryRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listRequestedServiceQuotaChangeHistory(const QString &x_amz_target, const OAIListRequestedServiceQuotaChangeHistoryRequest &oai_list_requested_service_quota_change_history_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_requested_service_quota_change_history_by_quota_request OAIListRequestedServiceQuotaChangeHistoryByQuotaRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listRequestedServiceQuotaChangeHistoryByQuota(const QString &x_amz_target, const OAIListRequestedServiceQuotaChangeHistoryByQuotaRequest &oai_list_requested_service_quota_change_history_by_quota_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_service_quota_increase_requests_in_template_request OAIListServiceQuotaIncreaseRequestsInTemplateRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listServiceQuotaIncreaseRequestsInTemplate(const QString &x_amz_target, const OAIListServiceQuotaIncreaseRequestsInTemplateRequest &oai_list_service_quota_increase_requests_in_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_service_quotas_request OAIListServiceQuotasRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listServiceQuotas(const QString &x_amz_target, const OAIListServiceQuotasRequest &oai_list_service_quotas_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_services_request OAIListServicesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listServices(const QString &x_amz_target, const OAIListServicesRequest &oai_list_services_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_resource_request OAIListTagsForResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &x_amz_target, const OAIListTagsForResourceRequest &oai_list_tags_for_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_service_quota_increase_request_into_template_request OAIPutServiceQuotaIncreaseRequestIntoTemplateRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putServiceQuotaIncreaseRequestIntoTemplate(const QString &x_amz_target, const OAIPutServiceQuotaIncreaseRequestIntoTemplateRequest &oai_put_service_quota_increase_request_into_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_request_service_quota_increase_request OAIRequestServiceQuotaIncreaseRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void requestServiceQuotaIncrease(const QString &x_amz_target, const OAIRequestServiceQuotaIncreaseRequest &oai_request_service_quota_increase_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_tag_resource_request OAITagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &x_amz_target, const OAITagResourceRequest &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &x_amz_target, const OAIUntagResourceRequest &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void associateServiceQuotaTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteServiceQuotaIncreaseRequestFromTemplateCallback(OAIHttpRequestWorker *worker);
    void disassociateServiceQuotaTemplateCallback(OAIHttpRequestWorker *worker);
    void getAWSDefaultServiceQuotaCallback(OAIHttpRequestWorker *worker);
    void getAssociationForServiceQuotaTemplateCallback(OAIHttpRequestWorker *worker);
    void getRequestedServiceQuotaChangeCallback(OAIHttpRequestWorker *worker);
    void getServiceQuotaCallback(OAIHttpRequestWorker *worker);
    void getServiceQuotaIncreaseRequestFromTemplateCallback(OAIHttpRequestWorker *worker);
    void listAWSDefaultServiceQuotasCallback(OAIHttpRequestWorker *worker);
    void listRequestedServiceQuotaChangeHistoryCallback(OAIHttpRequestWorker *worker);
    void listRequestedServiceQuotaChangeHistoryByQuotaCallback(OAIHttpRequestWorker *worker);
    void listServiceQuotaIncreaseRequestsInTemplateCallback(OAIHttpRequestWorker *worker);
    void listServiceQuotasCallback(OAIHttpRequestWorker *worker);
    void listServicesCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void putServiceQuotaIncreaseRequestIntoTemplateCallback(OAIHttpRequestWorker *worker);
    void requestServiceQuotaIncreaseCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void associateServiceQuotaTemplateSignal(OAIObject summary);
    void deleteServiceQuotaIncreaseRequestFromTemplateSignal(OAIObject summary);
    void disassociateServiceQuotaTemplateSignal(OAIObject summary);
    void getAWSDefaultServiceQuotaSignal(OAIGetAWSDefaultServiceQuotaResponse summary);
    void getAssociationForServiceQuotaTemplateSignal(OAIGetAssociationForServiceQuotaTemplateResponse summary);
    void getRequestedServiceQuotaChangeSignal(OAIGetRequestedServiceQuotaChangeResponse summary);
    void getServiceQuotaSignal(OAIGetServiceQuotaResponse summary);
    void getServiceQuotaIncreaseRequestFromTemplateSignal(OAIGetServiceQuotaIncreaseRequestFromTemplateResponse summary);
    void listAWSDefaultServiceQuotasSignal(OAIListAWSDefaultServiceQuotasResponse summary);
    void listRequestedServiceQuotaChangeHistorySignal(OAIListRequestedServiceQuotaChangeHistoryResponse summary);
    void listRequestedServiceQuotaChangeHistoryByQuotaSignal(OAIListRequestedServiceQuotaChangeHistoryByQuotaResponse summary);
    void listServiceQuotaIncreaseRequestsInTemplateSignal(OAIListServiceQuotaIncreaseRequestsInTemplateResponse summary);
    void listServiceQuotasSignal(OAIListServiceQuotasResponse summary);
    void listServicesSignal(OAIListServicesResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void putServiceQuotaIncreaseRequestIntoTemplateSignal(OAIPutServiceQuotaIncreaseRequestIntoTemplateResponse summary);
    void requestServiceQuotaIncreaseSignal(OAIRequestServiceQuotaIncreaseResponse summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);


    void associateServiceQuotaTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteServiceQuotaIncreaseRequestFromTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociateServiceQuotaTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAWSDefaultServiceQuotaSignalFull(OAIHttpRequestWorker *worker, OAIGetAWSDefaultServiceQuotaResponse summary);
    void getAssociationForServiceQuotaTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetAssociationForServiceQuotaTemplateResponse summary);
    void getRequestedServiceQuotaChangeSignalFull(OAIHttpRequestWorker *worker, OAIGetRequestedServiceQuotaChangeResponse summary);
    void getServiceQuotaSignalFull(OAIHttpRequestWorker *worker, OAIGetServiceQuotaResponse summary);
    void getServiceQuotaIncreaseRequestFromTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetServiceQuotaIncreaseRequestFromTemplateResponse summary);
    void listAWSDefaultServiceQuotasSignalFull(OAIHttpRequestWorker *worker, OAIListAWSDefaultServiceQuotasResponse summary);
    void listRequestedServiceQuotaChangeHistorySignalFull(OAIHttpRequestWorker *worker, OAIListRequestedServiceQuotaChangeHistoryResponse summary);
    void listRequestedServiceQuotaChangeHistoryByQuotaSignalFull(OAIHttpRequestWorker *worker, OAIListRequestedServiceQuotaChangeHistoryByQuotaResponse summary);
    void listServiceQuotaIncreaseRequestsInTemplateSignalFull(OAIHttpRequestWorker *worker, OAIListServiceQuotaIncreaseRequestsInTemplateResponse summary);
    void listServiceQuotasSignalFull(OAIHttpRequestWorker *worker, OAIListServiceQuotasResponse summary);
    void listServicesSignalFull(OAIHttpRequestWorker *worker, OAIListServicesResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void putServiceQuotaIncreaseRequestIntoTemplateSignalFull(OAIHttpRequestWorker *worker, OAIPutServiceQuotaIncreaseRequestIntoTemplateResponse summary);
    void requestServiceQuotaIncreaseSignalFull(OAIHttpRequestWorker *worker, OAIRequestServiceQuotaIncreaseResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use associateServiceQuotaTemplateSignalError() instead")
    void associateServiceQuotaTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateServiceQuotaTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceQuotaIncreaseRequestFromTemplateSignalError() instead")
    void deleteServiceQuotaIncreaseRequestFromTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceQuotaIncreaseRequestFromTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateServiceQuotaTemplateSignalError() instead")
    void disassociateServiceQuotaTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateServiceQuotaTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAWSDefaultServiceQuotaSignalError() instead")
    void getAWSDefaultServiceQuotaSignalE(OAIGetAWSDefaultServiceQuotaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAWSDefaultServiceQuotaSignalError(OAIGetAWSDefaultServiceQuotaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationForServiceQuotaTemplateSignalError() instead")
    void getAssociationForServiceQuotaTemplateSignalE(OAIGetAssociationForServiceQuotaTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationForServiceQuotaTemplateSignalError(OAIGetAssociationForServiceQuotaTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestedServiceQuotaChangeSignalError() instead")
    void getRequestedServiceQuotaChangeSignalE(OAIGetRequestedServiceQuotaChangeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestedServiceQuotaChangeSignalError(OAIGetRequestedServiceQuotaChangeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceQuotaSignalError() instead")
    void getServiceQuotaSignalE(OAIGetServiceQuotaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceQuotaSignalError(OAIGetServiceQuotaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceQuotaIncreaseRequestFromTemplateSignalError() instead")
    void getServiceQuotaIncreaseRequestFromTemplateSignalE(OAIGetServiceQuotaIncreaseRequestFromTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceQuotaIncreaseRequestFromTemplateSignalError(OAIGetServiceQuotaIncreaseRequestFromTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAWSDefaultServiceQuotasSignalError() instead")
    void listAWSDefaultServiceQuotasSignalE(OAIListAWSDefaultServiceQuotasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAWSDefaultServiceQuotasSignalError(OAIListAWSDefaultServiceQuotasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRequestedServiceQuotaChangeHistorySignalError() instead")
    void listRequestedServiceQuotaChangeHistorySignalE(OAIListRequestedServiceQuotaChangeHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRequestedServiceQuotaChangeHistorySignalError(OAIListRequestedServiceQuotaChangeHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRequestedServiceQuotaChangeHistoryByQuotaSignalError() instead")
    void listRequestedServiceQuotaChangeHistoryByQuotaSignalE(OAIListRequestedServiceQuotaChangeHistoryByQuotaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRequestedServiceQuotaChangeHistoryByQuotaSignalError(OAIListRequestedServiceQuotaChangeHistoryByQuotaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceQuotaIncreaseRequestsInTemplateSignalError() instead")
    void listServiceQuotaIncreaseRequestsInTemplateSignalE(OAIListServiceQuotaIncreaseRequestsInTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceQuotaIncreaseRequestsInTemplateSignalError(OAIListServiceQuotaIncreaseRequestsInTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceQuotasSignalError() instead")
    void listServiceQuotasSignalE(OAIListServiceQuotasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceQuotasSignalError(OAIListServiceQuotasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalError() instead")
    void listServicesSignalE(OAIListServicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalError(OAIListServicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putServiceQuotaIncreaseRequestIntoTemplateSignalError() instead")
    void putServiceQuotaIncreaseRequestIntoTemplateSignalE(OAIPutServiceQuotaIncreaseRequestIntoTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putServiceQuotaIncreaseRequestIntoTemplateSignalError(OAIPutServiceQuotaIncreaseRequestIntoTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestServiceQuotaIncreaseSignalError() instead")
    void requestServiceQuotaIncreaseSignalE(OAIRequestServiceQuotaIncreaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestServiceQuotaIncreaseSignalError(OAIRequestServiceQuotaIncreaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use associateServiceQuotaTemplateSignalErrorFull() instead")
    void associateServiceQuotaTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateServiceQuotaTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceQuotaIncreaseRequestFromTemplateSignalErrorFull() instead")
    void deleteServiceQuotaIncreaseRequestFromTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceQuotaIncreaseRequestFromTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateServiceQuotaTemplateSignalErrorFull() instead")
    void disassociateServiceQuotaTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateServiceQuotaTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAWSDefaultServiceQuotaSignalErrorFull() instead")
    void getAWSDefaultServiceQuotaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAWSDefaultServiceQuotaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationForServiceQuotaTemplateSignalErrorFull() instead")
    void getAssociationForServiceQuotaTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationForServiceQuotaTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestedServiceQuotaChangeSignalErrorFull() instead")
    void getRequestedServiceQuotaChangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestedServiceQuotaChangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceQuotaSignalErrorFull() instead")
    void getServiceQuotaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceQuotaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceQuotaIncreaseRequestFromTemplateSignalErrorFull() instead")
    void getServiceQuotaIncreaseRequestFromTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceQuotaIncreaseRequestFromTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAWSDefaultServiceQuotasSignalErrorFull() instead")
    void listAWSDefaultServiceQuotasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAWSDefaultServiceQuotasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRequestedServiceQuotaChangeHistorySignalErrorFull() instead")
    void listRequestedServiceQuotaChangeHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRequestedServiceQuotaChangeHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRequestedServiceQuotaChangeHistoryByQuotaSignalErrorFull() instead")
    void listRequestedServiceQuotaChangeHistoryByQuotaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRequestedServiceQuotaChangeHistoryByQuotaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceQuotaIncreaseRequestsInTemplateSignalErrorFull() instead")
    void listServiceQuotaIncreaseRequestsInTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceQuotaIncreaseRequestsInTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceQuotasSignalErrorFull() instead")
    void listServiceQuotasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceQuotasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalErrorFull() instead")
    void listServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putServiceQuotaIncreaseRequestIntoTemplateSignalErrorFull() instead")
    void putServiceQuotaIncreaseRequestIntoTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putServiceQuotaIncreaseRequestIntoTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestServiceQuotaIncreaseSignalErrorFull() instead")
    void requestServiceQuotaIncreaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestServiceQuotaIncreaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
