/**
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceQuota_ErrorReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceQuota_ErrorReason::OAIServiceQuota_ErrorReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceQuota_ErrorReason::OAIServiceQuota_ErrorReason() {
    this->initializeModel();
}

OAIServiceQuota_ErrorReason::~OAIServiceQuota_ErrorReason() {}

void OAIServiceQuota_ErrorReason::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIServiceQuota_ErrorReason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceQuota_ErrorReason::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;
}

QString OAIServiceQuota_ErrorReason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceQuota_ErrorReason::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

OAIErrorCode OAIServiceQuota_ErrorReason::getErrorCode() const {
    return m_error_code;
}
void OAIServiceQuota_ErrorReason::setErrorCode(const OAIErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIServiceQuota_ErrorReason::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIServiceQuota_ErrorReason::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIServiceQuota_ErrorReason::getErrorMessage() const {
    return m_error_message;
}
void OAIServiceQuota_ErrorReason::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIServiceQuota_ErrorReason::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIServiceQuota_ErrorReason::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIServiceQuota_ErrorReason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceQuota_ErrorReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
