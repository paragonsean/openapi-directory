/*
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the CloudWatch metric that reflects quota usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.825308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricInfo {
  public static final String SERIALIZED_NAME_METRIC_NAMESPACE = "MetricNamespace";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMESPACE)
  private String metricNamespace;

  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_DIMENSIONS = "MetricDimensions";
  @SerializedName(SERIALIZED_NAME_METRIC_DIMENSIONS)
  private Map metricDimensions;

  public static final String SERIALIZED_NAME_METRIC_STATISTIC_RECOMMENDATION = "MetricStatisticRecommendation";
  @SerializedName(SERIALIZED_NAME_METRIC_STATISTIC_RECOMMENDATION)
  private String metricStatisticRecommendation;

  public MetricInfo() {
  }

  public MetricInfo metricNamespace(String metricNamespace) {
    this.metricNamespace = metricNamespace;
    return this;
  }

  /**
   * Get metricNamespace
   * @return metricNamespace
   */
  @javax.annotation.Nullable
  public String getMetricNamespace() {
    return metricNamespace;
  }

  public void setMetricNamespace(String metricNamespace) {
    this.metricNamespace = metricNamespace;
  }


  public MetricInfo metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MetricInfo metricDimensions(Map metricDimensions) {
    this.metricDimensions = metricDimensions;
    return this;
  }

  /**
   * Get metricDimensions
   * @return metricDimensions
   */
  @javax.annotation.Nullable
  public Map getMetricDimensions() {
    return metricDimensions;
  }

  public void setMetricDimensions(Map metricDimensions) {
    this.metricDimensions = metricDimensions;
  }


  public MetricInfo metricStatisticRecommendation(String metricStatisticRecommendation) {
    this.metricStatisticRecommendation = metricStatisticRecommendation;
    return this;
  }

  /**
   * Get metricStatisticRecommendation
   * @return metricStatisticRecommendation
   */
  @javax.annotation.Nullable
  public String getMetricStatisticRecommendation() {
    return metricStatisticRecommendation;
  }

  public void setMetricStatisticRecommendation(String metricStatisticRecommendation) {
    this.metricStatisticRecommendation = metricStatisticRecommendation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricInfo metricInfo = (MetricInfo) o;
    return Objects.equals(this.metricNamespace, metricInfo.metricNamespace) &&
        Objects.equals(this.metricName, metricInfo.metricName) &&
        Objects.equals(this.metricDimensions, metricInfo.metricDimensions) &&
        Objects.equals(this.metricStatisticRecommendation, metricInfo.metricStatisticRecommendation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricNamespace, metricName, metricDimensions, metricStatisticRecommendation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricInfo {\n");
    sb.append("    metricNamespace: ").append(toIndentedString(metricNamespace)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricDimensions: ").append(toIndentedString(metricDimensions)).append("\n");
    sb.append("    metricStatisticRecommendation: ").append(toIndentedString(metricStatisticRecommendation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricNamespace");
    openapiFields.add("MetricName");
    openapiFields.add("MetricDimensions");
    openapiFields.add("MetricStatisticRecommendation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricInfo is not found in the empty JSON string", MetricInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricNamespace`
      if (jsonObj.get("MetricNamespace") != null && !jsonObj.get("MetricNamespace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricNamespace"));
      }
      // validate the optional field `MetricName`
      if (jsonObj.get("MetricName") != null && !jsonObj.get("MetricName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricName"));
      }
      // validate the optional field `MetricDimensions`
      if (jsonObj.get("MetricDimensions") != null && !jsonObj.get("MetricDimensions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("MetricDimensions"));
      }
      // validate the optional field `MetricStatisticRecommendation`
      if (jsonObj.get("MetricStatisticRecommendation") != null && !jsonObj.get("MetricStatisticRecommendation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricStatisticRecommendation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricInfo>() {
           @Override
           public void write(JsonWriter out, MetricInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricInfo
   * @throws IOException if the JSON string is invalid with respect to MetricInfo
   */
  public static MetricInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricInfo.class);
  }

  /**
   * Convert an instance of MetricInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

