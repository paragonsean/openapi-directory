/*
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceQuotaErrorReason;
import org.openapitools.client.model.ServiceQuotaPeriod;
import org.openapitools.client.model.ServiceQuotaUsageMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a quota.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.825308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceQuota {
  public static final String SERIALIZED_NAME_SERVICE_CODE = "ServiceCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_QUOTA_ARN = "QuotaArn";
  @SerializedName(SERIALIZED_NAME_QUOTA_ARN)
  private String quotaArn;

  public static final String SERIALIZED_NAME_QUOTA_CODE = "QuotaCode";
  @SerializedName(SERIALIZED_NAME_QUOTA_CODE)
  private String quotaCode;

  public static final String SERIALIZED_NAME_QUOTA_NAME = "QuotaName";
  @SerializedName(SERIALIZED_NAME_QUOTA_NAME)
  private String quotaName;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_UNIT = "Unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_ADJUSTABLE = "Adjustable";
  @SerializedName(SERIALIZED_NAME_ADJUSTABLE)
  private Boolean adjustable;

  public static final String SERIALIZED_NAME_GLOBAL_QUOTA = "GlobalQuota";
  @SerializedName(SERIALIZED_NAME_GLOBAL_QUOTA)
  private Boolean globalQuota;

  public static final String SERIALIZED_NAME_USAGE_METRIC = "UsageMetric";
  @SerializedName(SERIALIZED_NAME_USAGE_METRIC)
  private ServiceQuotaUsageMetric usageMetric;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private ServiceQuotaPeriod period;

  public static final String SERIALIZED_NAME_ERROR_REASON = "ErrorReason";
  @SerializedName(SERIALIZED_NAME_ERROR_REASON)
  private ServiceQuotaErrorReason errorReason;

  public ServiceQuota() {
  }

  public ServiceQuota serviceCode(String serviceCode) {
    this.serviceCode = serviceCode;
    return this;
  }

  /**
   * Get serviceCode
   * @return serviceCode
   */
  @javax.annotation.Nullable
  public String getServiceCode() {
    return serviceCode;
  }

  public void setServiceCode(String serviceCode) {
    this.serviceCode = serviceCode;
  }


  public ServiceQuota serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ServiceQuota quotaArn(String quotaArn) {
    this.quotaArn = quotaArn;
    return this;
  }

  /**
   * Get quotaArn
   * @return quotaArn
   */
  @javax.annotation.Nullable
  public String getQuotaArn() {
    return quotaArn;
  }

  public void setQuotaArn(String quotaArn) {
    this.quotaArn = quotaArn;
  }


  public ServiceQuota quotaCode(String quotaCode) {
    this.quotaCode = quotaCode;
    return this;
  }

  /**
   * Get quotaCode
   * @return quotaCode
   */
  @javax.annotation.Nullable
  public String getQuotaCode() {
    return quotaCode;
  }

  public void setQuotaCode(String quotaCode) {
    this.quotaCode = quotaCode;
  }


  public ServiceQuota quotaName(String quotaName) {
    this.quotaName = quotaName;
    return this;
  }

  /**
   * Get quotaName
   * @return quotaName
   */
  @javax.annotation.Nullable
  public String getQuotaName() {
    return quotaName;
  }

  public void setQuotaName(String quotaName) {
    this.quotaName = quotaName;
  }


  public ServiceQuota value(Double value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }


  public ServiceQuota unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public ServiceQuota adjustable(Boolean adjustable) {
    this.adjustable = adjustable;
    return this;
  }

  /**
   * Get adjustable
   * @return adjustable
   */
  @javax.annotation.Nullable
  public Boolean getAdjustable() {
    return adjustable;
  }

  public void setAdjustable(Boolean adjustable) {
    this.adjustable = adjustable;
  }


  public ServiceQuota globalQuota(Boolean globalQuota) {
    this.globalQuota = globalQuota;
    return this;
  }

  /**
   * Get globalQuota
   * @return globalQuota
   */
  @javax.annotation.Nullable
  public Boolean getGlobalQuota() {
    return globalQuota;
  }

  public void setGlobalQuota(Boolean globalQuota) {
    this.globalQuota = globalQuota;
  }


  public ServiceQuota usageMetric(ServiceQuotaUsageMetric usageMetric) {
    this.usageMetric = usageMetric;
    return this;
  }

  /**
   * Get usageMetric
   * @return usageMetric
   */
  @javax.annotation.Nullable
  public ServiceQuotaUsageMetric getUsageMetric() {
    return usageMetric;
  }

  public void setUsageMetric(ServiceQuotaUsageMetric usageMetric) {
    this.usageMetric = usageMetric;
  }


  public ServiceQuota period(ServiceQuotaPeriod period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public ServiceQuotaPeriod getPeriod() {
    return period;
  }

  public void setPeriod(ServiceQuotaPeriod period) {
    this.period = period;
  }


  public ServiceQuota errorReason(ServiceQuotaErrorReason errorReason) {
    this.errorReason = errorReason;
    return this;
  }

  /**
   * Get errorReason
   * @return errorReason
   */
  @javax.annotation.Nullable
  public ServiceQuotaErrorReason getErrorReason() {
    return errorReason;
  }

  public void setErrorReason(ServiceQuotaErrorReason errorReason) {
    this.errorReason = errorReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceQuota serviceQuota = (ServiceQuota) o;
    return Objects.equals(this.serviceCode, serviceQuota.serviceCode) &&
        Objects.equals(this.serviceName, serviceQuota.serviceName) &&
        Objects.equals(this.quotaArn, serviceQuota.quotaArn) &&
        Objects.equals(this.quotaCode, serviceQuota.quotaCode) &&
        Objects.equals(this.quotaName, serviceQuota.quotaName) &&
        Objects.equals(this.value, serviceQuota.value) &&
        Objects.equals(this.unit, serviceQuota.unit) &&
        Objects.equals(this.adjustable, serviceQuota.adjustable) &&
        Objects.equals(this.globalQuota, serviceQuota.globalQuota) &&
        Objects.equals(this.usageMetric, serviceQuota.usageMetric) &&
        Objects.equals(this.period, serviceQuota.period) &&
        Objects.equals(this.errorReason, serviceQuota.errorReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceCode, serviceName, quotaArn, quotaCode, quotaName, value, unit, adjustable, globalQuota, usageMetric, period, errorReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceQuota {\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    quotaArn: ").append(toIndentedString(quotaArn)).append("\n");
    sb.append("    quotaCode: ").append(toIndentedString(quotaCode)).append("\n");
    sb.append("    quotaName: ").append(toIndentedString(quotaName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    adjustable: ").append(toIndentedString(adjustable)).append("\n");
    sb.append("    globalQuota: ").append(toIndentedString(globalQuota)).append("\n");
    sb.append("    usageMetric: ").append(toIndentedString(usageMetric)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    errorReason: ").append(toIndentedString(errorReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceCode");
    openapiFields.add("ServiceName");
    openapiFields.add("QuotaArn");
    openapiFields.add("QuotaCode");
    openapiFields.add("QuotaName");
    openapiFields.add("Value");
    openapiFields.add("Unit");
    openapiFields.add("Adjustable");
    openapiFields.add("GlobalQuota");
    openapiFields.add("UsageMetric");
    openapiFields.add("Period");
    openapiFields.add("ErrorReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceQuota is not found in the empty JSON string", ServiceQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ServiceCode`
      if (jsonObj.get("ServiceCode") != null && !jsonObj.get("ServiceCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceCode"));
      }
      // validate the optional field `ServiceName`
      if (jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceName"));
      }
      // validate the optional field `QuotaArn`
      if (jsonObj.get("QuotaArn") != null && !jsonObj.get("QuotaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QuotaArn"));
      }
      // validate the optional field `QuotaCode`
      if (jsonObj.get("QuotaCode") != null && !jsonObj.get("QuotaCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QuotaCode"));
      }
      // validate the optional field `QuotaName`
      if (jsonObj.get("QuotaName") != null && !jsonObj.get("QuotaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QuotaName"));
      }
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `Unit`
      if (jsonObj.get("Unit") != null && !jsonObj.get("Unit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Unit"));
      }
      // validate the optional field `Adjustable`
      if (jsonObj.get("Adjustable") != null && !jsonObj.get("Adjustable").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Adjustable"));
      }
      // validate the optional field `GlobalQuota`
      if (jsonObj.get("GlobalQuota") != null && !jsonObj.get("GlobalQuota").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("GlobalQuota"));
      }
      // validate the optional field `UsageMetric`
      if (jsonObj.get("UsageMetric") != null && !jsonObj.get("UsageMetric").isJsonNull()) {
        ServiceQuotaUsageMetric.validateJsonElement(jsonObj.get("UsageMetric"));
      }
      // validate the optional field `Period`
      if (jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) {
        ServiceQuotaPeriod.validateJsonElement(jsonObj.get("Period"));
      }
      // validate the optional field `ErrorReason`
      if (jsonObj.get("ErrorReason") != null && !jsonObj.get("ErrorReason").isJsonNull()) {
        ServiceQuotaErrorReason.validateJsonElement(jsonObj.get("ErrorReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceQuota>() {
           @Override
           public void write(JsonWriter out, ServiceQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceQuota
   * @throws IOException if the JSON string is invalid with respect to ServiceQuota
   */
  public static ServiceQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceQuota.class);
  }

  /**
   * Convert an instance of ServiceQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

