/*
 * Service Quotas
 * With Service Quotas, you can view and manage your quotas easily as your AWS workloads grow. Quotas, also referred to as limits, are the maximum number of resources that you can create in your AWS account. For more information, see the <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/\">Service Quotas User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestServiceQuotaIncreaseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:40.825308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestServiceQuotaIncreaseRequest {
  public static final String SERIALIZED_NAME_SERVICE_CODE = "ServiceCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_QUOTA_CODE = "QuotaCode";
  @SerializedName(SERIALIZED_NAME_QUOTA_CODE)
  private String quotaCode;

  public static final String SERIALIZED_NAME_DESIRED_VALUE = "DesiredValue";
  @SerializedName(SERIALIZED_NAME_DESIRED_VALUE)
  private Double desiredValue;

  public RequestServiceQuotaIncreaseRequest() {
  }

  public RequestServiceQuotaIncreaseRequest serviceCode(String serviceCode) {
    this.serviceCode = serviceCode;
    return this;
  }

  /**
   * Get serviceCode
   * @return serviceCode
   */
  @javax.annotation.Nonnull
  public String getServiceCode() {
    return serviceCode;
  }

  public void setServiceCode(String serviceCode) {
    this.serviceCode = serviceCode;
  }


  public RequestServiceQuotaIncreaseRequest quotaCode(String quotaCode) {
    this.quotaCode = quotaCode;
    return this;
  }

  /**
   * Get quotaCode
   * @return quotaCode
   */
  @javax.annotation.Nonnull
  public String getQuotaCode() {
    return quotaCode;
  }

  public void setQuotaCode(String quotaCode) {
    this.quotaCode = quotaCode;
  }


  public RequestServiceQuotaIncreaseRequest desiredValue(Double desiredValue) {
    this.desiredValue = desiredValue;
    return this;
  }

  /**
   * Get desiredValue
   * @return desiredValue
   */
  @javax.annotation.Nonnull
  public Double getDesiredValue() {
    return desiredValue;
  }

  public void setDesiredValue(Double desiredValue) {
    this.desiredValue = desiredValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestServiceQuotaIncreaseRequest requestServiceQuotaIncreaseRequest = (RequestServiceQuotaIncreaseRequest) o;
    return Objects.equals(this.serviceCode, requestServiceQuotaIncreaseRequest.serviceCode) &&
        Objects.equals(this.quotaCode, requestServiceQuotaIncreaseRequest.quotaCode) &&
        Objects.equals(this.desiredValue, requestServiceQuotaIncreaseRequest.desiredValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceCode, quotaCode, desiredValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestServiceQuotaIncreaseRequest {\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    quotaCode: ").append(toIndentedString(quotaCode)).append("\n");
    sb.append("    desiredValue: ").append(toIndentedString(desiredValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceCode");
    openapiFields.add("QuotaCode");
    openapiFields.add("DesiredValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceCode");
    openapiRequiredFields.add("QuotaCode");
    openapiRequiredFields.add("DesiredValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestServiceQuotaIncreaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestServiceQuotaIncreaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestServiceQuotaIncreaseRequest is not found in the empty JSON string", RequestServiceQuotaIncreaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestServiceQuotaIncreaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestServiceQuotaIncreaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestServiceQuotaIncreaseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ServiceCode`
      String.validateJsonElement(jsonObj.get("ServiceCode"));
      // validate the required field `QuotaCode`
      String.validateJsonElement(jsonObj.get("QuotaCode"));
      // validate the required field `DesiredValue`
      Double.validateJsonElement(jsonObj.get("DesiredValue"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestServiceQuotaIncreaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestServiceQuotaIncreaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestServiceQuotaIncreaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestServiceQuotaIncreaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestServiceQuotaIncreaseRequest>() {
           @Override
           public void write(JsonWriter out, RequestServiceQuotaIncreaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestServiceQuotaIncreaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestServiceQuotaIncreaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestServiceQuotaIncreaseRequest
   * @throws IOException if the JSON string is invalid with respect to RequestServiceQuotaIncreaseRequest
   */
  public static RequestServiceQuotaIncreaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestServiceQuotaIncreaseRequest.class);
  }

  /**
   * Convert an instance of RequestServiceQuotaIncreaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

