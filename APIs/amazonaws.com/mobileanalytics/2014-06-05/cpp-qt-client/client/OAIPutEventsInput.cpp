/**
 * Amazon Mobile Analytics
 * Amazon Mobile Analytics is a service for collecting, visualizing, and understanding app usage data at scale.
 *
 * The version of the OpenAPI document: 2014-06-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutEventsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutEventsInput::OAIPutEventsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutEventsInput::OAIPutEventsInput() {
    this->initializeModel();
}

OAIPutEventsInput::~OAIPutEventsInput() {}

void OAIPutEventsInput::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIPutEventsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutEventsInput::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;
}

QString OAIPutEventsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutEventsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

QList OAIPutEventsInput::getEvents() const {
    return m_events;
}
void OAIPutEventsInput::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIPutEventsInput::is_events_Set() const{
    return m_events_isSet;
}

bool OAIPutEventsInput::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIPutEventsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutEventsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && true;
}

} // namespace OpenAPI
