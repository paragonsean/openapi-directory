/**
 * Amazon Mobile Analytics
 * Amazon Mobile Analytics is a service for collecting, visualizing, and understanding app usage data at scale.
 *
 * The version of the OpenAPI document: 2014-06-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAIEvent::getEventType() const {
    return m_event_type;
}
void OAIEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIEvent::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIEvent_session OAIEvent::getSession() const {
    return m_session;
}
void OAIEvent::setSession(const OAIEvent_session &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIEvent::is_session_Set() const{
    return m_session_isSet;
}

bool OAIEvent::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIEvent::getVersion() const {
    return m_version;
}
void OAIEvent::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEvent::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEvent::is_version_Valid() const{
    return m_version_isValid;
}

QMap OAIEvent::getAttributes() const {
    return m_attributes;
}
void OAIEvent::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEvent::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEvent::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap OAIEvent::getMetrics() const {
    return m_metrics;
}
void OAIEvent::setMetrics(const QMap &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIEvent::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIEvent::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
