# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_session import EventSession
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: str=None, timestamp: str=None, session: EventSession=None, version: str=None, attributes: Dict=None, metrics: Dict=None):
        """Event - a model defined in OpenAPI

        :param event_type: The event_type of this Event.
        :param timestamp: The timestamp of this Event.
        :param session: The session of this Event.
        :param version: The version of this Event.
        :param attributes: The attributes of this Event.
        :param metrics: The metrics of this Event.
        """
        self.openapi_types = {
            'event_type': str,
            'timestamp': str,
            'session': EventSession,
            'version': str,
            'attributes': Dict,
            'metrics': Dict
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'timestamp': 'timestamp',
            'session': 'session',
            'version': 'version',
            'attributes': 'attributes',
            'metrics': 'metrics'
        }

        self._event_type = event_type
        self._timestamp = timestamp
        self._session = session
        self._version = version
        self._attributes = attributes
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this Event.


        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.


        :param event_type: The event_type of this Event.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.


        :return: The timestamp of this Event.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.


        :param timestamp: The timestamp of this Event.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def session(self):
        """Gets the session of this Event.


        :return: The session of this Event.
        :rtype: EventSession
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this Event.


        :param session: The session of this Event.
        :type session: EventSession
        """

        self._session = session

    @property
    def version(self):
        """Gets the version of this Event.


        :return: The version of this Event.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Event.


        :param version: The version of this Event.
        :type version: str
        """

        self._version = version

    @property
    def attributes(self):
        """Gets the attributes of this Event.


        :return: The attributes of this Event.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Event.


        :param attributes: The attributes of this Event.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def metrics(self):
        """Gets the metrics of this Event.


        :return: The metrics of this Event.
        :rtype: Dict
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Event.


        :param metrics: The metrics of this Event.
        :type metrics: Dict
        """

        self._metrics = metrics
