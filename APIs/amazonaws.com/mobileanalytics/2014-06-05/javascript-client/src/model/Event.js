/**
 * Amazon Mobile Analytics
 * Amazon Mobile Analytics is a service for collecting, visualizing, and understanding app usage data at scale.
 *
 * The version of the OpenAPI document: 2014-06-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventSession from './EventSession';

/**
 * The Event model module.
 * @module model/Event
 * @version 2014-06-05
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * A JSON object representing a batch of unique event occurrences in your app.
     * @alias module:model/Event
     * @param eventType {String} 
     * @param timestamp {String} 
     */
    constructor(eventType, timestamp) { 
        
        Event.initialize(this, eventType, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventType, timestamp) { 
        obj['eventType'] = eventType;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = EventSession.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `eventType`
        if (data['eventType']) { // data not null
          String.validateJSON(data['eventType']);
        }
        // validate the optional field `timestamp`
        if (data['timestamp']) { // data not null
          String.validateJSON(data['timestamp']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          EventSession.validateJSON(data['session']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          String.validateJSON(data['version']);
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          Object.validateJSON(data['attributes']);
        }
        // validate the optional field `metrics`
        if (data['metrics']) { // data not null
          Object.validateJSON(data['metrics']);
        }

        return true;
    }


}

Event.RequiredProperties = ["eventType", "timestamp"];

/**
 * @member {String} eventType
 */
Event.prototype['eventType'] = undefined;

/**
 * @member {String} timestamp
 */
Event.prototype['timestamp'] = undefined;

/**
 * @member {module:model/EventSession} session
 */
Event.prototype['session'] = undefined;

/**
 * @member {String} version
 */
Event.prototype['version'] = undefined;

/**
 * @member {Object} attributes
 */
Event.prototype['attributes'] = undefined;

/**
 * @member {Object} metrics
 */
Event.prototype['metrics'] = undefined;






export default Event;

