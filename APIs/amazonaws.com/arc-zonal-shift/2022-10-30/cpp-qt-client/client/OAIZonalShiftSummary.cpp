/**
 * AWS ARC - Zonal Shift
 * <p>This is the API Reference Guide for the zonal shift feature of Amazon Route 53 Application Recovery Controller. This guide is for developers who need detailed information about zonal shift API actions, data types, and errors.</p> <p>Zonal shift is in preview release for Amazon Route 53 Application Recovery Controller and is subject to change.</p> <p>Zonal shift in Route 53 ARC enables you to move traffic for a load balancer resource away from an Availability Zone. Starting a zonal shift helps your application recover immediately, for example, from a developer's bad code deployment or from an AWS infrastructure failure in a single Availability Zone, reducing the impact and time lost from an issue in one zone. </p> <p>Supported AWS resources are automatically registered with Route 53 ARC. Resources that are registered for zonal shifts in Route 53 ARC are managed resources in Route 53 ARC. You can start a zonal shift for any managed resource in your account in a Region. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p> <p>Zonal shifts are temporary. You must specify an expiration when you start a zonal shift, of up to three days initially. If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>For more information about using zonal shift, see the <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html\">Amazon Route 53 Application Recovery Controller Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZonalShiftSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZonalShiftSummary::OAIZonalShiftSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZonalShiftSummary::OAIZonalShiftSummary() {
    this->initializeModel();
}

OAIZonalShiftSummary::~OAIZonalShiftSummary() {}

void OAIZonalShiftSummary::initializeModel() {

    m_away_from_isSet = false;
    m_away_from_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_resource_identifier_isSet = false;
    m_resource_identifier_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_zonal_shift_id_isSet = false;
    m_zonal_shift_id_isValid = false;
}

void OAIZonalShiftSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZonalShiftSummary::fromJsonObject(QJsonObject json) {

    m_away_from_isValid = ::OpenAPI::fromJsonValue(m_away_from, json[QString("awayFrom")]);
    m_away_from_isSet = !json[QString("awayFrom")].isNull() && m_away_from_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier, json[QString("resourceIdentifier")]);
    m_resource_identifier_isSet = !json[QString("resourceIdentifier")].isNull() && m_resource_identifier_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_zonal_shift_id_isValid = ::OpenAPI::fromJsonValue(m_zonal_shift_id, json[QString("zonalShiftId")]);
    m_zonal_shift_id_isSet = !json[QString("zonalShiftId")].isNull() && m_zonal_shift_id_isValid;
}

QString OAIZonalShiftSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZonalShiftSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_away_from_isSet) {
        obj.insert(QString("awayFrom"), ::OpenAPI::toJsonValue(m_away_from));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_resource_identifier_isSet) {
        obj.insert(QString("resourceIdentifier"), ::OpenAPI::toJsonValue(m_resource_identifier));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_zonal_shift_id_isSet) {
        obj.insert(QString("zonalShiftId"), ::OpenAPI::toJsonValue(m_zonal_shift_id));
    }
    return obj;
}

QString OAIZonalShiftSummary::getAwayFrom() const {
    return m_away_from;
}
void OAIZonalShiftSummary::setAwayFrom(const QString &away_from) {
    m_away_from = away_from;
    m_away_from_isSet = true;
}

bool OAIZonalShiftSummary::is_away_from_Set() const{
    return m_away_from_isSet;
}

bool OAIZonalShiftSummary::is_away_from_Valid() const{
    return m_away_from_isValid;
}

QString OAIZonalShiftSummary::getComment() const {
    return m_comment;
}
void OAIZonalShiftSummary::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIZonalShiftSummary::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIZonalShiftSummary::is_comment_Valid() const{
    return m_comment_isValid;
}

QDateTime OAIZonalShiftSummary::getExpiryTime() const {
    return m_expiry_time;
}
void OAIZonalShiftSummary::setExpiryTime(const QDateTime &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIZonalShiftSummary::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIZonalShiftSummary::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

QString OAIZonalShiftSummary::getResourceIdentifier() const {
    return m_resource_identifier;
}
void OAIZonalShiftSummary::setResourceIdentifier(const QString &resource_identifier) {
    m_resource_identifier = resource_identifier;
    m_resource_identifier_isSet = true;
}

bool OAIZonalShiftSummary::is_resource_identifier_Set() const{
    return m_resource_identifier_isSet;
}

bool OAIZonalShiftSummary::is_resource_identifier_Valid() const{
    return m_resource_identifier_isValid;
}

QDateTime OAIZonalShiftSummary::getStartTime() const {
    return m_start_time;
}
void OAIZonalShiftSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIZonalShiftSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIZonalShiftSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIZonalShiftStatus OAIZonalShiftSummary::getStatus() const {
    return m_status;
}
void OAIZonalShiftSummary::setStatus(const OAIZonalShiftStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIZonalShiftSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIZonalShiftSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIZonalShiftSummary::getZonalShiftId() const {
    return m_zonal_shift_id;
}
void OAIZonalShiftSummary::setZonalShiftId(const QString &zonal_shift_id) {
    m_zonal_shift_id = zonal_shift_id;
    m_zonal_shift_id_isSet = true;
}

bool OAIZonalShiftSummary::is_zonal_shift_id_Set() const{
    return m_zonal_shift_id_isSet;
}

bool OAIZonalShiftSummary::is_zonal_shift_id_Valid() const{
    return m_zonal_shift_id_isValid;
}

bool OAIZonalShiftSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zonal_shift_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZonalShiftSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_away_from_isValid && m_comment_isValid && m_expiry_time_isValid && m_resource_identifier_isValid && m_start_time_isValid && m_status_isValid && m_zonal_shift_id_isValid && true;
}

} // namespace OpenAPI
