/**
 * AWS ARC - Zonal Shift
 * <p>This is the API Reference Guide for the zonal shift feature of Amazon Route 53 Application Recovery Controller. This guide is for developers who need detailed information about zonal shift API actions, data types, and errors.</p> <p>Zonal shift is in preview release for Amazon Route 53 Application Recovery Controller and is subject to change.</p> <p>Zonal shift in Route 53 ARC enables you to move traffic for a load balancer resource away from an Availability Zone. Starting a zonal shift helps your application recover immediately, for example, from a developer's bad code deployment or from an AWS infrastructure failure in a single Availability Zone, reducing the impact and time lost from an issue in one zone. </p> <p>Supported AWS resources are automatically registered with Route 53 ARC. Resources that are registered for zonal shifts in Route 53 ARC are managed resources in Route 53 ARC. You can start a zonal shift for any managed resource in your account in a Region. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p> <p>Zonal shifts are temporary. You must specify an expiration when you start a zonal shift, of up to three days initially. If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>For more information about using zonal shift, see the <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html\">Amazon Route 53 Application Recovery Controller Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIZonalShiftInResource.h
 *
 * A complex structure that lists the zonal shifts for a managed resource and their statuses for the resource.
 */

#ifndef OAIZonalShiftInResource_H
#define OAIZonalShiftInResource_H

#include <QJsonObject>

#include "OAIAppliedStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIZonalShiftInResource : public OAIObject {
public:
    OAIZonalShiftInResource();
    OAIZonalShiftInResource(QString json);
    ~OAIZonalShiftInResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppliedStatus getAppliedStatus() const;
    void setAppliedStatus(const OAIAppliedStatus &applied_status);
    bool is_applied_status_Set() const;
    bool is_applied_status_Valid() const;

    QString getAwayFrom() const;
    void setAwayFrom(const QString &away_from);
    bool is_away_from_Set() const;
    bool is_away_from_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QDateTime getExpiryTime() const;
    void setExpiryTime(const QDateTime &expiry_time);
    bool is_expiry_time_Set() const;
    bool is_expiry_time_Valid() const;

    QString getResourceIdentifier() const;
    void setResourceIdentifier(const QString &resource_identifier);
    bool is_resource_identifier_Set() const;
    bool is_resource_identifier_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getZonalShiftId() const;
    void setZonalShiftId(const QString &zonal_shift_id);
    bool is_zonal_shift_id_Set() const;
    bool is_zonal_shift_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppliedStatus m_applied_status;
    bool m_applied_status_isSet;
    bool m_applied_status_isValid;

    QString m_away_from;
    bool m_away_from_isSet;
    bool m_away_from_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QDateTime m_expiry_time;
    bool m_expiry_time_isSet;
    bool m_expiry_time_isValid;

    QString m_resource_identifier;
    bool m_resource_identifier_isSet;
    bool m_resource_identifier_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_zonal_shift_id;
    bool m_zonal_shift_id_isSet;
    bool m_zonal_shift_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIZonalShiftInResource)

#endif // OAIZonalShiftInResource_H
