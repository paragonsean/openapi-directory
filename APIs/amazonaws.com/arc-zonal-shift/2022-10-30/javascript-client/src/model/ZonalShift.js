/**
 * AWS ARC - Zonal Shift
 * <p>This is the API Reference Guide for the zonal shift feature of Amazon Route 53 Application Recovery Controller. This guide is for developers who need detailed information about zonal shift API actions, data types, and errors.</p> <p>Zonal shift is in preview release for Amazon Route 53 Application Recovery Controller and is subject to change.</p> <p>Zonal shift in Route 53 ARC enables you to move traffic for a load balancer resource away from an Availability Zone. Starting a zonal shift helps your application recover immediately, for example, from a developer's bad code deployment or from an AWS infrastructure failure in a single Availability Zone, reducing the impact and time lost from an issue in one zone. </p> <p>Supported AWS resources are automatically registered with Route 53 ARC. Resources that are registered for zonal shifts in Route 53 ARC are managed resources in Route 53 ARC. You can start a zonal shift for any managed resource in your account in a Region. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p> <p>Zonal shifts are temporary. You must specify an expiration when you start a zonal shift, of up to three days initially. If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>For more information about using zonal shift, see the <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html\">Amazon Route 53 Application Recovery Controller Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ZonalShiftStatus from './ZonalShiftStatus';

/**
 * The ZonalShift model module.
 * @module model/ZonalShift
 * @version 2022-10-30
 */
class ZonalShift {
    /**
     * Constructs a new <code>ZonalShift</code>.
     * @alias module:model/ZonalShift
     * @param awayFrom {String} 
     * @param comment {String} 
     * @param expiryTime {Date} 
     * @param resourceIdentifier {String} 
     * @param startTime {Date} 
     * @param status {module:model/ZonalShiftStatus} 
     * @param zonalShiftId {String} 
     */
    constructor(awayFrom, comment, expiryTime, resourceIdentifier, startTime, status, zonalShiftId) { 
        
        ZonalShift.initialize(this, awayFrom, comment, expiryTime, resourceIdentifier, startTime, status, zonalShiftId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, awayFrom, comment, expiryTime, resourceIdentifier, startTime, status, zonalShiftId) { 
        obj['awayFrom'] = awayFrom;
        obj['comment'] = comment;
        obj['expiryTime'] = expiryTime;
        obj['resourceIdentifier'] = resourceIdentifier;
        obj['startTime'] = startTime;
        obj['status'] = status;
        obj['zonalShiftId'] = zonalShiftId;
    }

    /**
     * Constructs a <code>ZonalShift</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZonalShift} obj Optional instance to populate.
     * @return {module:model/ZonalShift} The populated <code>ZonalShift</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZonalShift();

            if (data.hasOwnProperty('awayFrom')) {
                obj['awayFrom'] = ApiClient.convertToType(data['awayFrom'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('expiryTime')) {
                obj['expiryTime'] = ApiClient.convertToType(data['expiryTime'], 'Date');
            }
            if (data.hasOwnProperty('resourceIdentifier')) {
                obj['resourceIdentifier'] = ApiClient.convertToType(data['resourceIdentifier'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ZonalShiftStatus);
            }
            if (data.hasOwnProperty('zonalShiftId')) {
                obj['zonalShiftId'] = ApiClient.convertToType(data['zonalShiftId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZonalShift</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZonalShift</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ZonalShift.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `awayFrom`
        if (data['awayFrom']) { // data not null
          String.validateJSON(data['awayFrom']);
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          String.validateJSON(data['comment']);
        }
        // validate the optional field `expiryTime`
        if (data['expiryTime']) { // data not null
          Date.validateJSON(data['expiryTime']);
        }
        // validate the optional field `resourceIdentifier`
        if (data['resourceIdentifier']) { // data not null
          String.validateJSON(data['resourceIdentifier']);
        }
        // validate the optional field `startTime`
        if (data['startTime']) { // data not null
          Date.validateJSON(data['startTime']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ZonalShiftStatus.validateJSON(data['status']);
        }
        // validate the optional field `zonalShiftId`
        if (data['zonalShiftId']) { // data not null
          String.validateJSON(data['zonalShiftId']);
        }

        return true;
    }


}

ZonalShift.RequiredProperties = ["awayFrom", "comment", "expiryTime", "resourceIdentifier", "startTime", "status", "zonalShiftId"];

/**
 * @member {String} awayFrom
 */
ZonalShift.prototype['awayFrom'] = undefined;

/**
 * @member {String} comment
 */
ZonalShift.prototype['comment'] = undefined;

/**
 * @member {Date} expiryTime
 */
ZonalShift.prototype['expiryTime'] = undefined;

/**
 * @member {String} resourceIdentifier
 */
ZonalShift.prototype['resourceIdentifier'] = undefined;

/**
 * @member {Date} startTime
 */
ZonalShift.prototype['startTime'] = undefined;

/**
 * @member {module:model/ZonalShiftStatus} status
 */
ZonalShift.prototype['status'] = undefined;

/**
 * @member {String} zonalShiftId
 */
ZonalShift.prototype['zonalShiftId'] = undefined;






export default ZonalShift;

