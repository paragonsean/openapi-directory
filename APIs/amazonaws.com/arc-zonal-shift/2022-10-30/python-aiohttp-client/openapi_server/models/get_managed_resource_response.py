# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetManagedResourceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_weights: Dict=None, arn: str=None, name: str=None, zonal_shifts: List=None):
        """GetManagedResourceResponse - a model defined in OpenAPI

        :param applied_weights: The applied_weights of this GetManagedResourceResponse.
        :param arn: The arn of this GetManagedResourceResponse.
        :param name: The name of this GetManagedResourceResponse.
        :param zonal_shifts: The zonal_shifts of this GetManagedResourceResponse.
        """
        self.openapi_types = {
            'applied_weights': Dict,
            'arn': str,
            'name': str,
            'zonal_shifts': List
        }

        self.attribute_map = {
            'applied_weights': 'appliedWeights',
            'arn': 'arn',
            'name': 'name',
            'zonal_shifts': 'zonalShifts'
        }

        self._applied_weights = applied_weights
        self._arn = arn
        self._name = name
        self._zonal_shifts = zonal_shifts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetManagedResourceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetManagedResourceResponse of this GetManagedResourceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_weights(self):
        """Gets the applied_weights of this GetManagedResourceResponse.


        :return: The applied_weights of this GetManagedResourceResponse.
        :rtype: Dict
        """
        return self._applied_weights

    @applied_weights.setter
    def applied_weights(self, applied_weights):
        """Sets the applied_weights of this GetManagedResourceResponse.


        :param applied_weights: The applied_weights of this GetManagedResourceResponse.
        :type applied_weights: Dict
        """
        if applied_weights is None:
            raise ValueError("Invalid value for `applied_weights`, must not be `None`")

        self._applied_weights = applied_weights

    @property
    def arn(self):
        """Gets the arn of this GetManagedResourceResponse.


        :return: The arn of this GetManagedResourceResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetManagedResourceResponse.


        :param arn: The arn of this GetManagedResourceResponse.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this GetManagedResourceResponse.


        :return: The name of this GetManagedResourceResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetManagedResourceResponse.


        :param name: The name of this GetManagedResourceResponse.
        :type name: str
        """

        self._name = name

    @property
    def zonal_shifts(self):
        """Gets the zonal_shifts of this GetManagedResourceResponse.


        :return: The zonal_shifts of this GetManagedResourceResponse.
        :rtype: List
        """
        return self._zonal_shifts

    @zonal_shifts.setter
    def zonal_shifts(self, zonal_shifts):
        """Sets the zonal_shifts of this GetManagedResourceResponse.


        :param zonal_shifts: The zonal_shifts of this GetManagedResourceResponse.
        :type zonal_shifts: List
        """
        if zonal_shifts is None:
            raise ValueError("Invalid value for `zonal_shifts`, must not be `None`")

        self._zonal_shifts = zonal_shifts
