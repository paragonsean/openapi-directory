# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateZonalShiftRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, expires_in: str=None):
        """UpdateZonalShiftRequest - a model defined in OpenAPI

        :param comment: The comment of this UpdateZonalShiftRequest.
        :param expires_in: The expires_in of this UpdateZonalShiftRequest.
        """
        self.openapi_types = {
            'comment': str,
            'expires_in': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'expires_in': 'expiresIn'
        }

        self._comment = comment
        self._expires_in = expires_in

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateZonalShiftRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateZonalShift_request of this UpdateZonalShiftRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this UpdateZonalShiftRequest.

        A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.

        :return: The comment of this UpdateZonalShiftRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateZonalShiftRequest.

        A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.

        :param comment: The comment of this UpdateZonalShiftRequest.
        :type comment: str
        """
        if comment is not None and len(comment) > 128:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `128`")
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")

        self._comment = comment

    @property
    def expires_in(self):
        """Gets the expires_in of this UpdateZonalShiftRequest.

        <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p> <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p> <ul> <li> <p> <b>A lowercase letter m:</b> To specify that the value is in minutes.</p> </li> <li> <p> <b>A lowercase letter h:</b> To specify that the value is in hours.</p> </li> </ul> <p>For example: <code>20h</code> means the zonal shift expires in 20 hours. <code>120m</code> means the zonal shift expires in 120 minutes (2 hours).</p>

        :return: The expires_in of this UpdateZonalShiftRequest.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this UpdateZonalShiftRequest.

        <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p> <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p> <ul> <li> <p> <b>A lowercase letter m:</b> To specify that the value is in minutes.</p> </li> <li> <p> <b>A lowercase letter h:</b> To specify that the value is in hours.</p> </li> </ul> <p>For example: <code>20h</code> means the zonal shift expires in 20 hours. <code>120m</code> means the zonal shift expires in 120 minutes (2 hours).</p>

        :param expires_in: The expires_in of this UpdateZonalShiftRequest.
        :type expires_in: str
        """
        if expires_in is not None and len(expires_in) > 5:
            raise ValueError("Invalid value for `expires_in`, length must be less than or equal to `5`")
        if expires_in is not None and len(expires_in) < 2:
            raise ValueError("Invalid value for `expires_in`, length must be greater than or equal to `2`")
        if expires_in is not None and not re.search(r'^([1-9][0-9]*)(m|h)$', expires_in):
            raise ValueError("Invalid value for `expires_in`, must be a follow pattern or equal to `/^([1-9][0-9]*)(m|h)$/`")

        self._expires_in = expires_in
