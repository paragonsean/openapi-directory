# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applied_status import AppliedStatus
from openapi_server import util


class ZonalShiftInResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_status: AppliedStatus=None, away_from: str=None, comment: str=None, expiry_time: datetime=None, resource_identifier: str=None, start_time: datetime=None, zonal_shift_id: str=None):
        """ZonalShiftInResource - a model defined in OpenAPI

        :param applied_status: The applied_status of this ZonalShiftInResource.
        :param away_from: The away_from of this ZonalShiftInResource.
        :param comment: The comment of this ZonalShiftInResource.
        :param expiry_time: The expiry_time of this ZonalShiftInResource.
        :param resource_identifier: The resource_identifier of this ZonalShiftInResource.
        :param start_time: The start_time of this ZonalShiftInResource.
        :param zonal_shift_id: The zonal_shift_id of this ZonalShiftInResource.
        """
        self.openapi_types = {
            'applied_status': AppliedStatus,
            'away_from': str,
            'comment': str,
            'expiry_time': datetime,
            'resource_identifier': str,
            'start_time': datetime,
            'zonal_shift_id': str
        }

        self.attribute_map = {
            'applied_status': 'appliedStatus',
            'away_from': 'awayFrom',
            'comment': 'comment',
            'expiry_time': 'expiryTime',
            'resource_identifier': 'resourceIdentifier',
            'start_time': 'startTime',
            'zonal_shift_id': 'zonalShiftId'
        }

        self._applied_status = applied_status
        self._away_from = away_from
        self._comment = comment
        self._expiry_time = expiry_time
        self._resource_identifier = resource_identifier
        self._start_time = start_time
        self._zonal_shift_id = zonal_shift_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZonalShiftInResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZonalShiftInResource of this ZonalShiftInResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_status(self):
        """Gets the applied_status of this ZonalShiftInResource.


        :return: The applied_status of this ZonalShiftInResource.
        :rtype: AppliedStatus
        """
        return self._applied_status

    @applied_status.setter
    def applied_status(self, applied_status):
        """Sets the applied_status of this ZonalShiftInResource.


        :param applied_status: The applied_status of this ZonalShiftInResource.
        :type applied_status: AppliedStatus
        """
        if applied_status is None:
            raise ValueError("Invalid value for `applied_status`, must not be `None`")

        self._applied_status = applied_status

    @property
    def away_from(self):
        """Gets the away_from of this ZonalShiftInResource.


        :return: The away_from of this ZonalShiftInResource.
        :rtype: str
        """
        return self._away_from

    @away_from.setter
    def away_from(self, away_from):
        """Sets the away_from of this ZonalShiftInResource.


        :param away_from: The away_from of this ZonalShiftInResource.
        :type away_from: str
        """
        if away_from is None:
            raise ValueError("Invalid value for `away_from`, must not be `None`")

        self._away_from = away_from

    @property
    def comment(self):
        """Gets the comment of this ZonalShiftInResource.


        :return: The comment of this ZonalShiftInResource.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ZonalShiftInResource.


        :param comment: The comment of this ZonalShiftInResource.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ZonalShiftInResource.


        :return: The expiry_time of this ZonalShiftInResource.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ZonalShiftInResource.


        :param expiry_time: The expiry_time of this ZonalShiftInResource.
        :type expiry_time: datetime
        """
        if expiry_time is None:
            raise ValueError("Invalid value for `expiry_time`, must not be `None`")

        self._expiry_time = expiry_time

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this ZonalShiftInResource.


        :return: The resource_identifier of this ZonalShiftInResource.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this ZonalShiftInResource.


        :param resource_identifier: The resource_identifier of this ZonalShiftInResource.
        :type resource_identifier: str
        """
        if resource_identifier is None:
            raise ValueError("Invalid value for `resource_identifier`, must not be `None`")

        self._resource_identifier = resource_identifier

    @property
    def start_time(self):
        """Gets the start_time of this ZonalShiftInResource.


        :return: The start_time of this ZonalShiftInResource.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ZonalShiftInResource.


        :param start_time: The start_time of this ZonalShiftInResource.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def zonal_shift_id(self):
        """Gets the zonal_shift_id of this ZonalShiftInResource.


        :return: The zonal_shift_id of this ZonalShiftInResource.
        :rtype: str
        """
        return self._zonal_shift_id

    @zonal_shift_id.setter
    def zonal_shift_id(self, zonal_shift_id):
        """Sets the zonal_shift_id of this ZonalShiftInResource.


        :param zonal_shift_id: The zonal_shift_id of this ZonalShiftInResource.
        :type zonal_shift_id: str
        """
        if zonal_shift_id is None:
            raise ValueError("Invalid value for `zonal_shift_id`, must not be `None`")

        self._zonal_shift_id = zonal_shift_id
