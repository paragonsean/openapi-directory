# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartZonalShiftRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_from: str=None, comment: str=None, expires_in: str=None, resource_identifier: str=None):
        """StartZonalShiftRequest - a model defined in OpenAPI

        :param away_from: The away_from of this StartZonalShiftRequest.
        :param comment: The comment of this StartZonalShiftRequest.
        :param expires_in: The expires_in of this StartZonalShiftRequest.
        :param resource_identifier: The resource_identifier of this StartZonalShiftRequest.
        """
        self.openapi_types = {
            'away_from': str,
            'comment': str,
            'expires_in': str,
            'resource_identifier': str
        }

        self.attribute_map = {
            'away_from': 'awayFrom',
            'comment': 'comment',
            'expires_in': 'expiresIn',
            'resource_identifier': 'resourceIdentifier'
        }

        self._away_from = away_from
        self._comment = comment
        self._expires_in = expires_in
        self._resource_identifier = resource_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartZonalShiftRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartZonalShift_request of this StartZonalShiftRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_from(self):
        """Gets the away_from of this StartZonalShiftRequest.

        The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.

        :return: The away_from of this StartZonalShiftRequest.
        :rtype: str
        """
        return self._away_from

    @away_from.setter
    def away_from(self, away_from):
        """Sets the away_from of this StartZonalShiftRequest.

        The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.

        :param away_from: The away_from of this StartZonalShiftRequest.
        :type away_from: str
        """
        if away_from is None:
            raise ValueError("Invalid value for `away_from`, must not be `None`")
        if away_from is not None and len(away_from) > 20:
            raise ValueError("Invalid value for `away_from`, length must be less than or equal to `20`")
        if away_from is not None and len(away_from) < 0:
            raise ValueError("Invalid value for `away_from`, length must be greater than or equal to `0`")

        self._away_from = away_from

    @property
    def comment(self):
        """Gets the comment of this StartZonalShiftRequest.

        A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.

        :return: The comment of this StartZonalShiftRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StartZonalShiftRequest.

        A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.

        :param comment: The comment of this StartZonalShiftRequest.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")
        if comment is not None and len(comment) > 128:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `128`")
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")

        self._comment = comment

    @property
    def expires_in(self):
        """Gets the expires_in of this StartZonalShiftRequest.

        <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p> <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p> <pre><code> &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;A lowercase letter m:&lt;/b&gt; To specify that the value is in minutes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;A lowercase letter h:&lt;/b&gt; To specify that the value is in hours.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example: &lt;code&gt;20h&lt;/code&gt; means the zonal shift expires in 20 hours. &lt;code&gt;120m&lt;/code&gt; means the zonal shift expires in 120 minutes (2 hours).&lt;/p&gt; </code></pre>

        :return: The expires_in of this StartZonalShiftRequest.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this StartZonalShiftRequest.

        <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p> <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p> <pre><code> &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;A lowercase letter m:&lt;/b&gt; To specify that the value is in minutes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;A lowercase letter h:&lt;/b&gt; To specify that the value is in hours.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example: &lt;code&gt;20h&lt;/code&gt; means the zonal shift expires in 20 hours. &lt;code&gt;120m&lt;/code&gt; means the zonal shift expires in 120 minutes (2 hours).&lt;/p&gt; </code></pre>

        :param expires_in: The expires_in of this StartZonalShiftRequest.
        :type expires_in: str
        """
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")
        if expires_in is not None and len(expires_in) > 5:
            raise ValueError("Invalid value for `expires_in`, length must be less than or equal to `5`")
        if expires_in is not None and len(expires_in) < 2:
            raise ValueError("Invalid value for `expires_in`, length must be greater than or equal to `2`")
        if expires_in is not None and not re.search(r'^([1-9][0-9]*)(m|h)$', expires_in):
            raise ValueError("Invalid value for `expires_in`, must be a follow pattern or equal to `/^([1-9][0-9]*)(m|h)$/`")

        self._expires_in = expires_in

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this StartZonalShiftRequest.

        <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p> <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>

        :return: The resource_identifier of this StartZonalShiftRequest.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this StartZonalShiftRequest.

        <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p> <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>

        :param resource_identifier: The resource_identifier of this StartZonalShiftRequest.
        :type resource_identifier: str
        """
        if resource_identifier is None:
            raise ValueError("Invalid value for `resource_identifier`, must not be `None`")
        if resource_identifier is not None and len(resource_identifier) > 1024:
            raise ValueError("Invalid value for `resource_identifier`, length must be less than or equal to `1024`")
        if resource_identifier is not None and len(resource_identifier) < 8:
            raise ValueError("Invalid value for `resource_identifier`, length must be greater than or equal to `8`")

        self._resource_identifier = resource_identifier
