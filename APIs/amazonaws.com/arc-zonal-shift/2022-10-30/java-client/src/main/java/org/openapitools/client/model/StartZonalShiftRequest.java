/*
 * AWS ARC - Zonal Shift
 * <p>This is the API Reference Guide for the zonal shift feature of Amazon Route 53 Application Recovery Controller. This guide is for developers who need detailed information about zonal shift API actions, data types, and errors.</p> <p>Zonal shift is in preview release for Amazon Route 53 Application Recovery Controller and is subject to change.</p> <p>Zonal shift in Route 53 ARC enables you to move traffic for a load balancer resource away from an Availability Zone. Starting a zonal shift helps your application recover immediately, for example, from a developer's bad code deployment or from an AWS infrastructure failure in a single Availability Zone, reducing the impact and time lost from an issue in one zone. </p> <p>Supported AWS resources are automatically registered with Route 53 ARC. Resources that are registered for zonal shifts in Route 53 ARC are managed resources in Route 53 ARC. You can start a zonal shift for any managed resource in your account in a Region. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p> <p>Zonal shifts are temporary. You must specify an expiration when you start a zonal shift, of up to three days initially. If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>For more information about using zonal shift, see the <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html\">Amazon Route 53 Application Recovery Controller Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartZonalShiftRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:59.384709-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartZonalShiftRequest {
  public static final String SERIALIZED_NAME_AWAY_FROM = "awayFrom";
  @SerializedName(SERIALIZED_NAME_AWAY_FROM)
  private String awayFrom;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private String expiresIn;

  public static final String SERIALIZED_NAME_RESOURCE_IDENTIFIER = "resourceIdentifier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDENTIFIER)
  private String resourceIdentifier;

  public StartZonalShiftRequest() {
  }

  public StartZonalShiftRequest awayFrom(String awayFrom) {
    this.awayFrom = awayFrom;
    return this;
  }

  /**
   * The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.
   * @return awayFrom
   */
  @javax.annotation.Nonnull
  public String getAwayFrom() {
    return awayFrom;
  }

  public void setAwayFrom(String awayFrom) {
    this.awayFrom = awayFrom;
  }


  public StartZonalShiftRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public StartZonalShiftRequest expiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * &lt;p&gt;The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).&lt;/p&gt; &lt;p&gt;If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you&#39;re ready to restore traffic to the Availability Zone.&lt;/p&gt; &lt;p&gt;To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; &amp;lt;b&amp;gt;A lowercase letter m:&amp;lt;/b&amp;gt; To specify that the value is in minutes.&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; &amp;lt;b&amp;gt;A lowercase letter h:&amp;lt;/b&amp;gt; To specify that the value is in hours.&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;p&amp;gt;For example: &amp;lt;code&amp;gt;20h&amp;lt;/code&amp;gt; means the zonal shift expires in 20 hours. &amp;lt;code&amp;gt;120m&amp;lt;/code&amp;gt; means the zonal shift expires in 120 minutes (2 hours).&amp;lt;/p&amp;gt; &lt;/code&gt;&lt;/pre&gt;
   * @return expiresIn
   */
  @javax.annotation.Nonnull
  public String getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
  }


  public StartZonalShiftRequest resourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
    return this;
  }

  /**
   * &lt;p&gt;The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.&lt;/p&gt; &lt;p&gt;At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.&lt;/p&gt;
   * @return resourceIdentifier
   */
  @javax.annotation.Nonnull
  public String getResourceIdentifier() {
    return resourceIdentifier;
  }

  public void setResourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartZonalShiftRequest startZonalShiftRequest = (StartZonalShiftRequest) o;
    return Objects.equals(this.awayFrom, startZonalShiftRequest.awayFrom) &&
        Objects.equals(this.comment, startZonalShiftRequest.comment) &&
        Objects.equals(this.expiresIn, startZonalShiftRequest.expiresIn) &&
        Objects.equals(this.resourceIdentifier, startZonalShiftRequest.resourceIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayFrom, comment, expiresIn, resourceIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartZonalShiftRequest {\n");
    sb.append("    awayFrom: ").append(toIndentedString(awayFrom)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    resourceIdentifier: ").append(toIndentedString(resourceIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayFrom");
    openapiFields.add("comment");
    openapiFields.add("expiresIn");
    openapiFields.add("resourceIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("awayFrom");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("expiresIn");
    openapiRequiredFields.add("resourceIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartZonalShiftRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartZonalShiftRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartZonalShiftRequest is not found in the empty JSON string", StartZonalShiftRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartZonalShiftRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartZonalShiftRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartZonalShiftRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("awayFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayFrom").toString()));
      }
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("expiresIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresIn").toString()));
      }
      if (!jsonObj.get("resourceIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartZonalShiftRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartZonalShiftRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartZonalShiftRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartZonalShiftRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartZonalShiftRequest>() {
           @Override
           public void write(JsonWriter out, StartZonalShiftRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartZonalShiftRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartZonalShiftRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartZonalShiftRequest
   * @throws IOException if the JSON string is invalid with respect to StartZonalShiftRequest
   */
  public static StartZonalShiftRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartZonalShiftRequest.class);
  }

  /**
   * Convert an instance of StartZonalShiftRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

