/*
 * AWS ARC - Zonal Shift
 * <p>This is the API Reference Guide for the zonal shift feature of Amazon Route 53 Application Recovery Controller. This guide is for developers who need detailed information about zonal shift API actions, data types, and errors.</p> <p>Zonal shift is in preview release for Amazon Route 53 Application Recovery Controller and is subject to change.</p> <p>Zonal shift in Route 53 ARC enables you to move traffic for a load balancer resource away from an Availability Zone. Starting a zonal shift helps your application recover immediately, for example, from a developer's bad code deployment or from an AWS infrastructure failure in a single Availability Zone, reducing the impact and time lost from an issue in one zone. </p> <p>Supported AWS resources are automatically registered with Route 53 ARC. Resources that are registered for zonal shifts in Route 53 ARC are managed resources in Route 53 ARC. You can start a zonal shift for any managed resource in your account in a Region. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p> <p>Zonal shifts are temporary. You must specify an expiration when you start a zonal shift, of up to three days initially. If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p> <p>For more information about using zonal shift, see the <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html\">Amazon Route 53 Application Recovery Controller Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ZonalShiftStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZonalShift
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:59.384709-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZonalShift {
  public static final String SERIALIZED_NAME_AWAY_FROM = "awayFrom";
  @SerializedName(SERIALIZED_NAME_AWAY_FROM)
  private String awayFrom;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private OffsetDateTime expiryTime;

  public static final String SERIALIZED_NAME_RESOURCE_IDENTIFIER = "resourceIdentifier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDENTIFIER)
  private String resourceIdentifier;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ZonalShiftStatus status;

  public static final String SERIALIZED_NAME_ZONAL_SHIFT_ID = "zonalShiftId";
  @SerializedName(SERIALIZED_NAME_ZONAL_SHIFT_ID)
  private String zonalShiftId;

  public ZonalShift() {
  }

  public ZonalShift awayFrom(String awayFrom) {
    this.awayFrom = awayFrom;
    return this;
  }

  /**
   * Get awayFrom
   * @return awayFrom
   */
  @javax.annotation.Nonnull
  public String getAwayFrom() {
    return awayFrom;
  }

  public void setAwayFrom(String awayFrom) {
    this.awayFrom = awayFrom;
  }


  public ZonalShift comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ZonalShift expiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

  /**
   * Get expiryTime
   * @return expiryTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
  }


  public ZonalShift resourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
    return this;
  }

  /**
   * Get resourceIdentifier
   * @return resourceIdentifier
   */
  @javax.annotation.Nonnull
  public String getResourceIdentifier() {
    return resourceIdentifier;
  }

  public void setResourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
  }


  public ZonalShift startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ZonalShift status(ZonalShiftStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ZonalShiftStatus getStatus() {
    return status;
  }

  public void setStatus(ZonalShiftStatus status) {
    this.status = status;
  }


  public ZonalShift zonalShiftId(String zonalShiftId) {
    this.zonalShiftId = zonalShiftId;
    return this;
  }

  /**
   * Get zonalShiftId
   * @return zonalShiftId
   */
  @javax.annotation.Nonnull
  public String getZonalShiftId() {
    return zonalShiftId;
  }

  public void setZonalShiftId(String zonalShiftId) {
    this.zonalShiftId = zonalShiftId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZonalShift zonalShift = (ZonalShift) o;
    return Objects.equals(this.awayFrom, zonalShift.awayFrom) &&
        Objects.equals(this.comment, zonalShift.comment) &&
        Objects.equals(this.expiryTime, zonalShift.expiryTime) &&
        Objects.equals(this.resourceIdentifier, zonalShift.resourceIdentifier) &&
        Objects.equals(this.startTime, zonalShift.startTime) &&
        Objects.equals(this.status, zonalShift.status) &&
        Objects.equals(this.zonalShiftId, zonalShift.zonalShiftId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayFrom, comment, expiryTime, resourceIdentifier, startTime, status, zonalShiftId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZonalShift {\n");
    sb.append("    awayFrom: ").append(toIndentedString(awayFrom)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    resourceIdentifier: ").append(toIndentedString(resourceIdentifier)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zonalShiftId: ").append(toIndentedString(zonalShiftId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayFrom");
    openapiFields.add("comment");
    openapiFields.add("expiryTime");
    openapiFields.add("resourceIdentifier");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("zonalShiftId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("awayFrom");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("expiryTime");
    openapiRequiredFields.add("resourceIdentifier");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("zonalShiftId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZonalShift
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZonalShift.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZonalShift is not found in the empty JSON string", ZonalShift.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZonalShift.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZonalShift` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZonalShift.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `awayFrom`
      String.validateJsonElement(jsonObj.get("awayFrom"));
      // validate the required field `comment`
      String.validateJsonElement(jsonObj.get("comment"));
      // validate the required field `expiryTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("expiryTime"));
      // validate the required field `resourceIdentifier`
      String.validateJsonElement(jsonObj.get("resourceIdentifier"));
      // validate the required field `startTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      // validate the required field `status`
      ZonalShiftStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `zonalShiftId`
      String.validateJsonElement(jsonObj.get("zonalShiftId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZonalShift.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZonalShift' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZonalShift> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZonalShift.class));

       return (TypeAdapter<T>) new TypeAdapter<ZonalShift>() {
           @Override
           public void write(JsonWriter out, ZonalShift value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZonalShift read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZonalShift given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZonalShift
   * @throws IOException if the JSON string is invalid with respect to ZonalShift
   */
  public static ZonalShift fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZonalShift.class);
  }

  /**
   * Convert an instance of ZonalShift to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

