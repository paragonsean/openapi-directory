# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_user_request_authentication_mode import CreateUserRequestAuthenticationMode
from openapi_server import util


class CreateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name: str=None, authentication_mode: CreateUserRequestAuthenticationMode=None, access_string: str=None, tags: List=None):
        """CreateUserRequest - a model defined in OpenAPI

        :param user_name: The user_name of this CreateUserRequest.
        :param authentication_mode: The authentication_mode of this CreateUserRequest.
        :param access_string: The access_string of this CreateUserRequest.
        :param tags: The tags of this CreateUserRequest.
        """
        self.openapi_types = {
            'user_name': str,
            'authentication_mode': CreateUserRequestAuthenticationMode,
            'access_string': str,
            'tags': List
        }

        self.attribute_map = {
            'user_name': 'UserName',
            'authentication_mode': 'AuthenticationMode',
            'access_string': 'AccessString',
            'tags': 'Tags'
        }

        self._user_name = user_name
        self._authentication_mode = authentication_mode
        self._access_string = access_string
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserRequest of this CreateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self):
        """Gets the user_name of this CreateUserRequest.


        :return: The user_name of this CreateUserRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateUserRequest.


        :param user_name: The user_name of this CreateUserRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this CreateUserRequest.


        :return: The authentication_mode of this CreateUserRequest.
        :rtype: CreateUserRequestAuthenticationMode
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this CreateUserRequest.


        :param authentication_mode: The authentication_mode of this CreateUserRequest.
        :type authentication_mode: CreateUserRequestAuthenticationMode
        """
        if authentication_mode is None:
            raise ValueError("Invalid value for `authentication_mode`, must not be `None`")

        self._authentication_mode = authentication_mode

    @property
    def access_string(self):
        """Gets the access_string of this CreateUserRequest.


        :return: The access_string of this CreateUserRequest.
        :rtype: str
        """
        return self._access_string

    @access_string.setter
    def access_string(self, access_string):
        """Sets the access_string of this CreateUserRequest.


        :param access_string: The access_string of this CreateUserRequest.
        :type access_string: str
        """
        if access_string is None:
            raise ValueError("Invalid value for `access_string`, must not be `None`")

        self._access_string = access_string

    @property
    def tags(self):
        """Gets the tags of this CreateUserRequest.


        :return: The tags of this CreateUserRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateUserRequest.


        :param tags: The tags of this CreateUserRequest.
        :type tags: List
        """

        self._tags = tags
