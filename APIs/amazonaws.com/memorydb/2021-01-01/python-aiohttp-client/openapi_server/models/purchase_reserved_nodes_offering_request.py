# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseReservedNodesOfferingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_nodes_offering_id: str=None, reservation_id: str=None, node_count: int=None, tags: List=None):
        """PurchaseReservedNodesOfferingRequest - a model defined in OpenAPI

        :param reserved_nodes_offering_id: The reserved_nodes_offering_id of this PurchaseReservedNodesOfferingRequest.
        :param reservation_id: The reservation_id of this PurchaseReservedNodesOfferingRequest.
        :param node_count: The node_count of this PurchaseReservedNodesOfferingRequest.
        :param tags: The tags of this PurchaseReservedNodesOfferingRequest.
        """
        self.openapi_types = {
            'reserved_nodes_offering_id': str,
            'reservation_id': str,
            'node_count': int,
            'tags': List
        }

        self.attribute_map = {
            'reserved_nodes_offering_id': 'ReservedNodesOfferingId',
            'reservation_id': 'ReservationId',
            'node_count': 'NodeCount',
            'tags': 'Tags'
        }

        self._reserved_nodes_offering_id = reserved_nodes_offering_id
        self._reservation_id = reservation_id
        self._node_count = node_count
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseReservedNodesOfferingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseReservedNodesOfferingRequest of this PurchaseReservedNodesOfferingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_nodes_offering_id(self):
        """Gets the reserved_nodes_offering_id of this PurchaseReservedNodesOfferingRequest.


        :return: The reserved_nodes_offering_id of this PurchaseReservedNodesOfferingRequest.
        :rtype: str
        """
        return self._reserved_nodes_offering_id

    @reserved_nodes_offering_id.setter
    def reserved_nodes_offering_id(self, reserved_nodes_offering_id):
        """Sets the reserved_nodes_offering_id of this PurchaseReservedNodesOfferingRequest.


        :param reserved_nodes_offering_id: The reserved_nodes_offering_id of this PurchaseReservedNodesOfferingRequest.
        :type reserved_nodes_offering_id: str
        """
        if reserved_nodes_offering_id is None:
            raise ValueError("Invalid value for `reserved_nodes_offering_id`, must not be `None`")

        self._reserved_nodes_offering_id = reserved_nodes_offering_id

    @property
    def reservation_id(self):
        """Gets the reservation_id of this PurchaseReservedNodesOfferingRequest.


        :return: The reservation_id of this PurchaseReservedNodesOfferingRequest.
        :rtype: str
        """
        return self._reservation_id

    @reservation_id.setter
    def reservation_id(self, reservation_id):
        """Sets the reservation_id of this PurchaseReservedNodesOfferingRequest.


        :param reservation_id: The reservation_id of this PurchaseReservedNodesOfferingRequest.
        :type reservation_id: str
        """

        self._reservation_id = reservation_id

    @property
    def node_count(self):
        """Gets the node_count of this PurchaseReservedNodesOfferingRequest.


        :return: The node_count of this PurchaseReservedNodesOfferingRequest.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this PurchaseReservedNodesOfferingRequest.


        :param node_count: The node_count of this PurchaseReservedNodesOfferingRequest.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def tags(self):
        """Gets the tags of this PurchaseReservedNodesOfferingRequest.


        :return: The tags of this PurchaseReservedNodesOfferingRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PurchaseReservedNodesOfferingRequest.


        :param tags: The tags of this PurchaseReservedNodesOfferingRequest.
        :type tags: List
        """

        self._tags = tags
