# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.az_status import AZStatus
from openapi_server.models.cluster_cluster_endpoint import ClusterClusterEndpoint
from openapi_server.models.cluster_pending_updates import ClusterPendingUpdates
from openapi_server.models.data_tiering_status import DataTieringStatus
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, status: str=None, pending_updates: ClusterPendingUpdates=None, number_of_shards: int=None, shards: List=None, availability_mode: AZStatus=None, cluster_endpoint: ClusterClusterEndpoint=None, node_type: str=None, engine_version: str=None, engine_patch_version: str=None, parameter_group_name: str=None, parameter_group_status: str=None, security_groups: List=None, subnet_group_name: str=None, tls_enabled: bool=None, kms_key_id: str=None, arn: str=None, sns_topic_arn: str=None, sns_topic_status: str=None, snapshot_retention_limit: int=None, maintenance_window: str=None, snapshot_window: str=None, acl_name: str=None, auto_minor_version_upgrade: bool=None, data_tiering: DataTieringStatus=None):
        """Cluster - a model defined in OpenAPI

        :param name: The name of this Cluster.
        :param description: The description of this Cluster.
        :param status: The status of this Cluster.
        :param pending_updates: The pending_updates of this Cluster.
        :param number_of_shards: The number_of_shards of this Cluster.
        :param shards: The shards of this Cluster.
        :param availability_mode: The availability_mode of this Cluster.
        :param cluster_endpoint: The cluster_endpoint of this Cluster.
        :param node_type: The node_type of this Cluster.
        :param engine_version: The engine_version of this Cluster.
        :param engine_patch_version: The engine_patch_version of this Cluster.
        :param parameter_group_name: The parameter_group_name of this Cluster.
        :param parameter_group_status: The parameter_group_status of this Cluster.
        :param security_groups: The security_groups of this Cluster.
        :param subnet_group_name: The subnet_group_name of this Cluster.
        :param tls_enabled: The tls_enabled of this Cluster.
        :param kms_key_id: The kms_key_id of this Cluster.
        :param arn: The arn of this Cluster.
        :param sns_topic_arn: The sns_topic_arn of this Cluster.
        :param sns_topic_status: The sns_topic_status of this Cluster.
        :param snapshot_retention_limit: The snapshot_retention_limit of this Cluster.
        :param maintenance_window: The maintenance_window of this Cluster.
        :param snapshot_window: The snapshot_window of this Cluster.
        :param acl_name: The acl_name of this Cluster.
        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this Cluster.
        :param data_tiering: The data_tiering of this Cluster.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'status': str,
            'pending_updates': ClusterPendingUpdates,
            'number_of_shards': int,
            'shards': List,
            'availability_mode': AZStatus,
            'cluster_endpoint': ClusterClusterEndpoint,
            'node_type': str,
            'engine_version': str,
            'engine_patch_version': str,
            'parameter_group_name': str,
            'parameter_group_status': str,
            'security_groups': List,
            'subnet_group_name': str,
            'tls_enabled': bool,
            'kms_key_id': str,
            'arn': str,
            'sns_topic_arn': str,
            'sns_topic_status': str,
            'snapshot_retention_limit': int,
            'maintenance_window': str,
            'snapshot_window': str,
            'acl_name': str,
            'auto_minor_version_upgrade': bool,
            'data_tiering': DataTieringStatus
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'status': 'Status',
            'pending_updates': 'PendingUpdates',
            'number_of_shards': 'NumberOfShards',
            'shards': 'Shards',
            'availability_mode': 'AvailabilityMode',
            'cluster_endpoint': 'ClusterEndpoint',
            'node_type': 'NodeType',
            'engine_version': 'EngineVersion',
            'engine_patch_version': 'EnginePatchVersion',
            'parameter_group_name': 'ParameterGroupName',
            'parameter_group_status': 'ParameterGroupStatus',
            'security_groups': 'SecurityGroups',
            'subnet_group_name': 'SubnetGroupName',
            'tls_enabled': 'TLSEnabled',
            'kms_key_id': 'KmsKeyId',
            'arn': 'ARN',
            'sns_topic_arn': 'SnsTopicArn',
            'sns_topic_status': 'SnsTopicStatus',
            'snapshot_retention_limit': 'SnapshotRetentionLimit',
            'maintenance_window': 'MaintenanceWindow',
            'snapshot_window': 'SnapshotWindow',
            'acl_name': 'ACLName',
            'auto_minor_version_upgrade': 'AutoMinorVersionUpgrade',
            'data_tiering': 'DataTiering'
        }

        self._name = name
        self._description = description
        self._status = status
        self._pending_updates = pending_updates
        self._number_of_shards = number_of_shards
        self._shards = shards
        self._availability_mode = availability_mode
        self._cluster_endpoint = cluster_endpoint
        self._node_type = node_type
        self._engine_version = engine_version
        self._engine_patch_version = engine_patch_version
        self._parameter_group_name = parameter_group_name
        self._parameter_group_status = parameter_group_status
        self._security_groups = security_groups
        self._subnet_group_name = subnet_group_name
        self._tls_enabled = tls_enabled
        self._kms_key_id = kms_key_id
        self._arn = arn
        self._sns_topic_arn = sns_topic_arn
        self._sns_topic_status = sns_topic_status
        self._snapshot_retention_limit = snapshot_retention_limit
        self._maintenance_window = maintenance_window
        self._snapshot_window = snapshot_window
        self._acl_name = acl_name
        self._auto_minor_version_upgrade = auto_minor_version_upgrade
        self._data_tiering = data_tiering

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Cluster.


        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Cluster.


        :return: The description of this Cluster.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cluster.


        :param description: The description of this Cluster.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Cluster.


        :return: The status of this Cluster.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cluster.


        :param status: The status of this Cluster.
        :type status: str
        """

        self._status = status

    @property
    def pending_updates(self):
        """Gets the pending_updates of this Cluster.


        :return: The pending_updates of this Cluster.
        :rtype: ClusterPendingUpdates
        """
        return self._pending_updates

    @pending_updates.setter
    def pending_updates(self, pending_updates):
        """Sets the pending_updates of this Cluster.


        :param pending_updates: The pending_updates of this Cluster.
        :type pending_updates: ClusterPendingUpdates
        """

        self._pending_updates = pending_updates

    @property
    def number_of_shards(self):
        """Gets the number_of_shards of this Cluster.


        :return: The number_of_shards of this Cluster.
        :rtype: int
        """
        return self._number_of_shards

    @number_of_shards.setter
    def number_of_shards(self, number_of_shards):
        """Sets the number_of_shards of this Cluster.


        :param number_of_shards: The number_of_shards of this Cluster.
        :type number_of_shards: int
        """

        self._number_of_shards = number_of_shards

    @property
    def shards(self):
        """Gets the shards of this Cluster.


        :return: The shards of this Cluster.
        :rtype: List
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this Cluster.


        :param shards: The shards of this Cluster.
        :type shards: List
        """

        self._shards = shards

    @property
    def availability_mode(self):
        """Gets the availability_mode of this Cluster.


        :return: The availability_mode of this Cluster.
        :rtype: AZStatus
        """
        return self._availability_mode

    @availability_mode.setter
    def availability_mode(self, availability_mode):
        """Sets the availability_mode of this Cluster.


        :param availability_mode: The availability_mode of this Cluster.
        :type availability_mode: AZStatus
        """

        self._availability_mode = availability_mode

    @property
    def cluster_endpoint(self):
        """Gets the cluster_endpoint of this Cluster.


        :return: The cluster_endpoint of this Cluster.
        :rtype: ClusterClusterEndpoint
        """
        return self._cluster_endpoint

    @cluster_endpoint.setter
    def cluster_endpoint(self, cluster_endpoint):
        """Sets the cluster_endpoint of this Cluster.


        :param cluster_endpoint: The cluster_endpoint of this Cluster.
        :type cluster_endpoint: ClusterClusterEndpoint
        """

        self._cluster_endpoint = cluster_endpoint

    @property
    def node_type(self):
        """Gets the node_type of this Cluster.


        :return: The node_type of this Cluster.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this Cluster.


        :param node_type: The node_type of this Cluster.
        :type node_type: str
        """

        self._node_type = node_type

    @property
    def engine_version(self):
        """Gets the engine_version of this Cluster.


        :return: The engine_version of this Cluster.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this Cluster.


        :param engine_version: The engine_version of this Cluster.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def engine_patch_version(self):
        """Gets the engine_patch_version of this Cluster.


        :return: The engine_patch_version of this Cluster.
        :rtype: str
        """
        return self._engine_patch_version

    @engine_patch_version.setter
    def engine_patch_version(self, engine_patch_version):
        """Sets the engine_patch_version of this Cluster.


        :param engine_patch_version: The engine_patch_version of this Cluster.
        :type engine_patch_version: str
        """

        self._engine_patch_version = engine_patch_version

    @property
    def parameter_group_name(self):
        """Gets the parameter_group_name of this Cluster.


        :return: The parameter_group_name of this Cluster.
        :rtype: str
        """
        return self._parameter_group_name

    @parameter_group_name.setter
    def parameter_group_name(self, parameter_group_name):
        """Sets the parameter_group_name of this Cluster.


        :param parameter_group_name: The parameter_group_name of this Cluster.
        :type parameter_group_name: str
        """

        self._parameter_group_name = parameter_group_name

    @property
    def parameter_group_status(self):
        """Gets the parameter_group_status of this Cluster.


        :return: The parameter_group_status of this Cluster.
        :rtype: str
        """
        return self._parameter_group_status

    @parameter_group_status.setter
    def parameter_group_status(self, parameter_group_status):
        """Sets the parameter_group_status of this Cluster.


        :param parameter_group_status: The parameter_group_status of this Cluster.
        :type parameter_group_status: str
        """

        self._parameter_group_status = parameter_group_status

    @property
    def security_groups(self):
        """Gets the security_groups of this Cluster.


        :return: The security_groups of this Cluster.
        :rtype: List
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this Cluster.


        :param security_groups: The security_groups of this Cluster.
        :type security_groups: List
        """

        self._security_groups = security_groups

    @property
    def subnet_group_name(self):
        """Gets the subnet_group_name of this Cluster.


        :return: The subnet_group_name of this Cluster.
        :rtype: str
        """
        return self._subnet_group_name

    @subnet_group_name.setter
    def subnet_group_name(self, subnet_group_name):
        """Sets the subnet_group_name of this Cluster.


        :param subnet_group_name: The subnet_group_name of this Cluster.
        :type subnet_group_name: str
        """

        self._subnet_group_name = subnet_group_name

    @property
    def tls_enabled(self):
        """Gets the tls_enabled of this Cluster.


        :return: The tls_enabled of this Cluster.
        :rtype: bool
        """
        return self._tls_enabled

    @tls_enabled.setter
    def tls_enabled(self, tls_enabled):
        """Sets the tls_enabled of this Cluster.


        :param tls_enabled: The tls_enabled of this Cluster.
        :type tls_enabled: bool
        """

        self._tls_enabled = tls_enabled

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this Cluster.


        :return: The kms_key_id of this Cluster.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this Cluster.


        :param kms_key_id: The kms_key_id of this Cluster.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def arn(self):
        """Gets the arn of this Cluster.


        :return: The arn of this Cluster.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Cluster.


        :param arn: The arn of this Cluster.
        :type arn: str
        """

        self._arn = arn

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this Cluster.


        :return: The sns_topic_arn of this Cluster.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this Cluster.


        :param sns_topic_arn: The sns_topic_arn of this Cluster.
        :type sns_topic_arn: str
        """

        self._sns_topic_arn = sns_topic_arn

    @property
    def sns_topic_status(self):
        """Gets the sns_topic_status of this Cluster.


        :return: The sns_topic_status of this Cluster.
        :rtype: str
        """
        return self._sns_topic_status

    @sns_topic_status.setter
    def sns_topic_status(self, sns_topic_status):
        """Sets the sns_topic_status of this Cluster.


        :param sns_topic_status: The sns_topic_status of this Cluster.
        :type sns_topic_status: str
        """

        self._sns_topic_status = sns_topic_status

    @property
    def snapshot_retention_limit(self):
        """Gets the snapshot_retention_limit of this Cluster.


        :return: The snapshot_retention_limit of this Cluster.
        :rtype: int
        """
        return self._snapshot_retention_limit

    @snapshot_retention_limit.setter
    def snapshot_retention_limit(self, snapshot_retention_limit):
        """Sets the snapshot_retention_limit of this Cluster.


        :param snapshot_retention_limit: The snapshot_retention_limit of this Cluster.
        :type snapshot_retention_limit: int
        """

        self._snapshot_retention_limit = snapshot_retention_limit

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this Cluster.


        :return: The maintenance_window of this Cluster.
        :rtype: str
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this Cluster.


        :param maintenance_window: The maintenance_window of this Cluster.
        :type maintenance_window: str
        """

        self._maintenance_window = maintenance_window

    @property
    def snapshot_window(self):
        """Gets the snapshot_window of this Cluster.


        :return: The snapshot_window of this Cluster.
        :rtype: str
        """
        return self._snapshot_window

    @snapshot_window.setter
    def snapshot_window(self, snapshot_window):
        """Sets the snapshot_window of this Cluster.


        :param snapshot_window: The snapshot_window of this Cluster.
        :type snapshot_window: str
        """

        self._snapshot_window = snapshot_window

    @property
    def acl_name(self):
        """Gets the acl_name of this Cluster.


        :return: The acl_name of this Cluster.
        :rtype: str
        """
        return self._acl_name

    @acl_name.setter
    def acl_name(self, acl_name):
        """Sets the acl_name of this Cluster.


        :param acl_name: The acl_name of this Cluster.
        :type acl_name: str
        """

        self._acl_name = acl_name

    @property
    def auto_minor_version_upgrade(self):
        """Gets the auto_minor_version_upgrade of this Cluster.


        :return: The auto_minor_version_upgrade of this Cluster.
        :rtype: bool
        """
        return self._auto_minor_version_upgrade

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, auto_minor_version_upgrade):
        """Sets the auto_minor_version_upgrade of this Cluster.


        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this Cluster.
        :type auto_minor_version_upgrade: bool
        """

        self._auto_minor_version_upgrade = auto_minor_version_upgrade

    @property
    def data_tiering(self):
        """Gets the data_tiering of this Cluster.


        :return: The data_tiering of this Cluster.
        :rtype: DataTieringStatus
        """
        return self._data_tiering

    @data_tiering.setter
    def data_tiering(self, data_tiering):
        """Sets the data_tiering of this Cluster.


        :param data_tiering: The data_tiering of this Cluster.
        :type data_tiering: DataTieringStatus
        """

        self._data_tiering = data_tiering
