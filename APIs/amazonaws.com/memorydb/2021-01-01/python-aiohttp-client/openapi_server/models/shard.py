# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Shard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: str=None, slots: str=None, nodes: List=None, number_of_nodes: int=None):
        """Shard - a model defined in OpenAPI

        :param name: The name of this Shard.
        :param status: The status of this Shard.
        :param slots: The slots of this Shard.
        :param nodes: The nodes of this Shard.
        :param number_of_nodes: The number_of_nodes of this Shard.
        """
        self.openapi_types = {
            'name': str,
            'status': str,
            'slots': str,
            'nodes': List,
            'number_of_nodes': int
        }

        self.attribute_map = {
            'name': 'Name',
            'status': 'Status',
            'slots': 'Slots',
            'nodes': 'Nodes',
            'number_of_nodes': 'NumberOfNodes'
        }

        self._name = name
        self._status = status
        self._slots = slots
        self._nodes = nodes
        self._number_of_nodes = number_of_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Shard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shard of this Shard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Shard.


        :return: The name of this Shard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Shard.


        :param name: The name of this Shard.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Shard.


        :return: The status of this Shard.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Shard.


        :param status: The status of this Shard.
        :type status: str
        """

        self._status = status

    @property
    def slots(self):
        """Gets the slots of this Shard.


        :return: The slots of this Shard.
        :rtype: str
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Shard.


        :param slots: The slots of this Shard.
        :type slots: str
        """

        self._slots = slots

    @property
    def nodes(self):
        """Gets the nodes of this Shard.


        :return: The nodes of this Shard.
        :rtype: List
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Shard.


        :param nodes: The nodes of this Shard.
        :type nodes: List
        """

        self._nodes = nodes

    @property
    def number_of_nodes(self):
        """Gets the number_of_nodes of this Shard.


        :return: The number_of_nodes of this Shard.
        :rtype: int
        """
        return self._number_of_nodes

    @number_of_nodes.setter
    def number_of_nodes(self, number_of_nodes):
        """Sets the number_of_nodes of this Shard.


        :param number_of_nodes: The number_of_nodes of this Shard.
        :type number_of_nodes: int
        """

        self._number_of_nodes = number_of_nodes
