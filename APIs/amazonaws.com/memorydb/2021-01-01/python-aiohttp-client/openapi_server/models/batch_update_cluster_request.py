# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_update_cluster_request_service_update import BatchUpdateClusterRequestServiceUpdate
from openapi_server import util


class BatchUpdateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_names: List=None, service_update: BatchUpdateClusterRequestServiceUpdate=None):
        """BatchUpdateClusterRequest - a model defined in OpenAPI

        :param cluster_names: The cluster_names of this BatchUpdateClusterRequest.
        :param service_update: The service_update of this BatchUpdateClusterRequest.
        """
        self.openapi_types = {
            'cluster_names': List,
            'service_update': BatchUpdateClusterRequestServiceUpdate
        }

        self.attribute_map = {
            'cluster_names': 'ClusterNames',
            'service_update': 'ServiceUpdate'
        }

        self._cluster_names = cluster_names
        self._service_update = service_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateClusterRequest of this BatchUpdateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_names(self):
        """Gets the cluster_names of this BatchUpdateClusterRequest.


        :return: The cluster_names of this BatchUpdateClusterRequest.
        :rtype: List
        """
        return self._cluster_names

    @cluster_names.setter
    def cluster_names(self, cluster_names):
        """Sets the cluster_names of this BatchUpdateClusterRequest.


        :param cluster_names: The cluster_names of this BatchUpdateClusterRequest.
        :type cluster_names: List
        """
        if cluster_names is None:
            raise ValueError("Invalid value for `cluster_names`, must not be `None`")

        self._cluster_names = cluster_names

    @property
    def service_update(self):
        """Gets the service_update of this BatchUpdateClusterRequest.


        :return: The service_update of this BatchUpdateClusterRequest.
        :rtype: BatchUpdateClusterRequestServiceUpdate
        """
        return self._service_update

    @service_update.setter
    def service_update(self, service_update):
        """Sets the service_update of this BatchUpdateClusterRequest.


        :param service_update: The service_update of this BatchUpdateClusterRequest.
        :type service_update: BatchUpdateClusterRequestServiceUpdate
        """

        self._service_update = service_update
