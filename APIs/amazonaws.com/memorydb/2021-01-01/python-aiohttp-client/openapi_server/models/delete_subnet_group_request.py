# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteSubnetGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subnet_group_name: str=None):
        """DeleteSubnetGroupRequest - a model defined in OpenAPI

        :param subnet_group_name: The subnet_group_name of this DeleteSubnetGroupRequest.
        """
        self.openapi_types = {
            'subnet_group_name': str
        }

        self.attribute_map = {
            'subnet_group_name': 'SubnetGroupName'
        }

        self._subnet_group_name = subnet_group_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteSubnetGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteSubnetGroupRequest of this DeleteSubnetGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subnet_group_name(self):
        """Gets the subnet_group_name of this DeleteSubnetGroupRequest.


        :return: The subnet_group_name of this DeleteSubnetGroupRequest.
        :rtype: str
        """
        return self._subnet_group_name

    @subnet_group_name.setter
    def subnet_group_name(self, subnet_group_name):
        """Sets the subnet_group_name of this DeleteSubnetGroupRequest.


        :param subnet_group_name: The subnet_group_name of this DeleteSubnetGroupRequest.
        :type subnet_group_name: str
        """
        if subnet_group_name is None:
            raise ValueError("Invalid value for `subnet_group_name`, must not be `None`")

        self._subnet_group_name = subnet_group_name
