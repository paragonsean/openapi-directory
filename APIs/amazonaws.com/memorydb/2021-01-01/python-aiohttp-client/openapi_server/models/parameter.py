# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: str=None, description: str=None, data_type: str=None, allowed_values: str=None, minimum_engine_version: str=None):
        """Parameter - a model defined in OpenAPI

        :param name: The name of this Parameter.
        :param value: The value of this Parameter.
        :param description: The description of this Parameter.
        :param data_type: The data_type of this Parameter.
        :param allowed_values: The allowed_values of this Parameter.
        :param minimum_engine_version: The minimum_engine_version of this Parameter.
        """
        self.openapi_types = {
            'name': str,
            'value': str,
            'description': str,
            'data_type': str,
            'allowed_values': str,
            'minimum_engine_version': str
        }

        self.attribute_map = {
            'name': 'Name',
            'value': 'Value',
            'description': 'Description',
            'data_type': 'DataType',
            'allowed_values': 'AllowedValues',
            'minimum_engine_version': 'MinimumEngineVersion'
        }

        self._name = name
        self._value = value
        self._description = description
        self._data_type = data_type
        self._allowed_values = allowed_values
        self._minimum_engine_version = minimum_engine_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parameter of this Parameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Parameter.


        :return: The name of this Parameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Parameter.


        :param name: The name of this Parameter.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this Parameter.


        :return: The value of this Parameter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Parameter.


        :param value: The value of this Parameter.
        :type value: str
        """

        self._value = value

    @property
    def description(self):
        """Gets the description of this Parameter.


        :return: The description of this Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.


        :param description: The description of this Parameter.
        :type description: str
        """

        self._description = description

    @property
    def data_type(self):
        """Gets the data_type of this Parameter.


        :return: The data_type of this Parameter.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Parameter.


        :param data_type: The data_type of this Parameter.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def allowed_values(self):
        """Gets the allowed_values of this Parameter.


        :return: The allowed_values of this Parameter.
        :rtype: str
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this Parameter.


        :param allowed_values: The allowed_values of this Parameter.
        :type allowed_values: str
        """

        self._allowed_values = allowed_values

    @property
    def minimum_engine_version(self):
        """Gets the minimum_engine_version of this Parameter.


        :return: The minimum_engine_version of this Parameter.
        :rtype: str
        """
        return self._minimum_engine_version

    @minimum_engine_version.setter
    def minimum_engine_version(self, minimum_engine_version):
        """Sets the minimum_engine_version of this Parameter.


        :param minimum_engine_version: The minimum_engine_version of this Parameter.
        :type minimum_engine_version: str
        """

        self._minimum_engine_version = minimum_engine_version
