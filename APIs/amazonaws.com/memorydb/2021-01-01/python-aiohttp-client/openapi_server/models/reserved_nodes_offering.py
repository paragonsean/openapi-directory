# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReservedNodesOffering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_nodes_offering_id: str=None, node_type: str=None, duration: int=None, fixed_price: float=None, offering_type: str=None, recurring_charges: List=None):
        """ReservedNodesOffering - a model defined in OpenAPI

        :param reserved_nodes_offering_id: The reserved_nodes_offering_id of this ReservedNodesOffering.
        :param node_type: The node_type of this ReservedNodesOffering.
        :param duration: The duration of this ReservedNodesOffering.
        :param fixed_price: The fixed_price of this ReservedNodesOffering.
        :param offering_type: The offering_type of this ReservedNodesOffering.
        :param recurring_charges: The recurring_charges of this ReservedNodesOffering.
        """
        self.openapi_types = {
            'reserved_nodes_offering_id': str,
            'node_type': str,
            'duration': int,
            'fixed_price': float,
            'offering_type': str,
            'recurring_charges': List
        }

        self.attribute_map = {
            'reserved_nodes_offering_id': 'ReservedNodesOfferingId',
            'node_type': 'NodeType',
            'duration': 'Duration',
            'fixed_price': 'FixedPrice',
            'offering_type': 'OfferingType',
            'recurring_charges': 'RecurringCharges'
        }

        self._reserved_nodes_offering_id = reserved_nodes_offering_id
        self._node_type = node_type
        self._duration = duration
        self._fixed_price = fixed_price
        self._offering_type = offering_type
        self._recurring_charges = recurring_charges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservedNodesOffering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservedNodesOffering of this ReservedNodesOffering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_nodes_offering_id(self):
        """Gets the reserved_nodes_offering_id of this ReservedNodesOffering.


        :return: The reserved_nodes_offering_id of this ReservedNodesOffering.
        :rtype: str
        """
        return self._reserved_nodes_offering_id

    @reserved_nodes_offering_id.setter
    def reserved_nodes_offering_id(self, reserved_nodes_offering_id):
        """Sets the reserved_nodes_offering_id of this ReservedNodesOffering.


        :param reserved_nodes_offering_id: The reserved_nodes_offering_id of this ReservedNodesOffering.
        :type reserved_nodes_offering_id: str
        """

        self._reserved_nodes_offering_id = reserved_nodes_offering_id

    @property
    def node_type(self):
        """Gets the node_type of this ReservedNodesOffering.


        :return: The node_type of this ReservedNodesOffering.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this ReservedNodesOffering.


        :param node_type: The node_type of this ReservedNodesOffering.
        :type node_type: str
        """

        self._node_type = node_type

    @property
    def duration(self):
        """Gets the duration of this ReservedNodesOffering.


        :return: The duration of this ReservedNodesOffering.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ReservedNodesOffering.


        :param duration: The duration of this ReservedNodesOffering.
        :type duration: int
        """

        self._duration = duration

    @property
    def fixed_price(self):
        """Gets the fixed_price of this ReservedNodesOffering.


        :return: The fixed_price of this ReservedNodesOffering.
        :rtype: float
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this ReservedNodesOffering.


        :param fixed_price: The fixed_price of this ReservedNodesOffering.
        :type fixed_price: float
        """

        self._fixed_price = fixed_price

    @property
    def offering_type(self):
        """Gets the offering_type of this ReservedNodesOffering.


        :return: The offering_type of this ReservedNodesOffering.
        :rtype: str
        """
        return self._offering_type

    @offering_type.setter
    def offering_type(self, offering_type):
        """Sets the offering_type of this ReservedNodesOffering.


        :param offering_type: The offering_type of this ReservedNodesOffering.
        :type offering_type: str
        """

        self._offering_type = offering_type

    @property
    def recurring_charges(self):
        """Gets the recurring_charges of this ReservedNodesOffering.


        :return: The recurring_charges of this ReservedNodesOffering.
        :rtype: List
        """
        return self._recurring_charges

    @recurring_charges.setter
    def recurring_charges(self, recurring_charges):
        """Sets the recurring_charges of this ReservedNodesOffering.


        :param recurring_charges: The recurring_charges of this ReservedNodesOffering.
        :type recurring_charges: List
        """

        self._recurring_charges = recurring_charges
