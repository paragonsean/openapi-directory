# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_endpoint import NodeEndpoint
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: str=None, availability_zone: str=None, create_time: datetime=None, endpoint: NodeEndpoint=None):
        """Node - a model defined in OpenAPI

        :param name: The name of this Node.
        :param status: The status of this Node.
        :param availability_zone: The availability_zone of this Node.
        :param create_time: The create_time of this Node.
        :param endpoint: The endpoint of this Node.
        """
        self.openapi_types = {
            'name': str,
            'status': str,
            'availability_zone': str,
            'create_time': datetime,
            'endpoint': NodeEndpoint
        }

        self.attribute_map = {
            'name': 'Name',
            'status': 'Status',
            'availability_zone': 'AvailabilityZone',
            'create_time': 'CreateTime',
            'endpoint': 'Endpoint'
        }

        self._name = name
        self._status = status
        self._availability_zone = availability_zone
        self._create_time = create_time
        self._endpoint = endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Node.


        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Node.


        :return: The status of this Node.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Node.


        :param status: The status of this Node.
        :type status: str
        """

        self._status = status

    @property
    def availability_zone(self):
        """Gets the availability_zone of this Node.


        :return: The availability_zone of this Node.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this Node.


        :param availability_zone: The availability_zone of this Node.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def create_time(self):
        """Gets the create_time of this Node.


        :return: The create_time of this Node.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Node.


        :param create_time: The create_time of this Node.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def endpoint(self):
        """Gets the endpoint of this Node.


        :return: The endpoint of this Node.
        :rtype: NodeEndpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Node.


        :param endpoint: The endpoint of this Node.
        :type endpoint: NodeEndpoint
        """

        self._endpoint = endpoint
