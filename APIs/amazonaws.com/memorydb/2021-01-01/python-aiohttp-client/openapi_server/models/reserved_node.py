# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReservedNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reservation_id: str=None, reserved_nodes_offering_id: str=None, node_type: str=None, start_time: datetime=None, duration: int=None, fixed_price: float=None, node_count: int=None, offering_type: str=None, state: str=None, recurring_charges: List=None, arn: str=None):
        """ReservedNode - a model defined in OpenAPI

        :param reservation_id: The reservation_id of this ReservedNode.
        :param reserved_nodes_offering_id: The reserved_nodes_offering_id of this ReservedNode.
        :param node_type: The node_type of this ReservedNode.
        :param start_time: The start_time of this ReservedNode.
        :param duration: The duration of this ReservedNode.
        :param fixed_price: The fixed_price of this ReservedNode.
        :param node_count: The node_count of this ReservedNode.
        :param offering_type: The offering_type of this ReservedNode.
        :param state: The state of this ReservedNode.
        :param recurring_charges: The recurring_charges of this ReservedNode.
        :param arn: The arn of this ReservedNode.
        """
        self.openapi_types = {
            'reservation_id': str,
            'reserved_nodes_offering_id': str,
            'node_type': str,
            'start_time': datetime,
            'duration': int,
            'fixed_price': float,
            'node_count': int,
            'offering_type': str,
            'state': str,
            'recurring_charges': List,
            'arn': str
        }

        self.attribute_map = {
            'reservation_id': 'ReservationId',
            'reserved_nodes_offering_id': 'ReservedNodesOfferingId',
            'node_type': 'NodeType',
            'start_time': 'StartTime',
            'duration': 'Duration',
            'fixed_price': 'FixedPrice',
            'node_count': 'NodeCount',
            'offering_type': 'OfferingType',
            'state': 'State',
            'recurring_charges': 'RecurringCharges',
            'arn': 'ARN'
        }

        self._reservation_id = reservation_id
        self._reserved_nodes_offering_id = reserved_nodes_offering_id
        self._node_type = node_type
        self._start_time = start_time
        self._duration = duration
        self._fixed_price = fixed_price
        self._node_count = node_count
        self._offering_type = offering_type
        self._state = state
        self._recurring_charges = recurring_charges
        self._arn = arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservedNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservedNode of this ReservedNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reservation_id(self):
        """Gets the reservation_id of this ReservedNode.


        :return: The reservation_id of this ReservedNode.
        :rtype: str
        """
        return self._reservation_id

    @reservation_id.setter
    def reservation_id(self, reservation_id):
        """Sets the reservation_id of this ReservedNode.


        :param reservation_id: The reservation_id of this ReservedNode.
        :type reservation_id: str
        """

        self._reservation_id = reservation_id

    @property
    def reserved_nodes_offering_id(self):
        """Gets the reserved_nodes_offering_id of this ReservedNode.


        :return: The reserved_nodes_offering_id of this ReservedNode.
        :rtype: str
        """
        return self._reserved_nodes_offering_id

    @reserved_nodes_offering_id.setter
    def reserved_nodes_offering_id(self, reserved_nodes_offering_id):
        """Sets the reserved_nodes_offering_id of this ReservedNode.


        :param reserved_nodes_offering_id: The reserved_nodes_offering_id of this ReservedNode.
        :type reserved_nodes_offering_id: str
        """

        self._reserved_nodes_offering_id = reserved_nodes_offering_id

    @property
    def node_type(self):
        """Gets the node_type of this ReservedNode.


        :return: The node_type of this ReservedNode.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this ReservedNode.


        :param node_type: The node_type of this ReservedNode.
        :type node_type: str
        """

        self._node_type = node_type

    @property
    def start_time(self):
        """Gets the start_time of this ReservedNode.


        :return: The start_time of this ReservedNode.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ReservedNode.


        :param start_time: The start_time of this ReservedNode.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def duration(self):
        """Gets the duration of this ReservedNode.


        :return: The duration of this ReservedNode.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ReservedNode.


        :param duration: The duration of this ReservedNode.
        :type duration: int
        """

        self._duration = duration

    @property
    def fixed_price(self):
        """Gets the fixed_price of this ReservedNode.


        :return: The fixed_price of this ReservedNode.
        :rtype: float
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this ReservedNode.


        :param fixed_price: The fixed_price of this ReservedNode.
        :type fixed_price: float
        """

        self._fixed_price = fixed_price

    @property
    def node_count(self):
        """Gets the node_count of this ReservedNode.


        :return: The node_count of this ReservedNode.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this ReservedNode.


        :param node_count: The node_count of this ReservedNode.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def offering_type(self):
        """Gets the offering_type of this ReservedNode.


        :return: The offering_type of this ReservedNode.
        :rtype: str
        """
        return self._offering_type

    @offering_type.setter
    def offering_type(self, offering_type):
        """Sets the offering_type of this ReservedNode.


        :param offering_type: The offering_type of this ReservedNode.
        :type offering_type: str
        """

        self._offering_type = offering_type

    @property
    def state(self):
        """Gets the state of this ReservedNode.


        :return: The state of this ReservedNode.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReservedNode.


        :param state: The state of this ReservedNode.
        :type state: str
        """

        self._state = state

    @property
    def recurring_charges(self):
        """Gets the recurring_charges of this ReservedNode.


        :return: The recurring_charges of this ReservedNode.
        :rtype: List
        """
        return self._recurring_charges

    @recurring_charges.setter
    def recurring_charges(self, recurring_charges):
        """Sets the recurring_charges of this ReservedNode.


        :param recurring_charges: The recurring_charges of this ReservedNode.
        :type recurring_charges: List
        """

        self._recurring_charges = recurring_charges

    @property
    def arn(self):
        """Gets the arn of this ReservedNode.


        :return: The arn of this ReservedNode.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ReservedNode.


        :param arn: The arn of this ReservedNode.
        :type arn: str
        """

        self._arn = arn
