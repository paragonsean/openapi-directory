/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINode.h
 *
 * Represents an individual node within a cluster. Each node runs its own instance of the cluster&#39;s protocol-compliant caching software.
 */

#ifndef OAINode_H
#define OAINode_H

#include <QJsonObject>

#include "OAINode_Endpoint.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINode_Endpoint;

class OAINode : public OAIObject {
public:
    OAINode();
    OAINode(QString json);
    ~OAINode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QDateTime getCreateTime() const;
    void setCreateTime(const QDateTime &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    OAINode_Endpoint getEndpoint() const;
    void setEndpoint(const OAINode_Endpoint &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QDateTime m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    OAINode_Endpoint m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINode)

#endif // OAINode_H
