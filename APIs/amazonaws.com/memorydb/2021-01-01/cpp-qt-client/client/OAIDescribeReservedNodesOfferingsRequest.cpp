/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeReservedNodesOfferingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeReservedNodesOfferingsRequest::OAIDescribeReservedNodesOfferingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeReservedNodesOfferingsRequest::OAIDescribeReservedNodesOfferingsRequest() {
    this->initializeModel();
}

OAIDescribeReservedNodesOfferingsRequest::~OAIDescribeReservedNodesOfferingsRequest() {}

void OAIDescribeReservedNodesOfferingsRequest::initializeModel() {

    m_reserved_nodes_offering_id_isSet = false;
    m_reserved_nodes_offering_id_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_offering_type_isSet = false;
    m_offering_type_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeReservedNodesOfferingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeReservedNodesOfferingsRequest::fromJsonObject(QJsonObject json) {

    m_reserved_nodes_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_nodes_offering_id, json[QString("ReservedNodesOfferingId")]);
    m_reserved_nodes_offering_id_isSet = !json[QString("ReservedNodesOfferingId")].isNull() && m_reserved_nodes_offering_id_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_offering_type_isValid = ::OpenAPI::fromJsonValue(m_offering_type, json[QString("OfferingType")]);
    m_offering_type_isSet = !json[QString("OfferingType")].isNull() && m_offering_type_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeReservedNodesOfferingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeReservedNodesOfferingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_reserved_nodes_offering_id_isSet) {
        obj.insert(QString("ReservedNodesOfferingId"), ::OpenAPI::toJsonValue(m_reserved_nodes_offering_id));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_offering_type_isSet) {
        obj.insert(QString("OfferingType"), ::OpenAPI::toJsonValue(m_offering_type));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeReservedNodesOfferingsRequest::getReservedNodesOfferingId() const {
    return m_reserved_nodes_offering_id;
}
void OAIDescribeReservedNodesOfferingsRequest::setReservedNodesOfferingId(const QString &reserved_nodes_offering_id) {
    m_reserved_nodes_offering_id = reserved_nodes_offering_id;
    m_reserved_nodes_offering_id_isSet = true;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_reserved_nodes_offering_id_Set() const{
    return m_reserved_nodes_offering_id_isSet;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_reserved_nodes_offering_id_Valid() const{
    return m_reserved_nodes_offering_id_isValid;
}

QString OAIDescribeReservedNodesOfferingsRequest::getNodeType() const {
    return m_node_type;
}
void OAIDescribeReservedNodesOfferingsRequest::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIDescribeReservedNodesOfferingsRequest::getDuration() const {
    return m_duration;
}
void OAIDescribeReservedNodesOfferingsRequest::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIDescribeReservedNodesOfferingsRequest::getOfferingType() const {
    return m_offering_type;
}
void OAIDescribeReservedNodesOfferingsRequest::setOfferingType(const QString &offering_type) {
    m_offering_type = offering_type;
    m_offering_type_isSet = true;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_offering_type_Set() const{
    return m_offering_type_isSet;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_offering_type_Valid() const{
    return m_offering_type_isValid;
}

qint32 OAIDescribeReservedNodesOfferingsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeReservedNodesOfferingsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeReservedNodesOfferingsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeReservedNodesOfferingsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeReservedNodesOfferingsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeReservedNodesOfferingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reserved_nodes_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeReservedNodesOfferingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
