/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopySnapshotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopySnapshotRequest::OAICopySnapshotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopySnapshotRequest::OAICopySnapshotRequest() {
    this->initializeModel();
}

OAICopySnapshotRequest::~OAICopySnapshotRequest() {}

void OAICopySnapshotRequest::initializeModel() {

    m_source_snapshot_name_isSet = false;
    m_source_snapshot_name_isValid = false;

    m_target_snapshot_name_isSet = false;
    m_target_snapshot_name_isValid = false;

    m_target_bucket_isSet = false;
    m_target_bucket_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICopySnapshotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopySnapshotRequest::fromJsonObject(QJsonObject json) {

    m_source_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_source_snapshot_name, json[QString("SourceSnapshotName")]);
    m_source_snapshot_name_isSet = !json[QString("SourceSnapshotName")].isNull() && m_source_snapshot_name_isValid;

    m_target_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_target_snapshot_name, json[QString("TargetSnapshotName")]);
    m_target_snapshot_name_isSet = !json[QString("TargetSnapshotName")].isNull() && m_target_snapshot_name_isValid;

    m_target_bucket_isValid = ::OpenAPI::fromJsonValue(m_target_bucket, json[QString("TargetBucket")]);
    m_target_bucket_isSet = !json[QString("TargetBucket")].isNull() && m_target_bucket_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICopySnapshotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopySnapshotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source_snapshot_name_isSet) {
        obj.insert(QString("SourceSnapshotName"), ::OpenAPI::toJsonValue(m_source_snapshot_name));
    }
    if (m_target_snapshot_name_isSet) {
        obj.insert(QString("TargetSnapshotName"), ::OpenAPI::toJsonValue(m_target_snapshot_name));
    }
    if (m_target_bucket_isSet) {
        obj.insert(QString("TargetBucket"), ::OpenAPI::toJsonValue(m_target_bucket));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICopySnapshotRequest::getSourceSnapshotName() const {
    return m_source_snapshot_name;
}
void OAICopySnapshotRequest::setSourceSnapshotName(const QString &source_snapshot_name) {
    m_source_snapshot_name = source_snapshot_name;
    m_source_snapshot_name_isSet = true;
}

bool OAICopySnapshotRequest::is_source_snapshot_name_Set() const{
    return m_source_snapshot_name_isSet;
}

bool OAICopySnapshotRequest::is_source_snapshot_name_Valid() const{
    return m_source_snapshot_name_isValid;
}

QString OAICopySnapshotRequest::getTargetSnapshotName() const {
    return m_target_snapshot_name;
}
void OAICopySnapshotRequest::setTargetSnapshotName(const QString &target_snapshot_name) {
    m_target_snapshot_name = target_snapshot_name;
    m_target_snapshot_name_isSet = true;
}

bool OAICopySnapshotRequest::is_target_snapshot_name_Set() const{
    return m_target_snapshot_name_isSet;
}

bool OAICopySnapshotRequest::is_target_snapshot_name_Valid() const{
    return m_target_snapshot_name_isValid;
}

QString OAICopySnapshotRequest::getTargetBucket() const {
    return m_target_bucket;
}
void OAICopySnapshotRequest::setTargetBucket(const QString &target_bucket) {
    m_target_bucket = target_bucket;
    m_target_bucket_isSet = true;
}

bool OAICopySnapshotRequest::is_target_bucket_Set() const{
    return m_target_bucket_isSet;
}

bool OAICopySnapshotRequest::is_target_bucket_Valid() const{
    return m_target_bucket_isValid;
}

QString OAICopySnapshotRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICopySnapshotRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICopySnapshotRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICopySnapshotRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QList OAICopySnapshotRequest::getTags() const {
    return m_tags;
}
void OAICopySnapshotRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICopySnapshotRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICopySnapshotRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICopySnapshotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopySnapshotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_snapshot_name_isValid && m_target_snapshot_name_isValid && true;
}

} // namespace OpenAPI
