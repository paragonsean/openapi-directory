/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShardDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShardDetail::OAIShardDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShardDetail::OAIShardDetail() {
    this->initializeModel();
}

OAIShardDetail::~OAIShardDetail() {}

void OAIShardDetail::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_snapshot_creation_time_isSet = false;
    m_snapshot_creation_time_isValid = false;
}

void OAIShardDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShardDetail::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_snapshot_creation_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_creation_time, json[QString("SnapshotCreationTime")]);
    m_snapshot_creation_time_isSet = !json[QString("SnapshotCreationTime")].isNull() && m_snapshot_creation_time_isValid;
}

QString OAIShardDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShardDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_snapshot_creation_time_isSet) {
        obj.insert(QString("SnapshotCreationTime"), ::OpenAPI::toJsonValue(m_snapshot_creation_time));
    }
    return obj;
}

QString OAIShardDetail::getName() const {
    return m_name;
}
void OAIShardDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShardDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShardDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAIShardDetail_Configuration OAIShardDetail::getConfiguration() const {
    return m_configuration;
}
void OAIShardDetail::setConfiguration(const OAIShardDetail_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIShardDetail::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIShardDetail::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIShardDetail::getSize() const {
    return m_size;
}
void OAIShardDetail::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIShardDetail::is_size_Set() const{
    return m_size_isSet;
}

bool OAIShardDetail::is_size_Valid() const{
    return m_size_isValid;
}

QDateTime OAIShardDetail::getSnapshotCreationTime() const {
    return m_snapshot_creation_time;
}
void OAIShardDetail::setSnapshotCreationTime(const QDateTime &snapshot_creation_time) {
    m_snapshot_creation_time = snapshot_creation_time;
    m_snapshot_creation_time_isSet = true;
}

bool OAIShardDetail::is_snapshot_creation_time_Set() const{
    return m_snapshot_creation_time_isSet;
}

bool OAIShardDetail::is_snapshot_creation_time_Valid() const{
    return m_snapshot_creation_time_isValid;
}

bool OAIShardDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShardDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
