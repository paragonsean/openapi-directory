/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceUpdate::OAIServiceUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceUpdate::OAIServiceUpdate() {
    this->initializeModel();
}

OAIServiceUpdate::~OAIServiceUpdate() {}

void OAIServiceUpdate::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_service_update_name_isSet = false;
    m_service_update_name_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_nodes_updated_isSet = false;
    m_nodes_updated_isValid = false;

    m_auto_update_start_date_isSet = false;
    m_auto_update_start_date_isValid = false;
}

void OAIServiceUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceUpdate::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_service_update_name_isValid = ::OpenAPI::fromJsonValue(m_service_update_name, json[QString("ServiceUpdateName")]);
    m_service_update_name_isSet = !json[QString("ServiceUpdateName")].isNull() && m_service_update_name_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("ReleaseDate")]);
    m_release_date_isSet = !json[QString("ReleaseDate")].isNull() && m_release_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_nodes_updated_isValid = ::OpenAPI::fromJsonValue(m_nodes_updated, json[QString("NodesUpdated")]);
    m_nodes_updated_isSet = !json[QString("NodesUpdated")].isNull() && m_nodes_updated_isValid;

    m_auto_update_start_date_isValid = ::OpenAPI::fromJsonValue(m_auto_update_start_date, json[QString("AutoUpdateStartDate")]);
    m_auto_update_start_date_isSet = !json[QString("AutoUpdateStartDate")].isNull() && m_auto_update_start_date_isValid;
}

QString OAIServiceUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_service_update_name_isSet) {
        obj.insert(QString("ServiceUpdateName"), ::OpenAPI::toJsonValue(m_service_update_name));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("ReleaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_nodes_updated_isSet) {
        obj.insert(QString("NodesUpdated"), ::OpenAPI::toJsonValue(m_nodes_updated));
    }
    if (m_auto_update_start_date_isSet) {
        obj.insert(QString("AutoUpdateStartDate"), ::OpenAPI::toJsonValue(m_auto_update_start_date));
    }
    return obj;
}

QString OAIServiceUpdate::getClusterName() const {
    return m_cluster_name;
}
void OAIServiceUpdate::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIServiceUpdate::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIServiceUpdate::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIServiceUpdate::getServiceUpdateName() const {
    return m_service_update_name;
}
void OAIServiceUpdate::setServiceUpdateName(const QString &service_update_name) {
    m_service_update_name = service_update_name;
    m_service_update_name_isSet = true;
}

bool OAIServiceUpdate::is_service_update_name_Set() const{
    return m_service_update_name_isSet;
}

bool OAIServiceUpdate::is_service_update_name_Valid() const{
    return m_service_update_name_isValid;
}

QDateTime OAIServiceUpdate::getReleaseDate() const {
    return m_release_date;
}
void OAIServiceUpdate::setReleaseDate(const QDateTime &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIServiceUpdate::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIServiceUpdate::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIServiceUpdate::getDescription() const {
    return m_description;
}
void OAIServiceUpdate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceUpdate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceUpdate::is_description_Valid() const{
    return m_description_isValid;
}

OAIServiceUpdateStatus OAIServiceUpdate::getStatus() const {
    return m_status;
}
void OAIServiceUpdate::setStatus(const OAIServiceUpdateStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceUpdate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceUpdate::is_status_Valid() const{
    return m_status_isValid;
}

OAIServiceUpdateType OAIServiceUpdate::getType() const {
    return m_type;
}
void OAIServiceUpdate::setType(const OAIServiceUpdateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceUpdate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceUpdate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIServiceUpdate::getNodesUpdated() const {
    return m_nodes_updated;
}
void OAIServiceUpdate::setNodesUpdated(const QString &nodes_updated) {
    m_nodes_updated = nodes_updated;
    m_nodes_updated_isSet = true;
}

bool OAIServiceUpdate::is_nodes_updated_Set() const{
    return m_nodes_updated_isSet;
}

bool OAIServiceUpdate::is_nodes_updated_Valid() const{
    return m_nodes_updated_isValid;
}

QDateTime OAIServiceUpdate::getAutoUpdateStartDate() const {
    return m_auto_update_start_date;
}
void OAIServiceUpdate::setAutoUpdateStartDate(const QDateTime &auto_update_start_date) {
    m_auto_update_start_date = auto_update_start_date;
    m_auto_update_start_date_isSet = true;
}

bool OAIServiceUpdate::is_auto_update_start_date_Set() const{
    return m_auto_update_start_date_isSet;
}

bool OAIServiceUpdate::is_auto_update_start_date_Valid() const{
    return m_auto_update_start_date_isValid;
}

bool OAIServiceUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_update_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_update_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
