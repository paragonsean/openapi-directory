/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParameter.h
 *
 * Describes an individual setting that controls some aspect of MemoryDB behavior.
 */

#ifndef OAIParameter_H
#define OAIParameter_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIParameter : public OAIObject {
public:
    OAIParameter();
    OAIParameter(QString json);
    ~OAIParameter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDataType() const;
    void setDataType(const QString &data_type);
    bool is_data_type_Set() const;
    bool is_data_type_Valid() const;

    QString getAllowedValues() const;
    void setAllowedValues(const QString &allowed_values);
    bool is_allowed_values_Set() const;
    bool is_allowed_values_Valid() const;

    QString getMinimumEngineVersion() const;
    void setMinimumEngineVersion(const QString &minimum_engine_version);
    bool is_minimum_engine_version_Set() const;
    bool is_minimum_engine_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_data_type;
    bool m_data_type_isSet;
    bool m_data_type_isValid;

    QString m_allowed_values;
    bool m_allowed_values_isSet;
    bool m_allowed_values_isValid;

    QString m_minimum_engine_version;
    bool m_minimum_engine_version_isSet;
    bool m_minimum_engine_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParameter)

#endif // OAIParameter_H
