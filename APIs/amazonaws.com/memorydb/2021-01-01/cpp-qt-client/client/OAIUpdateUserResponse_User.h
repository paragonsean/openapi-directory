/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateUserResponse_User.h
 *
 * 
 */

#ifndef OAIUpdateUserResponse_User_H
#define OAIUpdateUserResponse_User_H

#include <QJsonObject>

#include "OAIUser_Authentication.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_Authentication;

class OAIUpdateUserResponse_User : public OAIObject {
public:
    OAIUpdateUserResponse_User();
    OAIUpdateUserResponse_User(QString json);
    ~OAIUpdateUserResponse_User() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getAccessString() const;
    void setAccessString(const QString &access_string);
    bool is_access_string_Set() const;
    bool is_access_string_Valid() const;

    QList getAclNames() const;
    void setAclNames(const QList &acl_names);
    bool is_acl_names_Set() const;
    bool is_acl_names_Valid() const;

    QString getMinimumEngineVersion() const;
    void setMinimumEngineVersion(const QString &minimum_engine_version);
    bool is_minimum_engine_version_Set() const;
    bool is_minimum_engine_version_Valid() const;

    OAIUser_Authentication getAuthentication() const;
    void setAuthentication(const OAIUser_Authentication &authentication);
    bool is_authentication_Set() const;
    bool is_authentication_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_access_string;
    bool m_access_string_isSet;
    bool m_access_string_isValid;

    QList m_acl_names;
    bool m_acl_names_isSet;
    bool m_acl_names_isValid;

    QString m_minimum_engine_version;
    bool m_minimum_engine_version_isSet;
    bool m_minimum_engine_version_isValid;

    OAIUser_Authentication m_authentication;
    bool m_authentication_isSet;
    bool m_authentication_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateUserResponse_User)

#endif // OAIUpdateUserResponse_User_H
