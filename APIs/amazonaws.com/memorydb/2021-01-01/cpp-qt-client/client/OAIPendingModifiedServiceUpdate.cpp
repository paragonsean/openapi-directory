/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPendingModifiedServiceUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPendingModifiedServiceUpdate::OAIPendingModifiedServiceUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPendingModifiedServiceUpdate::OAIPendingModifiedServiceUpdate() {
    this->initializeModel();
}

OAIPendingModifiedServiceUpdate::~OAIPendingModifiedServiceUpdate() {}

void OAIPendingModifiedServiceUpdate::initializeModel() {

    m_service_update_name_isSet = false;
    m_service_update_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPendingModifiedServiceUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPendingModifiedServiceUpdate::fromJsonObject(QJsonObject json) {

    m_service_update_name_isValid = ::OpenAPI::fromJsonValue(m_service_update_name, json[QString("ServiceUpdateName")]);
    m_service_update_name_isSet = !json[QString("ServiceUpdateName")].isNull() && m_service_update_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIPendingModifiedServiceUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPendingModifiedServiceUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_service_update_name_isSet) {
        obj.insert(QString("ServiceUpdateName"), ::OpenAPI::toJsonValue(m_service_update_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPendingModifiedServiceUpdate::getServiceUpdateName() const {
    return m_service_update_name;
}
void OAIPendingModifiedServiceUpdate::setServiceUpdateName(const QString &service_update_name) {
    m_service_update_name = service_update_name;
    m_service_update_name_isSet = true;
}

bool OAIPendingModifiedServiceUpdate::is_service_update_name_Set() const{
    return m_service_update_name_isSet;
}

bool OAIPendingModifiedServiceUpdate::is_service_update_name_Valid() const{
    return m_service_update_name_isValid;
}

OAIServiceUpdateStatus OAIPendingModifiedServiceUpdate::getStatus() const {
    return m_status;
}
void OAIPendingModifiedServiceUpdate::setStatus(const OAIServiceUpdateStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPendingModifiedServiceUpdate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPendingModifiedServiceUpdate::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPendingModifiedServiceUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_update_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPendingModifiedServiceUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
