/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateClusterRequest.h
 *
 * 
 */

#ifndef OAICreateClusterRequest_H
#define OAICreateClusterRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateClusterRequest : public OAIObject {
public:
    OAICreateClusterRequest();
    OAICreateClusterRequest(QString json);
    ~OAICreateClusterRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QString getParameterGroupName() const;
    void setParameterGroupName(const QString &parameter_group_name);
    bool is_parameter_group_name_Set() const;
    bool is_parameter_group_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getNumShards() const;
    void setNumShards(const qint32 &num_shards);
    bool is_num_shards_Set() const;
    bool is_num_shards_Valid() const;

    qint32 getNumReplicasPerShard() const;
    void setNumReplicasPerShard(const qint32 &num_replicas_per_shard);
    bool is_num_replicas_per_shard_Set() const;
    bool is_num_replicas_per_shard_Valid() const;

    QString getSubnetGroupName() const;
    void setSubnetGroupName(const QString &subnet_group_name);
    bool is_subnet_group_name_Set() const;
    bool is_subnet_group_name_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QString getMaintenanceWindow() const;
    void setMaintenanceWindow(const QString &maintenance_window);
    bool is_maintenance_window_Set() const;
    bool is_maintenance_window_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getSnsTopicArn() const;
    void setSnsTopicArn(const QString &sns_topic_arn);
    bool is_sns_topic_arn_Set() const;
    bool is_sns_topic_arn_Valid() const;

    bool getTlsEnabled() const;
    void setTlsEnabled(const bool &tls_enabled);
    bool is_tls_enabled_Set() const;
    bool is_tls_enabled_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QList getSnapshotArns() const;
    void setSnapshotArns(const QList &snapshot_arns);
    bool is_snapshot_arns_Set() const;
    bool is_snapshot_arns_Valid() const;

    QString getSnapshotName() const;
    void setSnapshotName(const QString &snapshot_name);
    bool is_snapshot_name_Set() const;
    bool is_snapshot_name_Valid() const;

    qint32 getSnapshotRetentionLimit() const;
    void setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit);
    bool is_snapshot_retention_limit_Set() const;
    bool is_snapshot_retention_limit_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getSnapshotWindow() const;
    void setSnapshotWindow(const QString &snapshot_window);
    bool is_snapshot_window_Set() const;
    bool is_snapshot_window_Valid() const;

    QString getAclName() const;
    void setAclName(const QString &acl_name);
    bool is_acl_name_Set() const;
    bool is_acl_name_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    bool getAutoMinorVersionUpgrade() const;
    void setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade);
    bool is_auto_minor_version_upgrade_Set() const;
    bool is_auto_minor_version_upgrade_Valid() const;

    bool getDataTiering() const;
    void setDataTiering(const bool &data_tiering);
    bool is_data_tiering_Set() const;
    bool is_data_tiering_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QString m_parameter_group_name;
    bool m_parameter_group_name_isSet;
    bool m_parameter_group_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_num_shards;
    bool m_num_shards_isSet;
    bool m_num_shards_isValid;

    qint32 m_num_replicas_per_shard;
    bool m_num_replicas_per_shard_isSet;
    bool m_num_replicas_per_shard_isValid;

    QString m_subnet_group_name;
    bool m_subnet_group_name_isSet;
    bool m_subnet_group_name_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QString m_maintenance_window;
    bool m_maintenance_window_isSet;
    bool m_maintenance_window_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_sns_topic_arn;
    bool m_sns_topic_arn_isSet;
    bool m_sns_topic_arn_isValid;

    bool m_tls_enabled;
    bool m_tls_enabled_isSet;
    bool m_tls_enabled_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QList m_snapshot_arns;
    bool m_snapshot_arns_isSet;
    bool m_snapshot_arns_isValid;

    QString m_snapshot_name;
    bool m_snapshot_name_isSet;
    bool m_snapshot_name_isValid;

    qint32 m_snapshot_retention_limit;
    bool m_snapshot_retention_limit_isSet;
    bool m_snapshot_retention_limit_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_snapshot_window;
    bool m_snapshot_window_isSet;
    bool m_snapshot_window_isValid;

    QString m_acl_name;
    bool m_acl_name_isSet;
    bool m_acl_name_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    bool m_auto_minor_version_upgrade;
    bool m_auto_minor_version_upgrade_isSet;
    bool m_auto_minor_version_upgrade_isValid;

    bool m_data_tiering;
    bool m_data_tiering_isSet;
    bool m_data_tiering_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateClusterRequest)

#endif // OAICreateClusterRequest_H
