/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPurchaseReservedNodesOfferingRequest.h
 *
 * 
 */

#ifndef OAIPurchaseReservedNodesOfferingRequest_H
#define OAIPurchaseReservedNodesOfferingRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPurchaseReservedNodesOfferingRequest : public OAIObject {
public:
    OAIPurchaseReservedNodesOfferingRequest();
    OAIPurchaseReservedNodesOfferingRequest(QString json);
    ~OAIPurchaseReservedNodesOfferingRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReservedNodesOfferingId() const;
    void setReservedNodesOfferingId(const QString &reserved_nodes_offering_id);
    bool is_reserved_nodes_offering_id_Set() const;
    bool is_reserved_nodes_offering_id_Valid() const;

    QString getReservationId() const;
    void setReservationId(const QString &reservation_id);
    bool is_reservation_id_Set() const;
    bool is_reservation_id_Valid() const;

    qint32 getNodeCount() const;
    void setNodeCount(const qint32 &node_count);
    bool is_node_count_Set() const;
    bool is_node_count_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reserved_nodes_offering_id;
    bool m_reserved_nodes_offering_id_isSet;
    bool m_reserved_nodes_offering_id_isValid;

    QString m_reservation_id;
    bool m_reservation_id_isSet;
    bool m_reservation_id_isValid;

    qint32 m_node_count;
    bool m_node_count_isSet;
    bool m_node_count_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPurchaseReservedNodesOfferingRequest)

#endif // OAIPurchaseReservedNodesOfferingRequest_H
