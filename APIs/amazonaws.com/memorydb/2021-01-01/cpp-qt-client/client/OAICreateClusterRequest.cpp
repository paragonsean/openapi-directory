/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterRequest::OAICreateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterRequest::OAICreateClusterRequest() {
    this->initializeModel();
}

OAICreateClusterRequest::~OAICreateClusterRequest() {}

void OAICreateClusterRequest::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_parameter_group_name_isSet = false;
    m_parameter_group_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_num_shards_isSet = false;
    m_num_shards_isValid = false;

    m_num_replicas_per_shard_isSet = false;
    m_num_replicas_per_shard_isValid = false;

    m_subnet_group_name_isSet = false;
    m_subnet_group_name_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_tls_enabled_isSet = false;
    m_tls_enabled_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_snapshot_arns_isSet = false;
    m_snapshot_arns_isValid = false;

    m_snapshot_name_isSet = false;
    m_snapshot_name_isValid = false;

    m_snapshot_retention_limit_isSet = false;
    m_snapshot_retention_limit_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_snapshot_window_isSet = false;
    m_snapshot_window_isValid = false;

    m_acl_name_isSet = false;
    m_acl_name_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_data_tiering_isSet = false;
    m_data_tiering_isValid = false;
}

void OAICreateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_name, json[QString("ParameterGroupName")]);
    m_parameter_group_name_isSet = !json[QString("ParameterGroupName")].isNull() && m_parameter_group_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_num_shards_isValid = ::OpenAPI::fromJsonValue(m_num_shards, json[QString("NumShards")]);
    m_num_shards_isSet = !json[QString("NumShards")].isNull() && m_num_shards_isValid;

    m_num_replicas_per_shard_isValid = ::OpenAPI::fromJsonValue(m_num_replicas_per_shard, json[QString("NumReplicasPerShard")]);
    m_num_replicas_per_shard_isSet = !json[QString("NumReplicasPerShard")].isNull() && m_num_replicas_per_shard_isValid;

    m_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_subnet_group_name, json[QString("SubnetGroupName")]);
    m_subnet_group_name_isSet = !json[QString("SubnetGroupName")].isNull() && m_subnet_group_name_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("MaintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("MaintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_tls_enabled_isValid = ::OpenAPI::fromJsonValue(m_tls_enabled, json[QString("TLSEnabled")]);
    m_tls_enabled_isSet = !json[QString("TLSEnabled")].isNull() && m_tls_enabled_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_snapshot_arns_isValid = ::OpenAPI::fromJsonValue(m_snapshot_arns, json[QString("SnapshotArns")]);
    m_snapshot_arns_isSet = !json[QString("SnapshotArns")].isNull() && m_snapshot_arns_isValid;

    m_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_snapshot_name, json[QString("SnapshotName")]);
    m_snapshot_name_isSet = !json[QString("SnapshotName")].isNull() && m_snapshot_name_isValid;

    m_snapshot_retention_limit_isValid = ::OpenAPI::fromJsonValue(m_snapshot_retention_limit, json[QString("SnapshotRetentionLimit")]);
    m_snapshot_retention_limit_isSet = !json[QString("SnapshotRetentionLimit")].isNull() && m_snapshot_retention_limit_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_snapshot_window_isValid = ::OpenAPI::fromJsonValue(m_snapshot_window, json[QString("SnapshotWindow")]);
    m_snapshot_window_isSet = !json[QString("SnapshotWindow")].isNull() && m_snapshot_window_isValid;

    m_acl_name_isValid = ::OpenAPI::fromJsonValue(m_acl_name, json[QString("ACLName")]);
    m_acl_name_isSet = !json[QString("ACLName")].isNull() && m_acl_name_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_data_tiering_isValid = ::OpenAPI::fromJsonValue(m_data_tiering, json[QString("DataTiering")]);
    m_data_tiering_isSet = !json[QString("DataTiering")].isNull() && m_data_tiering_isValid;
}

QString OAICreateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_parameter_group_name_isSet) {
        obj.insert(QString("ParameterGroupName"), ::OpenAPI::toJsonValue(m_parameter_group_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_num_shards_isSet) {
        obj.insert(QString("NumShards"), ::OpenAPI::toJsonValue(m_num_shards));
    }
    if (m_num_replicas_per_shard_isSet) {
        obj.insert(QString("NumReplicasPerShard"), ::OpenAPI::toJsonValue(m_num_replicas_per_shard));
    }
    if (m_subnet_group_name_isSet) {
        obj.insert(QString("SubnetGroupName"), ::OpenAPI::toJsonValue(m_subnet_group_name));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_maintenance_window_isSet) {
        obj.insert(QString("MaintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_tls_enabled_isSet) {
        obj.insert(QString("TLSEnabled"), ::OpenAPI::toJsonValue(m_tls_enabled));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_snapshot_arns.isSet()) {
        obj.insert(QString("SnapshotArns"), ::OpenAPI::toJsonValue(m_snapshot_arns));
    }
    if (m_snapshot_name_isSet) {
        obj.insert(QString("SnapshotName"), ::OpenAPI::toJsonValue(m_snapshot_name));
    }
    if (m_snapshot_retention_limit_isSet) {
        obj.insert(QString("SnapshotRetentionLimit"), ::OpenAPI::toJsonValue(m_snapshot_retention_limit));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_snapshot_window_isSet) {
        obj.insert(QString("SnapshotWindow"), ::OpenAPI::toJsonValue(m_snapshot_window));
    }
    if (m_acl_name_isSet) {
        obj.insert(QString("ACLName"), ::OpenAPI::toJsonValue(m_acl_name));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_data_tiering_isSet) {
        obj.insert(QString("DataTiering"), ::OpenAPI::toJsonValue(m_data_tiering));
    }
    return obj;
}

QString OAICreateClusterRequest::getClusterName() const {
    return m_cluster_name;
}
void OAICreateClusterRequest::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateClusterRequest::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateClusterRequest::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAICreateClusterRequest::getNodeType() const {
    return m_node_type;
}
void OAICreateClusterRequest::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAICreateClusterRequest::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAICreateClusterRequest::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAICreateClusterRequest::getParameterGroupName() const {
    return m_parameter_group_name;
}
void OAICreateClusterRequest::setParameterGroupName(const QString &parameter_group_name) {
    m_parameter_group_name = parameter_group_name;
    m_parameter_group_name_isSet = true;
}

bool OAICreateClusterRequest::is_parameter_group_name_Set() const{
    return m_parameter_group_name_isSet;
}

bool OAICreateClusterRequest::is_parameter_group_name_Valid() const{
    return m_parameter_group_name_isValid;
}

QString OAICreateClusterRequest::getDescription() const {
    return m_description;
}
void OAICreateClusterRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateClusterRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateClusterRequest::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICreateClusterRequest::getNumShards() const {
    return m_num_shards;
}
void OAICreateClusterRequest::setNumShards(const qint32 &num_shards) {
    m_num_shards = num_shards;
    m_num_shards_isSet = true;
}

bool OAICreateClusterRequest::is_num_shards_Set() const{
    return m_num_shards_isSet;
}

bool OAICreateClusterRequest::is_num_shards_Valid() const{
    return m_num_shards_isValid;
}

qint32 OAICreateClusterRequest::getNumReplicasPerShard() const {
    return m_num_replicas_per_shard;
}
void OAICreateClusterRequest::setNumReplicasPerShard(const qint32 &num_replicas_per_shard) {
    m_num_replicas_per_shard = num_replicas_per_shard;
    m_num_replicas_per_shard_isSet = true;
}

bool OAICreateClusterRequest::is_num_replicas_per_shard_Set() const{
    return m_num_replicas_per_shard_isSet;
}

bool OAICreateClusterRequest::is_num_replicas_per_shard_Valid() const{
    return m_num_replicas_per_shard_isValid;
}

QString OAICreateClusterRequest::getSubnetGroupName() const {
    return m_subnet_group_name;
}
void OAICreateClusterRequest::setSubnetGroupName(const QString &subnet_group_name) {
    m_subnet_group_name = subnet_group_name;
    m_subnet_group_name_isSet = true;
}

bool OAICreateClusterRequest::is_subnet_group_name_Set() const{
    return m_subnet_group_name_isSet;
}

bool OAICreateClusterRequest::is_subnet_group_name_Valid() const{
    return m_subnet_group_name_isValid;
}

QList OAICreateClusterRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateClusterRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateClusterRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateClusterRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAICreateClusterRequest::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAICreateClusterRequest::setMaintenanceWindow(const QString &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAICreateClusterRequest::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAICreateClusterRequest::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

qint32 OAICreateClusterRequest::getPort() const {
    return m_port;
}
void OAICreateClusterRequest::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateClusterRequest::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateClusterRequest::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateClusterRequest::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAICreateClusterRequest::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAICreateClusterRequest::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAICreateClusterRequest::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

bool OAICreateClusterRequest::getTlsEnabled() const {
    return m_tls_enabled;
}
void OAICreateClusterRequest::setTlsEnabled(const bool &tls_enabled) {
    m_tls_enabled = tls_enabled;
    m_tls_enabled_isSet = true;
}

bool OAICreateClusterRequest::is_tls_enabled_Set() const{
    return m_tls_enabled_isSet;
}

bool OAICreateClusterRequest::is_tls_enabled_Valid() const{
    return m_tls_enabled_isValid;
}

QString OAICreateClusterRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateClusterRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateClusterRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateClusterRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QList OAICreateClusterRequest::getSnapshotArns() const {
    return m_snapshot_arns;
}
void OAICreateClusterRequest::setSnapshotArns(const QList &snapshot_arns) {
    m_snapshot_arns = snapshot_arns;
    m_snapshot_arns_isSet = true;
}

bool OAICreateClusterRequest::is_snapshot_arns_Set() const{
    return m_snapshot_arns_isSet;
}

bool OAICreateClusterRequest::is_snapshot_arns_Valid() const{
    return m_snapshot_arns_isValid;
}

QString OAICreateClusterRequest::getSnapshotName() const {
    return m_snapshot_name;
}
void OAICreateClusterRequest::setSnapshotName(const QString &snapshot_name) {
    m_snapshot_name = snapshot_name;
    m_snapshot_name_isSet = true;
}

bool OAICreateClusterRequest::is_snapshot_name_Set() const{
    return m_snapshot_name_isSet;
}

bool OAICreateClusterRequest::is_snapshot_name_Valid() const{
    return m_snapshot_name_isValid;
}

qint32 OAICreateClusterRequest::getSnapshotRetentionLimit() const {
    return m_snapshot_retention_limit;
}
void OAICreateClusterRequest::setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit) {
    m_snapshot_retention_limit = snapshot_retention_limit;
    m_snapshot_retention_limit_isSet = true;
}

bool OAICreateClusterRequest::is_snapshot_retention_limit_Set() const{
    return m_snapshot_retention_limit_isSet;
}

bool OAICreateClusterRequest::is_snapshot_retention_limit_Valid() const{
    return m_snapshot_retention_limit_isValid;
}

QList OAICreateClusterRequest::getTags() const {
    return m_tags;
}
void OAICreateClusterRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClusterRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClusterRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateClusterRequest::getSnapshotWindow() const {
    return m_snapshot_window;
}
void OAICreateClusterRequest::setSnapshotWindow(const QString &snapshot_window) {
    m_snapshot_window = snapshot_window;
    m_snapshot_window_isSet = true;
}

bool OAICreateClusterRequest::is_snapshot_window_Set() const{
    return m_snapshot_window_isSet;
}

bool OAICreateClusterRequest::is_snapshot_window_Valid() const{
    return m_snapshot_window_isValid;
}

QString OAICreateClusterRequest::getAclName() const {
    return m_acl_name;
}
void OAICreateClusterRequest::setAclName(const QString &acl_name) {
    m_acl_name = acl_name;
    m_acl_name_isSet = true;
}

bool OAICreateClusterRequest::is_acl_name_Set() const{
    return m_acl_name_isSet;
}

bool OAICreateClusterRequest::is_acl_name_Valid() const{
    return m_acl_name_isValid;
}

QString OAICreateClusterRequest::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateClusterRequest::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateClusterRequest::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateClusterRequest::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAICreateClusterRequest::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAICreateClusterRequest::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAICreateClusterRequest::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAICreateClusterRequest::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

bool OAICreateClusterRequest::getDataTiering() const {
    return m_data_tiering;
}
void OAICreateClusterRequest::setDataTiering(const bool &data_tiering) {
    m_data_tiering = data_tiering;
    m_data_tiering_isSet = true;
}

bool OAICreateClusterRequest::is_data_tiering_Set() const{
    return m_data_tiering_isSet;
}

bool OAICreateClusterRequest::is_data_tiering_Valid() const{
    return m_data_tiering_isValid;
}

bool OAICreateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_shards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_replicas_per_shard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_retention_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_tiering_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_name_isValid && m_node_type_isValid && m_acl_name_isValid && true;
}

} // namespace OpenAPI
