/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteParameterGroupResponse_ParameterGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteParameterGroupResponse_ParameterGroup::OAIDeleteParameterGroupResponse_ParameterGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteParameterGroupResponse_ParameterGroup::OAIDeleteParameterGroupResponse_ParameterGroup() {
    this->initializeModel();
}

OAIDeleteParameterGroupResponse_ParameterGroup::~OAIDeleteParameterGroupResponse_ParameterGroup() {}

void OAIDeleteParameterGroupResponse_ParameterGroup::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIDeleteParameterGroupResponse_ParameterGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteParameterGroupResponse_ParameterGroup::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("Family")]);
    m_family_isSet = !json[QString("Family")].isNull() && m_family_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;
}

QString OAIDeleteParameterGroupResponse_ParameterGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteParameterGroupResponse_ParameterGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_family_isSet) {
        obj.insert(QString("Family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIDeleteParameterGroupResponse_ParameterGroup::getName() const {
    return m_name;
}
void OAIDeleteParameterGroupResponse_ParameterGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeleteParameterGroupResponse_ParameterGroup::getFamily() const {
    return m_family;
}
void OAIDeleteParameterGroupResponse_ParameterGroup::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_family_Set() const{
    return m_family_isSet;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIDeleteParameterGroupResponse_ParameterGroup::getDescription() const {
    return m_description;
}
void OAIDeleteParameterGroupResponse_ParameterGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeleteParameterGroupResponse_ParameterGroup::getArn() const {
    return m_arn;
}
void OAIDeleteParameterGroupResponse_ParameterGroup::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteParameterGroupResponse_ParameterGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
