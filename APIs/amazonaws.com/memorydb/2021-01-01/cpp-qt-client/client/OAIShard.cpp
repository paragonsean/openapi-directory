/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShard::OAIShard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShard::OAIShard() {
    this->initializeModel();
}

OAIShard::~OAIShard() {}

void OAIShard::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_number_of_nodes_isSet = false;
    m_number_of_nodes_isValid = false;
}

void OAIShard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShard::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("Slots")]);
    m_r_slots_isSet = !json[QString("Slots")].isNull() && m_r_slots_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("Nodes")]);
    m_nodes_isSet = !json[QString("Nodes")].isNull() && m_nodes_isValid;

    m_number_of_nodes_isValid = ::OpenAPI::fromJsonValue(m_number_of_nodes, json[QString("NumberOfNodes")]);
    m_number_of_nodes_isSet = !json[QString("NumberOfNodes")].isNull() && m_number_of_nodes_isValid;
}

QString OAIShard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShard::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_r_slots_isSet) {
        obj.insert(QString("Slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_nodes.isSet()) {
        obj.insert(QString("Nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_number_of_nodes_isSet) {
        obj.insert(QString("NumberOfNodes"), ::OpenAPI::toJsonValue(m_number_of_nodes));
    }
    return obj;
}

QString OAIShard::getName() const {
    return m_name;
}
void OAIShard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShard::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShard::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIShard::getStatus() const {
    return m_status;
}
void OAIShard::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShard::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShard::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIShard::getRSlots() const {
    return m_r_slots;
}
void OAIShard::setRSlots(const QString &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIShard::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIShard::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

QList OAIShard::getNodes() const {
    return m_nodes;
}
void OAIShard::setNodes(const QList &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIShard::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIShard::is_nodes_Valid() const{
    return m_nodes_isValid;
}

qint32 OAIShard::getNumberOfNodes() const {
    return m_number_of_nodes;
}
void OAIShard::setNumberOfNodes(const qint32 &number_of_nodes) {
    m_number_of_nodes = number_of_nodes;
    m_number_of_nodes_isSet = true;
}

bool OAIShard::is_number_of_nodes_Set() const{
    return m_number_of_nodes_isSet;
}

bool OAIShard::is_number_of_nodes_Valid() const{
    return m_number_of_nodes_isValid;
}

bool OAIShard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
