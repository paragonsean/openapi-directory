/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterPendingUpdates_ACLs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterPendingUpdates_ACLs::OAIClusterPendingUpdates_ACLs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterPendingUpdates_ACLs::OAIClusterPendingUpdates_ACLs() {
    this->initializeModel();
}

OAIClusterPendingUpdates_ACLs::~OAIClusterPendingUpdates_ACLs() {}

void OAIClusterPendingUpdates_ACLs::initializeModel() {

    m_aclto_apply_isSet = false;
    m_aclto_apply_isValid = false;
}

void OAIClusterPendingUpdates_ACLs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterPendingUpdates_ACLs::fromJsonObject(QJsonObject json) {

    m_aclto_apply_isValid = ::OpenAPI::fromJsonValue(m_aclto_apply, json[QString("ACLToApply")]);
    m_aclto_apply_isSet = !json[QString("ACLToApply")].isNull() && m_aclto_apply_isValid;
}

QString OAIClusterPendingUpdates_ACLs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterPendingUpdates_ACLs::asJsonObject() const {
    QJsonObject obj;
    if (m_aclto_apply_isSet) {
        obj.insert(QString("ACLToApply"), ::OpenAPI::toJsonValue(m_aclto_apply));
    }
    return obj;
}

QString OAIClusterPendingUpdates_ACLs::getAcltoApply() const {
    return m_aclto_apply;
}
void OAIClusterPendingUpdates_ACLs::setAcltoApply(const QString &aclto_apply) {
    m_aclto_apply = aclto_apply;
    m_aclto_apply_isSet = true;
}

bool OAIClusterPendingUpdates_ACLs::is_aclto_apply_Set() const{
    return m_aclto_apply_isSet;
}

bool OAIClusterPendingUpdates_ACLs::is_aclto_apply_Valid() const{
    return m_aclto_apply_isValid;
}

bool OAIClusterPendingUpdates_ACLs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aclto_apply_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterPendingUpdates_ACLs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
