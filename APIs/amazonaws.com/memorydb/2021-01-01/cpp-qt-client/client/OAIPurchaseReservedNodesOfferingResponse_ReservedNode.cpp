/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReservedNodesOfferingResponse_ReservedNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReservedNodesOfferingResponse_ReservedNode::OAIPurchaseReservedNodesOfferingResponse_ReservedNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReservedNodesOfferingResponse_ReservedNode::OAIPurchaseReservedNodesOfferingResponse_ReservedNode() {
    this->initializeModel();
}

OAIPurchaseReservedNodesOfferingResponse_ReservedNode::~OAIPurchaseReservedNodesOfferingResponse_ReservedNode() {}

void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::initializeModel() {

    m_reservation_id_isSet = false;
    m_reservation_id_isValid = false;

    m_reserved_nodes_offering_id_isSet = false;
    m_reserved_nodes_offering_id_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fixed_price_isSet = false;
    m_fixed_price_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_offering_type_isSet = false;
    m_offering_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_recurring_charges_isSet = false;
    m_recurring_charges_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::fromJsonObject(QJsonObject json) {

    m_reservation_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_id, json[QString("ReservationId")]);
    m_reservation_id_isSet = !json[QString("ReservationId")].isNull() && m_reservation_id_isValid;

    m_reserved_nodes_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_nodes_offering_id, json[QString("ReservedNodesOfferingId")]);
    m_reserved_nodes_offering_id_isSet = !json[QString("ReservedNodesOfferingId")].isNull() && m_reserved_nodes_offering_id_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_fixed_price_isValid = ::OpenAPI::fromJsonValue(m_fixed_price, json[QString("FixedPrice")]);
    m_fixed_price_isSet = !json[QString("FixedPrice")].isNull() && m_fixed_price_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("NodeCount")]);
    m_node_count_isSet = !json[QString("NodeCount")].isNull() && m_node_count_isValid;

    m_offering_type_isValid = ::OpenAPI::fromJsonValue(m_offering_type, json[QString("OfferingType")]);
    m_offering_type_isSet = !json[QString("OfferingType")].isNull() && m_offering_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_recurring_charges_isValid = ::OpenAPI::fromJsonValue(m_recurring_charges, json[QString("RecurringCharges")]);
    m_recurring_charges_isSet = !json[QString("RecurringCharges")].isNull() && m_recurring_charges_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReservedNodesOfferingResponse_ReservedNode::asJsonObject() const {
    QJsonObject obj;
    if (m_reservation_id_isSet) {
        obj.insert(QString("ReservationId"), ::OpenAPI::toJsonValue(m_reservation_id));
    }
    if (m_reserved_nodes_offering_id_isSet) {
        obj.insert(QString("ReservedNodesOfferingId"), ::OpenAPI::toJsonValue(m_reserved_nodes_offering_id));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fixed_price_isSet) {
        obj.insert(QString("FixedPrice"), ::OpenAPI::toJsonValue(m_fixed_price));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("NodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_offering_type_isSet) {
        obj.insert(QString("OfferingType"), ::OpenAPI::toJsonValue(m_offering_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_recurring_charges.isSet()) {
        obj.insert(QString("RecurringCharges"), ::OpenAPI::toJsonValue(m_recurring_charges));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getReservationId() const {
    return m_reservation_id;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setReservationId(const QString &reservation_id) {
    m_reservation_id = reservation_id;
    m_reservation_id_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_reservation_id_Set() const{
    return m_reservation_id_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_reservation_id_Valid() const{
    return m_reservation_id_isValid;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getReservedNodesOfferingId() const {
    return m_reserved_nodes_offering_id;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setReservedNodesOfferingId(const QString &reserved_nodes_offering_id) {
    m_reserved_nodes_offering_id = reserved_nodes_offering_id;
    m_reserved_nodes_offering_id_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_reserved_nodes_offering_id_Set() const{
    return m_reserved_nodes_offering_id_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_reserved_nodes_offering_id_Valid() const{
    return m_reserved_nodes_offering_id_isValid;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getNodeType() const {
    return m_node_type;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QDateTime OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getStartTime() const {
    return m_start_time;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getDuration() const {
    return m_duration;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getFixedPrice() const {
    return m_fixed_price;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setFixedPrice(const double &fixed_price) {
    m_fixed_price = fixed_price;
    m_fixed_price_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_fixed_price_Set() const{
    return m_fixed_price_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_fixed_price_Valid() const{
    return m_fixed_price_isValid;
}

qint32 OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getNodeCount() const {
    return m_node_count;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getOfferingType() const {
    return m_offering_type;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setOfferingType(const QString &offering_type) {
    m_offering_type = offering_type;
    m_offering_type_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_offering_type_Set() const{
    return m_offering_type_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_offering_type_Valid() const{
    return m_offering_type_isValid;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getState() const {
    return m_state;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_state_Valid() const{
    return m_state_isValid;
}

QList OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getRecurringCharges() const {
    return m_recurring_charges;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setRecurringCharges(const QList &recurring_charges) {
    m_recurring_charges = recurring_charges;
    m_recurring_charges_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_recurring_charges_Set() const{
    return m_recurring_charges_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_recurring_charges_Valid() const{
    return m_recurring_charges_isValid;
}

QString OAIPurchaseReservedNodesOfferingResponse_ReservedNode::getArn() const {
    return m_arn;
}
void OAIPurchaseReservedNodesOfferingResponse_ReservedNode::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reservation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_nodes_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReservedNodesOfferingResponse_ReservedNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
