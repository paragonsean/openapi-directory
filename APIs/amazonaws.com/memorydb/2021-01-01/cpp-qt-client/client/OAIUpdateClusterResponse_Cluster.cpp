/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterResponse_Cluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterResponse_Cluster::OAIUpdateClusterResponse_Cluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterResponse_Cluster::OAIUpdateClusterResponse_Cluster() {
    this->initializeModel();
}

OAIUpdateClusterResponse_Cluster::~OAIUpdateClusterResponse_Cluster() {}

void OAIUpdateClusterResponse_Cluster::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_pending_updates_isSet = false;
    m_pending_updates_isValid = false;

    m_number_of_shards_isSet = false;
    m_number_of_shards_isValid = false;

    m_shards_isSet = false;
    m_shards_isValid = false;

    m_availability_mode_isSet = false;
    m_availability_mode_isValid = false;

    m_cluster_endpoint_isSet = false;
    m_cluster_endpoint_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_engine_patch_version_isSet = false;
    m_engine_patch_version_isValid = false;

    m_parameter_group_name_isSet = false;
    m_parameter_group_name_isValid = false;

    m_parameter_group_status_isSet = false;
    m_parameter_group_status_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_subnet_group_name_isSet = false;
    m_subnet_group_name_isValid = false;

    m_tls_enabled_isSet = false;
    m_tls_enabled_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_sns_topic_status_isSet = false;
    m_sns_topic_status_isValid = false;

    m_snapshot_retention_limit_isSet = false;
    m_snapshot_retention_limit_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_snapshot_window_isSet = false;
    m_snapshot_window_isValid = false;

    m_acl_name_isSet = false;
    m_acl_name_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_data_tiering_isSet = false;
    m_data_tiering_isValid = false;
}

void OAIUpdateClusterResponse_Cluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterResponse_Cluster::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_pending_updates_isValid = ::OpenAPI::fromJsonValue(m_pending_updates, json[QString("PendingUpdates")]);
    m_pending_updates_isSet = !json[QString("PendingUpdates")].isNull() && m_pending_updates_isValid;

    m_number_of_shards_isValid = ::OpenAPI::fromJsonValue(m_number_of_shards, json[QString("NumberOfShards")]);
    m_number_of_shards_isSet = !json[QString("NumberOfShards")].isNull() && m_number_of_shards_isValid;

    m_shards_isValid = ::OpenAPI::fromJsonValue(m_shards, json[QString("Shards")]);
    m_shards_isSet = !json[QString("Shards")].isNull() && m_shards_isValid;

    m_availability_mode_isValid = ::OpenAPI::fromJsonValue(m_availability_mode, json[QString("AvailabilityMode")]);
    m_availability_mode_isSet = !json[QString("AvailabilityMode")].isNull() && m_availability_mode_isValid;

    m_cluster_endpoint_isValid = ::OpenAPI::fromJsonValue(m_cluster_endpoint, json[QString("ClusterEndpoint")]);
    m_cluster_endpoint_isSet = !json[QString("ClusterEndpoint")].isNull() && m_cluster_endpoint_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_engine_patch_version_isValid = ::OpenAPI::fromJsonValue(m_engine_patch_version, json[QString("EnginePatchVersion")]);
    m_engine_patch_version_isSet = !json[QString("EnginePatchVersion")].isNull() && m_engine_patch_version_isValid;

    m_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_name, json[QString("ParameterGroupName")]);
    m_parameter_group_name_isSet = !json[QString("ParameterGroupName")].isNull() && m_parameter_group_name_isValid;

    m_parameter_group_status_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_status, json[QString("ParameterGroupStatus")]);
    m_parameter_group_status_isSet = !json[QString("ParameterGroupStatus")].isNull() && m_parameter_group_status_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_subnet_group_name, json[QString("SubnetGroupName")]);
    m_subnet_group_name_isSet = !json[QString("SubnetGroupName")].isNull() && m_subnet_group_name_isValid;

    m_tls_enabled_isValid = ::OpenAPI::fromJsonValue(m_tls_enabled, json[QString("TLSEnabled")]);
    m_tls_enabled_isSet = !json[QString("TLSEnabled")].isNull() && m_tls_enabled_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_sns_topic_status_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_status, json[QString("SnsTopicStatus")]);
    m_sns_topic_status_isSet = !json[QString("SnsTopicStatus")].isNull() && m_sns_topic_status_isValid;

    m_snapshot_retention_limit_isValid = ::OpenAPI::fromJsonValue(m_snapshot_retention_limit, json[QString("SnapshotRetentionLimit")]);
    m_snapshot_retention_limit_isSet = !json[QString("SnapshotRetentionLimit")].isNull() && m_snapshot_retention_limit_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("MaintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("MaintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_snapshot_window_isValid = ::OpenAPI::fromJsonValue(m_snapshot_window, json[QString("SnapshotWindow")]);
    m_snapshot_window_isSet = !json[QString("SnapshotWindow")].isNull() && m_snapshot_window_isValid;

    m_acl_name_isValid = ::OpenAPI::fromJsonValue(m_acl_name, json[QString("ACLName")]);
    m_acl_name_isSet = !json[QString("ACLName")].isNull() && m_acl_name_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_data_tiering_isValid = ::OpenAPI::fromJsonValue(m_data_tiering, json[QString("DataTiering")]);
    m_data_tiering_isSet = !json[QString("DataTiering")].isNull() && m_data_tiering_isValid;
}

QString OAIUpdateClusterResponse_Cluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterResponse_Cluster::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_pending_updates.isSet()) {
        obj.insert(QString("PendingUpdates"), ::OpenAPI::toJsonValue(m_pending_updates));
    }
    if (m_number_of_shards_isSet) {
        obj.insert(QString("NumberOfShards"), ::OpenAPI::toJsonValue(m_number_of_shards));
    }
    if (m_shards.isSet()) {
        obj.insert(QString("Shards"), ::OpenAPI::toJsonValue(m_shards));
    }
    if (m_availability_mode.isSet()) {
        obj.insert(QString("AvailabilityMode"), ::OpenAPI::toJsonValue(m_availability_mode));
    }
    if (m_cluster_endpoint.isSet()) {
        obj.insert(QString("ClusterEndpoint"), ::OpenAPI::toJsonValue(m_cluster_endpoint));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_engine_patch_version_isSet) {
        obj.insert(QString("EnginePatchVersion"), ::OpenAPI::toJsonValue(m_engine_patch_version));
    }
    if (m_parameter_group_name_isSet) {
        obj.insert(QString("ParameterGroupName"), ::OpenAPI::toJsonValue(m_parameter_group_name));
    }
    if (m_parameter_group_status_isSet) {
        obj.insert(QString("ParameterGroupStatus"), ::OpenAPI::toJsonValue(m_parameter_group_status));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_subnet_group_name_isSet) {
        obj.insert(QString("SubnetGroupName"), ::OpenAPI::toJsonValue(m_subnet_group_name));
    }
    if (m_tls_enabled_isSet) {
        obj.insert(QString("TLSEnabled"), ::OpenAPI::toJsonValue(m_tls_enabled));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_sns_topic_status_isSet) {
        obj.insert(QString("SnsTopicStatus"), ::OpenAPI::toJsonValue(m_sns_topic_status));
    }
    if (m_snapshot_retention_limit_isSet) {
        obj.insert(QString("SnapshotRetentionLimit"), ::OpenAPI::toJsonValue(m_snapshot_retention_limit));
    }
    if (m_maintenance_window_isSet) {
        obj.insert(QString("MaintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_snapshot_window_isSet) {
        obj.insert(QString("SnapshotWindow"), ::OpenAPI::toJsonValue(m_snapshot_window));
    }
    if (m_acl_name_isSet) {
        obj.insert(QString("ACLName"), ::OpenAPI::toJsonValue(m_acl_name));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_data_tiering.isSet()) {
        obj.insert(QString("DataTiering"), ::OpenAPI::toJsonValue(m_data_tiering));
    }
    return obj;
}

QString OAIUpdateClusterResponse_Cluster::getName() const {
    return m_name;
}
void OAIUpdateClusterResponse_Cluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getDescription() const {
    return m_description;
}
void OAIUpdateClusterResponse_Cluster::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getStatus() const {
    return m_status;
}
void OAIUpdateClusterResponse_Cluster::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_status_Valid() const{
    return m_status_isValid;
}

OAICluster_PendingUpdates OAIUpdateClusterResponse_Cluster::getPendingUpdates() const {
    return m_pending_updates;
}
void OAIUpdateClusterResponse_Cluster::setPendingUpdates(const OAICluster_PendingUpdates &pending_updates) {
    m_pending_updates = pending_updates;
    m_pending_updates_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_pending_updates_Set() const{
    return m_pending_updates_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_pending_updates_Valid() const{
    return m_pending_updates_isValid;
}

qint32 OAIUpdateClusterResponse_Cluster::getNumberOfShards() const {
    return m_number_of_shards;
}
void OAIUpdateClusterResponse_Cluster::setNumberOfShards(const qint32 &number_of_shards) {
    m_number_of_shards = number_of_shards;
    m_number_of_shards_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_number_of_shards_Set() const{
    return m_number_of_shards_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_number_of_shards_Valid() const{
    return m_number_of_shards_isValid;
}

QList OAIUpdateClusterResponse_Cluster::getShards() const {
    return m_shards;
}
void OAIUpdateClusterResponse_Cluster::setShards(const QList &shards) {
    m_shards = shards;
    m_shards_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_shards_Set() const{
    return m_shards_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_shards_Valid() const{
    return m_shards_isValid;
}

OAIAZStatus OAIUpdateClusterResponse_Cluster::getAvailabilityMode() const {
    return m_availability_mode;
}
void OAIUpdateClusterResponse_Cluster::setAvailabilityMode(const OAIAZStatus &availability_mode) {
    m_availability_mode = availability_mode;
    m_availability_mode_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_availability_mode_Set() const{
    return m_availability_mode_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_availability_mode_Valid() const{
    return m_availability_mode_isValid;
}

OAICluster_ClusterEndpoint OAIUpdateClusterResponse_Cluster::getClusterEndpoint() const {
    return m_cluster_endpoint;
}
void OAIUpdateClusterResponse_Cluster::setClusterEndpoint(const OAICluster_ClusterEndpoint &cluster_endpoint) {
    m_cluster_endpoint = cluster_endpoint;
    m_cluster_endpoint_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_cluster_endpoint_Set() const{
    return m_cluster_endpoint_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_cluster_endpoint_Valid() const{
    return m_cluster_endpoint_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getNodeType() const {
    return m_node_type;
}
void OAIUpdateClusterResponse_Cluster::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getEngineVersion() const {
    return m_engine_version;
}
void OAIUpdateClusterResponse_Cluster::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getEnginePatchVersion() const {
    return m_engine_patch_version;
}
void OAIUpdateClusterResponse_Cluster::setEnginePatchVersion(const QString &engine_patch_version) {
    m_engine_patch_version = engine_patch_version;
    m_engine_patch_version_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_engine_patch_version_Set() const{
    return m_engine_patch_version_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_engine_patch_version_Valid() const{
    return m_engine_patch_version_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getParameterGroupName() const {
    return m_parameter_group_name;
}
void OAIUpdateClusterResponse_Cluster::setParameterGroupName(const QString &parameter_group_name) {
    m_parameter_group_name = parameter_group_name;
    m_parameter_group_name_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_parameter_group_name_Set() const{
    return m_parameter_group_name_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_parameter_group_name_Valid() const{
    return m_parameter_group_name_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getParameterGroupStatus() const {
    return m_parameter_group_status;
}
void OAIUpdateClusterResponse_Cluster::setParameterGroupStatus(const QString &parameter_group_status) {
    m_parameter_group_status = parameter_group_status;
    m_parameter_group_status_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_parameter_group_status_Set() const{
    return m_parameter_group_status_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_parameter_group_status_Valid() const{
    return m_parameter_group_status_isValid;
}

QList OAIUpdateClusterResponse_Cluster::getSecurityGroups() const {
    return m_security_groups;
}
void OAIUpdateClusterResponse_Cluster::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getSubnetGroupName() const {
    return m_subnet_group_name;
}
void OAIUpdateClusterResponse_Cluster::setSubnetGroupName(const QString &subnet_group_name) {
    m_subnet_group_name = subnet_group_name;
    m_subnet_group_name_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_subnet_group_name_Set() const{
    return m_subnet_group_name_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_subnet_group_name_Valid() const{
    return m_subnet_group_name_isValid;
}

bool OAIUpdateClusterResponse_Cluster::getTlsEnabled() const {
    return m_tls_enabled;
}
void OAIUpdateClusterResponse_Cluster::setTlsEnabled(const bool &tls_enabled) {
    m_tls_enabled = tls_enabled;
    m_tls_enabled_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_tls_enabled_Set() const{
    return m_tls_enabled_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_tls_enabled_Valid() const{
    return m_tls_enabled_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIUpdateClusterResponse_Cluster::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getArn() const {
    return m_arn;
}
void OAIUpdateClusterResponse_Cluster::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIUpdateClusterResponse_Cluster::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getSnsTopicStatus() const {
    return m_sns_topic_status;
}
void OAIUpdateClusterResponse_Cluster::setSnsTopicStatus(const QString &sns_topic_status) {
    m_sns_topic_status = sns_topic_status;
    m_sns_topic_status_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_sns_topic_status_Set() const{
    return m_sns_topic_status_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_sns_topic_status_Valid() const{
    return m_sns_topic_status_isValid;
}

qint32 OAIUpdateClusterResponse_Cluster::getSnapshotRetentionLimit() const {
    return m_snapshot_retention_limit;
}
void OAIUpdateClusterResponse_Cluster::setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit) {
    m_snapshot_retention_limit = snapshot_retention_limit;
    m_snapshot_retention_limit_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_snapshot_retention_limit_Set() const{
    return m_snapshot_retention_limit_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_snapshot_retention_limit_Valid() const{
    return m_snapshot_retention_limit_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIUpdateClusterResponse_Cluster::setMaintenanceWindow(const QString &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getSnapshotWindow() const {
    return m_snapshot_window;
}
void OAIUpdateClusterResponse_Cluster::setSnapshotWindow(const QString &snapshot_window) {
    m_snapshot_window = snapshot_window;
    m_snapshot_window_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_snapshot_window_Set() const{
    return m_snapshot_window_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_snapshot_window_Valid() const{
    return m_snapshot_window_isValid;
}

QString OAIUpdateClusterResponse_Cluster::getAclName() const {
    return m_acl_name;
}
void OAIUpdateClusterResponse_Cluster::setAclName(const QString &acl_name) {
    m_acl_name = acl_name;
    m_acl_name_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_acl_name_Set() const{
    return m_acl_name_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_acl_name_Valid() const{
    return m_acl_name_isValid;
}

bool OAIUpdateClusterResponse_Cluster::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAIUpdateClusterResponse_Cluster::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

OAIDataTieringStatus OAIUpdateClusterResponse_Cluster::getDataTiering() const {
    return m_data_tiering;
}
void OAIUpdateClusterResponse_Cluster::setDataTiering(const OAIDataTieringStatus &data_tiering) {
    m_data_tiering = data_tiering;
    m_data_tiering_isSet = true;
}

bool OAIUpdateClusterResponse_Cluster::is_data_tiering_Set() const{
    return m_data_tiering_isSet;
}

bool OAIUpdateClusterResponse_Cluster::is_data_tiering_Valid() const{
    return m_data_tiering_isValid;
}

bool OAIUpdateClusterResponse_Cluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_shards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shards.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_patch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_group_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_retention_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_tiering.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterResponse_Cluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
