/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserRequest_AuthenticationMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserRequest_AuthenticationMode::OAICreateUserRequest_AuthenticationMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserRequest_AuthenticationMode::OAICreateUserRequest_AuthenticationMode() {
    this->initializeModel();
}

OAICreateUserRequest_AuthenticationMode::~OAICreateUserRequest_AuthenticationMode() {}

void OAICreateUserRequest_AuthenticationMode::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_passwords_isSet = false;
    m_passwords_isValid = false;
}

void OAICreateUserRequest_AuthenticationMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserRequest_AuthenticationMode::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_passwords_isValid = ::OpenAPI::fromJsonValue(m_passwords, json[QString("Passwords")]);
    m_passwords_isSet = !json[QString("Passwords")].isNull() && m_passwords_isValid;
}

QString OAICreateUserRequest_AuthenticationMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserRequest_AuthenticationMode::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_passwords.isSet()) {
        obj.insert(QString("Passwords"), ::OpenAPI::toJsonValue(m_passwords));
    }
    return obj;
}

OAIInputAuthenticationType OAICreateUserRequest_AuthenticationMode::getType() const {
    return m_type;
}
void OAICreateUserRequest_AuthenticationMode::setType(const OAIInputAuthenticationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateUserRequest_AuthenticationMode::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateUserRequest_AuthenticationMode::is_type_Valid() const{
    return m_type_isValid;
}

QList OAICreateUserRequest_AuthenticationMode::getPasswords() const {
    return m_passwords;
}
void OAICreateUserRequest_AuthenticationMode::setPasswords(const QList &passwords) {
    m_passwords = passwords;
    m_passwords_isSet = true;
}

bool OAICreateUserRequest_AuthenticationMode::is_passwords_Set() const{
    return m_passwords_isSet;
}

bool OAICreateUserRequest_AuthenticationMode::is_passwords_Valid() const{
    return m_passwords_isValid;
}

bool OAICreateUserRequest_AuthenticationMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passwords.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserRequest_AuthenticationMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
