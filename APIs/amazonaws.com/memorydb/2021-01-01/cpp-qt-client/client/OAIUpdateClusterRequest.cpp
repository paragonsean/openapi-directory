/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterRequest::OAIUpdateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterRequest::OAIUpdateClusterRequest() {
    this->initializeModel();
}

OAIUpdateClusterRequest::~OAIUpdateClusterRequest() {}

void OAIUpdateClusterRequest::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_sns_topic_status_isSet = false;
    m_sns_topic_status_isValid = false;

    m_parameter_group_name_isSet = false;
    m_parameter_group_name_isValid = false;

    m_snapshot_window_isSet = false;
    m_snapshot_window_isValid = false;

    m_snapshot_retention_limit_isSet = false;
    m_snapshot_retention_limit_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_replica_configuration_isSet = false;
    m_replica_configuration_isValid = false;

    m_shard_configuration_isSet = false;
    m_shard_configuration_isValid = false;

    m_acl_name_isSet = false;
    m_acl_name_isValid = false;
}

void OAIUpdateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("MaintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("MaintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_sns_topic_status_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_status, json[QString("SnsTopicStatus")]);
    m_sns_topic_status_isSet = !json[QString("SnsTopicStatus")].isNull() && m_sns_topic_status_isValid;

    m_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_name, json[QString("ParameterGroupName")]);
    m_parameter_group_name_isSet = !json[QString("ParameterGroupName")].isNull() && m_parameter_group_name_isValid;

    m_snapshot_window_isValid = ::OpenAPI::fromJsonValue(m_snapshot_window, json[QString("SnapshotWindow")]);
    m_snapshot_window_isSet = !json[QString("SnapshotWindow")].isNull() && m_snapshot_window_isValid;

    m_snapshot_retention_limit_isValid = ::OpenAPI::fromJsonValue(m_snapshot_retention_limit, json[QString("SnapshotRetentionLimit")]);
    m_snapshot_retention_limit_isSet = !json[QString("SnapshotRetentionLimit")].isNull() && m_snapshot_retention_limit_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_replica_configuration_isValid = ::OpenAPI::fromJsonValue(m_replica_configuration, json[QString("ReplicaConfiguration")]);
    m_replica_configuration_isSet = !json[QString("ReplicaConfiguration")].isNull() && m_replica_configuration_isValid;

    m_shard_configuration_isValid = ::OpenAPI::fromJsonValue(m_shard_configuration, json[QString("ShardConfiguration")]);
    m_shard_configuration_isSet = !json[QString("ShardConfiguration")].isNull() && m_shard_configuration_isValid;

    m_acl_name_isValid = ::OpenAPI::fromJsonValue(m_acl_name, json[QString("ACLName")]);
    m_acl_name_isSet = !json[QString("ACLName")].isNull() && m_acl_name_isValid;
}

QString OAIUpdateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_maintenance_window_isSet) {
        obj.insert(QString("MaintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_sns_topic_status_isSet) {
        obj.insert(QString("SnsTopicStatus"), ::OpenAPI::toJsonValue(m_sns_topic_status));
    }
    if (m_parameter_group_name_isSet) {
        obj.insert(QString("ParameterGroupName"), ::OpenAPI::toJsonValue(m_parameter_group_name));
    }
    if (m_snapshot_window_isSet) {
        obj.insert(QString("SnapshotWindow"), ::OpenAPI::toJsonValue(m_snapshot_window));
    }
    if (m_snapshot_retention_limit_isSet) {
        obj.insert(QString("SnapshotRetentionLimit"), ::OpenAPI::toJsonValue(m_snapshot_retention_limit));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_replica_configuration.isSet()) {
        obj.insert(QString("ReplicaConfiguration"), ::OpenAPI::toJsonValue(m_replica_configuration));
    }
    if (m_shard_configuration.isSet()) {
        obj.insert(QString("ShardConfiguration"), ::OpenAPI::toJsonValue(m_shard_configuration));
    }
    if (m_acl_name_isSet) {
        obj.insert(QString("ACLName"), ::OpenAPI::toJsonValue(m_acl_name));
    }
    return obj;
}

QString OAIUpdateClusterRequest::getClusterName() const {
    return m_cluster_name;
}
void OAIUpdateClusterRequest::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIUpdateClusterRequest::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIUpdateClusterRequest::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIUpdateClusterRequest::getDescription() const {
    return m_description;
}
void OAIUpdateClusterRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateClusterRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateClusterRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateClusterRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIUpdateClusterRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIUpdateClusterRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIUpdateClusterRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIUpdateClusterRequest::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIUpdateClusterRequest::setMaintenanceWindow(const QString &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIUpdateClusterRequest::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIUpdateClusterRequest::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

QString OAIUpdateClusterRequest::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIUpdateClusterRequest::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIUpdateClusterRequest::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIUpdateClusterRequest::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QString OAIUpdateClusterRequest::getSnsTopicStatus() const {
    return m_sns_topic_status;
}
void OAIUpdateClusterRequest::setSnsTopicStatus(const QString &sns_topic_status) {
    m_sns_topic_status = sns_topic_status;
    m_sns_topic_status_isSet = true;
}

bool OAIUpdateClusterRequest::is_sns_topic_status_Set() const{
    return m_sns_topic_status_isSet;
}

bool OAIUpdateClusterRequest::is_sns_topic_status_Valid() const{
    return m_sns_topic_status_isValid;
}

QString OAIUpdateClusterRequest::getParameterGroupName() const {
    return m_parameter_group_name;
}
void OAIUpdateClusterRequest::setParameterGroupName(const QString &parameter_group_name) {
    m_parameter_group_name = parameter_group_name;
    m_parameter_group_name_isSet = true;
}

bool OAIUpdateClusterRequest::is_parameter_group_name_Set() const{
    return m_parameter_group_name_isSet;
}

bool OAIUpdateClusterRequest::is_parameter_group_name_Valid() const{
    return m_parameter_group_name_isValid;
}

QString OAIUpdateClusterRequest::getSnapshotWindow() const {
    return m_snapshot_window;
}
void OAIUpdateClusterRequest::setSnapshotWindow(const QString &snapshot_window) {
    m_snapshot_window = snapshot_window;
    m_snapshot_window_isSet = true;
}

bool OAIUpdateClusterRequest::is_snapshot_window_Set() const{
    return m_snapshot_window_isSet;
}

bool OAIUpdateClusterRequest::is_snapshot_window_Valid() const{
    return m_snapshot_window_isValid;
}

qint32 OAIUpdateClusterRequest::getSnapshotRetentionLimit() const {
    return m_snapshot_retention_limit;
}
void OAIUpdateClusterRequest::setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit) {
    m_snapshot_retention_limit = snapshot_retention_limit;
    m_snapshot_retention_limit_isSet = true;
}

bool OAIUpdateClusterRequest::is_snapshot_retention_limit_Set() const{
    return m_snapshot_retention_limit_isSet;
}

bool OAIUpdateClusterRequest::is_snapshot_retention_limit_Valid() const{
    return m_snapshot_retention_limit_isValid;
}

QString OAIUpdateClusterRequest::getNodeType() const {
    return m_node_type;
}
void OAIUpdateClusterRequest::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIUpdateClusterRequest::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIUpdateClusterRequest::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIUpdateClusterRequest::getEngineVersion() const {
    return m_engine_version;
}
void OAIUpdateClusterRequest::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIUpdateClusterRequest::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIUpdateClusterRequest::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

OAIUpdateClusterRequest_ReplicaConfiguration OAIUpdateClusterRequest::getReplicaConfiguration() const {
    return m_replica_configuration;
}
void OAIUpdateClusterRequest::setReplicaConfiguration(const OAIUpdateClusterRequest_ReplicaConfiguration &replica_configuration) {
    m_replica_configuration = replica_configuration;
    m_replica_configuration_isSet = true;
}

bool OAIUpdateClusterRequest::is_replica_configuration_Set() const{
    return m_replica_configuration_isSet;
}

bool OAIUpdateClusterRequest::is_replica_configuration_Valid() const{
    return m_replica_configuration_isValid;
}

OAIUpdateClusterRequest_ShardConfiguration OAIUpdateClusterRequest::getShardConfiguration() const {
    return m_shard_configuration;
}
void OAIUpdateClusterRequest::setShardConfiguration(const OAIUpdateClusterRequest_ShardConfiguration &shard_configuration) {
    m_shard_configuration = shard_configuration;
    m_shard_configuration_isSet = true;
}

bool OAIUpdateClusterRequest::is_shard_configuration_Set() const{
    return m_shard_configuration_isSet;
}

bool OAIUpdateClusterRequest::is_shard_configuration_Valid() const{
    return m_shard_configuration_isValid;
}

QString OAIUpdateClusterRequest::getAclName() const {
    return m_acl_name;
}
void OAIUpdateClusterRequest::setAclName(const QString &acl_name) {
    m_acl_name = acl_name;
    m_acl_name_isSet = true;
}

bool OAIUpdateClusterRequest::is_acl_name_Set() const{
    return m_acl_name_isSet;
}

bool OAIUpdateClusterRequest::is_acl_name_Valid() const{
    return m_acl_name_isValid;
}

bool OAIUpdateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_retention_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_name_isValid && true;
}

} // namespace OpenAPI
