/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserResponse_User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserResponse_User::OAICreateUserResponse_User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserResponse_User::OAICreateUserResponse_User() {
    this->initializeModel();
}

OAICreateUserResponse_User::~OAICreateUserResponse_User() {}

void OAICreateUserResponse_User::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_access_string_isSet = false;
    m_access_string_isValid = false;

    m_acl_names_isSet = false;
    m_acl_names_isValid = false;

    m_minimum_engine_version_isSet = false;
    m_minimum_engine_version_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAICreateUserResponse_User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserResponse_User::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_access_string_isValid = ::OpenAPI::fromJsonValue(m_access_string, json[QString("AccessString")]);
    m_access_string_isSet = !json[QString("AccessString")].isNull() && m_access_string_isValid;

    m_acl_names_isValid = ::OpenAPI::fromJsonValue(m_acl_names, json[QString("ACLNames")]);
    m_acl_names_isSet = !json[QString("ACLNames")].isNull() && m_acl_names_isValid;

    m_minimum_engine_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_engine_version, json[QString("MinimumEngineVersion")]);
    m_minimum_engine_version_isSet = !json[QString("MinimumEngineVersion")].isNull() && m_minimum_engine_version_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("Authentication")]);
    m_authentication_isSet = !json[QString("Authentication")].isNull() && m_authentication_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;
}

QString OAICreateUserResponse_User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserResponse_User::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_access_string_isSet) {
        obj.insert(QString("AccessString"), ::OpenAPI::toJsonValue(m_access_string));
    }
    if (m_acl_names.isSet()) {
        obj.insert(QString("ACLNames"), ::OpenAPI::toJsonValue(m_acl_names));
    }
    if (m_minimum_engine_version_isSet) {
        obj.insert(QString("MinimumEngineVersion"), ::OpenAPI::toJsonValue(m_minimum_engine_version));
    }
    if (m_authentication.isSet()) {
        obj.insert(QString("Authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAICreateUserResponse_User::getName() const {
    return m_name;
}
void OAICreateUserResponse_User::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateUserResponse_User::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateUserResponse_User::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateUserResponse_User::getStatus() const {
    return m_status;
}
void OAICreateUserResponse_User::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateUserResponse_User::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateUserResponse_User::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateUserResponse_User::getAccessString() const {
    return m_access_string;
}
void OAICreateUserResponse_User::setAccessString(const QString &access_string) {
    m_access_string = access_string;
    m_access_string_isSet = true;
}

bool OAICreateUserResponse_User::is_access_string_Set() const{
    return m_access_string_isSet;
}

bool OAICreateUserResponse_User::is_access_string_Valid() const{
    return m_access_string_isValid;
}

QList OAICreateUserResponse_User::getAclNames() const {
    return m_acl_names;
}
void OAICreateUserResponse_User::setAclNames(const QList &acl_names) {
    m_acl_names = acl_names;
    m_acl_names_isSet = true;
}

bool OAICreateUserResponse_User::is_acl_names_Set() const{
    return m_acl_names_isSet;
}

bool OAICreateUserResponse_User::is_acl_names_Valid() const{
    return m_acl_names_isValid;
}

QString OAICreateUserResponse_User::getMinimumEngineVersion() const {
    return m_minimum_engine_version;
}
void OAICreateUserResponse_User::setMinimumEngineVersion(const QString &minimum_engine_version) {
    m_minimum_engine_version = minimum_engine_version;
    m_minimum_engine_version_isSet = true;
}

bool OAICreateUserResponse_User::is_minimum_engine_version_Set() const{
    return m_minimum_engine_version_isSet;
}

bool OAICreateUserResponse_User::is_minimum_engine_version_Valid() const{
    return m_minimum_engine_version_isValid;
}

OAIUser_Authentication OAICreateUserResponse_User::getAuthentication() const {
    return m_authentication;
}
void OAICreateUserResponse_User::setAuthentication(const OAIUser_Authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAICreateUserResponse_User::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAICreateUserResponse_User::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAICreateUserResponse_User::getArn() const {
    return m_arn;
}
void OAICreateUserResponse_User::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateUserResponse_User::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateUserResponse_User::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAICreateUserResponse_User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserResponse_User::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
