/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateACLRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateACLRequest::OAICreateACLRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateACLRequest::OAICreateACLRequest() {
    this->initializeModel();
}

OAICreateACLRequest::~OAICreateACLRequest() {}

void OAICreateACLRequest::initializeModel() {

    m_acl_name_isSet = false;
    m_acl_name_isValid = false;

    m_user_names_isSet = false;
    m_user_names_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateACLRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateACLRequest::fromJsonObject(QJsonObject json) {

    m_acl_name_isValid = ::OpenAPI::fromJsonValue(m_acl_name, json[QString("ACLName")]);
    m_acl_name_isSet = !json[QString("ACLName")].isNull() && m_acl_name_isValid;

    m_user_names_isValid = ::OpenAPI::fromJsonValue(m_user_names, json[QString("UserNames")]);
    m_user_names_isSet = !json[QString("UserNames")].isNull() && m_user_names_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateACLRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateACLRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_acl_name_isSet) {
        obj.insert(QString("ACLName"), ::OpenAPI::toJsonValue(m_acl_name));
    }
    if (m_user_names.isSet()) {
        obj.insert(QString("UserNames"), ::OpenAPI::toJsonValue(m_user_names));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateACLRequest::getAclName() const {
    return m_acl_name;
}
void OAICreateACLRequest::setAclName(const QString &acl_name) {
    m_acl_name = acl_name;
    m_acl_name_isSet = true;
}

bool OAICreateACLRequest::is_acl_name_Set() const{
    return m_acl_name_isSet;
}

bool OAICreateACLRequest::is_acl_name_Valid() const{
    return m_acl_name_isValid;
}

QList OAICreateACLRequest::getUserNames() const {
    return m_user_names;
}
void OAICreateACLRequest::setUserNames(const QList &user_names) {
    m_user_names = user_names;
    m_user_names_isSet = true;
}

bool OAICreateACLRequest::is_user_names_Set() const{
    return m_user_names_isSet;
}

bool OAICreateACLRequest::is_user_names_Valid() const{
    return m_user_names_isValid;
}

QList OAICreateACLRequest::getTags() const {
    return m_tags;
}
void OAICreateACLRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateACLRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateACLRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateACLRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateACLRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acl_name_isValid && true;
}

} // namespace OpenAPI
