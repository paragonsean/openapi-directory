/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngineVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngineVersionInfo::OAIEngineVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngineVersionInfo::OAIEngineVersionInfo() {
    this->initializeModel();
}

OAIEngineVersionInfo::~OAIEngineVersionInfo() {}

void OAIEngineVersionInfo::initializeModel() {

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_engine_patch_version_isSet = false;
    m_engine_patch_version_isValid = false;

    m_parameter_group_family_isSet = false;
    m_parameter_group_family_isValid = false;
}

void OAIEngineVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEngineVersionInfo::fromJsonObject(QJsonObject json) {

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_engine_patch_version_isValid = ::OpenAPI::fromJsonValue(m_engine_patch_version, json[QString("EnginePatchVersion")]);
    m_engine_patch_version_isSet = !json[QString("EnginePatchVersion")].isNull() && m_engine_patch_version_isValid;

    m_parameter_group_family_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_family, json[QString("ParameterGroupFamily")]);
    m_parameter_group_family_isSet = !json[QString("ParameterGroupFamily")].isNull() && m_parameter_group_family_isValid;
}

QString OAIEngineVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEngineVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_engine_patch_version_isSet) {
        obj.insert(QString("EnginePatchVersion"), ::OpenAPI::toJsonValue(m_engine_patch_version));
    }
    if (m_parameter_group_family_isSet) {
        obj.insert(QString("ParameterGroupFamily"), ::OpenAPI::toJsonValue(m_parameter_group_family));
    }
    return obj;
}

QString OAIEngineVersionInfo::getEngineVersion() const {
    return m_engine_version;
}
void OAIEngineVersionInfo::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIEngineVersionInfo::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIEngineVersionInfo::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIEngineVersionInfo::getEnginePatchVersion() const {
    return m_engine_patch_version;
}
void OAIEngineVersionInfo::setEnginePatchVersion(const QString &engine_patch_version) {
    m_engine_patch_version = engine_patch_version;
    m_engine_patch_version_isSet = true;
}

bool OAIEngineVersionInfo::is_engine_patch_version_Set() const{
    return m_engine_patch_version_isSet;
}

bool OAIEngineVersionInfo::is_engine_patch_version_Valid() const{
    return m_engine_patch_version_isValid;
}

QString OAIEngineVersionInfo::getParameterGroupFamily() const {
    return m_parameter_group_family;
}
void OAIEngineVersionInfo::setParameterGroupFamily(const QString &parameter_group_family) {
    m_parameter_group_family = parameter_group_family;
    m_parameter_group_family_isSet = true;
}

bool OAIEngineVersionInfo::is_parameter_group_family_Set() const{
    return m_parameter_group_family_isSet;
}

bool OAIEngineVersionInfo::is_parameter_group_family_Valid() const{
    return m_parameter_group_family_isValid;
}

bool OAIEngineVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_patch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_group_family_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEngineVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
