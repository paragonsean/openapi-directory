/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateClusterRequest.h
 *
 * 
 */

#ifndef OAIUpdateClusterRequest_H
#define OAIUpdateClusterRequest_H

#include <QJsonObject>

#include "OAIUpdateClusterRequest_ReplicaConfiguration.h"
#include "OAIUpdateClusterRequest_ShardConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateClusterRequest_ReplicaConfiguration;
class OAIUpdateClusterRequest_ShardConfiguration;

class OAIUpdateClusterRequest : public OAIObject {
public:
    OAIUpdateClusterRequest();
    OAIUpdateClusterRequest(QString json);
    ~OAIUpdateClusterRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QString getMaintenanceWindow() const;
    void setMaintenanceWindow(const QString &maintenance_window);
    bool is_maintenance_window_Set() const;
    bool is_maintenance_window_Valid() const;

    QString getSnsTopicArn() const;
    void setSnsTopicArn(const QString &sns_topic_arn);
    bool is_sns_topic_arn_Set() const;
    bool is_sns_topic_arn_Valid() const;

    QString getSnsTopicStatus() const;
    void setSnsTopicStatus(const QString &sns_topic_status);
    bool is_sns_topic_status_Set() const;
    bool is_sns_topic_status_Valid() const;

    QString getParameterGroupName() const;
    void setParameterGroupName(const QString &parameter_group_name);
    bool is_parameter_group_name_Set() const;
    bool is_parameter_group_name_Valid() const;

    QString getSnapshotWindow() const;
    void setSnapshotWindow(const QString &snapshot_window);
    bool is_snapshot_window_Set() const;
    bool is_snapshot_window_Valid() const;

    qint32 getSnapshotRetentionLimit() const;
    void setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit);
    bool is_snapshot_retention_limit_Set() const;
    bool is_snapshot_retention_limit_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    OAIUpdateClusterRequest_ReplicaConfiguration getReplicaConfiguration() const;
    void setReplicaConfiguration(const OAIUpdateClusterRequest_ReplicaConfiguration &replica_configuration);
    bool is_replica_configuration_Set() const;
    bool is_replica_configuration_Valid() const;

    OAIUpdateClusterRequest_ShardConfiguration getShardConfiguration() const;
    void setShardConfiguration(const OAIUpdateClusterRequest_ShardConfiguration &shard_configuration);
    bool is_shard_configuration_Set() const;
    bool is_shard_configuration_Valid() const;

    QString getAclName() const;
    void setAclName(const QString &acl_name);
    bool is_acl_name_Set() const;
    bool is_acl_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QString m_maintenance_window;
    bool m_maintenance_window_isSet;
    bool m_maintenance_window_isValid;

    QString m_sns_topic_arn;
    bool m_sns_topic_arn_isSet;
    bool m_sns_topic_arn_isValid;

    QString m_sns_topic_status;
    bool m_sns_topic_status_isSet;
    bool m_sns_topic_status_isValid;

    QString m_parameter_group_name;
    bool m_parameter_group_name_isSet;
    bool m_parameter_group_name_isValid;

    QString m_snapshot_window;
    bool m_snapshot_window_isSet;
    bool m_snapshot_window_isValid;

    qint32 m_snapshot_retention_limit;
    bool m_snapshot_retention_limit_isSet;
    bool m_snapshot_retention_limit_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    OAIUpdateClusterRequest_ReplicaConfiguration m_replica_configuration;
    bool m_replica_configuration_isSet;
    bool m_replica_configuration_isValid;

    OAIUpdateClusterRequest_ShardConfiguration m_shard_configuration;
    bool m_shard_configuration_isSet;
    bool m_shard_configuration_isValid;

    QString m_acl_name;
    bool m_acl_name_isSet;
    bool m_acl_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateClusterRequest)

#endif // OAIUpdateClusterRequest_H
