/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICluster.h
 *
 * Contains all of the attributes of a specific cluster.
 */

#ifndef OAICluster_H
#define OAICluster_H

#include <QJsonObject>

#include "OAIAZStatus.h"
#include "OAICluster_ClusterEndpoint.h"
#include "OAICluster_PendingUpdates.h"
#include "OAIDataTieringStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICluster_PendingUpdates;
class OAICluster_ClusterEndpoint;

class OAICluster : public OAIObject {
public:
    OAICluster();
    OAICluster(QString json);
    ~OAICluster() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICluster_PendingUpdates getPendingUpdates() const;
    void setPendingUpdates(const OAICluster_PendingUpdates &pending_updates);
    bool is_pending_updates_Set() const;
    bool is_pending_updates_Valid() const;

    qint32 getNumberOfShards() const;
    void setNumberOfShards(const qint32 &number_of_shards);
    bool is_number_of_shards_Set() const;
    bool is_number_of_shards_Valid() const;

    QList getShards() const;
    void setShards(const QList &shards);
    bool is_shards_Set() const;
    bool is_shards_Valid() const;

    OAIAZStatus getAvailabilityMode() const;
    void setAvailabilityMode(const OAIAZStatus &availability_mode);
    bool is_availability_mode_Set() const;
    bool is_availability_mode_Valid() const;

    OAICluster_ClusterEndpoint getClusterEndpoint() const;
    void setClusterEndpoint(const OAICluster_ClusterEndpoint &cluster_endpoint);
    bool is_cluster_endpoint_Set() const;
    bool is_cluster_endpoint_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getEnginePatchVersion() const;
    void setEnginePatchVersion(const QString &engine_patch_version);
    bool is_engine_patch_version_Set() const;
    bool is_engine_patch_version_Valid() const;

    QString getParameterGroupName() const;
    void setParameterGroupName(const QString &parameter_group_name);
    bool is_parameter_group_name_Set() const;
    bool is_parameter_group_name_Valid() const;

    QString getParameterGroupStatus() const;
    void setParameterGroupStatus(const QString &parameter_group_status);
    bool is_parameter_group_status_Set() const;
    bool is_parameter_group_status_Valid() const;

    QList getSecurityGroups() const;
    void setSecurityGroups(const QList &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    QString getSubnetGroupName() const;
    void setSubnetGroupName(const QString &subnet_group_name);
    bool is_subnet_group_name_Set() const;
    bool is_subnet_group_name_Valid() const;

    bool getTlsEnabled() const;
    void setTlsEnabled(const bool &tls_enabled);
    bool is_tls_enabled_Set() const;
    bool is_tls_enabled_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getSnsTopicArn() const;
    void setSnsTopicArn(const QString &sns_topic_arn);
    bool is_sns_topic_arn_Set() const;
    bool is_sns_topic_arn_Valid() const;

    QString getSnsTopicStatus() const;
    void setSnsTopicStatus(const QString &sns_topic_status);
    bool is_sns_topic_status_Set() const;
    bool is_sns_topic_status_Valid() const;

    qint32 getSnapshotRetentionLimit() const;
    void setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit);
    bool is_snapshot_retention_limit_Set() const;
    bool is_snapshot_retention_limit_Valid() const;

    QString getMaintenanceWindow() const;
    void setMaintenanceWindow(const QString &maintenance_window);
    bool is_maintenance_window_Set() const;
    bool is_maintenance_window_Valid() const;

    QString getSnapshotWindow() const;
    void setSnapshotWindow(const QString &snapshot_window);
    bool is_snapshot_window_Set() const;
    bool is_snapshot_window_Valid() const;

    QString getAclName() const;
    void setAclName(const QString &acl_name);
    bool is_acl_name_Set() const;
    bool is_acl_name_Valid() const;

    bool getAutoMinorVersionUpgrade() const;
    void setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade);
    bool is_auto_minor_version_upgrade_Set() const;
    bool is_auto_minor_version_upgrade_Valid() const;

    OAIDataTieringStatus getDataTiering() const;
    void setDataTiering(const OAIDataTieringStatus &data_tiering);
    bool is_data_tiering_Set() const;
    bool is_data_tiering_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICluster_PendingUpdates m_pending_updates;
    bool m_pending_updates_isSet;
    bool m_pending_updates_isValid;

    qint32 m_number_of_shards;
    bool m_number_of_shards_isSet;
    bool m_number_of_shards_isValid;

    QList m_shards;
    bool m_shards_isSet;
    bool m_shards_isValid;

    OAIAZStatus m_availability_mode;
    bool m_availability_mode_isSet;
    bool m_availability_mode_isValid;

    OAICluster_ClusterEndpoint m_cluster_endpoint;
    bool m_cluster_endpoint_isSet;
    bool m_cluster_endpoint_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_engine_patch_version;
    bool m_engine_patch_version_isSet;
    bool m_engine_patch_version_isValid;

    QString m_parameter_group_name;
    bool m_parameter_group_name_isSet;
    bool m_parameter_group_name_isValid;

    QString m_parameter_group_status;
    bool m_parameter_group_status_isSet;
    bool m_parameter_group_status_isValid;

    QList m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    QString m_subnet_group_name;
    bool m_subnet_group_name_isSet;
    bool m_subnet_group_name_isValid;

    bool m_tls_enabled;
    bool m_tls_enabled_isSet;
    bool m_tls_enabled_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_sns_topic_arn;
    bool m_sns_topic_arn_isSet;
    bool m_sns_topic_arn_isValid;

    QString m_sns_topic_status;
    bool m_sns_topic_status_isSet;
    bool m_sns_topic_status_isValid;

    qint32 m_snapshot_retention_limit;
    bool m_snapshot_retention_limit_isSet;
    bool m_snapshot_retention_limit_isValid;

    QString m_maintenance_window;
    bool m_maintenance_window_isSet;
    bool m_maintenance_window_isValid;

    QString m_snapshot_window;
    bool m_snapshot_window_isSet;
    bool m_snapshot_window_isValid;

    QString m_acl_name;
    bool m_acl_name_isSet;
    bool m_acl_name_isValid;

    bool m_auto_minor_version_upgrade;
    bool m_auto_minor_version_upgrade_isSet;
    bool m_auto_minor_version_upgrade_isValid;

    OAIDataTieringStatus m_data_tiering;
    bool m_data_tiering_isSet;
    bool m_data_tiering_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICluster)

#endif // OAICluster_H
