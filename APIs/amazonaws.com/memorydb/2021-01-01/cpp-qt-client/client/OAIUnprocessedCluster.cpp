/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnprocessedCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnprocessedCluster::OAIUnprocessedCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnprocessedCluster::OAIUnprocessedCluster() {
    this->initializeModel();
}

OAIUnprocessedCluster::~OAIUnprocessedCluster() {}

void OAIUnprocessedCluster::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIUnprocessedCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnprocessedCluster::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("ErrorType")]);
    m_error_type_isSet = !json[QString("ErrorType")].isNull() && m_error_type_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;
}

QString OAIUnprocessedCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnprocessedCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("ErrorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

QString OAIUnprocessedCluster::getClusterName() const {
    return m_cluster_name;
}
void OAIUnprocessedCluster::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIUnprocessedCluster::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIUnprocessedCluster::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIUnprocessedCluster::getErrorType() const {
    return m_error_type;
}
void OAIUnprocessedCluster::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIUnprocessedCluster::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIUnprocessedCluster::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIUnprocessedCluster::getErrorMessage() const {
    return m_error_message;
}
void OAIUnprocessedCluster::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUnprocessedCluster::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUnprocessedCluster::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIUnprocessedCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnprocessedCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
