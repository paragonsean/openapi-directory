/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteSubnetGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteSubnetGroupResponse::OAIDeleteSubnetGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteSubnetGroupResponse::OAIDeleteSubnetGroupResponse() {
    this->initializeModel();
}

OAIDeleteSubnetGroupResponse::~OAIDeleteSubnetGroupResponse() {}

void OAIDeleteSubnetGroupResponse::initializeModel() {

    m_subnet_group_isSet = false;
    m_subnet_group_isValid = false;
}

void OAIDeleteSubnetGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteSubnetGroupResponse::fromJsonObject(QJsonObject json) {

    m_subnet_group_isValid = ::OpenAPI::fromJsonValue(m_subnet_group, json[QString("SubnetGroup")]);
    m_subnet_group_isSet = !json[QString("SubnetGroup")].isNull() && m_subnet_group_isValid;
}

QString OAIDeleteSubnetGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteSubnetGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_group.isSet()) {
        obj.insert(QString("SubnetGroup"), ::OpenAPI::toJsonValue(m_subnet_group));
    }
    return obj;
}

OAIDeleteSubnetGroupResponse_SubnetGroup OAIDeleteSubnetGroupResponse::getSubnetGroup() const {
    return m_subnet_group;
}
void OAIDeleteSubnetGroupResponse::setSubnetGroup(const OAIDeleteSubnetGroupResponse_SubnetGroup &subnet_group) {
    m_subnet_group = subnet_group;
    m_subnet_group_isSet = true;
}

bool OAIDeleteSubnetGroupResponse::is_subnet_group_Set() const{
    return m_subnet_group_isSet;
}

bool OAIDeleteSubnetGroupResponse::is_subnet_group_Valid() const{
    return m_subnet_group_isValid;
}

bool OAIDeleteSubnetGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteSubnetGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
