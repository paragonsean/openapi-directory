/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClusterConfiguration.h
 *
 * A list of cluster configuration options. 
 */

#ifndef OAIClusterConfiguration_H
#define OAIClusterConfiguration_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIClusterConfiguration : public OAIObject {
public:
    OAIClusterConfiguration();
    OAIClusterConfiguration(QString json);
    ~OAIClusterConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getMaintenanceWindow() const;
    void setMaintenanceWindow(const QString &maintenance_window);
    bool is_maintenance_window_Set() const;
    bool is_maintenance_window_Valid() const;

    QString getTopicArn() const;
    void setTopicArn(const QString &topic_arn);
    bool is_topic_arn_Set() const;
    bool is_topic_arn_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getParameterGroupName() const;
    void setParameterGroupName(const QString &parameter_group_name);
    bool is_parameter_group_name_Set() const;
    bool is_parameter_group_name_Valid() const;

    QString getSubnetGroupName() const;
    void setSubnetGroupName(const QString &subnet_group_name);
    bool is_subnet_group_name_Set() const;
    bool is_subnet_group_name_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    qint32 getSnapshotRetentionLimit() const;
    void setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit);
    bool is_snapshot_retention_limit_Set() const;
    bool is_snapshot_retention_limit_Valid() const;

    QString getSnapshotWindow() const;
    void setSnapshotWindow(const QString &snapshot_window);
    bool is_snapshot_window_Set() const;
    bool is_snapshot_window_Valid() const;

    qint32 getNumShards() const;
    void setNumShards(const qint32 &num_shards);
    bool is_num_shards_Set() const;
    bool is_num_shards_Valid() const;

    QList getShards() const;
    void setShards(const QList &shards);
    bool is_shards_Set() const;
    bool is_shards_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_maintenance_window;
    bool m_maintenance_window_isSet;
    bool m_maintenance_window_isValid;

    QString m_topic_arn;
    bool m_topic_arn_isSet;
    bool m_topic_arn_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_parameter_group_name;
    bool m_parameter_group_name_isSet;
    bool m_parameter_group_name_isValid;

    QString m_subnet_group_name;
    bool m_subnet_group_name_isSet;
    bool m_subnet_group_name_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    qint32 m_snapshot_retention_limit;
    bool m_snapshot_retention_limit_isSet;
    bool m_snapshot_retention_limit_isValid;

    QString m_snapshot_window;
    bool m_snapshot_window_isSet;
    bool m_snapshot_window_isValid;

    qint32 m_num_shards;
    bool m_num_shards_isSet;
    bool m_num_shards_isValid;

    QList m_shards;
    bool m_shards_isSet;
    bool m_shards_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClusterConfiguration)

#endif // OAIClusterConfiguration_H
