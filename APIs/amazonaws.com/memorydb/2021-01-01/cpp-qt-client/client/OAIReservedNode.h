/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservedNode.h
 *
 * Represents the output of a &lt;code&gt;PurchaseReservedNodesOffering&lt;/code&gt; operation.
 */

#ifndef OAIReservedNode_H
#define OAIReservedNode_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservedNode : public OAIObject {
public:
    OAIReservedNode();
    OAIReservedNode(QString json);
    ~OAIReservedNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReservationId() const;
    void setReservationId(const QString &reservation_id);
    bool is_reservation_id_Set() const;
    bool is_reservation_id_Valid() const;

    QString getReservedNodesOfferingId() const;
    void setReservedNodesOfferingId(const QString &reserved_nodes_offering_id);
    bool is_reserved_nodes_offering_id_Set() const;
    bool is_reserved_nodes_offering_id_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    qint32 getNodeCount() const;
    void setNodeCount(const qint32 &node_count);
    bool is_node_count_Set() const;
    bool is_node_count_Valid() const;

    QString getOfferingType() const;
    void setOfferingType(const QString &offering_type);
    bool is_offering_type_Set() const;
    bool is_offering_type_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList getRecurringCharges() const;
    void setRecurringCharges(const QList &recurring_charges);
    bool is_recurring_charges_Set() const;
    bool is_recurring_charges_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reservation_id;
    bool m_reservation_id_isSet;
    bool m_reservation_id_isValid;

    QString m_reserved_nodes_offering_id;
    bool m_reserved_nodes_offering_id_isSet;
    bool m_reserved_nodes_offering_id_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    qint32 m_node_count;
    bool m_node_count_isSet;
    bool m_node_count_isValid;

    QString m_offering_type;
    bool m_offering_type_isSet;
    bool m_offering_type_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList m_recurring_charges;
    bool m_recurring_charges_isSet;
    bool m_recurring_charges_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservedNode)

#endif // OAIReservedNode_H
