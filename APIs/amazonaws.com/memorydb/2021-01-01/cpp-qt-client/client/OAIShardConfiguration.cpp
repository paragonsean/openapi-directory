/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShardConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShardConfiguration::OAIShardConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShardConfiguration::OAIShardConfiguration() {
    this->initializeModel();
}

OAIShardConfiguration::~OAIShardConfiguration() {}

void OAIShardConfiguration::initializeModel() {

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;
}

void OAIShardConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShardConfiguration::fromJsonObject(QJsonObject json) {

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("Slots")]);
    m_r_slots_isSet = !json[QString("Slots")].isNull() && m_r_slots_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("ReplicaCount")]);
    m_replica_count_isSet = !json[QString("ReplicaCount")].isNull() && m_replica_count_isValid;
}

QString OAIShardConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShardConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_r_slots_isSet) {
        obj.insert(QString("Slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("ReplicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    return obj;
}

QString OAIShardConfiguration::getRSlots() const {
    return m_r_slots;
}
void OAIShardConfiguration::setRSlots(const QString &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIShardConfiguration::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIShardConfiguration::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

qint32 OAIShardConfiguration::getReplicaCount() const {
    return m_replica_count;
}
void OAIShardConfiguration::setReplicaCount(const qint32 &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAIShardConfiguration::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAIShardConfiguration::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

bool OAIShardConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShardConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
