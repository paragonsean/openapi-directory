/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterPendingUpdates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterPendingUpdates::OAIClusterPendingUpdates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterPendingUpdates::OAIClusterPendingUpdates() {
    this->initializeModel();
}

OAIClusterPendingUpdates::~OAIClusterPendingUpdates() {}

void OAIClusterPendingUpdates::initializeModel() {

    m_resharding_isSet = false;
    m_resharding_isValid = false;

    m_acls_isSet = false;
    m_acls_isValid = false;

    m_service_updates_isSet = false;
    m_service_updates_isValid = false;
}

void OAIClusterPendingUpdates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterPendingUpdates::fromJsonObject(QJsonObject json) {

    m_resharding_isValid = ::OpenAPI::fromJsonValue(m_resharding, json[QString("Resharding")]);
    m_resharding_isSet = !json[QString("Resharding")].isNull() && m_resharding_isValid;

    m_acls_isValid = ::OpenAPI::fromJsonValue(m_acls, json[QString("ACLs")]);
    m_acls_isSet = !json[QString("ACLs")].isNull() && m_acls_isValid;

    m_service_updates_isValid = ::OpenAPI::fromJsonValue(m_service_updates, json[QString("ServiceUpdates")]);
    m_service_updates_isSet = !json[QString("ServiceUpdates")].isNull() && m_service_updates_isValid;
}

QString OAIClusterPendingUpdates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterPendingUpdates::asJsonObject() const {
    QJsonObject obj;
    if (m_resharding.isSet()) {
        obj.insert(QString("Resharding"), ::OpenAPI::toJsonValue(m_resharding));
    }
    if (m_acls.isSet()) {
        obj.insert(QString("ACLs"), ::OpenAPI::toJsonValue(m_acls));
    }
    if (m_service_updates.isSet()) {
        obj.insert(QString("ServiceUpdates"), ::OpenAPI::toJsonValue(m_service_updates));
    }
    return obj;
}

OAIClusterPendingUpdates_Resharding OAIClusterPendingUpdates::getResharding() const {
    return m_resharding;
}
void OAIClusterPendingUpdates::setResharding(const OAIClusterPendingUpdates_Resharding &resharding) {
    m_resharding = resharding;
    m_resharding_isSet = true;
}

bool OAIClusterPendingUpdates::is_resharding_Set() const{
    return m_resharding_isSet;
}

bool OAIClusterPendingUpdates::is_resharding_Valid() const{
    return m_resharding_isValid;
}

OAIClusterPendingUpdates_ACLs OAIClusterPendingUpdates::getAcls() const {
    return m_acls;
}
void OAIClusterPendingUpdates::setAcls(const OAIClusterPendingUpdates_ACLs &acls) {
    m_acls = acls;
    m_acls_isSet = true;
}

bool OAIClusterPendingUpdates::is_acls_Set() const{
    return m_acls_isSet;
}

bool OAIClusterPendingUpdates::is_acls_Valid() const{
    return m_acls_isValid;
}

QList OAIClusterPendingUpdates::getServiceUpdates() const {
    return m_service_updates;
}
void OAIClusterPendingUpdates::setServiceUpdates(const QList &service_updates) {
    m_service_updates = service_updates;
    m_service_updates_isSet = true;
}

bool OAIClusterPendingUpdates::is_service_updates_Set() const{
    return m_service_updates_isSet;
}

bool OAIClusterPendingUpdates::is_service_updates_Valid() const{
    return m_service_updates_isValid;
}

bool OAIClusterPendingUpdates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resharding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_acls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterPendingUpdates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
