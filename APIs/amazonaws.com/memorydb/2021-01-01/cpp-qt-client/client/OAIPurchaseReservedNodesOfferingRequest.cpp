/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseReservedNodesOfferingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseReservedNodesOfferingRequest::OAIPurchaseReservedNodesOfferingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseReservedNodesOfferingRequest::OAIPurchaseReservedNodesOfferingRequest() {
    this->initializeModel();
}

OAIPurchaseReservedNodesOfferingRequest::~OAIPurchaseReservedNodesOfferingRequest() {}

void OAIPurchaseReservedNodesOfferingRequest::initializeModel() {

    m_reserved_nodes_offering_id_isSet = false;
    m_reserved_nodes_offering_id_isValid = false;

    m_reservation_id_isSet = false;
    m_reservation_id_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPurchaseReservedNodesOfferingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseReservedNodesOfferingRequest::fromJsonObject(QJsonObject json) {

    m_reserved_nodes_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_nodes_offering_id, json[QString("ReservedNodesOfferingId")]);
    m_reserved_nodes_offering_id_isSet = !json[QString("ReservedNodesOfferingId")].isNull() && m_reserved_nodes_offering_id_isValid;

    m_reservation_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_id, json[QString("ReservationId")]);
    m_reservation_id_isSet = !json[QString("ReservationId")].isNull() && m_reservation_id_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("NodeCount")]);
    m_node_count_isSet = !json[QString("NodeCount")].isNull() && m_node_count_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPurchaseReservedNodesOfferingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseReservedNodesOfferingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_reserved_nodes_offering_id_isSet) {
        obj.insert(QString("ReservedNodesOfferingId"), ::OpenAPI::toJsonValue(m_reserved_nodes_offering_id));
    }
    if (m_reservation_id_isSet) {
        obj.insert(QString("ReservationId"), ::OpenAPI::toJsonValue(m_reservation_id));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("NodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPurchaseReservedNodesOfferingRequest::getReservedNodesOfferingId() const {
    return m_reserved_nodes_offering_id;
}
void OAIPurchaseReservedNodesOfferingRequest::setReservedNodesOfferingId(const QString &reserved_nodes_offering_id) {
    m_reserved_nodes_offering_id = reserved_nodes_offering_id;
    m_reserved_nodes_offering_id_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_reserved_nodes_offering_id_Set() const{
    return m_reserved_nodes_offering_id_isSet;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_reserved_nodes_offering_id_Valid() const{
    return m_reserved_nodes_offering_id_isValid;
}

QString OAIPurchaseReservedNodesOfferingRequest::getReservationId() const {
    return m_reservation_id;
}
void OAIPurchaseReservedNodesOfferingRequest::setReservationId(const QString &reservation_id) {
    m_reservation_id = reservation_id;
    m_reservation_id_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_reservation_id_Set() const{
    return m_reservation_id_isSet;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_reservation_id_Valid() const{
    return m_reservation_id_isValid;
}

qint32 OAIPurchaseReservedNodesOfferingRequest::getNodeCount() const {
    return m_node_count;
}
void OAIPurchaseReservedNodesOfferingRequest::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QList OAIPurchaseReservedNodesOfferingRequest::getTags() const {
    return m_tags;
}
void OAIPurchaseReservedNodesOfferingRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPurchaseReservedNodesOfferingRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPurchaseReservedNodesOfferingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reserved_nodes_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseReservedNodesOfferingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reserved_nodes_offering_id_isValid && true;
}

} // namespace OpenAPI
