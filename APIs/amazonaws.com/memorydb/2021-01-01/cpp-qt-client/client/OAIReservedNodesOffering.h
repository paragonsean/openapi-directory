/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservedNodesOffering.h
 *
 * The offering type of this node.
 */

#ifndef OAIReservedNodesOffering_H
#define OAIReservedNodesOffering_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservedNodesOffering : public OAIObject {
public:
    OAIReservedNodesOffering();
    OAIReservedNodesOffering(QString json);
    ~OAIReservedNodesOffering() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReservedNodesOfferingId() const;
    void setReservedNodesOfferingId(const QString &reserved_nodes_offering_id);
    bool is_reserved_nodes_offering_id_Set() const;
    bool is_reserved_nodes_offering_id_Valid() const;

    QString getNodeType() const;
    void setNodeType(const QString &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    QString getOfferingType() const;
    void setOfferingType(const QString &offering_type);
    bool is_offering_type_Set() const;
    bool is_offering_type_Valid() const;

    QList getRecurringCharges() const;
    void setRecurringCharges(const QList &recurring_charges);
    bool is_recurring_charges_Set() const;
    bool is_recurring_charges_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reserved_nodes_offering_id;
    bool m_reserved_nodes_offering_id_isSet;
    bool m_reserved_nodes_offering_id_isValid;

    QString m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    QString m_offering_type;
    bool m_offering_type_isSet;
    bool m_offering_type_isValid;

    QList m_recurring_charges;
    bool m_recurring_charges_isSet;
    bool m_recurring_charges_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservedNodesOffering)

#endif // OAIReservedNodesOffering_H
