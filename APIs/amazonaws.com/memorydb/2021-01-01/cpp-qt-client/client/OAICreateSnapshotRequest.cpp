/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSnapshotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSnapshotRequest::OAICreateSnapshotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSnapshotRequest::OAICreateSnapshotRequest() {
    this->initializeModel();
}

OAICreateSnapshotRequest::~OAICreateSnapshotRequest() {}

void OAICreateSnapshotRequest::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_snapshot_name_isSet = false;
    m_snapshot_name_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSnapshotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSnapshotRequest::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_snapshot_name, json[QString("SnapshotName")]);
    m_snapshot_name_isSet = !json[QString("SnapshotName")].isNull() && m_snapshot_name_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateSnapshotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSnapshotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_snapshot_name_isSet) {
        obj.insert(QString("SnapshotName"), ::OpenAPI::toJsonValue(m_snapshot_name));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSnapshotRequest::getClusterName() const {
    return m_cluster_name;
}
void OAICreateSnapshotRequest::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateSnapshotRequest::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateSnapshotRequest::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAICreateSnapshotRequest::getSnapshotName() const {
    return m_snapshot_name;
}
void OAICreateSnapshotRequest::setSnapshotName(const QString &snapshot_name) {
    m_snapshot_name = snapshot_name;
    m_snapshot_name_isSet = true;
}

bool OAICreateSnapshotRequest::is_snapshot_name_Set() const{
    return m_snapshot_name_isSet;
}

bool OAICreateSnapshotRequest::is_snapshot_name_Valid() const{
    return m_snapshot_name_isValid;
}

QString OAICreateSnapshotRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateSnapshotRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateSnapshotRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateSnapshotRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QList OAICreateSnapshotRequest::getTags() const {
    return m_tags;
}
void OAICreateSnapshotRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSnapshotRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSnapshotRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSnapshotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSnapshotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_name_isValid && m_snapshot_name_isValid && true;
}

} // namespace OpenAPI
