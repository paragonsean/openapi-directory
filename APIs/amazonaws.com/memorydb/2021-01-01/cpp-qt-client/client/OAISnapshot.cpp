/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_cluster_configuration_isSet = false;
    m_cluster_configuration_isValid = false;

    m_data_tiering_isSet = false;
    m_data_tiering_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;

    m_cluster_configuration_isValid = ::OpenAPI::fromJsonValue(m_cluster_configuration, json[QString("ClusterConfiguration")]);
    m_cluster_configuration_isSet = !json[QString("ClusterConfiguration")].isNull() && m_cluster_configuration_isValid;

    m_data_tiering_isValid = ::OpenAPI::fromJsonValue(m_data_tiering, json[QString("DataTiering")]);
    m_data_tiering_isSet = !json[QString("DataTiering")].isNull() && m_data_tiering_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_cluster_configuration.isSet()) {
        obj.insert(QString("ClusterConfiguration"), ::OpenAPI::toJsonValue(m_cluster_configuration));
    }
    if (m_data_tiering.isSet()) {
        obj.insert(QString("DataTiering"), ::OpenAPI::toJsonValue(m_data_tiering));
    }
    return obj;
}

QString OAISnapshot::getName() const {
    return m_name;
}
void OAISnapshot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISnapshot::is_name_Set() const{
    return m_name_isSet;
}

bool OAISnapshot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISnapshot::getStatus() const {
    return m_status;
}
void OAISnapshot::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISnapshot::is_status_Set() const{
    return m_status_isSet;
}

bool OAISnapshot::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISnapshot::getSource() const {
    return m_source;
}
void OAISnapshot::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISnapshot::is_source_Set() const{
    return m_source_isSet;
}

bool OAISnapshot::is_source_Valid() const{
    return m_source_isValid;
}

QString OAISnapshot::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAISnapshot::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAISnapshot::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAISnapshot::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAISnapshot::getArn() const {
    return m_arn;
}
void OAISnapshot::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAISnapshot::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAISnapshot::is_arn_Valid() const{
    return m_arn_isValid;
}

OAISnapshot_ClusterConfiguration OAISnapshot::getClusterConfiguration() const {
    return m_cluster_configuration;
}
void OAISnapshot::setClusterConfiguration(const OAISnapshot_ClusterConfiguration &cluster_configuration) {
    m_cluster_configuration = cluster_configuration;
    m_cluster_configuration_isSet = true;
}

bool OAISnapshot::is_cluster_configuration_Set() const{
    return m_cluster_configuration_isSet;
}

bool OAISnapshot::is_cluster_configuration_Valid() const{
    return m_cluster_configuration_isValid;
}

OAIDataTieringStatus OAISnapshot::getDataTiering() const {
    return m_data_tiering;
}
void OAISnapshot::setDataTiering(const OAIDataTieringStatus &data_tiering) {
    m_data_tiering = data_tiering;
    m_data_tiering_isSet = true;
}

bool OAISnapshot::is_data_tiering_Set() const{
    return m_data_tiering_isSet;
}

bool OAISnapshot::is_data_tiering_Valid() const{
    return m_data_tiering_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_tiering.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
