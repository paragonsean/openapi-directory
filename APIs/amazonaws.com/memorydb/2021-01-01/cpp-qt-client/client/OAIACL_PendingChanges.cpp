/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIACL_PendingChanges.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIACL_PendingChanges::OAIACL_PendingChanges(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIACL_PendingChanges::OAIACL_PendingChanges() {
    this->initializeModel();
}

OAIACL_PendingChanges::~OAIACL_PendingChanges() {}

void OAIACL_PendingChanges::initializeModel() {

    m_user_names_to_remove_isSet = false;
    m_user_names_to_remove_isValid = false;

    m_user_names_to_add_isSet = false;
    m_user_names_to_add_isValid = false;
}

void OAIACL_PendingChanges::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIACL_PendingChanges::fromJsonObject(QJsonObject json) {

    m_user_names_to_remove_isValid = ::OpenAPI::fromJsonValue(m_user_names_to_remove, json[QString("UserNamesToRemove")]);
    m_user_names_to_remove_isSet = !json[QString("UserNamesToRemove")].isNull() && m_user_names_to_remove_isValid;

    m_user_names_to_add_isValid = ::OpenAPI::fromJsonValue(m_user_names_to_add, json[QString("UserNamesToAdd")]);
    m_user_names_to_add_isSet = !json[QString("UserNamesToAdd")].isNull() && m_user_names_to_add_isValid;
}

QString OAIACL_PendingChanges::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIACL_PendingChanges::asJsonObject() const {
    QJsonObject obj;
    if (m_user_names_to_remove.isSet()) {
        obj.insert(QString("UserNamesToRemove"), ::OpenAPI::toJsonValue(m_user_names_to_remove));
    }
    if (m_user_names_to_add.isSet()) {
        obj.insert(QString("UserNamesToAdd"), ::OpenAPI::toJsonValue(m_user_names_to_add));
    }
    return obj;
}

QList OAIACL_PendingChanges::getUserNamesToRemove() const {
    return m_user_names_to_remove;
}
void OAIACL_PendingChanges::setUserNamesToRemove(const QList &user_names_to_remove) {
    m_user_names_to_remove = user_names_to_remove;
    m_user_names_to_remove_isSet = true;
}

bool OAIACL_PendingChanges::is_user_names_to_remove_Set() const{
    return m_user_names_to_remove_isSet;
}

bool OAIACL_PendingChanges::is_user_names_to_remove_Valid() const{
    return m_user_names_to_remove_isValid;
}

QList OAIACL_PendingChanges::getUserNamesToAdd() const {
    return m_user_names_to_add;
}
void OAIACL_PendingChanges::setUserNamesToAdd(const QList &user_names_to_add) {
    m_user_names_to_add = user_names_to_add;
    m_user_names_to_add_isSet = true;
}

bool OAIACL_PendingChanges::is_user_names_to_add_Set() const{
    return m_user_names_to_add_isSet;
}

bool OAIACL_PendingChanges::is_user_names_to_add_Valid() const{
    return m_user_names_to_add_isValid;
}

bool OAIACL_PendingChanges::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_names_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_names_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIACL_PendingChanges::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
