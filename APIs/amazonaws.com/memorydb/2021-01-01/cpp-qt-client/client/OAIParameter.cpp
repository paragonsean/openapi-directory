/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameter::OAIParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameter::OAIParameter() {
    this->initializeModel();
}

OAIParameter::~OAIParameter() {}

void OAIParameter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_minimum_engine_version_isSet = false;
    m_minimum_engine_version_isValid = false;
}

void OAIParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("DataType")]);
    m_data_type_isSet = !json[QString("DataType")].isNull() && m_data_type_isValid;

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("AllowedValues")]);
    m_allowed_values_isSet = !json[QString("AllowedValues")].isNull() && m_allowed_values_isValid;

    m_minimum_engine_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_engine_version, json[QString("MinimumEngineVersion")]);
    m_minimum_engine_version_isSet = !json[QString("MinimumEngineVersion")].isNull() && m_minimum_engine_version_isValid;
}

QString OAIParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("DataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_allowed_values_isSet) {
        obj.insert(QString("AllowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_minimum_engine_version_isSet) {
        obj.insert(QString("MinimumEngineVersion"), ::OpenAPI::toJsonValue(m_minimum_engine_version));
    }
    return obj;
}

QString OAIParameter::getName() const {
    return m_name;
}
void OAIParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParameter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIParameter::getValue() const {
    return m_value;
}
void OAIParameter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIParameter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIParameter::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIParameter::getDescription() const {
    return m_description;
}
void OAIParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParameter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIParameter::getDataType() const {
    return m_data_type;
}
void OAIParameter::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIParameter::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIParameter::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIParameter::getAllowedValues() const {
    return m_allowed_values;
}
void OAIParameter::setAllowedValues(const QString &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIParameter::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIParameter::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIParameter::getMinimumEngineVersion() const {
    return m_minimum_engine_version;
}
void OAIParameter::setMinimumEngineVersion(const QString &minimum_engine_version) {
    m_minimum_engine_version = minimum_engine_version;
    m_minimum_engine_version_isSet = true;
}

bool OAIParameter::is_minimum_engine_version_Set() const{
    return m_minimum_engine_version_isSet;
}

bool OAIParameter::is_minimum_engine_version_Valid() const{
    return m_minimum_engine_version_isValid;
}

bool OAIParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
