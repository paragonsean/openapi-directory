/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot_ClusterConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot_ClusterConfiguration::OAISnapshot_ClusterConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot_ClusterConfiguration::OAISnapshot_ClusterConfiguration() {
    this->initializeModel();
}

OAISnapshot_ClusterConfiguration::~OAISnapshot_ClusterConfiguration() {}

void OAISnapshot_ClusterConfiguration::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_topic_arn_isSet = false;
    m_topic_arn_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_parameter_group_name_isSet = false;
    m_parameter_group_name_isValid = false;

    m_subnet_group_name_isSet = false;
    m_subnet_group_name_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_snapshot_retention_limit_isSet = false;
    m_snapshot_retention_limit_isValid = false;

    m_snapshot_window_isSet = false;
    m_snapshot_window_isValid = false;

    m_num_shards_isSet = false;
    m_num_shards_isValid = false;

    m_shards_isSet = false;
    m_shards_isValid = false;
}

void OAISnapshot_ClusterConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot_ClusterConfiguration::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("MaintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("MaintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_topic_arn, json[QString("TopicArn")]);
    m_topic_arn_isSet = !json[QString("TopicArn")].isNull() && m_topic_arn_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_name, json[QString("ParameterGroupName")]);
    m_parameter_group_name_isSet = !json[QString("ParameterGroupName")].isNull() && m_parameter_group_name_isValid;

    m_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_subnet_group_name, json[QString("SubnetGroupName")]);
    m_subnet_group_name_isSet = !json[QString("SubnetGroupName")].isNull() && m_subnet_group_name_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_snapshot_retention_limit_isValid = ::OpenAPI::fromJsonValue(m_snapshot_retention_limit, json[QString("SnapshotRetentionLimit")]);
    m_snapshot_retention_limit_isSet = !json[QString("SnapshotRetentionLimit")].isNull() && m_snapshot_retention_limit_isValid;

    m_snapshot_window_isValid = ::OpenAPI::fromJsonValue(m_snapshot_window, json[QString("SnapshotWindow")]);
    m_snapshot_window_isSet = !json[QString("SnapshotWindow")].isNull() && m_snapshot_window_isValid;

    m_num_shards_isValid = ::OpenAPI::fromJsonValue(m_num_shards, json[QString("NumShards")]);
    m_num_shards_isSet = !json[QString("NumShards")].isNull() && m_num_shards_isValid;

    m_shards_isValid = ::OpenAPI::fromJsonValue(m_shards, json[QString("Shards")]);
    m_shards_isSet = !json[QString("Shards")].isNull() && m_shards_isValid;
}

QString OAISnapshot_ClusterConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot_ClusterConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_maintenance_window_isSet) {
        obj.insert(QString("MaintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_topic_arn_isSet) {
        obj.insert(QString("TopicArn"), ::OpenAPI::toJsonValue(m_topic_arn));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_parameter_group_name_isSet) {
        obj.insert(QString("ParameterGroupName"), ::OpenAPI::toJsonValue(m_parameter_group_name));
    }
    if (m_subnet_group_name_isSet) {
        obj.insert(QString("SubnetGroupName"), ::OpenAPI::toJsonValue(m_subnet_group_name));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_snapshot_retention_limit_isSet) {
        obj.insert(QString("SnapshotRetentionLimit"), ::OpenAPI::toJsonValue(m_snapshot_retention_limit));
    }
    if (m_snapshot_window_isSet) {
        obj.insert(QString("SnapshotWindow"), ::OpenAPI::toJsonValue(m_snapshot_window));
    }
    if (m_num_shards_isSet) {
        obj.insert(QString("NumShards"), ::OpenAPI::toJsonValue(m_num_shards));
    }
    if (m_shards.isSet()) {
        obj.insert(QString("Shards"), ::OpenAPI::toJsonValue(m_shards));
    }
    return obj;
}

QString OAISnapshot_ClusterConfiguration::getName() const {
    return m_name;
}
void OAISnapshot_ClusterConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISnapshot_ClusterConfiguration::getDescription() const {
    return m_description;
}
void OAISnapshot_ClusterConfiguration::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_description_Set() const{
    return m_description_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISnapshot_ClusterConfiguration::getNodeType() const {
    return m_node_type;
}
void OAISnapshot_ClusterConfiguration::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAISnapshot_ClusterConfiguration::getEngineVersion() const {
    return m_engine_version;
}
void OAISnapshot_ClusterConfiguration::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAISnapshot_ClusterConfiguration::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAISnapshot_ClusterConfiguration::setMaintenanceWindow(const QString &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

QString OAISnapshot_ClusterConfiguration::getTopicArn() const {
    return m_topic_arn;
}
void OAISnapshot_ClusterConfiguration::setTopicArn(const QString &topic_arn) {
    m_topic_arn = topic_arn;
    m_topic_arn_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_topic_arn_Set() const{
    return m_topic_arn_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_topic_arn_Valid() const{
    return m_topic_arn_isValid;
}

qint32 OAISnapshot_ClusterConfiguration::getPort() const {
    return m_port;
}
void OAISnapshot_ClusterConfiguration::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_port_Set() const{
    return m_port_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_port_Valid() const{
    return m_port_isValid;
}

QString OAISnapshot_ClusterConfiguration::getParameterGroupName() const {
    return m_parameter_group_name;
}
void OAISnapshot_ClusterConfiguration::setParameterGroupName(const QString &parameter_group_name) {
    m_parameter_group_name = parameter_group_name;
    m_parameter_group_name_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_parameter_group_name_Set() const{
    return m_parameter_group_name_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_parameter_group_name_Valid() const{
    return m_parameter_group_name_isValid;
}

QString OAISnapshot_ClusterConfiguration::getSubnetGroupName() const {
    return m_subnet_group_name;
}
void OAISnapshot_ClusterConfiguration::setSubnetGroupName(const QString &subnet_group_name) {
    m_subnet_group_name = subnet_group_name;
    m_subnet_group_name_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_subnet_group_name_Set() const{
    return m_subnet_group_name_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_subnet_group_name_Valid() const{
    return m_subnet_group_name_isValid;
}

QString OAISnapshot_ClusterConfiguration::getVpcId() const {
    return m_vpc_id;
}
void OAISnapshot_ClusterConfiguration::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

qint32 OAISnapshot_ClusterConfiguration::getSnapshotRetentionLimit() const {
    return m_snapshot_retention_limit;
}
void OAISnapshot_ClusterConfiguration::setSnapshotRetentionLimit(const qint32 &snapshot_retention_limit) {
    m_snapshot_retention_limit = snapshot_retention_limit;
    m_snapshot_retention_limit_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_snapshot_retention_limit_Set() const{
    return m_snapshot_retention_limit_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_snapshot_retention_limit_Valid() const{
    return m_snapshot_retention_limit_isValid;
}

QString OAISnapshot_ClusterConfiguration::getSnapshotWindow() const {
    return m_snapshot_window;
}
void OAISnapshot_ClusterConfiguration::setSnapshotWindow(const QString &snapshot_window) {
    m_snapshot_window = snapshot_window;
    m_snapshot_window_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_snapshot_window_Set() const{
    return m_snapshot_window_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_snapshot_window_Valid() const{
    return m_snapshot_window_isValid;
}

qint32 OAISnapshot_ClusterConfiguration::getNumShards() const {
    return m_num_shards;
}
void OAISnapshot_ClusterConfiguration::setNumShards(const qint32 &num_shards) {
    m_num_shards = num_shards;
    m_num_shards_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_num_shards_Set() const{
    return m_num_shards_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_num_shards_Valid() const{
    return m_num_shards_isValid;
}

QList OAISnapshot_ClusterConfiguration::getShards() const {
    return m_shards;
}
void OAISnapshot_ClusterConfiguration::setShards(const QList &shards) {
    m_shards = shards;
    m_shards_isSet = true;
}

bool OAISnapshot_ClusterConfiguration::is_shards_Set() const{
    return m_shards_isSet;
}

bool OAISnapshot_ClusterConfiguration::is_shards_Valid() const{
    return m_shards_isValid;
}

bool OAISnapshot_ClusterConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_retention_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_shards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shards.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot_ClusterConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
