/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSnapshotsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSnapshotsRequest::OAIDescribeSnapshotsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSnapshotsRequest::OAIDescribeSnapshotsRequest() {
    this->initializeModel();
}

OAIDescribeSnapshotsRequest::~OAIDescribeSnapshotsRequest() {}

void OAIDescribeSnapshotsRequest::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_snapshot_name_isSet = false;
    m_snapshot_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_show_detail_isSet = false;
    m_show_detail_isValid = false;
}

void OAIDescribeSnapshotsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSnapshotsRequest::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_snapshot_name, json[QString("SnapshotName")]);
    m_snapshot_name_isSet = !json[QString("SnapshotName")].isNull() && m_snapshot_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_show_detail_isValid = ::OpenAPI::fromJsonValue(m_show_detail, json[QString("ShowDetail")]);
    m_show_detail_isSet = !json[QString("ShowDetail")].isNull() && m_show_detail_isValid;
}

QString OAIDescribeSnapshotsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSnapshotsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_snapshot_name_isSet) {
        obj.insert(QString("SnapshotName"), ::OpenAPI::toJsonValue(m_snapshot_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_show_detail_isSet) {
        obj.insert(QString("ShowDetail"), ::OpenAPI::toJsonValue(m_show_detail));
    }
    return obj;
}

QString OAIDescribeSnapshotsRequest::getClusterName() const {
    return m_cluster_name;
}
void OAIDescribeSnapshotsRequest::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIDescribeSnapshotsRequest::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIDescribeSnapshotsRequest::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIDescribeSnapshotsRequest::getSnapshotName() const {
    return m_snapshot_name;
}
void OAIDescribeSnapshotsRequest::setSnapshotName(const QString &snapshot_name) {
    m_snapshot_name = snapshot_name;
    m_snapshot_name_isSet = true;
}

bool OAIDescribeSnapshotsRequest::is_snapshot_name_Set() const{
    return m_snapshot_name_isSet;
}

bool OAIDescribeSnapshotsRequest::is_snapshot_name_Valid() const{
    return m_snapshot_name_isValid;
}

QString OAIDescribeSnapshotsRequest::getSource() const {
    return m_source;
}
void OAIDescribeSnapshotsRequest::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDescribeSnapshotsRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDescribeSnapshotsRequest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDescribeSnapshotsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeSnapshotsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeSnapshotsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeSnapshotsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeSnapshotsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeSnapshotsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeSnapshotsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeSnapshotsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeSnapshotsRequest::getShowDetail() const {
    return m_show_detail;
}
void OAIDescribeSnapshotsRequest::setShowDetail(const bool &show_detail) {
    m_show_detail = show_detail;
    m_show_detail_isSet = true;
}

bool OAIDescribeSnapshotsRequest::is_show_detail_Set() const{
    return m_show_detail_isSet;
}

bool OAIDescribeSnapshotsRequest::is_show_detail_Valid() const{
    return m_show_detail_isValid;
}

bool OAIDescribeSnapshotsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSnapshotsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
