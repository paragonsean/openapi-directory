/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResetParameterGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResetParameterGroupRequest::OAIResetParameterGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResetParameterGroupRequest::OAIResetParameterGroupRequest() {
    this->initializeModel();
}

OAIResetParameterGroupRequest::~OAIResetParameterGroupRequest() {}

void OAIResetParameterGroupRequest::initializeModel() {

    m_parameter_group_name_isSet = false;
    m_parameter_group_name_isValid = false;

    m_all_parameters_isSet = false;
    m_all_parameters_isValid = false;

    m_parameter_names_isSet = false;
    m_parameter_names_isValid = false;
}

void OAIResetParameterGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResetParameterGroupRequest::fromJsonObject(QJsonObject json) {

    m_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_group_name, json[QString("ParameterGroupName")]);
    m_parameter_group_name_isSet = !json[QString("ParameterGroupName")].isNull() && m_parameter_group_name_isValid;

    m_all_parameters_isValid = ::OpenAPI::fromJsonValue(m_all_parameters, json[QString("AllParameters")]);
    m_all_parameters_isSet = !json[QString("AllParameters")].isNull() && m_all_parameters_isValid;

    m_parameter_names_isValid = ::OpenAPI::fromJsonValue(m_parameter_names, json[QString("ParameterNames")]);
    m_parameter_names_isSet = !json[QString("ParameterNames")].isNull() && m_parameter_names_isValid;
}

QString OAIResetParameterGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResetParameterGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_group_name_isSet) {
        obj.insert(QString("ParameterGroupName"), ::OpenAPI::toJsonValue(m_parameter_group_name));
    }
    if (m_all_parameters_isSet) {
        obj.insert(QString("AllParameters"), ::OpenAPI::toJsonValue(m_all_parameters));
    }
    if (m_parameter_names.isSet()) {
        obj.insert(QString("ParameterNames"), ::OpenAPI::toJsonValue(m_parameter_names));
    }
    return obj;
}

QString OAIResetParameterGroupRequest::getParameterGroupName() const {
    return m_parameter_group_name;
}
void OAIResetParameterGroupRequest::setParameterGroupName(const QString &parameter_group_name) {
    m_parameter_group_name = parameter_group_name;
    m_parameter_group_name_isSet = true;
}

bool OAIResetParameterGroupRequest::is_parameter_group_name_Set() const{
    return m_parameter_group_name_isSet;
}

bool OAIResetParameterGroupRequest::is_parameter_group_name_Valid() const{
    return m_parameter_group_name_isValid;
}

bool OAIResetParameterGroupRequest::getAllParameters() const {
    return m_all_parameters;
}
void OAIResetParameterGroupRequest::setAllParameters(const bool &all_parameters) {
    m_all_parameters = all_parameters;
    m_all_parameters_isSet = true;
}

bool OAIResetParameterGroupRequest::is_all_parameters_Set() const{
    return m_all_parameters_isSet;
}

bool OAIResetParameterGroupRequest::is_all_parameters_Valid() const{
    return m_all_parameters_isValid;
}

QList OAIResetParameterGroupRequest::getParameterNames() const {
    return m_parameter_names;
}
void OAIResetParameterGroupRequest::setParameterNames(const QList &parameter_names) {
    m_parameter_names = parameter_names;
    m_parameter_names_isSet = true;
}

bool OAIResetParameterGroupRequest::is_parameter_names_Set() const{
    return m_parameter_names_isSet;
}

bool OAIResetParameterGroupRequest::is_parameter_names_Valid() const{
    return m_parameter_names_isValid;
}

bool OAIResetParameterGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResetParameterGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_group_name_isValid && true;
}

} // namespace OpenAPI
