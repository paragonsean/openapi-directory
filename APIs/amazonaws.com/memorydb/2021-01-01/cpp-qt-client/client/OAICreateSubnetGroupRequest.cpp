/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSubnetGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSubnetGroupRequest::OAICreateSubnetGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSubnetGroupRequest::OAICreateSubnetGroupRequest() {
    this->initializeModel();
}

OAICreateSubnetGroupRequest::~OAICreateSubnetGroupRequest() {}

void OAICreateSubnetGroupRequest::initializeModel() {

    m_subnet_group_name_isSet = false;
    m_subnet_group_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSubnetGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSubnetGroupRequest::fromJsonObject(QJsonObject json) {

    m_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_subnet_group_name, json[QString("SubnetGroupName")]);
    m_subnet_group_name_isSet = !json[QString("SubnetGroupName")].isNull() && m_subnet_group_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateSubnetGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSubnetGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_group_name_isSet) {
        obj.insert(QString("SubnetGroupName"), ::OpenAPI::toJsonValue(m_subnet_group_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSubnetGroupRequest::getSubnetGroupName() const {
    return m_subnet_group_name;
}
void OAICreateSubnetGroupRequest::setSubnetGroupName(const QString &subnet_group_name) {
    m_subnet_group_name = subnet_group_name;
    m_subnet_group_name_isSet = true;
}

bool OAICreateSubnetGroupRequest::is_subnet_group_name_Set() const{
    return m_subnet_group_name_isSet;
}

bool OAICreateSubnetGroupRequest::is_subnet_group_name_Valid() const{
    return m_subnet_group_name_isValid;
}

QString OAICreateSubnetGroupRequest::getDescription() const {
    return m_description;
}
void OAICreateSubnetGroupRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSubnetGroupRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSubnetGroupRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateSubnetGroupRequest::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateSubnetGroupRequest::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateSubnetGroupRequest::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateSubnetGroupRequest::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAICreateSubnetGroupRequest::getTags() const {
    return m_tags;
}
void OAICreateSubnetGroupRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSubnetGroupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSubnetGroupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSubnetGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSubnetGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subnet_group_name_isValid && m_subnet_ids_isValid && true;
}

} // namespace OpenAPI
