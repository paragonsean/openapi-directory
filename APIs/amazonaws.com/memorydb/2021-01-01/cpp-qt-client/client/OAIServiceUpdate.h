/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceUpdate.h
 *
 * An update that you can apply to your MemoryDB clusters.
 */

#ifndef OAIServiceUpdate_H
#define OAIServiceUpdate_H

#include <QJsonObject>

#include "OAIServiceUpdateStatus.h"
#include "OAIServiceUpdateType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIServiceUpdate : public OAIObject {
public:
    OAIServiceUpdate();
    OAIServiceUpdate(QString json);
    ~OAIServiceUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QString getServiceUpdateName() const;
    void setServiceUpdateName(const QString &service_update_name);
    bool is_service_update_name_Set() const;
    bool is_service_update_name_Valid() const;

    QDateTime getReleaseDate() const;
    void setReleaseDate(const QDateTime &release_date);
    bool is_release_date_Set() const;
    bool is_release_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIServiceUpdateStatus getStatus() const;
    void setStatus(const OAIServiceUpdateStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIServiceUpdateType getType() const;
    void setType(const OAIServiceUpdateType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getNodesUpdated() const;
    void setNodesUpdated(const QString &nodes_updated);
    bool is_nodes_updated_Set() const;
    bool is_nodes_updated_Valid() const;

    QDateTime getAutoUpdateStartDate() const;
    void setAutoUpdateStartDate(const QDateTime &auto_update_start_date);
    bool is_auto_update_start_date_Set() const;
    bool is_auto_update_start_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QString m_service_update_name;
    bool m_service_update_name_isSet;
    bool m_service_update_name_isValid;

    QDateTime m_release_date;
    bool m_release_date_isSet;
    bool m_release_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIServiceUpdateStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIServiceUpdateType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_nodes_updated;
    bool m_nodes_updated_isSet;
    bool m_nodes_updated_isValid;

    QDateTime m_auto_update_start_date;
    bool m_auto_update_start_date_isSet;
    bool m_auto_update_start_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceUpdate)

#endif // OAIServiceUpdate_H
