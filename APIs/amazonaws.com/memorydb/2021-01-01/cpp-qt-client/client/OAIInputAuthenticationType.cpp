/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputAuthenticationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputAuthenticationType::OAIInputAuthenticationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputAuthenticationType::OAIInputAuthenticationType() {
    this->initializeModel();
}

OAIInputAuthenticationType::~OAIInputAuthenticationType() {}

void OAIInputAuthenticationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInputAuthenticationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInputAuthenticationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("password", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputAuthenticationType::PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("iam", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputAuthenticationType::IAM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInputAuthenticationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInputAuthenticationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInputAuthenticationType::PASSWORD:
            val = "password";
            break;
        case eOAIInputAuthenticationType::IAM:
            val = "iam";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInputAuthenticationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInputAuthenticationType::eOAIInputAuthenticationType OAIInputAuthenticationType::getValue() const {
    return m_value;
}

void OAIInputAuthenticationType::setValue(const OAIInputAuthenticationType::eOAIInputAuthenticationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInputAuthenticationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIInputAuthenticationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
