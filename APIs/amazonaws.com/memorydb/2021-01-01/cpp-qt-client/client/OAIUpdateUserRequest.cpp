/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserRequest::OAIUpdateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserRequest::OAIUpdateUserRequest() {
    this->initializeModel();
}

OAIUpdateUserRequest::~OAIUpdateUserRequest() {}

void OAIUpdateUserRequest::initializeModel() {

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_authentication_mode_isSet = false;
    m_authentication_mode_isValid = false;

    m_access_string_isSet = false;
    m_access_string_isValid = false;
}

void OAIUpdateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserRequest::fromJsonObject(QJsonObject json) {

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_authentication_mode_isValid = ::OpenAPI::fromJsonValue(m_authentication_mode, json[QString("AuthenticationMode")]);
    m_authentication_mode_isSet = !json[QString("AuthenticationMode")].isNull() && m_authentication_mode_isValid;

    m_access_string_isValid = ::OpenAPI::fromJsonValue(m_access_string, json[QString("AccessString")]);
    m_access_string_isSet = !json[QString("AccessString")].isNull() && m_access_string_isValid;
}

QString OAIUpdateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_authentication_mode.isSet()) {
        obj.insert(QString("AuthenticationMode"), ::OpenAPI::toJsonValue(m_authentication_mode));
    }
    if (m_access_string_isSet) {
        obj.insert(QString("AccessString"), ::OpenAPI::toJsonValue(m_access_string));
    }
    return obj;
}

QString OAIUpdateUserRequest::getUserName() const {
    return m_user_name;
}
void OAIUpdateUserRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIUpdateUserRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIUpdateUserRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

OAICreateUserRequest_AuthenticationMode OAIUpdateUserRequest::getAuthenticationMode() const {
    return m_authentication_mode;
}
void OAIUpdateUserRequest::setAuthenticationMode(const OAICreateUserRequest_AuthenticationMode &authentication_mode) {
    m_authentication_mode = authentication_mode;
    m_authentication_mode_isSet = true;
}

bool OAIUpdateUserRequest::is_authentication_mode_Set() const{
    return m_authentication_mode_isSet;
}

bool OAIUpdateUserRequest::is_authentication_mode_Valid() const{
    return m_authentication_mode_isValid;
}

QString OAIUpdateUserRequest::getAccessString() const {
    return m_access_string;
}
void OAIUpdateUserRequest::setAccessString(const QString &access_string) {
    m_access_string = access_string;
    m_access_string_isSet = true;
}

bool OAIUpdateUserRequest::is_access_string_Set() const{
    return m_access_string_isSet;
}

bool OAIUpdateUserRequest::is_access_string_Valid() const{
    return m_access_string_isValid;
}

bool OAIUpdateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_name_isValid && true;
}

} // namespace OpenAPI
