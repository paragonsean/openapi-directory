/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateSnapshotResponse_Snapshot.h
 *
 * 
 */

#ifndef OAICreateSnapshotResponse_Snapshot_H
#define OAICreateSnapshotResponse_Snapshot_H

#include <QJsonObject>

#include "OAIDataTieringStatus.h"
#include "OAISnapshot_ClusterConfiguration.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISnapshot_ClusterConfiguration;

class OAICreateSnapshotResponse_Snapshot : public OAIObject {
public:
    OAICreateSnapshotResponse_Snapshot();
    OAICreateSnapshotResponse_Snapshot(QString json);
    ~OAICreateSnapshotResponse_Snapshot() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAISnapshot_ClusterConfiguration getClusterConfiguration() const;
    void setClusterConfiguration(const OAISnapshot_ClusterConfiguration &cluster_configuration);
    bool is_cluster_configuration_Set() const;
    bool is_cluster_configuration_Valid() const;

    OAIDataTieringStatus getDataTiering() const;
    void setDataTiering(const OAIDataTieringStatus &data_tiering);
    bool is_data_tiering_Set() const;
    bool is_data_tiering_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAISnapshot_ClusterConfiguration m_cluster_configuration;
    bool m_cluster_configuration_isSet;
    bool m_cluster_configuration_isValid;

    OAIDataTieringStatus m_data_tiering;
    bool m_data_tiering_isSet;
    bool m_data_tiering_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateSnapshotResponse_Snapshot)

#endif // OAICreateSnapshotResponse_Snapshot_H
