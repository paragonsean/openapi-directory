/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonMemoryDb);
  }
}(this, function(expect, AmazonMemoryDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeleteClusterResponseCluster', function() {
    it('should create an instance of DeleteClusterResponseCluster', function() {
      // uncomment below and update the code to test DeleteClusterResponseCluster
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be.a(AmazonMemoryDb.DeleteClusterResponseCluster);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property pendingUpdates (base name: "PendingUpdates")', function() {
      // uncomment below and update the code to test the property pendingUpdates
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property numberOfShards (base name: "NumberOfShards")', function() {
      // uncomment below and update the code to test the property numberOfShards
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property shards (base name: "Shards")', function() {
      // uncomment below and update the code to test the property shards
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property availabilityMode (base name: "AvailabilityMode")', function() {
      // uncomment below and update the code to test the property availabilityMode
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property clusterEndpoint (base name: "ClusterEndpoint")', function() {
      // uncomment below and update the code to test the property clusterEndpoint
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property nodeType (base name: "NodeType")', function() {
      // uncomment below and update the code to test the property nodeType
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property enginePatchVersion (base name: "EnginePatchVersion")', function() {
      // uncomment below and update the code to test the property enginePatchVersion
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property parameterGroupName (base name: "ParameterGroupName")', function() {
      // uncomment below and update the code to test the property parameterGroupName
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property parameterGroupStatus (base name: "ParameterGroupStatus")', function() {
      // uncomment below and update the code to test the property parameterGroupStatus
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property securityGroups (base name: "SecurityGroups")', function() {
      // uncomment below and update the code to test the property securityGroups
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property subnetGroupName (base name: "SubnetGroupName")', function() {
      // uncomment below and update the code to test the property subnetGroupName
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property tLSEnabled (base name: "TLSEnabled")', function() {
      // uncomment below and update the code to test the property tLSEnabled
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property ARN (base name: "ARN")', function() {
      // uncomment below and update the code to test the property ARN
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property snsTopicArn (base name: "SnsTopicArn")', function() {
      // uncomment below and update the code to test the property snsTopicArn
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property snsTopicStatus (base name: "SnsTopicStatus")', function() {
      // uncomment below and update the code to test the property snsTopicStatus
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property snapshotRetentionLimit (base name: "SnapshotRetentionLimit")', function() {
      // uncomment below and update the code to test the property snapshotRetentionLimit
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceWindow (base name: "MaintenanceWindow")', function() {
      // uncomment below and update the code to test the property maintenanceWindow
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property snapshotWindow (base name: "SnapshotWindow")', function() {
      // uncomment below and update the code to test the property snapshotWindow
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property aCLName (base name: "ACLName")', function() {
      // uncomment below and update the code to test the property aCLName
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property autoMinorVersionUpgrade (base name: "AutoMinorVersionUpgrade")', function() {
      // uncomment below and update the code to test the property autoMinorVersionUpgrade
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

    it('should have the property dataTiering (base name: "DataTiering")', function() {
      // uncomment below and update the code to test the property dataTiering
      //var instance = new AmazonMemoryDb.DeleteClusterResponseCluster();
      //expect(instance).to.be();
    });

  });

}));
