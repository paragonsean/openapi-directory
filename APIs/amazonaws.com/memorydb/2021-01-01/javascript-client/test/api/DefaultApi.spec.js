/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonMemoryDb);
  }
}(this, function(expect, AmazonMemoryDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonMemoryDb.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchUpdateCluster', function() {
      it('should call batchUpdateCluster successfully', function(done) {
        //uncomment below and update the code to test batchUpdateCluster
        //instance.batchUpdateCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copySnapshot', function() {
      it('should call copySnapshot successfully', function(done) {
        //uncomment below and update the code to test copySnapshot
        //instance.copySnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createACL', function() {
      it('should call createACL successfully', function(done) {
        //uncomment below and update the code to test createACL
        //instance.createACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCluster', function() {
      it('should call createCluster successfully', function(done) {
        //uncomment below and update the code to test createCluster
        //instance.createCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createParameterGroup', function() {
      it('should call createParameterGroup successfully', function(done) {
        //uncomment below and update the code to test createParameterGroup
        //instance.createParameterGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSnapshot', function() {
      it('should call createSnapshot successfully', function(done) {
        //uncomment below and update the code to test createSnapshot
        //instance.createSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubnetGroup', function() {
      it('should call createSubnetGroup successfully', function(done) {
        //uncomment below and update the code to test createSubnetGroup
        //instance.createSubnetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteACL', function() {
      it('should call deleteACL successfully', function(done) {
        //uncomment below and update the code to test deleteACL
        //instance.deleteACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCluster', function() {
      it('should call deleteCluster successfully', function(done) {
        //uncomment below and update the code to test deleteCluster
        //instance.deleteCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteParameterGroup', function() {
      it('should call deleteParameterGroup successfully', function(done) {
        //uncomment below and update the code to test deleteParameterGroup
        //instance.deleteParameterGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSnapshot', function() {
      it('should call deleteSnapshot successfully', function(done) {
        //uncomment below and update the code to test deleteSnapshot
        //instance.deleteSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubnetGroup', function() {
      it('should call deleteSubnetGroup successfully', function(done) {
        //uncomment below and update the code to test deleteSubnetGroup
        //instance.deleteSubnetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeACLs', function() {
      it('should call describeACLs successfully', function(done) {
        //uncomment below and update the code to test describeACLs
        //instance.describeACLs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClusters', function() {
      it('should call describeClusters successfully', function(done) {
        //uncomment below and update the code to test describeClusters
        //instance.describeClusters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEngineVersions', function() {
      it('should call describeEngineVersions successfully', function(done) {
        //uncomment below and update the code to test describeEngineVersions
        //instance.describeEngineVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEvents', function() {
      it('should call describeEvents successfully', function(done) {
        //uncomment below and update the code to test describeEvents
        //instance.describeEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeParameterGroups', function() {
      it('should call describeParameterGroups successfully', function(done) {
        //uncomment below and update the code to test describeParameterGroups
        //instance.describeParameterGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeParameters', function() {
      it('should call describeParameters successfully', function(done) {
        //uncomment below and update the code to test describeParameters
        //instance.describeParameters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservedNodes', function() {
      it('should call describeReservedNodes successfully', function(done) {
        //uncomment below and update the code to test describeReservedNodes
        //instance.describeReservedNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservedNodesOfferings', function() {
      it('should call describeReservedNodesOfferings successfully', function(done) {
        //uncomment below and update the code to test describeReservedNodesOfferings
        //instance.describeReservedNodesOfferings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeServiceUpdates', function() {
      it('should call describeServiceUpdates successfully', function(done) {
        //uncomment below and update the code to test describeServiceUpdates
        //instance.describeServiceUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSnapshots', function() {
      it('should call describeSnapshots successfully', function(done) {
        //uncomment below and update the code to test describeSnapshots
        //instance.describeSnapshots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSubnetGroups', function() {
      it('should call describeSubnetGroups successfully', function(done) {
        //uncomment below and update the code to test describeSubnetGroups
        //instance.describeSubnetGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUsers', function() {
      it('should call describeUsers successfully', function(done) {
        //uncomment below and update the code to test describeUsers
        //instance.describeUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('failoverShard', function() {
      it('should call failoverShard successfully', function(done) {
        //uncomment below and update the code to test failoverShard
        //instance.failoverShard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllowedNodeTypeUpdates', function() {
      it('should call listAllowedNodeTypeUpdates successfully', function(done) {
        //uncomment below and update the code to test listAllowedNodeTypeUpdates
        //instance.listAllowedNodeTypeUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTags', function() {
      it('should call listTags successfully', function(done) {
        //uncomment below and update the code to test listTags
        //instance.listTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('purchaseReservedNodesOffering', function() {
      it('should call purchaseReservedNodesOffering successfully', function(done) {
        //uncomment below and update the code to test purchaseReservedNodesOffering
        //instance.purchaseReservedNodesOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetParameterGroup', function() {
      it('should call resetParameterGroup successfully', function(done) {
        //uncomment below and update the code to test resetParameterGroup
        //instance.resetParameterGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateACL', function() {
      it('should call updateACL successfully', function(done) {
        //uncomment below and update the code to test updateACL
        //instance.updateACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCluster', function() {
      it('should call updateCluster successfully', function(done) {
        //uncomment below and update the code to test updateCluster
        //instance.updateCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateParameterGroup', function() {
      it('should call updateParameterGroup successfully', function(done) {
        //uncomment below and update the code to test updateParameterGroup
        //instance.updateParameterGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubnetGroup', function() {
      it('should call updateSubnetGroup successfully', function(done) {
        //uncomment below and update the code to test updateSubnetGroup
        //instance.updateSubnetGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
