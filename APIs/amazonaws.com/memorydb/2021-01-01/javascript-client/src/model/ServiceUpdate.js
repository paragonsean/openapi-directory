/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceUpdateStatus from './ServiceUpdateStatus';
import ServiceUpdateType from './ServiceUpdateType';

/**
 * The ServiceUpdate model module.
 * @module model/ServiceUpdate
 * @version 2021-01-01
 */
class ServiceUpdate {
    /**
     * Constructs a new <code>ServiceUpdate</code>.
     * An update that you can apply to your MemoryDB clusters.
     * @alias module:model/ServiceUpdate
     */
    constructor() { 
        
        ServiceUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceUpdate} obj Optional instance to populate.
     * @return {module:model/ServiceUpdate} The populated <code>ServiceUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceUpdate();

            if (data.hasOwnProperty('ClusterName')) {
                obj['ClusterName'] = ApiClient.convertToType(data['ClusterName'], 'String');
            }
            if (data.hasOwnProperty('ServiceUpdateName')) {
                obj['ServiceUpdateName'] = ApiClient.convertToType(data['ServiceUpdateName'], 'String');
            }
            if (data.hasOwnProperty('ReleaseDate')) {
                obj['ReleaseDate'] = ApiClient.convertToType(data['ReleaseDate'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], ServiceUpdateStatus);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], ServiceUpdateType);
            }
            if (data.hasOwnProperty('NodesUpdated')) {
                obj['NodesUpdated'] = ApiClient.convertToType(data['NodesUpdated'], 'String');
            }
            if (data.hasOwnProperty('AutoUpdateStartDate')) {
                obj['AutoUpdateStartDate'] = ApiClient.convertToType(data['AutoUpdateStartDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ClusterName`
        if (data['ClusterName']) { // data not null
          String.validateJSON(data['ClusterName']);
        }
        // validate the optional field `ServiceUpdateName`
        if (data['ServiceUpdateName']) { // data not null
          String.validateJSON(data['ServiceUpdateName']);
        }
        // validate the optional field `ReleaseDate`
        if (data['ReleaseDate']) { // data not null
          Date.validateJSON(data['ReleaseDate']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          ServiceUpdateStatus.validateJSON(data['Status']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          ServiceUpdateType.validateJSON(data['Type']);
        }
        // validate the optional field `NodesUpdated`
        if (data['NodesUpdated']) { // data not null
          String.validateJSON(data['NodesUpdated']);
        }
        // validate the optional field `AutoUpdateStartDate`
        if (data['AutoUpdateStartDate']) { // data not null
          Date.validateJSON(data['AutoUpdateStartDate']);
        }

        return true;
    }


}



/**
 * @member {String} ClusterName
 */
ServiceUpdate.prototype['ClusterName'] = undefined;

/**
 * @member {String} ServiceUpdateName
 */
ServiceUpdate.prototype['ServiceUpdateName'] = undefined;

/**
 * @member {Date} ReleaseDate
 */
ServiceUpdate.prototype['ReleaseDate'] = undefined;

/**
 * @member {String} Description
 */
ServiceUpdate.prototype['Description'] = undefined;

/**
 * @member {module:model/ServiceUpdateStatus} Status
 */
ServiceUpdate.prototype['Status'] = undefined;

/**
 * @member {module:model/ServiceUpdateType} Type
 */
ServiceUpdate.prototype['Type'] = undefined;

/**
 * @member {String} NodesUpdated
 */
ServiceUpdate.prototype['NodesUpdated'] = undefined;

/**
 * @member {Date} AutoUpdateStartDate
 */
ServiceUpdate.prototype['AutoUpdateStartDate'] = undefined;






export default ServiceUpdate;

