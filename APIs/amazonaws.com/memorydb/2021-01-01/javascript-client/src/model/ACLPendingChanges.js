/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACLPendingChanges from './ACLPendingChanges';

/**
 * The ACLPendingChanges model module.
 * @module model/ACLPendingChanges
 * @version 2021-01-01
 */
class ACLPendingChanges {
    /**
     * Constructs a new <code>ACLPendingChanges</code>.
     * @alias module:model/ACLPendingChanges
     * @implements module:model/ACLPendingChanges
     */
    constructor() { 
        ACLPendingChanges.initialize(this);
        ACLPendingChanges.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ACLPendingChanges</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ACLPendingChanges} obj Optional instance to populate.
     * @return {module:model/ACLPendingChanges} The populated <code>ACLPendingChanges</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ACLPendingChanges();
            ACLPendingChanges.constructFromObject(data, obj);

            if (data.hasOwnProperty('UserNamesToRemove')) {
                obj['UserNamesToRemove'] = ApiClient.convertToType(data['UserNamesToRemove'], Array);
            }
            if (data.hasOwnProperty('UserNamesToAdd')) {
                obj['UserNamesToAdd'] = ApiClient.convertToType(data['UserNamesToAdd'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ACLPendingChanges</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ACLPendingChanges</code>.
     */
    static validateJSON(data) {
        // validate the optional field `UserNamesToRemove`
        if (data['UserNamesToRemove']) { // data not null
          Array.validateJSON(data['UserNamesToRemove']);
        }
        // validate the optional field `UserNamesToAdd`
        if (data['UserNamesToAdd']) { // data not null
          Array.validateJSON(data['UserNamesToAdd']);
        }

        return true;
    }


}



/**
 * @member {Array} UserNamesToRemove
 */
ACLPendingChanges.prototype['UserNamesToRemove'] = undefined;

/**
 * @member {Array} UserNamesToAdd
 */
ACLPendingChanges.prototype['UserNamesToAdd'] = undefined;


// Implement ACLPendingChanges interface:
/**
 * @member {Array} UserNamesToRemove
 */
ACLPendingChanges.prototype['UserNamesToRemove'] = undefined;
/**
 * @member {Array} UserNamesToAdd
 */
ACLPendingChanges.prototype['UserNamesToAdd'] = undefined;




export default ACLPendingChanges;

