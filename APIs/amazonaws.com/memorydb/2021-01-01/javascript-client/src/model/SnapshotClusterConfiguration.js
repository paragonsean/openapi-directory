/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterConfiguration from './ClusterConfiguration';

/**
 * The SnapshotClusterConfiguration model module.
 * @module model/SnapshotClusterConfiguration
 * @version 2021-01-01
 */
class SnapshotClusterConfiguration {
    /**
     * Constructs a new <code>SnapshotClusterConfiguration</code>.
     * @alias module:model/SnapshotClusterConfiguration
     * @implements module:model/ClusterConfiguration
     */
    constructor() { 
        ClusterConfiguration.initialize(this);
        SnapshotClusterConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SnapshotClusterConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SnapshotClusterConfiguration} obj Optional instance to populate.
     * @return {module:model/SnapshotClusterConfiguration} The populated <code>SnapshotClusterConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SnapshotClusterConfiguration();
            ClusterConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('NodeType')) {
                obj['NodeType'] = ApiClient.convertToType(data['NodeType'], 'String');
            }
            if (data.hasOwnProperty('EngineVersion')) {
                obj['EngineVersion'] = ApiClient.convertToType(data['EngineVersion'], 'String');
            }
            if (data.hasOwnProperty('MaintenanceWindow')) {
                obj['MaintenanceWindow'] = ApiClient.convertToType(data['MaintenanceWindow'], 'String');
            }
            if (data.hasOwnProperty('TopicArn')) {
                obj['TopicArn'] = ApiClient.convertToType(data['TopicArn'], 'String');
            }
            if (data.hasOwnProperty('Port')) {
                obj['Port'] = ApiClient.convertToType(data['Port'], 'Number');
            }
            if (data.hasOwnProperty('ParameterGroupName')) {
                obj['ParameterGroupName'] = ApiClient.convertToType(data['ParameterGroupName'], 'String');
            }
            if (data.hasOwnProperty('SubnetGroupName')) {
                obj['SubnetGroupName'] = ApiClient.convertToType(data['SubnetGroupName'], 'String');
            }
            if (data.hasOwnProperty('VpcId')) {
                obj['VpcId'] = ApiClient.convertToType(data['VpcId'], 'String');
            }
            if (data.hasOwnProperty('SnapshotRetentionLimit')) {
                obj['SnapshotRetentionLimit'] = ApiClient.convertToType(data['SnapshotRetentionLimit'], 'Number');
            }
            if (data.hasOwnProperty('SnapshotWindow')) {
                obj['SnapshotWindow'] = ApiClient.convertToType(data['SnapshotWindow'], 'String');
            }
            if (data.hasOwnProperty('NumShards')) {
                obj['NumShards'] = ApiClient.convertToType(data['NumShards'], 'Number');
            }
            if (data.hasOwnProperty('Shards')) {
                obj['Shards'] = ApiClient.convertToType(data['Shards'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SnapshotClusterConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SnapshotClusterConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `NodeType`
        if (data['NodeType']) { // data not null
          String.validateJSON(data['NodeType']);
        }
        // validate the optional field `EngineVersion`
        if (data['EngineVersion']) { // data not null
          String.validateJSON(data['EngineVersion']);
        }
        // validate the optional field `MaintenanceWindow`
        if (data['MaintenanceWindow']) { // data not null
          String.validateJSON(data['MaintenanceWindow']);
        }
        // validate the optional field `TopicArn`
        if (data['TopicArn']) { // data not null
          String.validateJSON(data['TopicArn']);
        }
        // validate the optional field `Port`
        if (data['Port']) { // data not null
          Number.validateJSON(data['Port']);
        }
        // validate the optional field `ParameterGroupName`
        if (data['ParameterGroupName']) { // data not null
          String.validateJSON(data['ParameterGroupName']);
        }
        // validate the optional field `SubnetGroupName`
        if (data['SubnetGroupName']) { // data not null
          String.validateJSON(data['SubnetGroupName']);
        }
        // validate the optional field `VpcId`
        if (data['VpcId']) { // data not null
          String.validateJSON(data['VpcId']);
        }
        // validate the optional field `SnapshotRetentionLimit`
        if (data['SnapshotRetentionLimit']) { // data not null
          Number.validateJSON(data['SnapshotRetentionLimit']);
        }
        // validate the optional field `SnapshotWindow`
        if (data['SnapshotWindow']) { // data not null
          String.validateJSON(data['SnapshotWindow']);
        }
        // validate the optional field `NumShards`
        if (data['NumShards']) { // data not null
          Number.validateJSON(data['NumShards']);
        }
        // validate the optional field `Shards`
        if (data['Shards']) { // data not null
          Array.validateJSON(data['Shards']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
SnapshotClusterConfiguration.prototype['Name'] = undefined;

/**
 * @member {String} Description
 */
SnapshotClusterConfiguration.prototype['Description'] = undefined;

/**
 * @member {String} NodeType
 */
SnapshotClusterConfiguration.prototype['NodeType'] = undefined;

/**
 * @member {String} EngineVersion
 */
SnapshotClusterConfiguration.prototype['EngineVersion'] = undefined;

/**
 * @member {String} MaintenanceWindow
 */
SnapshotClusterConfiguration.prototype['MaintenanceWindow'] = undefined;

/**
 * @member {String} TopicArn
 */
SnapshotClusterConfiguration.prototype['TopicArn'] = undefined;

/**
 * @member {Number} Port
 */
SnapshotClusterConfiguration.prototype['Port'] = undefined;

/**
 * @member {String} ParameterGroupName
 */
SnapshotClusterConfiguration.prototype['ParameterGroupName'] = undefined;

/**
 * @member {String} SubnetGroupName
 */
SnapshotClusterConfiguration.prototype['SubnetGroupName'] = undefined;

/**
 * @member {String} VpcId
 */
SnapshotClusterConfiguration.prototype['VpcId'] = undefined;

/**
 * @member {Number} SnapshotRetentionLimit
 */
SnapshotClusterConfiguration.prototype['SnapshotRetentionLimit'] = undefined;

/**
 * @member {String} SnapshotWindow
 */
SnapshotClusterConfiguration.prototype['SnapshotWindow'] = undefined;

/**
 * @member {Number} NumShards
 */
SnapshotClusterConfiguration.prototype['NumShards'] = undefined;

/**
 * @member {Array} Shards
 */
SnapshotClusterConfiguration.prototype['Shards'] = undefined;


// Implement ClusterConfiguration interface:
/**
 * @member {String} Name
 */
ClusterConfiguration.prototype['Name'] = undefined;
/**
 * @member {String} Description
 */
ClusterConfiguration.prototype['Description'] = undefined;
/**
 * @member {String} NodeType
 */
ClusterConfiguration.prototype['NodeType'] = undefined;
/**
 * @member {String} EngineVersion
 */
ClusterConfiguration.prototype['EngineVersion'] = undefined;
/**
 * @member {String} MaintenanceWindow
 */
ClusterConfiguration.prototype['MaintenanceWindow'] = undefined;
/**
 * @member {String} TopicArn
 */
ClusterConfiguration.prototype['TopicArn'] = undefined;
/**
 * @member {Number} Port
 */
ClusterConfiguration.prototype['Port'] = undefined;
/**
 * @member {String} ParameterGroupName
 */
ClusterConfiguration.prototype['ParameterGroupName'] = undefined;
/**
 * @member {String} SubnetGroupName
 */
ClusterConfiguration.prototype['SubnetGroupName'] = undefined;
/**
 * @member {String} VpcId
 */
ClusterConfiguration.prototype['VpcId'] = undefined;
/**
 * @member {Number} SnapshotRetentionLimit
 */
ClusterConfiguration.prototype['SnapshotRetentionLimit'] = undefined;
/**
 * @member {String} SnapshotWindow
 */
ClusterConfiguration.prototype['SnapshotWindow'] = undefined;
/**
 * @member {Number} NumShards
 */
ClusterConfiguration.prototype['NumShards'] = undefined;
/**
 * @member {Array} Shards
 */
ClusterConfiguration.prototype['Shards'] = undefined;




export default SnapshotClusterConfiguration;

