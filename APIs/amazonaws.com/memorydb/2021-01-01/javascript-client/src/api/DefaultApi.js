/**
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchUpdateClusterRequest from '../model/BatchUpdateClusterRequest';
import BatchUpdateClusterResponse from '../model/BatchUpdateClusterResponse';
import CopySnapshotRequest from '../model/CopySnapshotRequest';
import CopySnapshotResponse from '../model/CopySnapshotResponse';
import CreateACLRequest from '../model/CreateACLRequest';
import CreateACLResponse from '../model/CreateACLResponse';
import CreateClusterRequest from '../model/CreateClusterRequest';
import CreateClusterResponse from '../model/CreateClusterResponse';
import CreateParameterGroupRequest from '../model/CreateParameterGroupRequest';
import CreateParameterGroupResponse from '../model/CreateParameterGroupResponse';
import CreateSnapshotRequest from '../model/CreateSnapshotRequest';
import CreateSnapshotResponse from '../model/CreateSnapshotResponse';
import CreateSubnetGroupRequest from '../model/CreateSubnetGroupRequest';
import CreateSubnetGroupResponse from '../model/CreateSubnetGroupResponse';
import CreateUserRequest from '../model/CreateUserRequest';
import CreateUserResponse from '../model/CreateUserResponse';
import DeleteACLRequest from '../model/DeleteACLRequest';
import DeleteACLResponse from '../model/DeleteACLResponse';
import DeleteClusterRequest from '../model/DeleteClusterRequest';
import DeleteClusterResponse from '../model/DeleteClusterResponse';
import DeleteParameterGroupRequest from '../model/DeleteParameterGroupRequest';
import DeleteParameterGroupResponse from '../model/DeleteParameterGroupResponse';
import DeleteSnapshotRequest from '../model/DeleteSnapshotRequest';
import DeleteSnapshotResponse from '../model/DeleteSnapshotResponse';
import DeleteSubnetGroupRequest from '../model/DeleteSubnetGroupRequest';
import DeleteSubnetGroupResponse from '../model/DeleteSubnetGroupResponse';
import DeleteUserRequest from '../model/DeleteUserRequest';
import DeleteUserResponse from '../model/DeleteUserResponse';
import DescribeACLsRequest from '../model/DescribeACLsRequest';
import DescribeACLsResponse from '../model/DescribeACLsResponse';
import DescribeClustersRequest from '../model/DescribeClustersRequest';
import DescribeClustersResponse from '../model/DescribeClustersResponse';
import DescribeEngineVersionsRequest from '../model/DescribeEngineVersionsRequest';
import DescribeEngineVersionsResponse from '../model/DescribeEngineVersionsResponse';
import DescribeEventsRequest from '../model/DescribeEventsRequest';
import DescribeEventsResponse from '../model/DescribeEventsResponse';
import DescribeParameterGroupsRequest from '../model/DescribeParameterGroupsRequest';
import DescribeParameterGroupsResponse from '../model/DescribeParameterGroupsResponse';
import DescribeParametersRequest from '../model/DescribeParametersRequest';
import DescribeParametersResponse from '../model/DescribeParametersResponse';
import DescribeReservedNodesOfferingsRequest from '../model/DescribeReservedNodesOfferingsRequest';
import DescribeReservedNodesOfferingsResponse from '../model/DescribeReservedNodesOfferingsResponse';
import DescribeReservedNodesRequest from '../model/DescribeReservedNodesRequest';
import DescribeReservedNodesResponse from '../model/DescribeReservedNodesResponse';
import DescribeServiceUpdatesRequest from '../model/DescribeServiceUpdatesRequest';
import DescribeServiceUpdatesResponse from '../model/DescribeServiceUpdatesResponse';
import DescribeSnapshotsRequest from '../model/DescribeSnapshotsRequest';
import DescribeSnapshotsResponse from '../model/DescribeSnapshotsResponse';
import DescribeSubnetGroupsRequest from '../model/DescribeSubnetGroupsRequest';
import DescribeSubnetGroupsResponse from '../model/DescribeSubnetGroupsResponse';
import DescribeUsersRequest from '../model/DescribeUsersRequest';
import DescribeUsersResponse from '../model/DescribeUsersResponse';
import FailoverShardRequest from '../model/FailoverShardRequest';
import FailoverShardResponse from '../model/FailoverShardResponse';
import ListAllowedNodeTypeUpdatesRequest from '../model/ListAllowedNodeTypeUpdatesRequest';
import ListAllowedNodeTypeUpdatesResponse from '../model/ListAllowedNodeTypeUpdatesResponse';
import ListTagsRequest from '../model/ListTagsRequest';
import ListTagsResponse from '../model/ListTagsResponse';
import PurchaseReservedNodesOfferingRequest from '../model/PurchaseReservedNodesOfferingRequest';
import PurchaseReservedNodesOfferingResponse from '../model/PurchaseReservedNodesOfferingResponse';
import ResetParameterGroupRequest from '../model/ResetParameterGroupRequest';
import ResetParameterGroupResponse from '../model/ResetParameterGroupResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import TagResourceResponse from '../model/TagResourceResponse';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UntagResourceResponse from '../model/UntagResourceResponse';
import UpdateACLRequest from '../model/UpdateACLRequest';
import UpdateACLResponse from '../model/UpdateACLResponse';
import UpdateClusterRequest from '../model/UpdateClusterRequest';
import UpdateClusterResponse from '../model/UpdateClusterResponse';
import UpdateParameterGroupRequest from '../model/UpdateParameterGroupRequest';
import UpdateParameterGroupResponse from '../model/UpdateParameterGroupResponse';
import UpdateSubnetGroupRequest from '../model/UpdateSubnetGroupRequest';
import UpdateSubnetGroupResponse from '../model/UpdateSubnetGroupResponse';
import UpdateUserRequest from '../model/UpdateUserRequest';
import UpdateUserResponse from '../model/UpdateUserResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-01-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchUpdateCluster operation.
     * @callback module:api/DefaultApi~batchUpdateClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates\">Applying the service updates</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchUpdateClusterRequest} batchUpdateClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateClusterResponse}
     */
    batchUpdateCluster(xAmzTarget, batchUpdateClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchUpdateCluster");
      }
      // verify the required parameter 'batchUpdateClusterRequest' is set
      if (batchUpdateClusterRequest === undefined || batchUpdateClusterRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateClusterRequest' when calling batchUpdateCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateClusterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.BatchUpdateCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copySnapshot operation.
     * @callback module:api/DefaultApi~copySnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopySnapshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Makes a copy of an existing snapshot.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CopySnapshotRequest} copySnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~copySnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopySnapshotResponse}
     */
    copySnapshot(xAmzTarget, copySnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = copySnapshotRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling copySnapshot");
      }
      // verify the required parameter 'copySnapshotRequest' is set
      if (copySnapshotRequest === undefined || copySnapshotRequest === null) {
        throw new Error("Missing the required parameter 'copySnapshotRequest' when calling copySnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopySnapshotResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CopySnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createACL operation.
     * @callback module:api/DefaultApi~createACLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateACLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Access Control List. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\">Authenticating users with Access Contol Lists (ACLs)</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateACLRequest} createACLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createACLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateACLResponse}
     */
    createACL(xAmzTarget, createACLRequest, opts, callback) {
      opts = opts || {};
      let postBody = createACLRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createACL");
      }
      // verify the required parameter 'createACLRequest' is set
      if (createACLRequest === undefined || createACLRequest === null) {
        throw new Error("Missing the required parameter 'createACLRequest' when calling createACL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateACLResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CreateACL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCluster operation.
     * @callback module:api/DefaultApi~createClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateClusterRequest} createClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterResponse}
     */
    createCluster(xAmzTarget, createClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createCluster");
      }
      // verify the required parameter 'createClusterRequest' is set
      if (createClusterRequest === undefined || createClusterRequest === null) {
        throw new Error("Missing the required parameter 'createClusterRequest' when calling createCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CreateCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createParameterGroup operation.
     * @callback module:api/DefaultApi~createParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateParameterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html\">Configuring engine parameters using parameter groups</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateParameterGroupRequest} createParameterGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateParameterGroupResponse}
     */
    createParameterGroup(xAmzTarget, createParameterGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createParameterGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createParameterGroup");
      }
      // verify the required parameter 'createParameterGroupRequest' is set
      if (createParameterGroupRequest === undefined || createParameterGroupRequest === null) {
        throw new Error("Missing the required parameter 'createParameterGroupRequest' when calling createParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateParameterGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CreateParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSnapshot operation.
     * @callback module:api/DefaultApi~createSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSnapshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a copy of an entire cluster at a specific moment in time.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSnapshotRequest} createSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSnapshotResponse}
     */
    createSnapshot(xAmzTarget, createSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSnapshotRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSnapshot");
      }
      // verify the required parameter 'createSnapshotRequest' is set
      if (createSnapshotRequest === undefined || createSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'createSnapshotRequest' when calling createSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSnapshotResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CreateSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubnetGroup operation.
     * @callback module:api/DefaultApi~createSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubnetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html\">Subnets and subnet groups</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSubnetGroupRequest} createSubnetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubnetGroupResponse}
     */
    createSubnetGroup(xAmzTarget, createSubnetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSubnetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSubnetGroup");
      }
      // verify the required parameter 'createSubnetGroupRequest' is set
      if (createSubnetGroupRequest === undefined || createSubnetGroupRequest === null) {
        throw new Error("Missing the required parameter 'createSubnetGroupRequest' when calling createSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSubnetGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CreateSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a MemoryDB user. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\">Authenticating users with Access Contol Lists (ACLs)</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserResponse}
     */
    createUser(xAmzTarget, createUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUser");
      }
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.CreateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteACL operation.
     * @callback module:api/DefaultApi~deleteACLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteACLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\">Authenticating users with Access Contol Lists (ACLs)</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteACLRequest} deleteACLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteACLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteACLResponse}
     */
    deleteACL(xAmzTarget, deleteACLRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteACLRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteACL");
      }
      // verify the required parameter 'deleteACLRequest' is set
      if (deleteACLRequest === undefined || deleteACLRequest === null) {
        throw new Error("Missing the required parameter 'deleteACLRequest' when calling deleteACL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteACLResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DeleteACL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCluster operation.
     * @callback module:api/DefaultApi~deleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a cluster. It also deletes all associated nodes and node endpoints
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteClusterRequest} deleteClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterResponse}
     */
    deleteCluster(xAmzTarget, deleteClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteCluster");
      }
      // verify the required parameter 'deleteClusterRequest' is set
      if (deleteClusterRequest === undefined || deleteClusterRequest === null) {
        throw new Error("Missing the required parameter 'deleteClusterRequest' when calling deleteCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteClusterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DeleteCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParameterGroup operation.
     * @callback module:api/DefaultApi~deleteParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteParameterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteParameterGroupRequest} deleteParameterGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteParameterGroupResponse}
     */
    deleteParameterGroup(xAmzTarget, deleteParameterGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteParameterGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteParameterGroup");
      }
      // verify the required parameter 'deleteParameterGroupRequest' is set
      if (deleteParameterGroupRequest === undefined || deleteParameterGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteParameterGroupRequest' when calling deleteParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteParameterGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DeleteParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnapshot operation.
     * @callback module:api/DefaultApi~deleteSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSnapshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSnapshotRequest} deleteSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSnapshotResponse}
     */
    deleteSnapshot(xAmzTarget, deleteSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSnapshotRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSnapshot");
      }
      // verify the required parameter 'deleteSnapshotRequest' is set
      if (deleteSnapshotRequest === undefined || deleteSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'deleteSnapshotRequest' when calling deleteSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteSnapshotResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DeleteSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubnetGroup operation.
     * @callback module:api/DefaultApi~deleteSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSubnetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSubnetGroupRequest} deleteSubnetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSubnetGroupResponse}
     */
    deleteSubnetGroup(xAmzTarget, deleteSubnetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSubnetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSubnetGroup");
      }
      // verify the required parameter 'deleteSubnetGroupRequest' is set
      if (deleteSubnetGroupRequest === undefined || deleteSubnetGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteSubnetGroupRequest' when calling deleteSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteSubnetGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DeleteSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteUserRequest} deleteUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUserResponse}
     */
    deleteUser(xAmzTarget, deleteUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUser");
      }
      // verify the required parameter 'deleteUserRequest' is set
      if (deleteUserRequest === undefined || deleteUserRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserRequest' when calling deleteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteUserResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DeleteUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeACLs operation.
     * @callback module:api/DefaultApi~describeACLsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeACLsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of ACLs
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeACLsRequest} describeACLsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeACLsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeACLsResponse}
     */
    describeACLs(xAmzTarget, describeACLsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeACLsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeACLs");
      }
      // verify the required parameter 'describeACLsRequest' is set
      if (describeACLsRequest === undefined || describeACLsRequest === null) {
        throw new Error("Missing the required parameter 'describeACLsRequest' when calling describeACLs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeACLsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeACLs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeClusters operation.
     * @callback module:api/DefaultApi~describeClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClustersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeClustersRequest} describeClustersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClustersResponse}
     */
    describeClusters(xAmzTarget, describeClustersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeClustersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeClusters");
      }
      // verify the required parameter 'describeClustersRequest' is set
      if (describeClustersRequest === undefined || describeClustersRequest === null) {
        throw new Error("Missing the required parameter 'describeClustersRequest' when calling describeClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeClustersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeClusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEngineVersions operation.
     * @callback module:api/DefaultApi~describeEngineVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEngineVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the available Redis engine versions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEngineVersionsRequest} describeEngineVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeEngineVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEngineVersionsResponse}
     */
    describeEngineVersions(xAmzTarget, describeEngineVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEngineVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEngineVersions");
      }
      // verify the required parameter 'describeEngineVersionsRequest' is set
      if (describeEngineVersionsRequest === undefined || describeEngineVersionsRequest === null) {
        throw new Error("Missing the required parameter 'describeEngineVersionsRequest' when calling describeEngineVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEngineVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeEngineVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEvents operation.
     * @callback module:api/DefaultApi~describeEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEventsRequest} describeEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEventsResponse}
     */
    describeEvents(xAmzTarget, describeEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEventsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEvents");
      }
      // verify the required parameter 'describeEventsRequest' is set
      if (describeEventsRequest === undefined || describeEventsRequest === null) {
        throw new Error("Missing the required parameter 'describeEventsRequest' when calling describeEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEventsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeParameterGroups operation.
     * @callback module:api/DefaultApi~describeParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeParameterGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeParameterGroupsRequest} describeParameterGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeParameterGroupsResponse}
     */
    describeParameterGroups(xAmzTarget, describeParameterGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeParameterGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeParameterGroups");
      }
      // verify the required parameter 'describeParameterGroupsRequest' is set
      if (describeParameterGroupsRequest === undefined || describeParameterGroupsRequest === null) {
        throw new Error("Missing the required parameter 'describeParameterGroupsRequest' when calling describeParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeParameterGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeParameterGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeParameters operation.
     * @callback module:api/DefaultApi~describeParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the detailed parameter list for a particular parameter group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeParametersRequest} describeParametersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeParametersResponse}
     */
    describeParameters(xAmzTarget, describeParametersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeParametersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeParameters");
      }
      // verify the required parameter 'describeParametersRequest' is set
      if (describeParametersRequest === undefined || describeParametersRequest === null) {
        throw new Error("Missing the required parameter 'describeParametersRequest' when calling describeParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeParametersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservedNodes operation.
     * @callback module:api/DefaultApi~describeReservedNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedNodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about reserved nodes for this account, or about a specified reserved node.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeReservedNodesRequest} describeReservedNodesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeReservedNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedNodesResponse}
     */
    describeReservedNodes(xAmzTarget, describeReservedNodesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeReservedNodesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeReservedNodes");
      }
      // verify the required parameter 'describeReservedNodesRequest' is set
      if (describeReservedNodesRequest === undefined || describeReservedNodesRequest === null) {
        throw new Error("Missing the required parameter 'describeReservedNodesRequest' when calling describeReservedNodes");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeReservedNodesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeReservedNodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservedNodesOfferings operation.
     * @callback module:api/DefaultApi~describeReservedNodesOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedNodesOfferingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available reserved node offerings.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeReservedNodesOfferingsRequest} describeReservedNodesOfferingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeReservedNodesOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedNodesOfferingsResponse}
     */
    describeReservedNodesOfferings(xAmzTarget, describeReservedNodesOfferingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeReservedNodesOfferingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeReservedNodesOfferings");
      }
      // verify the required parameter 'describeReservedNodesOfferingsRequest' is set
      if (describeReservedNodesOfferingsRequest === undefined || describeReservedNodesOfferingsRequest === null) {
        throw new Error("Missing the required parameter 'describeReservedNodesOfferingsRequest' when calling describeReservedNodesOfferings");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeReservedNodesOfferingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeReservedNodesOfferings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeServiceUpdates operation.
     * @callback module:api/DefaultApi~describeServiceUpdatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceUpdatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of the service updates
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeServiceUpdatesRequest} describeServiceUpdatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeServiceUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceUpdatesResponse}
     */
    describeServiceUpdates(xAmzTarget, describeServiceUpdatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeServiceUpdatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeServiceUpdates");
      }
      // verify the required parameter 'describeServiceUpdatesRequest' is set
      if (describeServiceUpdatesRequest === undefined || describeServiceUpdatesRequest === null) {
        throw new Error("Missing the required parameter 'describeServiceUpdatesRequest' when calling describeServiceUpdates");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeServiceUpdatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeServiceUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSnapshots operation.
     * @callback module:api/DefaultApi~describeSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSnapshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSnapshotsRequest} describeSnapshotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSnapshotsResponse}
     */
    describeSnapshots(xAmzTarget, describeSnapshotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSnapshotsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSnapshots");
      }
      // verify the required parameter 'describeSnapshotsRequest' is set
      if (describeSnapshotsRequest === undefined || describeSnapshotsRequest === null) {
        throw new Error("Missing the required parameter 'describeSnapshotsRequest' when calling describeSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSnapshotsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSubnetGroups operation.
     * @callback module:api/DefaultApi~describeSubnetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSubnetGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSubnetGroupsRequest} describeSubnetGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeSubnetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSubnetGroupsResponse}
     */
    describeSubnetGroups(xAmzTarget, describeSubnetGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSubnetGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSubnetGroups");
      }
      // verify the required parameter 'describeSubnetGroupsRequest' is set
      if (describeSubnetGroupsRequest === undefined || describeSubnetGroupsRequest === null) {
        throw new Error("Missing the required parameter 'describeSubnetGroupsRequest' when calling describeSubnetGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSubnetGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeSubnetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUsers operation.
     * @callback module:api/DefaultApi~describeUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUsersRequest} describeUsersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUsersResponse}
     */
    describeUsers(xAmzTarget, describeUsersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUsersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUsers");
      }
      // verify the required parameter 'describeUsersRequest' is set
      if (describeUsersRequest === undefined || describeUsersRequest === null) {
        throw new Error("Missing the required parameter 'describeUsersRequest' when calling describeUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUsersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.DescribeUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the failoverShard operation.
     * @callback module:api/DefaultApi~failoverShardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FailoverShardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to failover a shard. This API is designed for testing the behavior of your application in case of MemoryDB failover. It is not designed to be used as a production-level tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large scale operational events, Amazon may block this API. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/FailoverShardRequest} failoverShardRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~failoverShardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FailoverShardResponse}
     */
    failoverShard(xAmzTarget, failoverShardRequest, opts, callback) {
      opts = opts || {};
      let postBody = failoverShardRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling failoverShard");
      }
      // verify the required parameter 'failoverShardRequest' is set
      if (failoverShardRequest === undefined || failoverShardRequest === null) {
        throw new Error("Missing the required parameter 'failoverShardRequest' when calling failoverShard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FailoverShardResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.FailoverShard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllowedNodeTypeUpdates operation.
     * @callback module:api/DefaultApi~listAllowedNodeTypeUpdatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllowedNodeTypeUpdatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available node types that you can scale to from your cluster's current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAllowedNodeTypeUpdatesRequest} listAllowedNodeTypeUpdatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listAllowedNodeTypeUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllowedNodeTypeUpdatesResponse}
     */
    listAllowedNodeTypeUpdates(xAmzTarget, listAllowedNodeTypeUpdatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAllowedNodeTypeUpdatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAllowedNodeTypeUpdates");
      }
      // verify the required parameter 'listAllowedNodeTypeUpdatesRequest' is set
      if (listAllowedNodeTypeUpdatesRequest === undefined || listAllowedNodeTypeUpdatesRequest === null) {
        throw new Error("Missing the required parameter 'listAllowedNodeTypeUpdatesRequest' when calling listAllowedNodeTypeUpdates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAllowedNodeTypeUpdatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.ListAllowedNodeTypeUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/DefaultApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html\">Tagging your MemoryDB resources</a> 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsRequest} listTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsResponse}
     */
    listTags(xAmzTarget, listTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTags");
      }
      // verify the required parameter 'listTagsRequest' is set
      if (listTagsRequest === undefined || listTagsRequest === null) {
        throw new Error("Missing the required parameter 'listTagsRequest' when calling listTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.ListTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseReservedNodesOffering operation.
     * @callback module:api/DefaultApi~purchaseReservedNodesOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseReservedNodesOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PurchaseReservedNodesOfferingRequest} purchaseReservedNodesOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~purchaseReservedNodesOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseReservedNodesOfferingResponse}
     */
    purchaseReservedNodesOffering(xAmzTarget, purchaseReservedNodesOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = purchaseReservedNodesOfferingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling purchaseReservedNodesOffering");
      }
      // verify the required parameter 'purchaseReservedNodesOfferingRequest' is set
      if (purchaseReservedNodesOfferingRequest === undefined || purchaseReservedNodesOfferingRequest === null) {
        throw new Error("Missing the required parameter 'purchaseReservedNodesOfferingRequest' when calling purchaseReservedNodesOffering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseReservedNodesOfferingResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.PurchaseReservedNodesOffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetParameterGroup operation.
     * @callback module:api/DefaultApi~resetParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetParameterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ResetParameterGroupRequest} resetParameterGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetParameterGroupResponse}
     */
    resetParameterGroup(xAmzTarget, resetParameterGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = resetParameterGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling resetParameterGroup");
      }
      // verify the required parameter 'resetParameterGroupRequest' is set
      if (resetParameterGroupRequest === undefined || resetParameterGroupRequest === null) {
        throw new Error("Missing the required parameter 'resetParameterGroupRequest' when calling resetParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResetParameterGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.ResetParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html\">Resource-level permissions</a>.</p> <p>For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html\">Using Cost Allocation Tags</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagResourceResponse}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UntagResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this operation to remove tags on a resource
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UntagResourceResponse}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UntagResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateACL operation.
     * @callback module:api/DefaultApi~updateACLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateACLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the list of users that belong to the Access Control List.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateACLRequest} updateACLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateACLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateACLResponse}
     */
    updateACL(xAmzTarget, updateACLRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateACLRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateACL");
      }
      // verify the required parameter 'updateACLRequest' is set
      if (updateACLRequest === undefined || updateACLRequest === null) {
        throw new Error("Missing the required parameter 'updateACLRequest' when calling updateACL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateACLResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.UpdateACL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCluster operation.
     * @callback module:api/DefaultApi~updateClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateClusterRequest} updateClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateClusterResponse}
     */
    updateCluster(xAmzTarget, updateClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateCluster");
      }
      // verify the required parameter 'updateClusterRequest' is set
      if (updateClusterRequest === undefined || updateClusterRequest === null) {
        throw new Error("Missing the required parameter 'updateClusterRequest' when calling updateCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateClusterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.UpdateCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParameterGroup operation.
     * @callback module:api/DefaultApi~updateParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateParameterGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateParameterGroupRequest} updateParameterGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateParameterGroupResponse}
     */
    updateParameterGroup(xAmzTarget, updateParameterGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateParameterGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateParameterGroup");
      }
      // verify the required parameter 'updateParameterGroupRequest' is set
      if (updateParameterGroupRequest === undefined || updateParameterGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateParameterGroupRequest' when calling updateParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateParameterGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.UpdateParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubnetGroup operation.
     * @callback module:api/DefaultApi~updateSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSubnetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a subnet group. For more information, see <a href=\"https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html\">Updating a subnet group</a> 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateSubnetGroupRequest} updateSubnetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSubnetGroupResponse}
     */
    updateSubnetGroup(xAmzTarget, updateSubnetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSubnetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateSubnetGroup");
      }
      // verify the required parameter 'updateSubnetGroupRequest' is set
      if (updateSubnetGroupRequest === undefined || updateSubnetGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateSubnetGroupRequest' when calling updateSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSubnetGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.UpdateSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes user password(s) and/or access string.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateUserRequest} updateUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUserResponse}
     */
    updateUser(xAmzTarget, updateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateUser");
      }
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUserResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonMemoryDB.UpdateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
