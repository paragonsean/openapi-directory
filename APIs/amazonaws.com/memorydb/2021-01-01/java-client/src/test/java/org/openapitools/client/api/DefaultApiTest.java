/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchUpdateClusterRequest;
import org.openapitools.client.model.BatchUpdateClusterResponse;
import org.openapitools.client.model.CopySnapshotRequest;
import org.openapitools.client.model.CopySnapshotResponse;
import org.openapitools.client.model.CreateACLRequest;
import org.openapitools.client.model.CreateACLResponse;
import org.openapitools.client.model.CreateClusterRequest;
import org.openapitools.client.model.CreateClusterResponse;
import org.openapitools.client.model.CreateParameterGroupRequest;
import org.openapitools.client.model.CreateParameterGroupResponse;
import org.openapitools.client.model.CreateSnapshotRequest;
import org.openapitools.client.model.CreateSnapshotResponse;
import org.openapitools.client.model.CreateSubnetGroupRequest;
import org.openapitools.client.model.CreateSubnetGroupResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.DeleteACLRequest;
import org.openapitools.client.model.DeleteACLResponse;
import org.openapitools.client.model.DeleteClusterRequest;
import org.openapitools.client.model.DeleteClusterResponse;
import org.openapitools.client.model.DeleteParameterGroupRequest;
import org.openapitools.client.model.DeleteParameterGroupResponse;
import org.openapitools.client.model.DeleteSnapshotRequest;
import org.openapitools.client.model.DeleteSnapshotResponse;
import org.openapitools.client.model.DeleteSubnetGroupRequest;
import org.openapitools.client.model.DeleteSubnetGroupResponse;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DeleteUserResponse;
import org.openapitools.client.model.DescribeACLsRequest;
import org.openapitools.client.model.DescribeACLsResponse;
import org.openapitools.client.model.DescribeClustersRequest;
import org.openapitools.client.model.DescribeClustersResponse;
import org.openapitools.client.model.DescribeEngineVersionsRequest;
import org.openapitools.client.model.DescribeEngineVersionsResponse;
import org.openapitools.client.model.DescribeEventsRequest;
import org.openapitools.client.model.DescribeEventsResponse;
import org.openapitools.client.model.DescribeParameterGroupsRequest;
import org.openapitools.client.model.DescribeParameterGroupsResponse;
import org.openapitools.client.model.DescribeParametersRequest;
import org.openapitools.client.model.DescribeParametersResponse;
import org.openapitools.client.model.DescribeReservedNodesOfferingsRequest;
import org.openapitools.client.model.DescribeReservedNodesOfferingsResponse;
import org.openapitools.client.model.DescribeReservedNodesRequest;
import org.openapitools.client.model.DescribeReservedNodesResponse;
import org.openapitools.client.model.DescribeServiceUpdatesRequest;
import org.openapitools.client.model.DescribeServiceUpdatesResponse;
import org.openapitools.client.model.DescribeSnapshotsRequest;
import org.openapitools.client.model.DescribeSnapshotsResponse;
import org.openapitools.client.model.DescribeSubnetGroupsRequest;
import org.openapitools.client.model.DescribeSubnetGroupsResponse;
import org.openapitools.client.model.DescribeUsersRequest;
import org.openapitools.client.model.DescribeUsersResponse;
import org.openapitools.client.model.FailoverShardRequest;
import org.openapitools.client.model.FailoverShardResponse;
import org.openapitools.client.model.ListAllowedNodeTypeUpdatesRequest;
import org.openapitools.client.model.ListAllowedNodeTypeUpdatesResponse;
import org.openapitools.client.model.ListTagsRequest;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.PurchaseReservedNodesOfferingRequest;
import org.openapitools.client.model.PurchaseReservedNodesOfferingResponse;
import org.openapitools.client.model.ResetParameterGroupRequest;
import org.openapitools.client.model.ResetParameterGroupResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TagResourceResponse;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UntagResourceResponse;
import org.openapitools.client.model.UpdateACLRequest;
import org.openapitools.client.model.UpdateACLResponse;
import org.openapitools.client.model.UpdateClusterRequest;
import org.openapitools.client.model.UpdateClusterResponse;
import org.openapitools.client.model.UpdateParameterGroupRequest;
import org.openapitools.client.model.UpdateParameterGroupResponse;
import org.openapitools.client.model.UpdateSubnetGroupRequest;
import org.openapitools.client.model.UpdateSubnetGroupResponse;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUserResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates\&quot;&gt;Applying the service updates&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateClusterTest() throws ApiException {
        String xAmzTarget = null;
        BatchUpdateClusterRequest batchUpdateClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateClusterResponse response = api.batchUpdateCluster(xAmzTarget, batchUpdateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Makes a copy of an existing snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copySnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CopySnapshotRequest copySnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopySnapshotResponse response = api.copySnapshot(xAmzTarget, copySnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Access Control List. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACLTest() throws ApiException {
        String xAmzTarget = null;
        CreateACLRequest createACLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateACLResponse response = api.createACL(xAmzTarget, createACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClusterTest() throws ApiException {
        String xAmzTarget = null;
        CreateClusterRequest createClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterResponse response = api.createCluster(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html\&quot;&gt;Configuring engine parameters using parameter groups&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createParameterGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateParameterGroupRequest createParameterGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateParameterGroupResponse response = api.createParameterGroup(xAmzTarget, createParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a copy of an entire cluster at a specific moment in time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateSnapshotRequest createSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSnapshotResponse response = api.createSnapshot(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html\&quot;&gt;Subnets and subnet groups&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubnetGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateSubnetGroupRequest createSubnetGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSubnetGroupResponse response = api.createSubnetGroup(xAmzTarget, createSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a MemoryDB user. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserResponse response = api.createUser(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteACLTest() throws ApiException {
        String xAmzTarget = null;
        DeleteACLRequest deleteACLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteACLResponse response = api.deleteACL(xAmzTarget, deleteACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a cluster. It also deletes all associated nodes and node endpoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClusterTest() throws ApiException {
        String xAmzTarget = null;
        DeleteClusterRequest deleteClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteClusterResponse response = api.deleteCluster(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteParameterGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteParameterGroupRequest deleteParameterGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteParameterGroupResponse response = api.deleteParameterGroup(xAmzTarget, deleteParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSnapshotRequest deleteSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSnapshotResponse response = api.deleteSnapshot(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubnetGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSubnetGroupRequest deleteSubnetGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSubnetGroupResponse response = api.deleteSubnetGroup(xAmzTarget, deleteSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserRequest deleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteUserResponse response = api.deleteUser(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of ACLs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeACLsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeACLsRequest describeACLsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeACLsResponse response = api.describeACLs(xAmzTarget, describeACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClustersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeClustersRequest describeClustersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeClustersResponse response = api.describeClusters(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the available Redis engine versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEngineVersionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEngineVersionsRequest describeEngineVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeEngineVersionsResponse response = api.describeEngineVersions(xAmzTarget, describeEngineVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEventsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEventsRequest describeEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeEventsResponse response = api.describeEvents(xAmzTarget, describeEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeParameterGroupsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeParameterGroupsRequest describeParameterGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeParameterGroupsResponse response = api.describeParameterGroups(xAmzTarget, describeParameterGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeParametersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeParametersRequest describeParametersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeParametersResponse response = api.describeParameters(xAmzTarget, describeParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about reserved nodes for this account, or about a specified reserved node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReservedNodesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReservedNodesRequest describeReservedNodesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeReservedNodesResponse response = api.describeReservedNodes(xAmzTarget, describeReservedNodesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists available reserved node offerings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReservedNodesOfferingsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReservedNodesOfferingsRequest describeReservedNodesOfferingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeReservedNodesOfferingsResponse response = api.describeReservedNodesOfferings(xAmzTarget, describeReservedNodesOfferingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns details of the service updates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServiceUpdatesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeServiceUpdatesRequest describeServiceUpdatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeServiceUpdatesResponse response = api.describeServiceUpdates(xAmzTarget, describeServiceUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSnapshotsRequest describeSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeSnapshotsResponse response = api.describeSnapshots(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSubnetGroupsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSubnetGroupsRequest describeSubnetGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeSubnetGroupsResponse response = api.describeSubnetGroups(xAmzTarget, describeSubnetGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUsersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUsersRequest describeUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeUsersResponse response = api.describeUsers(xAmzTarget, describeUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Used to failover a shard. This API is designed for testing the behavior of your application in case of MemoryDB failover. It is not designed to be used as a production-level tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large scale operational events, Amazon may block this API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverShardTest() throws ApiException {
        String xAmzTarget = null;
        FailoverShardRequest failoverShardRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverShardResponse response = api.failoverShard(xAmzTarget, failoverShardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all available node types that you can scale to from your cluster&#39;s current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllowedNodeTypeUpdatesTest() throws ApiException {
        String xAmzTarget = null;
        ListAllowedNodeTypeUpdatesRequest listAllowedNodeTypeUpdatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAllowedNodeTypeUpdatesResponse response = api.listAllowedNodeTypeUpdates(xAmzTarget, listAllowedNodeTypeUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html\&quot;&gt;Tagging your MemoryDB resources&lt;/a&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsRequest listTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsResponse response = api.listTags(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseReservedNodesOfferingTest() throws ApiException {
        String xAmzTarget = null;
        PurchaseReservedNodesOfferingRequest purchaseReservedNodesOfferingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseReservedNodesOfferingResponse response = api.purchaseReservedNodesOffering(xAmzTarget, purchaseReservedNodesOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetParameterGroupTest() throws ApiException {
        String xAmzTarget = null;
        ResetParameterGroupRequest resetParameterGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetParameterGroupResponse response = api.resetParameterGroup(xAmzTarget, resetParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TagResourceResponse response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Use this operation to remove tags on a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UntagResourceResponse response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the list of users that belong to the Access Control List.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACLTest() throws ApiException {
        String xAmzTarget = null;
        UpdateACLRequest updateACLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateACLResponse response = api.updateACL(xAmzTarget, updateACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClusterTest() throws ApiException {
        String xAmzTarget = null;
        UpdateClusterRequest updateClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateClusterResponse response = api.updateCluster(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParameterGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateParameterGroupRequest updateParameterGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateParameterGroupResponse response = api.updateParameterGroup(xAmzTarget, updateParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a subnet group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html\&quot;&gt;Updating a subnet group&lt;/a&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubnetGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSubnetGroupRequest updateSubnetGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSubnetGroupResponse response = api.updateSubnetGroup(xAmzTarget, updateSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes user password(s) and/or access string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserRequest updateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserResponse response = api.updateUser(xAmzTarget, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
