/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateClusterRequestReplicaConfiguration;
import org.openapitools.client.model.UpdateClusterRequestShardConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UpdateClusterRequest
 */
public class UpdateClusterRequestTest {
    private final UpdateClusterRequest model = new UpdateClusterRequest();

    /**
     * Model tests for UpdateClusterRequest
     */
    @Test
    public void testUpdateClusterRequest() {
        // TODO: test UpdateClusterRequest
    }

    /**
     * Test the property 'clusterName'
     */
    @Test
    public void clusterNameTest() {
        // TODO: test clusterName
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'securityGroupIds'
     */
    @Test
    public void securityGroupIdsTest() {
        // TODO: test securityGroupIds
    }

    /**
     * Test the property 'maintenanceWindow'
     */
    @Test
    public void maintenanceWindowTest() {
        // TODO: test maintenanceWindow
    }

    /**
     * Test the property 'snsTopicArn'
     */
    @Test
    public void snsTopicArnTest() {
        // TODO: test snsTopicArn
    }

    /**
     * Test the property 'snsTopicStatus'
     */
    @Test
    public void snsTopicStatusTest() {
        // TODO: test snsTopicStatus
    }

    /**
     * Test the property 'parameterGroupName'
     */
    @Test
    public void parameterGroupNameTest() {
        // TODO: test parameterGroupName
    }

    /**
     * Test the property 'snapshotWindow'
     */
    @Test
    public void snapshotWindowTest() {
        // TODO: test snapshotWindow
    }

    /**
     * Test the property 'snapshotRetentionLimit'
     */
    @Test
    public void snapshotRetentionLimitTest() {
        // TODO: test snapshotRetentionLimit
    }

    /**
     * Test the property 'nodeType'
     */
    @Test
    public void nodeTypeTest() {
        // TODO: test nodeType
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'replicaConfiguration'
     */
    @Test
    public void replicaConfigurationTest() {
        // TODO: test replicaConfiguration
    }

    /**
     * Test the property 'shardConfiguration'
     */
    @Test
    public void shardConfigurationTest() {
        // TODO: test shardConfiguration
    }

    /**
     * Test the property 'acLName'
     */
    @Test
    public void acLNameTest() {
        // TODO: test acLName
    }

}
