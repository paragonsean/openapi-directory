/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ACLPendingChanges;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteACLResponseACL
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:10.082054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteACLResponseACL {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USER_NAMES = "UserNames";
  @SerializedName(SERIALIZED_NAME_USER_NAMES)
  private List userNames;

  public static final String SERIALIZED_NAME_MINIMUM_ENGINE_VERSION = "MinimumEngineVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ENGINE_VERSION)
  private String minimumEngineVersion;

  public static final String SERIALIZED_NAME_PENDING_CHANGES = "PendingChanges";
  @SerializedName(SERIALIZED_NAME_PENDING_CHANGES)
  private ACLPendingChanges pendingChanges;

  public static final String SERIALIZED_NAME_CLUSTERS = "Clusters";
  @SerializedName(SERIALIZED_NAME_CLUSTERS)
  private List clusters;

  public static final String SERIALIZED_NAME_A_R_N = "ARN";
  @SerializedName(SERIALIZED_NAME_A_R_N)
  private String ARN;

  public DeleteACLResponseACL() {
  }

  public DeleteACLResponseACL name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeleteACLResponseACL status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DeleteACLResponseACL userNames(List userNames) {
    this.userNames = userNames;
    return this;
  }

  /**
   * Get userNames
   * @return userNames
   */
  @javax.annotation.Nullable
  public List getUserNames() {
    return userNames;
  }

  public void setUserNames(List userNames) {
    this.userNames = userNames;
  }


  public DeleteACLResponseACL minimumEngineVersion(String minimumEngineVersion) {
    this.minimumEngineVersion = minimumEngineVersion;
    return this;
  }

  /**
   * Get minimumEngineVersion
   * @return minimumEngineVersion
   */
  @javax.annotation.Nullable
  public String getMinimumEngineVersion() {
    return minimumEngineVersion;
  }

  public void setMinimumEngineVersion(String minimumEngineVersion) {
    this.minimumEngineVersion = minimumEngineVersion;
  }


  public DeleteACLResponseACL pendingChanges(ACLPendingChanges pendingChanges) {
    this.pendingChanges = pendingChanges;
    return this;
  }

  /**
   * Get pendingChanges
   * @return pendingChanges
   */
  @javax.annotation.Nullable
  public ACLPendingChanges getPendingChanges() {
    return pendingChanges;
  }

  public void setPendingChanges(ACLPendingChanges pendingChanges) {
    this.pendingChanges = pendingChanges;
  }


  public DeleteACLResponseACL clusters(List clusters) {
    this.clusters = clusters;
    return this;
  }

  /**
   * Get clusters
   * @return clusters
   */
  @javax.annotation.Nullable
  public List getClusters() {
    return clusters;
  }

  public void setClusters(List clusters) {
    this.clusters = clusters;
  }


  public DeleteACLResponseACL ARN(String ARN) {
    this.ARN = ARN;
    return this;
  }

  /**
   * Get ARN
   * @return ARN
   */
  @javax.annotation.Nullable
  public String getARN() {
    return ARN;
  }

  public void setARN(String ARN) {
    this.ARN = ARN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteACLResponseACL deleteACLResponseACL = (DeleteACLResponseACL) o;
    return Objects.equals(this.name, deleteACLResponseACL.name) &&
        Objects.equals(this.status, deleteACLResponseACL.status) &&
        Objects.equals(this.userNames, deleteACLResponseACL.userNames) &&
        Objects.equals(this.minimumEngineVersion, deleteACLResponseACL.minimumEngineVersion) &&
        Objects.equals(this.pendingChanges, deleteACLResponseACL.pendingChanges) &&
        Objects.equals(this.clusters, deleteACLResponseACL.clusters) &&
        Objects.equals(this.ARN, deleteACLResponseACL.ARN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, status, userNames, minimumEngineVersion, pendingChanges, clusters, ARN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteACLResponseACL {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userNames: ").append(toIndentedString(userNames)).append("\n");
    sb.append("    minimumEngineVersion: ").append(toIndentedString(minimumEngineVersion)).append("\n");
    sb.append("    pendingChanges: ").append(toIndentedString(pendingChanges)).append("\n");
    sb.append("    clusters: ").append(toIndentedString(clusters)).append("\n");
    sb.append("    ARN: ").append(toIndentedString(ARN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("UserNames");
    openapiFields.add("MinimumEngineVersion");
    openapiFields.add("PendingChanges");
    openapiFields.add("Clusters");
    openapiFields.add("ARN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteACLResponseACL
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteACLResponseACL.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteACLResponseACL is not found in the empty JSON string", DeleteACLResponseACL.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteACLResponseACL.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteACLResponseACL` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `UserNames`
      if (jsonObj.get("UserNames") != null && !jsonObj.get("UserNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserNames"));
      }
      // validate the optional field `MinimumEngineVersion`
      if (jsonObj.get("MinimumEngineVersion") != null && !jsonObj.get("MinimumEngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MinimumEngineVersion"));
      }
      // validate the optional field `PendingChanges`
      if (jsonObj.get("PendingChanges") != null && !jsonObj.get("PendingChanges").isJsonNull()) {
        ACLPendingChanges.validateJsonElement(jsonObj.get("PendingChanges"));
      }
      // validate the optional field `Clusters`
      if (jsonObj.get("Clusters") != null && !jsonObj.get("Clusters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Clusters"));
      }
      // validate the optional field `ARN`
      if (jsonObj.get("ARN") != null && !jsonObj.get("ARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ARN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteACLResponseACL.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteACLResponseACL' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteACLResponseACL> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteACLResponseACL.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteACLResponseACL>() {
           @Override
           public void write(JsonWriter out, DeleteACLResponseACL value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteACLResponseACL read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteACLResponseACL given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteACLResponseACL
   * @throws IOException if the JSON string is invalid with respect to DeleteACLResponseACL
   */
  public static DeleteACLResponseACL fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteACLResponseACL.class);
  }

  /**
   * Convert an instance of DeleteACLResponseACL to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

