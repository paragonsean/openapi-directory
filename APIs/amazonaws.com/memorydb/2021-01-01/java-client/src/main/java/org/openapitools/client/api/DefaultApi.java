/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchUpdateClusterRequest;
import org.openapitools.client.model.BatchUpdateClusterResponse;
import org.openapitools.client.model.CopySnapshotRequest;
import org.openapitools.client.model.CopySnapshotResponse;
import org.openapitools.client.model.CreateACLRequest;
import org.openapitools.client.model.CreateACLResponse;
import org.openapitools.client.model.CreateClusterRequest;
import org.openapitools.client.model.CreateClusterResponse;
import org.openapitools.client.model.CreateParameterGroupRequest;
import org.openapitools.client.model.CreateParameterGroupResponse;
import org.openapitools.client.model.CreateSnapshotRequest;
import org.openapitools.client.model.CreateSnapshotResponse;
import org.openapitools.client.model.CreateSubnetGroupRequest;
import org.openapitools.client.model.CreateSubnetGroupResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.DeleteACLRequest;
import org.openapitools.client.model.DeleteACLResponse;
import org.openapitools.client.model.DeleteClusterRequest;
import org.openapitools.client.model.DeleteClusterResponse;
import org.openapitools.client.model.DeleteParameterGroupRequest;
import org.openapitools.client.model.DeleteParameterGroupResponse;
import org.openapitools.client.model.DeleteSnapshotRequest;
import org.openapitools.client.model.DeleteSnapshotResponse;
import org.openapitools.client.model.DeleteSubnetGroupRequest;
import org.openapitools.client.model.DeleteSubnetGroupResponse;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DeleteUserResponse;
import org.openapitools.client.model.DescribeACLsRequest;
import org.openapitools.client.model.DescribeACLsResponse;
import org.openapitools.client.model.DescribeClustersRequest;
import org.openapitools.client.model.DescribeClustersResponse;
import org.openapitools.client.model.DescribeEngineVersionsRequest;
import org.openapitools.client.model.DescribeEngineVersionsResponse;
import org.openapitools.client.model.DescribeEventsRequest;
import org.openapitools.client.model.DescribeEventsResponse;
import org.openapitools.client.model.DescribeParameterGroupsRequest;
import org.openapitools.client.model.DescribeParameterGroupsResponse;
import org.openapitools.client.model.DescribeParametersRequest;
import org.openapitools.client.model.DescribeParametersResponse;
import org.openapitools.client.model.DescribeReservedNodesOfferingsRequest;
import org.openapitools.client.model.DescribeReservedNodesOfferingsResponse;
import org.openapitools.client.model.DescribeReservedNodesRequest;
import org.openapitools.client.model.DescribeReservedNodesResponse;
import org.openapitools.client.model.DescribeServiceUpdatesRequest;
import org.openapitools.client.model.DescribeServiceUpdatesResponse;
import org.openapitools.client.model.DescribeSnapshotsRequest;
import org.openapitools.client.model.DescribeSnapshotsResponse;
import org.openapitools.client.model.DescribeSubnetGroupsRequest;
import org.openapitools.client.model.DescribeSubnetGroupsResponse;
import org.openapitools.client.model.DescribeUsersRequest;
import org.openapitools.client.model.DescribeUsersResponse;
import org.openapitools.client.model.FailoverShardRequest;
import org.openapitools.client.model.FailoverShardResponse;
import org.openapitools.client.model.ListAllowedNodeTypeUpdatesRequest;
import org.openapitools.client.model.ListAllowedNodeTypeUpdatesResponse;
import org.openapitools.client.model.ListTagsRequest;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.PurchaseReservedNodesOfferingRequest;
import org.openapitools.client.model.PurchaseReservedNodesOfferingResponse;
import org.openapitools.client.model.ResetParameterGroupRequest;
import org.openapitools.client.model.ResetParameterGroupResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TagResourceResponse;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UntagResourceResponse;
import org.openapitools.client.model.UpdateACLRequest;
import org.openapitools.client.model.UpdateACLResponse;
import org.openapitools.client.model.UpdateClusterRequest;
import org.openapitools.client.model.UpdateClusterResponse;
import org.openapitools.client.model.UpdateParameterGroupRequest;
import org.openapitools.client.model.UpdateParameterGroupResponse;
import org.openapitools.client.model.UpdateSubnetGroupRequest;
import org.openapitools.client.model.UpdateSubnetGroupResponse;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchUpdateCluster
     * @param xAmzTarget  (required)
     * @param batchUpdateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateClusterCall(String xAmzTarget, BatchUpdateClusterRequest batchUpdateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUpdateClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.BatchUpdateCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpdateClusterValidateBeforeCall(String xAmzTarget, BatchUpdateClusterRequest batchUpdateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchUpdateCluster(Async)");
        }

        // verify the required parameter 'batchUpdateClusterRequest' is set
        if (batchUpdateClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'batchUpdateClusterRequest' when calling batchUpdateCluster(Async)");
        }

        return batchUpdateClusterCall(xAmzTarget, batchUpdateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates\&quot;&gt;Applying the service updates&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param batchUpdateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchUpdateClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public BatchUpdateClusterResponse batchUpdateCluster(String xAmzTarget, BatchUpdateClusterRequest batchUpdateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchUpdateClusterResponse> localVarResp = batchUpdateClusterWithHttpInfo(xAmzTarget, batchUpdateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates\&quot;&gt;Applying the service updates&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param batchUpdateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchUpdateClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchUpdateClusterResponse> batchUpdateClusterWithHttpInfo(String xAmzTarget, BatchUpdateClusterRequest batchUpdateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchUpdateClusterValidateBeforeCall(xAmzTarget, batchUpdateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchUpdateClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates\&quot;&gt;Applying the service updates&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param batchUpdateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateClusterAsync(String xAmzTarget, BatchUpdateClusterRequest batchUpdateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchUpdateClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpdateClusterValidateBeforeCall(xAmzTarget, batchUpdateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchUpdateClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copySnapshot
     * @param xAmzTarget  (required)
     * @param copySnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySnapshotCall(String xAmzTarget, CopySnapshotRequest copySnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copySnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CopySnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copySnapshotValidateBeforeCall(String xAmzTarget, CopySnapshotRequest copySnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling copySnapshot(Async)");
        }

        // verify the required parameter 'copySnapshotRequest' is set
        if (copySnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'copySnapshotRequest' when calling copySnapshot(Async)");
        }

        return copySnapshotCall(xAmzTarget, copySnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Makes a copy of an existing snapshot.
     * @param xAmzTarget  (required)
     * @param copySnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CopySnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public CopySnapshotResponse copySnapshot(String xAmzTarget, CopySnapshotRequest copySnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CopySnapshotResponse> localVarResp = copySnapshotWithHttpInfo(xAmzTarget, copySnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Makes a copy of an existing snapshot.
     * @param xAmzTarget  (required)
     * @param copySnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CopySnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopySnapshotResponse> copySnapshotWithHttpInfo(String xAmzTarget, CopySnapshotRequest copySnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = copySnapshotValidateBeforeCall(xAmzTarget, copySnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CopySnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Makes a copy of an existing snapshot.
     * @param xAmzTarget  (required)
     * @param copySnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySnapshotAsync(String xAmzTarget, CopySnapshotRequest copySnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CopySnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = copySnapshotValidateBeforeCall(xAmzTarget, copySnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CopySnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createACL
     * @param xAmzTarget  (required)
     * @param createACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ACLAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ACLQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACLCall(String xAmzTarget, CreateACLRequest createACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CreateACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createACLValidateBeforeCall(String xAmzTarget, CreateACLRequest createACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createACL(Async)");
        }

        // verify the required parameter 'createACLRequest' is set
        if (createACLRequest == null) {
            throw new ApiException("Missing the required parameter 'createACLRequest' when calling createACL(Async)");
        }

        return createACLCall(xAmzTarget, createACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an Access Control List. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ACLAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ACLQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public CreateACLResponse createACL(String xAmzTarget, CreateACLRequest createACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateACLResponse> localVarResp = createACLWithHttpInfo(xAmzTarget, createACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an Access Control List. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ACLAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ACLQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateACLResponse> createACLWithHttpInfo(String xAmzTarget, CreateACLRequest createACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createACLValidateBeforeCall(xAmzTarget, createACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an Access Control List. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ACLAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ACLQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACLAsync(String xAmzTarget, CreateACLRequest createACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createACLValidateBeforeCall(xAmzTarget, createACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCluster
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidCredentialsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterCall(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CreateCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClusterValidateBeforeCall(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createCluster(Async)");
        }

        // verify the required parameter 'createClusterRequest' is set
        if (createClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'createClusterRequest' when calling createCluster(Async)");
        }

        return createClusterCall(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidCredentialsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateClusterResponse createCluster(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateClusterResponse> localVarResp = createClusterWithHttpInfo(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidCredentialsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClusterResponse> createClusterWithHttpInfo(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createClusterValidateBeforeCall(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
     * @param xAmzTarget  (required)
     * @param createClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidCredentialsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClusterAsync(String xAmzTarget, CreateClusterRequest createClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClusterValidateBeforeCall(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createParameterGroup
     * @param xAmzTarget  (required)
     * @param createParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParameterGroupCall(String xAmzTarget, CreateParameterGroupRequest createParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createParameterGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CreateParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createParameterGroupValidateBeforeCall(String xAmzTarget, CreateParameterGroupRequest createParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createParameterGroup(Async)");
        }

        // verify the required parameter 'createParameterGroupRequest' is set
        if (createParameterGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createParameterGroupRequest' when calling createParameterGroup(Async)");
        }

        return createParameterGroupCall(xAmzTarget, createParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html\&quot;&gt;Configuring engine parameters using parameter groups&lt;/a&gt;. 
     * @param xAmzTarget  (required)
     * @param createParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateParameterGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateParameterGroupResponse createParameterGroup(String xAmzTarget, CreateParameterGroupRequest createParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateParameterGroupResponse> localVarResp = createParameterGroupWithHttpInfo(xAmzTarget, createParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html\&quot;&gt;Configuring engine parameters using parameter groups&lt;/a&gt;. 
     * @param xAmzTarget  (required)
     * @param createParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateParameterGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateParameterGroupResponse> createParameterGroupWithHttpInfo(String xAmzTarget, CreateParameterGroupRequest createParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createParameterGroupValidateBeforeCall(xAmzTarget, createParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateParameterGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html\&quot;&gt;Configuring engine parameters using parameter groups&lt;/a&gt;. 
     * @param xAmzTarget  (required)
     * @param createParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParameterGroupAsync(String xAmzTarget, CreateParameterGroupRequest createParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateParameterGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createParameterGroupValidateBeforeCall(xAmzTarget, createParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateParameterGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSnapshot
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotCall(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CreateSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSnapshotValidateBeforeCall(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createSnapshot(Async)");
        }

        // verify the required parameter 'createSnapshotRequest' is set
        if (createSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'createSnapshotRequest' when calling createSnapshot(Async)");
        }

        return createSnapshotCall(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a copy of an entire cluster at a specific moment in time.
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public CreateSnapshotResponse createSnapshot(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSnapshotResponse> localVarResp = createSnapshotWithHttpInfo(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a copy of an entire cluster at a specific moment in time.
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSnapshotResponse> createSnapshotWithHttpInfo(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSnapshotValidateBeforeCall(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a copy of an entire cluster at a specific moment in time.
     * @param xAmzTarget  (required)
     * @param createSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotAsync(String xAmzTarget, CreateSnapshotRequest createSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSnapshotValidateBeforeCall(xAmzTarget, createSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubnetGroup
     * @param xAmzTarget  (required)
     * @param createSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubnetGroupCall(String xAmzTarget, CreateSubnetGroupRequest createSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSubnetGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CreateSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubnetGroupValidateBeforeCall(String xAmzTarget, CreateSubnetGroupRequest createSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createSubnetGroup(Async)");
        }

        // verify the required parameter 'createSubnetGroupRequest' is set
        if (createSubnetGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createSubnetGroupRequest' when calling createSubnetGroup(Async)");
        }

        return createSubnetGroupCall(xAmzTarget, createSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html\&quot;&gt;Subnets and subnet groups&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSubnetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubnetGroupResponse createSubnetGroup(String xAmzTarget, CreateSubnetGroupRequest createSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSubnetGroupResponse> localVarResp = createSubnetGroupWithHttpInfo(xAmzTarget, createSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html\&quot;&gt;Subnets and subnet groups&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSubnetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSubnetGroupResponse> createSubnetGroupWithHttpInfo(String xAmzTarget, CreateSubnetGroupRequest createSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSubnetGroupValidateBeforeCall(xAmzTarget, createSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSubnetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html\&quot;&gt;Subnets and subnet groups&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubnetGroupAsync(String xAmzTarget, CreateSubnetGroupRequest createSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSubnetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubnetGroupValidateBeforeCall(xAmzTarget, createSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSubnetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param xAmzTarget  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(String xAmzTarget, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.CreateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String xAmzTarget, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createUser(Async)");
        }

        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling createUser(Async)");
        }

        return createUserCall(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a MemoryDB user. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserResponse createUser(String xAmzTarget, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUserResponse> localVarResp = createUserWithHttpInfo(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a MemoryDB user. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserResponse> createUserWithHttpInfo(String xAmzTarget, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a MemoryDB user. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(String xAmzTarget, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteACL
     * @param xAmzTarget  (required)
     * @param deleteACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteACLCall(String xAmzTarget, DeleteACLRequest deleteACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DeleteACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteACLValidateBeforeCall(String xAmzTarget, DeleteACLRequest deleteACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteACL(Async)");
        }

        // verify the required parameter 'deleteACLRequest' is set
        if (deleteACLRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteACLRequest' when calling deleteACL(Async)");
        }

        return deleteACLCall(xAmzTarget, deleteACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param deleteACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteACLResponse deleteACL(String xAmzTarget, DeleteACLRequest deleteACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteACLResponse> localVarResp = deleteACLWithHttpInfo(xAmzTarget, deleteACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param deleteACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteACLResponse> deleteACLWithHttpInfo(String xAmzTarget, DeleteACLRequest deleteACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteACLValidateBeforeCall(xAmzTarget, deleteACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html\&quot;&gt;Authenticating users with Access Contol Lists (ACLs)&lt;/a&gt;.
     * @param xAmzTarget  (required)
     * @param deleteACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteACLAsync(String xAmzTarget, DeleteACLRequest deleteACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteACLValidateBeforeCall(xAmzTarget, deleteACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCluster
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterCall(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DeleteCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClusterValidateBeforeCall(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteCluster(Async)");
        }

        // verify the required parameter 'deleteClusterRequest' is set
        if (deleteClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteClusterRequest' when calling deleteCluster(Async)");
        }

        return deleteClusterCall(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a cluster. It also deletes all associated nodes and node endpoints
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteClusterResponse deleteCluster(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteClusterResponse> localVarResp = deleteClusterWithHttpInfo(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a cluster. It also deletes all associated nodes and node endpoints
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteClusterResponse> deleteClusterWithHttpInfo(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteClusterValidateBeforeCall(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a cluster. It also deletes all associated nodes and node endpoints
     * @param xAmzTarget  (required)
     * @param deleteClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterAsync(String xAmzTarget, DeleteClusterRequest deleteClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClusterValidateBeforeCall(xAmzTarget, deleteClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteParameterGroup
     * @param xAmzTarget  (required)
     * @param deleteParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParameterGroupCall(String xAmzTarget, DeleteParameterGroupRequest deleteParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteParameterGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DeleteParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteParameterGroupValidateBeforeCall(String xAmzTarget, DeleteParameterGroupRequest deleteParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteParameterGroup(Async)");
        }

        // verify the required parameter 'deleteParameterGroupRequest' is set
        if (deleteParameterGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteParameterGroupRequest' when calling deleteParameterGroup(Async)");
        }

        return deleteParameterGroupCall(xAmzTarget, deleteParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
     * @param xAmzTarget  (required)
     * @param deleteParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteParameterGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteParameterGroupResponse deleteParameterGroup(String xAmzTarget, DeleteParameterGroupRequest deleteParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteParameterGroupResponse> localVarResp = deleteParameterGroupWithHttpInfo(xAmzTarget, deleteParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
     * @param xAmzTarget  (required)
     * @param deleteParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteParameterGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteParameterGroupResponse> deleteParameterGroupWithHttpInfo(String xAmzTarget, DeleteParameterGroupRequest deleteParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteParameterGroupValidateBeforeCall(xAmzTarget, deleteParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteParameterGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
     * @param xAmzTarget  (required)
     * @param deleteParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParameterGroupAsync(String xAmzTarget, DeleteParameterGroupRequest deleteParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteParameterGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteParameterGroupValidateBeforeCall(xAmzTarget, deleteParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteParameterGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSnapshot
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotCall(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSnapshotRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DeleteSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSnapshotValidateBeforeCall(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteSnapshot(Async)");
        }

        // verify the required parameter 'deleteSnapshotRequest' is set
        if (deleteSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSnapshotRequest' when calling deleteSnapshot(Async)");
        }

        return deleteSnapshotCall(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSnapshotResponse deleteSnapshot(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSnapshotResponse> localVarResp = deleteSnapshotWithHttpInfo(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSnapshotResponse> deleteSnapshotWithHttpInfo(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSnapshotValidateBeforeCall(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
     * @param xAmzTarget  (required)
     * @param deleteSnapshotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotAsync(String xAmzTarget, DeleteSnapshotRequest deleteSnapshotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSnapshotValidateBeforeCall(xAmzTarget, deleteSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubnetGroup
     * @param xAmzTarget  (required)
     * @param deleteSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubnetGroupCall(String xAmzTarget, DeleteSubnetGroupRequest deleteSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSubnetGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DeleteSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubnetGroupValidateBeforeCall(String xAmzTarget, DeleteSubnetGroupRequest deleteSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteSubnetGroup(Async)");
        }

        // verify the required parameter 'deleteSubnetGroupRequest' is set
        if (deleteSubnetGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSubnetGroupRequest' when calling deleteSubnetGroup(Async)");
        }

        return deleteSubnetGroupCall(xAmzTarget, deleteSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
     * @param xAmzTarget  (required)
     * @param deleteSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSubnetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSubnetGroupResponse deleteSubnetGroup(String xAmzTarget, DeleteSubnetGroupRequest deleteSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSubnetGroupResponse> localVarResp = deleteSubnetGroupWithHttpInfo(xAmzTarget, deleteSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
     * @param xAmzTarget  (required)
     * @param deleteSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSubnetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSubnetGroupResponse> deleteSubnetGroupWithHttpInfo(String xAmzTarget, DeleteSubnetGroupRequest deleteSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSubnetGroupValidateBeforeCall(xAmzTarget, deleteSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSubnetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
     * @param xAmzTarget  (required)
     * @param deleteSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubnetGroupAsync(String xAmzTarget, DeleteSubnetGroupRequest deleteSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSubnetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubnetGroupValidateBeforeCall(xAmzTarget, deleteSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSubnetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteUser(Async)");
        }

        // verify the required parameter 'deleteUserRequest' is set
        if (deleteUserRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserRequest' when calling deleteUser(Async)");
        }

        return deleteUserCall(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserResponse deleteUser(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteUserResponse> localVarResp = deleteUserWithHttpInfo(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteUserResponse> deleteUserWithHttpInfo(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeACLs
     * @param xAmzTarget  (required)
     * @param describeACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeACLsCall(String xAmzTarget, DescribeACLsRequest describeACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeACLsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeACLs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeACLsValidateBeforeCall(String xAmzTarget, DescribeACLsRequest describeACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeACLs(Async)");
        }

        // verify the required parameter 'describeACLsRequest' is set
        if (describeACLsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeACLsRequest' when calling describeACLs(Async)");
        }

        return describeACLsCall(xAmzTarget, describeACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of ACLs
     * @param xAmzTarget  (required)
     * @param describeACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeACLsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeACLsResponse describeACLs(String xAmzTarget, DescribeACLsRequest describeACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeACLsResponse> localVarResp = describeACLsWithHttpInfo(xAmzTarget, describeACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of ACLs
     * @param xAmzTarget  (required)
     * @param describeACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeACLsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeACLsResponse> describeACLsWithHttpInfo(String xAmzTarget, DescribeACLsRequest describeACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeACLsValidateBeforeCall(xAmzTarget, describeACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeACLsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of ACLs
     * @param xAmzTarget  (required)
     * @param describeACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeACLsAsync(String xAmzTarget, DescribeACLsRequest describeACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeACLsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeACLsValidateBeforeCall(xAmzTarget, describeACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeACLsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeClusters
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeClustersCall(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeClustersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeClustersValidateBeforeCall(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeClusters(Async)");
        }

        // verify the required parameter 'describeClustersRequest' is set
        if (describeClustersRequest == null) {
            throw new ApiException("Missing the required parameter 'describeClustersRequest' when calling describeClusters(Async)");
        }

        return describeClustersCall(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeClustersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeClustersResponse describeClusters(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeClustersResponse> localVarResp = describeClustersWithHttpInfo(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeClustersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeClustersResponse> describeClustersWithHttpInfo(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeClustersValidateBeforeCall(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeClustersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
     * @param xAmzTarget  (required)
     * @param describeClustersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeClustersAsync(String xAmzTarget, DescribeClustersRequest describeClustersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeClustersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeClustersValidateBeforeCall(xAmzTarget, describeClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeClustersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEngineVersions
     * @param xAmzTarget  (required)
     * @param describeEngineVersionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEngineVersionsCall(String xAmzTarget, DescribeEngineVersionsRequest describeEngineVersionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEngineVersionsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEngineVersionsValidateBeforeCall(String xAmzTarget, DescribeEngineVersionsRequest describeEngineVersionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEngineVersions(Async)");
        }

        // verify the required parameter 'describeEngineVersionsRequest' is set
        if (describeEngineVersionsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeEngineVersionsRequest' when calling describeEngineVersions(Async)");
        }

        return describeEngineVersionsCall(xAmzTarget, describeEngineVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of the available Redis engine versions.
     * @param xAmzTarget  (required)
     * @param describeEngineVersionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeEngineVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineVersionsResponse describeEngineVersions(String xAmzTarget, DescribeEngineVersionsRequest describeEngineVersionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeEngineVersionsResponse> localVarResp = describeEngineVersionsWithHttpInfo(xAmzTarget, describeEngineVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available Redis engine versions.
     * @param xAmzTarget  (required)
     * @param describeEngineVersionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeEngineVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineVersionsResponse> describeEngineVersionsWithHttpInfo(String xAmzTarget, DescribeEngineVersionsRequest describeEngineVersionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeEngineVersionsValidateBeforeCall(xAmzTarget, describeEngineVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeEngineVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available Redis engine versions.
     * @param xAmzTarget  (required)
     * @param describeEngineVersionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEngineVersionsAsync(String xAmzTarget, DescribeEngineVersionsRequest describeEngineVersionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeEngineVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEngineVersionsValidateBeforeCall(xAmzTarget, describeEngineVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEvents
     * @param xAmzTarget  (required)
     * @param describeEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventsCall(String xAmzTarget, DescribeEventsRequest describeEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEventsValidateBeforeCall(String xAmzTarget, DescribeEventsRequest describeEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEvents(Async)");
        }

        // verify the required parameter 'describeEventsRequest' is set
        if (describeEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeEventsRequest' when calling describeEvents(Async)");
        }

        return describeEventsCall(xAmzTarget, describeEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.
     * @param xAmzTarget  (required)
     * @param describeEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEventsResponse describeEvents(String xAmzTarget, DescribeEventsRequest describeEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeEventsResponse> localVarResp = describeEventsWithHttpInfo(xAmzTarget, describeEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.
     * @param xAmzTarget  (required)
     * @param describeEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEventsResponse> describeEventsWithHttpInfo(String xAmzTarget, DescribeEventsRequest describeEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeEventsValidateBeforeCall(xAmzTarget, describeEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.
     * @param xAmzTarget  (required)
     * @param describeEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventsAsync(String xAmzTarget, DescribeEventsRequest describeEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEventsValidateBeforeCall(xAmzTarget, describeEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeParameterGroups
     * @param xAmzTarget  (required)
     * @param describeParameterGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeParameterGroupsCall(String xAmzTarget, DescribeParameterGroupsRequest describeParameterGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeParameterGroupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeParameterGroupsValidateBeforeCall(String xAmzTarget, DescribeParameterGroupsRequest describeParameterGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeParameterGroups(Async)");
        }

        // verify the required parameter 'describeParameterGroupsRequest' is set
        if (describeParameterGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeParameterGroupsRequest' when calling describeParameterGroups(Async)");
        }

        return describeParameterGroupsCall(xAmzTarget, describeParameterGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
     * @param xAmzTarget  (required)
     * @param describeParameterGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeParameterGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeParameterGroupsResponse describeParameterGroups(String xAmzTarget, DescribeParameterGroupsRequest describeParameterGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeParameterGroupsResponse> localVarResp = describeParameterGroupsWithHttpInfo(xAmzTarget, describeParameterGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
     * @param xAmzTarget  (required)
     * @param describeParameterGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeParameterGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeParameterGroupsResponse> describeParameterGroupsWithHttpInfo(String xAmzTarget, DescribeParameterGroupsRequest describeParameterGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeParameterGroupsValidateBeforeCall(xAmzTarget, describeParameterGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeParameterGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
     * @param xAmzTarget  (required)
     * @param describeParameterGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeParameterGroupsAsync(String xAmzTarget, DescribeParameterGroupsRequest describeParameterGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeParameterGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeParameterGroupsValidateBeforeCall(xAmzTarget, describeParameterGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeParameterGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeParameters
     * @param xAmzTarget  (required)
     * @param describeParametersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeParametersCall(String xAmzTarget, DescribeParametersRequest describeParametersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeParametersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeParametersValidateBeforeCall(String xAmzTarget, DescribeParametersRequest describeParametersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeParameters(Async)");
        }

        // verify the required parameter 'describeParametersRequest' is set
        if (describeParametersRequest == null) {
            throw new ApiException("Missing the required parameter 'describeParametersRequest' when calling describeParameters(Async)");
        }

        return describeParametersCall(xAmzTarget, describeParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular parameter group.
     * @param xAmzTarget  (required)
     * @param describeParametersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeParametersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeParametersResponse describeParameters(String xAmzTarget, DescribeParametersRequest describeParametersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeParametersResponse> localVarResp = describeParametersWithHttpInfo(xAmzTarget, describeParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular parameter group.
     * @param xAmzTarget  (required)
     * @param describeParametersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeParametersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeParametersResponse> describeParametersWithHttpInfo(String xAmzTarget, DescribeParametersRequest describeParametersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeParametersValidateBeforeCall(xAmzTarget, describeParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeParametersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular parameter group.
     * @param xAmzTarget  (required)
     * @param describeParametersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeParametersAsync(String xAmzTarget, DescribeParametersRequest describeParametersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeParametersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeParametersValidateBeforeCall(xAmzTarget, describeParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeParametersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReservedNodes
     * @param xAmzTarget  (required)
     * @param describeReservedNodesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReservedNodesCall(String xAmzTarget, DescribeReservedNodesRequest describeReservedNodesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReservedNodesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeReservedNodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReservedNodesValidateBeforeCall(String xAmzTarget, DescribeReservedNodesRequest describeReservedNodesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReservedNodes(Async)");
        }

        // verify the required parameter 'describeReservedNodesRequest' is set
        if (describeReservedNodesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeReservedNodesRequest' when calling describeReservedNodes(Async)");
        }

        return describeReservedNodesCall(xAmzTarget, describeReservedNodesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about reserved nodes for this account, or about a specified reserved node.
     * @param xAmzTarget  (required)
     * @param describeReservedNodesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeReservedNodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReservedNodesResponse describeReservedNodes(String xAmzTarget, DescribeReservedNodesRequest describeReservedNodesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeReservedNodesResponse> localVarResp = describeReservedNodesWithHttpInfo(xAmzTarget, describeReservedNodesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about reserved nodes for this account, or about a specified reserved node.
     * @param xAmzTarget  (required)
     * @param describeReservedNodesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeReservedNodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReservedNodesResponse> describeReservedNodesWithHttpInfo(String xAmzTarget, DescribeReservedNodesRequest describeReservedNodesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeReservedNodesValidateBeforeCall(xAmzTarget, describeReservedNodesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeReservedNodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about reserved nodes for this account, or about a specified reserved node.
     * @param xAmzTarget  (required)
     * @param describeReservedNodesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReservedNodesAsync(String xAmzTarget, DescribeReservedNodesRequest describeReservedNodesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeReservedNodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReservedNodesValidateBeforeCall(xAmzTarget, describeReservedNodesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeReservedNodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReservedNodesOfferings
     * @param xAmzTarget  (required)
     * @param describeReservedNodesOfferingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReservedNodesOfferingsCall(String xAmzTarget, DescribeReservedNodesOfferingsRequest describeReservedNodesOfferingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReservedNodesOfferingsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeReservedNodesOfferings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReservedNodesOfferingsValidateBeforeCall(String xAmzTarget, DescribeReservedNodesOfferingsRequest describeReservedNodesOfferingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReservedNodesOfferings(Async)");
        }

        // verify the required parameter 'describeReservedNodesOfferingsRequest' is set
        if (describeReservedNodesOfferingsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeReservedNodesOfferingsRequest' when calling describeReservedNodesOfferings(Async)");
        }

        return describeReservedNodesOfferingsCall(xAmzTarget, describeReservedNodesOfferingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists available reserved node offerings.
     * @param xAmzTarget  (required)
     * @param describeReservedNodesOfferingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeReservedNodesOfferingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReservedNodesOfferingsResponse describeReservedNodesOfferings(String xAmzTarget, DescribeReservedNodesOfferingsRequest describeReservedNodesOfferingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeReservedNodesOfferingsResponse> localVarResp = describeReservedNodesOfferingsWithHttpInfo(xAmzTarget, describeReservedNodesOfferingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists available reserved node offerings.
     * @param xAmzTarget  (required)
     * @param describeReservedNodesOfferingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeReservedNodesOfferingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReservedNodesOfferingsResponse> describeReservedNodesOfferingsWithHttpInfo(String xAmzTarget, DescribeReservedNodesOfferingsRequest describeReservedNodesOfferingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeReservedNodesOfferingsValidateBeforeCall(xAmzTarget, describeReservedNodesOfferingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeReservedNodesOfferingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists available reserved node offerings.
     * @param xAmzTarget  (required)
     * @param describeReservedNodesOfferingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReservedNodesOfferingsAsync(String xAmzTarget, DescribeReservedNodesOfferingsRequest describeReservedNodesOfferingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeReservedNodesOfferingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReservedNodesOfferingsValidateBeforeCall(xAmzTarget, describeReservedNodesOfferingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeReservedNodesOfferingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeServiceUpdates
     * @param xAmzTarget  (required)
     * @param describeServiceUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeServiceUpdatesCall(String xAmzTarget, DescribeServiceUpdatesRequest describeServiceUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeServiceUpdatesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeServiceUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeServiceUpdatesValidateBeforeCall(String xAmzTarget, DescribeServiceUpdatesRequest describeServiceUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeServiceUpdates(Async)");
        }

        // verify the required parameter 'describeServiceUpdatesRequest' is set
        if (describeServiceUpdatesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeServiceUpdatesRequest' when calling describeServiceUpdates(Async)");
        }

        return describeServiceUpdatesCall(xAmzTarget, describeServiceUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns details of the service updates
     * @param xAmzTarget  (required)
     * @param describeServiceUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeServiceUpdatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeServiceUpdatesResponse describeServiceUpdates(String xAmzTarget, DescribeServiceUpdatesRequest describeServiceUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeServiceUpdatesResponse> localVarResp = describeServiceUpdatesWithHttpInfo(xAmzTarget, describeServiceUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details of the service updates
     * @param xAmzTarget  (required)
     * @param describeServiceUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeServiceUpdatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeServiceUpdatesResponse> describeServiceUpdatesWithHttpInfo(String xAmzTarget, DescribeServiceUpdatesRequest describeServiceUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeServiceUpdatesValidateBeforeCall(xAmzTarget, describeServiceUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeServiceUpdatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details of the service updates
     * @param xAmzTarget  (required)
     * @param describeServiceUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeServiceUpdatesAsync(String xAmzTarget, DescribeServiceUpdatesRequest describeServiceUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeServiceUpdatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeServiceUpdatesValidateBeforeCall(xAmzTarget, describeServiceUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeServiceUpdatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeSnapshots
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSnapshotsCall(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSnapshotsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeSnapshotsValidateBeforeCall(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeSnapshots(Async)");
        }

        // verify the required parameter 'describeSnapshotsRequest' is set
        if (describeSnapshotsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeSnapshotsRequest' when calling describeSnapshots(Async)");
        }

        return describeSnapshotsCall(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeSnapshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSnapshotsResponse describeSnapshots(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeSnapshotsResponse> localVarResp = describeSnapshotsWithHttpInfo(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeSnapshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSnapshotsResponse> describeSnapshotsWithHttpInfo(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeSnapshotsValidateBeforeCall(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
     * @param xAmzTarget  (required)
     * @param describeSnapshotsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSnapshotsAsync(String xAmzTarget, DescribeSnapshotsRequest describeSnapshotsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeSnapshotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeSnapshotsValidateBeforeCall(xAmzTarget, describeSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeSubnetGroups
     * @param xAmzTarget  (required)
     * @param describeSubnetGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSubnetGroupsCall(String xAmzTarget, DescribeSubnetGroupsRequest describeSubnetGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSubnetGroupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeSubnetGroupsValidateBeforeCall(String xAmzTarget, DescribeSubnetGroupsRequest describeSubnetGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeSubnetGroups(Async)");
        }

        // verify the required parameter 'describeSubnetGroupsRequest' is set
        if (describeSubnetGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeSubnetGroupsRequest' when calling describeSubnetGroups(Async)");
        }

        return describeSubnetGroupsCall(xAmzTarget, describeSubnetGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
     * @param xAmzTarget  (required)
     * @param describeSubnetGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeSubnetGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSubnetGroupsResponse describeSubnetGroups(String xAmzTarget, DescribeSubnetGroupsRequest describeSubnetGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeSubnetGroupsResponse> localVarResp = describeSubnetGroupsWithHttpInfo(xAmzTarget, describeSubnetGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
     * @param xAmzTarget  (required)
     * @param describeSubnetGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeSubnetGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSubnetGroupsResponse> describeSubnetGroupsWithHttpInfo(String xAmzTarget, DescribeSubnetGroupsRequest describeSubnetGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeSubnetGroupsValidateBeforeCall(xAmzTarget, describeSubnetGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeSubnetGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
     * @param xAmzTarget  (required)
     * @param describeSubnetGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSubnetGroupsAsync(String xAmzTarget, DescribeSubnetGroupsRequest describeSubnetGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeSubnetGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeSubnetGroupsValidateBeforeCall(xAmzTarget, describeSubnetGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeSubnetGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeUsers
     * @param xAmzTarget  (required)
     * @param describeUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUsersCall(String xAmzTarget, DescribeUsersRequest describeUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUsersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.DescribeUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeUsersValidateBeforeCall(String xAmzTarget, DescribeUsersRequest describeUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeUsers(Async)");
        }

        // verify the required parameter 'describeUsersRequest' is set
        if (describeUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'describeUsersRequest' when calling describeUsers(Async)");
        }

        return describeUsersCall(xAmzTarget, describeUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of users.
     * @param xAmzTarget  (required)
     * @param describeUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUsersResponse describeUsers(String xAmzTarget, DescribeUsersRequest describeUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeUsersResponse> localVarResp = describeUsersWithHttpInfo(xAmzTarget, describeUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of users.
     * @param xAmzTarget  (required)
     * @param describeUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUsersResponse> describeUsersWithHttpInfo(String xAmzTarget, DescribeUsersRequest describeUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeUsersValidateBeforeCall(xAmzTarget, describeUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of users.
     * @param xAmzTarget  (required)
     * @param describeUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUsersAsync(String xAmzTarget, DescribeUsersRequest describeUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeUsersValidateBeforeCall(xAmzTarget, describeUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for failoverShard
     * @param xAmzTarget  (required)
     * @param failoverShardRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ShardNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call failoverShardCall(String xAmzTarget, FailoverShardRequest failoverShardRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverShardRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.FailoverShard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call failoverShardValidateBeforeCall(String xAmzTarget, FailoverShardRequest failoverShardRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling failoverShard(Async)");
        }

        // verify the required parameter 'failoverShardRequest' is set
        if (failoverShardRequest == null) {
            throw new ApiException("Missing the required parameter 'failoverShardRequest' when calling failoverShard(Async)");
        }

        return failoverShardCall(xAmzTarget, failoverShardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Used to failover a shard. This API is designed for testing the behavior of your application in case of MemoryDB failover. It is not designed to be used as a production-level tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large scale operational events, Amazon may block this API. 
     * @param xAmzTarget  (required)
     * @param failoverShardRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return FailoverShardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ShardNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public FailoverShardResponse failoverShard(String xAmzTarget, FailoverShardRequest failoverShardRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<FailoverShardResponse> localVarResp = failoverShardWithHttpInfo(xAmzTarget, failoverShardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Used to failover a shard. This API is designed for testing the behavior of your application in case of MemoryDB failover. It is not designed to be used as a production-level tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large scale operational events, Amazon may block this API. 
     * @param xAmzTarget  (required)
     * @param failoverShardRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;FailoverShardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ShardNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverShardResponse> failoverShardWithHttpInfo(String xAmzTarget, FailoverShardRequest failoverShardRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = failoverShardValidateBeforeCall(xAmzTarget, failoverShardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<FailoverShardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used to failover a shard. This API is designed for testing the behavior of your application in case of MemoryDB failover. It is not designed to be used as a production-level tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large scale operational events, Amazon may block this API. 
     * @param xAmzTarget  (required)
     * @param failoverShardRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ShardNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call failoverShardAsync(String xAmzTarget, FailoverShardRequest failoverShardRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<FailoverShardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = failoverShardValidateBeforeCall(xAmzTarget, failoverShardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<FailoverShardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllowedNodeTypeUpdates
     * @param xAmzTarget  (required)
     * @param listAllowedNodeTypeUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllowedNodeTypeUpdatesCall(String xAmzTarget, ListAllowedNodeTypeUpdatesRequest listAllowedNodeTypeUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAllowedNodeTypeUpdatesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.ListAllowedNodeTypeUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllowedNodeTypeUpdatesValidateBeforeCall(String xAmzTarget, ListAllowedNodeTypeUpdatesRequest listAllowedNodeTypeUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listAllowedNodeTypeUpdates(Async)");
        }

        // verify the required parameter 'listAllowedNodeTypeUpdatesRequest' is set
        if (listAllowedNodeTypeUpdatesRequest == null) {
            throw new ApiException("Missing the required parameter 'listAllowedNodeTypeUpdatesRequest' when calling listAllowedNodeTypeUpdates(Async)");
        }

        return listAllowedNodeTypeUpdatesCall(xAmzTarget, listAllowedNodeTypeUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists all available node types that you can scale to from your cluster&#39;s current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
     * @param xAmzTarget  (required)
     * @param listAllowedNodeTypeUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListAllowedNodeTypeUpdatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ListAllowedNodeTypeUpdatesResponse listAllowedNodeTypeUpdates(String xAmzTarget, ListAllowedNodeTypeUpdatesRequest listAllowedNodeTypeUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListAllowedNodeTypeUpdatesResponse> localVarResp = listAllowedNodeTypeUpdatesWithHttpInfo(xAmzTarget, listAllowedNodeTypeUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all available node types that you can scale to from your cluster&#39;s current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
     * @param xAmzTarget  (required)
     * @param listAllowedNodeTypeUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListAllowedNodeTypeUpdatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllowedNodeTypeUpdatesResponse> listAllowedNodeTypeUpdatesWithHttpInfo(String xAmzTarget, ListAllowedNodeTypeUpdatesRequest listAllowedNodeTypeUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listAllowedNodeTypeUpdatesValidateBeforeCall(xAmzTarget, listAllowedNodeTypeUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListAllowedNodeTypeUpdatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all available node types that you can scale to from your cluster&#39;s current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
     * @param xAmzTarget  (required)
     * @param listAllowedNodeTypeUpdatesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllowedNodeTypeUpdatesAsync(String xAmzTarget, ListAllowedNodeTypeUpdatesRequest listAllowedNodeTypeUpdatesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListAllowedNodeTypeUpdatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllowedNodeTypeUpdatesValidateBeforeCall(xAmzTarget, listAllowedNodeTypeUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListAllowedNodeTypeUpdatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTags
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsCall(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.ListTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTags(Async)");
        }

        // verify the required parameter 'listTagsRequest' is set
        if (listTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsRequest' when calling listTags(Async)");
        }

        return listTagsCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html\&quot;&gt;Tagging your MemoryDB resources&lt;/a&gt; 
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsResponse listTags(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsResponse> localVarResp = listTagsWithHttpInfo(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html\&quot;&gt;Tagging your MemoryDB resources&lt;/a&gt; 
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsResponse> listTagsWithHttpInfo(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html\&quot;&gt;Tagging your MemoryDB resources&lt;/a&gt; 
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsAsync(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchaseReservedNodesOffering
     * @param xAmzTarget  (required)
     * @param purchaseReservedNodesOfferingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseReservedNodesOfferingCall(String xAmzTarget, PurchaseReservedNodesOfferingRequest purchaseReservedNodesOfferingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseReservedNodesOfferingRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.PurchaseReservedNodesOffering";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseReservedNodesOfferingValidateBeforeCall(String xAmzTarget, PurchaseReservedNodesOfferingRequest purchaseReservedNodesOfferingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling purchaseReservedNodesOffering(Async)");
        }

        // verify the required parameter 'purchaseReservedNodesOfferingRequest' is set
        if (purchaseReservedNodesOfferingRequest == null) {
            throw new ApiException("Missing the required parameter 'purchaseReservedNodesOfferingRequest' when calling purchaseReservedNodesOffering(Async)");
        }

        return purchaseReservedNodesOfferingCall(xAmzTarget, purchaseReservedNodesOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.
     * @param xAmzTarget  (required)
     * @param purchaseReservedNodesOfferingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PurchaseReservedNodesOfferingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseReservedNodesOfferingResponse purchaseReservedNodesOffering(String xAmzTarget, PurchaseReservedNodesOfferingRequest purchaseReservedNodesOfferingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PurchaseReservedNodesOfferingResponse> localVarResp = purchaseReservedNodesOfferingWithHttpInfo(xAmzTarget, purchaseReservedNodesOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.
     * @param xAmzTarget  (required)
     * @param purchaseReservedNodesOfferingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PurchaseReservedNodesOfferingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseReservedNodesOfferingResponse> purchaseReservedNodesOfferingWithHttpInfo(String xAmzTarget, PurchaseReservedNodesOfferingRequest purchaseReservedNodesOfferingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = purchaseReservedNodesOfferingValidateBeforeCall(xAmzTarget, purchaseReservedNodesOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PurchaseReservedNodesOfferingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.
     * @param xAmzTarget  (required)
     * @param purchaseReservedNodesOfferingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseReservedNodesOfferingAsync(String xAmzTarget, PurchaseReservedNodesOfferingRequest purchaseReservedNodesOfferingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PurchaseReservedNodesOfferingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseReservedNodesOfferingValidateBeforeCall(xAmzTarget, purchaseReservedNodesOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PurchaseReservedNodesOfferingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetParameterGroup
     * @param xAmzTarget  (required)
     * @param resetParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetParameterGroupCall(String xAmzTarget, ResetParameterGroupRequest resetParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetParameterGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.ResetParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetParameterGroupValidateBeforeCall(String xAmzTarget, ResetParameterGroupRequest resetParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling resetParameterGroup(Async)");
        }

        // verify the required parameter 'resetParameterGroupRequest' is set
        if (resetParameterGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'resetParameterGroupRequest' when calling resetParameterGroup(Async)");
        }

        return resetParameterGroupCall(xAmzTarget, resetParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
     * @param xAmzTarget  (required)
     * @param resetParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ResetParameterGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ResetParameterGroupResponse resetParameterGroup(String xAmzTarget, ResetParameterGroupRequest resetParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ResetParameterGroupResponse> localVarResp = resetParameterGroupWithHttpInfo(xAmzTarget, resetParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
     * @param xAmzTarget  (required)
     * @param resetParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ResetParameterGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResetParameterGroupResponse> resetParameterGroupWithHttpInfo(String xAmzTarget, ResetParameterGroupRequest resetParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = resetParameterGroupValidateBeforeCall(xAmzTarget, resetParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ResetParameterGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
     * @param xAmzTarget  (required)
     * @param resetParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetParameterGroupAsync(String xAmzTarget, ResetParameterGroupRequest resetParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ResetParameterGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetParameterGroupValidateBeforeCall(xAmzTarget, resetParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ResetParameterGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TagResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagResourceResponse tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TagResourceResponse> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TagResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagResourceResponse> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TagResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html\&quot;&gt;Using Cost Allocation Tags&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TagResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TagResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Use this operation to remove tags on a resource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UntagResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public UntagResourceResponse untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UntagResourceResponse> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this operation to remove tags on a resource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UntagResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UntagResourceResponse> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UntagResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this operation to remove tags on a resource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UntagResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UntagResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateACL
     * @param xAmzTarget  (required)
     * @param updateACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACLCall(String xAmzTarget, UpdateACLRequest updateACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.UpdateACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateACLValidateBeforeCall(String xAmzTarget, UpdateACLRequest updateACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateACL(Async)");
        }

        // verify the required parameter 'updateACLRequest' is set
        if (updateACLRequest == null) {
            throw new ApiException("Missing the required parameter 'updateACLRequest' when calling updateACL(Async)");
        }

        return updateACLCall(xAmzTarget, updateACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Changes the list of users that belong to the Access Control List.
     * @param xAmzTarget  (required)
     * @param updateACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateACLResponse updateACL(String xAmzTarget, UpdateACLRequest updateACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateACLResponse> localVarResp = updateACLWithHttpInfo(xAmzTarget, updateACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes the list of users that belong to the Access Control List.
     * @param xAmzTarget  (required)
     * @param updateACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateACLResponse> updateACLWithHttpInfo(String xAmzTarget, UpdateACLRequest updateACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateACLValidateBeforeCall(xAmzTarget, updateACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes the list of users that belong to the Access Control List.
     * @param xAmzTarget  (required)
     * @param updateACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACLAsync(String xAmzTarget, UpdateACLRequest updateACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateACLValidateBeforeCall(xAmzTarget, updateACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCluster
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNodeStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterCall(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClusterRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.UpdateCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClusterValidateBeforeCall(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateCluster(Async)");
        }

        // verify the required parameter 'updateClusterRequest' is set
        if (updateClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClusterRequest' when calling updateCluster(Async)");
        }

        return updateClusterCall(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNodeStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClusterResponse updateCluster(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateClusterResponse> localVarResp = updateClusterWithHttpInfo(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNodeStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateClusterResponse> updateClusterWithHttpInfo(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateClusterValidateBeforeCall(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
     * @param xAmzTarget  (required)
     * @param updateClusterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNodeStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ShardsPerClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidACLStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ACLNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClusterAsync(String xAmzTarget, UpdateClusterRequest updateClusterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClusterValidateBeforeCall(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateParameterGroup
     * @param xAmzTarget  (required)
     * @param updateParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateParameterGroupCall(String xAmzTarget, UpdateParameterGroupRequest updateParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateParameterGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.UpdateParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateParameterGroupValidateBeforeCall(String xAmzTarget, UpdateParameterGroupRequest updateParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateParameterGroup(Async)");
        }

        // verify the required parameter 'updateParameterGroupRequest' is set
        if (updateParameterGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateParameterGroupRequest' when calling updateParameterGroup(Async)");
        }

        return updateParameterGroupCall(xAmzTarget, updateParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param xAmzTarget  (required)
     * @param updateParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateParameterGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateParameterGroupResponse updateParameterGroup(String xAmzTarget, UpdateParameterGroupRequest updateParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateParameterGroupResponse> localVarResp = updateParameterGroupWithHttpInfo(xAmzTarget, updateParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param xAmzTarget  (required)
     * @param updateParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateParameterGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateParameterGroupResponse> updateParameterGroupWithHttpInfo(String xAmzTarget, UpdateParameterGroupRequest updateParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateParameterGroupValidateBeforeCall(xAmzTarget, updateParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateParameterGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param xAmzTarget  (required)
     * @param updateParameterGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateParameterGroupAsync(String xAmzTarget, UpdateParameterGroupRequest updateParameterGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateParameterGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateParameterGroupValidateBeforeCall(xAmzTarget, updateParameterGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateParameterGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubnetGroup
     * @param xAmzTarget  (required)
     * @param updateSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubnetGroupCall(String xAmzTarget, UpdateSubnetGroupRequest updateSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSubnetGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.UpdateSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubnetGroupValidateBeforeCall(String xAmzTarget, UpdateSubnetGroupRequest updateSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateSubnetGroup(Async)");
        }

        // verify the required parameter 'updateSubnetGroupRequest' is set
        if (updateSubnetGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSubnetGroupRequest' when calling updateSubnetGroup(Async)");
        }

        return updateSubnetGroupCall(xAmzTarget, updateSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates a subnet group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html\&quot;&gt;Updating a subnet group&lt;/a&gt; 
     * @param xAmzTarget  (required)
     * @param updateSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSubnetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubnetGroupResponse updateSubnetGroup(String xAmzTarget, UpdateSubnetGroupRequest updateSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSubnetGroupResponse> localVarResp = updateSubnetGroupWithHttpInfo(xAmzTarget, updateSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a subnet group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html\&quot;&gt;Updating a subnet group&lt;/a&gt; 
     * @param xAmzTarget  (required)
     * @param updateSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSubnetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSubnetGroupResponse> updateSubnetGroupWithHttpInfo(String xAmzTarget, UpdateSubnetGroupRequest updateSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSubnetGroupValidateBeforeCall(xAmzTarget, updateSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSubnetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a subnet group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html\&quot;&gt;Updating a subnet group&lt;/a&gt; 
     * @param xAmzTarget  (required)
     * @param updateSubnetGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubnetGroupAsync(String xAmzTarget, UpdateSubnetGroupRequest updateSubnetGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSubnetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubnetGroupValidateBeforeCall(xAmzTarget, updateSubnetGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSubnetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param xAmzTarget  (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String xAmzTarget, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonMemoryDB.UpdateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String xAmzTarget, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateUser(Async)");
        }

        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUser(Async)");
        }

        return updateUserCall(xAmzTarget, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Changes user password(s) and/or access string.
     * @param xAmzTarget  (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserResponse updateUser(String xAmzTarget, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateUserResponse> localVarResp = updateUserWithHttpInfo(xAmzTarget, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes user password(s) and/or access string.
     * @param xAmzTarget  (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUserResponse> updateUserWithHttpInfo(String xAmzTarget, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(xAmzTarget, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes user password(s) and/or access string.
     * @param xAmzTarget  (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String xAmzTarget, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(xAmzTarget, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
