/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServiceUpdateStatus;
import org.openapitools.client.model.ServiceUpdateType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An update that you can apply to your MemoryDB clusters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:10.082054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceUpdate {
  public static final String SERIALIZED_NAME_CLUSTER_NAME = "ClusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_SERVICE_UPDATE_NAME = "ServiceUpdateName";
  @SerializedName(SERIALIZED_NAME_SERVICE_UPDATE_NAME)
  private String serviceUpdateName;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "ReleaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OffsetDateTime releaseDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ServiceUpdateStatus status;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ServiceUpdateType type;

  public static final String SERIALIZED_NAME_NODES_UPDATED = "NodesUpdated";
  @SerializedName(SERIALIZED_NAME_NODES_UPDATED)
  private String nodesUpdated;

  public static final String SERIALIZED_NAME_AUTO_UPDATE_START_DATE = "AutoUpdateStartDate";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE_START_DATE)
  private OffsetDateTime autoUpdateStartDate;

  public ServiceUpdate() {
  }

  public ServiceUpdate clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * Get clusterName
   * @return clusterName
   */
  @javax.annotation.Nullable
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public ServiceUpdate serviceUpdateName(String serviceUpdateName) {
    this.serviceUpdateName = serviceUpdateName;
    return this;
  }

  /**
   * Get serviceUpdateName
   * @return serviceUpdateName
   */
  @javax.annotation.Nullable
  public String getServiceUpdateName() {
    return serviceUpdateName;
  }

  public void setServiceUpdateName(String serviceUpdateName) {
    this.serviceUpdateName = serviceUpdateName;
  }


  public ServiceUpdate releaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
  }


  public ServiceUpdate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceUpdate status(ServiceUpdateStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ServiceUpdateStatus getStatus() {
    return status;
  }

  public void setStatus(ServiceUpdateStatus status) {
    this.status = status;
  }


  public ServiceUpdate type(ServiceUpdateType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ServiceUpdateType getType() {
    return type;
  }

  public void setType(ServiceUpdateType type) {
    this.type = type;
  }


  public ServiceUpdate nodesUpdated(String nodesUpdated) {
    this.nodesUpdated = nodesUpdated;
    return this;
  }

  /**
   * Get nodesUpdated
   * @return nodesUpdated
   */
  @javax.annotation.Nullable
  public String getNodesUpdated() {
    return nodesUpdated;
  }

  public void setNodesUpdated(String nodesUpdated) {
    this.nodesUpdated = nodesUpdated;
  }


  public ServiceUpdate autoUpdateStartDate(OffsetDateTime autoUpdateStartDate) {
    this.autoUpdateStartDate = autoUpdateStartDate;
    return this;
  }

  /**
   * Get autoUpdateStartDate
   * @return autoUpdateStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAutoUpdateStartDate() {
    return autoUpdateStartDate;
  }

  public void setAutoUpdateStartDate(OffsetDateTime autoUpdateStartDate) {
    this.autoUpdateStartDate = autoUpdateStartDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceUpdate serviceUpdate = (ServiceUpdate) o;
    return Objects.equals(this.clusterName, serviceUpdate.clusterName) &&
        Objects.equals(this.serviceUpdateName, serviceUpdate.serviceUpdateName) &&
        Objects.equals(this.releaseDate, serviceUpdate.releaseDate) &&
        Objects.equals(this.description, serviceUpdate.description) &&
        Objects.equals(this.status, serviceUpdate.status) &&
        Objects.equals(this.type, serviceUpdate.type) &&
        Objects.equals(this.nodesUpdated, serviceUpdate.nodesUpdated) &&
        Objects.equals(this.autoUpdateStartDate, serviceUpdate.autoUpdateStartDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterName, serviceUpdateName, releaseDate, description, status, type, nodesUpdated, autoUpdateStartDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceUpdate {\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    serviceUpdateName: ").append(toIndentedString(serviceUpdateName)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    nodesUpdated: ").append(toIndentedString(nodesUpdated)).append("\n");
    sb.append("    autoUpdateStartDate: ").append(toIndentedString(autoUpdateStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterName");
    openapiFields.add("ServiceUpdateName");
    openapiFields.add("ReleaseDate");
    openapiFields.add("Description");
    openapiFields.add("Status");
    openapiFields.add("Type");
    openapiFields.add("NodesUpdated");
    openapiFields.add("AutoUpdateStartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceUpdate is not found in the empty JSON string", ServiceUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClusterName`
      if (jsonObj.get("ClusterName") != null && !jsonObj.get("ClusterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterName"));
      }
      // validate the optional field `ServiceUpdateName`
      if (jsonObj.get("ServiceUpdateName") != null && !jsonObj.get("ServiceUpdateName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceUpdateName"));
      }
      // validate the optional field `ReleaseDate`
      if (jsonObj.get("ReleaseDate") != null && !jsonObj.get("ReleaseDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReleaseDate"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ServiceUpdateStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ServiceUpdateType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `NodesUpdated`
      if (jsonObj.get("NodesUpdated") != null && !jsonObj.get("NodesUpdated").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodesUpdated"));
      }
      // validate the optional field `AutoUpdateStartDate`
      if (jsonObj.get("AutoUpdateStartDate") != null && !jsonObj.get("AutoUpdateStartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AutoUpdateStartDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceUpdate>() {
           @Override
           public void write(JsonWriter out, ServiceUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceUpdate
   * @throws IOException if the JSON string is invalid with respect to ServiceUpdate
   */
  public static ServiceUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceUpdate.class);
  }

  /**
   * Convert an instance of ServiceUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

