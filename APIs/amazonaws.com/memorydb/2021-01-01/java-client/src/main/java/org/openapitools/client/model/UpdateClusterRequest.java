/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateClusterRequestReplicaConfiguration;
import org.openapitools.client.model.UpdateClusterRequestShardConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateClusterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:10.082054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateClusterRequest {
  public static final String SERIALIZED_NAME_CLUSTER_NAME = "ClusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
  private List securityGroupIds;

  public static final String SERIALIZED_NAME_MAINTENANCE_WINDOW = "MaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_WINDOW)
  private String maintenanceWindow;

  public static final String SERIALIZED_NAME_SNS_TOPIC_ARN = "SnsTopicArn";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC_ARN)
  private String snsTopicArn;

  public static final String SERIALIZED_NAME_SNS_TOPIC_STATUS = "SnsTopicStatus";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC_STATUS)
  private String snsTopicStatus;

  public static final String SERIALIZED_NAME_PARAMETER_GROUP_NAME = "ParameterGroupName";
  @SerializedName(SERIALIZED_NAME_PARAMETER_GROUP_NAME)
  private String parameterGroupName;

  public static final String SERIALIZED_NAME_SNAPSHOT_WINDOW = "SnapshotWindow";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_WINDOW)
  private String snapshotWindow;

  public static final String SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT = "SnapshotRetentionLimit";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT)
  private Integer snapshotRetentionLimit;

  public static final String SERIALIZED_NAME_NODE_TYPE = "NodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private String nodeType;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_REPLICA_CONFIGURATION = "ReplicaConfiguration";
  @SerializedName(SERIALIZED_NAME_REPLICA_CONFIGURATION)
  private UpdateClusterRequestReplicaConfiguration replicaConfiguration;

  public static final String SERIALIZED_NAME_SHARD_CONFIGURATION = "ShardConfiguration";
  @SerializedName(SERIALIZED_NAME_SHARD_CONFIGURATION)
  private UpdateClusterRequestShardConfiguration shardConfiguration;

  public static final String SERIALIZED_NAME_AC_L_NAME = "ACLName";
  @SerializedName(SERIALIZED_NAME_AC_L_NAME)
  private String acLName;

  public UpdateClusterRequest() {
  }

  public UpdateClusterRequest clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * Get clusterName
   * @return clusterName
   */
  @javax.annotation.Nonnull
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public UpdateClusterRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateClusterRequest securityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
    return this;
  }

  /**
   * Get securityGroupIds
   * @return securityGroupIds
   */
  @javax.annotation.Nullable
  public List getSecurityGroupIds() {
    return securityGroupIds;
  }

  public void setSecurityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
  }


  public UpdateClusterRequest maintenanceWindow(String maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
    return this;
  }

  /**
   * Get maintenanceWindow
   * @return maintenanceWindow
   */
  @javax.annotation.Nullable
  public String getMaintenanceWindow() {
    return maintenanceWindow;
  }

  public void setMaintenanceWindow(String maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
  }


  public UpdateClusterRequest snsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
    return this;
  }

  /**
   * Get snsTopicArn
   * @return snsTopicArn
   */
  @javax.annotation.Nullable
  public String getSnsTopicArn() {
    return snsTopicArn;
  }

  public void setSnsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
  }


  public UpdateClusterRequest snsTopicStatus(String snsTopicStatus) {
    this.snsTopicStatus = snsTopicStatus;
    return this;
  }

  /**
   * Get snsTopicStatus
   * @return snsTopicStatus
   */
  @javax.annotation.Nullable
  public String getSnsTopicStatus() {
    return snsTopicStatus;
  }

  public void setSnsTopicStatus(String snsTopicStatus) {
    this.snsTopicStatus = snsTopicStatus;
  }


  public UpdateClusterRequest parameterGroupName(String parameterGroupName) {
    this.parameterGroupName = parameterGroupName;
    return this;
  }

  /**
   * Get parameterGroupName
   * @return parameterGroupName
   */
  @javax.annotation.Nullable
  public String getParameterGroupName() {
    return parameterGroupName;
  }

  public void setParameterGroupName(String parameterGroupName) {
    this.parameterGroupName = parameterGroupName;
  }


  public UpdateClusterRequest snapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
    return this;
  }

  /**
   * Get snapshotWindow
   * @return snapshotWindow
   */
  @javax.annotation.Nullable
  public String getSnapshotWindow() {
    return snapshotWindow;
  }

  public void setSnapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
  }


  public UpdateClusterRequest snapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
    return this;
  }

  /**
   * Get snapshotRetentionLimit
   * @return snapshotRetentionLimit
   */
  @javax.annotation.Nullable
  public Integer getSnapshotRetentionLimit() {
    return snapshotRetentionLimit;
  }

  public void setSnapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
  }


  public UpdateClusterRequest nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  /**
   * Get nodeType
   * @return nodeType
   */
  @javax.annotation.Nullable
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }


  public UpdateClusterRequest engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public UpdateClusterRequest replicaConfiguration(UpdateClusterRequestReplicaConfiguration replicaConfiguration) {
    this.replicaConfiguration = replicaConfiguration;
    return this;
  }

  /**
   * Get replicaConfiguration
   * @return replicaConfiguration
   */
  @javax.annotation.Nullable
  public UpdateClusterRequestReplicaConfiguration getReplicaConfiguration() {
    return replicaConfiguration;
  }

  public void setReplicaConfiguration(UpdateClusterRequestReplicaConfiguration replicaConfiguration) {
    this.replicaConfiguration = replicaConfiguration;
  }


  public UpdateClusterRequest shardConfiguration(UpdateClusterRequestShardConfiguration shardConfiguration) {
    this.shardConfiguration = shardConfiguration;
    return this;
  }

  /**
   * Get shardConfiguration
   * @return shardConfiguration
   */
  @javax.annotation.Nullable
  public UpdateClusterRequestShardConfiguration getShardConfiguration() {
    return shardConfiguration;
  }

  public void setShardConfiguration(UpdateClusterRequestShardConfiguration shardConfiguration) {
    this.shardConfiguration = shardConfiguration;
  }


  public UpdateClusterRequest acLName(String acLName) {
    this.acLName = acLName;
    return this;
  }

  /**
   * Get acLName
   * @return acLName
   */
  @javax.annotation.Nullable
  public String getAcLName() {
    return acLName;
  }

  public void setAcLName(String acLName) {
    this.acLName = acLName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateClusterRequest updateClusterRequest = (UpdateClusterRequest) o;
    return Objects.equals(this.clusterName, updateClusterRequest.clusterName) &&
        Objects.equals(this.description, updateClusterRequest.description) &&
        Objects.equals(this.securityGroupIds, updateClusterRequest.securityGroupIds) &&
        Objects.equals(this.maintenanceWindow, updateClusterRequest.maintenanceWindow) &&
        Objects.equals(this.snsTopicArn, updateClusterRequest.snsTopicArn) &&
        Objects.equals(this.snsTopicStatus, updateClusterRequest.snsTopicStatus) &&
        Objects.equals(this.parameterGroupName, updateClusterRequest.parameterGroupName) &&
        Objects.equals(this.snapshotWindow, updateClusterRequest.snapshotWindow) &&
        Objects.equals(this.snapshotRetentionLimit, updateClusterRequest.snapshotRetentionLimit) &&
        Objects.equals(this.nodeType, updateClusterRequest.nodeType) &&
        Objects.equals(this.engineVersion, updateClusterRequest.engineVersion) &&
        Objects.equals(this.replicaConfiguration, updateClusterRequest.replicaConfiguration) &&
        Objects.equals(this.shardConfiguration, updateClusterRequest.shardConfiguration) &&
        Objects.equals(this.acLName, updateClusterRequest.acLName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterName, description, securityGroupIds, maintenanceWindow, snsTopicArn, snsTopicStatus, parameterGroupName, snapshotWindow, snapshotRetentionLimit, nodeType, engineVersion, replicaConfiguration, shardConfiguration, acLName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateClusterRequest {\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
    sb.append("    maintenanceWindow: ").append(toIndentedString(maintenanceWindow)).append("\n");
    sb.append("    snsTopicArn: ").append(toIndentedString(snsTopicArn)).append("\n");
    sb.append("    snsTopicStatus: ").append(toIndentedString(snsTopicStatus)).append("\n");
    sb.append("    parameterGroupName: ").append(toIndentedString(parameterGroupName)).append("\n");
    sb.append("    snapshotWindow: ").append(toIndentedString(snapshotWindow)).append("\n");
    sb.append("    snapshotRetentionLimit: ").append(toIndentedString(snapshotRetentionLimit)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    replicaConfiguration: ").append(toIndentedString(replicaConfiguration)).append("\n");
    sb.append("    shardConfiguration: ").append(toIndentedString(shardConfiguration)).append("\n");
    sb.append("    acLName: ").append(toIndentedString(acLName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterName");
    openapiFields.add("Description");
    openapiFields.add("SecurityGroupIds");
    openapiFields.add("MaintenanceWindow");
    openapiFields.add("SnsTopicArn");
    openapiFields.add("SnsTopicStatus");
    openapiFields.add("ParameterGroupName");
    openapiFields.add("SnapshotWindow");
    openapiFields.add("SnapshotRetentionLimit");
    openapiFields.add("NodeType");
    openapiFields.add("EngineVersion");
    openapiFields.add("ReplicaConfiguration");
    openapiFields.add("ShardConfiguration");
    openapiFields.add("ACLName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClusterName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateClusterRequest is not found in the empty JSON string", UpdateClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateClusterRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ClusterName`
      String.validateJsonElement(jsonObj.get("ClusterName"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `SecurityGroupIds`
      if (jsonObj.get("SecurityGroupIds") != null && !jsonObj.get("SecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupIds"));
      }
      // validate the optional field `MaintenanceWindow`
      if (jsonObj.get("MaintenanceWindow") != null && !jsonObj.get("MaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaintenanceWindow"));
      }
      // validate the optional field `SnsTopicArn`
      if (jsonObj.get("SnsTopicArn") != null && !jsonObj.get("SnsTopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnsTopicArn"));
      }
      // validate the optional field `SnsTopicStatus`
      if (jsonObj.get("SnsTopicStatus") != null && !jsonObj.get("SnsTopicStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnsTopicStatus"));
      }
      // validate the optional field `ParameterGroupName`
      if (jsonObj.get("ParameterGroupName") != null && !jsonObj.get("ParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterGroupName"));
      }
      // validate the optional field `SnapshotWindow`
      if (jsonObj.get("SnapshotWindow") != null && !jsonObj.get("SnapshotWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotWindow"));
      }
      // validate the optional field `SnapshotRetentionLimit`
      if (jsonObj.get("SnapshotRetentionLimit") != null && !jsonObj.get("SnapshotRetentionLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SnapshotRetentionLimit"));
      }
      // validate the optional field `NodeType`
      if (jsonObj.get("NodeType") != null && !jsonObj.get("NodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeType"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `ReplicaConfiguration`
      if (jsonObj.get("ReplicaConfiguration") != null && !jsonObj.get("ReplicaConfiguration").isJsonNull()) {
        UpdateClusterRequestReplicaConfiguration.validateJsonElement(jsonObj.get("ReplicaConfiguration"));
      }
      // validate the optional field `ShardConfiguration`
      if (jsonObj.get("ShardConfiguration") != null && !jsonObj.get("ShardConfiguration").isJsonNull()) {
        UpdateClusterRequestShardConfiguration.validateJsonElement(jsonObj.get("ShardConfiguration"));
      }
      // validate the optional field `ACLName`
      if (jsonObj.get("ACLName") != null && !jsonObj.get("ACLName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ACLName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateClusterRequest>() {
           @Override
           public void write(JsonWriter out, UpdateClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateClusterRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateClusterRequest
   */
  public static UpdateClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateClusterRequest.class);
  }

  /**
   * Convert an instance of UpdateClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

