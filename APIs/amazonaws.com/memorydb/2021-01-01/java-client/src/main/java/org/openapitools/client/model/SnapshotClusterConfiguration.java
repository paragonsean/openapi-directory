/*
 * Amazon MemoryDB
 * MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures. MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SnapshotClusterConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:10.082054-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnapshotClusterConfiguration {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NODE_TYPE = "NodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private String nodeType;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_MAINTENANCE_WINDOW = "MaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_WINDOW)
  private String maintenanceWindow;

  public static final String SERIALIZED_NAME_TOPIC_ARN = "TopicArn";
  @SerializedName(SERIALIZED_NAME_TOPIC_ARN)
  private String topicArn;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PARAMETER_GROUP_NAME = "ParameterGroupName";
  @SerializedName(SERIALIZED_NAME_PARAMETER_GROUP_NAME)
  private String parameterGroupName;

  public static final String SERIALIZED_NAME_SUBNET_GROUP_NAME = "SubnetGroupName";
  @SerializedName(SERIALIZED_NAME_SUBNET_GROUP_NAME)
  private String subnetGroupName;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT = "SnapshotRetentionLimit";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT)
  private Integer snapshotRetentionLimit;

  public static final String SERIALIZED_NAME_SNAPSHOT_WINDOW = "SnapshotWindow";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_WINDOW)
  private String snapshotWindow;

  public static final String SERIALIZED_NAME_NUM_SHARDS = "NumShards";
  @SerializedName(SERIALIZED_NAME_NUM_SHARDS)
  private Integer numShards;

  public static final String SERIALIZED_NAME_SHARDS = "Shards";
  @SerializedName(SERIALIZED_NAME_SHARDS)
  private List shards;

  public SnapshotClusterConfiguration() {
  }

  public SnapshotClusterConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SnapshotClusterConfiguration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SnapshotClusterConfiguration nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  /**
   * Get nodeType
   * @return nodeType
   */
  @javax.annotation.Nullable
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }


  public SnapshotClusterConfiguration engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public SnapshotClusterConfiguration maintenanceWindow(String maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
    return this;
  }

  /**
   * Get maintenanceWindow
   * @return maintenanceWindow
   */
  @javax.annotation.Nullable
  public String getMaintenanceWindow() {
    return maintenanceWindow;
  }

  public void setMaintenanceWindow(String maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
  }


  public SnapshotClusterConfiguration topicArn(String topicArn) {
    this.topicArn = topicArn;
    return this;
  }

  /**
   * Get topicArn
   * @return topicArn
   */
  @javax.annotation.Nullable
  public String getTopicArn() {
    return topicArn;
  }

  public void setTopicArn(String topicArn) {
    this.topicArn = topicArn;
  }


  public SnapshotClusterConfiguration port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public SnapshotClusterConfiguration parameterGroupName(String parameterGroupName) {
    this.parameterGroupName = parameterGroupName;
    return this;
  }

  /**
   * Get parameterGroupName
   * @return parameterGroupName
   */
  @javax.annotation.Nullable
  public String getParameterGroupName() {
    return parameterGroupName;
  }

  public void setParameterGroupName(String parameterGroupName) {
    this.parameterGroupName = parameterGroupName;
  }


  public SnapshotClusterConfiguration subnetGroupName(String subnetGroupName) {
    this.subnetGroupName = subnetGroupName;
    return this;
  }

  /**
   * Get subnetGroupName
   * @return subnetGroupName
   */
  @javax.annotation.Nullable
  public String getSubnetGroupName() {
    return subnetGroupName;
  }

  public void setSubnetGroupName(String subnetGroupName) {
    this.subnetGroupName = subnetGroupName;
  }


  public SnapshotClusterConfiguration vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public SnapshotClusterConfiguration snapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
    return this;
  }

  /**
   * Get snapshotRetentionLimit
   * @return snapshotRetentionLimit
   */
  @javax.annotation.Nullable
  public Integer getSnapshotRetentionLimit() {
    return snapshotRetentionLimit;
  }

  public void setSnapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
  }


  public SnapshotClusterConfiguration snapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
    return this;
  }

  /**
   * Get snapshotWindow
   * @return snapshotWindow
   */
  @javax.annotation.Nullable
  public String getSnapshotWindow() {
    return snapshotWindow;
  }

  public void setSnapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
  }


  public SnapshotClusterConfiguration numShards(Integer numShards) {
    this.numShards = numShards;
    return this;
  }

  /**
   * Get numShards
   * @return numShards
   */
  @javax.annotation.Nullable
  public Integer getNumShards() {
    return numShards;
  }

  public void setNumShards(Integer numShards) {
    this.numShards = numShards;
  }


  public SnapshotClusterConfiguration shards(List shards) {
    this.shards = shards;
    return this;
  }

  /**
   * Get shards
   * @return shards
   */
  @javax.annotation.Nullable
  public List getShards() {
    return shards;
  }

  public void setShards(List shards) {
    this.shards = shards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotClusterConfiguration snapshotClusterConfiguration = (SnapshotClusterConfiguration) o;
    return Objects.equals(this.name, snapshotClusterConfiguration.name) &&
        Objects.equals(this.description, snapshotClusterConfiguration.description) &&
        Objects.equals(this.nodeType, snapshotClusterConfiguration.nodeType) &&
        Objects.equals(this.engineVersion, snapshotClusterConfiguration.engineVersion) &&
        Objects.equals(this.maintenanceWindow, snapshotClusterConfiguration.maintenanceWindow) &&
        Objects.equals(this.topicArn, snapshotClusterConfiguration.topicArn) &&
        Objects.equals(this.port, snapshotClusterConfiguration.port) &&
        Objects.equals(this.parameterGroupName, snapshotClusterConfiguration.parameterGroupName) &&
        Objects.equals(this.subnetGroupName, snapshotClusterConfiguration.subnetGroupName) &&
        Objects.equals(this.vpcId, snapshotClusterConfiguration.vpcId) &&
        Objects.equals(this.snapshotRetentionLimit, snapshotClusterConfiguration.snapshotRetentionLimit) &&
        Objects.equals(this.snapshotWindow, snapshotClusterConfiguration.snapshotWindow) &&
        Objects.equals(this.numShards, snapshotClusterConfiguration.numShards) &&
        Objects.equals(this.shards, snapshotClusterConfiguration.shards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, nodeType, engineVersion, maintenanceWindow, topicArn, port, parameterGroupName, subnetGroupName, vpcId, snapshotRetentionLimit, snapshotWindow, numShards, shards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotClusterConfiguration {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    maintenanceWindow: ").append(toIndentedString(maintenanceWindow)).append("\n");
    sb.append("    topicArn: ").append(toIndentedString(topicArn)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    parameterGroupName: ").append(toIndentedString(parameterGroupName)).append("\n");
    sb.append("    subnetGroupName: ").append(toIndentedString(subnetGroupName)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    snapshotRetentionLimit: ").append(toIndentedString(snapshotRetentionLimit)).append("\n");
    sb.append("    snapshotWindow: ").append(toIndentedString(snapshotWindow)).append("\n");
    sb.append("    numShards: ").append(toIndentedString(numShards)).append("\n");
    sb.append("    shards: ").append(toIndentedString(shards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("NodeType");
    openapiFields.add("EngineVersion");
    openapiFields.add("MaintenanceWindow");
    openapiFields.add("TopicArn");
    openapiFields.add("Port");
    openapiFields.add("ParameterGroupName");
    openapiFields.add("SubnetGroupName");
    openapiFields.add("VpcId");
    openapiFields.add("SnapshotRetentionLimit");
    openapiFields.add("SnapshotWindow");
    openapiFields.add("NumShards");
    openapiFields.add("Shards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnapshotClusterConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnapshotClusterConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotClusterConfiguration is not found in the empty JSON string", SnapshotClusterConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnapshotClusterConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotClusterConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `NodeType`
      if (jsonObj.get("NodeType") != null && !jsonObj.get("NodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeType"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `MaintenanceWindow`
      if (jsonObj.get("MaintenanceWindow") != null && !jsonObj.get("MaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaintenanceWindow"));
      }
      // validate the optional field `TopicArn`
      if (jsonObj.get("TopicArn") != null && !jsonObj.get("TopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TopicArn"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `ParameterGroupName`
      if (jsonObj.get("ParameterGroupName") != null && !jsonObj.get("ParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterGroupName"));
      }
      // validate the optional field `SubnetGroupName`
      if (jsonObj.get("SubnetGroupName") != null && !jsonObj.get("SubnetGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetGroupName"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `SnapshotRetentionLimit`
      if (jsonObj.get("SnapshotRetentionLimit") != null && !jsonObj.get("SnapshotRetentionLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SnapshotRetentionLimit"));
      }
      // validate the optional field `SnapshotWindow`
      if (jsonObj.get("SnapshotWindow") != null && !jsonObj.get("SnapshotWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotWindow"));
      }
      // validate the optional field `NumShards`
      if (jsonObj.get("NumShards") != null && !jsonObj.get("NumShards").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumShards"));
      }
      // validate the optional field `Shards`
      if (jsonObj.get("Shards") != null && !jsonObj.get("Shards").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Shards"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotClusterConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotClusterConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotClusterConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotClusterConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotClusterConfiguration>() {
           @Override
           public void write(JsonWriter out, SnapshotClusterConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotClusterConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnapshotClusterConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnapshotClusterConfiguration
   * @throws IOException if the JSON string is invalid with respect to SnapshotClusterConfiguration
   */
  public static SnapshotClusterConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotClusterConfiguration.class);
  }

  /**
   * Convert an instance of SnapshotClusterConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

