/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties() {
    this->initializeModel();
}

OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::~OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties() {}

void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::initializeModel() {

    m_device_type_windows_isSet = false;
    m_device_type_windows_isValid = false;

    m_device_type_osx_isSet = false;
    m_device_type_osx_isValid = false;

    m_device_type_web_isSet = false;
    m_device_type_web_isValid = false;

    m_device_type_ios_isSet = false;
    m_device_type_ios_isValid = false;

    m_device_type_android_isSet = false;
    m_device_type_android_isValid = false;

    m_device_type_chrome_os_isSet = false;
    m_device_type_chrome_os_isValid = false;

    m_device_type_zero_client_isSet = false;
    m_device_type_zero_client_isValid = false;

    m_device_type_linux_isSet = false;
    m_device_type_linux_isValid = false;
}

void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::fromJsonObject(QJsonObject json) {

    m_device_type_windows_isValid = ::OpenAPI::fromJsonValue(m_device_type_windows, json[QString("DeviceTypeWindows")]);
    m_device_type_windows_isSet = !json[QString("DeviceTypeWindows")].isNull() && m_device_type_windows_isValid;

    m_device_type_osx_isValid = ::OpenAPI::fromJsonValue(m_device_type_osx, json[QString("DeviceTypeOsx")]);
    m_device_type_osx_isSet = !json[QString("DeviceTypeOsx")].isNull() && m_device_type_osx_isValid;

    m_device_type_web_isValid = ::OpenAPI::fromJsonValue(m_device_type_web, json[QString("DeviceTypeWeb")]);
    m_device_type_web_isSet = !json[QString("DeviceTypeWeb")].isNull() && m_device_type_web_isValid;

    m_device_type_ios_isValid = ::OpenAPI::fromJsonValue(m_device_type_ios, json[QString("DeviceTypeIos")]);
    m_device_type_ios_isSet = !json[QString("DeviceTypeIos")].isNull() && m_device_type_ios_isValid;

    m_device_type_android_isValid = ::OpenAPI::fromJsonValue(m_device_type_android, json[QString("DeviceTypeAndroid")]);
    m_device_type_android_isSet = !json[QString("DeviceTypeAndroid")].isNull() && m_device_type_android_isValid;

    m_device_type_chrome_os_isValid = ::OpenAPI::fromJsonValue(m_device_type_chrome_os, json[QString("DeviceTypeChromeOs")]);
    m_device_type_chrome_os_isSet = !json[QString("DeviceTypeChromeOs")].isNull() && m_device_type_chrome_os_isValid;

    m_device_type_zero_client_isValid = ::OpenAPI::fromJsonValue(m_device_type_zero_client, json[QString("DeviceTypeZeroClient")]);
    m_device_type_zero_client_isSet = !json[QString("DeviceTypeZeroClient")].isNull() && m_device_type_zero_client_isValid;

    m_device_type_linux_isValid = ::OpenAPI::fromJsonValue(m_device_type_linux, json[QString("DeviceTypeLinux")]);
    m_device_type_linux_isSet = !json[QString("DeviceTypeLinux")].isNull() && m_device_type_linux_isValid;
}

QString OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_windows.isSet()) {
        obj.insert(QString("DeviceTypeWindows"), ::OpenAPI::toJsonValue(m_device_type_windows));
    }
    if (m_device_type_osx.isSet()) {
        obj.insert(QString("DeviceTypeOsx"), ::OpenAPI::toJsonValue(m_device_type_osx));
    }
    if (m_device_type_web.isSet()) {
        obj.insert(QString("DeviceTypeWeb"), ::OpenAPI::toJsonValue(m_device_type_web));
    }
    if (m_device_type_ios.isSet()) {
        obj.insert(QString("DeviceTypeIos"), ::OpenAPI::toJsonValue(m_device_type_ios));
    }
    if (m_device_type_android.isSet()) {
        obj.insert(QString("DeviceTypeAndroid"), ::OpenAPI::toJsonValue(m_device_type_android));
    }
    if (m_device_type_chrome_os.isSet()) {
        obj.insert(QString("DeviceTypeChromeOs"), ::OpenAPI::toJsonValue(m_device_type_chrome_os));
    }
    if (m_device_type_zero_client.isSet()) {
        obj.insert(QString("DeviceTypeZeroClient"), ::OpenAPI::toJsonValue(m_device_type_zero_client));
    }
    if (m_device_type_linux.isSet()) {
        obj.insert(QString("DeviceTypeLinux"), ::OpenAPI::toJsonValue(m_device_type_linux));
    }
    return obj;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeWindows() const {
    return m_device_type_windows;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeWindows(const OAIAccessPropertyValue &device_type_windows) {
    m_device_type_windows = device_type_windows;
    m_device_type_windows_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_windows_Set() const{
    return m_device_type_windows_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_windows_Valid() const{
    return m_device_type_windows_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeOsx() const {
    return m_device_type_osx;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeOsx(const OAIAccessPropertyValue &device_type_osx) {
    m_device_type_osx = device_type_osx;
    m_device_type_osx_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_osx_Set() const{
    return m_device_type_osx_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_osx_Valid() const{
    return m_device_type_osx_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeWeb() const {
    return m_device_type_web;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeWeb(const OAIAccessPropertyValue &device_type_web) {
    m_device_type_web = device_type_web;
    m_device_type_web_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_web_Set() const{
    return m_device_type_web_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_web_Valid() const{
    return m_device_type_web_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeIos() const {
    return m_device_type_ios;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeIos(const OAIAccessPropertyValue &device_type_ios) {
    m_device_type_ios = device_type_ios;
    m_device_type_ios_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_ios_Set() const{
    return m_device_type_ios_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_ios_Valid() const{
    return m_device_type_ios_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeAndroid() const {
    return m_device_type_android;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeAndroid(const OAIAccessPropertyValue &device_type_android) {
    m_device_type_android = device_type_android;
    m_device_type_android_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_android_Set() const{
    return m_device_type_android_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_android_Valid() const{
    return m_device_type_android_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeChromeOs() const {
    return m_device_type_chrome_os;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeChromeOs(const OAIAccessPropertyValue &device_type_chrome_os) {
    m_device_type_chrome_os = device_type_chrome_os;
    m_device_type_chrome_os_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_chrome_os_Set() const{
    return m_device_type_chrome_os_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_chrome_os_Valid() const{
    return m_device_type_chrome_os_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeZeroClient() const {
    return m_device_type_zero_client;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeZeroClient(const OAIAccessPropertyValue &device_type_zero_client) {
    m_device_type_zero_client = device_type_zero_client;
    m_device_type_zero_client_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_zero_client_Set() const{
    return m_device_type_zero_client_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_zero_client_Valid() const{
    return m_device_type_zero_client_isValid;
}

OAIAccessPropertyValue OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::getDeviceTypeLinux() const {
    return m_device_type_linux;
}
void OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::setDeviceTypeLinux(const OAIAccessPropertyValue &device_type_linux) {
    m_device_type_linux = device_type_linux;
    m_device_type_linux_isSet = true;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_linux_Set() const{
    return m_device_type_linux_isSet;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::is_device_type_linux_Valid() const{
    return m_device_type_linux_isValid;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_osx.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_web.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_ios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_android.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_chrome_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_zero_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_linux.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyWorkspaceAccessPropertiesRequest_WorkspaceAccessProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
