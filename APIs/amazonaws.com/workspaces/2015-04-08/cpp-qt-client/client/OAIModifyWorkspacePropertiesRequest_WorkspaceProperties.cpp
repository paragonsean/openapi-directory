/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyWorkspacePropertiesRequest_WorkspaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::OAIModifyWorkspacePropertiesRequest_WorkspaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::OAIModifyWorkspacePropertiesRequest_WorkspaceProperties() {
    this->initializeModel();
}

OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::~OAIModifyWorkspacePropertiesRequest_WorkspaceProperties() {}

void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::initializeModel() {

    m_running_mode_isSet = false;
    m_running_mode_isValid = false;

    m_running_mode_auto_stop_timeout_in_minutes_isSet = false;
    m_running_mode_auto_stop_timeout_in_minutes_isValid = false;

    m_root_volume_size_gib_isSet = false;
    m_root_volume_size_gib_isValid = false;

    m_user_volume_size_gib_isSet = false;
    m_user_volume_size_gib_isValid = false;

    m_compute_type_name_isSet = false;
    m_compute_type_name_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;
}

void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::fromJsonObject(QJsonObject json) {

    m_running_mode_isValid = ::OpenAPI::fromJsonValue(m_running_mode, json[QString("RunningMode")]);
    m_running_mode_isSet = !json[QString("RunningMode")].isNull() && m_running_mode_isValid;

    m_running_mode_auto_stop_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_running_mode_auto_stop_timeout_in_minutes, json[QString("RunningModeAutoStopTimeoutInMinutes")]);
    m_running_mode_auto_stop_timeout_in_minutes_isSet = !json[QString("RunningModeAutoStopTimeoutInMinutes")].isNull() && m_running_mode_auto_stop_timeout_in_minutes_isValid;

    m_root_volume_size_gib_isValid = ::OpenAPI::fromJsonValue(m_root_volume_size_gib, json[QString("RootVolumeSizeGib")]);
    m_root_volume_size_gib_isSet = !json[QString("RootVolumeSizeGib")].isNull() && m_root_volume_size_gib_isValid;

    m_user_volume_size_gib_isValid = ::OpenAPI::fromJsonValue(m_user_volume_size_gib, json[QString("UserVolumeSizeGib")]);
    m_user_volume_size_gib_isSet = !json[QString("UserVolumeSizeGib")].isNull() && m_user_volume_size_gib_isValid;

    m_compute_type_name_isValid = ::OpenAPI::fromJsonValue(m_compute_type_name, json[QString("ComputeTypeName")]);
    m_compute_type_name_isSet = !json[QString("ComputeTypeName")].isNull() && m_compute_type_name_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("Protocols")]);
    m_protocols_isSet = !json[QString("Protocols")].isNull() && m_protocols_isValid;
}

QString OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_running_mode.isSet()) {
        obj.insert(QString("RunningMode"), ::OpenAPI::toJsonValue(m_running_mode));
    }
    if (m_running_mode_auto_stop_timeout_in_minutes_isSet) {
        obj.insert(QString("RunningModeAutoStopTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_running_mode_auto_stop_timeout_in_minutes));
    }
    if (m_root_volume_size_gib_isSet) {
        obj.insert(QString("RootVolumeSizeGib"), ::OpenAPI::toJsonValue(m_root_volume_size_gib));
    }
    if (m_user_volume_size_gib_isSet) {
        obj.insert(QString("UserVolumeSizeGib"), ::OpenAPI::toJsonValue(m_user_volume_size_gib));
    }
    if (m_compute_type_name.isSet()) {
        obj.insert(QString("ComputeTypeName"), ::OpenAPI::toJsonValue(m_compute_type_name));
    }
    if (m_protocols.isSet()) {
        obj.insert(QString("Protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    return obj;
}

OAIRunningMode OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::getRunningMode() const {
    return m_running_mode;
}
void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::setRunningMode(const OAIRunningMode &running_mode) {
    m_running_mode = running_mode;
    m_running_mode_isSet = true;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_running_mode_Set() const{
    return m_running_mode_isSet;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_running_mode_Valid() const{
    return m_running_mode_isValid;
}

qint32 OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::getRunningModeAutoStopTimeoutInMinutes() const {
    return m_running_mode_auto_stop_timeout_in_minutes;
}
void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::setRunningModeAutoStopTimeoutInMinutes(const qint32 &running_mode_auto_stop_timeout_in_minutes) {
    m_running_mode_auto_stop_timeout_in_minutes = running_mode_auto_stop_timeout_in_minutes;
    m_running_mode_auto_stop_timeout_in_minutes_isSet = true;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_running_mode_auto_stop_timeout_in_minutes_Set() const{
    return m_running_mode_auto_stop_timeout_in_minutes_isSet;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_running_mode_auto_stop_timeout_in_minutes_Valid() const{
    return m_running_mode_auto_stop_timeout_in_minutes_isValid;
}

qint32 OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::getRootVolumeSizeGib() const {
    return m_root_volume_size_gib;
}
void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::setRootVolumeSizeGib(const qint32 &root_volume_size_gib) {
    m_root_volume_size_gib = root_volume_size_gib;
    m_root_volume_size_gib_isSet = true;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_root_volume_size_gib_Set() const{
    return m_root_volume_size_gib_isSet;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_root_volume_size_gib_Valid() const{
    return m_root_volume_size_gib_isValid;
}

qint32 OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::getUserVolumeSizeGib() const {
    return m_user_volume_size_gib;
}
void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::setUserVolumeSizeGib(const qint32 &user_volume_size_gib) {
    m_user_volume_size_gib = user_volume_size_gib;
    m_user_volume_size_gib_isSet = true;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_user_volume_size_gib_Set() const{
    return m_user_volume_size_gib_isSet;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_user_volume_size_gib_Valid() const{
    return m_user_volume_size_gib_isValid;
}

OAICompute OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::getComputeTypeName() const {
    return m_compute_type_name;
}
void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::setComputeTypeName(const OAICompute &compute_type_name) {
    m_compute_type_name = compute_type_name;
    m_compute_type_name_isSet = true;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_compute_type_name_Set() const{
    return m_compute_type_name_isSet;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_compute_type_name_Valid() const{
    return m_compute_type_name_isValid;
}

QList OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::getProtocols() const {
    return m_protocols;
}
void OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::setProtocols(const QList &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::is_protocols_Valid() const{
    return m_protocols_isValid;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_running_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_mode_auto_stop_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_volume_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_volume_size_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyWorkspacePropertiesRequest_WorkspaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
