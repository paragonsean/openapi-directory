/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeClientBrandingResult.h
 *
 * 
 */

#ifndef OAIDescribeClientBrandingResult_H
#define OAIDescribeClientBrandingResult_H

#include <QJsonObject>

#include "OAIDescribeClientBrandingResult_DeviceTypeAndroid.h"
#include "OAIDescribeClientBrandingResult_DeviceTypeIos.h"
#include "OAIDescribeClientBrandingResult_DeviceTypeLinux.h"
#include "OAIDescribeClientBrandingResult_DeviceTypeOsx.h"
#include "OAIDescribeClientBrandingResult_DeviceTypeWeb.h"
#include "OAIDescribeClientBrandingResult_DeviceTypeWindows.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeClientBrandingResult_DeviceTypeWindows;
class OAIDescribeClientBrandingResult_DeviceTypeOsx;
class OAIDescribeClientBrandingResult_DeviceTypeAndroid;
class OAIDescribeClientBrandingResult_DeviceTypeIos;
class OAIDescribeClientBrandingResult_DeviceTypeLinux;
class OAIDescribeClientBrandingResult_DeviceTypeWeb;

class OAIDescribeClientBrandingResult : public OAIObject {
public:
    OAIDescribeClientBrandingResult();
    OAIDescribeClientBrandingResult(QString json);
    ~OAIDescribeClientBrandingResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDescribeClientBrandingResult_DeviceTypeWindows getDeviceTypeWindows() const;
    void setDeviceTypeWindows(const OAIDescribeClientBrandingResult_DeviceTypeWindows &device_type_windows);
    bool is_device_type_windows_Set() const;
    bool is_device_type_windows_Valid() const;

    OAIDescribeClientBrandingResult_DeviceTypeOsx getDeviceTypeOsx() const;
    void setDeviceTypeOsx(const OAIDescribeClientBrandingResult_DeviceTypeOsx &device_type_osx);
    bool is_device_type_osx_Set() const;
    bool is_device_type_osx_Valid() const;

    OAIDescribeClientBrandingResult_DeviceTypeAndroid getDeviceTypeAndroid() const;
    void setDeviceTypeAndroid(const OAIDescribeClientBrandingResult_DeviceTypeAndroid &device_type_android);
    bool is_device_type_android_Set() const;
    bool is_device_type_android_Valid() const;

    OAIDescribeClientBrandingResult_DeviceTypeIos getDeviceTypeIos() const;
    void setDeviceTypeIos(const OAIDescribeClientBrandingResult_DeviceTypeIos &device_type_ios);
    bool is_device_type_ios_Set() const;
    bool is_device_type_ios_Valid() const;

    OAIDescribeClientBrandingResult_DeviceTypeLinux getDeviceTypeLinux() const;
    void setDeviceTypeLinux(const OAIDescribeClientBrandingResult_DeviceTypeLinux &device_type_linux);
    bool is_device_type_linux_Set() const;
    bool is_device_type_linux_Valid() const;

    OAIDescribeClientBrandingResult_DeviceTypeWeb getDeviceTypeWeb() const;
    void setDeviceTypeWeb(const OAIDescribeClientBrandingResult_DeviceTypeWeb &device_type_web);
    bool is_device_type_web_Set() const;
    bool is_device_type_web_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDescribeClientBrandingResult_DeviceTypeWindows m_device_type_windows;
    bool m_device_type_windows_isSet;
    bool m_device_type_windows_isValid;

    OAIDescribeClientBrandingResult_DeviceTypeOsx m_device_type_osx;
    bool m_device_type_osx_isSet;
    bool m_device_type_osx_isValid;

    OAIDescribeClientBrandingResult_DeviceTypeAndroid m_device_type_android;
    bool m_device_type_android_isSet;
    bool m_device_type_android_isValid;

    OAIDescribeClientBrandingResult_DeviceTypeIos m_device_type_ios;
    bool m_device_type_ios_isSet;
    bool m_device_type_ios_isValid;

    OAIDescribeClientBrandingResult_DeviceTypeLinux m_device_type_linux;
    bool m_device_type_linux_isSet;
    bool m_device_type_linux_isValid;

    OAIDescribeClientBrandingResult_DeviceTypeWeb m_device_type_web;
    bool m_device_type_web_isSet;
    bool m_device_type_web_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeClientBrandingResult)

#endif // OAIDescribeClientBrandingResult_H
