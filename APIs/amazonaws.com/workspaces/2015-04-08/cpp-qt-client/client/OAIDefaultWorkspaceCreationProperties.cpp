/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultWorkspaceCreationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultWorkspaceCreationProperties::OAIDefaultWorkspaceCreationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultWorkspaceCreationProperties::OAIDefaultWorkspaceCreationProperties() {
    this->initializeModel();
}

OAIDefaultWorkspaceCreationProperties::~OAIDefaultWorkspaceCreationProperties() {}

void OAIDefaultWorkspaceCreationProperties::initializeModel() {

    m_enable_work_docs_isSet = false;
    m_enable_work_docs_isValid = false;

    m_enable_internet_access_isSet = false;
    m_enable_internet_access_isValid = false;

    m_default_ou_isSet = false;
    m_default_ou_isValid = false;

    m_custom_security_group_id_isSet = false;
    m_custom_security_group_id_isValid = false;

    m_user_enabled_as_local_administrator_isSet = false;
    m_user_enabled_as_local_administrator_isValid = false;

    m_enable_maintenance_mode_isSet = false;
    m_enable_maintenance_mode_isValid = false;
}

void OAIDefaultWorkspaceCreationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultWorkspaceCreationProperties::fromJsonObject(QJsonObject json) {

    m_enable_work_docs_isValid = ::OpenAPI::fromJsonValue(m_enable_work_docs, json[QString("EnableWorkDocs")]);
    m_enable_work_docs_isSet = !json[QString("EnableWorkDocs")].isNull() && m_enable_work_docs_isValid;

    m_enable_internet_access_isValid = ::OpenAPI::fromJsonValue(m_enable_internet_access, json[QString("EnableInternetAccess")]);
    m_enable_internet_access_isSet = !json[QString("EnableInternetAccess")].isNull() && m_enable_internet_access_isValid;

    m_default_ou_isValid = ::OpenAPI::fromJsonValue(m_default_ou, json[QString("DefaultOu")]);
    m_default_ou_isSet = !json[QString("DefaultOu")].isNull() && m_default_ou_isValid;

    m_custom_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_custom_security_group_id, json[QString("CustomSecurityGroupId")]);
    m_custom_security_group_id_isSet = !json[QString("CustomSecurityGroupId")].isNull() && m_custom_security_group_id_isValid;

    m_user_enabled_as_local_administrator_isValid = ::OpenAPI::fromJsonValue(m_user_enabled_as_local_administrator, json[QString("UserEnabledAsLocalAdministrator")]);
    m_user_enabled_as_local_administrator_isSet = !json[QString("UserEnabledAsLocalAdministrator")].isNull() && m_user_enabled_as_local_administrator_isValid;

    m_enable_maintenance_mode_isValid = ::OpenAPI::fromJsonValue(m_enable_maintenance_mode, json[QString("EnableMaintenanceMode")]);
    m_enable_maintenance_mode_isSet = !json[QString("EnableMaintenanceMode")].isNull() && m_enable_maintenance_mode_isValid;
}

QString OAIDefaultWorkspaceCreationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultWorkspaceCreationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_work_docs_isSet) {
        obj.insert(QString("EnableWorkDocs"), ::OpenAPI::toJsonValue(m_enable_work_docs));
    }
    if (m_enable_internet_access_isSet) {
        obj.insert(QString("EnableInternetAccess"), ::OpenAPI::toJsonValue(m_enable_internet_access));
    }
    if (m_default_ou_isSet) {
        obj.insert(QString("DefaultOu"), ::OpenAPI::toJsonValue(m_default_ou));
    }
    if (m_custom_security_group_id_isSet) {
        obj.insert(QString("CustomSecurityGroupId"), ::OpenAPI::toJsonValue(m_custom_security_group_id));
    }
    if (m_user_enabled_as_local_administrator_isSet) {
        obj.insert(QString("UserEnabledAsLocalAdministrator"), ::OpenAPI::toJsonValue(m_user_enabled_as_local_administrator));
    }
    if (m_enable_maintenance_mode_isSet) {
        obj.insert(QString("EnableMaintenanceMode"), ::OpenAPI::toJsonValue(m_enable_maintenance_mode));
    }
    return obj;
}

bool OAIDefaultWorkspaceCreationProperties::getEnableWorkDocs() const {
    return m_enable_work_docs;
}
void OAIDefaultWorkspaceCreationProperties::setEnableWorkDocs(const bool &enable_work_docs) {
    m_enable_work_docs = enable_work_docs;
    m_enable_work_docs_isSet = true;
}

bool OAIDefaultWorkspaceCreationProperties::is_enable_work_docs_Set() const{
    return m_enable_work_docs_isSet;
}

bool OAIDefaultWorkspaceCreationProperties::is_enable_work_docs_Valid() const{
    return m_enable_work_docs_isValid;
}

bool OAIDefaultWorkspaceCreationProperties::getEnableInternetAccess() const {
    return m_enable_internet_access;
}
void OAIDefaultWorkspaceCreationProperties::setEnableInternetAccess(const bool &enable_internet_access) {
    m_enable_internet_access = enable_internet_access;
    m_enable_internet_access_isSet = true;
}

bool OAIDefaultWorkspaceCreationProperties::is_enable_internet_access_Set() const{
    return m_enable_internet_access_isSet;
}

bool OAIDefaultWorkspaceCreationProperties::is_enable_internet_access_Valid() const{
    return m_enable_internet_access_isValid;
}

QString OAIDefaultWorkspaceCreationProperties::getDefaultOu() const {
    return m_default_ou;
}
void OAIDefaultWorkspaceCreationProperties::setDefaultOu(const QString &default_ou) {
    m_default_ou = default_ou;
    m_default_ou_isSet = true;
}

bool OAIDefaultWorkspaceCreationProperties::is_default_ou_Set() const{
    return m_default_ou_isSet;
}

bool OAIDefaultWorkspaceCreationProperties::is_default_ou_Valid() const{
    return m_default_ou_isValid;
}

QString OAIDefaultWorkspaceCreationProperties::getCustomSecurityGroupId() const {
    return m_custom_security_group_id;
}
void OAIDefaultWorkspaceCreationProperties::setCustomSecurityGroupId(const QString &custom_security_group_id) {
    m_custom_security_group_id = custom_security_group_id;
    m_custom_security_group_id_isSet = true;
}

bool OAIDefaultWorkspaceCreationProperties::is_custom_security_group_id_Set() const{
    return m_custom_security_group_id_isSet;
}

bool OAIDefaultWorkspaceCreationProperties::is_custom_security_group_id_Valid() const{
    return m_custom_security_group_id_isValid;
}

bool OAIDefaultWorkspaceCreationProperties::getUserEnabledAsLocalAdministrator() const {
    return m_user_enabled_as_local_administrator;
}
void OAIDefaultWorkspaceCreationProperties::setUserEnabledAsLocalAdministrator(const bool &user_enabled_as_local_administrator) {
    m_user_enabled_as_local_administrator = user_enabled_as_local_administrator;
    m_user_enabled_as_local_administrator_isSet = true;
}

bool OAIDefaultWorkspaceCreationProperties::is_user_enabled_as_local_administrator_Set() const{
    return m_user_enabled_as_local_administrator_isSet;
}

bool OAIDefaultWorkspaceCreationProperties::is_user_enabled_as_local_administrator_Valid() const{
    return m_user_enabled_as_local_administrator_isValid;
}

bool OAIDefaultWorkspaceCreationProperties::getEnableMaintenanceMode() const {
    return m_enable_maintenance_mode;
}
void OAIDefaultWorkspaceCreationProperties::setEnableMaintenanceMode(const bool &enable_maintenance_mode) {
    m_enable_maintenance_mode = enable_maintenance_mode;
    m_enable_maintenance_mode_isSet = true;
}

bool OAIDefaultWorkspaceCreationProperties::is_enable_maintenance_mode_Set() const{
    return m_enable_maintenance_mode_isSet;
}

bool OAIDefaultWorkspaceCreationProperties::is_enable_maintenance_mode_Valid() const{
    return m_enable_maintenance_mode_isValid;
}

bool OAIDefaultWorkspaceCreationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_work_docs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_internet_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_ou_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_enabled_as_local_administrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_maintenance_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultWorkspaceCreationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
