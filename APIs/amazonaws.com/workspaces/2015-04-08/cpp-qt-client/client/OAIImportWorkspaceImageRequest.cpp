/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportWorkspaceImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportWorkspaceImageRequest::OAIImportWorkspaceImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportWorkspaceImageRequest::OAIImportWorkspaceImageRequest() {
    this->initializeModel();
}

OAIImportWorkspaceImageRequest::~OAIImportWorkspaceImageRequest() {}

void OAIImportWorkspaceImageRequest::initializeModel() {

    m_ec2_image_id_isSet = false;
    m_ec2_image_id_isValid = false;

    m_ingestion_process_isSet = false;
    m_ingestion_process_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_image_description_isSet = false;
    m_image_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;
}

void OAIImportWorkspaceImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportWorkspaceImageRequest::fromJsonObject(QJsonObject json) {

    m_ec2_image_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_image_id, json[QString("Ec2ImageId")]);
    m_ec2_image_id_isSet = !json[QString("Ec2ImageId")].isNull() && m_ec2_image_id_isValid;

    m_ingestion_process_isValid = ::OpenAPI::fromJsonValue(m_ingestion_process, json[QString("IngestionProcess")]);
    m_ingestion_process_isSet = !json[QString("IngestionProcess")].isNull() && m_ingestion_process_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("ImageName")]);
    m_image_name_isSet = !json[QString("ImageName")].isNull() && m_image_name_isValid;

    m_image_description_isValid = ::OpenAPI::fromJsonValue(m_image_description, json[QString("ImageDescription")]);
    m_image_description_isSet = !json[QString("ImageDescription")].isNull() && m_image_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("Applications")]);
    m_applications_isSet = !json[QString("Applications")].isNull() && m_applications_isValid;
}

QString OAIImportWorkspaceImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportWorkspaceImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_image_id_isSet) {
        obj.insert(QString("Ec2ImageId"), ::OpenAPI::toJsonValue(m_ec2_image_id));
    }
    if (m_ingestion_process.isSet()) {
        obj.insert(QString("IngestionProcess"), ::OpenAPI::toJsonValue(m_ingestion_process));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("ImageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_image_description_isSet) {
        obj.insert(QString("ImageDescription"), ::OpenAPI::toJsonValue(m_image_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_applications.isSet()) {
        obj.insert(QString("Applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    return obj;
}

QString OAIImportWorkspaceImageRequest::getEc2ImageId() const {
    return m_ec2_image_id;
}
void OAIImportWorkspaceImageRequest::setEc2ImageId(const QString &ec2_image_id) {
    m_ec2_image_id = ec2_image_id;
    m_ec2_image_id_isSet = true;
}

bool OAIImportWorkspaceImageRequest::is_ec2_image_id_Set() const{
    return m_ec2_image_id_isSet;
}

bool OAIImportWorkspaceImageRequest::is_ec2_image_id_Valid() const{
    return m_ec2_image_id_isValid;
}

OAIWorkspaceImageIngestionProcess OAIImportWorkspaceImageRequest::getIngestionProcess() const {
    return m_ingestion_process;
}
void OAIImportWorkspaceImageRequest::setIngestionProcess(const OAIWorkspaceImageIngestionProcess &ingestion_process) {
    m_ingestion_process = ingestion_process;
    m_ingestion_process_isSet = true;
}

bool OAIImportWorkspaceImageRequest::is_ingestion_process_Set() const{
    return m_ingestion_process_isSet;
}

bool OAIImportWorkspaceImageRequest::is_ingestion_process_Valid() const{
    return m_ingestion_process_isValid;
}

QString OAIImportWorkspaceImageRequest::getImageName() const {
    return m_image_name;
}
void OAIImportWorkspaceImageRequest::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIImportWorkspaceImageRequest::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIImportWorkspaceImageRequest::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QString OAIImportWorkspaceImageRequest::getImageDescription() const {
    return m_image_description;
}
void OAIImportWorkspaceImageRequest::setImageDescription(const QString &image_description) {
    m_image_description = image_description;
    m_image_description_isSet = true;
}

bool OAIImportWorkspaceImageRequest::is_image_description_Set() const{
    return m_image_description_isSet;
}

bool OAIImportWorkspaceImageRequest::is_image_description_Valid() const{
    return m_image_description_isValid;
}

QList OAIImportWorkspaceImageRequest::getTags() const {
    return m_tags;
}
void OAIImportWorkspaceImageRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImportWorkspaceImageRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImportWorkspaceImageRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIImportWorkspaceImageRequest::getApplications() const {
    return m_applications;
}
void OAIImportWorkspaceImageRequest::setApplications(const QList &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIImportWorkspaceImageRequest::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIImportWorkspaceImageRequest::is_applications_Valid() const{
    return m_applications_isValid;
}

bool OAIImportWorkspaceImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_process.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportWorkspaceImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ec2_image_id_isValid && m_ingestion_process_isValid && m_image_name_isValid && m_image_description_isValid && true;
}

} // namespace OpenAPI
