/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeClientBrandingResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeClientBrandingResult::OAIDescribeClientBrandingResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeClientBrandingResult::OAIDescribeClientBrandingResult() {
    this->initializeModel();
}

OAIDescribeClientBrandingResult::~OAIDescribeClientBrandingResult() {}

void OAIDescribeClientBrandingResult::initializeModel() {

    m_device_type_windows_isSet = false;
    m_device_type_windows_isValid = false;

    m_device_type_osx_isSet = false;
    m_device_type_osx_isValid = false;

    m_device_type_android_isSet = false;
    m_device_type_android_isValid = false;

    m_device_type_ios_isSet = false;
    m_device_type_ios_isValid = false;

    m_device_type_linux_isSet = false;
    m_device_type_linux_isValid = false;

    m_device_type_web_isSet = false;
    m_device_type_web_isValid = false;
}

void OAIDescribeClientBrandingResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeClientBrandingResult::fromJsonObject(QJsonObject json) {

    m_device_type_windows_isValid = ::OpenAPI::fromJsonValue(m_device_type_windows, json[QString("DeviceTypeWindows")]);
    m_device_type_windows_isSet = !json[QString("DeviceTypeWindows")].isNull() && m_device_type_windows_isValid;

    m_device_type_osx_isValid = ::OpenAPI::fromJsonValue(m_device_type_osx, json[QString("DeviceTypeOsx")]);
    m_device_type_osx_isSet = !json[QString("DeviceTypeOsx")].isNull() && m_device_type_osx_isValid;

    m_device_type_android_isValid = ::OpenAPI::fromJsonValue(m_device_type_android, json[QString("DeviceTypeAndroid")]);
    m_device_type_android_isSet = !json[QString("DeviceTypeAndroid")].isNull() && m_device_type_android_isValid;

    m_device_type_ios_isValid = ::OpenAPI::fromJsonValue(m_device_type_ios, json[QString("DeviceTypeIos")]);
    m_device_type_ios_isSet = !json[QString("DeviceTypeIos")].isNull() && m_device_type_ios_isValid;

    m_device_type_linux_isValid = ::OpenAPI::fromJsonValue(m_device_type_linux, json[QString("DeviceTypeLinux")]);
    m_device_type_linux_isSet = !json[QString("DeviceTypeLinux")].isNull() && m_device_type_linux_isValid;

    m_device_type_web_isValid = ::OpenAPI::fromJsonValue(m_device_type_web, json[QString("DeviceTypeWeb")]);
    m_device_type_web_isSet = !json[QString("DeviceTypeWeb")].isNull() && m_device_type_web_isValid;
}

QString OAIDescribeClientBrandingResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeClientBrandingResult::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_windows.isSet()) {
        obj.insert(QString("DeviceTypeWindows"), ::OpenAPI::toJsonValue(m_device_type_windows));
    }
    if (m_device_type_osx.isSet()) {
        obj.insert(QString("DeviceTypeOsx"), ::OpenAPI::toJsonValue(m_device_type_osx));
    }
    if (m_device_type_android.isSet()) {
        obj.insert(QString("DeviceTypeAndroid"), ::OpenAPI::toJsonValue(m_device_type_android));
    }
    if (m_device_type_ios.isSet()) {
        obj.insert(QString("DeviceTypeIos"), ::OpenAPI::toJsonValue(m_device_type_ios));
    }
    if (m_device_type_linux.isSet()) {
        obj.insert(QString("DeviceTypeLinux"), ::OpenAPI::toJsonValue(m_device_type_linux));
    }
    if (m_device_type_web.isSet()) {
        obj.insert(QString("DeviceTypeWeb"), ::OpenAPI::toJsonValue(m_device_type_web));
    }
    return obj;
}

OAIDescribeClientBrandingResult_DeviceTypeWindows OAIDescribeClientBrandingResult::getDeviceTypeWindows() const {
    return m_device_type_windows;
}
void OAIDescribeClientBrandingResult::setDeviceTypeWindows(const OAIDescribeClientBrandingResult_DeviceTypeWindows &device_type_windows) {
    m_device_type_windows = device_type_windows;
    m_device_type_windows_isSet = true;
}

bool OAIDescribeClientBrandingResult::is_device_type_windows_Set() const{
    return m_device_type_windows_isSet;
}

bool OAIDescribeClientBrandingResult::is_device_type_windows_Valid() const{
    return m_device_type_windows_isValid;
}

OAIDescribeClientBrandingResult_DeviceTypeOsx OAIDescribeClientBrandingResult::getDeviceTypeOsx() const {
    return m_device_type_osx;
}
void OAIDescribeClientBrandingResult::setDeviceTypeOsx(const OAIDescribeClientBrandingResult_DeviceTypeOsx &device_type_osx) {
    m_device_type_osx = device_type_osx;
    m_device_type_osx_isSet = true;
}

bool OAIDescribeClientBrandingResult::is_device_type_osx_Set() const{
    return m_device_type_osx_isSet;
}

bool OAIDescribeClientBrandingResult::is_device_type_osx_Valid() const{
    return m_device_type_osx_isValid;
}

OAIDescribeClientBrandingResult_DeviceTypeAndroid OAIDescribeClientBrandingResult::getDeviceTypeAndroid() const {
    return m_device_type_android;
}
void OAIDescribeClientBrandingResult::setDeviceTypeAndroid(const OAIDescribeClientBrandingResult_DeviceTypeAndroid &device_type_android) {
    m_device_type_android = device_type_android;
    m_device_type_android_isSet = true;
}

bool OAIDescribeClientBrandingResult::is_device_type_android_Set() const{
    return m_device_type_android_isSet;
}

bool OAIDescribeClientBrandingResult::is_device_type_android_Valid() const{
    return m_device_type_android_isValid;
}

OAIDescribeClientBrandingResult_DeviceTypeIos OAIDescribeClientBrandingResult::getDeviceTypeIos() const {
    return m_device_type_ios;
}
void OAIDescribeClientBrandingResult::setDeviceTypeIos(const OAIDescribeClientBrandingResult_DeviceTypeIos &device_type_ios) {
    m_device_type_ios = device_type_ios;
    m_device_type_ios_isSet = true;
}

bool OAIDescribeClientBrandingResult::is_device_type_ios_Set() const{
    return m_device_type_ios_isSet;
}

bool OAIDescribeClientBrandingResult::is_device_type_ios_Valid() const{
    return m_device_type_ios_isValid;
}

OAIDescribeClientBrandingResult_DeviceTypeLinux OAIDescribeClientBrandingResult::getDeviceTypeLinux() const {
    return m_device_type_linux;
}
void OAIDescribeClientBrandingResult::setDeviceTypeLinux(const OAIDescribeClientBrandingResult_DeviceTypeLinux &device_type_linux) {
    m_device_type_linux = device_type_linux;
    m_device_type_linux_isSet = true;
}

bool OAIDescribeClientBrandingResult::is_device_type_linux_Set() const{
    return m_device_type_linux_isSet;
}

bool OAIDescribeClientBrandingResult::is_device_type_linux_Valid() const{
    return m_device_type_linux_isValid;
}

OAIDescribeClientBrandingResult_DeviceTypeWeb OAIDescribeClientBrandingResult::getDeviceTypeWeb() const {
    return m_device_type_web;
}
void OAIDescribeClientBrandingResult::setDeviceTypeWeb(const OAIDescribeClientBrandingResult_DeviceTypeWeb &device_type_web) {
    m_device_type_web = device_type_web;
    m_device_type_web_isSet = true;
}

bool OAIDescribeClientBrandingResult::is_device_type_web_Set() const{
    return m_device_type_web_isSet;
}

bool OAIDescribeClientBrandingResult::is_device_type_web_Valid() const{
    return m_device_type_web_isValid;
}

bool OAIDescribeClientBrandingResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_osx.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_android.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_ios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_linux.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_web.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeClientBrandingResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
