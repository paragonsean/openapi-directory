/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConnectClientAddInRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConnectClientAddInRequest::OAICreateConnectClientAddInRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConnectClientAddInRequest::OAICreateConnectClientAddInRequest() {
    this->initializeModel();
}

OAICreateConnectClientAddInRequest::~OAICreateConnectClientAddInRequest() {}

void OAICreateConnectClientAddInRequest::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreateConnectClientAddInRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConnectClientAddInRequest::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("URL")]);
    m_url_isSet = !json[QString("URL")].isNull() && m_url_isValid;
}

QString OAICreateConnectClientAddInRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConnectClientAddInRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("URL"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICreateConnectClientAddInRequest::getResourceId() const {
    return m_resource_id;
}
void OAICreateConnectClientAddInRequest::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICreateConnectClientAddInRequest::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICreateConnectClientAddInRequest::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICreateConnectClientAddInRequest::getName() const {
    return m_name;
}
void OAICreateConnectClientAddInRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConnectClientAddInRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConnectClientAddInRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateConnectClientAddInRequest::getUrl() const {
    return m_url;
}
void OAICreateConnectClientAddInRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateConnectClientAddInRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateConnectClientAddInRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreateConnectClientAddInRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConnectClientAddInRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
