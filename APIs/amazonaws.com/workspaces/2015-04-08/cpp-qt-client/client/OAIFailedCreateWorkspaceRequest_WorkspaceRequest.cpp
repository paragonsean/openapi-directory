/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailedCreateWorkspaceRequest_WorkspaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailedCreateWorkspaceRequest_WorkspaceRequest::OAIFailedCreateWorkspaceRequest_WorkspaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailedCreateWorkspaceRequest_WorkspaceRequest::OAIFailedCreateWorkspaceRequest_WorkspaceRequest() {
    this->initializeModel();
}

OAIFailedCreateWorkspaceRequest_WorkspaceRequest::~OAIFailedCreateWorkspaceRequest_WorkspaceRequest() {}

void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::initializeModel() {

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_volume_encryption_key_isSet = false;
    m_volume_encryption_key_isValid = false;

    m_user_volume_encryption_enabled_isSet = false;
    m_user_volume_encryption_enabled_isValid = false;

    m_root_volume_encryption_enabled_isSet = false;
    m_root_volume_encryption_enabled_isValid = false;

    m_workspace_properties_isSet = false;
    m_workspace_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::fromJsonObject(QJsonObject json) {

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("BundleId")]);
    m_bundle_id_isSet = !json[QString("BundleId")].isNull() && m_bundle_id_isValid;

    m_volume_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_volume_encryption_key, json[QString("VolumeEncryptionKey")]);
    m_volume_encryption_key_isSet = !json[QString("VolumeEncryptionKey")].isNull() && m_volume_encryption_key_isValid;

    m_user_volume_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_user_volume_encryption_enabled, json[QString("UserVolumeEncryptionEnabled")]);
    m_user_volume_encryption_enabled_isSet = !json[QString("UserVolumeEncryptionEnabled")].isNull() && m_user_volume_encryption_enabled_isValid;

    m_root_volume_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_root_volume_encryption_enabled, json[QString("RootVolumeEncryptionEnabled")]);
    m_root_volume_encryption_enabled_isSet = !json[QString("RootVolumeEncryptionEnabled")].isNull() && m_root_volume_encryption_enabled_isValid;

    m_workspace_properties_isValid = ::OpenAPI::fromJsonValue(m_workspace_properties, json[QString("WorkspaceProperties")]);
    m_workspace_properties_isSet = !json[QString("WorkspaceProperties")].isNull() && m_workspace_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIFailedCreateWorkspaceRequest_WorkspaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailedCreateWorkspaceRequest_WorkspaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_bundle_id_isSet) {
        obj.insert(QString("BundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_volume_encryption_key_isSet) {
        obj.insert(QString("VolumeEncryptionKey"), ::OpenAPI::toJsonValue(m_volume_encryption_key));
    }
    if (m_user_volume_encryption_enabled_isSet) {
        obj.insert(QString("UserVolumeEncryptionEnabled"), ::OpenAPI::toJsonValue(m_user_volume_encryption_enabled));
    }
    if (m_root_volume_encryption_enabled_isSet) {
        obj.insert(QString("RootVolumeEncryptionEnabled"), ::OpenAPI::toJsonValue(m_root_volume_encryption_enabled));
    }
    if (m_workspace_properties.isSet()) {
        obj.insert(QString("WorkspaceProperties"), ::OpenAPI::toJsonValue(m_workspace_properties));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getDirectoryId() const {
    return m_directory_id;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

QString OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getUserName() const {
    return m_user_name;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getBundleId() const {
    return m_bundle_id;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getVolumeEncryptionKey() const {
    return m_volume_encryption_key;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setVolumeEncryptionKey(const QString &volume_encryption_key) {
    m_volume_encryption_key = volume_encryption_key;
    m_volume_encryption_key_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_volume_encryption_key_Set() const{
    return m_volume_encryption_key_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_volume_encryption_key_Valid() const{
    return m_volume_encryption_key_isValid;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getUserVolumeEncryptionEnabled() const {
    return m_user_volume_encryption_enabled;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setUserVolumeEncryptionEnabled(const bool &user_volume_encryption_enabled) {
    m_user_volume_encryption_enabled = user_volume_encryption_enabled;
    m_user_volume_encryption_enabled_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_user_volume_encryption_enabled_Set() const{
    return m_user_volume_encryption_enabled_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_user_volume_encryption_enabled_Valid() const{
    return m_user_volume_encryption_enabled_isValid;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getRootVolumeEncryptionEnabled() const {
    return m_root_volume_encryption_enabled;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setRootVolumeEncryptionEnabled(const bool &root_volume_encryption_enabled) {
    m_root_volume_encryption_enabled = root_volume_encryption_enabled;
    m_root_volume_encryption_enabled_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_root_volume_encryption_enabled_Set() const{
    return m_root_volume_encryption_enabled_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_root_volume_encryption_enabled_Valid() const{
    return m_root_volume_encryption_enabled_isValid;
}

OAIWorkspaceRequest_WorkspaceProperties OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getWorkspaceProperties() const {
    return m_workspace_properties;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setWorkspaceProperties(const OAIWorkspaceRequest_WorkspaceProperties &workspace_properties) {
    m_workspace_properties = workspace_properties;
    m_workspace_properties_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_workspace_properties_Set() const{
    return m_workspace_properties_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_workspace_properties_Valid() const{
    return m_workspace_properties_isValid;
}

QList OAIFailedCreateWorkspaceRequest_WorkspaceRequest::getTags() const {
    return m_tags;
}
void OAIFailedCreateWorkspaceRequest_WorkspaceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_volume_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_volume_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailedCreateWorkspaceRequest_WorkspaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_directory_id_isValid && m_user_name_isValid && m_bundle_id_isValid && true;
}

} // namespace OpenAPI
