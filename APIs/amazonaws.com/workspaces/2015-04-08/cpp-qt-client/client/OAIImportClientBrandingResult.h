/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportClientBrandingResult.h
 *
 * 
 */

#ifndef OAIImportClientBrandingResult_H
#define OAIImportClientBrandingResult_H

#include <QJsonObject>

#include "OAIImportClientBrandingResult_DeviceTypeAndroid.h"
#include "OAIImportClientBrandingResult_DeviceTypeIos.h"
#include "OAIImportClientBrandingResult_DeviceTypeLinux.h"
#include "OAIImportClientBrandingResult_DeviceTypeOsx.h"
#include "OAIImportClientBrandingResult_DeviceTypeWeb.h"
#include "OAIImportClientBrandingResult_DeviceTypeWindows.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImportClientBrandingResult_DeviceTypeWindows;
class OAIImportClientBrandingResult_DeviceTypeOsx;
class OAIImportClientBrandingResult_DeviceTypeAndroid;
class OAIImportClientBrandingResult_DeviceTypeIos;
class OAIImportClientBrandingResult_DeviceTypeLinux;
class OAIImportClientBrandingResult_DeviceTypeWeb;

class OAIImportClientBrandingResult : public OAIObject {
public:
    OAIImportClientBrandingResult();
    OAIImportClientBrandingResult(QString json);
    ~OAIImportClientBrandingResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIImportClientBrandingResult_DeviceTypeWindows getDeviceTypeWindows() const;
    void setDeviceTypeWindows(const OAIImportClientBrandingResult_DeviceTypeWindows &device_type_windows);
    bool is_device_type_windows_Set() const;
    bool is_device_type_windows_Valid() const;

    OAIImportClientBrandingResult_DeviceTypeOsx getDeviceTypeOsx() const;
    void setDeviceTypeOsx(const OAIImportClientBrandingResult_DeviceTypeOsx &device_type_osx);
    bool is_device_type_osx_Set() const;
    bool is_device_type_osx_Valid() const;

    OAIImportClientBrandingResult_DeviceTypeAndroid getDeviceTypeAndroid() const;
    void setDeviceTypeAndroid(const OAIImportClientBrandingResult_DeviceTypeAndroid &device_type_android);
    bool is_device_type_android_Set() const;
    bool is_device_type_android_Valid() const;

    OAIImportClientBrandingResult_DeviceTypeIos getDeviceTypeIos() const;
    void setDeviceTypeIos(const OAIImportClientBrandingResult_DeviceTypeIos &device_type_ios);
    bool is_device_type_ios_Set() const;
    bool is_device_type_ios_Valid() const;

    OAIImportClientBrandingResult_DeviceTypeLinux getDeviceTypeLinux() const;
    void setDeviceTypeLinux(const OAIImportClientBrandingResult_DeviceTypeLinux &device_type_linux);
    bool is_device_type_linux_Set() const;
    bool is_device_type_linux_Valid() const;

    OAIImportClientBrandingResult_DeviceTypeWeb getDeviceTypeWeb() const;
    void setDeviceTypeWeb(const OAIImportClientBrandingResult_DeviceTypeWeb &device_type_web);
    bool is_device_type_web_Set() const;
    bool is_device_type_web_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIImportClientBrandingResult_DeviceTypeWindows m_device_type_windows;
    bool m_device_type_windows_isSet;
    bool m_device_type_windows_isValid;

    OAIImportClientBrandingResult_DeviceTypeOsx m_device_type_osx;
    bool m_device_type_osx_isSet;
    bool m_device_type_osx_isValid;

    OAIImportClientBrandingResult_DeviceTypeAndroid m_device_type_android;
    bool m_device_type_android_isSet;
    bool m_device_type_android_isValid;

    OAIImportClientBrandingResult_DeviceTypeIos m_device_type_ios;
    bool m_device_type_ios_isSet;
    bool m_device_type_ios_isValid;

    OAIImportClientBrandingResult_DeviceTypeLinux m_device_type_linux;
    bool m_device_type_linux_isSet;
    bool m_device_type_linux_isValid;

    OAIImportClientBrandingResult_DeviceTypeWeb m_device_type_web;
    bool m_device_type_web_isSet;
    bool m_device_type_web_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportClientBrandingResult)

#endif // OAIImportClientBrandingResult_H
