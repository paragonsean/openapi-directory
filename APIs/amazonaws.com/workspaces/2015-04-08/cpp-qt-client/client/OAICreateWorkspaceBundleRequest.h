/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateWorkspaceBundleRequest.h
 *
 * 
 */

#ifndef OAICreateWorkspaceBundleRequest_H
#define OAICreateWorkspaceBundleRequest_H

#include <QJsonObject>

#include "OAIComputeType.h"
#include "OAIRootStorage.h"
#include "OAIUserStorage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComputeType;
class OAIUserStorage;
class OAIRootStorage;

class OAICreateWorkspaceBundleRequest : public OAIObject {
public:
    OAICreateWorkspaceBundleRequest();
    OAICreateWorkspaceBundleRequest(QString json);
    ~OAICreateWorkspaceBundleRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBundleName() const;
    void setBundleName(const QString &bundle_name);
    bool is_bundle_name_Set() const;
    bool is_bundle_name_Valid() const;

    QString getBundleDescription() const;
    void setBundleDescription(const QString &bundle_description);
    bool is_bundle_description_Set() const;
    bool is_bundle_description_Valid() const;

    QString getImageId() const;
    void setImageId(const QString &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    OAIComputeType getComputeType() const;
    void setComputeType(const OAIComputeType &compute_type);
    bool is_compute_type_Set() const;
    bool is_compute_type_Valid() const;

    OAIUserStorage getUserStorage() const;
    void setUserStorage(const OAIUserStorage &user_storage);
    bool is_user_storage_Set() const;
    bool is_user_storage_Valid() const;

    OAIRootStorage getRootStorage() const;
    void setRootStorage(const OAIRootStorage &root_storage);
    bool is_root_storage_Set() const;
    bool is_root_storage_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bundle_name;
    bool m_bundle_name_isSet;
    bool m_bundle_name_isValid;

    QString m_bundle_description;
    bool m_bundle_description_isSet;
    bool m_bundle_description_isValid;

    QString m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    OAIComputeType m_compute_type;
    bool m_compute_type_isSet;
    bool m_compute_type_isValid;

    OAIUserStorage m_user_storage;
    bool m_user_storage_isSet;
    bool m_user_storage_isValid;

    OAIRootStorage m_root_storage;
    bool m_root_storage_isSet;
    bool m_root_storage_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateWorkspaceBundleRequest)

#endif // OAICreateWorkspaceBundleRequest_H
