/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkspaceProperties.h
 *
 * Describes a WorkSpace.
 */

#ifndef OAIWorkspaceProperties_H
#define OAIWorkspaceProperties_H

#include <QJsonObject>

#include "OAICompute.h"
#include "OAIRunningMode.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWorkspaceProperties : public OAIObject {
public:
    OAIWorkspaceProperties();
    OAIWorkspaceProperties(QString json);
    ~OAIWorkspaceProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRunningMode getRunningMode() const;
    void setRunningMode(const OAIRunningMode &running_mode);
    bool is_running_mode_Set() const;
    bool is_running_mode_Valid() const;

    qint32 getRunningModeAutoStopTimeoutInMinutes() const;
    void setRunningModeAutoStopTimeoutInMinutes(const qint32 &running_mode_auto_stop_timeout_in_minutes);
    bool is_running_mode_auto_stop_timeout_in_minutes_Set() const;
    bool is_running_mode_auto_stop_timeout_in_minutes_Valid() const;

    qint32 getRootVolumeSizeGib() const;
    void setRootVolumeSizeGib(const qint32 &root_volume_size_gib);
    bool is_root_volume_size_gib_Set() const;
    bool is_root_volume_size_gib_Valid() const;

    qint32 getUserVolumeSizeGib() const;
    void setUserVolumeSizeGib(const qint32 &user_volume_size_gib);
    bool is_user_volume_size_gib_Set() const;
    bool is_user_volume_size_gib_Valid() const;

    OAICompute getComputeTypeName() const;
    void setComputeTypeName(const OAICompute &compute_type_name);
    bool is_compute_type_name_Set() const;
    bool is_compute_type_name_Valid() const;

    QList getProtocols() const;
    void setProtocols(const QList &protocols);
    bool is_protocols_Set() const;
    bool is_protocols_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRunningMode m_running_mode;
    bool m_running_mode_isSet;
    bool m_running_mode_isValid;

    qint32 m_running_mode_auto_stop_timeout_in_minutes;
    bool m_running_mode_auto_stop_timeout_in_minutes_isSet;
    bool m_running_mode_auto_stop_timeout_in_minutes_isValid;

    qint32 m_root_volume_size_gib;
    bool m_root_volume_size_gib_isSet;
    bool m_root_volume_size_gib_isValid;

    qint32 m_user_volume_size_gib;
    bool m_user_volume_size_gib_isSet;
    bool m_user_volume_size_gib_isValid;

    OAICompute m_compute_type_name;
    bool m_compute_type_name_isSet;
    bool m_compute_type_name_isValid;

    QList m_protocols;
    bool m_protocols_isSet;
    bool m_protocols_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkspaceProperties)

#endif // OAIWorkspaceProperties_H
