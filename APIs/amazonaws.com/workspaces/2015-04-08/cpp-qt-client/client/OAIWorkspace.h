/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkspace.h
 *
 * Describes a WorkSpace.
 */

#ifndef OAIWorkspace_H
#define OAIWorkspace_H

#include <QJsonObject>

#include "OAIModifyWorkspacePropertiesRequest_WorkspaceProperties.h"
#include "OAIWorkspaceState.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModifyWorkspacePropertiesRequest_WorkspaceProperties;

class OAIWorkspace : public OAIObject {
public:
    OAIWorkspace();
    OAIWorkspace(QString json);
    ~OAIWorkspace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWorkspaceId() const;
    void setWorkspaceId(const QString &workspace_id);
    bool is_workspace_id_Set() const;
    bool is_workspace_id_Valid() const;

    QString getDirectoryId() const;
    void setDirectoryId(const QString &directory_id);
    bool is_directory_id_Set() const;
    bool is_directory_id_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    OAIWorkspaceState getState() const;
    void setState(const OAIWorkspaceState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getBundleId() const;
    void setBundleId(const QString &bundle_id);
    bool is_bundle_id_Set() const;
    bool is_bundle_id_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getErrorCode() const;
    void setErrorCode(const QString &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getComputerName() const;
    void setComputerName(const QString &computer_name);
    bool is_computer_name_Set() const;
    bool is_computer_name_Valid() const;

    QString getVolumeEncryptionKey() const;
    void setVolumeEncryptionKey(const QString &volume_encryption_key);
    bool is_volume_encryption_key_Set() const;
    bool is_volume_encryption_key_Valid() const;

    bool getUserVolumeEncryptionEnabled() const;
    void setUserVolumeEncryptionEnabled(const bool &user_volume_encryption_enabled);
    bool is_user_volume_encryption_enabled_Set() const;
    bool is_user_volume_encryption_enabled_Valid() const;

    bool getRootVolumeEncryptionEnabled() const;
    void setRootVolumeEncryptionEnabled(const bool &root_volume_encryption_enabled);
    bool is_root_volume_encryption_enabled_Set() const;
    bool is_root_volume_encryption_enabled_Valid() const;

    OAIModifyWorkspacePropertiesRequest_WorkspaceProperties getWorkspaceProperties() const;
    void setWorkspaceProperties(const OAIModifyWorkspacePropertiesRequest_WorkspaceProperties &workspace_properties);
    bool is_workspace_properties_Set() const;
    bool is_workspace_properties_Valid() const;

    QList getModificationStates() const;
    void setModificationStates(const QList &modification_states);
    bool is_modification_states_Set() const;
    bool is_modification_states_Valid() const;

    QList getRelatedWorkspaces() const;
    void setRelatedWorkspaces(const QList &related_workspaces);
    bool is_related_workspaces_Set() const;
    bool is_related_workspaces_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_workspace_id;
    bool m_workspace_id_isSet;
    bool m_workspace_id_isValid;

    QString m_directory_id;
    bool m_directory_id_isSet;
    bool m_directory_id_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    OAIWorkspaceState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_bundle_id;
    bool m_bundle_id_isSet;
    bool m_bundle_id_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_computer_name;
    bool m_computer_name_isSet;
    bool m_computer_name_isValid;

    QString m_volume_encryption_key;
    bool m_volume_encryption_key_isSet;
    bool m_volume_encryption_key_isValid;

    bool m_user_volume_encryption_enabled;
    bool m_user_volume_encryption_enabled_isSet;
    bool m_user_volume_encryption_enabled_isValid;

    bool m_root_volume_encryption_enabled;
    bool m_root_volume_encryption_enabled_isSet;
    bool m_root_volume_encryption_enabled_isValid;

    OAIModifyWorkspacePropertiesRequest_WorkspaceProperties m_workspace_properties;
    bool m_workspace_properties_isSet;
    bool m_workspace_properties_isValid;

    QList m_modification_states;
    bool m_modification_states_isSet;
    bool m_modification_states_isValid;

    QList m_related_workspaces;
    bool m_related_workspaces_isSet;
    bool m_related_workspaces_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkspace)

#endif // OAIWorkspace_H
