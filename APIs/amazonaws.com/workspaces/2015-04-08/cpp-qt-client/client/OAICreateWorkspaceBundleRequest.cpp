/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkspaceBundleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkspaceBundleRequest::OAICreateWorkspaceBundleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkspaceBundleRequest::OAICreateWorkspaceBundleRequest() {
    this->initializeModel();
}

OAICreateWorkspaceBundleRequest::~OAICreateWorkspaceBundleRequest() {}

void OAICreateWorkspaceBundleRequest::initializeModel() {

    m_bundle_name_isSet = false;
    m_bundle_name_isValid = false;

    m_bundle_description_isSet = false;
    m_bundle_description_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_user_storage_isSet = false;
    m_user_storage_isValid = false;

    m_root_storage_isSet = false;
    m_root_storage_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateWorkspaceBundleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkspaceBundleRequest::fromJsonObject(QJsonObject json) {

    m_bundle_name_isValid = ::OpenAPI::fromJsonValue(m_bundle_name, json[QString("BundleName")]);
    m_bundle_name_isSet = !json[QString("BundleName")].isNull() && m_bundle_name_isValid;

    m_bundle_description_isValid = ::OpenAPI::fromJsonValue(m_bundle_description, json[QString("BundleDescription")]);
    m_bundle_description_isSet = !json[QString("BundleDescription")].isNull() && m_bundle_description_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("ImageId")]);
    m_image_id_isSet = !json[QString("ImageId")].isNull() && m_image_id_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("ComputeType")]);
    m_compute_type_isSet = !json[QString("ComputeType")].isNull() && m_compute_type_isValid;

    m_user_storage_isValid = ::OpenAPI::fromJsonValue(m_user_storage, json[QString("UserStorage")]);
    m_user_storage_isSet = !json[QString("UserStorage")].isNull() && m_user_storage_isValid;

    m_root_storage_isValid = ::OpenAPI::fromJsonValue(m_root_storage, json[QString("RootStorage")]);
    m_root_storage_isSet = !json[QString("RootStorage")].isNull() && m_root_storage_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateWorkspaceBundleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkspaceBundleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_name_isSet) {
        obj.insert(QString("BundleName"), ::OpenAPI::toJsonValue(m_bundle_name));
    }
    if (m_bundle_description_isSet) {
        obj.insert(QString("BundleDescription"), ::OpenAPI::toJsonValue(m_bundle_description));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("ImageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("ComputeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_user_storage.isSet()) {
        obj.insert(QString("UserStorage"), ::OpenAPI::toJsonValue(m_user_storage));
    }
    if (m_root_storage.isSet()) {
        obj.insert(QString("RootStorage"), ::OpenAPI::toJsonValue(m_root_storage));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateWorkspaceBundleRequest::getBundleName() const {
    return m_bundle_name;
}
void OAICreateWorkspaceBundleRequest::setBundleName(const QString &bundle_name) {
    m_bundle_name = bundle_name;
    m_bundle_name_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_bundle_name_Set() const{
    return m_bundle_name_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_bundle_name_Valid() const{
    return m_bundle_name_isValid;
}

QString OAICreateWorkspaceBundleRequest::getBundleDescription() const {
    return m_bundle_description;
}
void OAICreateWorkspaceBundleRequest::setBundleDescription(const QString &bundle_description) {
    m_bundle_description = bundle_description;
    m_bundle_description_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_bundle_description_Set() const{
    return m_bundle_description_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_bundle_description_Valid() const{
    return m_bundle_description_isValid;
}

QString OAICreateWorkspaceBundleRequest::getImageId() const {
    return m_image_id;
}
void OAICreateWorkspaceBundleRequest::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_image_id_Valid() const{
    return m_image_id_isValid;
}

OAIComputeType OAICreateWorkspaceBundleRequest::getComputeType() const {
    return m_compute_type;
}
void OAICreateWorkspaceBundleRequest::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

OAIUserStorage OAICreateWorkspaceBundleRequest::getUserStorage() const {
    return m_user_storage;
}
void OAICreateWorkspaceBundleRequest::setUserStorage(const OAIUserStorage &user_storage) {
    m_user_storage = user_storage;
    m_user_storage_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_user_storage_Set() const{
    return m_user_storage_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_user_storage_Valid() const{
    return m_user_storage_isValid;
}

OAIRootStorage OAICreateWorkspaceBundleRequest::getRootStorage() const {
    return m_root_storage;
}
void OAICreateWorkspaceBundleRequest::setRootStorage(const OAIRootStorage &root_storage) {
    m_root_storage = root_storage;
    m_root_storage_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_root_storage_Set() const{
    return m_root_storage_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_root_storage_Valid() const{
    return m_root_storage_isValid;
}

QList OAICreateWorkspaceBundleRequest::getTags() const {
    return m_tags;
}
void OAICreateWorkspaceBundleRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorkspaceBundleRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorkspaceBundleRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateWorkspaceBundleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkspaceBundleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bundle_name_isValid && m_bundle_description_isValid && m_image_id_isValid && m_compute_type_isValid && m_user_storage_isValid && true;
}

} // namespace OpenAPI
