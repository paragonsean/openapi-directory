/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspace::OAIWorkspace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspace::OAIWorkspace() {
    this->initializeModel();
}

OAIWorkspace::~OAIWorkspace() {}

void OAIWorkspace::initializeModel() {

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_computer_name_isSet = false;
    m_computer_name_isValid = false;

    m_volume_encryption_key_isSet = false;
    m_volume_encryption_key_isValid = false;

    m_user_volume_encryption_enabled_isSet = false;
    m_user_volume_encryption_enabled_isValid = false;

    m_root_volume_encryption_enabled_isSet = false;
    m_root_volume_encryption_enabled_isValid = false;

    m_workspace_properties_isSet = false;
    m_workspace_properties_isValid = false;

    m_modification_states_isSet = false;
    m_modification_states_isValid = false;

    m_related_workspaces_isSet = false;
    m_related_workspaces_isValid = false;
}

void OAIWorkspace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspace::fromJsonObject(QJsonObject json) {

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("WorkspaceId")]);
    m_workspace_id_isSet = !json[QString("WorkspaceId")].isNull() && m_workspace_id_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("BundleId")]);
    m_bundle_id_isSet = !json[QString("BundleId")].isNull() && m_bundle_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_computer_name_isValid = ::OpenAPI::fromJsonValue(m_computer_name, json[QString("ComputerName")]);
    m_computer_name_isSet = !json[QString("ComputerName")].isNull() && m_computer_name_isValid;

    m_volume_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_volume_encryption_key, json[QString("VolumeEncryptionKey")]);
    m_volume_encryption_key_isSet = !json[QString("VolumeEncryptionKey")].isNull() && m_volume_encryption_key_isValid;

    m_user_volume_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_user_volume_encryption_enabled, json[QString("UserVolumeEncryptionEnabled")]);
    m_user_volume_encryption_enabled_isSet = !json[QString("UserVolumeEncryptionEnabled")].isNull() && m_user_volume_encryption_enabled_isValid;

    m_root_volume_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_root_volume_encryption_enabled, json[QString("RootVolumeEncryptionEnabled")]);
    m_root_volume_encryption_enabled_isSet = !json[QString("RootVolumeEncryptionEnabled")].isNull() && m_root_volume_encryption_enabled_isValid;

    m_workspace_properties_isValid = ::OpenAPI::fromJsonValue(m_workspace_properties, json[QString("WorkspaceProperties")]);
    m_workspace_properties_isSet = !json[QString("WorkspaceProperties")].isNull() && m_workspace_properties_isValid;

    m_modification_states_isValid = ::OpenAPI::fromJsonValue(m_modification_states, json[QString("ModificationStates")]);
    m_modification_states_isSet = !json[QString("ModificationStates")].isNull() && m_modification_states_isValid;

    m_related_workspaces_isValid = ::OpenAPI::fromJsonValue(m_related_workspaces, json[QString("RelatedWorkspaces")]);
    m_related_workspaces_isSet = !json[QString("RelatedWorkspaces")].isNull() && m_related_workspaces_isValid;
}

QString OAIWorkspace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspace::asJsonObject() const {
    QJsonObject obj;
    if (m_workspace_id_isSet) {
        obj.insert(QString("WorkspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_bundle_id_isSet) {
        obj.insert(QString("BundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_computer_name_isSet) {
        obj.insert(QString("ComputerName"), ::OpenAPI::toJsonValue(m_computer_name));
    }
    if (m_volume_encryption_key_isSet) {
        obj.insert(QString("VolumeEncryptionKey"), ::OpenAPI::toJsonValue(m_volume_encryption_key));
    }
    if (m_user_volume_encryption_enabled_isSet) {
        obj.insert(QString("UserVolumeEncryptionEnabled"), ::OpenAPI::toJsonValue(m_user_volume_encryption_enabled));
    }
    if (m_root_volume_encryption_enabled_isSet) {
        obj.insert(QString("RootVolumeEncryptionEnabled"), ::OpenAPI::toJsonValue(m_root_volume_encryption_enabled));
    }
    if (m_workspace_properties.isSet()) {
        obj.insert(QString("WorkspaceProperties"), ::OpenAPI::toJsonValue(m_workspace_properties));
    }
    if (m_modification_states.isSet()) {
        obj.insert(QString("ModificationStates"), ::OpenAPI::toJsonValue(m_modification_states));
    }
    if (m_related_workspaces.isSet()) {
        obj.insert(QString("RelatedWorkspaces"), ::OpenAPI::toJsonValue(m_related_workspaces));
    }
    return obj;
}

QString OAIWorkspace::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIWorkspace::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIWorkspace::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIWorkspace::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

QString OAIWorkspace::getDirectoryId() const {
    return m_directory_id;
}
void OAIWorkspace::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAIWorkspace::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAIWorkspace::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

QString OAIWorkspace::getUserName() const {
    return m_user_name;
}
void OAIWorkspace::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIWorkspace::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIWorkspace::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIWorkspace::getIpAddress() const {
    return m_ip_address;
}
void OAIWorkspace::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIWorkspace::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIWorkspace::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIWorkspaceState OAIWorkspace::getState() const {
    return m_state;
}
void OAIWorkspace::setState(const OAIWorkspaceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkspace::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkspace::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkspace::getBundleId() const {
    return m_bundle_id;
}
void OAIWorkspace::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIWorkspace::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIWorkspace::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIWorkspace::getSubnetId() const {
    return m_subnet_id;
}
void OAIWorkspace::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIWorkspace::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIWorkspace::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIWorkspace::getErrorMessage() const {
    return m_error_message;
}
void OAIWorkspace::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIWorkspace::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIWorkspace::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIWorkspace::getErrorCode() const {
    return m_error_code;
}
void OAIWorkspace::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIWorkspace::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIWorkspace::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIWorkspace::getComputerName() const {
    return m_computer_name;
}
void OAIWorkspace::setComputerName(const QString &computer_name) {
    m_computer_name = computer_name;
    m_computer_name_isSet = true;
}

bool OAIWorkspace::is_computer_name_Set() const{
    return m_computer_name_isSet;
}

bool OAIWorkspace::is_computer_name_Valid() const{
    return m_computer_name_isValid;
}

QString OAIWorkspace::getVolumeEncryptionKey() const {
    return m_volume_encryption_key;
}
void OAIWorkspace::setVolumeEncryptionKey(const QString &volume_encryption_key) {
    m_volume_encryption_key = volume_encryption_key;
    m_volume_encryption_key_isSet = true;
}

bool OAIWorkspace::is_volume_encryption_key_Set() const{
    return m_volume_encryption_key_isSet;
}

bool OAIWorkspace::is_volume_encryption_key_Valid() const{
    return m_volume_encryption_key_isValid;
}

bool OAIWorkspace::getUserVolumeEncryptionEnabled() const {
    return m_user_volume_encryption_enabled;
}
void OAIWorkspace::setUserVolumeEncryptionEnabled(const bool &user_volume_encryption_enabled) {
    m_user_volume_encryption_enabled = user_volume_encryption_enabled;
    m_user_volume_encryption_enabled_isSet = true;
}

bool OAIWorkspace::is_user_volume_encryption_enabled_Set() const{
    return m_user_volume_encryption_enabled_isSet;
}

bool OAIWorkspace::is_user_volume_encryption_enabled_Valid() const{
    return m_user_volume_encryption_enabled_isValid;
}

bool OAIWorkspace::getRootVolumeEncryptionEnabled() const {
    return m_root_volume_encryption_enabled;
}
void OAIWorkspace::setRootVolumeEncryptionEnabled(const bool &root_volume_encryption_enabled) {
    m_root_volume_encryption_enabled = root_volume_encryption_enabled;
    m_root_volume_encryption_enabled_isSet = true;
}

bool OAIWorkspace::is_root_volume_encryption_enabled_Set() const{
    return m_root_volume_encryption_enabled_isSet;
}

bool OAIWorkspace::is_root_volume_encryption_enabled_Valid() const{
    return m_root_volume_encryption_enabled_isValid;
}

OAIModifyWorkspacePropertiesRequest_WorkspaceProperties OAIWorkspace::getWorkspaceProperties() const {
    return m_workspace_properties;
}
void OAIWorkspace::setWorkspaceProperties(const OAIModifyWorkspacePropertiesRequest_WorkspaceProperties &workspace_properties) {
    m_workspace_properties = workspace_properties;
    m_workspace_properties_isSet = true;
}

bool OAIWorkspace::is_workspace_properties_Set() const{
    return m_workspace_properties_isSet;
}

bool OAIWorkspace::is_workspace_properties_Valid() const{
    return m_workspace_properties_isValid;
}

QList OAIWorkspace::getModificationStates() const {
    return m_modification_states;
}
void OAIWorkspace::setModificationStates(const QList &modification_states) {
    m_modification_states = modification_states;
    m_modification_states_isSet = true;
}

bool OAIWorkspace::is_modification_states_Set() const{
    return m_modification_states_isSet;
}

bool OAIWorkspace::is_modification_states_Valid() const{
    return m_modification_states_isValid;
}

QList OAIWorkspace::getRelatedWorkspaces() const {
    return m_related_workspaces;
}
void OAIWorkspace::setRelatedWorkspaces(const QList &related_workspaces) {
    m_related_workspaces = related_workspaces;
    m_related_workspaces_isSet = true;
}

bool OAIWorkspace::is_related_workspaces_Set() const{
    return m_related_workspaces_isSet;
}

bool OAIWorkspace::is_related_workspaces_Valid() const{
    return m_related_workspaces_isValid;
}

bool OAIWorkspace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_volume_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_volume_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_workspaces.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
