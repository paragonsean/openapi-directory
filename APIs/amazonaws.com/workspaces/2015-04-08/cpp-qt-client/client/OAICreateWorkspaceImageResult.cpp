/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkspaceImageResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkspaceImageResult::OAICreateWorkspaceImageResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkspaceImageResult::OAICreateWorkspaceImageResult() {
    this->initializeModel();
}

OAICreateWorkspaceImageResult::~OAICreateWorkspaceImageResult() {}

void OAICreateWorkspaceImageResult::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_required_tenancy_isSet = false;
    m_required_tenancy_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_owner_account_id_isSet = false;
    m_owner_account_id_isValid = false;
}

void OAICreateWorkspaceImageResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkspaceImageResult::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("ImageId")]);
    m_image_id_isSet = !json[QString("ImageId")].isNull() && m_image_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("OperatingSystem")]);
    m_operating_system_isSet = !json[QString("OperatingSystem")].isNull() && m_operating_system_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_required_tenancy_isValid = ::OpenAPI::fromJsonValue(m_required_tenancy, json[QString("RequiredTenancy")]);
    m_required_tenancy_isSet = !json[QString("RequiredTenancy")].isNull() && m_required_tenancy_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_owner_account_id_isValid = ::OpenAPI::fromJsonValue(m_owner_account_id, json[QString("OwnerAccountId")]);
    m_owner_account_id_isSet = !json[QString("OwnerAccountId")].isNull() && m_owner_account_id_isValid;
}

QString OAICreateWorkspaceImageResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkspaceImageResult::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id_isSet) {
        obj.insert(QString("ImageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_operating_system.isSet()) {
        obj.insert(QString("OperatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_required_tenancy.isSet()) {
        obj.insert(QString("RequiredTenancy"), ::OpenAPI::toJsonValue(m_required_tenancy));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_owner_account_id_isSet) {
        obj.insert(QString("OwnerAccountId"), ::OpenAPI::toJsonValue(m_owner_account_id));
    }
    return obj;
}

QString OAICreateWorkspaceImageResult::getImageId() const {
    return m_image_id;
}
void OAICreateWorkspaceImageResult::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAICreateWorkspaceImageResult::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAICreateWorkspaceImageResult::getName() const {
    return m_name;
}
void OAICreateWorkspaceImageResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWorkspaceImageResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateWorkspaceImageResult::getDescription() const {
    return m_description;
}
void OAICreateWorkspaceImageResult::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateWorkspaceImageResult::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateWorkspaceImageResult_OperatingSystem OAICreateWorkspaceImageResult::getOperatingSystem() const {
    return m_operating_system;
}
void OAICreateWorkspaceImageResult::setOperatingSystem(const OAICreateWorkspaceImageResult_OperatingSystem &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAICreateWorkspaceImageResult::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

OAIWorkspaceImageState OAICreateWorkspaceImageResult::getState() const {
    return m_state;
}
void OAICreateWorkspaceImageResult::setState(const OAIWorkspaceImageState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateWorkspaceImageResult::is_state_Valid() const{
    return m_state_isValid;
}

OAIWorkspaceImageRequiredTenancy OAICreateWorkspaceImageResult::getRequiredTenancy() const {
    return m_required_tenancy;
}
void OAICreateWorkspaceImageResult::setRequiredTenancy(const OAIWorkspaceImageRequiredTenancy &required_tenancy) {
    m_required_tenancy = required_tenancy;
    m_required_tenancy_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_required_tenancy_Set() const{
    return m_required_tenancy_isSet;
}

bool OAICreateWorkspaceImageResult::is_required_tenancy_Valid() const{
    return m_required_tenancy_isValid;
}

QDateTime OAICreateWorkspaceImageResult::getCreated() const {
    return m_created;
}
void OAICreateWorkspaceImageResult::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_created_Set() const{
    return m_created_isSet;
}

bool OAICreateWorkspaceImageResult::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICreateWorkspaceImageResult::getOwnerAccountId() const {
    return m_owner_account_id;
}
void OAICreateWorkspaceImageResult::setOwnerAccountId(const QString &owner_account_id) {
    m_owner_account_id = owner_account_id;
    m_owner_account_id_isSet = true;
}

bool OAICreateWorkspaceImageResult::is_owner_account_id_Set() const{
    return m_owner_account_id_isSet;
}

bool OAICreateWorkspaceImageResult::is_owner_account_id_Valid() const{
    return m_owner_account_id_isValid;
}

bool OAICreateWorkspaceImageResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_tenancy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkspaceImageResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
