/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportClientBrandingRequest.h
 *
 * 
 */

#ifndef OAIImportClientBrandingRequest_H
#define OAIImportClientBrandingRequest_H

#include <QJsonObject>

#include "OAIImportClientBrandingRequest_DeviceTypeAndroid.h"
#include "OAIImportClientBrandingRequest_DeviceTypeIos.h"
#include "OAIImportClientBrandingRequest_DeviceTypeLinux.h"
#include "OAIImportClientBrandingRequest_DeviceTypeOsx.h"
#include "OAIImportClientBrandingRequest_DeviceTypeWeb.h"
#include "OAIImportClientBrandingRequest_DeviceTypeWindows.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImportClientBrandingRequest_DeviceTypeWindows;
class OAIImportClientBrandingRequest_DeviceTypeOsx;
class OAIImportClientBrandingRequest_DeviceTypeAndroid;
class OAIImportClientBrandingRequest_DeviceTypeIos;
class OAIImportClientBrandingRequest_DeviceTypeLinux;
class OAIImportClientBrandingRequest_DeviceTypeWeb;

class OAIImportClientBrandingRequest : public OAIObject {
public:
    OAIImportClientBrandingRequest();
    OAIImportClientBrandingRequest(QString json);
    ~OAIImportClientBrandingRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIImportClientBrandingRequest_DeviceTypeWindows getDeviceTypeWindows() const;
    void setDeviceTypeWindows(const OAIImportClientBrandingRequest_DeviceTypeWindows &device_type_windows);
    bool is_device_type_windows_Set() const;
    bool is_device_type_windows_Valid() const;

    OAIImportClientBrandingRequest_DeviceTypeOsx getDeviceTypeOsx() const;
    void setDeviceTypeOsx(const OAIImportClientBrandingRequest_DeviceTypeOsx &device_type_osx);
    bool is_device_type_osx_Set() const;
    bool is_device_type_osx_Valid() const;

    OAIImportClientBrandingRequest_DeviceTypeAndroid getDeviceTypeAndroid() const;
    void setDeviceTypeAndroid(const OAIImportClientBrandingRequest_DeviceTypeAndroid &device_type_android);
    bool is_device_type_android_Set() const;
    bool is_device_type_android_Valid() const;

    OAIImportClientBrandingRequest_DeviceTypeIos getDeviceTypeIos() const;
    void setDeviceTypeIos(const OAIImportClientBrandingRequest_DeviceTypeIos &device_type_ios);
    bool is_device_type_ios_Set() const;
    bool is_device_type_ios_Valid() const;

    OAIImportClientBrandingRequest_DeviceTypeLinux getDeviceTypeLinux() const;
    void setDeviceTypeLinux(const OAIImportClientBrandingRequest_DeviceTypeLinux &device_type_linux);
    bool is_device_type_linux_Set() const;
    bool is_device_type_linux_Valid() const;

    OAIImportClientBrandingRequest_DeviceTypeWeb getDeviceTypeWeb() const;
    void setDeviceTypeWeb(const OAIImportClientBrandingRequest_DeviceTypeWeb &device_type_web);
    bool is_device_type_web_Set() const;
    bool is_device_type_web_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIImportClientBrandingRequest_DeviceTypeWindows m_device_type_windows;
    bool m_device_type_windows_isSet;
    bool m_device_type_windows_isValid;

    OAIImportClientBrandingRequest_DeviceTypeOsx m_device_type_osx;
    bool m_device_type_osx_isSet;
    bool m_device_type_osx_isValid;

    OAIImportClientBrandingRequest_DeviceTypeAndroid m_device_type_android;
    bool m_device_type_android_isSet;
    bool m_device_type_android_isValid;

    OAIImportClientBrandingRequest_DeviceTypeIos m_device_type_ios;
    bool m_device_type_ios_isSet;
    bool m_device_type_ios_isValid;

    OAIImportClientBrandingRequest_DeviceTypeLinux m_device_type_linux;
    bool m_device_type_linux_isSet;
    bool m_device_type_linux_isValid;

    OAIImportClientBrandingRequest_DeviceTypeWeb m_device_type_web;
    bool m_device_type_web_isSet;
    bool m_device_type_web_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportClientBrandingRequest)

#endif // OAIImportClientBrandingRequest_H
