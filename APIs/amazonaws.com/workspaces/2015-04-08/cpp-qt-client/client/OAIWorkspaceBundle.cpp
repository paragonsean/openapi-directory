/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceBundle::OAIWorkspaceBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceBundle::OAIWorkspaceBundle() {
    this->initializeModel();
}

OAIWorkspaceBundle::~OAIWorkspaceBundle() {}

void OAIWorkspaceBundle::initializeModel() {

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_root_storage_isSet = false;
    m_root_storage_isValid = false;

    m_user_storage_isSet = false;
    m_user_storage_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_bundle_type_isSet = false;
    m_bundle_type_isValid = false;
}

void OAIWorkspaceBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceBundle::fromJsonObject(QJsonObject json) {

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("BundleId")]);
    m_bundle_id_isSet = !json[QString("BundleId")].isNull() && m_bundle_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("ImageId")]);
    m_image_id_isSet = !json[QString("ImageId")].isNull() && m_image_id_isValid;

    m_root_storage_isValid = ::OpenAPI::fromJsonValue(m_root_storage, json[QString("RootStorage")]);
    m_root_storage_isSet = !json[QString("RootStorage")].isNull() && m_root_storage_isValid;

    m_user_storage_isValid = ::OpenAPI::fromJsonValue(m_user_storage, json[QString("UserStorage")]);
    m_user_storage_isSet = !json[QString("UserStorage")].isNull() && m_user_storage_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("ComputeType")]);
    m_compute_type_isSet = !json[QString("ComputeType")].isNull() && m_compute_type_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_bundle_type_isValid = ::OpenAPI::fromJsonValue(m_bundle_type, json[QString("BundleType")]);
    m_bundle_type_isSet = !json[QString("BundleType")].isNull() && m_bundle_type_isValid;
}

QString OAIWorkspaceBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_id_isSet) {
        obj.insert(QString("BundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("ImageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_root_storage.isSet()) {
        obj.insert(QString("RootStorage"), ::OpenAPI::toJsonValue(m_root_storage));
    }
    if (m_user_storage.isSet()) {
        obj.insert(QString("UserStorage"), ::OpenAPI::toJsonValue(m_user_storage));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("ComputeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_bundle_type.isSet()) {
        obj.insert(QString("BundleType"), ::OpenAPI::toJsonValue(m_bundle_type));
    }
    return obj;
}

QString OAIWorkspaceBundle::getBundleId() const {
    return m_bundle_id;
}
void OAIWorkspaceBundle::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIWorkspaceBundle::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIWorkspaceBundle::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIWorkspaceBundle::getName() const {
    return m_name;
}
void OAIWorkspaceBundle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkspaceBundle::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkspaceBundle::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkspaceBundle::getOwner() const {
    return m_owner;
}
void OAIWorkspaceBundle::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIWorkspaceBundle::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIWorkspaceBundle::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIWorkspaceBundle::getDescription() const {
    return m_description;
}
void OAIWorkspaceBundle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkspaceBundle::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkspaceBundle::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWorkspaceBundle::getImageId() const {
    return m_image_id;
}
void OAIWorkspaceBundle::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIWorkspaceBundle::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIWorkspaceBundle::is_image_id_Valid() const{
    return m_image_id_isValid;
}

OAIWorkspaceBundle_RootStorage OAIWorkspaceBundle::getRootStorage() const {
    return m_root_storage;
}
void OAIWorkspaceBundle::setRootStorage(const OAIWorkspaceBundle_RootStorage &root_storage) {
    m_root_storage = root_storage;
    m_root_storage_isSet = true;
}

bool OAIWorkspaceBundle::is_root_storage_Set() const{
    return m_root_storage_isSet;
}

bool OAIWorkspaceBundle::is_root_storage_Valid() const{
    return m_root_storage_isValid;
}

OAIWorkspaceBundle_UserStorage OAIWorkspaceBundle::getUserStorage() const {
    return m_user_storage;
}
void OAIWorkspaceBundle::setUserStorage(const OAIWorkspaceBundle_UserStorage &user_storage) {
    m_user_storage = user_storage;
    m_user_storage_isSet = true;
}

bool OAIWorkspaceBundle::is_user_storage_Set() const{
    return m_user_storage_isSet;
}

bool OAIWorkspaceBundle::is_user_storage_Valid() const{
    return m_user_storage_isValid;
}

OAIWorkspaceBundle_ComputeType OAIWorkspaceBundle::getComputeType() const {
    return m_compute_type;
}
void OAIWorkspaceBundle::setComputeType(const OAIWorkspaceBundle_ComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIWorkspaceBundle::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIWorkspaceBundle::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QDateTime OAIWorkspaceBundle::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIWorkspaceBundle::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIWorkspaceBundle::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIWorkspaceBundle::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QDateTime OAIWorkspaceBundle::getCreationTime() const {
    return m_creation_time;
}
void OAIWorkspaceBundle::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIWorkspaceBundle::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIWorkspaceBundle::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIWorkspaceBundleState OAIWorkspaceBundle::getState() const {
    return m_state;
}
void OAIWorkspaceBundle::setState(const OAIWorkspaceBundleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkspaceBundle::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkspaceBundle::is_state_Valid() const{
    return m_state_isValid;
}

OAIBundleType OAIWorkspaceBundle::getBundleType() const {
    return m_bundle_type;
}
void OAIWorkspaceBundle::setBundleType(const OAIBundleType &bundle_type) {
    m_bundle_type = bundle_type;
    m_bundle_type_isSet = true;
}

bool OAIWorkspaceBundle::is_bundle_type_Set() const{
    return m_bundle_type_isSet;
}

bool OAIWorkspaceBundle::is_bundle_type_Valid() const{
    return m_bundle_type_isValid;
}

bool OAIWorkspaceBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
