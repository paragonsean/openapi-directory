/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceDirectory::OAIWorkspaceDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceDirectory::OAIWorkspaceDirectory() {
    this->initializeModel();
}

OAIWorkspaceDirectory::~OAIWorkspaceDirectory() {}

void OAIWorkspaceDirectory::initializeModel() {

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_directory_name_isSet = false;
    m_directory_name_isValid = false;

    m_registration_code_isSet = false;
    m_registration_code_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_dns_ip_addresses_isSet = false;
    m_dns_ip_addresses_isValid = false;

    m_customer_user_name_isSet = false;
    m_customer_user_name_isValid = false;

    m_iam_role_id_isSet = false;
    m_iam_role_id_isValid = false;

    m_directory_type_isSet = false;
    m_directory_type_isValid = false;

    m_workspace_security_group_id_isSet = false;
    m_workspace_security_group_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_workspace_creation_properties_isSet = false;
    m_workspace_creation_properties_isValid = false;

    m_ip_group_ids_isSet = false;
    m_ip_group_ids_isValid = false;

    m_workspace_access_properties_isSet = false;
    m_workspace_access_properties_isValid = false;

    m_tenancy_isSet = false;
    m_tenancy_isValid = false;

    m_selfservice_permissions_isSet = false;
    m_selfservice_permissions_isValid = false;

    m_saml_properties_isSet = false;
    m_saml_properties_isValid = false;

    m_certificate_based_auth_properties_isSet = false;
    m_certificate_based_auth_properties_isValid = false;
}

void OAIWorkspaceDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceDirectory::fromJsonObject(QJsonObject json) {

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_directory_name_isValid = ::OpenAPI::fromJsonValue(m_directory_name, json[QString("DirectoryName")]);
    m_directory_name_isSet = !json[QString("DirectoryName")].isNull() && m_directory_name_isValid;

    m_registration_code_isValid = ::OpenAPI::fromJsonValue(m_registration_code, json[QString("RegistrationCode")]);
    m_registration_code_isSet = !json[QString("RegistrationCode")].isNull() && m_registration_code_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_dns_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_dns_ip_addresses, json[QString("DnsIpAddresses")]);
    m_dns_ip_addresses_isSet = !json[QString("DnsIpAddresses")].isNull() && m_dns_ip_addresses_isValid;

    m_customer_user_name_isValid = ::OpenAPI::fromJsonValue(m_customer_user_name, json[QString("CustomerUserName")]);
    m_customer_user_name_isSet = !json[QString("CustomerUserName")].isNull() && m_customer_user_name_isValid;

    m_iam_role_id_isValid = ::OpenAPI::fromJsonValue(m_iam_role_id, json[QString("IamRoleId")]);
    m_iam_role_id_isSet = !json[QString("IamRoleId")].isNull() && m_iam_role_id_isValid;

    m_directory_type_isValid = ::OpenAPI::fromJsonValue(m_directory_type, json[QString("DirectoryType")]);
    m_directory_type_isSet = !json[QString("DirectoryType")].isNull() && m_directory_type_isValid;

    m_workspace_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_security_group_id, json[QString("WorkspaceSecurityGroupId")]);
    m_workspace_security_group_id_isSet = !json[QString("WorkspaceSecurityGroupId")].isNull() && m_workspace_security_group_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_workspace_creation_properties_isValid = ::OpenAPI::fromJsonValue(m_workspace_creation_properties, json[QString("WorkspaceCreationProperties")]);
    m_workspace_creation_properties_isSet = !json[QString("WorkspaceCreationProperties")].isNull() && m_workspace_creation_properties_isValid;

    m_ip_group_ids_isValid = ::OpenAPI::fromJsonValue(m_ip_group_ids, json[QString("ipGroupIds")]);
    m_ip_group_ids_isSet = !json[QString("ipGroupIds")].isNull() && m_ip_group_ids_isValid;

    m_workspace_access_properties_isValid = ::OpenAPI::fromJsonValue(m_workspace_access_properties, json[QString("WorkspaceAccessProperties")]);
    m_workspace_access_properties_isSet = !json[QString("WorkspaceAccessProperties")].isNull() && m_workspace_access_properties_isValid;

    m_tenancy_isValid = ::OpenAPI::fromJsonValue(m_tenancy, json[QString("Tenancy")]);
    m_tenancy_isSet = !json[QString("Tenancy")].isNull() && m_tenancy_isValid;

    m_selfservice_permissions_isValid = ::OpenAPI::fromJsonValue(m_selfservice_permissions, json[QString("SelfservicePermissions")]);
    m_selfservice_permissions_isSet = !json[QString("SelfservicePermissions")].isNull() && m_selfservice_permissions_isValid;

    m_saml_properties_isValid = ::OpenAPI::fromJsonValue(m_saml_properties, json[QString("SamlProperties")]);
    m_saml_properties_isSet = !json[QString("SamlProperties")].isNull() && m_saml_properties_isValid;

    m_certificate_based_auth_properties_isValid = ::OpenAPI::fromJsonValue(m_certificate_based_auth_properties, json[QString("CertificateBasedAuthProperties")]);
    m_certificate_based_auth_properties_isSet = !json[QString("CertificateBasedAuthProperties")].isNull() && m_certificate_based_auth_properties_isValid;
}

QString OAIWorkspaceDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_directory_name_isSet) {
        obj.insert(QString("DirectoryName"), ::OpenAPI::toJsonValue(m_directory_name));
    }
    if (m_registration_code_isSet) {
        obj.insert(QString("RegistrationCode"), ::OpenAPI::toJsonValue(m_registration_code));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_dns_ip_addresses.isSet()) {
        obj.insert(QString("DnsIpAddresses"), ::OpenAPI::toJsonValue(m_dns_ip_addresses));
    }
    if (m_customer_user_name_isSet) {
        obj.insert(QString("CustomerUserName"), ::OpenAPI::toJsonValue(m_customer_user_name));
    }
    if (m_iam_role_id_isSet) {
        obj.insert(QString("IamRoleId"), ::OpenAPI::toJsonValue(m_iam_role_id));
    }
    if (m_directory_type.isSet()) {
        obj.insert(QString("DirectoryType"), ::OpenAPI::toJsonValue(m_directory_type));
    }
    if (m_workspace_security_group_id_isSet) {
        obj.insert(QString("WorkspaceSecurityGroupId"), ::OpenAPI::toJsonValue(m_workspace_security_group_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_workspace_creation_properties.isSet()) {
        obj.insert(QString("WorkspaceCreationProperties"), ::OpenAPI::toJsonValue(m_workspace_creation_properties));
    }
    if (m_ip_group_ids.isSet()) {
        obj.insert(QString("ipGroupIds"), ::OpenAPI::toJsonValue(m_ip_group_ids));
    }
    if (m_workspace_access_properties.isSet()) {
        obj.insert(QString("WorkspaceAccessProperties"), ::OpenAPI::toJsonValue(m_workspace_access_properties));
    }
    if (m_tenancy.isSet()) {
        obj.insert(QString("Tenancy"), ::OpenAPI::toJsonValue(m_tenancy));
    }
    if (m_selfservice_permissions.isSet()) {
        obj.insert(QString("SelfservicePermissions"), ::OpenAPI::toJsonValue(m_selfservice_permissions));
    }
    if (m_saml_properties.isSet()) {
        obj.insert(QString("SamlProperties"), ::OpenAPI::toJsonValue(m_saml_properties));
    }
    if (m_certificate_based_auth_properties.isSet()) {
        obj.insert(QString("CertificateBasedAuthProperties"), ::OpenAPI::toJsonValue(m_certificate_based_auth_properties));
    }
    return obj;
}

QString OAIWorkspaceDirectory::getDirectoryId() const {
    return m_directory_id;
}
void OAIWorkspaceDirectory::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAIWorkspaceDirectory::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAIWorkspaceDirectory::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

QString OAIWorkspaceDirectory::getAlias() const {
    return m_alias;
}
void OAIWorkspaceDirectory::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIWorkspaceDirectory::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIWorkspaceDirectory::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIWorkspaceDirectory::getDirectoryName() const {
    return m_directory_name;
}
void OAIWorkspaceDirectory::setDirectoryName(const QString &directory_name) {
    m_directory_name = directory_name;
    m_directory_name_isSet = true;
}

bool OAIWorkspaceDirectory::is_directory_name_Set() const{
    return m_directory_name_isSet;
}

bool OAIWorkspaceDirectory::is_directory_name_Valid() const{
    return m_directory_name_isValid;
}

QString OAIWorkspaceDirectory::getRegistrationCode() const {
    return m_registration_code;
}
void OAIWorkspaceDirectory::setRegistrationCode(const QString &registration_code) {
    m_registration_code = registration_code;
    m_registration_code_isSet = true;
}

bool OAIWorkspaceDirectory::is_registration_code_Set() const{
    return m_registration_code_isSet;
}

bool OAIWorkspaceDirectory::is_registration_code_Valid() const{
    return m_registration_code_isValid;
}

QList OAIWorkspaceDirectory::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIWorkspaceDirectory::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIWorkspaceDirectory::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIWorkspaceDirectory::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAIWorkspaceDirectory::getDnsIpAddresses() const {
    return m_dns_ip_addresses;
}
void OAIWorkspaceDirectory::setDnsIpAddresses(const QList &dns_ip_addresses) {
    m_dns_ip_addresses = dns_ip_addresses;
    m_dns_ip_addresses_isSet = true;
}

bool OAIWorkspaceDirectory::is_dns_ip_addresses_Set() const{
    return m_dns_ip_addresses_isSet;
}

bool OAIWorkspaceDirectory::is_dns_ip_addresses_Valid() const{
    return m_dns_ip_addresses_isValid;
}

QString OAIWorkspaceDirectory::getCustomerUserName() const {
    return m_customer_user_name;
}
void OAIWorkspaceDirectory::setCustomerUserName(const QString &customer_user_name) {
    m_customer_user_name = customer_user_name;
    m_customer_user_name_isSet = true;
}

bool OAIWorkspaceDirectory::is_customer_user_name_Set() const{
    return m_customer_user_name_isSet;
}

bool OAIWorkspaceDirectory::is_customer_user_name_Valid() const{
    return m_customer_user_name_isValid;
}

QString OAIWorkspaceDirectory::getIamRoleId() const {
    return m_iam_role_id;
}
void OAIWorkspaceDirectory::setIamRoleId(const QString &iam_role_id) {
    m_iam_role_id = iam_role_id;
    m_iam_role_id_isSet = true;
}

bool OAIWorkspaceDirectory::is_iam_role_id_Set() const{
    return m_iam_role_id_isSet;
}

bool OAIWorkspaceDirectory::is_iam_role_id_Valid() const{
    return m_iam_role_id_isValid;
}

OAIWorkspaceDirectoryType OAIWorkspaceDirectory::getDirectoryType() const {
    return m_directory_type;
}
void OAIWorkspaceDirectory::setDirectoryType(const OAIWorkspaceDirectoryType &directory_type) {
    m_directory_type = directory_type;
    m_directory_type_isSet = true;
}

bool OAIWorkspaceDirectory::is_directory_type_Set() const{
    return m_directory_type_isSet;
}

bool OAIWorkspaceDirectory::is_directory_type_Valid() const{
    return m_directory_type_isValid;
}

QString OAIWorkspaceDirectory::getWorkspaceSecurityGroupId() const {
    return m_workspace_security_group_id;
}
void OAIWorkspaceDirectory::setWorkspaceSecurityGroupId(const QString &workspace_security_group_id) {
    m_workspace_security_group_id = workspace_security_group_id;
    m_workspace_security_group_id_isSet = true;
}

bool OAIWorkspaceDirectory::is_workspace_security_group_id_Set() const{
    return m_workspace_security_group_id_isSet;
}

bool OAIWorkspaceDirectory::is_workspace_security_group_id_Valid() const{
    return m_workspace_security_group_id_isValid;
}

OAIWorkspaceDirectoryState OAIWorkspaceDirectory::getState() const {
    return m_state;
}
void OAIWorkspaceDirectory::setState(const OAIWorkspaceDirectoryState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkspaceDirectory::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkspaceDirectory::is_state_Valid() const{
    return m_state_isValid;
}

OAIWorkspaceDirectory_WorkspaceCreationProperties OAIWorkspaceDirectory::getWorkspaceCreationProperties() const {
    return m_workspace_creation_properties;
}
void OAIWorkspaceDirectory::setWorkspaceCreationProperties(const OAIWorkspaceDirectory_WorkspaceCreationProperties &workspace_creation_properties) {
    m_workspace_creation_properties = workspace_creation_properties;
    m_workspace_creation_properties_isSet = true;
}

bool OAIWorkspaceDirectory::is_workspace_creation_properties_Set() const{
    return m_workspace_creation_properties_isSet;
}

bool OAIWorkspaceDirectory::is_workspace_creation_properties_Valid() const{
    return m_workspace_creation_properties_isValid;
}

QList OAIWorkspaceDirectory::getIpGroupIds() const {
    return m_ip_group_ids;
}
void OAIWorkspaceDirectory::setIpGroupIds(const QList &ip_group_ids) {
    m_ip_group_ids = ip_group_ids;
    m_ip_group_ids_isSet = true;
}

bool OAIWorkspaceDirectory::is_ip_group_ids_Set() const{
    return m_ip_group_ids_isSet;
}

bool OAIWorkspaceDirectory::is_ip_group_ids_Valid() const{
    return m_ip_group_ids_isValid;
}

OAIWorkspaceDirectory_WorkspaceAccessProperties OAIWorkspaceDirectory::getWorkspaceAccessProperties() const {
    return m_workspace_access_properties;
}
void OAIWorkspaceDirectory::setWorkspaceAccessProperties(const OAIWorkspaceDirectory_WorkspaceAccessProperties &workspace_access_properties) {
    m_workspace_access_properties = workspace_access_properties;
    m_workspace_access_properties_isSet = true;
}

bool OAIWorkspaceDirectory::is_workspace_access_properties_Set() const{
    return m_workspace_access_properties_isSet;
}

bool OAIWorkspaceDirectory::is_workspace_access_properties_Valid() const{
    return m_workspace_access_properties_isValid;
}

OAITenancy OAIWorkspaceDirectory::getTenancy() const {
    return m_tenancy;
}
void OAIWorkspaceDirectory::setTenancy(const OAITenancy &tenancy) {
    m_tenancy = tenancy;
    m_tenancy_isSet = true;
}

bool OAIWorkspaceDirectory::is_tenancy_Set() const{
    return m_tenancy_isSet;
}

bool OAIWorkspaceDirectory::is_tenancy_Valid() const{
    return m_tenancy_isValid;
}

OAIWorkspaceDirectory_SelfservicePermissions OAIWorkspaceDirectory::getSelfservicePermissions() const {
    return m_selfservice_permissions;
}
void OAIWorkspaceDirectory::setSelfservicePermissions(const OAIWorkspaceDirectory_SelfservicePermissions &selfservice_permissions) {
    m_selfservice_permissions = selfservice_permissions;
    m_selfservice_permissions_isSet = true;
}

bool OAIWorkspaceDirectory::is_selfservice_permissions_Set() const{
    return m_selfservice_permissions_isSet;
}

bool OAIWorkspaceDirectory::is_selfservice_permissions_Valid() const{
    return m_selfservice_permissions_isValid;
}

OAIWorkspaceDirectory_SamlProperties OAIWorkspaceDirectory::getSamlProperties() const {
    return m_saml_properties;
}
void OAIWorkspaceDirectory::setSamlProperties(const OAIWorkspaceDirectory_SamlProperties &saml_properties) {
    m_saml_properties = saml_properties;
    m_saml_properties_isSet = true;
}

bool OAIWorkspaceDirectory::is_saml_properties_Set() const{
    return m_saml_properties_isSet;
}

bool OAIWorkspaceDirectory::is_saml_properties_Valid() const{
    return m_saml_properties_isValid;
}

OAIWorkspaceDirectory_CertificateBasedAuthProperties OAIWorkspaceDirectory::getCertificateBasedAuthProperties() const {
    return m_certificate_based_auth_properties;
}
void OAIWorkspaceDirectory::setCertificateBasedAuthProperties(const OAIWorkspaceDirectory_CertificateBasedAuthProperties &certificate_based_auth_properties) {
    m_certificate_based_auth_properties = certificate_based_auth_properties;
    m_certificate_based_auth_properties_isSet = true;
}

bool OAIWorkspaceDirectory::is_certificate_based_auth_properties_Set() const{
    return m_certificate_based_auth_properties_isSet;
}

bool OAIWorkspaceDirectory::is_certificate_based_auth_properties_Valid() const{
    return m_certificate_based_auth_properties_isValid;
}

bool OAIWorkspaceDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_ip_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_creation_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_access_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selfservice_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_based_auth_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
