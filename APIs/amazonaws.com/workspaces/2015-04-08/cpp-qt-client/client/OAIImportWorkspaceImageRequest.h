/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportWorkspaceImageRequest.h
 *
 * 
 */

#ifndef OAIImportWorkspaceImageRequest_H
#define OAIImportWorkspaceImageRequest_H

#include <QJsonObject>

#include "OAIWorkspaceImageIngestionProcess.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImportWorkspaceImageRequest : public OAIObject {
public:
    OAIImportWorkspaceImageRequest();
    OAIImportWorkspaceImageRequest(QString json);
    ~OAIImportWorkspaceImageRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEc2ImageId() const;
    void setEc2ImageId(const QString &ec2_image_id);
    bool is_ec2_image_id_Set() const;
    bool is_ec2_image_id_Valid() const;

    OAIWorkspaceImageIngestionProcess getIngestionProcess() const;
    void setIngestionProcess(const OAIWorkspaceImageIngestionProcess &ingestion_process);
    bool is_ingestion_process_Set() const;
    bool is_ingestion_process_Valid() const;

    QString getImageName() const;
    void setImageName(const QString &image_name);
    bool is_image_name_Set() const;
    bool is_image_name_Valid() const;

    QString getImageDescription() const;
    void setImageDescription(const QString &image_description);
    bool is_image_description_Set() const;
    bool is_image_description_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getApplications() const;
    void setApplications(const QList &applications);
    bool is_applications_Set() const;
    bool is_applications_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ec2_image_id;
    bool m_ec2_image_id_isSet;
    bool m_ec2_image_id_isValid;

    OAIWorkspaceImageIngestionProcess m_ingestion_process;
    bool m_ingestion_process_isSet;
    bool m_ingestion_process_isValid;

    QString m_image_name;
    bool m_image_name_isSet;
    bool m_image_name_isValid;

    QString m_image_description;
    bool m_image_description_isSet;
    bool m_image_description_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_applications;
    bool m_applications_isSet;
    bool m_applications_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportWorkspaceImageRequest)

#endif // OAIImportWorkspaceImageRequest_H
