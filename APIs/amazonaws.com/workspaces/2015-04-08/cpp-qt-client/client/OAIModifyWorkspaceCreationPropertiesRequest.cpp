/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyWorkspaceCreationPropertiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyWorkspaceCreationPropertiesRequest::OAIModifyWorkspaceCreationPropertiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyWorkspaceCreationPropertiesRequest::OAIModifyWorkspaceCreationPropertiesRequest() {
    this->initializeModel();
}

OAIModifyWorkspaceCreationPropertiesRequest::~OAIModifyWorkspaceCreationPropertiesRequest() {}

void OAIModifyWorkspaceCreationPropertiesRequest::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_workspace_creation_properties_isSet = false;
    m_workspace_creation_properties_isValid = false;
}

void OAIModifyWorkspaceCreationPropertiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyWorkspaceCreationPropertiesRequest::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_workspace_creation_properties_isValid = ::OpenAPI::fromJsonValue(m_workspace_creation_properties, json[QString("WorkspaceCreationProperties")]);
    m_workspace_creation_properties_isSet = !json[QString("WorkspaceCreationProperties")].isNull() && m_workspace_creation_properties_isValid;
}

QString OAIModifyWorkspaceCreationPropertiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyWorkspaceCreationPropertiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_workspace_creation_properties.isSet()) {
        obj.insert(QString("WorkspaceCreationProperties"), ::OpenAPI::toJsonValue(m_workspace_creation_properties));
    }
    return obj;
}

QString OAIModifyWorkspaceCreationPropertiesRequest::getResourceId() const {
    return m_resource_id;
}
void OAIModifyWorkspaceCreationPropertiesRequest::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIModifyWorkspaceCreationPropertiesRequest::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIModifyWorkspaceCreationPropertiesRequest::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIModifyWorkspaceCreationPropertiesRequest_WorkspaceCreationProperties OAIModifyWorkspaceCreationPropertiesRequest::getWorkspaceCreationProperties() const {
    return m_workspace_creation_properties;
}
void OAIModifyWorkspaceCreationPropertiesRequest::setWorkspaceCreationProperties(const OAIModifyWorkspaceCreationPropertiesRequest_WorkspaceCreationProperties &workspace_creation_properties) {
    m_workspace_creation_properties = workspace_creation_properties;
    m_workspace_creation_properties_isSet = true;
}

bool OAIModifyWorkspaceCreationPropertiesRequest::is_workspace_creation_properties_Set() const{
    return m_workspace_creation_properties_isSet;
}

bool OAIModifyWorkspaceCreationPropertiesRequest::is_workspace_creation_properties_Valid() const{
    return m_workspace_creation_properties_isValid;
}

bool OAIModifyWorkspaceCreationPropertiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_creation_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyWorkspaceCreationPropertiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && m_workspace_creation_properties_isValid && true;
}

} // namespace OpenAPI
