/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkspaceBundle.h
 *
 * Describes a WorkSpace bundle.
 */

#ifndef OAIWorkspaceBundle_H
#define OAIWorkspaceBundle_H

#include <QJsonObject>

#include "OAIBundleType.h"
#include "OAIWorkspaceBundleState.h"
#include "OAIWorkspaceBundle_ComputeType.h"
#include "OAIWorkspaceBundle_RootStorage.h"
#include "OAIWorkspaceBundle_UserStorage.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWorkspaceBundle_RootStorage;
class OAIWorkspaceBundle_UserStorage;
class OAIWorkspaceBundle_ComputeType;

class OAIWorkspaceBundle : public OAIObject {
public:
    OAIWorkspaceBundle();
    OAIWorkspaceBundle(QString json);
    ~OAIWorkspaceBundle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBundleId() const;
    void setBundleId(const QString &bundle_id);
    bool is_bundle_id_Set() const;
    bool is_bundle_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getImageId() const;
    void setImageId(const QString &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    OAIWorkspaceBundle_RootStorage getRootStorage() const;
    void setRootStorage(const OAIWorkspaceBundle_RootStorage &root_storage);
    bool is_root_storage_Set() const;
    bool is_root_storage_Valid() const;

    OAIWorkspaceBundle_UserStorage getUserStorage() const;
    void setUserStorage(const OAIWorkspaceBundle_UserStorage &user_storage);
    bool is_user_storage_Set() const;
    bool is_user_storage_Valid() const;

    OAIWorkspaceBundle_ComputeType getComputeType() const;
    void setComputeType(const OAIWorkspaceBundle_ComputeType &compute_type);
    bool is_compute_type_Set() const;
    bool is_compute_type_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIWorkspaceBundleState getState() const;
    void setState(const OAIWorkspaceBundleState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIBundleType getBundleType() const;
    void setBundleType(const OAIBundleType &bundle_type);
    bool is_bundle_type_Set() const;
    bool is_bundle_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bundle_id;
    bool m_bundle_id_isSet;
    bool m_bundle_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    OAIWorkspaceBundle_RootStorage m_root_storage;
    bool m_root_storage_isSet;
    bool m_root_storage_isValid;

    OAIWorkspaceBundle_UserStorage m_user_storage;
    bool m_user_storage_isSet;
    bool m_user_storage_isValid;

    OAIWorkspaceBundle_ComputeType m_compute_type;
    bool m_compute_type_isSet;
    bool m_compute_type_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIWorkspaceBundleState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIBundleType m_bundle_type;
    bool m_bundle_type_isSet;
    bool m_bundle_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkspaceBundle)

#endif // OAIWorkspaceBundle_H
