/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceDirectory_SelfservicePermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceDirectory_SelfservicePermissions::OAIWorkspaceDirectory_SelfservicePermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceDirectory_SelfservicePermissions::OAIWorkspaceDirectory_SelfservicePermissions() {
    this->initializeModel();
}

OAIWorkspaceDirectory_SelfservicePermissions::~OAIWorkspaceDirectory_SelfservicePermissions() {}

void OAIWorkspaceDirectory_SelfservicePermissions::initializeModel() {

    m_restart_workspace_isSet = false;
    m_restart_workspace_isValid = false;

    m_increase_volume_size_isSet = false;
    m_increase_volume_size_isValid = false;

    m_change_compute_type_isSet = false;
    m_change_compute_type_isValid = false;

    m_switch_running_mode_isSet = false;
    m_switch_running_mode_isValid = false;

    m_rebuild_workspace_isSet = false;
    m_rebuild_workspace_isValid = false;
}

void OAIWorkspaceDirectory_SelfservicePermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceDirectory_SelfservicePermissions::fromJsonObject(QJsonObject json) {

    m_restart_workspace_isValid = ::OpenAPI::fromJsonValue(m_restart_workspace, json[QString("RestartWorkspace")]);
    m_restart_workspace_isSet = !json[QString("RestartWorkspace")].isNull() && m_restart_workspace_isValid;

    m_increase_volume_size_isValid = ::OpenAPI::fromJsonValue(m_increase_volume_size, json[QString("IncreaseVolumeSize")]);
    m_increase_volume_size_isSet = !json[QString("IncreaseVolumeSize")].isNull() && m_increase_volume_size_isValid;

    m_change_compute_type_isValid = ::OpenAPI::fromJsonValue(m_change_compute_type, json[QString("ChangeComputeType")]);
    m_change_compute_type_isSet = !json[QString("ChangeComputeType")].isNull() && m_change_compute_type_isValid;

    m_switch_running_mode_isValid = ::OpenAPI::fromJsonValue(m_switch_running_mode, json[QString("SwitchRunningMode")]);
    m_switch_running_mode_isSet = !json[QString("SwitchRunningMode")].isNull() && m_switch_running_mode_isValid;

    m_rebuild_workspace_isValid = ::OpenAPI::fromJsonValue(m_rebuild_workspace, json[QString("RebuildWorkspace")]);
    m_rebuild_workspace_isSet = !json[QString("RebuildWorkspace")].isNull() && m_rebuild_workspace_isValid;
}

QString OAIWorkspaceDirectory_SelfservicePermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceDirectory_SelfservicePermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_restart_workspace.isSet()) {
        obj.insert(QString("RestartWorkspace"), ::OpenAPI::toJsonValue(m_restart_workspace));
    }
    if (m_increase_volume_size.isSet()) {
        obj.insert(QString("IncreaseVolumeSize"), ::OpenAPI::toJsonValue(m_increase_volume_size));
    }
    if (m_change_compute_type.isSet()) {
        obj.insert(QString("ChangeComputeType"), ::OpenAPI::toJsonValue(m_change_compute_type));
    }
    if (m_switch_running_mode.isSet()) {
        obj.insert(QString("SwitchRunningMode"), ::OpenAPI::toJsonValue(m_switch_running_mode));
    }
    if (m_rebuild_workspace.isSet()) {
        obj.insert(QString("RebuildWorkspace"), ::OpenAPI::toJsonValue(m_rebuild_workspace));
    }
    return obj;
}

OAIReconnectEnum OAIWorkspaceDirectory_SelfservicePermissions::getRestartWorkspace() const {
    return m_restart_workspace;
}
void OAIWorkspaceDirectory_SelfservicePermissions::setRestartWorkspace(const OAIReconnectEnum &restart_workspace) {
    m_restart_workspace = restart_workspace;
    m_restart_workspace_isSet = true;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_restart_workspace_Set() const{
    return m_restart_workspace_isSet;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_restart_workspace_Valid() const{
    return m_restart_workspace_isValid;
}

OAIReconnectEnum OAIWorkspaceDirectory_SelfservicePermissions::getIncreaseVolumeSize() const {
    return m_increase_volume_size;
}
void OAIWorkspaceDirectory_SelfservicePermissions::setIncreaseVolumeSize(const OAIReconnectEnum &increase_volume_size) {
    m_increase_volume_size = increase_volume_size;
    m_increase_volume_size_isSet = true;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_increase_volume_size_Set() const{
    return m_increase_volume_size_isSet;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_increase_volume_size_Valid() const{
    return m_increase_volume_size_isValid;
}

OAIReconnectEnum OAIWorkspaceDirectory_SelfservicePermissions::getChangeComputeType() const {
    return m_change_compute_type;
}
void OAIWorkspaceDirectory_SelfservicePermissions::setChangeComputeType(const OAIReconnectEnum &change_compute_type) {
    m_change_compute_type = change_compute_type;
    m_change_compute_type_isSet = true;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_change_compute_type_Set() const{
    return m_change_compute_type_isSet;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_change_compute_type_Valid() const{
    return m_change_compute_type_isValid;
}

OAIReconnectEnum OAIWorkspaceDirectory_SelfservicePermissions::getSwitchRunningMode() const {
    return m_switch_running_mode;
}
void OAIWorkspaceDirectory_SelfservicePermissions::setSwitchRunningMode(const OAIReconnectEnum &switch_running_mode) {
    m_switch_running_mode = switch_running_mode;
    m_switch_running_mode_isSet = true;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_switch_running_mode_Set() const{
    return m_switch_running_mode_isSet;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_switch_running_mode_Valid() const{
    return m_switch_running_mode_isValid;
}

OAIReconnectEnum OAIWorkspaceDirectory_SelfservicePermissions::getRebuildWorkspace() const {
    return m_rebuild_workspace;
}
void OAIWorkspaceDirectory_SelfservicePermissions::setRebuildWorkspace(const OAIReconnectEnum &rebuild_workspace) {
    m_rebuild_workspace = rebuild_workspace;
    m_rebuild_workspace_isSet = true;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_rebuild_workspace_Set() const{
    return m_rebuild_workspace_isSet;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::is_rebuild_workspace_Valid() const{
    return m_rebuild_workspace_isValid;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_restart_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_increase_volume_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_running_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebuild_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceDirectory_SelfservicePermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
