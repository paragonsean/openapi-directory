/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeClientBrandingResult_DeviceTypeWeb.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeClientBrandingResult_DeviceTypeWeb::OAIDescribeClientBrandingResult_DeviceTypeWeb(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeClientBrandingResult_DeviceTypeWeb::OAIDescribeClientBrandingResult_DeviceTypeWeb() {
    this->initializeModel();
}

OAIDescribeClientBrandingResult_DeviceTypeWeb::~OAIDescribeClientBrandingResult_DeviceTypeWeb() {}

void OAIDescribeClientBrandingResult_DeviceTypeWeb::initializeModel() {

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_support_email_isSet = false;
    m_support_email_isValid = false;

    m_support_link_isSet = false;
    m_support_link_isValid = false;

    m_forgot_password_link_isSet = false;
    m_forgot_password_link_isValid = false;

    m_login_message_isSet = false;
    m_login_message_isValid = false;
}

void OAIDescribeClientBrandingResult_DeviceTypeWeb::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeClientBrandingResult_DeviceTypeWeb::fromJsonObject(QJsonObject json) {

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("LogoUrl")]);
    m_logo_url_isSet = !json[QString("LogoUrl")].isNull() && m_logo_url_isValid;

    m_support_email_isValid = ::OpenAPI::fromJsonValue(m_support_email, json[QString("SupportEmail")]);
    m_support_email_isSet = !json[QString("SupportEmail")].isNull() && m_support_email_isValid;

    m_support_link_isValid = ::OpenAPI::fromJsonValue(m_support_link, json[QString("SupportLink")]);
    m_support_link_isSet = !json[QString("SupportLink")].isNull() && m_support_link_isValid;

    m_forgot_password_link_isValid = ::OpenAPI::fromJsonValue(m_forgot_password_link, json[QString("ForgotPasswordLink")]);
    m_forgot_password_link_isSet = !json[QString("ForgotPasswordLink")].isNull() && m_forgot_password_link_isValid;

    m_login_message_isValid = ::OpenAPI::fromJsonValue(m_login_message, json[QString("LoginMessage")]);
    m_login_message_isSet = !json[QString("LoginMessage")].isNull() && m_login_message_isValid;
}

QString OAIDescribeClientBrandingResult_DeviceTypeWeb::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeClientBrandingResult_DeviceTypeWeb::asJsonObject() const {
    QJsonObject obj;
    if (m_logo_url_isSet) {
        obj.insert(QString("LogoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_support_email_isSet) {
        obj.insert(QString("SupportEmail"), ::OpenAPI::toJsonValue(m_support_email));
    }
    if (m_support_link_isSet) {
        obj.insert(QString("SupportLink"), ::OpenAPI::toJsonValue(m_support_link));
    }
    if (m_forgot_password_link_isSet) {
        obj.insert(QString("ForgotPasswordLink"), ::OpenAPI::toJsonValue(m_forgot_password_link));
    }
    if (m_login_message.isSet()) {
        obj.insert(QString("LoginMessage"), ::OpenAPI::toJsonValue(m_login_message));
    }
    return obj;
}

QString OAIDescribeClientBrandingResult_DeviceTypeWeb::getLogoUrl() const {
    return m_logo_url;
}
void OAIDescribeClientBrandingResult_DeviceTypeWeb::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIDescribeClientBrandingResult_DeviceTypeWeb::getSupportEmail() const {
    return m_support_email;
}
void OAIDescribeClientBrandingResult_DeviceTypeWeb::setSupportEmail(const QString &support_email) {
    m_support_email = support_email;
    m_support_email_isSet = true;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_support_email_Set() const{
    return m_support_email_isSet;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_support_email_Valid() const{
    return m_support_email_isValid;
}

QString OAIDescribeClientBrandingResult_DeviceTypeWeb::getSupportLink() const {
    return m_support_link;
}
void OAIDescribeClientBrandingResult_DeviceTypeWeb::setSupportLink(const QString &support_link) {
    m_support_link = support_link;
    m_support_link_isSet = true;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_support_link_Set() const{
    return m_support_link_isSet;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_support_link_Valid() const{
    return m_support_link_isValid;
}

QString OAIDescribeClientBrandingResult_DeviceTypeWeb::getForgotPasswordLink() const {
    return m_forgot_password_link;
}
void OAIDescribeClientBrandingResult_DeviceTypeWeb::setForgotPasswordLink(const QString &forgot_password_link) {
    m_forgot_password_link = forgot_password_link;
    m_forgot_password_link_isSet = true;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_forgot_password_link_Set() const{
    return m_forgot_password_link_isSet;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_forgot_password_link_Valid() const{
    return m_forgot_password_link_isValid;
}

QMap OAIDescribeClientBrandingResult_DeviceTypeWeb::getLoginMessage() const {
    return m_login_message;
}
void OAIDescribeClientBrandingResult_DeviceTypeWeb::setLoginMessage(const QMap &login_message) {
    m_login_message = login_message;
    m_login_message_isSet = true;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_login_message_Set() const{
    return m_login_message_isSet;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::is_login_message_Valid() const{
    return m_login_message_isValid;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forgot_password_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeClientBrandingResult_DeviceTypeWeb::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
