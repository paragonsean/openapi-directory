/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkspaceDirectory_WorkspaceAccessProperties.h
 *
 * 
 */

#ifndef OAIWorkspaceDirectory_WorkspaceAccessProperties_H
#define OAIWorkspaceDirectory_WorkspaceAccessProperties_H

#include <QJsonObject>

#include "OAIAccessPropertyValue.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWorkspaceDirectory_WorkspaceAccessProperties : public OAIObject {
public:
    OAIWorkspaceDirectory_WorkspaceAccessProperties();
    OAIWorkspaceDirectory_WorkspaceAccessProperties(QString json);
    ~OAIWorkspaceDirectory_WorkspaceAccessProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccessPropertyValue getDeviceTypeWindows() const;
    void setDeviceTypeWindows(const OAIAccessPropertyValue &device_type_windows);
    bool is_device_type_windows_Set() const;
    bool is_device_type_windows_Valid() const;

    OAIAccessPropertyValue getDeviceTypeOsx() const;
    void setDeviceTypeOsx(const OAIAccessPropertyValue &device_type_osx);
    bool is_device_type_osx_Set() const;
    bool is_device_type_osx_Valid() const;

    OAIAccessPropertyValue getDeviceTypeWeb() const;
    void setDeviceTypeWeb(const OAIAccessPropertyValue &device_type_web);
    bool is_device_type_web_Set() const;
    bool is_device_type_web_Valid() const;

    OAIAccessPropertyValue getDeviceTypeIos() const;
    void setDeviceTypeIos(const OAIAccessPropertyValue &device_type_ios);
    bool is_device_type_ios_Set() const;
    bool is_device_type_ios_Valid() const;

    OAIAccessPropertyValue getDeviceTypeAndroid() const;
    void setDeviceTypeAndroid(const OAIAccessPropertyValue &device_type_android);
    bool is_device_type_android_Set() const;
    bool is_device_type_android_Valid() const;

    OAIAccessPropertyValue getDeviceTypeChromeOs() const;
    void setDeviceTypeChromeOs(const OAIAccessPropertyValue &device_type_chrome_os);
    bool is_device_type_chrome_os_Set() const;
    bool is_device_type_chrome_os_Valid() const;

    OAIAccessPropertyValue getDeviceTypeZeroClient() const;
    void setDeviceTypeZeroClient(const OAIAccessPropertyValue &device_type_zero_client);
    bool is_device_type_zero_client_Set() const;
    bool is_device_type_zero_client_Valid() const;

    OAIAccessPropertyValue getDeviceTypeLinux() const;
    void setDeviceTypeLinux(const OAIAccessPropertyValue &device_type_linux);
    bool is_device_type_linux_Set() const;
    bool is_device_type_linux_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccessPropertyValue m_device_type_windows;
    bool m_device_type_windows_isSet;
    bool m_device_type_windows_isValid;

    OAIAccessPropertyValue m_device_type_osx;
    bool m_device_type_osx_isSet;
    bool m_device_type_osx_isValid;

    OAIAccessPropertyValue m_device_type_web;
    bool m_device_type_web_isSet;
    bool m_device_type_web_isValid;

    OAIAccessPropertyValue m_device_type_ios;
    bool m_device_type_ios_isSet;
    bool m_device_type_ios_isValid;

    OAIAccessPropertyValue m_device_type_android;
    bool m_device_type_android_isSet;
    bool m_device_type_android_isValid;

    OAIAccessPropertyValue m_device_type_chrome_os;
    bool m_device_type_chrome_os_isSet;
    bool m_device_type_chrome_os_isValid;

    OAIAccessPropertyValue m_device_type_zero_client;
    bool m_device_type_zero_client_isSet;
    bool m_device_type_zero_client_isValid;

    OAIAccessPropertyValue m_device_type_linux;
    bool m_device_type_linux_isSet;
    bool m_device_type_linux_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkspaceDirectory_WorkspaceAccessProperties)

#endif // OAIWorkspaceDirectory_WorkspaceAccessProperties_H
