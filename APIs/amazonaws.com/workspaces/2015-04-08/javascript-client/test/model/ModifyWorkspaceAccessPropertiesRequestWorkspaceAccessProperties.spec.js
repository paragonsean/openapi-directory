/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonWorkSpaces);
  }
}(this, function(expect, AmazonWorkSpaces) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties', function() {
    it('should create an instance of ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties', function() {
      // uncomment below and update the code to test ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be.a(AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties);
    });

    it('should have the property deviceTypeWindows (base name: "DeviceTypeWindows")', function() {
      // uncomment below and update the code to test the property deviceTypeWindows
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeOsx (base name: "DeviceTypeOsx")', function() {
      // uncomment below and update the code to test the property deviceTypeOsx
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeWeb (base name: "DeviceTypeWeb")', function() {
      // uncomment below and update the code to test the property deviceTypeWeb
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeIos (base name: "DeviceTypeIos")', function() {
      // uncomment below and update the code to test the property deviceTypeIos
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeAndroid (base name: "DeviceTypeAndroid")', function() {
      // uncomment below and update the code to test the property deviceTypeAndroid
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeChromeOs (base name: "DeviceTypeChromeOs")', function() {
      // uncomment below and update the code to test the property deviceTypeChromeOs
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeZeroClient (base name: "DeviceTypeZeroClient")', function() {
      // uncomment below and update the code to test the property deviceTypeZeroClient
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeLinux (base name: "DeviceTypeLinux")', function() {
      // uncomment below and update the code to test the property deviceTypeLinux
      //var instance = new AmazonWorkSpaces.ModifyWorkspaceAccessPropertiesRequestWorkspaceAccessProperties();
      //expect(instance).to.be();
    });

  });

}));
