/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonWorkSpaces);
  }
}(this, function(expect, AmazonWorkSpaces) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonWorkSpaces.WorkspaceDirectory();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkspaceDirectory', function() {
    it('should create an instance of WorkspaceDirectory', function() {
      // uncomment below and update the code to test WorkspaceDirectory
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be.a(AmazonWorkSpaces.WorkspaceDirectory);
    });

    it('should have the property directoryId (base name: "DirectoryId")', function() {
      // uncomment below and update the code to test the property directoryId
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property alias (base name: "Alias")', function() {
      // uncomment below and update the code to test the property alias
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property directoryName (base name: "DirectoryName")', function() {
      // uncomment below and update the code to test the property directoryName
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property registrationCode (base name: "RegistrationCode")', function() {
      // uncomment below and update the code to test the property registrationCode
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property subnetIds (base name: "SubnetIds")', function() {
      // uncomment below and update the code to test the property subnetIds
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property dnsIpAddresses (base name: "DnsIpAddresses")', function() {
      // uncomment below and update the code to test the property dnsIpAddresses
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property customerUserName (base name: "CustomerUserName")', function() {
      // uncomment below and update the code to test the property customerUserName
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property iamRoleId (base name: "IamRoleId")', function() {
      // uncomment below and update the code to test the property iamRoleId
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property directoryType (base name: "DirectoryType")', function() {
      // uncomment below and update the code to test the property directoryType
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property workspaceSecurityGroupId (base name: "WorkspaceSecurityGroupId")', function() {
      // uncomment below and update the code to test the property workspaceSecurityGroupId
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property workspaceCreationProperties (base name: "WorkspaceCreationProperties")', function() {
      // uncomment below and update the code to test the property workspaceCreationProperties
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property ipGroupIds (base name: "ipGroupIds")', function() {
      // uncomment below and update the code to test the property ipGroupIds
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property workspaceAccessProperties (base name: "WorkspaceAccessProperties")', function() {
      // uncomment below and update the code to test the property workspaceAccessProperties
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property tenancy (base name: "Tenancy")', function() {
      // uncomment below and update the code to test the property tenancy
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property selfservicePermissions (base name: "SelfservicePermissions")', function() {
      // uncomment below and update the code to test the property selfservicePermissions
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property samlProperties (base name: "SamlProperties")', function() {
      // uncomment below and update the code to test the property samlProperties
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

    it('should have the property certificateBasedAuthProperties (base name: "CertificateBasedAuthProperties")', function() {
      // uncomment below and update the code to test the property certificateBasedAuthProperties
      //var instance = new AmazonWorkSpaces.WorkspaceDirectory();
      //expect(instance).to.be();
    });

  });

}));
