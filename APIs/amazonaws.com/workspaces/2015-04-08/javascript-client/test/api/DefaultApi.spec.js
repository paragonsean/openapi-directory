/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonWorkSpaces);
  }
}(this, function(expect, AmazonWorkSpaces) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonWorkSpaces.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateConnectionAlias', function() {
      it('should call associateConnectionAlias successfully', function(done) {
        //uncomment below and update the code to test associateConnectionAlias
        //instance.associateConnectionAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateIpGroups', function() {
      it('should call associateIpGroups successfully', function(done) {
        //uncomment below and update the code to test associateIpGroups
        //instance.associateIpGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizeIpRules', function() {
      it('should call authorizeIpRules successfully', function(done) {
        //uncomment below and update the code to test authorizeIpRules
        //instance.authorizeIpRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyWorkspaceImage', function() {
      it('should call copyWorkspaceImage successfully', function(done) {
        //uncomment below and update the code to test copyWorkspaceImage
        //instance.copyWorkspaceImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConnectClientAddIn', function() {
      it('should call createConnectClientAddIn successfully', function(done) {
        //uncomment below and update the code to test createConnectClientAddIn
        //instance.createConnectClientAddIn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConnectionAlias', function() {
      it('should call createConnectionAlias successfully', function(done) {
        //uncomment below and update the code to test createConnectionAlias
        //instance.createConnectionAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIpGroup', function() {
      it('should call createIpGroup successfully', function(done) {
        //uncomment below and update the code to test createIpGroup
        //instance.createIpGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStandbyWorkspaces', function() {
      it('should call createStandbyWorkspaces successfully', function(done) {
        //uncomment below and update the code to test createStandbyWorkspaces
        //instance.createStandbyWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTags', function() {
      it('should call createTags successfully', function(done) {
        //uncomment below and update the code to test createTags
        //instance.createTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUpdatedWorkspaceImage', function() {
      it('should call createUpdatedWorkspaceImage successfully', function(done) {
        //uncomment below and update the code to test createUpdatedWorkspaceImage
        //instance.createUpdatedWorkspaceImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkspaceBundle', function() {
      it('should call createWorkspaceBundle successfully', function(done) {
        //uncomment below and update the code to test createWorkspaceBundle
        //instance.createWorkspaceBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkspaceImage', function() {
      it('should call createWorkspaceImage successfully', function(done) {
        //uncomment below and update the code to test createWorkspaceImage
        //instance.createWorkspaceImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkspaces', function() {
      it('should call createWorkspaces successfully', function(done) {
        //uncomment below and update the code to test createWorkspaces
        //instance.createWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClientBranding', function() {
      it('should call deleteClientBranding successfully', function(done) {
        //uncomment below and update the code to test deleteClientBranding
        //instance.deleteClientBranding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnectClientAddIn', function() {
      it('should call deleteConnectClientAddIn successfully', function(done) {
        //uncomment below and update the code to test deleteConnectClientAddIn
        //instance.deleteConnectClientAddIn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnectionAlias', function() {
      it('should call deleteConnectionAlias successfully', function(done) {
        //uncomment below and update the code to test deleteConnectionAlias
        //instance.deleteConnectionAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIpGroup', function() {
      it('should call deleteIpGroup successfully', function(done) {
        //uncomment below and update the code to test deleteIpGroup
        //instance.deleteIpGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTags', function() {
      it('should call deleteTags successfully', function(done) {
        //uncomment below and update the code to test deleteTags
        //instance.deleteTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkspaceBundle', function() {
      it('should call deleteWorkspaceBundle successfully', function(done) {
        //uncomment below and update the code to test deleteWorkspaceBundle
        //instance.deleteWorkspaceBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkspaceImage', function() {
      it('should call deleteWorkspaceImage successfully', function(done) {
        //uncomment below and update the code to test deleteWorkspaceImage
        //instance.deleteWorkspaceImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterWorkspaceDirectory', function() {
      it('should call deregisterWorkspaceDirectory successfully', function(done) {
        //uncomment below and update the code to test deregisterWorkspaceDirectory
        //instance.deregisterWorkspaceDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccount', function() {
      it('should call describeAccount successfully', function(done) {
        //uncomment below and update the code to test describeAccount
        //instance.describeAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountModifications', function() {
      it('should call describeAccountModifications successfully', function(done) {
        //uncomment below and update the code to test describeAccountModifications
        //instance.describeAccountModifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClientBranding', function() {
      it('should call describeClientBranding successfully', function(done) {
        //uncomment below and update the code to test describeClientBranding
        //instance.describeClientBranding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeClientProperties', function() {
      it('should call describeClientProperties successfully', function(done) {
        //uncomment below and update the code to test describeClientProperties
        //instance.describeClientProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnectClientAddIns', function() {
      it('should call describeConnectClientAddIns successfully', function(done) {
        //uncomment below and update the code to test describeConnectClientAddIns
        //instance.describeConnectClientAddIns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnectionAliasPermissions', function() {
      it('should call describeConnectionAliasPermissions successfully', function(done) {
        //uncomment below and update the code to test describeConnectionAliasPermissions
        //instance.describeConnectionAliasPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnectionAliases', function() {
      it('should call describeConnectionAliases successfully', function(done) {
        //uncomment below and update the code to test describeConnectionAliases
        //instance.describeConnectionAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeIpGroups', function() {
      it('should call describeIpGroups successfully', function(done) {
        //uncomment below and update the code to test describeIpGroups
        //instance.describeIpGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTags', function() {
      it('should call describeTags successfully', function(done) {
        //uncomment below and update the code to test describeTags
        //instance.describeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceBundles', function() {
      it('should call describeWorkspaceBundles successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceBundles
        //instance.describeWorkspaceBundles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceDirectories', function() {
      it('should call describeWorkspaceDirectories successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceDirectories
        //instance.describeWorkspaceDirectories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceImagePermissions', function() {
      it('should call describeWorkspaceImagePermissions successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceImagePermissions
        //instance.describeWorkspaceImagePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceImages', function() {
      it('should call describeWorkspaceImages successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceImages
        //instance.describeWorkspaceImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceSnapshots', function() {
      it('should call describeWorkspaceSnapshots successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceSnapshots
        //instance.describeWorkspaceSnapshots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaces', function() {
      it('should call describeWorkspaces successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaces
        //instance.describeWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspacesConnectionStatus', function() {
      it('should call describeWorkspacesConnectionStatus successfully', function(done) {
        //uncomment below and update the code to test describeWorkspacesConnectionStatus
        //instance.describeWorkspacesConnectionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateConnectionAlias', function() {
      it('should call disassociateConnectionAlias successfully', function(done) {
        //uncomment below and update the code to test disassociateConnectionAlias
        //instance.disassociateConnectionAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateIpGroups', function() {
      it('should call disassociateIpGroups successfully', function(done) {
        //uncomment below and update the code to test disassociateIpGroups
        //instance.disassociateIpGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importClientBranding', function() {
      it('should call importClientBranding successfully', function(done) {
        //uncomment below and update the code to test importClientBranding
        //instance.importClientBranding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importWorkspaceImage', function() {
      it('should call importWorkspaceImage successfully', function(done) {
        //uncomment below and update the code to test importWorkspaceImage
        //instance.importWorkspaceImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAvailableManagementCidrRanges', function() {
      it('should call listAvailableManagementCidrRanges successfully', function(done) {
        //uncomment below and update the code to test listAvailableManagementCidrRanges
        //instance.listAvailableManagementCidrRanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('migrateWorkspace', function() {
      it('should call migrateWorkspace successfully', function(done) {
        //uncomment below and update the code to test migrateWorkspace
        //instance.migrateWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyAccount', function() {
      it('should call modifyAccount successfully', function(done) {
        //uncomment below and update the code to test modifyAccount
        //instance.modifyAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyCertificateBasedAuthProperties', function() {
      it('should call modifyCertificateBasedAuthProperties successfully', function(done) {
        //uncomment below and update the code to test modifyCertificateBasedAuthProperties
        //instance.modifyCertificateBasedAuthProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyClientProperties', function() {
      it('should call modifyClientProperties successfully', function(done) {
        //uncomment below and update the code to test modifyClientProperties
        //instance.modifyClientProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifySamlProperties', function() {
      it('should call modifySamlProperties successfully', function(done) {
        //uncomment below and update the code to test modifySamlProperties
        //instance.modifySamlProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifySelfservicePermissions', function() {
      it('should call modifySelfservicePermissions successfully', function(done) {
        //uncomment below and update the code to test modifySelfservicePermissions
        //instance.modifySelfservicePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyWorkspaceAccessProperties', function() {
      it('should call modifyWorkspaceAccessProperties successfully', function(done) {
        //uncomment below and update the code to test modifyWorkspaceAccessProperties
        //instance.modifyWorkspaceAccessProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyWorkspaceCreationProperties', function() {
      it('should call modifyWorkspaceCreationProperties successfully', function(done) {
        //uncomment below and update the code to test modifyWorkspaceCreationProperties
        //instance.modifyWorkspaceCreationProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyWorkspaceProperties', function() {
      it('should call modifyWorkspaceProperties successfully', function(done) {
        //uncomment below and update the code to test modifyWorkspaceProperties
        //instance.modifyWorkspaceProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyWorkspaceState', function() {
      it('should call modifyWorkspaceState successfully', function(done) {
        //uncomment below and update the code to test modifyWorkspaceState
        //instance.modifyWorkspaceState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebootWorkspaces', function() {
      it('should call rebootWorkspaces successfully', function(done) {
        //uncomment below and update the code to test rebootWorkspaces
        //instance.rebootWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebuildWorkspaces', function() {
      it('should call rebuildWorkspaces successfully', function(done) {
        //uncomment below and update the code to test rebuildWorkspaces
        //instance.rebuildWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerWorkspaceDirectory', function() {
      it('should call registerWorkspaceDirectory successfully', function(done) {
        //uncomment below and update the code to test registerWorkspaceDirectory
        //instance.registerWorkspaceDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreWorkspace', function() {
      it('should call restoreWorkspace successfully', function(done) {
        //uncomment below and update the code to test restoreWorkspace
        //instance.restoreWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeIpRules', function() {
      it('should call revokeIpRules successfully', function(done) {
        //uncomment below and update the code to test revokeIpRules
        //instance.revokeIpRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startWorkspaces', function() {
      it('should call startWorkspaces successfully', function(done) {
        //uncomment below and update the code to test startWorkspaces
        //instance.startWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopWorkspaces', function() {
      it('should call stopWorkspaces successfully', function(done) {
        //uncomment below and update the code to test stopWorkspaces
        //instance.stopWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('terminateWorkspaces', function() {
      it('should call terminateWorkspaces successfully', function(done) {
        //uncomment below and update the code to test terminateWorkspaces
        //instance.terminateWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectClientAddIn', function() {
      it('should call updateConnectClientAddIn successfully', function(done) {
        //uncomment below and update the code to test updateConnectClientAddIn
        //instance.updateConnectClientAddIn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectionAliasPermission', function() {
      it('should call updateConnectionAliasPermission successfully', function(done) {
        //uncomment below and update the code to test updateConnectionAliasPermission
        //instance.updateConnectionAliasPermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRulesOfIpGroup', function() {
      it('should call updateRulesOfIpGroup successfully', function(done) {
        //uncomment below and update the code to test updateRulesOfIpGroup
        //instance.updateRulesOfIpGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkspaceBundle', function() {
      it('should call updateWorkspaceBundle successfully', function(done) {
        //uncomment below and update the code to test updateWorkspaceBundle
        //instance.updateWorkspaceBundle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkspaceImagePermission', function() {
      it('should call updateWorkspaceImagePermission successfully', function(done) {
        //uncomment below and update the code to test updateWorkspaceImagePermission
        //instance.updateWorkspaceImagePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
