/**
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateConnectionAliasRequest from '../model/AssociateConnectionAliasRequest';
import AssociateConnectionAliasResult from '../model/AssociateConnectionAliasResult';
import AssociateIpGroupsRequest from '../model/AssociateIpGroupsRequest';
import AuthorizeIpRulesRequest from '../model/AuthorizeIpRulesRequest';
import CopyWorkspaceImageRequest from '../model/CopyWorkspaceImageRequest';
import CopyWorkspaceImageResult from '../model/CopyWorkspaceImageResult';
import CreateConnectClientAddInRequest from '../model/CreateConnectClientAddInRequest';
import CreateConnectClientAddInResult from '../model/CreateConnectClientAddInResult';
import CreateConnectionAliasRequest from '../model/CreateConnectionAliasRequest';
import CreateConnectionAliasResult from '../model/CreateConnectionAliasResult';
import CreateIpGroupRequest from '../model/CreateIpGroupRequest';
import CreateIpGroupResult from '../model/CreateIpGroupResult';
import CreateStandbyWorkspacesRequest from '../model/CreateStandbyWorkspacesRequest';
import CreateStandbyWorkspacesResult from '../model/CreateStandbyWorkspacesResult';
import CreateTagsRequest from '../model/CreateTagsRequest';
import CreateUpdatedWorkspaceImageRequest from '../model/CreateUpdatedWorkspaceImageRequest';
import CreateUpdatedWorkspaceImageResult from '../model/CreateUpdatedWorkspaceImageResult';
import CreateWorkspaceBundleRequest from '../model/CreateWorkspaceBundleRequest';
import CreateWorkspaceBundleResult from '../model/CreateWorkspaceBundleResult';
import CreateWorkspaceImageRequest from '../model/CreateWorkspaceImageRequest';
import CreateWorkspaceImageResult from '../model/CreateWorkspaceImageResult';
import CreateWorkspacesRequest from '../model/CreateWorkspacesRequest';
import CreateWorkspacesResult from '../model/CreateWorkspacesResult';
import DeleteClientBrandingRequest from '../model/DeleteClientBrandingRequest';
import DeleteConnectClientAddInRequest from '../model/DeleteConnectClientAddInRequest';
import DeleteConnectionAliasRequest from '../model/DeleteConnectionAliasRequest';
import DeleteIpGroupRequest from '../model/DeleteIpGroupRequest';
import DeleteTagsRequest from '../model/DeleteTagsRequest';
import DeleteWorkspaceBundleRequest from '../model/DeleteWorkspaceBundleRequest';
import DeleteWorkspaceImageRequest from '../model/DeleteWorkspaceImageRequest';
import DeregisterWorkspaceDirectoryRequest from '../model/DeregisterWorkspaceDirectoryRequest';
import DescribeAccountModificationsRequest from '../model/DescribeAccountModificationsRequest';
import DescribeAccountModificationsResult from '../model/DescribeAccountModificationsResult';
import DescribeAccountResult from '../model/DescribeAccountResult';
import DescribeClientBrandingRequest from '../model/DescribeClientBrandingRequest';
import DescribeClientBrandingResult from '../model/DescribeClientBrandingResult';
import DescribeClientPropertiesRequest from '../model/DescribeClientPropertiesRequest';
import DescribeClientPropertiesResult from '../model/DescribeClientPropertiesResult';
import DescribeConnectClientAddInsRequest from '../model/DescribeConnectClientAddInsRequest';
import DescribeConnectClientAddInsResult from '../model/DescribeConnectClientAddInsResult';
import DescribeConnectionAliasPermissionsRequest from '../model/DescribeConnectionAliasPermissionsRequest';
import DescribeConnectionAliasPermissionsResult from '../model/DescribeConnectionAliasPermissionsResult';
import DescribeConnectionAliasesRequest from '../model/DescribeConnectionAliasesRequest';
import DescribeConnectionAliasesResult from '../model/DescribeConnectionAliasesResult';
import DescribeIpGroupsRequest from '../model/DescribeIpGroupsRequest';
import DescribeIpGroupsResult from '../model/DescribeIpGroupsResult';
import DescribeTagsRequest from '../model/DescribeTagsRequest';
import DescribeTagsResult from '../model/DescribeTagsResult';
import DescribeWorkspaceBundlesRequest from '../model/DescribeWorkspaceBundlesRequest';
import DescribeWorkspaceBundlesResult from '../model/DescribeWorkspaceBundlesResult';
import DescribeWorkspaceDirectoriesRequest from '../model/DescribeWorkspaceDirectoriesRequest';
import DescribeWorkspaceDirectoriesResult from '../model/DescribeWorkspaceDirectoriesResult';
import DescribeWorkspaceImagePermissionsRequest from '../model/DescribeWorkspaceImagePermissionsRequest';
import DescribeWorkspaceImagePermissionsResult from '../model/DescribeWorkspaceImagePermissionsResult';
import DescribeWorkspaceImagesRequest from '../model/DescribeWorkspaceImagesRequest';
import DescribeWorkspaceImagesResult from '../model/DescribeWorkspaceImagesResult';
import DescribeWorkspaceSnapshotsRequest from '../model/DescribeWorkspaceSnapshotsRequest';
import DescribeWorkspaceSnapshotsResult from '../model/DescribeWorkspaceSnapshotsResult';
import DescribeWorkspacesConnectionStatusRequest from '../model/DescribeWorkspacesConnectionStatusRequest';
import DescribeWorkspacesConnectionStatusResult from '../model/DescribeWorkspacesConnectionStatusResult';
import DescribeWorkspacesRequest from '../model/DescribeWorkspacesRequest';
import DescribeWorkspacesResult from '../model/DescribeWorkspacesResult';
import DisassociateConnectionAliasRequest from '../model/DisassociateConnectionAliasRequest';
import DisassociateIpGroupsRequest from '../model/DisassociateIpGroupsRequest';
import ImportClientBrandingRequest from '../model/ImportClientBrandingRequest';
import ImportClientBrandingResult from '../model/ImportClientBrandingResult';
import ImportWorkspaceImageRequest from '../model/ImportWorkspaceImageRequest';
import ImportWorkspaceImageResult from '../model/ImportWorkspaceImageResult';
import ListAvailableManagementCidrRangesRequest from '../model/ListAvailableManagementCidrRangesRequest';
import ListAvailableManagementCidrRangesResult from '../model/ListAvailableManagementCidrRangesResult';
import MigrateWorkspaceRequest from '../model/MigrateWorkspaceRequest';
import MigrateWorkspaceResult from '../model/MigrateWorkspaceResult';
import ModifyAccountRequest from '../model/ModifyAccountRequest';
import ModifyCertificateBasedAuthPropertiesRequest from '../model/ModifyCertificateBasedAuthPropertiesRequest';
import ModifyClientPropertiesRequest from '../model/ModifyClientPropertiesRequest';
import ModifySamlPropertiesRequest from '../model/ModifySamlPropertiesRequest';
import ModifySelfservicePermissionsRequest from '../model/ModifySelfservicePermissionsRequest';
import ModifyWorkspaceAccessPropertiesRequest from '../model/ModifyWorkspaceAccessPropertiesRequest';
import ModifyWorkspaceCreationPropertiesRequest from '../model/ModifyWorkspaceCreationPropertiesRequest';
import ModifyWorkspacePropertiesRequest from '../model/ModifyWorkspacePropertiesRequest';
import ModifyWorkspaceStateRequest from '../model/ModifyWorkspaceStateRequest';
import RebootWorkspacesRequest from '../model/RebootWorkspacesRequest';
import RebootWorkspacesResult from '../model/RebootWorkspacesResult';
import RebuildWorkspacesRequest from '../model/RebuildWorkspacesRequest';
import RebuildWorkspacesResult from '../model/RebuildWorkspacesResult';
import RegisterWorkspaceDirectoryRequest from '../model/RegisterWorkspaceDirectoryRequest';
import RestoreWorkspaceRequest from '../model/RestoreWorkspaceRequest';
import RevokeIpRulesRequest from '../model/RevokeIpRulesRequest';
import StartWorkspacesRequest from '../model/StartWorkspacesRequest';
import StartWorkspacesResult from '../model/StartWorkspacesResult';
import StopWorkspacesRequest from '../model/StopWorkspacesRequest';
import StopWorkspacesResult from '../model/StopWorkspacesResult';
import TerminateWorkspacesRequest from '../model/TerminateWorkspacesRequest';
import TerminateWorkspacesResult from '../model/TerminateWorkspacesResult';
import UpdateConnectClientAddInRequest from '../model/UpdateConnectClientAddInRequest';
import UpdateConnectionAliasPermissionRequest from '../model/UpdateConnectionAliasPermissionRequest';
import UpdateRulesOfIpGroupRequest from '../model/UpdateRulesOfIpGroupRequest';
import UpdateWorkspaceBundleRequest from '../model/UpdateWorkspaceBundleRequest';
import UpdateWorkspaceImagePermissionRequest from '../model/UpdateWorkspaceImagePermissionRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-04-08
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateConnectionAlias operation.
     * @callback module:api/DefaultApi~associateConnectionAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateConnectionAliasResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates the specified connection alias with the specified directory to enable cross-Region redirection. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.</p> <note> <p>Before performing this operation, call <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html\"> DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateConnectionAliasRequest} associateConnectionAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateConnectionAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateConnectionAliasResult}
     */
    associateConnectionAlias(xAmzTarget, associateConnectionAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateConnectionAliasRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateConnectionAlias");
      }
      // verify the required parameter 'associateConnectionAliasRequest' is set
      if (associateConnectionAliasRequest === undefined || associateConnectionAliasRequest === null) {
        throw new Error("Missing the required parameter 'associateConnectionAliasRequest' when calling associateConnectionAlias");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateConnectionAliasResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.AssociateConnectionAlias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateIpGroups operation.
     * @callback module:api/DefaultApi~associateIpGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified IP access control group with the specified directory.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateIpGroupsRequest} associateIpGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateIpGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateIpGroups(xAmzTarget, associateIpGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateIpGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateIpGroups");
      }
      // verify the required parameter 'associateIpGroupsRequest' is set
      if (associateIpGroupsRequest === undefined || associateIpGroupsRequest === null) {
        throw new Error("Missing the required parameter 'associateIpGroupsRequest' when calling associateIpGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.AssociateIpGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeIpRules operation.
     * @callback module:api/DefaultApi~authorizeIpRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more rules to the specified IP access control group.</p> <p>This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AuthorizeIpRulesRequest} authorizeIpRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~authorizeIpRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    authorizeIpRules(xAmzTarget, authorizeIpRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = authorizeIpRulesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling authorizeIpRules");
      }
      // verify the required parameter 'authorizeIpRulesRequest' is set
      if (authorizeIpRulesRequest === undefined || authorizeIpRulesRequest === null) {
        throw new Error("Missing the required parameter 'authorizeIpRulesRequest' when calling authorizeIpRules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.AuthorizeIpRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyWorkspaceImage operation.
     * @callback module:api/DefaultApi~copyWorkspaceImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyWorkspaceImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies the specified image from the specified Region to the current Region. For more information about copying images, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/copy-custom-image.html\"> Copy a Custom WorkSpaces Image</a>.</p> <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p> <p>In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.</p> <important> <p>Before copying a shared image, be sure to verify that it has been shared from the correct Amazon Web Services account. To determine if an image has been shared and to see the ID of the Amazon Web Services account that owns an image, use the <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html\">DescribeWorkSpaceImages</a> and <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImagePermissions.html\">DescribeWorkspaceImagePermissions</a> API operations. </p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CopyWorkspaceImageRequest} copyWorkspaceImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~copyWorkspaceImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyWorkspaceImageResult}
     */
    copyWorkspaceImage(xAmzTarget, copyWorkspaceImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = copyWorkspaceImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling copyWorkspaceImage");
      }
      // verify the required parameter 'copyWorkspaceImageRequest' is set
      if (copyWorkspaceImageRequest === undefined || copyWorkspaceImageRequest === null) {
        throw new Error("Missing the required parameter 'copyWorkspaceImageRequest' when calling copyWorkspaceImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopyWorkspaceImageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CopyWorkspaceImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConnectClientAddIn operation.
     * @callback module:api/DefaultApi~createConnectClientAddInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConnectClientAddInResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a client-add-in for Amazon Connect within a directory. You can create only one Amazon Connect client add-in within a directory.</p> <p>This client add-in allows WorkSpaces users to seamlessly connect to Amazon Connect.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateConnectClientAddInRequest} createConnectClientAddInRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConnectClientAddInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConnectClientAddInResult}
     */
    createConnectClientAddIn(xAmzTarget, createConnectClientAddInRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConnectClientAddInRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createConnectClientAddIn");
      }
      // verify the required parameter 'createConnectClientAddInRequest' is set
      if (createConnectClientAddInRequest === undefined || createConnectClientAddInRequest === null) {
        throw new Error("Missing the required parameter 'createConnectClientAddInRequest' when calling createConnectClientAddIn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConnectClientAddInResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateConnectClientAddIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConnectionAlias operation.
     * @callback module:api/DefaultApi~createConnectionAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConnectionAliasResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the specified connection alias for use with cross-Region redirection. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateConnectionAliasRequest} createConnectionAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConnectionAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConnectionAliasResult}
     */
    createConnectionAlias(xAmzTarget, createConnectionAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConnectionAliasRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createConnectionAlias");
      }
      // verify the required parameter 'createConnectionAliasRequest' is set
      if (createConnectionAliasRequest === undefined || createConnectionAliasRequest === null) {
        throw new Error("Missing the required parameter 'createConnectionAliasRequest' when calling createConnectionAlias");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConnectionAliasResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateConnectionAlias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIpGroup operation.
     * @callback module:api/DefaultApi~createIpGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIpGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an IP access control group.</p> <p>An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using <a>AuthorizeIpRules</a>.</p> <p>There is a default IP access control group associated with your directory. If you don't associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateIpGroupRequest} createIpGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIpGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIpGroupResult}
     */
    createIpGroup(xAmzTarget, createIpGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIpGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createIpGroup");
      }
      // verify the required parameter 'createIpGroupRequest' is set
      if (createIpGroupRequest === undefined || createIpGroupRequest === null) {
        throw new Error("Missing the required parameter 'createIpGroupRequest' when calling createIpGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIpGroupResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateIpGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStandbyWorkspaces operation.
     * @callback module:api/DefaultApi~createStandbyWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStandbyWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a standby WorkSpace in a secondary Region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateStandbyWorkspacesRequest} createStandbyWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStandbyWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStandbyWorkspacesResult}
     */
    createStandbyWorkspaces(xAmzTarget, createStandbyWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStandbyWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createStandbyWorkspaces");
      }
      // verify the required parameter 'createStandbyWorkspacesRequest' is set
      if (createStandbyWorkspacesRequest === undefined || createStandbyWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'createStandbyWorkspacesRequest' when calling createStandbyWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStandbyWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateStandbyWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTags operation.
     * @callback module:api/DefaultApi~createTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the specified tags for the specified WorkSpaces resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTagsRequest} createTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createTags(xAmzTarget, createTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTagsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTags");
      }
      // verify the required parameter 'createTagsRequest' is set
      if (createTagsRequest === undefined || createTagsRequest === null) {
        throw new Error("Missing the required parameter 'createTagsRequest' when calling createTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdatedWorkspaceImage operation.
     * @callback module:api/DefaultApi~createUpdatedWorkspaceImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpdatedWorkspaceImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new updated WorkSpace image based on the specified source image. The new updated WorkSpace image has the latest drivers and other updates required by the Amazon WorkSpaces components.</p> <p>To determine which WorkSpace images need to be updated with the latest Amazon WorkSpaces requirements, use <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html\"> DescribeWorkspaceImages</a>.</p> <note> <ul> <li> <p>Only Windows 10, Windows Server 2016, and Windows Server 2019 WorkSpace images can be programmatically updated at this time.</p> </li> <li> <p>Microsoft Windows updates and other application updates are not included in the update process.</p> </li> <li> <p>The source WorkSpace image is not deleted. You can delete the source image after you've verified your new updated image and created a new bundle. </p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUpdatedWorkspaceImageRequest} createUpdatedWorkspaceImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUpdatedWorkspaceImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpdatedWorkspaceImageResult}
     */
    createUpdatedWorkspaceImage(xAmzTarget, createUpdatedWorkspaceImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUpdatedWorkspaceImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUpdatedWorkspaceImage");
      }
      // verify the required parameter 'createUpdatedWorkspaceImageRequest' is set
      if (createUpdatedWorkspaceImageRequest === undefined || createUpdatedWorkspaceImageRequest === null) {
        throw new Error("Missing the required parameter 'createUpdatedWorkspaceImageRequest' when calling createUpdatedWorkspaceImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUpdatedWorkspaceImageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateUpdatedWorkspaceImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkspaceBundle operation.
     * @callback module:api/DefaultApi~createWorkspaceBundleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkspaceBundleResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html\"> Create a Custom WorkSpaces Image and Bundle</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWorkspaceBundleRequest} createWorkspaceBundleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkspaceBundleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkspaceBundleResult}
     */
    createWorkspaceBundle(xAmzTarget, createWorkspaceBundleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkspaceBundleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWorkspaceBundle");
      }
      // verify the required parameter 'createWorkspaceBundleRequest' is set
      if (createWorkspaceBundleRequest === undefined || createWorkspaceBundleRequest === null) {
        throw new Error("Missing the required parameter 'createWorkspaceBundleRequest' when calling createWorkspaceBundle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkspaceBundleResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateWorkspaceBundle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkspaceImage operation.
     * @callback module:api/DefaultApi~createWorkspaceImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkspaceImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new WorkSpace image from an existing WorkSpace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWorkspaceImageRequest} createWorkspaceImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkspaceImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkspaceImageResult}
     */
    createWorkspaceImage(xAmzTarget, createWorkspaceImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkspaceImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWorkspaceImage");
      }
      // verify the required parameter 'createWorkspaceImageRequest' is set
      if (createWorkspaceImageRequest === undefined || createWorkspaceImageRequest === null) {
        throw new Error("Missing the required parameter 'createWorkspaceImageRequest' when calling createWorkspaceImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkspaceImageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateWorkspaceImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkspaces operation.
     * @callback module:api/DefaultApi~createWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates one or more WorkSpaces.</p> <p>This operation is asynchronous and returns before the WorkSpaces are created.</p> <note> <p>The <code>MANUAL</code> running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see <a href=\"http://aws.amazon.com/workspaces/core/\">Amazon WorkSpaces Core</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWorkspacesRequest} createWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkspacesResult}
     */
    createWorkspaces(xAmzTarget, createWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWorkspaces");
      }
      // verify the required parameter 'createWorkspacesRequest' is set
      if (createWorkspacesRequest === undefined || createWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'createWorkspacesRequest' when calling createWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.CreateWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientBranding operation.
     * @callback module:api/DefaultApi~deleteClientBrandingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes customized client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.</p> <p>After you delete your customized client branding, your login portal reverts to the default client branding.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteClientBrandingRequest} deleteClientBrandingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClientBrandingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteClientBranding(xAmzTarget, deleteClientBrandingRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteClientBrandingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteClientBranding");
      }
      // verify the required parameter 'deleteClientBrandingRequest' is set
      if (deleteClientBrandingRequest === undefined || deleteClientBrandingRequest === null) {
        throw new Error("Missing the required parameter 'deleteClientBrandingRequest' when calling deleteClientBranding");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteClientBranding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnectClientAddIn operation.
     * @callback module:api/DefaultApi~deleteConnectClientAddInCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a client-add-in for Amazon Connect that is configured within a directory.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteConnectClientAddInRequest} deleteConnectClientAddInRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConnectClientAddInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConnectClientAddIn(xAmzTarget, deleteConnectClientAddInRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteConnectClientAddInRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteConnectClientAddIn");
      }
      // verify the required parameter 'deleteConnectClientAddInRequest' is set
      if (deleteConnectClientAddInRequest === undefined || deleteConnectClientAddInRequest === null) {
        throw new Error("Missing the required parameter 'deleteConnectClientAddInRequest' when calling deleteConnectClientAddIn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteConnectClientAddIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnectionAlias operation.
     * @callback module:api/DefaultApi~deleteConnectionAliasCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified connection alias. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.</p> <important> <p> <b>If you will no longer be using a fully qualified domain name (FQDN) as the registration code for your WorkSpaces users, you must take certain precautions to prevent potential security issues.</b> For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html#cross-region-redirection-security-considerations\"> Security Considerations if You Stop Using Cross-Region Redirection</a>.</p> </important> <note> <p>To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteConnectionAliasRequest} deleteConnectionAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConnectionAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConnectionAlias(xAmzTarget, deleteConnectionAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteConnectionAliasRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteConnectionAlias");
      }
      // verify the required parameter 'deleteConnectionAliasRequest' is set
      if (deleteConnectionAliasRequest === undefined || deleteConnectionAliasRequest === null) {
        throw new Error("Missing the required parameter 'deleteConnectionAliasRequest' when calling deleteConnectionAlias");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteConnectionAlias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIpGroup operation.
     * @callback module:api/DefaultApi~deleteIpGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified IP access control group.</p> <p>You cannot delete an IP access control group that is associated with a directory.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteIpGroupRequest} deleteIpGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIpGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteIpGroup(xAmzTarget, deleteIpGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteIpGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteIpGroup");
      }
      // verify the required parameter 'deleteIpGroupRequest' is set
      if (deleteIpGroupRequest === undefined || deleteIpGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteIpGroupRequest' when calling deleteIpGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteIpGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTags operation.
     * @callback module:api/DefaultApi~deleteTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified tags from the specified WorkSpaces resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTagsRequest} deleteTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTags(xAmzTarget, deleteTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTagsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTags");
      }
      // verify the required parameter 'deleteTagsRequest' is set
      if (deleteTagsRequest === undefined || deleteTagsRequest === null) {
        throw new Error("Missing the required parameter 'deleteTagsRequest' when calling deleteTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkspaceBundle operation.
     * @callback module:api/DefaultApi~deleteWorkspaceBundleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/delete_bundle.html\"> Delete a Custom WorkSpaces Bundle or Image</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWorkspaceBundleRequest} deleteWorkspaceBundleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkspaceBundleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkspaceBundle(xAmzTarget, deleteWorkspaceBundleRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWorkspaceBundleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWorkspaceBundle");
      }
      // verify the required parameter 'deleteWorkspaceBundleRequest' is set
      if (deleteWorkspaceBundleRequest === undefined || deleteWorkspaceBundleRequest === null) {
        throw new Error("Missing the required parameter 'deleteWorkspaceBundleRequest' when calling deleteWorkspaceBundle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteWorkspaceBundle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkspaceImage operation.
     * @callback module:api/DefaultApi~deleteWorkspaceImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and unshare the image if it is shared with other accounts. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWorkspaceImageRequest} deleteWorkspaceImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkspaceImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkspaceImage(xAmzTarget, deleteWorkspaceImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWorkspaceImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWorkspaceImage");
      }
      // verify the required parameter 'deleteWorkspaceImageRequest' is set
      if (deleteWorkspaceImageRequest === undefined || deleteWorkspaceImageRequest === null) {
        throw new Error("Missing the required parameter 'deleteWorkspaceImageRequest' when calling deleteWorkspaceImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeleteWorkspaceImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterWorkspaceDirectory operation.
     * @callback module:api/DefaultApi~deregisterWorkspaceDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.</p> <note> <p>Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the <a href=\"http://aws.amazon.com/directoryservice/pricing/\">Directory Service pricing terms</a>.</p> <p>To delete empty directories, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html\"> Delete the Directory for Your WorkSpaces</a>. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeregisterWorkspaceDirectoryRequest} deregisterWorkspaceDirectoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterWorkspaceDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deregisterWorkspaceDirectory(xAmzTarget, deregisterWorkspaceDirectoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterWorkspaceDirectoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deregisterWorkspaceDirectory");
      }
      // verify the required parameter 'deregisterWorkspaceDirectoryRequest' is set
      if (deregisterWorkspaceDirectoryRequest === undefined || deregisterWorkspaceDirectoryRequest === null) {
        throw new Error("Missing the required parameter 'deregisterWorkspaceDirectoryRequest' when calling deregisterWorkspaceDirectory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DeregisterWorkspaceDirectory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccount operation.
     * @callback module:api/DefaultApi~describeAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountResult}
     */
    describeAccount(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAccount");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccountResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccountModifications operation.
     * @callback module:api/DefaultApi~describeAccountModificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountModificationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAccountModificationsRequest} describeAccountModificationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountModificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountModificationsResult}
     */
    describeAccountModifications(xAmzTarget, describeAccountModificationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAccountModificationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAccountModifications");
      }
      // verify the required parameter 'describeAccountModificationsRequest' is set
      if (describeAccountModificationsRequest === undefined || describeAccountModificationsRequest === null) {
        throw new Error("Missing the required parameter 'describeAccountModificationsRequest' when calling describeAccountModifications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccountModificationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeAccountModifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeClientBranding operation.
     * @callback module:api/DefaultApi~describeClientBrandingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClientBrandingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified client branding. Client branding allows you to customize the log in page of various device types for your users. You can add your company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.</p> <note> <p>Only device types that have branding information configured will be shown in the response.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeClientBrandingRequest} describeClientBrandingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClientBrandingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClientBrandingResult}
     */
    describeClientBranding(xAmzTarget, describeClientBrandingRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeClientBrandingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeClientBranding");
      }
      // verify the required parameter 'describeClientBrandingRequest' is set
      if (describeClientBrandingRequest === undefined || describeClientBrandingRequest === null) {
        throw new Error("Missing the required parameter 'describeClientBrandingRequest' when calling describeClientBranding");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeClientBrandingResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeClientBranding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeClientProperties operation.
     * @callback module:api/DefaultApi~describeClientPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClientPropertiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified Amazon WorkSpaces clients.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeClientPropertiesRequest} describeClientPropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClientPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClientPropertiesResult}
     */
    describeClientProperties(xAmzTarget, describeClientPropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeClientPropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeClientProperties");
      }
      // verify the required parameter 'describeClientPropertiesRequest' is set
      if (describeClientPropertiesRequest === undefined || describeClientPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'describeClientPropertiesRequest' when calling describeClientProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeClientPropertiesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeClientProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnectClientAddIns operation.
     * @callback module:api/DefaultApi~describeConnectClientAddInsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectClientAddInsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of Amazon Connect client add-ins that have been created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeConnectClientAddInsRequest} describeConnectClientAddInsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConnectClientAddInsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectClientAddInsResult}
     */
    describeConnectClientAddIns(xAmzTarget, describeConnectClientAddInsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectClientAddInsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeConnectClientAddIns");
      }
      // verify the required parameter 'describeConnectClientAddInsRequest' is set
      if (describeConnectClientAddInsRequest === undefined || describeConnectClientAddInsRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectClientAddInsRequest' when calling describeConnectClientAddIns");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectClientAddInsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeConnectClientAddIns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnectionAliasPermissions operation.
     * @callback module:api/DefaultApi~describeConnectionAliasPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectionAliasPermissionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the permissions that the owner of a connection alias has granted to another Amazon Web Services account for the specified connection alias. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeConnectionAliasPermissionsRequest} describeConnectionAliasPermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConnectionAliasPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectionAliasPermissionsResult}
     */
    describeConnectionAliasPermissions(xAmzTarget, describeConnectionAliasPermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectionAliasPermissionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeConnectionAliasPermissions");
      }
      // verify the required parameter 'describeConnectionAliasPermissionsRequest' is set
      if (describeConnectionAliasPermissionsRequest === undefined || describeConnectionAliasPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectionAliasPermissionsRequest' when calling describeConnectionAliasPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectionAliasPermissionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeConnectionAliasPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnectionAliases operation.
     * @callback module:api/DefaultApi~describeConnectionAliasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectionAliasesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes the connection aliases used for cross-Region redirection. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeConnectionAliasesRequest} describeConnectionAliasesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConnectionAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectionAliasesResult}
     */
    describeConnectionAliases(xAmzTarget, describeConnectionAliasesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectionAliasesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeConnectionAliases");
      }
      // verify the required parameter 'describeConnectionAliasesRequest' is set
      if (describeConnectionAliasesRequest === undefined || describeConnectionAliasesRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectionAliasesRequest' when calling describeConnectionAliases");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectionAliasesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeConnectionAliases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIpGroups operation.
     * @callback module:api/DefaultApi~describeIpGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIpGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes one or more of your IP access control groups.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeIpGroupsRequest} describeIpGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIpGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIpGroupsResult}
     */
    describeIpGroups(xAmzTarget, describeIpGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeIpGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeIpGroups");
      }
      // verify the required parameter 'describeIpGroupsRequest' is set
      if (describeIpGroupsRequest === undefined || describeIpGroupsRequest === null) {
        throw new Error("Missing the required parameter 'describeIpGroupsRequest' when calling describeIpGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeIpGroupsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeIpGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTags operation.
     * @callback module:api/DefaultApi~describeTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTagsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified tags for the specified WorkSpaces resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTagsRequest} describeTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTagsResult}
     */
    describeTags(xAmzTarget, describeTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTagsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTags");
      }
      // verify the required parameter 'describeTagsRequest' is set
      if (describeTagsRequest === undefined || describeTagsRequest === null) {
        throw new Error("Missing the required parameter 'describeTagsRequest' when calling describeTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTagsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspaceBundles operation.
     * @callback module:api/DefaultApi~describeWorkspaceBundlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspaceBundlesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a list that describes the available WorkSpace bundles.</p> <p>You can filter the results using either bundle ID or owner, but not both.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspaceBundlesRequest} describeWorkspaceBundlesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeWorkspaceBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspaceBundlesResult}
     */
    describeWorkspaceBundles(xAmzTarget, describeWorkspaceBundlesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspaceBundlesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspaceBundles");
      }
      // verify the required parameter 'describeWorkspaceBundlesRequest' is set
      if (describeWorkspaceBundlesRequest === undefined || describeWorkspaceBundlesRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspaceBundlesRequest' when calling describeWorkspaceBundles");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspaceBundlesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspaceBundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspaceDirectories operation.
     * @callback module:api/DefaultApi~describeWorkspaceDirectoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspaceDirectoriesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the available directories that are registered with Amazon WorkSpaces.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspaceDirectoriesRequest} describeWorkspaceDirectoriesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeWorkspaceDirectoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspaceDirectoriesResult}
     */
    describeWorkspaceDirectories(xAmzTarget, describeWorkspaceDirectoriesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspaceDirectoriesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspaceDirectories");
      }
      // verify the required parameter 'describeWorkspaceDirectoriesRequest' is set
      if (describeWorkspaceDirectoriesRequest === undefined || describeWorkspaceDirectoriesRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspaceDirectoriesRequest' when calling describeWorkspaceDirectories");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspaceDirectoriesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspaceDirectories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspaceImagePermissions operation.
     * @callback module:api/DefaultApi~describeWorkspaceImagePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspaceImagePermissionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the permissions that the owner of an image has granted to other Amazon Web Services accounts for an image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspaceImagePermissionsRequest} describeWorkspaceImagePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkspaceImagePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspaceImagePermissionsResult}
     */
    describeWorkspaceImagePermissions(xAmzTarget, describeWorkspaceImagePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspaceImagePermissionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspaceImagePermissions");
      }
      // verify the required parameter 'describeWorkspaceImagePermissionsRequest' is set
      if (describeWorkspaceImagePermissionsRequest === undefined || describeWorkspaceImagePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspaceImagePermissionsRequest' when calling describeWorkspaceImagePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspaceImagePermissionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspaceImagePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspaceImages operation.
     * @callback module:api/DefaultApi~describeWorkspaceImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspaceImagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspaceImagesRequest} describeWorkspaceImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkspaceImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspaceImagesResult}
     */
    describeWorkspaceImages(xAmzTarget, describeWorkspaceImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspaceImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspaceImages");
      }
      // verify the required parameter 'describeWorkspaceImagesRequest' is set
      if (describeWorkspaceImagesRequest === undefined || describeWorkspaceImagesRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspaceImagesRequest' when calling describeWorkspaceImages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspaceImagesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspaceImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspaceSnapshots operation.
     * @callback module:api/DefaultApi~describeWorkspaceSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspaceSnapshotsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the snapshots for the specified WorkSpace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspaceSnapshotsRequest} describeWorkspaceSnapshotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkspaceSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspaceSnapshotsResult}
     */
    describeWorkspaceSnapshots(xAmzTarget, describeWorkspaceSnapshotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspaceSnapshotsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspaceSnapshots");
      }
      // verify the required parameter 'describeWorkspaceSnapshotsRequest' is set
      if (describeWorkspaceSnapshotsRequest === undefined || describeWorkspaceSnapshotsRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspaceSnapshotsRequest' when calling describeWorkspaceSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspaceSnapshotsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspaceSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspaces operation.
     * @callback module:api/DefaultApi~describeWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the specified WorkSpaces.</p> <p>You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspacesRequest} describeWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [limit] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspacesResult}
     */
    describeWorkspaces(xAmzTarget, describeWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspaces");
      }
      // verify the required parameter 'describeWorkspacesRequest' is set
      if (describeWorkspacesRequest === undefined || describeWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspacesRequest' when calling describeWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
        'Limit': opts['limit'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkspacesConnectionStatus operation.
     * @callback module:api/DefaultApi~describeWorkspacesConnectionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkspacesConnectionStatusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the connection status of the specified WorkSpaces.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkspacesConnectionStatusRequest} describeWorkspacesConnectionStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkspacesConnectionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkspacesConnectionStatusResult}
     */
    describeWorkspacesConnectionStatus(xAmzTarget, describeWorkspacesConnectionStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkspacesConnectionStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkspacesConnectionStatus");
      }
      // verify the required parameter 'describeWorkspacesConnectionStatusRequest' is set
      if (describeWorkspacesConnectionStatusRequest === undefined || describeWorkspacesConnectionStatusRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkspacesConnectionStatusRequest' when calling describeWorkspacesConnectionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkspacesConnectionStatusResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DescribeWorkspacesConnectionStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateConnectionAlias operation.
     * @callback module:api/DefaultApi~disassociateConnectionAliasCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates a connection alias from a directory. Disassociating a connection alias disables cross-Region redirection between two directories in different Regions. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.</p> <note> <p>Before performing this operation, call <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html\"> DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateConnectionAliasRequest} disassociateConnectionAliasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateConnectionAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateConnectionAlias(xAmzTarget, disassociateConnectionAliasRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateConnectionAliasRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateConnectionAlias");
      }
      // verify the required parameter 'disassociateConnectionAliasRequest' is set
      if (disassociateConnectionAliasRequest === undefined || disassociateConnectionAliasRequest === null) {
        throw new Error("Missing the required parameter 'disassociateConnectionAliasRequest' when calling disassociateConnectionAlias");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DisassociateConnectionAlias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateIpGroups operation.
     * @callback module:api/DefaultApi~disassociateIpGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified IP access control group from the specified directory.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateIpGroupsRequest} disassociateIpGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateIpGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateIpGroups(xAmzTarget, disassociateIpGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateIpGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateIpGroups");
      }
      // verify the required parameter 'disassociateIpGroupsRequest' is set
      if (disassociateIpGroupsRequest === undefined || disassociateIpGroupsRequest === null) {
        throw new Error("Missing the required parameter 'disassociateIpGroupsRequest' when calling disassociateIpGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.DisassociateIpGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importClientBranding operation.
     * @callback module:api/DefaultApi~importClientBrandingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportClientBrandingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Imports client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.</p> <p>After you import client branding, the default branding experience for the specified platform type is replaced with the imported experience</p> <note> <ul> <li> <p>You must specify at least one platform type when importing client branding.</p> </li> <li> <p>You can import up to 6 MB of data with each request. If your request exceeds this limit, you can import client branding for different platform types using separate requests.</p> </li> <li> <p>In each platform type, the <code>SupportEmail</code> and <code>SupportLink</code> parameters are mutually exclusive. You can specify only one parameter for each platform type, but not both.</p> </li> <li> <p>Imported data can take up to a minute to appear in the WorkSpaces client.</p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportClientBrandingRequest} importClientBrandingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importClientBrandingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportClientBrandingResult}
     */
    importClientBranding(xAmzTarget, importClientBrandingRequest, opts, callback) {
      opts = opts || {};
      let postBody = importClientBrandingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importClientBranding");
      }
      // verify the required parameter 'importClientBrandingRequest' is set
      if (importClientBrandingRequest === undefined || importClientBrandingRequest === null) {
        throw new Error("Missing the required parameter 'importClientBrandingRequest' when calling importClientBranding");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportClientBrandingResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ImportClientBranding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importWorkspaceImage operation.
     * @callback module:api/DefaultApi~importWorkspaceImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportWorkspaceImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports the specified Windows 10 or 11 Bring Your Own License (BYOL) image into Amazon WorkSpaces. The image must be an already licensed Amazon EC2 image that is in your Amazon Web Services account, and you must own the image. For more information about creating BYOL images, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html\"> Bring Your Own Windows Desktop Licenses</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportWorkspaceImageRequest} importWorkspaceImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importWorkspaceImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportWorkspaceImageResult}
     */
    importWorkspaceImage(xAmzTarget, importWorkspaceImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = importWorkspaceImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importWorkspaceImage");
      }
      // verify the required parameter 'importWorkspaceImageRequest' is set
      if (importWorkspaceImageRequest === undefined || importWorkspaceImageRequest === null) {
        throw new Error("Missing the required parameter 'importWorkspaceImageRequest' when calling importWorkspaceImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportWorkspaceImageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ImportWorkspaceImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAvailableManagementCidrRanges operation.
     * @callback module:api/DefaultApi~listAvailableManagementCidrRangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAvailableManagementCidrRangesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL). </p> <p>This operation can be run only by Amazon Web Services accounts that are enabled for BYOL. If your account isn't enabled for BYOL, you'll receive an <code>AccessDeniedException</code> error.</p> <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAvailableManagementCidrRangesRequest} listAvailableManagementCidrRangesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listAvailableManagementCidrRangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAvailableManagementCidrRangesResult}
     */
    listAvailableManagementCidrRanges(xAmzTarget, listAvailableManagementCidrRangesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAvailableManagementCidrRangesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAvailableManagementCidrRanges");
      }
      // verify the required parameter 'listAvailableManagementCidrRangesRequest' is set
      if (listAvailableManagementCidrRangesRequest === undefined || listAvailableManagementCidrRangesRequest === null) {
        throw new Error("Missing the required parameter 'listAvailableManagementCidrRangesRequest' when calling listAvailableManagementCidrRanges");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAvailableManagementCidrRangesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ListAvailableManagementCidrRanges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrateWorkspace operation.
     * @callback module:api/DefaultApi~migrateWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrateWorkspaceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume.</p> <p>The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original <code>D:\\Users\\%USERNAME%</code> user profile folder is renamed to <code>D:\\Users\\%USERNAME%MMddyyTHHmmss%.NotMigrated</code>. A new <code>D:\\Users\\%USERNAME%\\</code> folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile.</p> <p>For available migration scenarios, details about what happens during migration, and best practices, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html\">Migrate a WorkSpace</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/MigrateWorkspaceRequest} migrateWorkspaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~migrateWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrateWorkspaceResult}
     */
    migrateWorkspace(xAmzTarget, migrateWorkspaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = migrateWorkspaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling migrateWorkspace");
      }
      // verify the required parameter 'migrateWorkspaceRequest' is set
      if (migrateWorkspaceRequest === undefined || migrateWorkspaceRequest === null) {
        throw new Error("Missing the required parameter 'migrateWorkspaceRequest' when calling migrateWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrateWorkspaceResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.MigrateWorkspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyAccount operation.
     * @callback module:api/DefaultApi~modifyAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the configuration of Bring Your Own License (BYOL) for the specified account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyAccountRequest} modifyAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyAccount(xAmzTarget, modifyAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyAccountRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyAccount");
      }
      // verify the required parameter 'modifyAccountRequest' is set
      if (modifyAccountRequest === undefined || modifyAccountRequest === null) {
        throw new Error("Missing the required parameter 'modifyAccountRequest' when calling modifyAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyCertificateBasedAuthProperties operation.
     * @callback module:api/DefaultApi~modifyCertificateBasedAuthPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the properties of the certificate-based authentication you want to use with your WorkSpaces.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyCertificateBasedAuthPropertiesRequest} modifyCertificateBasedAuthPropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyCertificateBasedAuthPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyCertificateBasedAuthProperties(xAmzTarget, modifyCertificateBasedAuthPropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyCertificateBasedAuthPropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyCertificateBasedAuthProperties");
      }
      // verify the required parameter 'modifyCertificateBasedAuthPropertiesRequest' is set
      if (modifyCertificateBasedAuthPropertiesRequest === undefined || modifyCertificateBasedAuthPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'modifyCertificateBasedAuthPropertiesRequest' when calling modifyCertificateBasedAuthProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyCertificateBasedAuthProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyClientProperties operation.
     * @callback module:api/DefaultApi~modifyClientPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the properties of the specified Amazon WorkSpaces clients.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyClientPropertiesRequest} modifyClientPropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyClientPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyClientProperties(xAmzTarget, modifyClientPropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyClientPropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyClientProperties");
      }
      // verify the required parameter 'modifyClientPropertiesRequest' is set
      if (modifyClientPropertiesRequest === undefined || modifyClientPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'modifyClientPropertiesRequest' when calling modifyClientProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyClientProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifySamlProperties operation.
     * @callback module:api/DefaultApi~modifySamlPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple properties related to SAML 2.0 authentication, including the enablement status, user access URL, and relay state parameter name that are used for configuring federation with an SAML 2.0 identity provider.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifySamlPropertiesRequest} modifySamlPropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifySamlPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifySamlProperties(xAmzTarget, modifySamlPropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifySamlPropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifySamlProperties");
      }
      // verify the required parameter 'modifySamlPropertiesRequest' is set
      if (modifySamlPropertiesRequest === undefined || modifySamlPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'modifySamlPropertiesRequest' when calling modifySamlProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifySamlProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifySelfservicePermissions operation.
     * @callback module:api/DefaultApi~modifySelfservicePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the self-service WorkSpace management capabilities for your users. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html\">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifySelfservicePermissionsRequest} modifySelfservicePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifySelfservicePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifySelfservicePermissions(xAmzTarget, modifySelfservicePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifySelfservicePermissionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifySelfservicePermissions");
      }
      // verify the required parameter 'modifySelfservicePermissionsRequest' is set
      if (modifySelfservicePermissionsRequest === undefined || modifySelfservicePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'modifySelfservicePermissionsRequest' when calling modifySelfservicePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifySelfservicePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyWorkspaceAccessProperties operation.
     * @callback module:api/DefaultApi~modifyWorkspaceAccessPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access\"> Control Device Access</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyWorkspaceAccessPropertiesRequest} modifyWorkspaceAccessPropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyWorkspaceAccessPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyWorkspaceAccessProperties(xAmzTarget, modifyWorkspaceAccessPropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyWorkspaceAccessPropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyWorkspaceAccessProperties");
      }
      // verify the required parameter 'modifyWorkspaceAccessPropertiesRequest' is set
      if (modifyWorkspaceAccessPropertiesRequest === undefined || modifyWorkspaceAccessPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'modifyWorkspaceAccessPropertiesRequest' when calling modifyWorkspaceAccessProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyWorkspaceAccessProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyWorkspaceCreationProperties operation.
     * @callback module:api/DefaultApi~modifyWorkspaceCreationPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the default properties used to create WorkSpaces.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyWorkspaceCreationPropertiesRequest} modifyWorkspaceCreationPropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyWorkspaceCreationPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyWorkspaceCreationProperties(xAmzTarget, modifyWorkspaceCreationPropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyWorkspaceCreationPropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyWorkspaceCreationProperties");
      }
      // verify the required parameter 'modifyWorkspaceCreationPropertiesRequest' is set
      if (modifyWorkspaceCreationPropertiesRequest === undefined || modifyWorkspaceCreationPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'modifyWorkspaceCreationPropertiesRequest' when calling modifyWorkspaceCreationProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyWorkspaceCreationProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyWorkspaceProperties operation.
     * @callback module:api/DefaultApi~modifyWorkspacePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the specified WorkSpace properties. For important information about how to modify the size of the root and user volumes, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html\"> Modify a WorkSpace</a>. </p> <note> <p>The <code>MANUAL</code> running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see <a href=\"http://aws.amazon.com/workspaces/core/\">Amazon WorkSpaces Core</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyWorkspacePropertiesRequest} modifyWorkspacePropertiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyWorkspacePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyWorkspaceProperties(xAmzTarget, modifyWorkspacePropertiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyWorkspacePropertiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyWorkspaceProperties");
      }
      // verify the required parameter 'modifyWorkspacePropertiesRequest' is set
      if (modifyWorkspacePropertiesRequest === undefined || modifyWorkspacePropertiesRequest === null) {
        throw new Error("Missing the required parameter 'modifyWorkspacePropertiesRequest' when calling modifyWorkspaceProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyWorkspaceProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyWorkspaceState operation.
     * @callback module:api/DefaultApi~modifyWorkspaceStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the state of the specified WorkSpace.</p> <p>To maintain a WorkSpace without being interrupted, set the WorkSpace state to <code>ADMIN_MAINTENANCE</code>. WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the <code>ADMIN_MAINTENANCE</code> state.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ModifyWorkspaceStateRequest} modifyWorkspaceStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~modifyWorkspaceStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modifyWorkspaceState(xAmzTarget, modifyWorkspaceStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyWorkspaceStateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling modifyWorkspaceState");
      }
      // verify the required parameter 'modifyWorkspaceStateRequest' is set
      if (modifyWorkspaceStateRequest === undefined || modifyWorkspaceStateRequest === null) {
        throw new Error("Missing the required parameter 'modifyWorkspaceStateRequest' when calling modifyWorkspaceState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.ModifyWorkspaceState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootWorkspaces operation.
     * @callback module:api/DefaultApi~rebootWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Reboots the specified WorkSpaces.</p> <p>You cannot reboot a WorkSpace unless its state is <code>AVAILABLE</code> or <code>UNHEALTHY</code>.</p> <p>This operation is asynchronous and returns before the WorkSpaces have rebooted.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RebootWorkspacesRequest} rebootWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rebootWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootWorkspacesResult}
     */
    rebootWorkspaces(xAmzTarget, rebootWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = rebootWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling rebootWorkspaces");
      }
      // verify the required parameter 'rebootWorkspacesRequest' is set
      if (rebootWorkspacesRequest === undefined || rebootWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'rebootWorkspacesRequest' when calling rebootWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RebootWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.RebootWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebuildWorkspaces operation.
     * @callback module:api/DefaultApi~rebuildWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebuildWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Rebuilds the specified WorkSpace.</p> <p>You cannot rebuild a WorkSpace unless its state is <code>AVAILABLE</code>, <code>ERROR</code>, <code>UNHEALTHY</code>, <code>STOPPED</code>, or <code>REBOOTING</code>.</p> <p>Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html\">Rebuild a WorkSpace</a>.</p> <p>This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RebuildWorkspacesRequest} rebuildWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rebuildWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebuildWorkspacesResult}
     */
    rebuildWorkspaces(xAmzTarget, rebuildWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = rebuildWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling rebuildWorkspaces");
      }
      // verify the required parameter 'rebuildWorkspacesRequest' is set
      if (rebuildWorkspacesRequest === undefined || rebuildWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'rebuildWorkspacesRequest' when calling rebuildWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RebuildWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.RebuildWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerWorkspaceDirectory operation.
     * @callback module:api/DefaultApi~registerWorkspaceDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role\"> Creating the workspaces_DefaultRole Role</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RegisterWorkspaceDirectoryRequest} registerWorkspaceDirectoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerWorkspaceDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerWorkspaceDirectory(xAmzTarget, registerWorkspaceDirectoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerWorkspaceDirectoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling registerWorkspaceDirectory");
      }
      // verify the required parameter 'registerWorkspaceDirectoryRequest' is set
      if (registerWorkspaceDirectoryRequest === undefined || registerWorkspaceDirectoryRequest === null) {
        throw new Error("Missing the required parameter 'registerWorkspaceDirectoryRequest' when calling registerWorkspaceDirectory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.RegisterWorkspaceDirectory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreWorkspace operation.
     * @callback module:api/DefaultApi~restoreWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Restores the specified WorkSpace to its last known healthy state.</p> <p>You cannot restore a WorkSpace unless its state is <code> AVAILABLE</code>, <code>ERROR</code>, <code>UNHEALTHY</code>, or <code>STOPPED</code>.</p> <p>Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html\">Restore a WorkSpace</a>.</p> <p>This operation is asynchronous and returns before the WorkSpace is completely restored.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RestoreWorkspaceRequest} restoreWorkspaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~restoreWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    restoreWorkspace(xAmzTarget, restoreWorkspaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = restoreWorkspaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling restoreWorkspace");
      }
      // verify the required parameter 'restoreWorkspaceRequest' is set
      if (restoreWorkspaceRequest === undefined || restoreWorkspaceRequest === null) {
        throw new Error("Missing the required parameter 'restoreWorkspaceRequest' when calling restoreWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.RestoreWorkspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeIpRules operation.
     * @callback module:api/DefaultApi~revokeIpRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more rules from the specified IP access control group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RevokeIpRulesRequest} revokeIpRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeIpRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    revokeIpRules(xAmzTarget, revokeIpRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokeIpRulesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling revokeIpRules");
      }
      // verify the required parameter 'revokeIpRulesRequest' is set
      if (revokeIpRulesRequest === undefined || revokeIpRulesRequest === null) {
        throw new Error("Missing the required parameter 'revokeIpRulesRequest' when calling revokeIpRules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.RevokeIpRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startWorkspaces operation.
     * @callback module:api/DefaultApi~startWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts the specified WorkSpaces.</p> <p>You cannot start a WorkSpace unless it has a running mode of <code>AutoStop</code> and a state of <code>STOPPED</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartWorkspacesRequest} startWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartWorkspacesResult}
     */
    startWorkspaces(xAmzTarget, startWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = startWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startWorkspaces");
      }
      // verify the required parameter 'startWorkspacesRequest' is set
      if (startWorkspacesRequest === undefined || startWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'startWorkspacesRequest' when calling startWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.StartWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopWorkspaces operation.
     * @callback module:api/DefaultApi~stopWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Stops the specified WorkSpaces.</p> <p>You cannot stop a WorkSpace unless it has a running mode of <code>AutoStop</code> and a state of <code>AVAILABLE</code>, <code>IMPAIRED</code>, <code>UNHEALTHY</code>, or <code>ERROR</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopWorkspacesRequest} stopWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopWorkspacesResult}
     */
    stopWorkspaces(xAmzTarget, stopWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopWorkspaces");
      }
      // verify the required parameter 'stopWorkspacesRequest' is set
      if (stopWorkspacesRequest === undefined || stopWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'stopWorkspacesRequest' when calling stopWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.StopWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateWorkspaces operation.
     * @callback module:api/DefaultApi~terminateWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminateWorkspacesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Terminates the specified WorkSpaces.</p> <important> <p>Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is destroyed. If you need to archive any user data, contact Amazon Web Services Support before terminating the WorkSpace.</p> </important> <p>You can terminate a WorkSpace that is in any state except <code>SUSPENDED</code>.</p> <p>This operation is asynchronous and returns before the WorkSpaces have been completely terminated. After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html\"> DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.</p> <note> <p>Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the <a href=\"http://aws.amazon.com/directoryservice/pricing/\">Directory Service pricing terms</a>.</p> <p>To delete empty directories, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html\"> Delete the Directory for Your WorkSpaces</a>. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TerminateWorkspacesRequest} terminateWorkspacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~terminateWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminateWorkspacesResult}
     */
    terminateWorkspaces(xAmzTarget, terminateWorkspacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = terminateWorkspacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling terminateWorkspaces");
      }
      // verify the required parameter 'terminateWorkspacesRequest' is set
      if (terminateWorkspacesRequest === undefined || terminateWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'terminateWorkspacesRequest' when calling terminateWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TerminateWorkspacesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.TerminateWorkspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectClientAddIn operation.
     * @callback module:api/DefaultApi~updateConnectClientAddInCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Amazon Connect client add-in. Use this action to update the name and endpoint URL of a Amazon Connect client add-in.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateConnectClientAddInRequest} updateConnectClientAddInRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConnectClientAddInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateConnectClientAddIn(xAmzTarget, updateConnectClientAddInRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConnectClientAddInRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateConnectClientAddIn");
      }
      // verify the required parameter 'updateConnectClientAddInRequest' is set
      if (updateConnectClientAddInRequest === undefined || updateConnectClientAddInRequest === null) {
        throw new Error("Missing the required parameter 'updateConnectClientAddInRequest' when calling updateConnectClientAddIn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.UpdateConnectClientAddIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectionAliasPermission operation.
     * @callback module:api/DefaultApi~updateConnectionAliasPermissionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Shares or unshares a connection alias with one account by specifying whether that account has permission to associate the connection alias with a directory. If the association permission is granted, the connection alias is shared with that account. If the association permission is revoked, the connection alias is unshared with the account. For more information, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\"> Cross-Region Redirection for Amazon WorkSpaces</a>.</p> <note> <ul> <li> <p>Before performing this operation, call <a href=\"https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html\"> DescribeConnectionAliases</a> to make sure that the current state of the connection alias is <code>CREATED</code>.</p> </li> <li> <p>To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.</p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateConnectionAliasPermissionRequest} updateConnectionAliasPermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConnectionAliasPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateConnectionAliasPermission(xAmzTarget, updateConnectionAliasPermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConnectionAliasPermissionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateConnectionAliasPermission");
      }
      // verify the required parameter 'updateConnectionAliasPermissionRequest' is set
      if (updateConnectionAliasPermissionRequest === undefined || updateConnectionAliasPermissionRequest === null) {
        throw new Error("Missing the required parameter 'updateConnectionAliasPermissionRequest' when calling updateConnectionAliasPermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.UpdateConnectionAliasPermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRulesOfIpGroup operation.
     * @callback module:api/DefaultApi~updateRulesOfIpGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the current rules of the specified IP access control group with the specified rules.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateRulesOfIpGroupRequest} updateRulesOfIpGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRulesOfIpGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateRulesOfIpGroup(xAmzTarget, updateRulesOfIpGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRulesOfIpGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateRulesOfIpGroup");
      }
      // verify the required parameter 'updateRulesOfIpGroupRequest' is set
      if (updateRulesOfIpGroupRequest === undefined || updateRulesOfIpGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateRulesOfIpGroupRequest' when calling updateRulesOfIpGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.UpdateRulesOfIpGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspaceBundle operation.
     * @callback module:api/DefaultApi~updateWorkspaceBundleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/update-custom-bundle.html\"> Update a Custom WorkSpaces Bundle</a>.</p> <important> <p>Existing WorkSpaces aren't automatically updated when you update the bundle that they're based on. To update existing WorkSpaces that are based on a bundle that you've updated, you must either rebuild the WorkSpaces or delete and recreate them.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateWorkspaceBundleRequest} updateWorkspaceBundleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkspaceBundleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWorkspaceBundle(xAmzTarget, updateWorkspaceBundleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkspaceBundleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateWorkspaceBundle");
      }
      // verify the required parameter 'updateWorkspaceBundleRequest' is set
      if (updateWorkspaceBundleRequest === undefined || updateWorkspaceBundleRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkspaceBundleRequest' when calling updateWorkspaceBundle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.UpdateWorkspaceBundle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspaceImagePermission operation.
     * @callback module:api/DefaultApi~updateWorkspaceImagePermissionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Shares or unshares an image with one account in the same Amazon Web Services Region by specifying whether that account has permission to copy the image. If the copy image permission is granted, the image is shared with that account. If the copy image permission is revoked, the image is unshared with the account.</p> <p>After an image has been shared, the recipient account can copy the image to other Regions as needed.</p> <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p> <p>In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.</p> <p>For more information about sharing images, see <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html\"> Share or Unshare a Custom WorkSpaces Image</a>.</p> <note> <ul> <li> <p>To delete an image that has been shared, you must unshare the image before you delete it.</p> </li> <li> <p>Sharing Bring Your Own License (BYOL) images across Amazon Web Services accounts isn't supported at this time in Amazon Web Services GovCloud (US). To share BYOL images across accounts in Amazon Web Services GovCloud (US), contact Amazon Web Services Support.</p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateWorkspaceImagePermissionRequest} updateWorkspaceImagePermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkspaceImagePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWorkspaceImagePermission(xAmzTarget, updateWorkspaceImagePermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkspaceImagePermissionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateWorkspaceImagePermission");
      }
      // verify the required parameter 'updateWorkspaceImagePermissionRequest' is set
      if (updateWorkspaceImagePermissionRequest === undefined || updateWorkspaceImagePermissionRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkspaceImagePermissionRequest' when calling updateWorkspaceImagePermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=WorkspacesService.UpdateWorkspaceImagePermission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
