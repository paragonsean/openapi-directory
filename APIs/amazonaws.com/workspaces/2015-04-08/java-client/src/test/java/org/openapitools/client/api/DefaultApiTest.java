/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateConnectionAliasRequest;
import org.openapitools.client.model.AssociateConnectionAliasResult;
import org.openapitools.client.model.AssociateIpGroupsRequest;
import org.openapitools.client.model.AuthorizeIpRulesRequest;
import org.openapitools.client.model.CopyWorkspaceImageRequest;
import org.openapitools.client.model.CopyWorkspaceImageResult;
import org.openapitools.client.model.CreateConnectClientAddInRequest;
import org.openapitools.client.model.CreateConnectClientAddInResult;
import org.openapitools.client.model.CreateConnectionAliasRequest;
import org.openapitools.client.model.CreateConnectionAliasResult;
import org.openapitools.client.model.CreateIpGroupRequest;
import org.openapitools.client.model.CreateIpGroupResult;
import org.openapitools.client.model.CreateStandbyWorkspacesRequest;
import org.openapitools.client.model.CreateStandbyWorkspacesResult;
import org.openapitools.client.model.CreateTagsRequest;
import org.openapitools.client.model.CreateUpdatedWorkspaceImageRequest;
import org.openapitools.client.model.CreateUpdatedWorkspaceImageResult;
import org.openapitools.client.model.CreateWorkspaceBundleRequest;
import org.openapitools.client.model.CreateWorkspaceBundleResult;
import org.openapitools.client.model.CreateWorkspaceImageRequest;
import org.openapitools.client.model.CreateWorkspaceImageResult;
import org.openapitools.client.model.CreateWorkspacesRequest;
import org.openapitools.client.model.CreateWorkspacesResult;
import org.openapitools.client.model.DeleteClientBrandingRequest;
import org.openapitools.client.model.DeleteConnectClientAddInRequest;
import org.openapitools.client.model.DeleteConnectionAliasRequest;
import org.openapitools.client.model.DeleteIpGroupRequest;
import org.openapitools.client.model.DeleteTagsRequest;
import org.openapitools.client.model.DeleteWorkspaceBundleRequest;
import org.openapitools.client.model.DeleteWorkspaceImageRequest;
import org.openapitools.client.model.DeregisterWorkspaceDirectoryRequest;
import org.openapitools.client.model.DescribeAccountModificationsRequest;
import org.openapitools.client.model.DescribeAccountModificationsResult;
import org.openapitools.client.model.DescribeAccountResult;
import org.openapitools.client.model.DescribeClientBrandingRequest;
import org.openapitools.client.model.DescribeClientBrandingResult;
import org.openapitools.client.model.DescribeClientPropertiesRequest;
import org.openapitools.client.model.DescribeClientPropertiesResult;
import org.openapitools.client.model.DescribeConnectClientAddInsRequest;
import org.openapitools.client.model.DescribeConnectClientAddInsResult;
import org.openapitools.client.model.DescribeConnectionAliasPermissionsRequest;
import org.openapitools.client.model.DescribeConnectionAliasPermissionsResult;
import org.openapitools.client.model.DescribeConnectionAliasesRequest;
import org.openapitools.client.model.DescribeConnectionAliasesResult;
import org.openapitools.client.model.DescribeIpGroupsRequest;
import org.openapitools.client.model.DescribeIpGroupsResult;
import org.openapitools.client.model.DescribeTagsRequest;
import org.openapitools.client.model.DescribeTagsResult;
import org.openapitools.client.model.DescribeWorkspaceBundlesRequest;
import org.openapitools.client.model.DescribeWorkspaceBundlesResult;
import org.openapitools.client.model.DescribeWorkspaceDirectoriesRequest;
import org.openapitools.client.model.DescribeWorkspaceDirectoriesResult;
import org.openapitools.client.model.DescribeWorkspaceImagePermissionsRequest;
import org.openapitools.client.model.DescribeWorkspaceImagePermissionsResult;
import org.openapitools.client.model.DescribeWorkspaceImagesRequest;
import org.openapitools.client.model.DescribeWorkspaceImagesResult;
import org.openapitools.client.model.DescribeWorkspaceSnapshotsRequest;
import org.openapitools.client.model.DescribeWorkspaceSnapshotsResult;
import org.openapitools.client.model.DescribeWorkspacesConnectionStatusRequest;
import org.openapitools.client.model.DescribeWorkspacesConnectionStatusResult;
import org.openapitools.client.model.DescribeWorkspacesRequest;
import org.openapitools.client.model.DescribeWorkspacesResult;
import org.openapitools.client.model.DisassociateConnectionAliasRequest;
import org.openapitools.client.model.DisassociateIpGroupsRequest;
import org.openapitools.client.model.ImportClientBrandingRequest;
import org.openapitools.client.model.ImportClientBrandingResult;
import org.openapitools.client.model.ImportWorkspaceImageRequest;
import org.openapitools.client.model.ImportWorkspaceImageResult;
import org.openapitools.client.model.ListAvailableManagementCidrRangesRequest;
import org.openapitools.client.model.ListAvailableManagementCidrRangesResult;
import org.openapitools.client.model.MigrateWorkspaceRequest;
import org.openapitools.client.model.MigrateWorkspaceResult;
import org.openapitools.client.model.ModifyAccountRequest;
import org.openapitools.client.model.ModifyCertificateBasedAuthPropertiesRequest;
import org.openapitools.client.model.ModifyClientPropertiesRequest;
import org.openapitools.client.model.ModifySamlPropertiesRequest;
import org.openapitools.client.model.ModifySelfservicePermissionsRequest;
import org.openapitools.client.model.ModifyWorkspaceAccessPropertiesRequest;
import org.openapitools.client.model.ModifyWorkspaceCreationPropertiesRequest;
import org.openapitools.client.model.ModifyWorkspacePropertiesRequest;
import org.openapitools.client.model.ModifyWorkspaceStateRequest;
import org.openapitools.client.model.RebootWorkspacesRequest;
import org.openapitools.client.model.RebootWorkspacesResult;
import org.openapitools.client.model.RebuildWorkspacesRequest;
import org.openapitools.client.model.RebuildWorkspacesResult;
import org.openapitools.client.model.RegisterWorkspaceDirectoryRequest;
import org.openapitools.client.model.RestoreWorkspaceRequest;
import org.openapitools.client.model.RevokeIpRulesRequest;
import org.openapitools.client.model.StartWorkspacesRequest;
import org.openapitools.client.model.StartWorkspacesResult;
import org.openapitools.client.model.StopWorkspacesRequest;
import org.openapitools.client.model.StopWorkspacesResult;
import org.openapitools.client.model.TerminateWorkspacesRequest;
import org.openapitools.client.model.TerminateWorkspacesResult;
import org.openapitools.client.model.UpdateConnectClientAddInRequest;
import org.openapitools.client.model.UpdateConnectionAliasPermissionRequest;
import org.openapitools.client.model.UpdateRulesOfIpGroupRequest;
import org.openapitools.client.model.UpdateWorkspaceBundleRequest;
import org.openapitools.client.model.UpdateWorkspaceImagePermissionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates the specified connection alias with the specified directory to enable cross-Region redirection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Before performing this operation, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html\&quot;&gt; DescribeConnectionAliases&lt;/a&gt; to make sure that the current state of the connection alias is &lt;code&gt;CREATED&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateConnectionAliasTest() throws ApiException {
        String xAmzTarget = null;
        AssociateConnectionAliasRequest associateConnectionAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateConnectionAliasResult response = api.associateConnectionAlias(xAmzTarget, associateConnectionAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified IP access control group with the specified directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateIpGroupsTest() throws ApiException {
        String xAmzTarget = null;
        AssociateIpGroupsRequest associateIpGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateIpGroups(xAmzTarget, associateIpGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds one or more rules to the specified IP access control group.&lt;/p&gt; &lt;p&gt;This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeIpRulesTest() throws ApiException {
        String xAmzTarget = null;
        AuthorizeIpRulesRequest authorizeIpRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.authorizeIpRules(xAmzTarget, authorizeIpRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies the specified image from the specified Region to the current Region. For more information about copying images, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/copy-custom-image.html\&quot;&gt; Copy a Custom WorkSpaces Image&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In the China (Ningxia) Region, you can copy images only within the same Region.&lt;/p&gt; &lt;p&gt;In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Before copying a shared image, be sure to verify that it has been shared from the correct Amazon Web Services account. To determine if an image has been shared and to see the ID of the Amazon Web Services account that owns an image, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html\&quot;&gt;DescribeWorkSpaceImages&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImagePermissions.html\&quot;&gt;DescribeWorkspaceImagePermissions&lt;/a&gt; API operations. &lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyWorkspaceImageTest() throws ApiException {
        String xAmzTarget = null;
        CopyWorkspaceImageRequest copyWorkspaceImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyWorkspaceImageResult response = api.copyWorkspaceImage(xAmzTarget, copyWorkspaceImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a client-add-in for Amazon Connect within a directory. You can create only one Amazon Connect client add-in within a directory.&lt;/p&gt; &lt;p&gt;This client add-in allows WorkSpaces users to seamlessly connect to Amazon Connect.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectClientAddInTest() throws ApiException {
        String xAmzTarget = null;
        CreateConnectClientAddInRequest createConnectClientAddInRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConnectClientAddInResult response = api.createConnectClientAddIn(xAmzTarget, createConnectClientAddInRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the specified connection alias for use with cross-Region redirection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectionAliasTest() throws ApiException {
        String xAmzTarget = null;
        CreateConnectionAliasRequest createConnectionAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConnectionAliasResult response = api.createConnectionAlias(xAmzTarget, createConnectionAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an IP access control group.&lt;/p&gt; &lt;p&gt;An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using &lt;a&gt;AuthorizeIpRules&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There is a default IP access control group associated with your directory. If you don&#39;t associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIpGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateIpGroupRequest createIpGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIpGroupResult response = api.createIpGroup(xAmzTarget, createIpGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a standby WorkSpace in a secondary Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStandbyWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        CreateStandbyWorkspacesRequest createStandbyWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStandbyWorkspacesResult response = api.createStandbyWorkspaces(xAmzTarget, createStandbyWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the specified tags for the specified WorkSpaces resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagsTest() throws ApiException {
        String xAmzTarget = null;
        CreateTagsRequest createTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createTags(xAmzTarget, createTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new updated WorkSpace image based on the specified source image. The new updated WorkSpace image has the latest drivers and other updates required by the Amazon WorkSpaces components.&lt;/p&gt; &lt;p&gt;To determine which WorkSpace images need to be updated with the latest Amazon WorkSpaces requirements, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html\&quot;&gt; DescribeWorkspaceImages&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only Windows 10, Windows Server 2016, and Windows Server 2019 WorkSpace images can be programmatically updated at this time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Microsoft Windows updates and other application updates are not included in the update process.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The source WorkSpace image is not deleted. You can delete the source image after you&#39;ve verified your new updated image and created a new bundle. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUpdatedWorkspaceImageTest() throws ApiException {
        String xAmzTarget = null;
        CreateUpdatedWorkspaceImageRequest createUpdatedWorkspaceImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUpdatedWorkspaceImageResult response = api.createUpdatedWorkspaceImage(xAmzTarget, createUpdatedWorkspaceImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html\&quot;&gt; Create a Custom WorkSpaces Image and Bundle&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkspaceBundleTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkspaceBundleRequest createWorkspaceBundleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkspaceBundleResult response = api.createWorkspaceBundle(xAmzTarget, createWorkspaceBundleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new WorkSpace image from an existing WorkSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkspaceImageTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkspaceImageRequest createWorkspaceImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkspaceImageResult response = api.createWorkspaceImage(xAmzTarget, createWorkspaceImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates one or more WorkSpaces.&lt;/p&gt; &lt;p&gt;This operation is asynchronous and returns before the WorkSpaces are created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;MANUAL&lt;/code&gt; running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/workspaces/core/\&quot;&gt;Amazon WorkSpaces Core&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkspacesRequest createWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkspacesResult response = api.createWorkspaces(xAmzTarget, createWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes customized client branding. Client branding allows you to customize your WorkSpace&#39;s client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.&lt;/p&gt; &lt;p&gt;After you delete your customized client branding, your login portal reverts to the default client branding.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClientBrandingTest() throws ApiException {
        String xAmzTarget = null;
        DeleteClientBrandingRequest deleteClientBrandingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteClientBranding(xAmzTarget, deleteClientBrandingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a client-add-in for Amazon Connect that is configured within a directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectClientAddInTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConnectClientAddInRequest deleteConnectClientAddInRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConnectClientAddIn(xAmzTarget, deleteConnectClientAddInRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified connection alias. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;If you will no longer be using a fully qualified domain name (FQDN) as the registration code for your WorkSpaces users, you must take certain precautions to prevent potential security issues.&lt;/b&gt; For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html#cross-region-redirection-security-considerations\&quot;&gt; Security Considerations if You Stop Using Cross-Region Redirection&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectionAliasTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConnectionAliasRequest deleteConnectionAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConnectionAlias(xAmzTarget, deleteConnectionAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified IP access control group.&lt;/p&gt; &lt;p&gt;You cannot delete an IP access control group that is associated with a directory.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIpGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteIpGroupRequest deleteIpGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteIpGroup(xAmzTarget, deleteIpGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified tags from the specified WorkSpaces resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTagsRequest deleteTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTags(xAmzTarget, deleteTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/delete_bundle.html\&quot;&gt; Delete a Custom WorkSpaces Bundle or Image&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkspaceBundleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWorkspaceBundleRequest deleteWorkspaceBundleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWorkspaceBundle(xAmzTarget, deleteWorkspaceBundleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and unshare the image if it is shared with other accounts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkspaceImageTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWorkspaceImageRequest deleteWorkspaceImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWorkspaceImage(xAmzTarget, deleteWorkspaceImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the &lt;a href&#x3D;\&quot;http://aws.amazon.com/directoryservice/pricing/\&quot;&gt;Directory Service pricing terms&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To delete empty directories, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html\&quot;&gt; Delete the Directory for Your WorkSpaces&lt;/a&gt;. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterWorkspaceDirectoryTest() throws ApiException {
        String xAmzTarget = null;
        DeregisterWorkspaceDirectoryRequest deregisterWorkspaceDirectoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterWorkspaceDirectory(xAmzTarget, deregisterWorkspaceDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountResult response = api.describeAccount(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountModificationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAccountModificationsRequest describeAccountModificationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountModificationsResult response = api.describeAccountModifications(xAmzTarget, describeAccountModificationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified client branding. Client branding allows you to customize the log in page of various device types for your users. You can add your company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only device types that have branding information configured will be shown in the response.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClientBrandingTest() throws ApiException {
        String xAmzTarget = null;
        DescribeClientBrandingRequest describeClientBrandingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClientBrandingResult response = api.describeClientBranding(xAmzTarget, describeClientBrandingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified Amazon WorkSpaces clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClientPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeClientPropertiesRequest describeClientPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClientPropertiesResult response = api.describeClientProperties(xAmzTarget, describeClientPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of Amazon Connect client add-ins that have been created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectClientAddInsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConnectClientAddInsRequest describeConnectClientAddInsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConnectClientAddInsResult response = api.describeConnectClientAddIns(xAmzTarget, describeConnectClientAddInsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the permissions that the owner of a connection alias has granted to another Amazon Web Services account for the specified connection alias. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectionAliasPermissionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConnectionAliasPermissionsRequest describeConnectionAliasPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConnectionAliasPermissionsResult response = api.describeConnectionAliasPermissions(xAmzTarget, describeConnectionAliasPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes the connection aliases used for cross-Region redirection. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectionAliasesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConnectionAliasesRequest describeConnectionAliasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConnectionAliasesResult response = api.describeConnectionAliases(xAmzTarget, describeConnectionAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes one or more of your IP access control groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeIpGroupsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeIpGroupsRequest describeIpGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeIpGroupsResult response = api.describeIpGroups(xAmzTarget, describeIpGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified tags for the specified WorkSpaces resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTagsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTagsRequest describeTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTagsResult response = api.describeTags(xAmzTarget, describeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list that describes the available WorkSpace bundles.&lt;/p&gt; &lt;p&gt;You can filter the results using either bundle ID or owner, but not both.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceBundlesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspaceBundlesRequest describeWorkspaceBundlesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        DescribeWorkspaceBundlesResult response = api.describeWorkspaceBundles(xAmzTarget, describeWorkspaceBundlesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the available directories that are registered with Amazon WorkSpaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceDirectoriesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspaceDirectoriesRequest describeWorkspaceDirectoriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        DescribeWorkspaceDirectoriesResult response = api.describeWorkspaceDirectories(xAmzTarget, describeWorkspaceDirectoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the permissions that the owner of an image has granted to other Amazon Web Services accounts for an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceImagePermissionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspaceImagePermissionsRequest describeWorkspaceImagePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceImagePermissionsResult response = api.describeWorkspaceImagePermissions(xAmzTarget, describeWorkspaceImagePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceImagesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspaceImagesRequest describeWorkspaceImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceImagesResult response = api.describeWorkspaceImages(xAmzTarget, describeWorkspaceImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the snapshots for the specified WorkSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspaceSnapshotsRequest describeWorkspaceSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceSnapshotsResult response = api.describeWorkspaceSnapshots(xAmzTarget, describeWorkspaceSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified WorkSpaces.&lt;/p&gt; &lt;p&gt;You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspacesRequest describeWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        DescribeWorkspacesResult response = api.describeWorkspaces(xAmzTarget, describeWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the connection status of the specified WorkSpaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspacesConnectionStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkspacesConnectionStatusRequest describeWorkspacesConnectionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspacesConnectionStatusResult response = api.describeWorkspacesConnectionStatus(xAmzTarget, describeWorkspacesConnectionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates a connection alias from a directory. Disassociating a connection alias disables cross-Region redirection between two directories in different Regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Before performing this operation, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html\&quot;&gt; DescribeConnectionAliases&lt;/a&gt; to make sure that the current state of the connection alias is &lt;code&gt;CREATED&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateConnectionAliasTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateConnectionAliasRequest disassociateConnectionAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateConnectionAlias(xAmzTarget, disassociateConnectionAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified IP access control group from the specified directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateIpGroupsTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateIpGroupsRequest disassociateIpGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateIpGroups(xAmzTarget, disassociateIpGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Imports client branding. Client branding allows you to customize your WorkSpace&#39;s client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.&lt;/p&gt; &lt;p&gt;After you import client branding, the default branding experience for the specified platform type is replaced with the imported experience&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must specify at least one platform type when importing client branding.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can import up to 6 MB of data with each request. If your request exceeds this limit, you can import client branding for different platform types using separate requests.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In each platform type, the &lt;code&gt;SupportEmail&lt;/code&gt; and &lt;code&gt;SupportLink&lt;/code&gt; parameters are mutually exclusive. You can specify only one parameter for each platform type, but not both.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Imported data can take up to a minute to appear in the WorkSpaces client.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importClientBrandingTest() throws ApiException {
        String xAmzTarget = null;
        ImportClientBrandingRequest importClientBrandingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportClientBrandingResult response = api.importClientBranding(xAmzTarget, importClientBrandingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports the specified Windows 10 or 11 Bring Your Own License (BYOL) image into Amazon WorkSpaces. The image must be an already licensed Amazon EC2 image that is in your Amazon Web Services account, and you must own the image. For more information about creating BYOL images, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html\&quot;&gt; Bring Your Own Windows Desktop Licenses&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importWorkspaceImageTest() throws ApiException {
        String xAmzTarget = null;
        ImportWorkspaceImageRequest importWorkspaceImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportWorkspaceImageResult response = api.importWorkspaceImage(xAmzTarget, importWorkspaceImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL). &lt;/p&gt; &lt;p&gt;This operation can be run only by Amazon Web Services accounts that are enabled for BYOL. If your account isn&#39;t enabled for BYOL, you&#39;ll receive an &lt;code&gt;AccessDeniedException&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableManagementCidrRangesTest() throws ApiException {
        String xAmzTarget = null;
        ListAvailableManagementCidrRangesRequest listAvailableManagementCidrRangesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAvailableManagementCidrRangesResult response = api.listAvailableManagementCidrRanges(xAmzTarget, listAvailableManagementCidrRangesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume.&lt;/p&gt; &lt;p&gt;The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original &lt;code&gt;D:\\Users\\%USERNAME%&lt;/code&gt; user profile folder is renamed to &lt;code&gt;D:\\Users\\%USERNAME%MMddyyTHHmmss%.NotMigrated&lt;/code&gt;. A new &lt;code&gt;D:\\Users\\%USERNAME%\\&lt;/code&gt; folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile.&lt;/p&gt; &lt;p&gt;For available migration scenarios, details about what happens during migration, and best practices, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html\&quot;&gt;Migrate a WorkSpace&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateWorkspaceTest() throws ApiException {
        String xAmzTarget = null;
        MigrateWorkspaceRequest migrateWorkspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MigrateWorkspaceResult response = api.migrateWorkspace(xAmzTarget, migrateWorkspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the configuration of Bring Your Own License (BYOL) for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyAccountTest() throws ApiException {
        String xAmzTarget = null;
        ModifyAccountRequest modifyAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyAccount(xAmzTarget, modifyAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the properties of the certificate-based authentication you want to use with your WorkSpaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyCertificateBasedAuthPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        ModifyCertificateBasedAuthPropertiesRequest modifyCertificateBasedAuthPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyCertificateBasedAuthProperties(xAmzTarget, modifyCertificateBasedAuthPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the properties of the specified Amazon WorkSpaces clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyClientPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        ModifyClientPropertiesRequest modifyClientPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyClientProperties(xAmzTarget, modifyClientPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies multiple properties related to SAML 2.0 authentication, including the enablement status, user access URL, and relay state parameter name that are used for configuring federation with an SAML 2.0 identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySamlPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        ModifySamlPropertiesRequest modifySamlPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifySamlProperties(xAmzTarget, modifySamlPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the self-service WorkSpace management capabilities for your users. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html\&quot;&gt;Enable Self-Service WorkSpace Management Capabilities for Your Users&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifySelfservicePermissionsTest() throws ApiException {
        String xAmzTarget = null;
        ModifySelfservicePermissionsRequest modifySelfservicePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifySelfservicePermissions(xAmzTarget, modifySelfservicePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access\&quot;&gt; Control Device Access&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyWorkspaceAccessPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        ModifyWorkspaceAccessPropertiesRequest modifyWorkspaceAccessPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyWorkspaceAccessProperties(xAmzTarget, modifyWorkspaceAccessPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modify the default properties used to create WorkSpaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyWorkspaceCreationPropertiesTest() throws ApiException {
        String xAmzTarget = null;
        ModifyWorkspaceCreationPropertiesRequest modifyWorkspaceCreationPropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyWorkspaceCreationProperties(xAmzTarget, modifyWorkspaceCreationPropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the specified WorkSpace properties. For important information about how to modify the size of the root and user volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html\&quot;&gt; Modify a WorkSpace&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;MANUAL&lt;/code&gt; running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/workspaces/core/\&quot;&gt;Amazon WorkSpaces Core&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyWorkspacePropertiesTest() throws ApiException {
        String xAmzTarget = null;
        ModifyWorkspacePropertiesRequest modifyWorkspacePropertiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyWorkspaceProperties(xAmzTarget, modifyWorkspacePropertiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the state of the specified WorkSpace.&lt;/p&gt; &lt;p&gt;To maintain a WorkSpace without being interrupted, set the WorkSpace state to &lt;code&gt;ADMIN_MAINTENANCE&lt;/code&gt;. WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the &lt;code&gt;ADMIN_MAINTENANCE&lt;/code&gt; state.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyWorkspaceStateTest() throws ApiException {
        String xAmzTarget = null;
        ModifyWorkspaceStateRequest modifyWorkspaceStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.modifyWorkspaceState(xAmzTarget, modifyWorkspaceStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Reboots the specified WorkSpaces.&lt;/p&gt; &lt;p&gt;You cannot reboot a WorkSpace unless its state is &lt;code&gt;AVAILABLE&lt;/code&gt; or &lt;code&gt;UNHEALTHY&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation is asynchronous and returns before the WorkSpaces have rebooted.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        RebootWorkspacesRequest rebootWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootWorkspacesResult response = api.rebootWorkspaces(xAmzTarget, rebootWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Rebuilds the specified WorkSpace.&lt;/p&gt; &lt;p&gt;You cannot rebuild a WorkSpace unless its state is &lt;code&gt;AVAILABLE&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;UNHEALTHY&lt;/code&gt;, &lt;code&gt;STOPPED&lt;/code&gt;, or &lt;code&gt;REBOOTING&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html\&quot;&gt;Rebuild a WorkSpace&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebuildWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        RebuildWorkspacesRequest rebuildWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebuildWorkspacesResult response = api.rebuildWorkspaces(xAmzTarget, rebuildWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role\&quot;&gt; Creating the workspaces_DefaultRole Role&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerWorkspaceDirectoryTest() throws ApiException {
        String xAmzTarget = null;
        RegisterWorkspaceDirectoryRequest registerWorkspaceDirectoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerWorkspaceDirectory(xAmzTarget, registerWorkspaceDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Restores the specified WorkSpace to its last known healthy state.&lt;/p&gt; &lt;p&gt;You cannot restore a WorkSpace unless its state is &lt;code&gt; AVAILABLE&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;UNHEALTHY&lt;/code&gt;, or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html\&quot;&gt;Restore a WorkSpace&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This operation is asynchronous and returns before the WorkSpace is completely restored.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreWorkspaceTest() throws ApiException {
        String xAmzTarget = null;
        RestoreWorkspaceRequest restoreWorkspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.restoreWorkspace(xAmzTarget, restoreWorkspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more rules from the specified IP access control group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeIpRulesTest() throws ApiException {
        String xAmzTarget = null;
        RevokeIpRulesRequest revokeIpRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.revokeIpRules(xAmzTarget, revokeIpRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts the specified WorkSpaces.&lt;/p&gt; &lt;p&gt;You cannot start a WorkSpace unless it has a running mode of &lt;code&gt;AutoStop&lt;/code&gt; and a state of &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        StartWorkspacesRequest startWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartWorkspacesResult response = api.startWorkspaces(xAmzTarget, startWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Stops the specified WorkSpaces.&lt;/p&gt; &lt;p&gt;You cannot stop a WorkSpace unless it has a running mode of &lt;code&gt;AutoStop&lt;/code&gt; and a state of &lt;code&gt;AVAILABLE&lt;/code&gt;, &lt;code&gt;IMPAIRED&lt;/code&gt;, &lt;code&gt;UNHEALTHY&lt;/code&gt;, or &lt;code&gt;ERROR&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        StopWorkspacesRequest stopWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopWorkspacesResult response = api.stopWorkspaces(xAmzTarget, stopWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Terminates the specified WorkSpaces.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Terminating a WorkSpace is a permanent action and cannot be undone. The user&#39;s data is destroyed. If you need to archive any user data, contact Amazon Web Services Support before terminating the WorkSpace.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can terminate a WorkSpace that is in any state except &lt;code&gt;SUSPENDED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation is asynchronous and returns before the WorkSpaces have been completely terminated. After a WorkSpace is terminated, the &lt;code&gt;TERMINATED&lt;/code&gt; state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html\&quot;&gt; DescribeWorkSpaces&lt;/a&gt;. If the WorkSpace ID isn&#39;t returned, then the WorkSpace has been successfully terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the &lt;a href&#x3D;\&quot;http://aws.amazon.com/directoryservice/pricing/\&quot;&gt;Directory Service pricing terms&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To delete empty directories, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html\&quot;&gt; Delete the Directory for Your WorkSpaces&lt;/a&gt;. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateWorkspacesTest() throws ApiException {
        String xAmzTarget = null;
        TerminateWorkspacesRequest terminateWorkspacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TerminateWorkspacesResult response = api.terminateWorkspaces(xAmzTarget, terminateWorkspacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a Amazon Connect client add-in. Use this action to update the name and endpoint URL of a Amazon Connect client add-in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectClientAddInTest() throws ApiException {
        String xAmzTarget = null;
        UpdateConnectClientAddInRequest updateConnectClientAddInRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateConnectClientAddIn(xAmzTarget, updateConnectClientAddInRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Shares or unshares a connection alias with one account by specifying whether that account has permission to associate the connection alias with a directory. If the association permission is granted, the connection alias is shared with that account. If the association permission is revoked, the connection alias is unshared with the account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html\&quot;&gt; Cross-Region Redirection for Amazon WorkSpaces&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Before performing this operation, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html\&quot;&gt; DescribeConnectionAliases&lt;/a&gt; to make sure that the current state of the connection alias is &lt;code&gt;CREATED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectionAliasPermissionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateConnectionAliasPermissionRequest updateConnectionAliasPermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateConnectionAliasPermission(xAmzTarget, updateConnectionAliasPermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Replaces the current rules of the specified IP access control group with the specified rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRulesOfIpGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRulesOfIpGroupRequest updateRulesOfIpGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateRulesOfIpGroup(xAmzTarget, updateRulesOfIpGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/update-custom-bundle.html\&quot;&gt; Update a Custom WorkSpaces Bundle&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Existing WorkSpaces aren&#39;t automatically updated when you update the bundle that they&#39;re based on. To update existing WorkSpaces that are based on a bundle that you&#39;ve updated, you must either rebuild the WorkSpaces or delete and recreate them.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceBundleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWorkspaceBundleRequest updateWorkspaceBundleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateWorkspaceBundle(xAmzTarget, updateWorkspaceBundleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Shares or unshares an image with one account in the same Amazon Web Services Region by specifying whether that account has permission to copy the image. If the copy image permission is granted, the image is shared with that account. If the copy image permission is revoked, the image is unshared with the account.&lt;/p&gt; &lt;p&gt;After an image has been shared, the recipient account can copy the image to other Regions as needed.&lt;/p&gt; &lt;p&gt;In the China (Ningxia) Region, you can copy images only within the same Region.&lt;/p&gt; &lt;p&gt;In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.&lt;/p&gt; &lt;p&gt;For more information about sharing images, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html\&quot;&gt; Share or Unshare a Custom WorkSpaces Image&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To delete an image that has been shared, you must unshare the image before you delete it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Sharing Bring Your Own License (BYOL) images across Amazon Web Services accounts isn&#39;t supported at this time in Amazon Web Services GovCloud (US). To share BYOL images across accounts in Amazon Web Services GovCloud (US), contact Amazon Web Services Support.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceImagePermissionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWorkspaceImagePermissionRequest updateWorkspaceImagePermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateWorkspaceImagePermission(xAmzTarget, updateWorkspaceImagePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
