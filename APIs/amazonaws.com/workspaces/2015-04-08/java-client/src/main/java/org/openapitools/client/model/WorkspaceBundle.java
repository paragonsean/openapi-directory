/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BundleType;
import org.openapitools.client.model.WorkspaceBundleComputeType;
import org.openapitools.client.model.WorkspaceBundleRootStorage;
import org.openapitools.client.model.WorkspaceBundleState;
import org.openapitools.client.model.WorkspaceBundleUserStorage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a WorkSpace bundle.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:52.076650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceBundle {
  public static final String SERIALIZED_NAME_BUNDLE_ID = "BundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMAGE_ID = "ImageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_ROOT_STORAGE = "RootStorage";
  @SerializedName(SERIALIZED_NAME_ROOT_STORAGE)
  private WorkspaceBundleRootStorage rootStorage;

  public static final String SERIALIZED_NAME_USER_STORAGE = "UserStorage";
  @SerializedName(SERIALIZED_NAME_USER_STORAGE)
  private WorkspaceBundleUserStorage userStorage;

  public static final String SERIALIZED_NAME_COMPUTE_TYPE = "ComputeType";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE)
  private WorkspaceBundleComputeType computeType;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private WorkspaceBundleState state;

  public static final String SERIALIZED_NAME_BUNDLE_TYPE = "BundleType";
  @SerializedName(SERIALIZED_NAME_BUNDLE_TYPE)
  private BundleType bundleType;

  public WorkspaceBundle() {
  }

  public WorkspaceBundle bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public WorkspaceBundle name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkspaceBundle owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public WorkspaceBundle description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WorkspaceBundle imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public WorkspaceBundle rootStorage(WorkspaceBundleRootStorage rootStorage) {
    this.rootStorage = rootStorage;
    return this;
  }

  /**
   * Get rootStorage
   * @return rootStorage
   */
  @javax.annotation.Nullable
  public WorkspaceBundleRootStorage getRootStorage() {
    return rootStorage;
  }

  public void setRootStorage(WorkspaceBundleRootStorage rootStorage) {
    this.rootStorage = rootStorage;
  }


  public WorkspaceBundle userStorage(WorkspaceBundleUserStorage userStorage) {
    this.userStorage = userStorage;
    return this;
  }

  /**
   * Get userStorage
   * @return userStorage
   */
  @javax.annotation.Nullable
  public WorkspaceBundleUserStorage getUserStorage() {
    return userStorage;
  }

  public void setUserStorage(WorkspaceBundleUserStorage userStorage) {
    this.userStorage = userStorage;
  }


  public WorkspaceBundle computeType(WorkspaceBundleComputeType computeType) {
    this.computeType = computeType;
    return this;
  }

  /**
   * Get computeType
   * @return computeType
   */
  @javax.annotation.Nullable
  public WorkspaceBundleComputeType getComputeType() {
    return computeType;
  }

  public void setComputeType(WorkspaceBundleComputeType computeType) {
    this.computeType = computeType;
  }


  public WorkspaceBundle lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public WorkspaceBundle creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public WorkspaceBundle state(WorkspaceBundleState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public WorkspaceBundleState getState() {
    return state;
  }

  public void setState(WorkspaceBundleState state) {
    this.state = state;
  }


  public WorkspaceBundle bundleType(BundleType bundleType) {
    this.bundleType = bundleType;
    return this;
  }

  /**
   * Get bundleType
   * @return bundleType
   */
  @javax.annotation.Nullable
  public BundleType getBundleType() {
    return bundleType;
  }

  public void setBundleType(BundleType bundleType) {
    this.bundleType = bundleType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceBundle workspaceBundle = (WorkspaceBundle) o;
    return Objects.equals(this.bundleId, workspaceBundle.bundleId) &&
        Objects.equals(this.name, workspaceBundle.name) &&
        Objects.equals(this.owner, workspaceBundle.owner) &&
        Objects.equals(this.description, workspaceBundle.description) &&
        Objects.equals(this.imageId, workspaceBundle.imageId) &&
        Objects.equals(this.rootStorage, workspaceBundle.rootStorage) &&
        Objects.equals(this.userStorage, workspaceBundle.userStorage) &&
        Objects.equals(this.computeType, workspaceBundle.computeType) &&
        Objects.equals(this.lastUpdatedTime, workspaceBundle.lastUpdatedTime) &&
        Objects.equals(this.creationTime, workspaceBundle.creationTime) &&
        Objects.equals(this.state, workspaceBundle.state) &&
        Objects.equals(this.bundleType, workspaceBundle.bundleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleId, name, owner, description, imageId, rootStorage, userStorage, computeType, lastUpdatedTime, creationTime, state, bundleType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceBundle {\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    rootStorage: ").append(toIndentedString(rootStorage)).append("\n");
    sb.append("    userStorage: ").append(toIndentedString(userStorage)).append("\n");
    sb.append("    computeType: ").append(toIndentedString(computeType)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    bundleType: ").append(toIndentedString(bundleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BundleId");
    openapiFields.add("Name");
    openapiFields.add("Owner");
    openapiFields.add("Description");
    openapiFields.add("ImageId");
    openapiFields.add("RootStorage");
    openapiFields.add("UserStorage");
    openapiFields.add("ComputeType");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("CreationTime");
    openapiFields.add("State");
    openapiFields.add("BundleType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceBundle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceBundle is not found in the empty JSON string", WorkspaceBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BundleId`
      if (jsonObj.get("BundleId") != null && !jsonObj.get("BundleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BundleId"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ImageId`
      if (jsonObj.get("ImageId") != null && !jsonObj.get("ImageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageId"));
      }
      // validate the optional field `RootStorage`
      if (jsonObj.get("RootStorage") != null && !jsonObj.get("RootStorage").isJsonNull()) {
        WorkspaceBundleRootStorage.validateJsonElement(jsonObj.get("RootStorage"));
      }
      // validate the optional field `UserStorage`
      if (jsonObj.get("UserStorage") != null && !jsonObj.get("UserStorage").isJsonNull()) {
        WorkspaceBundleUserStorage.validateJsonElement(jsonObj.get("UserStorage"));
      }
      // validate the optional field `ComputeType`
      if (jsonObj.get("ComputeType") != null && !jsonObj.get("ComputeType").isJsonNull()) {
        WorkspaceBundleComputeType.validateJsonElement(jsonObj.get("ComputeType"));
      }
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        WorkspaceBundleState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `BundleType`
      if (jsonObj.get("BundleType") != null && !jsonObj.get("BundleType").isJsonNull()) {
        BundleType.validateJsonElement(jsonObj.get("BundleType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceBundle>() {
           @Override
           public void write(JsonWriter out, WorkspaceBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceBundle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceBundle
   * @throws IOException if the JSON string is invalid with respect to WorkspaceBundle
   */
  public static WorkspaceBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceBundle.class);
  }

  /**
   * Convert an instance of WorkspaceBundle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

