/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportClientBrandingRequestDeviceTypeIos
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:52.076650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportClientBrandingRequestDeviceTypeIos {
  public static final String SERIALIZED_NAME_LOGO = "Logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_LOGO2X = "Logo2x";
  @SerializedName(SERIALIZED_NAME_LOGO2X)
  private String logo2x;

  public static final String SERIALIZED_NAME_LOGO3X = "Logo3x";
  @SerializedName(SERIALIZED_NAME_LOGO3X)
  private String logo3x;

  public static final String SERIALIZED_NAME_SUPPORT_EMAIL = "SupportEmail";
  @SerializedName(SERIALIZED_NAME_SUPPORT_EMAIL)
  private String supportEmail;

  public static final String SERIALIZED_NAME_SUPPORT_LINK = "SupportLink";
  @SerializedName(SERIALIZED_NAME_SUPPORT_LINK)
  private String supportLink;

  public static final String SERIALIZED_NAME_FORGOT_PASSWORD_LINK = "ForgotPasswordLink";
  @SerializedName(SERIALIZED_NAME_FORGOT_PASSWORD_LINK)
  private String forgotPasswordLink;

  public static final String SERIALIZED_NAME_LOGIN_MESSAGE = "LoginMessage";
  @SerializedName(SERIALIZED_NAME_LOGIN_MESSAGE)
  private Map loginMessage;

  public ImportClientBrandingRequestDeviceTypeIos() {
  }

  public ImportClientBrandingRequestDeviceTypeIos logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public ImportClientBrandingRequestDeviceTypeIos logo2x(String logo2x) {
    this.logo2x = logo2x;
    return this;
  }

  /**
   * Get logo2x
   * @return logo2x
   */
  @javax.annotation.Nullable
  public String getLogo2x() {
    return logo2x;
  }

  public void setLogo2x(String logo2x) {
    this.logo2x = logo2x;
  }


  public ImportClientBrandingRequestDeviceTypeIos logo3x(String logo3x) {
    this.logo3x = logo3x;
    return this;
  }

  /**
   * Get logo3x
   * @return logo3x
   */
  @javax.annotation.Nullable
  public String getLogo3x() {
    return logo3x;
  }

  public void setLogo3x(String logo3x) {
    this.logo3x = logo3x;
  }


  public ImportClientBrandingRequestDeviceTypeIos supportEmail(String supportEmail) {
    this.supportEmail = supportEmail;
    return this;
  }

  /**
   * Get supportEmail
   * @return supportEmail
   */
  @javax.annotation.Nullable
  public String getSupportEmail() {
    return supportEmail;
  }

  public void setSupportEmail(String supportEmail) {
    this.supportEmail = supportEmail;
  }


  public ImportClientBrandingRequestDeviceTypeIos supportLink(String supportLink) {
    this.supportLink = supportLink;
    return this;
  }

  /**
   * Get supportLink
   * @return supportLink
   */
  @javax.annotation.Nullable
  public String getSupportLink() {
    return supportLink;
  }

  public void setSupportLink(String supportLink) {
    this.supportLink = supportLink;
  }


  public ImportClientBrandingRequestDeviceTypeIos forgotPasswordLink(String forgotPasswordLink) {
    this.forgotPasswordLink = forgotPasswordLink;
    return this;
  }

  /**
   * Get forgotPasswordLink
   * @return forgotPasswordLink
   */
  @javax.annotation.Nullable
  public String getForgotPasswordLink() {
    return forgotPasswordLink;
  }

  public void setForgotPasswordLink(String forgotPasswordLink) {
    this.forgotPasswordLink = forgotPasswordLink;
  }


  public ImportClientBrandingRequestDeviceTypeIos loginMessage(Map loginMessage) {
    this.loginMessage = loginMessage;
    return this;
  }

  /**
   * Get loginMessage
   * @return loginMessage
   */
  @javax.annotation.Nullable
  public Map getLoginMessage() {
    return loginMessage;
  }

  public void setLoginMessage(Map loginMessage) {
    this.loginMessage = loginMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportClientBrandingRequestDeviceTypeIos importClientBrandingRequestDeviceTypeIos = (ImportClientBrandingRequestDeviceTypeIos) o;
    return Objects.equals(this.logo, importClientBrandingRequestDeviceTypeIos.logo) &&
        Objects.equals(this.logo2x, importClientBrandingRequestDeviceTypeIos.logo2x) &&
        Objects.equals(this.logo3x, importClientBrandingRequestDeviceTypeIos.logo3x) &&
        Objects.equals(this.supportEmail, importClientBrandingRequestDeviceTypeIos.supportEmail) &&
        Objects.equals(this.supportLink, importClientBrandingRequestDeviceTypeIos.supportLink) &&
        Objects.equals(this.forgotPasswordLink, importClientBrandingRequestDeviceTypeIos.forgotPasswordLink) &&
        Objects.equals(this.loginMessage, importClientBrandingRequestDeviceTypeIos.loginMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logo, logo2x, logo3x, supportEmail, supportLink, forgotPasswordLink, loginMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportClientBrandingRequestDeviceTypeIos {\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    logo2x: ").append(toIndentedString(logo2x)).append("\n");
    sb.append("    logo3x: ").append(toIndentedString(logo3x)).append("\n");
    sb.append("    supportEmail: ").append(toIndentedString(supportEmail)).append("\n");
    sb.append("    supportLink: ").append(toIndentedString(supportLink)).append("\n");
    sb.append("    forgotPasswordLink: ").append(toIndentedString(forgotPasswordLink)).append("\n");
    sb.append("    loginMessage: ").append(toIndentedString(loginMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Logo");
    openapiFields.add("Logo2x");
    openapiFields.add("Logo3x");
    openapiFields.add("SupportEmail");
    openapiFields.add("SupportLink");
    openapiFields.add("ForgotPasswordLink");
    openapiFields.add("LoginMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportClientBrandingRequestDeviceTypeIos
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportClientBrandingRequestDeviceTypeIos.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportClientBrandingRequestDeviceTypeIos is not found in the empty JSON string", ImportClientBrandingRequestDeviceTypeIos.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportClientBrandingRequestDeviceTypeIos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportClientBrandingRequestDeviceTypeIos` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Logo`
      if (jsonObj.get("Logo") != null && !jsonObj.get("Logo").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Logo"));
      }
      // validate the optional field `Logo2x`
      if (jsonObj.get("Logo2x") != null && !jsonObj.get("Logo2x").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Logo2x"));
      }
      // validate the optional field `Logo3x`
      if (jsonObj.get("Logo3x") != null && !jsonObj.get("Logo3x").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Logo3x"));
      }
      // validate the optional field `SupportEmail`
      if (jsonObj.get("SupportEmail") != null && !jsonObj.get("SupportEmail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SupportEmail"));
      }
      // validate the optional field `SupportLink`
      if (jsonObj.get("SupportLink") != null && !jsonObj.get("SupportLink").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SupportLink"));
      }
      // validate the optional field `ForgotPasswordLink`
      if (jsonObj.get("ForgotPasswordLink") != null && !jsonObj.get("ForgotPasswordLink").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ForgotPasswordLink"));
      }
      // validate the optional field `LoginMessage`
      if (jsonObj.get("LoginMessage") != null && !jsonObj.get("LoginMessage").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("LoginMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportClientBrandingRequestDeviceTypeIos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportClientBrandingRequestDeviceTypeIos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportClientBrandingRequestDeviceTypeIos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportClientBrandingRequestDeviceTypeIos.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportClientBrandingRequestDeviceTypeIos>() {
           @Override
           public void write(JsonWriter out, ImportClientBrandingRequestDeviceTypeIos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportClientBrandingRequestDeviceTypeIos read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportClientBrandingRequestDeviceTypeIos given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportClientBrandingRequestDeviceTypeIos
   * @throws IOException if the JSON string is invalid with respect to ImportClientBrandingRequestDeviceTypeIos
   */
  public static ImportClientBrandingRequestDeviceTypeIos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportClientBrandingRequestDeviceTypeIos.class);
  }

  /**
   * Convert an instance of ImportClientBrandingRequestDeviceTypeIos to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

