/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WorkspaceRequestWorkspaceProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FailedCreateWorkspaceRequestWorkspaceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:52.076650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailedCreateWorkspaceRequestWorkspaceRequest {
  public static final String SERIALIZED_NAME_DIRECTORY_ID = "DirectoryId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ID)
  private String directoryId;

  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "BundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_VOLUME_ENCRYPTION_KEY = "VolumeEncryptionKey";
  @SerializedName(SERIALIZED_NAME_VOLUME_ENCRYPTION_KEY)
  private String volumeEncryptionKey;

  public static final String SERIALIZED_NAME_USER_VOLUME_ENCRYPTION_ENABLED = "UserVolumeEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_USER_VOLUME_ENCRYPTION_ENABLED)
  private Boolean userVolumeEncryptionEnabled;

  public static final String SERIALIZED_NAME_ROOT_VOLUME_ENCRYPTION_ENABLED = "RootVolumeEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_ROOT_VOLUME_ENCRYPTION_ENABLED)
  private Boolean rootVolumeEncryptionEnabled;

  public static final String SERIALIZED_NAME_WORKSPACE_PROPERTIES = "WorkspaceProperties";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_PROPERTIES)
  private WorkspaceRequestWorkspaceProperties workspaceProperties;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public FailedCreateWorkspaceRequestWorkspaceRequest() {
  }

  public FailedCreateWorkspaceRequestWorkspaceRequest directoryId(String directoryId) {
    this.directoryId = directoryId;
    return this;
  }

  /**
   * Get directoryId
   * @return directoryId
   */
  @javax.annotation.Nonnull
  public String getDirectoryId() {
    return directoryId;
  }

  public void setDirectoryId(String directoryId) {
    this.directoryId = directoryId;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nonnull
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest volumeEncryptionKey(String volumeEncryptionKey) {
    this.volumeEncryptionKey = volumeEncryptionKey;
    return this;
  }

  /**
   * Get volumeEncryptionKey
   * @return volumeEncryptionKey
   */
  @javax.annotation.Nullable
  public String getVolumeEncryptionKey() {
    return volumeEncryptionKey;
  }

  public void setVolumeEncryptionKey(String volumeEncryptionKey) {
    this.volumeEncryptionKey = volumeEncryptionKey;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest userVolumeEncryptionEnabled(Boolean userVolumeEncryptionEnabled) {
    this.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled;
    return this;
  }

  /**
   * Get userVolumeEncryptionEnabled
   * @return userVolumeEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getUserVolumeEncryptionEnabled() {
    return userVolumeEncryptionEnabled;
  }

  public void setUserVolumeEncryptionEnabled(Boolean userVolumeEncryptionEnabled) {
    this.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest rootVolumeEncryptionEnabled(Boolean rootVolumeEncryptionEnabled) {
    this.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled;
    return this;
  }

  /**
   * Get rootVolumeEncryptionEnabled
   * @return rootVolumeEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRootVolumeEncryptionEnabled() {
    return rootVolumeEncryptionEnabled;
  }

  public void setRootVolumeEncryptionEnabled(Boolean rootVolumeEncryptionEnabled) {
    this.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest workspaceProperties(WorkspaceRequestWorkspaceProperties workspaceProperties) {
    this.workspaceProperties = workspaceProperties;
    return this;
  }

  /**
   * Get workspaceProperties
   * @return workspaceProperties
   */
  @javax.annotation.Nullable
  public WorkspaceRequestWorkspaceProperties getWorkspaceProperties() {
    return workspaceProperties;
  }

  public void setWorkspaceProperties(WorkspaceRequestWorkspaceProperties workspaceProperties) {
    this.workspaceProperties = workspaceProperties;
  }


  public FailedCreateWorkspaceRequestWorkspaceRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailedCreateWorkspaceRequestWorkspaceRequest failedCreateWorkspaceRequestWorkspaceRequest = (FailedCreateWorkspaceRequestWorkspaceRequest) o;
    return Objects.equals(this.directoryId, failedCreateWorkspaceRequestWorkspaceRequest.directoryId) &&
        Objects.equals(this.userName, failedCreateWorkspaceRequestWorkspaceRequest.userName) &&
        Objects.equals(this.bundleId, failedCreateWorkspaceRequestWorkspaceRequest.bundleId) &&
        Objects.equals(this.volumeEncryptionKey, failedCreateWorkspaceRequestWorkspaceRequest.volumeEncryptionKey) &&
        Objects.equals(this.userVolumeEncryptionEnabled, failedCreateWorkspaceRequestWorkspaceRequest.userVolumeEncryptionEnabled) &&
        Objects.equals(this.rootVolumeEncryptionEnabled, failedCreateWorkspaceRequestWorkspaceRequest.rootVolumeEncryptionEnabled) &&
        Objects.equals(this.workspaceProperties, failedCreateWorkspaceRequestWorkspaceRequest.workspaceProperties) &&
        Objects.equals(this.tags, failedCreateWorkspaceRequestWorkspaceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directoryId, userName, bundleId, volumeEncryptionKey, userVolumeEncryptionEnabled, rootVolumeEncryptionEnabled, workspaceProperties, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailedCreateWorkspaceRequestWorkspaceRequest {\n");
    sb.append("    directoryId: ").append(toIndentedString(directoryId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    volumeEncryptionKey: ").append(toIndentedString(volumeEncryptionKey)).append("\n");
    sb.append("    userVolumeEncryptionEnabled: ").append(toIndentedString(userVolumeEncryptionEnabled)).append("\n");
    sb.append("    rootVolumeEncryptionEnabled: ").append(toIndentedString(rootVolumeEncryptionEnabled)).append("\n");
    sb.append("    workspaceProperties: ").append(toIndentedString(workspaceProperties)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DirectoryId");
    openapiFields.add("UserName");
    openapiFields.add("BundleId");
    openapiFields.add("VolumeEncryptionKey");
    openapiFields.add("UserVolumeEncryptionEnabled");
    openapiFields.add("RootVolumeEncryptionEnabled");
    openapiFields.add("WorkspaceProperties");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DirectoryId");
    openapiRequiredFields.add("UserName");
    openapiRequiredFields.add("BundleId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailedCreateWorkspaceRequestWorkspaceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailedCreateWorkspaceRequestWorkspaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailedCreateWorkspaceRequestWorkspaceRequest is not found in the empty JSON string", FailedCreateWorkspaceRequestWorkspaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailedCreateWorkspaceRequestWorkspaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailedCreateWorkspaceRequestWorkspaceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FailedCreateWorkspaceRequestWorkspaceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DirectoryId`
      String.validateJsonElement(jsonObj.get("DirectoryId"));
      // validate the required field `UserName`
      String.validateJsonElement(jsonObj.get("UserName"));
      // validate the required field `BundleId`
      String.validateJsonElement(jsonObj.get("BundleId"));
      // validate the optional field `VolumeEncryptionKey`
      if (jsonObj.get("VolumeEncryptionKey") != null && !jsonObj.get("VolumeEncryptionKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeEncryptionKey"));
      }
      // validate the optional field `UserVolumeEncryptionEnabled`
      if (jsonObj.get("UserVolumeEncryptionEnabled") != null && !jsonObj.get("UserVolumeEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UserVolumeEncryptionEnabled"));
      }
      // validate the optional field `RootVolumeEncryptionEnabled`
      if (jsonObj.get("RootVolumeEncryptionEnabled") != null && !jsonObj.get("RootVolumeEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RootVolumeEncryptionEnabled"));
      }
      // validate the optional field `WorkspaceProperties`
      if (jsonObj.get("WorkspaceProperties") != null && !jsonObj.get("WorkspaceProperties").isJsonNull()) {
        WorkspaceRequestWorkspaceProperties.validateJsonElement(jsonObj.get("WorkspaceProperties"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailedCreateWorkspaceRequestWorkspaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailedCreateWorkspaceRequestWorkspaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailedCreateWorkspaceRequestWorkspaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailedCreateWorkspaceRequestWorkspaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FailedCreateWorkspaceRequestWorkspaceRequest>() {
           @Override
           public void write(JsonWriter out, FailedCreateWorkspaceRequestWorkspaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailedCreateWorkspaceRequestWorkspaceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailedCreateWorkspaceRequestWorkspaceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailedCreateWorkspaceRequestWorkspaceRequest
   * @throws IOException if the JSON string is invalid with respect to FailedCreateWorkspaceRequestWorkspaceRequest
   */
  public static FailedCreateWorkspaceRequestWorkspaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailedCreateWorkspaceRequestWorkspaceRequest.class);
  }

  /**
   * Convert an instance of FailedCreateWorkspaceRequestWorkspaceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

