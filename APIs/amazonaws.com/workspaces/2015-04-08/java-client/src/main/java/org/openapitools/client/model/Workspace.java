/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModifyWorkspacePropertiesRequestWorkspaceProperties;
import org.openapitools.client.model.WorkspaceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a WorkSpace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:52.076650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Workspace {
  public static final String SERIALIZED_NAME_WORKSPACE_ID = "WorkspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public static final String SERIALIZED_NAME_DIRECTORY_ID = "DirectoryId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ID)
  private String directoryId;

  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private WorkspaceState state;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "BundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_COMPUTER_NAME = "ComputerName";
  @SerializedName(SERIALIZED_NAME_COMPUTER_NAME)
  private String computerName;

  public static final String SERIALIZED_NAME_VOLUME_ENCRYPTION_KEY = "VolumeEncryptionKey";
  @SerializedName(SERIALIZED_NAME_VOLUME_ENCRYPTION_KEY)
  private String volumeEncryptionKey;

  public static final String SERIALIZED_NAME_USER_VOLUME_ENCRYPTION_ENABLED = "UserVolumeEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_USER_VOLUME_ENCRYPTION_ENABLED)
  private Boolean userVolumeEncryptionEnabled;

  public static final String SERIALIZED_NAME_ROOT_VOLUME_ENCRYPTION_ENABLED = "RootVolumeEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_ROOT_VOLUME_ENCRYPTION_ENABLED)
  private Boolean rootVolumeEncryptionEnabled;

  public static final String SERIALIZED_NAME_WORKSPACE_PROPERTIES = "WorkspaceProperties";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_PROPERTIES)
  private ModifyWorkspacePropertiesRequestWorkspaceProperties workspaceProperties;

  public static final String SERIALIZED_NAME_MODIFICATION_STATES = "ModificationStates";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_STATES)
  private List modificationStates;

  public static final String SERIALIZED_NAME_RELATED_WORKSPACES = "RelatedWorkspaces";
  @SerializedName(SERIALIZED_NAME_RELATED_WORKSPACES)
  private List relatedWorkspaces;

  public Workspace() {
  }

  public Workspace workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * Get workspaceId
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public Workspace directoryId(String directoryId) {
    this.directoryId = directoryId;
    return this;
  }

  /**
   * Get directoryId
   * @return directoryId
   */
  @javax.annotation.Nullable
  public String getDirectoryId() {
    return directoryId;
  }

  public void setDirectoryId(String directoryId) {
    this.directoryId = directoryId;
  }


  public Workspace userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public Workspace ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Workspace state(WorkspaceState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public WorkspaceState getState() {
    return state;
  }

  public void setState(WorkspaceState state) {
    this.state = state;
  }


  public Workspace bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public Workspace subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public Workspace errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Workspace errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public Workspace computerName(String computerName) {
    this.computerName = computerName;
    return this;
  }

  /**
   * Get computerName
   * @return computerName
   */
  @javax.annotation.Nullable
  public String getComputerName() {
    return computerName;
  }

  public void setComputerName(String computerName) {
    this.computerName = computerName;
  }


  public Workspace volumeEncryptionKey(String volumeEncryptionKey) {
    this.volumeEncryptionKey = volumeEncryptionKey;
    return this;
  }

  /**
   * Get volumeEncryptionKey
   * @return volumeEncryptionKey
   */
  @javax.annotation.Nullable
  public String getVolumeEncryptionKey() {
    return volumeEncryptionKey;
  }

  public void setVolumeEncryptionKey(String volumeEncryptionKey) {
    this.volumeEncryptionKey = volumeEncryptionKey;
  }


  public Workspace userVolumeEncryptionEnabled(Boolean userVolumeEncryptionEnabled) {
    this.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled;
    return this;
  }

  /**
   * Get userVolumeEncryptionEnabled
   * @return userVolumeEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getUserVolumeEncryptionEnabled() {
    return userVolumeEncryptionEnabled;
  }

  public void setUserVolumeEncryptionEnabled(Boolean userVolumeEncryptionEnabled) {
    this.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled;
  }


  public Workspace rootVolumeEncryptionEnabled(Boolean rootVolumeEncryptionEnabled) {
    this.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled;
    return this;
  }

  /**
   * Get rootVolumeEncryptionEnabled
   * @return rootVolumeEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRootVolumeEncryptionEnabled() {
    return rootVolumeEncryptionEnabled;
  }

  public void setRootVolumeEncryptionEnabled(Boolean rootVolumeEncryptionEnabled) {
    this.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled;
  }


  public Workspace workspaceProperties(ModifyWorkspacePropertiesRequestWorkspaceProperties workspaceProperties) {
    this.workspaceProperties = workspaceProperties;
    return this;
  }

  /**
   * Get workspaceProperties
   * @return workspaceProperties
   */
  @javax.annotation.Nullable
  public ModifyWorkspacePropertiesRequestWorkspaceProperties getWorkspaceProperties() {
    return workspaceProperties;
  }

  public void setWorkspaceProperties(ModifyWorkspacePropertiesRequestWorkspaceProperties workspaceProperties) {
    this.workspaceProperties = workspaceProperties;
  }


  public Workspace modificationStates(List modificationStates) {
    this.modificationStates = modificationStates;
    return this;
  }

  /**
   * Get modificationStates
   * @return modificationStates
   */
  @javax.annotation.Nullable
  public List getModificationStates() {
    return modificationStates;
  }

  public void setModificationStates(List modificationStates) {
    this.modificationStates = modificationStates;
  }


  public Workspace relatedWorkspaces(List relatedWorkspaces) {
    this.relatedWorkspaces = relatedWorkspaces;
    return this;
  }

  /**
   * Get relatedWorkspaces
   * @return relatedWorkspaces
   */
  @javax.annotation.Nullable
  public List getRelatedWorkspaces() {
    return relatedWorkspaces;
  }

  public void setRelatedWorkspaces(List relatedWorkspaces) {
    this.relatedWorkspaces = relatedWorkspaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workspace workspace = (Workspace) o;
    return Objects.equals(this.workspaceId, workspace.workspaceId) &&
        Objects.equals(this.directoryId, workspace.directoryId) &&
        Objects.equals(this.userName, workspace.userName) &&
        Objects.equals(this.ipAddress, workspace.ipAddress) &&
        Objects.equals(this.state, workspace.state) &&
        Objects.equals(this.bundleId, workspace.bundleId) &&
        Objects.equals(this.subnetId, workspace.subnetId) &&
        Objects.equals(this.errorMessage, workspace.errorMessage) &&
        Objects.equals(this.errorCode, workspace.errorCode) &&
        Objects.equals(this.computerName, workspace.computerName) &&
        Objects.equals(this.volumeEncryptionKey, workspace.volumeEncryptionKey) &&
        Objects.equals(this.userVolumeEncryptionEnabled, workspace.userVolumeEncryptionEnabled) &&
        Objects.equals(this.rootVolumeEncryptionEnabled, workspace.rootVolumeEncryptionEnabled) &&
        Objects.equals(this.workspaceProperties, workspace.workspaceProperties) &&
        Objects.equals(this.modificationStates, workspace.modificationStates) &&
        Objects.equals(this.relatedWorkspaces, workspace.relatedWorkspaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workspaceId, directoryId, userName, ipAddress, state, bundleId, subnetId, errorMessage, errorCode, computerName, volumeEncryptionKey, userVolumeEncryptionEnabled, rootVolumeEncryptionEnabled, workspaceProperties, modificationStates, relatedWorkspaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workspace {\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    directoryId: ").append(toIndentedString(directoryId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    computerName: ").append(toIndentedString(computerName)).append("\n");
    sb.append("    volumeEncryptionKey: ").append(toIndentedString(volumeEncryptionKey)).append("\n");
    sb.append("    userVolumeEncryptionEnabled: ").append(toIndentedString(userVolumeEncryptionEnabled)).append("\n");
    sb.append("    rootVolumeEncryptionEnabled: ").append(toIndentedString(rootVolumeEncryptionEnabled)).append("\n");
    sb.append("    workspaceProperties: ").append(toIndentedString(workspaceProperties)).append("\n");
    sb.append("    modificationStates: ").append(toIndentedString(modificationStates)).append("\n");
    sb.append("    relatedWorkspaces: ").append(toIndentedString(relatedWorkspaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkspaceId");
    openapiFields.add("DirectoryId");
    openapiFields.add("UserName");
    openapiFields.add("IpAddress");
    openapiFields.add("State");
    openapiFields.add("BundleId");
    openapiFields.add("SubnetId");
    openapiFields.add("ErrorMessage");
    openapiFields.add("ErrorCode");
    openapiFields.add("ComputerName");
    openapiFields.add("VolumeEncryptionKey");
    openapiFields.add("UserVolumeEncryptionEnabled");
    openapiFields.add("RootVolumeEncryptionEnabled");
    openapiFields.add("WorkspaceProperties");
    openapiFields.add("ModificationStates");
    openapiFields.add("RelatedWorkspaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Workspace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Workspace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Workspace is not found in the empty JSON string", Workspace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Workspace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Workspace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `WorkspaceId`
      if (jsonObj.get("WorkspaceId") != null && !jsonObj.get("WorkspaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkspaceId"));
      }
      // validate the optional field `DirectoryId`
      if (jsonObj.get("DirectoryId") != null && !jsonObj.get("DirectoryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DirectoryId"));
      }
      // validate the optional field `UserName`
      if (jsonObj.get("UserName") != null && !jsonObj.get("UserName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserName"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        WorkspaceState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `BundleId`
      if (jsonObj.get("BundleId") != null && !jsonObj.get("BundleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BundleId"));
      }
      // validate the optional field `SubnetId`
      if (jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetId"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorCode"));
      }
      // validate the optional field `ComputerName`
      if (jsonObj.get("ComputerName") != null && !jsonObj.get("ComputerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComputerName"));
      }
      // validate the optional field `VolumeEncryptionKey`
      if (jsonObj.get("VolumeEncryptionKey") != null && !jsonObj.get("VolumeEncryptionKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeEncryptionKey"));
      }
      // validate the optional field `UserVolumeEncryptionEnabled`
      if (jsonObj.get("UserVolumeEncryptionEnabled") != null && !jsonObj.get("UserVolumeEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UserVolumeEncryptionEnabled"));
      }
      // validate the optional field `RootVolumeEncryptionEnabled`
      if (jsonObj.get("RootVolumeEncryptionEnabled") != null && !jsonObj.get("RootVolumeEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RootVolumeEncryptionEnabled"));
      }
      // validate the optional field `WorkspaceProperties`
      if (jsonObj.get("WorkspaceProperties") != null && !jsonObj.get("WorkspaceProperties").isJsonNull()) {
        ModifyWorkspacePropertiesRequestWorkspaceProperties.validateJsonElement(jsonObj.get("WorkspaceProperties"));
      }
      // validate the optional field `ModificationStates`
      if (jsonObj.get("ModificationStates") != null && !jsonObj.get("ModificationStates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ModificationStates"));
      }
      // validate the optional field `RelatedWorkspaces`
      if (jsonObj.get("RelatedWorkspaces") != null && !jsonObj.get("RelatedWorkspaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RelatedWorkspaces"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Workspace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Workspace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Workspace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Workspace.class));

       return (TypeAdapter<T>) new TypeAdapter<Workspace>() {
           @Override
           public void write(JsonWriter out, Workspace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Workspace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Workspace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Workspace
   * @throws IOException if the JSON string is invalid with respect to Workspace
   */
  public static Workspace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Workspace.class);
  }

  /**
   * Convert an instance of Workspace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

