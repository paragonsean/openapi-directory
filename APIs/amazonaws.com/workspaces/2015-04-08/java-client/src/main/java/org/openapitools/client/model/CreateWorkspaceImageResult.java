/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateWorkspaceImageResultOperatingSystem;
import org.openapitools.client.model.WorkspaceImageRequiredTenancy;
import org.openapitools.client.model.WorkspaceImageState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorkspaceImageResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:52.076650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorkspaceImageResult {
  public static final String SERIALIZED_NAME_IMAGE_ID = "ImageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "OperatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private CreateWorkspaceImageResultOperatingSystem operatingSystem;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private WorkspaceImageState state;

  public static final String SERIALIZED_NAME_REQUIRED_TENANCY = "RequiredTenancy";
  @SerializedName(SERIALIZED_NAME_REQUIRED_TENANCY)
  private WorkspaceImageRequiredTenancy requiredTenancy;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT_ID = "OwnerAccountId";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT_ID)
  private String ownerAccountId;

  public CreateWorkspaceImageResult() {
  }

  public CreateWorkspaceImageResult imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public CreateWorkspaceImageResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateWorkspaceImageResult description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateWorkspaceImageResult operatingSystem(CreateWorkspaceImageResultOperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public CreateWorkspaceImageResultOperatingSystem getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(CreateWorkspaceImageResultOperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public CreateWorkspaceImageResult state(WorkspaceImageState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public WorkspaceImageState getState() {
    return state;
  }

  public void setState(WorkspaceImageState state) {
    this.state = state;
  }


  public CreateWorkspaceImageResult requiredTenancy(WorkspaceImageRequiredTenancy requiredTenancy) {
    this.requiredTenancy = requiredTenancy;
    return this;
  }

  /**
   * Get requiredTenancy
   * @return requiredTenancy
   */
  @javax.annotation.Nullable
  public WorkspaceImageRequiredTenancy getRequiredTenancy() {
    return requiredTenancy;
  }

  public void setRequiredTenancy(WorkspaceImageRequiredTenancy requiredTenancy) {
    this.requiredTenancy = requiredTenancy;
  }


  public CreateWorkspaceImageResult created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CreateWorkspaceImageResult ownerAccountId(String ownerAccountId) {
    this.ownerAccountId = ownerAccountId;
    return this;
  }

  /**
   * Get ownerAccountId
   * @return ownerAccountId
   */
  @javax.annotation.Nullable
  public String getOwnerAccountId() {
    return ownerAccountId;
  }

  public void setOwnerAccountId(String ownerAccountId) {
    this.ownerAccountId = ownerAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkspaceImageResult createWorkspaceImageResult = (CreateWorkspaceImageResult) o;
    return Objects.equals(this.imageId, createWorkspaceImageResult.imageId) &&
        Objects.equals(this.name, createWorkspaceImageResult.name) &&
        Objects.equals(this.description, createWorkspaceImageResult.description) &&
        Objects.equals(this.operatingSystem, createWorkspaceImageResult.operatingSystem) &&
        Objects.equals(this.state, createWorkspaceImageResult.state) &&
        Objects.equals(this.requiredTenancy, createWorkspaceImageResult.requiredTenancy) &&
        Objects.equals(this.created, createWorkspaceImageResult.created) &&
        Objects.equals(this.ownerAccountId, createWorkspaceImageResult.ownerAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageId, name, description, operatingSystem, state, requiredTenancy, created, ownerAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkspaceImageResult {\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    requiredTenancy: ").append(toIndentedString(requiredTenancy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    ownerAccountId: ").append(toIndentedString(ownerAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ImageId");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("OperatingSystem");
    openapiFields.add("State");
    openapiFields.add("RequiredTenancy");
    openapiFields.add("Created");
    openapiFields.add("OwnerAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorkspaceImageResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorkspaceImageResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorkspaceImageResult is not found in the empty JSON string", CreateWorkspaceImageResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorkspaceImageResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorkspaceImageResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ImageId`
      if (jsonObj.get("ImageId") != null && !jsonObj.get("ImageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageId"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `OperatingSystem`
      if (jsonObj.get("OperatingSystem") != null && !jsonObj.get("OperatingSystem").isJsonNull()) {
        CreateWorkspaceImageResultOperatingSystem.validateJsonElement(jsonObj.get("OperatingSystem"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        WorkspaceImageState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `RequiredTenancy`
      if (jsonObj.get("RequiredTenancy") != null && !jsonObj.get("RequiredTenancy").isJsonNull()) {
        WorkspaceImageRequiredTenancy.validateJsonElement(jsonObj.get("RequiredTenancy"));
      }
      // validate the optional field `Created`
      if (jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Created"));
      }
      // validate the optional field `OwnerAccountId`
      if (jsonObj.get("OwnerAccountId") != null && !jsonObj.get("OwnerAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerAccountId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorkspaceImageResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorkspaceImageResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorkspaceImageResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorkspaceImageResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorkspaceImageResult>() {
           @Override
           public void write(JsonWriter out, CreateWorkspaceImageResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorkspaceImageResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorkspaceImageResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorkspaceImageResult
   * @throws IOException if the JSON string is invalid with respect to CreateWorkspaceImageResult
   */
  public static CreateWorkspaceImageResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorkspaceImageResult.class);
  }

  /**
   * Convert an instance of CreateWorkspaceImageResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

