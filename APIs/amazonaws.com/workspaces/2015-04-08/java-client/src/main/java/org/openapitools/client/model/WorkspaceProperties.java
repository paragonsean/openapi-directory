/*
 * Amazon WorkSpaces
 * <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/wsp.html\">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/adminguide/\">Amazon WorkSpaces Administration Guide</a>. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the <a href=\"https://docs.aws.amazon.com/workspaces/latest/userguide/\">Amazon WorkSpaces User Guide</a>. For more information about using the CLI to manage your WorkSpaces resources, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html\">WorkSpaces section of the CLI Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2015-04-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Compute;
import org.openapitools.client.model.RunningMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a WorkSpace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:52.076650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceProperties {
  public static final String SERIALIZED_NAME_RUNNING_MODE = "RunningMode";
  @SerializedName(SERIALIZED_NAME_RUNNING_MODE)
  private RunningMode runningMode;

  public static final String SERIALIZED_NAME_RUNNING_MODE_AUTO_STOP_TIMEOUT_IN_MINUTES = "RunningModeAutoStopTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_RUNNING_MODE_AUTO_STOP_TIMEOUT_IN_MINUTES)
  private Integer runningModeAutoStopTimeoutInMinutes;

  public static final String SERIALIZED_NAME_ROOT_VOLUME_SIZE_GIB = "RootVolumeSizeGib";
  @SerializedName(SERIALIZED_NAME_ROOT_VOLUME_SIZE_GIB)
  private Integer rootVolumeSizeGib;

  public static final String SERIALIZED_NAME_USER_VOLUME_SIZE_GIB = "UserVolumeSizeGib";
  @SerializedName(SERIALIZED_NAME_USER_VOLUME_SIZE_GIB)
  private Integer userVolumeSizeGib;

  public static final String SERIALIZED_NAME_COMPUTE_TYPE_NAME = "ComputeTypeName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE_NAME)
  private Compute computeTypeName;

  public static final String SERIALIZED_NAME_PROTOCOLS = "Protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List protocols;

  public WorkspaceProperties() {
  }

  public WorkspaceProperties runningMode(RunningMode runningMode) {
    this.runningMode = runningMode;
    return this;
  }

  /**
   * Get runningMode
   * @return runningMode
   */
  @javax.annotation.Nullable
  public RunningMode getRunningMode() {
    return runningMode;
  }

  public void setRunningMode(RunningMode runningMode) {
    this.runningMode = runningMode;
  }


  public WorkspaceProperties runningModeAutoStopTimeoutInMinutes(Integer runningModeAutoStopTimeoutInMinutes) {
    this.runningModeAutoStopTimeoutInMinutes = runningModeAutoStopTimeoutInMinutes;
    return this;
  }

  /**
   * Get runningModeAutoStopTimeoutInMinutes
   * @return runningModeAutoStopTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getRunningModeAutoStopTimeoutInMinutes() {
    return runningModeAutoStopTimeoutInMinutes;
  }

  public void setRunningModeAutoStopTimeoutInMinutes(Integer runningModeAutoStopTimeoutInMinutes) {
    this.runningModeAutoStopTimeoutInMinutes = runningModeAutoStopTimeoutInMinutes;
  }


  public WorkspaceProperties rootVolumeSizeGib(Integer rootVolumeSizeGib) {
    this.rootVolumeSizeGib = rootVolumeSizeGib;
    return this;
  }

  /**
   * Get rootVolumeSizeGib
   * @return rootVolumeSizeGib
   */
  @javax.annotation.Nullable
  public Integer getRootVolumeSizeGib() {
    return rootVolumeSizeGib;
  }

  public void setRootVolumeSizeGib(Integer rootVolumeSizeGib) {
    this.rootVolumeSizeGib = rootVolumeSizeGib;
  }


  public WorkspaceProperties userVolumeSizeGib(Integer userVolumeSizeGib) {
    this.userVolumeSizeGib = userVolumeSizeGib;
    return this;
  }

  /**
   * Get userVolumeSizeGib
   * @return userVolumeSizeGib
   */
  @javax.annotation.Nullable
  public Integer getUserVolumeSizeGib() {
    return userVolumeSizeGib;
  }

  public void setUserVolumeSizeGib(Integer userVolumeSizeGib) {
    this.userVolumeSizeGib = userVolumeSizeGib;
  }


  public WorkspaceProperties computeTypeName(Compute computeTypeName) {
    this.computeTypeName = computeTypeName;
    return this;
  }

  /**
   * Get computeTypeName
   * @return computeTypeName
   */
  @javax.annotation.Nullable
  public Compute getComputeTypeName() {
    return computeTypeName;
  }

  public void setComputeTypeName(Compute computeTypeName) {
    this.computeTypeName = computeTypeName;
  }


  public WorkspaceProperties protocols(List protocols) {
    this.protocols = protocols;
    return this;
  }

  /**
   * Get protocols
   * @return protocols
   */
  @javax.annotation.Nullable
  public List getProtocols() {
    return protocols;
  }

  public void setProtocols(List protocols) {
    this.protocols = protocols;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceProperties workspaceProperties = (WorkspaceProperties) o;
    return Objects.equals(this.runningMode, workspaceProperties.runningMode) &&
        Objects.equals(this.runningModeAutoStopTimeoutInMinutes, workspaceProperties.runningModeAutoStopTimeoutInMinutes) &&
        Objects.equals(this.rootVolumeSizeGib, workspaceProperties.rootVolumeSizeGib) &&
        Objects.equals(this.userVolumeSizeGib, workspaceProperties.userVolumeSizeGib) &&
        Objects.equals(this.computeTypeName, workspaceProperties.computeTypeName) &&
        Objects.equals(this.protocols, workspaceProperties.protocols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runningMode, runningModeAutoStopTimeoutInMinutes, rootVolumeSizeGib, userVolumeSizeGib, computeTypeName, protocols);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceProperties {\n");
    sb.append("    runningMode: ").append(toIndentedString(runningMode)).append("\n");
    sb.append("    runningModeAutoStopTimeoutInMinutes: ").append(toIndentedString(runningModeAutoStopTimeoutInMinutes)).append("\n");
    sb.append("    rootVolumeSizeGib: ").append(toIndentedString(rootVolumeSizeGib)).append("\n");
    sb.append("    userVolumeSizeGib: ").append(toIndentedString(userVolumeSizeGib)).append("\n");
    sb.append("    computeTypeName: ").append(toIndentedString(computeTypeName)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RunningMode");
    openapiFields.add("RunningModeAutoStopTimeoutInMinutes");
    openapiFields.add("RootVolumeSizeGib");
    openapiFields.add("UserVolumeSizeGib");
    openapiFields.add("ComputeTypeName");
    openapiFields.add("Protocols");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceProperties is not found in the empty JSON string", WorkspaceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RunningMode`
      if (jsonObj.get("RunningMode") != null && !jsonObj.get("RunningMode").isJsonNull()) {
        RunningMode.validateJsonElement(jsonObj.get("RunningMode"));
      }
      // validate the optional field `RunningModeAutoStopTimeoutInMinutes`
      if (jsonObj.get("RunningModeAutoStopTimeoutInMinutes") != null && !jsonObj.get("RunningModeAutoStopTimeoutInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RunningModeAutoStopTimeoutInMinutes"));
      }
      // validate the optional field `RootVolumeSizeGib`
      if (jsonObj.get("RootVolumeSizeGib") != null && !jsonObj.get("RootVolumeSizeGib").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RootVolumeSizeGib"));
      }
      // validate the optional field `UserVolumeSizeGib`
      if (jsonObj.get("UserVolumeSizeGib") != null && !jsonObj.get("UserVolumeSizeGib").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UserVolumeSizeGib"));
      }
      // validate the optional field `ComputeTypeName`
      if (jsonObj.get("ComputeTypeName") != null && !jsonObj.get("ComputeTypeName").isJsonNull()) {
        Compute.validateJsonElement(jsonObj.get("ComputeTypeName"));
      }
      // validate the optional field `Protocols`
      if (jsonObj.get("Protocols") != null && !jsonObj.get("Protocols").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Protocols"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceProperties>() {
           @Override
           public void write(JsonWriter out, WorkspaceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceProperties
   * @throws IOException if the JSON string is invalid with respect to WorkspaceProperties
   */
  public static WorkspaceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceProperties.class);
  }

  /**
   * Convert an instance of WorkspaceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

