# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_connection_alias_permission_request_connection_alias_permission import UpdateConnectionAliasPermissionRequestConnectionAliasPermission
from openapi_server import util


class UpdateConnectionAliasPermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_id: str=None, connection_alias_permission: UpdateConnectionAliasPermissionRequestConnectionAliasPermission=None):
        """UpdateConnectionAliasPermissionRequest - a model defined in OpenAPI

        :param alias_id: The alias_id of this UpdateConnectionAliasPermissionRequest.
        :param connection_alias_permission: The connection_alias_permission of this UpdateConnectionAliasPermissionRequest.
        """
        self.openapi_types = {
            'alias_id': str,
            'connection_alias_permission': UpdateConnectionAliasPermissionRequestConnectionAliasPermission
        }

        self.attribute_map = {
            'alias_id': 'AliasId',
            'connection_alias_permission': 'ConnectionAliasPermission'
        }

        self._alias_id = alias_id
        self._connection_alias_permission = connection_alias_permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateConnectionAliasPermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateConnectionAliasPermissionRequest of this UpdateConnectionAliasPermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_id(self):
        """Gets the alias_id of this UpdateConnectionAliasPermissionRequest.


        :return: The alias_id of this UpdateConnectionAliasPermissionRequest.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this UpdateConnectionAliasPermissionRequest.


        :param alias_id: The alias_id of this UpdateConnectionAliasPermissionRequest.
        :type alias_id: str
        """
        if alias_id is None:
            raise ValueError("Invalid value for `alias_id`, must not be `None`")

        self._alias_id = alias_id

    @property
    def connection_alias_permission(self):
        """Gets the connection_alias_permission of this UpdateConnectionAliasPermissionRequest.


        :return: The connection_alias_permission of this UpdateConnectionAliasPermissionRequest.
        :rtype: UpdateConnectionAliasPermissionRequestConnectionAliasPermission
        """
        return self._connection_alias_permission

    @connection_alias_permission.setter
    def connection_alias_permission(self, connection_alias_permission):
        """Sets the connection_alias_permission of this UpdateConnectionAliasPermissionRequest.


        :param connection_alias_permission: The connection_alias_permission of this UpdateConnectionAliasPermissionRequest.
        :type connection_alias_permission: UpdateConnectionAliasPermissionRequestConnectionAliasPermission
        """
        if connection_alias_permission is None:
            raise ValueError("Invalid value for `connection_alias_permission`, must not be `None`")

        self._connection_alias_permission = connection_alias_permission
