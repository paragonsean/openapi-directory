# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateWorkspaceImagePermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_id: str=None, allow_copy_image: bool=None, shared_account_id: str=None):
        """UpdateWorkspaceImagePermissionRequest - a model defined in OpenAPI

        :param image_id: The image_id of this UpdateWorkspaceImagePermissionRequest.
        :param allow_copy_image: The allow_copy_image of this UpdateWorkspaceImagePermissionRequest.
        :param shared_account_id: The shared_account_id of this UpdateWorkspaceImagePermissionRequest.
        """
        self.openapi_types = {
            'image_id': str,
            'allow_copy_image': bool,
            'shared_account_id': str
        }

        self.attribute_map = {
            'image_id': 'ImageId',
            'allow_copy_image': 'AllowCopyImage',
            'shared_account_id': 'SharedAccountId'
        }

        self._image_id = image_id
        self._allow_copy_image = allow_copy_image
        self._shared_account_id = shared_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorkspaceImagePermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorkspaceImagePermissionRequest of this UpdateWorkspaceImagePermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_id(self):
        """Gets the image_id of this UpdateWorkspaceImagePermissionRequest.


        :return: The image_id of this UpdateWorkspaceImagePermissionRequest.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this UpdateWorkspaceImagePermissionRequest.


        :param image_id: The image_id of this UpdateWorkspaceImagePermissionRequest.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def allow_copy_image(self):
        """Gets the allow_copy_image of this UpdateWorkspaceImagePermissionRequest.


        :return: The allow_copy_image of this UpdateWorkspaceImagePermissionRequest.
        :rtype: bool
        """
        return self._allow_copy_image

    @allow_copy_image.setter
    def allow_copy_image(self, allow_copy_image):
        """Sets the allow_copy_image of this UpdateWorkspaceImagePermissionRequest.


        :param allow_copy_image: The allow_copy_image of this UpdateWorkspaceImagePermissionRequest.
        :type allow_copy_image: bool
        """
        if allow_copy_image is None:
            raise ValueError("Invalid value for `allow_copy_image`, must not be `None`")

        self._allow_copy_image = allow_copy_image

    @property
    def shared_account_id(self):
        """Gets the shared_account_id of this UpdateWorkspaceImagePermissionRequest.


        :return: The shared_account_id of this UpdateWorkspaceImagePermissionRequest.
        :rtype: str
        """
        return self._shared_account_id

    @shared_account_id.setter
    def shared_account_id(self, shared_account_id):
        """Sets the shared_account_id of this UpdateWorkspaceImagePermissionRequest.


        :param shared_account_id: The shared_account_id of this UpdateWorkspaceImagePermissionRequest.
        :type shared_account_id: str
        """
        if shared_account_id is None:
            raise ValueError("Invalid value for `shared_account_id`, must not be `None`")

        self._shared_account_id = shared_account_id
