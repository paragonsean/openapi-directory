# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionAliasPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shared_account_id: str=None, allow_association: bool=None):
        """ConnectionAliasPermission - a model defined in OpenAPI

        :param shared_account_id: The shared_account_id of this ConnectionAliasPermission.
        :param allow_association: The allow_association of this ConnectionAliasPermission.
        """
        self.openapi_types = {
            'shared_account_id': str,
            'allow_association': bool
        }

        self.attribute_map = {
            'shared_account_id': 'SharedAccountId',
            'allow_association': 'AllowAssociation'
        }

        self._shared_account_id = shared_account_id
        self._allow_association = allow_association

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionAliasPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionAliasPermission of this ConnectionAliasPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shared_account_id(self):
        """Gets the shared_account_id of this ConnectionAliasPermission.


        :return: The shared_account_id of this ConnectionAliasPermission.
        :rtype: str
        """
        return self._shared_account_id

    @shared_account_id.setter
    def shared_account_id(self, shared_account_id):
        """Sets the shared_account_id of this ConnectionAliasPermission.


        :param shared_account_id: The shared_account_id of this ConnectionAliasPermission.
        :type shared_account_id: str
        """
        if shared_account_id is None:
            raise ValueError("Invalid value for `shared_account_id`, must not be `None`")

        self._shared_account_id = shared_account_id

    @property
    def allow_association(self):
        """Gets the allow_association of this ConnectionAliasPermission.


        :return: The allow_association of this ConnectionAliasPermission.
        :rtype: bool
        """
        return self._allow_association

    @allow_association.setter
    def allow_association(self, allow_association):
        """Sets the allow_association of this ConnectionAliasPermission.


        :param allow_association: The allow_association of this ConnectionAliasPermission.
        :type allow_association: bool
        """
        if allow_association is None:
            raise ValueError("Invalid value for `allow_association`, must not be `None`")

        self._allow_association = allow_association
