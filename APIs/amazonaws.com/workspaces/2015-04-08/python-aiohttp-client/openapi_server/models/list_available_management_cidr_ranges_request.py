# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListAvailableManagementCidrRangesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, management_cidr_range_constraint: str=None, max_results: int=None, next_token: str=None):
        """ListAvailableManagementCidrRangesRequest - a model defined in OpenAPI

        :param management_cidr_range_constraint: The management_cidr_range_constraint of this ListAvailableManagementCidrRangesRequest.
        :param max_results: The max_results of this ListAvailableManagementCidrRangesRequest.
        :param next_token: The next_token of this ListAvailableManagementCidrRangesRequest.
        """
        self.openapi_types = {
            'management_cidr_range_constraint': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'management_cidr_range_constraint': 'ManagementCidrRangeConstraint',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._management_cidr_range_constraint = management_cidr_range_constraint
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAvailableManagementCidrRangesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAvailableManagementCidrRangesRequest of this ListAvailableManagementCidrRangesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def management_cidr_range_constraint(self):
        """Gets the management_cidr_range_constraint of this ListAvailableManagementCidrRangesRequest.


        :return: The management_cidr_range_constraint of this ListAvailableManagementCidrRangesRequest.
        :rtype: str
        """
        return self._management_cidr_range_constraint

    @management_cidr_range_constraint.setter
    def management_cidr_range_constraint(self, management_cidr_range_constraint):
        """Sets the management_cidr_range_constraint of this ListAvailableManagementCidrRangesRequest.


        :param management_cidr_range_constraint: The management_cidr_range_constraint of this ListAvailableManagementCidrRangesRequest.
        :type management_cidr_range_constraint: str
        """
        if management_cidr_range_constraint is None:
            raise ValueError("Invalid value for `management_cidr_range_constraint`, must not be `None`")

        self._management_cidr_range_constraint = management_cidr_range_constraint

    @property
    def max_results(self):
        """Gets the max_results of this ListAvailableManagementCidrRangesRequest.


        :return: The max_results of this ListAvailableManagementCidrRangesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListAvailableManagementCidrRangesRequest.


        :param max_results: The max_results of this ListAvailableManagementCidrRangesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListAvailableManagementCidrRangesRequest.


        :return: The next_token of this ListAvailableManagementCidrRangesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAvailableManagementCidrRangesRequest.


        :param next_token: The next_token of this ListAvailableManagementCidrRangesRequest.
        :type next_token: str
        """

        self._next_token = next_token
