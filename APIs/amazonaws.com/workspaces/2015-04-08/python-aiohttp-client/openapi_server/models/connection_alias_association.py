# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.association_status import AssociationStatus
from openapi_server import util


class ConnectionAliasAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_status: AssociationStatus=None, associated_account_id: str=None, resource_id: str=None, connection_identifier: str=None):
        """ConnectionAliasAssociation - a model defined in OpenAPI

        :param association_status: The association_status of this ConnectionAliasAssociation.
        :param associated_account_id: The associated_account_id of this ConnectionAliasAssociation.
        :param resource_id: The resource_id of this ConnectionAliasAssociation.
        :param connection_identifier: The connection_identifier of this ConnectionAliasAssociation.
        """
        self.openapi_types = {
            'association_status': AssociationStatus,
            'associated_account_id': str,
            'resource_id': str,
            'connection_identifier': str
        }

        self.attribute_map = {
            'association_status': 'AssociationStatus',
            'associated_account_id': 'AssociatedAccountId',
            'resource_id': 'ResourceId',
            'connection_identifier': 'ConnectionIdentifier'
        }

        self._association_status = association_status
        self._associated_account_id = associated_account_id
        self._resource_id = resource_id
        self._connection_identifier = connection_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionAliasAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionAliasAssociation of this ConnectionAliasAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_status(self):
        """Gets the association_status of this ConnectionAliasAssociation.


        :return: The association_status of this ConnectionAliasAssociation.
        :rtype: AssociationStatus
        """
        return self._association_status

    @association_status.setter
    def association_status(self, association_status):
        """Sets the association_status of this ConnectionAliasAssociation.


        :param association_status: The association_status of this ConnectionAliasAssociation.
        :type association_status: AssociationStatus
        """

        self._association_status = association_status

    @property
    def associated_account_id(self):
        """Gets the associated_account_id of this ConnectionAliasAssociation.


        :return: The associated_account_id of this ConnectionAliasAssociation.
        :rtype: str
        """
        return self._associated_account_id

    @associated_account_id.setter
    def associated_account_id(self, associated_account_id):
        """Sets the associated_account_id of this ConnectionAliasAssociation.


        :param associated_account_id: The associated_account_id of this ConnectionAliasAssociation.
        :type associated_account_id: str
        """

        self._associated_account_id = associated_account_id

    @property
    def resource_id(self):
        """Gets the resource_id of this ConnectionAliasAssociation.


        :return: The resource_id of this ConnectionAliasAssociation.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ConnectionAliasAssociation.


        :param resource_id: The resource_id of this ConnectionAliasAssociation.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def connection_identifier(self):
        """Gets the connection_identifier of this ConnectionAliasAssociation.


        :return: The connection_identifier of this ConnectionAliasAssociation.
        :rtype: str
        """
        return self._connection_identifier

    @connection_identifier.setter
    def connection_identifier(self, connection_identifier):
        """Sets the connection_identifier of this ConnectionAliasAssociation.


        :param connection_identifier: The connection_identifier of this ConnectionAliasAssociation.
        :type connection_identifier: str
        """

        self._connection_identifier = connection_identifier
