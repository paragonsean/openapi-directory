# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_request_workspace_properties import WorkspaceRequestWorkspaceProperties
from openapi_server import util


class WorkspaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directory_id: str=None, user_name: str=None, bundle_id: str=None, volume_encryption_key: str=None, user_volume_encryption_enabled: bool=None, root_volume_encryption_enabled: bool=None, workspace_properties: WorkspaceRequestWorkspaceProperties=None, tags: List=None):
        """WorkspaceRequest - a model defined in OpenAPI

        :param directory_id: The directory_id of this WorkspaceRequest.
        :param user_name: The user_name of this WorkspaceRequest.
        :param bundle_id: The bundle_id of this WorkspaceRequest.
        :param volume_encryption_key: The volume_encryption_key of this WorkspaceRequest.
        :param user_volume_encryption_enabled: The user_volume_encryption_enabled of this WorkspaceRequest.
        :param root_volume_encryption_enabled: The root_volume_encryption_enabled of this WorkspaceRequest.
        :param workspace_properties: The workspace_properties of this WorkspaceRequest.
        :param tags: The tags of this WorkspaceRequest.
        """
        self.openapi_types = {
            'directory_id': str,
            'user_name': str,
            'bundle_id': str,
            'volume_encryption_key': str,
            'user_volume_encryption_enabled': bool,
            'root_volume_encryption_enabled': bool,
            'workspace_properties': WorkspaceRequestWorkspaceProperties,
            'tags': List
        }

        self.attribute_map = {
            'directory_id': 'DirectoryId',
            'user_name': 'UserName',
            'bundle_id': 'BundleId',
            'volume_encryption_key': 'VolumeEncryptionKey',
            'user_volume_encryption_enabled': 'UserVolumeEncryptionEnabled',
            'root_volume_encryption_enabled': 'RootVolumeEncryptionEnabled',
            'workspace_properties': 'WorkspaceProperties',
            'tags': 'Tags'
        }

        self._directory_id = directory_id
        self._user_name = user_name
        self._bundle_id = bundle_id
        self._volume_encryption_key = volume_encryption_key
        self._user_volume_encryption_enabled = user_volume_encryption_enabled
        self._root_volume_encryption_enabled = root_volume_encryption_enabled
        self._workspace_properties = workspace_properties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceRequest of this WorkspaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directory_id(self):
        """Gets the directory_id of this WorkspaceRequest.


        :return: The directory_id of this WorkspaceRequest.
        :rtype: str
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this WorkspaceRequest.


        :param directory_id: The directory_id of this WorkspaceRequest.
        :type directory_id: str
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")

        self._directory_id = directory_id

    @property
    def user_name(self):
        """Gets the user_name of this WorkspaceRequest.


        :return: The user_name of this WorkspaceRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this WorkspaceRequest.


        :param user_name: The user_name of this WorkspaceRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def bundle_id(self):
        """Gets the bundle_id of this WorkspaceRequest.


        :return: The bundle_id of this WorkspaceRequest.
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this WorkspaceRequest.


        :param bundle_id: The bundle_id of this WorkspaceRequest.
        :type bundle_id: str
        """
        if bundle_id is None:
            raise ValueError("Invalid value for `bundle_id`, must not be `None`")

        self._bundle_id = bundle_id

    @property
    def volume_encryption_key(self):
        """Gets the volume_encryption_key of this WorkspaceRequest.


        :return: The volume_encryption_key of this WorkspaceRequest.
        :rtype: str
        """
        return self._volume_encryption_key

    @volume_encryption_key.setter
    def volume_encryption_key(self, volume_encryption_key):
        """Sets the volume_encryption_key of this WorkspaceRequest.


        :param volume_encryption_key: The volume_encryption_key of this WorkspaceRequest.
        :type volume_encryption_key: str
        """

        self._volume_encryption_key = volume_encryption_key

    @property
    def user_volume_encryption_enabled(self):
        """Gets the user_volume_encryption_enabled of this WorkspaceRequest.


        :return: The user_volume_encryption_enabled of this WorkspaceRequest.
        :rtype: bool
        """
        return self._user_volume_encryption_enabled

    @user_volume_encryption_enabled.setter
    def user_volume_encryption_enabled(self, user_volume_encryption_enabled):
        """Sets the user_volume_encryption_enabled of this WorkspaceRequest.


        :param user_volume_encryption_enabled: The user_volume_encryption_enabled of this WorkspaceRequest.
        :type user_volume_encryption_enabled: bool
        """

        self._user_volume_encryption_enabled = user_volume_encryption_enabled

    @property
    def root_volume_encryption_enabled(self):
        """Gets the root_volume_encryption_enabled of this WorkspaceRequest.


        :return: The root_volume_encryption_enabled of this WorkspaceRequest.
        :rtype: bool
        """
        return self._root_volume_encryption_enabled

    @root_volume_encryption_enabled.setter
    def root_volume_encryption_enabled(self, root_volume_encryption_enabled):
        """Sets the root_volume_encryption_enabled of this WorkspaceRequest.


        :param root_volume_encryption_enabled: The root_volume_encryption_enabled of this WorkspaceRequest.
        :type root_volume_encryption_enabled: bool
        """

        self._root_volume_encryption_enabled = root_volume_encryption_enabled

    @property
    def workspace_properties(self):
        """Gets the workspace_properties of this WorkspaceRequest.


        :return: The workspace_properties of this WorkspaceRequest.
        :rtype: WorkspaceRequestWorkspaceProperties
        """
        return self._workspace_properties

    @workspace_properties.setter
    def workspace_properties(self, workspace_properties):
        """Sets the workspace_properties of this WorkspaceRequest.


        :param workspace_properties: The workspace_properties of this WorkspaceRequest.
        :type workspace_properties: WorkspaceRequestWorkspaceProperties
        """

        self._workspace_properties = workspace_properties

    @property
    def tags(self):
        """Gets the tags of this WorkspaceRequest.


        :return: The tags of this WorkspaceRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkspaceRequest.


        :param tags: The tags of this WorkspaceRequest.
        :type tags: List
        """

        self._tags = tags
