# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StandbyWorkspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary_workspace_id: str=None, volume_encryption_key: str=None, directory_id: str=None, tags: List=None):
        """StandbyWorkspace - a model defined in OpenAPI

        :param primary_workspace_id: The primary_workspace_id of this StandbyWorkspace.
        :param volume_encryption_key: The volume_encryption_key of this StandbyWorkspace.
        :param directory_id: The directory_id of this StandbyWorkspace.
        :param tags: The tags of this StandbyWorkspace.
        """
        self.openapi_types = {
            'primary_workspace_id': str,
            'volume_encryption_key': str,
            'directory_id': str,
            'tags': List
        }

        self.attribute_map = {
            'primary_workspace_id': 'PrimaryWorkspaceId',
            'volume_encryption_key': 'VolumeEncryptionKey',
            'directory_id': 'DirectoryId',
            'tags': 'Tags'
        }

        self._primary_workspace_id = primary_workspace_id
        self._volume_encryption_key = volume_encryption_key
        self._directory_id = directory_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandbyWorkspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandbyWorkspace of this StandbyWorkspace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary_workspace_id(self):
        """Gets the primary_workspace_id of this StandbyWorkspace.


        :return: The primary_workspace_id of this StandbyWorkspace.
        :rtype: str
        """
        return self._primary_workspace_id

    @primary_workspace_id.setter
    def primary_workspace_id(self, primary_workspace_id):
        """Sets the primary_workspace_id of this StandbyWorkspace.


        :param primary_workspace_id: The primary_workspace_id of this StandbyWorkspace.
        :type primary_workspace_id: str
        """
        if primary_workspace_id is None:
            raise ValueError("Invalid value for `primary_workspace_id`, must not be `None`")

        self._primary_workspace_id = primary_workspace_id

    @property
    def volume_encryption_key(self):
        """Gets the volume_encryption_key of this StandbyWorkspace.


        :return: The volume_encryption_key of this StandbyWorkspace.
        :rtype: str
        """
        return self._volume_encryption_key

    @volume_encryption_key.setter
    def volume_encryption_key(self, volume_encryption_key):
        """Sets the volume_encryption_key of this StandbyWorkspace.


        :param volume_encryption_key: The volume_encryption_key of this StandbyWorkspace.
        :type volume_encryption_key: str
        """

        self._volume_encryption_key = volume_encryption_key

    @property
    def directory_id(self):
        """Gets the directory_id of this StandbyWorkspace.


        :return: The directory_id of this StandbyWorkspace.
        :rtype: str
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this StandbyWorkspace.


        :param directory_id: The directory_id of this StandbyWorkspace.
        :type directory_id: str
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")

        self._directory_id = directory_id

    @property
    def tags(self):
        """Gets the tags of this StandbyWorkspace.


        :return: The tags of this StandbyWorkspace.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StandbyWorkspace.


        :param tags: The tags of this StandbyWorkspace.
        :type tags: List
        """

        self._tags = tags
