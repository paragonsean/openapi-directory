# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_image_ingestion_process import WorkspaceImageIngestionProcess
from openapi_server import util


class ImportWorkspaceImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ec2_image_id: str=None, ingestion_process: WorkspaceImageIngestionProcess=None, image_name: str=None, image_description: str=None, tags: List=None, applications: List=None):
        """ImportWorkspaceImageRequest - a model defined in OpenAPI

        :param ec2_image_id: The ec2_image_id of this ImportWorkspaceImageRequest.
        :param ingestion_process: The ingestion_process of this ImportWorkspaceImageRequest.
        :param image_name: The image_name of this ImportWorkspaceImageRequest.
        :param image_description: The image_description of this ImportWorkspaceImageRequest.
        :param tags: The tags of this ImportWorkspaceImageRequest.
        :param applications: The applications of this ImportWorkspaceImageRequest.
        """
        self.openapi_types = {
            'ec2_image_id': str,
            'ingestion_process': WorkspaceImageIngestionProcess,
            'image_name': str,
            'image_description': str,
            'tags': List,
            'applications': List
        }

        self.attribute_map = {
            'ec2_image_id': 'Ec2ImageId',
            'ingestion_process': 'IngestionProcess',
            'image_name': 'ImageName',
            'image_description': 'ImageDescription',
            'tags': 'Tags',
            'applications': 'Applications'
        }

        self._ec2_image_id = ec2_image_id
        self._ingestion_process = ingestion_process
        self._image_name = image_name
        self._image_description = image_description
        self._tags = tags
        self._applications = applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportWorkspaceImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportWorkspaceImageRequest of this ImportWorkspaceImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ec2_image_id(self):
        """Gets the ec2_image_id of this ImportWorkspaceImageRequest.


        :return: The ec2_image_id of this ImportWorkspaceImageRequest.
        :rtype: str
        """
        return self._ec2_image_id

    @ec2_image_id.setter
    def ec2_image_id(self, ec2_image_id):
        """Sets the ec2_image_id of this ImportWorkspaceImageRequest.


        :param ec2_image_id: The ec2_image_id of this ImportWorkspaceImageRequest.
        :type ec2_image_id: str
        """
        if ec2_image_id is None:
            raise ValueError("Invalid value for `ec2_image_id`, must not be `None`")

        self._ec2_image_id = ec2_image_id

    @property
    def ingestion_process(self):
        """Gets the ingestion_process of this ImportWorkspaceImageRequest.


        :return: The ingestion_process of this ImportWorkspaceImageRequest.
        :rtype: WorkspaceImageIngestionProcess
        """
        return self._ingestion_process

    @ingestion_process.setter
    def ingestion_process(self, ingestion_process):
        """Sets the ingestion_process of this ImportWorkspaceImageRequest.


        :param ingestion_process: The ingestion_process of this ImportWorkspaceImageRequest.
        :type ingestion_process: WorkspaceImageIngestionProcess
        """
        if ingestion_process is None:
            raise ValueError("Invalid value for `ingestion_process`, must not be `None`")

        self._ingestion_process = ingestion_process

    @property
    def image_name(self):
        """Gets the image_name of this ImportWorkspaceImageRequest.


        :return: The image_name of this ImportWorkspaceImageRequest.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ImportWorkspaceImageRequest.


        :param image_name: The image_name of this ImportWorkspaceImageRequest.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def image_description(self):
        """Gets the image_description of this ImportWorkspaceImageRequest.


        :return: The image_description of this ImportWorkspaceImageRequest.
        :rtype: str
        """
        return self._image_description

    @image_description.setter
    def image_description(self, image_description):
        """Sets the image_description of this ImportWorkspaceImageRequest.


        :param image_description: The image_description of this ImportWorkspaceImageRequest.
        :type image_description: str
        """
        if image_description is None:
            raise ValueError("Invalid value for `image_description`, must not be `None`")

        self._image_description = image_description

    @property
    def tags(self):
        """Gets the tags of this ImportWorkspaceImageRequest.


        :return: The tags of this ImportWorkspaceImageRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportWorkspaceImageRequest.


        :param tags: The tags of this ImportWorkspaceImageRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def applications(self):
        """Gets the applications of this ImportWorkspaceImageRequest.


        :return: The applications of this ImportWorkspaceImageRequest.
        :rtype: List
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this ImportWorkspaceImageRequest.


        :param applications: The applications of this ImportWorkspaceImageRequest.
        :type applications: List
        """

        self._applications = applications
