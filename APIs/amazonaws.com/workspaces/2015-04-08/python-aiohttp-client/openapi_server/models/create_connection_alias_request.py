# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConnectionAliasRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_string: str=None, tags: List=None):
        """CreateConnectionAliasRequest - a model defined in OpenAPI

        :param connection_string: The connection_string of this CreateConnectionAliasRequest.
        :param tags: The tags of this CreateConnectionAliasRequest.
        """
        self.openapi_types = {
            'connection_string': str,
            'tags': List
        }

        self.attribute_map = {
            'connection_string': 'ConnectionString',
            'tags': 'Tags'
        }

        self._connection_string = connection_string
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConnectionAliasRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConnectionAliasRequest of this CreateConnectionAliasRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_string(self):
        """Gets the connection_string of this CreateConnectionAliasRequest.


        :return: The connection_string of this CreateConnectionAliasRequest.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this CreateConnectionAliasRequest.


        :param connection_string: The connection_string of this CreateConnectionAliasRequest.
        :type connection_string: str
        """
        if connection_string is None:
            raise ValueError("Invalid value for `connection_string`, must not be `None`")

        self._connection_string = connection_string

    @property
    def tags(self):
        """Gets the tags of this CreateConnectionAliasRequest.


        :return: The tags of this CreateConnectionAliasRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConnectionAliasRequest.


        :param tags: The tags of this CreateConnectionAliasRequest.
        :type tags: List
        """

        self._tags = tags
