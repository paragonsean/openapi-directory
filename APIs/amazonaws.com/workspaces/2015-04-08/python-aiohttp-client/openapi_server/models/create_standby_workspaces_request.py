# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateStandbyWorkspacesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary_region: str=None, standby_workspaces: List=None):
        """CreateStandbyWorkspacesRequest - a model defined in OpenAPI

        :param primary_region: The primary_region of this CreateStandbyWorkspacesRequest.
        :param standby_workspaces: The standby_workspaces of this CreateStandbyWorkspacesRequest.
        """
        self.openapi_types = {
            'primary_region': str,
            'standby_workspaces': List
        }

        self.attribute_map = {
            'primary_region': 'PrimaryRegion',
            'standby_workspaces': 'StandbyWorkspaces'
        }

        self._primary_region = primary_region
        self._standby_workspaces = standby_workspaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStandbyWorkspacesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStandbyWorkspacesRequest of this CreateStandbyWorkspacesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary_region(self):
        """Gets the primary_region of this CreateStandbyWorkspacesRequest.


        :return: The primary_region of this CreateStandbyWorkspacesRequest.
        :rtype: str
        """
        return self._primary_region

    @primary_region.setter
    def primary_region(self, primary_region):
        """Sets the primary_region of this CreateStandbyWorkspacesRequest.


        :param primary_region: The primary_region of this CreateStandbyWorkspacesRequest.
        :type primary_region: str
        """
        if primary_region is None:
            raise ValueError("Invalid value for `primary_region`, must not be `None`")

        self._primary_region = primary_region

    @property
    def standby_workspaces(self):
        """Gets the standby_workspaces of this CreateStandbyWorkspacesRequest.


        :return: The standby_workspaces of this CreateStandbyWorkspacesRequest.
        :rtype: List
        """
        return self._standby_workspaces

    @standby_workspaces.setter
    def standby_workspaces(self, standby_workspaces):
        """Sets the standby_workspaces of this CreateStandbyWorkspacesRequest.


        :param standby_workspaces: The standby_workspaces of this CreateStandbyWorkspacesRequest.
        :type standby_workspaces: List
        """
        if standby_workspaces is None:
            raise ValueError("Invalid value for `standby_workspaces`, must not be `None`")

        self._standby_workspaces = standby_workspaces
