# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeConnectionAliasPermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_id: str=None, next_token: str=None, max_results: int=None):
        """DescribeConnectionAliasPermissionsRequest - a model defined in OpenAPI

        :param alias_id: The alias_id of this DescribeConnectionAliasPermissionsRequest.
        :param next_token: The next_token of this DescribeConnectionAliasPermissionsRequest.
        :param max_results: The max_results of this DescribeConnectionAliasPermissionsRequest.
        """
        self.openapi_types = {
            'alias_id': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'alias_id': 'AliasId',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._alias_id = alias_id
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectionAliasPermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnectionAliasPermissionsRequest of this DescribeConnectionAliasPermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_id(self):
        """Gets the alias_id of this DescribeConnectionAliasPermissionsRequest.


        :return: The alias_id of this DescribeConnectionAliasPermissionsRequest.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this DescribeConnectionAliasPermissionsRequest.


        :param alias_id: The alias_id of this DescribeConnectionAliasPermissionsRequest.
        :type alias_id: str
        """
        if alias_id is None:
            raise ValueError("Invalid value for `alias_id`, must not be `None`")

        self._alias_id = alias_id

    @property
    def next_token(self):
        """Gets the next_token of this DescribeConnectionAliasPermissionsRequest.


        :return: The next_token of this DescribeConnectionAliasPermissionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeConnectionAliasPermissionsRequest.


        :param next_token: The next_token of this DescribeConnectionAliasPermissionsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this DescribeConnectionAliasPermissionsRequest.


        :return: The max_results of this DescribeConnectionAliasPermissionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeConnectionAliasPermissionsRequest.


        :param max_results: The max_results of this DescribeConnectionAliasPermissionsRequest.
        :type max_results: int
        """

        self._max_results = max_results
