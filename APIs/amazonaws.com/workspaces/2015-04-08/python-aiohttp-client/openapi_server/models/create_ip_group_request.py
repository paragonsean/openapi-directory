# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateIpGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, group_desc: str=None, user_rules: List=None, tags: List=None):
        """CreateIpGroupRequest - a model defined in OpenAPI

        :param group_name: The group_name of this CreateIpGroupRequest.
        :param group_desc: The group_desc of this CreateIpGroupRequest.
        :param user_rules: The user_rules of this CreateIpGroupRequest.
        :param tags: The tags of this CreateIpGroupRequest.
        """
        self.openapi_types = {
            'group_name': str,
            'group_desc': str,
            'user_rules': List,
            'tags': List
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'group_desc': 'GroupDesc',
            'user_rules': 'UserRules',
            'tags': 'Tags'
        }

        self._group_name = group_name
        self._group_desc = group_desc
        self._user_rules = user_rules
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIpGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIpGroupRequest of this CreateIpGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this CreateIpGroupRequest.


        :return: The group_name of this CreateIpGroupRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CreateIpGroupRequest.


        :param group_name: The group_name of this CreateIpGroupRequest.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def group_desc(self):
        """Gets the group_desc of this CreateIpGroupRequest.


        :return: The group_desc of this CreateIpGroupRequest.
        :rtype: str
        """
        return self._group_desc

    @group_desc.setter
    def group_desc(self, group_desc):
        """Sets the group_desc of this CreateIpGroupRequest.


        :param group_desc: The group_desc of this CreateIpGroupRequest.
        :type group_desc: str
        """

        self._group_desc = group_desc

    @property
    def user_rules(self):
        """Gets the user_rules of this CreateIpGroupRequest.


        :return: The user_rules of this CreateIpGroupRequest.
        :rtype: List
        """
        return self._user_rules

    @user_rules.setter
    def user_rules(self, user_rules):
        """Sets the user_rules of this CreateIpGroupRequest.


        :param user_rules: The user_rules of this CreateIpGroupRequest.
        :type user_rules: List
        """

        self._user_rules = user_rules

    @property
    def tags(self):
        """Gets the tags of this CreateIpGroupRequest.


        :return: The tags of this CreateIpGroupRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateIpGroupRequest.


        :param tags: The tags of this CreateIpGroupRequest.
        :type tags: List
        """

        self._tags = tags
