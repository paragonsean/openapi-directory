# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tenancy import Tenancy
from openapi_server import util


class RegisterWorkspaceDirectoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directory_id: str=None, subnet_ids: List=None, enable_work_docs: bool=None, enable_self_service: bool=None, tenancy: Tenancy=None, tags: List=None):
        """RegisterWorkspaceDirectoryRequest - a model defined in OpenAPI

        :param directory_id: The directory_id of this RegisterWorkspaceDirectoryRequest.
        :param subnet_ids: The subnet_ids of this RegisterWorkspaceDirectoryRequest.
        :param enable_work_docs: The enable_work_docs of this RegisterWorkspaceDirectoryRequest.
        :param enable_self_service: The enable_self_service of this RegisterWorkspaceDirectoryRequest.
        :param tenancy: The tenancy of this RegisterWorkspaceDirectoryRequest.
        :param tags: The tags of this RegisterWorkspaceDirectoryRequest.
        """
        self.openapi_types = {
            'directory_id': str,
            'subnet_ids': List,
            'enable_work_docs': bool,
            'enable_self_service': bool,
            'tenancy': Tenancy,
            'tags': List
        }

        self.attribute_map = {
            'directory_id': 'DirectoryId',
            'subnet_ids': 'SubnetIds',
            'enable_work_docs': 'EnableWorkDocs',
            'enable_self_service': 'EnableSelfService',
            'tenancy': 'Tenancy',
            'tags': 'Tags'
        }

        self._directory_id = directory_id
        self._subnet_ids = subnet_ids
        self._enable_work_docs = enable_work_docs
        self._enable_self_service = enable_self_service
        self._tenancy = tenancy
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterWorkspaceDirectoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterWorkspaceDirectoryRequest of this RegisterWorkspaceDirectoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directory_id(self):
        """Gets the directory_id of this RegisterWorkspaceDirectoryRequest.


        :return: The directory_id of this RegisterWorkspaceDirectoryRequest.
        :rtype: str
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this RegisterWorkspaceDirectoryRequest.


        :param directory_id: The directory_id of this RegisterWorkspaceDirectoryRequest.
        :type directory_id: str
        """
        if directory_id is None:
            raise ValueError("Invalid value for `directory_id`, must not be `None`")

        self._directory_id = directory_id

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this RegisterWorkspaceDirectoryRequest.


        :return: The subnet_ids of this RegisterWorkspaceDirectoryRequest.
        :rtype: List
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this RegisterWorkspaceDirectoryRequest.


        :param subnet_ids: The subnet_ids of this RegisterWorkspaceDirectoryRequest.
        :type subnet_ids: List
        """

        self._subnet_ids = subnet_ids

    @property
    def enable_work_docs(self):
        """Gets the enable_work_docs of this RegisterWorkspaceDirectoryRequest.


        :return: The enable_work_docs of this RegisterWorkspaceDirectoryRequest.
        :rtype: bool
        """
        return self._enable_work_docs

    @enable_work_docs.setter
    def enable_work_docs(self, enable_work_docs):
        """Sets the enable_work_docs of this RegisterWorkspaceDirectoryRequest.


        :param enable_work_docs: The enable_work_docs of this RegisterWorkspaceDirectoryRequest.
        :type enable_work_docs: bool
        """
        if enable_work_docs is None:
            raise ValueError("Invalid value for `enable_work_docs`, must not be `None`")

        self._enable_work_docs = enable_work_docs

    @property
    def enable_self_service(self):
        """Gets the enable_self_service of this RegisterWorkspaceDirectoryRequest.


        :return: The enable_self_service of this RegisterWorkspaceDirectoryRequest.
        :rtype: bool
        """
        return self._enable_self_service

    @enable_self_service.setter
    def enable_self_service(self, enable_self_service):
        """Sets the enable_self_service of this RegisterWorkspaceDirectoryRequest.


        :param enable_self_service: The enable_self_service of this RegisterWorkspaceDirectoryRequest.
        :type enable_self_service: bool
        """

        self._enable_self_service = enable_self_service

    @property
    def tenancy(self):
        """Gets the tenancy of this RegisterWorkspaceDirectoryRequest.


        :return: The tenancy of this RegisterWorkspaceDirectoryRequest.
        :rtype: Tenancy
        """
        return self._tenancy

    @tenancy.setter
    def tenancy(self, tenancy):
        """Sets the tenancy of this RegisterWorkspaceDirectoryRequest.


        :param tenancy: The tenancy of this RegisterWorkspaceDirectoryRequest.
        :type tenancy: Tenancy
        """

        self._tenancy = tenancy

    @property
    def tags(self):
        """Gets the tags of this RegisterWorkspaceDirectoryRequest.


        :return: The tags of this RegisterWorkspaceDirectoryRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegisterWorkspaceDirectoryRequest.


        :param tags: The tags of this RegisterWorkspaceDirectoryRequest.
        :type tags: List
        """

        self._tags = tags
