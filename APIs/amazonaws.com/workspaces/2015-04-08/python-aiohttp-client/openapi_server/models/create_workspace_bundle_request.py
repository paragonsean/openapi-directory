# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_type import ComputeType
from openapi_server.models.root_storage import RootStorage
from openapi_server.models.user_storage import UserStorage
from openapi_server import util


class CreateWorkspaceBundleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_name: str=None, bundle_description: str=None, image_id: str=None, compute_type: ComputeType=None, user_storage: UserStorage=None, root_storage: RootStorage=None, tags: List=None):
        """CreateWorkspaceBundleRequest - a model defined in OpenAPI

        :param bundle_name: The bundle_name of this CreateWorkspaceBundleRequest.
        :param bundle_description: The bundle_description of this CreateWorkspaceBundleRequest.
        :param image_id: The image_id of this CreateWorkspaceBundleRequest.
        :param compute_type: The compute_type of this CreateWorkspaceBundleRequest.
        :param user_storage: The user_storage of this CreateWorkspaceBundleRequest.
        :param root_storage: The root_storage of this CreateWorkspaceBundleRequest.
        :param tags: The tags of this CreateWorkspaceBundleRequest.
        """
        self.openapi_types = {
            'bundle_name': str,
            'bundle_description': str,
            'image_id': str,
            'compute_type': ComputeType,
            'user_storage': UserStorage,
            'root_storage': RootStorage,
            'tags': List
        }

        self.attribute_map = {
            'bundle_name': 'BundleName',
            'bundle_description': 'BundleDescription',
            'image_id': 'ImageId',
            'compute_type': 'ComputeType',
            'user_storage': 'UserStorage',
            'root_storage': 'RootStorage',
            'tags': 'Tags'
        }

        self._bundle_name = bundle_name
        self._bundle_description = bundle_description
        self._image_id = image_id
        self._compute_type = compute_type
        self._user_storage = user_storage
        self._root_storage = root_storage
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkspaceBundleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkspaceBundleRequest of this CreateWorkspaceBundleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_name(self):
        """Gets the bundle_name of this CreateWorkspaceBundleRequest.


        :return: The bundle_name of this CreateWorkspaceBundleRequest.
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this CreateWorkspaceBundleRequest.


        :param bundle_name: The bundle_name of this CreateWorkspaceBundleRequest.
        :type bundle_name: str
        """
        if bundle_name is None:
            raise ValueError("Invalid value for `bundle_name`, must not be `None`")

        self._bundle_name = bundle_name

    @property
    def bundle_description(self):
        """Gets the bundle_description of this CreateWorkspaceBundleRequest.


        :return: The bundle_description of this CreateWorkspaceBundleRequest.
        :rtype: str
        """
        return self._bundle_description

    @bundle_description.setter
    def bundle_description(self, bundle_description):
        """Sets the bundle_description of this CreateWorkspaceBundleRequest.


        :param bundle_description: The bundle_description of this CreateWorkspaceBundleRequest.
        :type bundle_description: str
        """
        if bundle_description is None:
            raise ValueError("Invalid value for `bundle_description`, must not be `None`")

        self._bundle_description = bundle_description

    @property
    def image_id(self):
        """Gets the image_id of this CreateWorkspaceBundleRequest.


        :return: The image_id of this CreateWorkspaceBundleRequest.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CreateWorkspaceBundleRequest.


        :param image_id: The image_id of this CreateWorkspaceBundleRequest.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def compute_type(self):
        """Gets the compute_type of this CreateWorkspaceBundleRequest.


        :return: The compute_type of this CreateWorkspaceBundleRequest.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this CreateWorkspaceBundleRequest.


        :param compute_type: The compute_type of this CreateWorkspaceBundleRequest.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def user_storage(self):
        """Gets the user_storage of this CreateWorkspaceBundleRequest.


        :return: The user_storage of this CreateWorkspaceBundleRequest.
        :rtype: UserStorage
        """
        return self._user_storage

    @user_storage.setter
    def user_storage(self, user_storage):
        """Sets the user_storage of this CreateWorkspaceBundleRequest.


        :param user_storage: The user_storage of this CreateWorkspaceBundleRequest.
        :type user_storage: UserStorage
        """
        if user_storage is None:
            raise ValueError("Invalid value for `user_storage`, must not be `None`")

        self._user_storage = user_storage

    @property
    def root_storage(self):
        """Gets the root_storage of this CreateWorkspaceBundleRequest.


        :return: The root_storage of this CreateWorkspaceBundleRequest.
        :rtype: RootStorage
        """
        return self._root_storage

    @root_storage.setter
    def root_storage(self, root_storage):
        """Sets the root_storage of this CreateWorkspaceBundleRequest.


        :param root_storage: The root_storage of this CreateWorkspaceBundleRequest.
        :type root_storage: RootStorage
        """

        self._root_storage = root_storage

    @property
    def tags(self):
        """Gets the tags of this CreateWorkspaceBundleRequest.


        :return: The tags of this CreateWorkspaceBundleRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorkspaceBundleRequest.


        :param tags: The tags of this CreateWorkspaceBundleRequest.
        :type tags: List
        """

        self._tags = tags
