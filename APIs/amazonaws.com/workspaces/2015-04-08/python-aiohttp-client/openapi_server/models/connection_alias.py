# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_alias_state import ConnectionAliasState
from openapi_server import util


class ConnectionAlias(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_string: str=None, alias_id: str=None, state: ConnectionAliasState=None, owner_account_id: str=None, associations: List=None):
        """ConnectionAlias - a model defined in OpenAPI

        :param connection_string: The connection_string of this ConnectionAlias.
        :param alias_id: The alias_id of this ConnectionAlias.
        :param state: The state of this ConnectionAlias.
        :param owner_account_id: The owner_account_id of this ConnectionAlias.
        :param associations: The associations of this ConnectionAlias.
        """
        self.openapi_types = {
            'connection_string': str,
            'alias_id': str,
            'state': ConnectionAliasState,
            'owner_account_id': str,
            'associations': List
        }

        self.attribute_map = {
            'connection_string': 'ConnectionString',
            'alias_id': 'AliasId',
            'state': 'State',
            'owner_account_id': 'OwnerAccountId',
            'associations': 'Associations'
        }

        self._connection_string = connection_string
        self._alias_id = alias_id
        self._state = state
        self._owner_account_id = owner_account_id
        self._associations = associations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionAlias':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionAlias of this ConnectionAlias.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_string(self):
        """Gets the connection_string of this ConnectionAlias.


        :return: The connection_string of this ConnectionAlias.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this ConnectionAlias.


        :param connection_string: The connection_string of this ConnectionAlias.
        :type connection_string: str
        """

        self._connection_string = connection_string

    @property
    def alias_id(self):
        """Gets the alias_id of this ConnectionAlias.


        :return: The alias_id of this ConnectionAlias.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """Sets the alias_id of this ConnectionAlias.


        :param alias_id: The alias_id of this ConnectionAlias.
        :type alias_id: str
        """

        self._alias_id = alias_id

    @property
    def state(self):
        """Gets the state of this ConnectionAlias.


        :return: The state of this ConnectionAlias.
        :rtype: ConnectionAliasState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectionAlias.


        :param state: The state of this ConnectionAlias.
        :type state: ConnectionAliasState
        """

        self._state = state

    @property
    def owner_account_id(self):
        """Gets the owner_account_id of this ConnectionAlias.


        :return: The owner_account_id of this ConnectionAlias.
        :rtype: str
        """
        return self._owner_account_id

    @owner_account_id.setter
    def owner_account_id(self, owner_account_id):
        """Sets the owner_account_id of this ConnectionAlias.


        :param owner_account_id: The owner_account_id of this ConnectionAlias.
        :type owner_account_id: str
        """

        self._owner_account_id = owner_account_id

    @property
    def associations(self):
        """Gets the associations of this ConnectionAlias.


        :return: The associations of this ConnectionAlias.
        :rtype: List
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this ConnectionAlias.


        :param associations: The associations of this ConnectionAlias.
        :type associations: List
        """

        self._associations = associations
