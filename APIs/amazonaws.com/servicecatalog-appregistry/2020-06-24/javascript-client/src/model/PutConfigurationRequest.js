/**
 * AWS Service Catalog App Registry
 *  Amazon Web Services Service Catalog AppRegistry enables organizations to understand the application context of their Amazon Web Services resources. AppRegistry provides a repository of your applications, their resources, and the application metadata that you use within your enterprise.
 *
 * The version of the OpenAPI document: 2020-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutConfigurationRequestConfiguration from './PutConfigurationRequestConfiguration';

/**
 * The PutConfigurationRequest model module.
 * @module model/PutConfigurationRequest
 * @version 2020-06-24
 */
class PutConfigurationRequest {
    /**
     * Constructs a new <code>PutConfigurationRequest</code>.
     * @alias module:model/PutConfigurationRequest
     * @param configuration {module:model/PutConfigurationRequestConfiguration} 
     */
    constructor(configuration) { 
        
        PutConfigurationRequest.initialize(this, configuration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configuration) { 
        obj['configuration'] = configuration;
    }

    /**
     * Constructs a <code>PutConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/PutConfigurationRequest} The populated <code>PutConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutConfigurationRequest();

            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = PutConfigurationRequestConfiguration.constructFromObject(data['configuration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          PutConfigurationRequestConfiguration.validateJSON(data['configuration']);
        }

        return true;
    }


}

PutConfigurationRequest.RequiredProperties = ["configuration"];

/**
 * @member {module:model/PutConfigurationRequestConfiguration} configuration
 */
PutConfigurationRequest.prototype['configuration'] = undefined;






export default PutConfigurationRequest;

