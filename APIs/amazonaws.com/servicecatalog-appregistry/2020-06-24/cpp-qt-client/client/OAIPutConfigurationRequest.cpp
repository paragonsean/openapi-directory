/**
 * AWS Service Catalog App Registry
 *  Amazon Web Services Service Catalog AppRegistry enables organizations to understand the application context of their Amazon Web Services resources. AppRegistry provides a repository of your applications, their resources, and the application metadata that you use within your enterprise.
 *
 * The version of the OpenAPI document: 2020-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutConfigurationRequest::OAIPutConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutConfigurationRequest::OAIPutConfigurationRequest() {
    this->initializeModel();
}

OAIPutConfigurationRequest::~OAIPutConfigurationRequest() {}

void OAIPutConfigurationRequest::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;
}

void OAIPutConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;
}

QString OAIPutConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    return obj;
}

OAIPutConfigurationRequest_configuration OAIPutConfigurationRequest::getConfiguration() const {
    return m_configuration;
}
void OAIPutConfigurationRequest::setConfiguration(const OAIPutConfigurationRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIPutConfigurationRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIPutConfigurationRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIPutConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && true;
}

} // namespace OpenAPI
