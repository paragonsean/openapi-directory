/**
 * AWS Service Catalog App Registry
 *  Amazon Web Services Service Catalog AppRegistry enables organizations to understand the application context of their Amazon Web Services resources. AppRegistry provides a repository of your applications, their resources, and the application metadata that you use within your enterprise.
 *
 * The version of the OpenAPI document: 2020-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAttributeGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAttributeGroupRequest::OAICreateAttributeGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAttributeGroupRequest::OAICreateAttributeGroupRequest() {
    this->initializeModel();
}

OAICreateAttributeGroupRequest::~OAICreateAttributeGroupRequest() {}

void OAICreateAttributeGroupRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateAttributeGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAttributeGroupRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateAttributeGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAttributeGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateAttributeGroupRequest::getName() const {
    return m_name;
}
void OAICreateAttributeGroupRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAttributeGroupRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAttributeGroupRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAttributeGroupRequest::getDescription() const {
    return m_description;
}
void OAICreateAttributeGroupRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAttributeGroupRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAttributeGroupRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAttributeGroupRequest::getAttributes() const {
    return m_attributes;
}
void OAICreateAttributeGroupRequest::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICreateAttributeGroupRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICreateAttributeGroupRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap OAICreateAttributeGroupRequest::getTags() const {
    return m_tags;
}
void OAICreateAttributeGroupRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAttributeGroupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAttributeGroupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateAttributeGroupRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAttributeGroupRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAttributeGroupRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAttributeGroupRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateAttributeGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAttributeGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_attributes_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
