/**
 * AWS Service Catalog App Registry
 *  Amazon Web Services Service Catalog AppRegistry enables organizations to understand the application context of their Amazon Web Services resources. AppRegistry provides a repository of your applications, their resources, and the application metadata that you use within your enterprise.
 *
 * The version of the OpenAPI document: 2020-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutConfigurationRequest_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutConfigurationRequest_configuration::OAIPutConfigurationRequest_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutConfigurationRequest_configuration::OAIPutConfigurationRequest_configuration() {
    this->initializeModel();
}

OAIPutConfigurationRequest_configuration::~OAIPutConfigurationRequest_configuration() {}

void OAIPutConfigurationRequest_configuration::initializeModel() {

    m_tag_query_configuration_isSet = false;
    m_tag_query_configuration_isValid = false;
}

void OAIPutConfigurationRequest_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutConfigurationRequest_configuration::fromJsonObject(QJsonObject json) {

    m_tag_query_configuration_isValid = ::OpenAPI::fromJsonValue(m_tag_query_configuration, json[QString("tagQueryConfiguration")]);
    m_tag_query_configuration_isSet = !json[QString("tagQueryConfiguration")].isNull() && m_tag_query_configuration_isValid;
}

QString OAIPutConfigurationRequest_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutConfigurationRequest_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_query_configuration.isSet()) {
        obj.insert(QString("tagQueryConfiguration"), ::OpenAPI::toJsonValue(m_tag_query_configuration));
    }
    return obj;
}

OAIPutConfiguration_request_configuration_tagQueryConfiguration OAIPutConfigurationRequest_configuration::getTagQueryConfiguration() const {
    return m_tag_query_configuration;
}
void OAIPutConfigurationRequest_configuration::setTagQueryConfiguration(const OAIPutConfiguration_request_configuration_tagQueryConfiguration &tag_query_configuration) {
    m_tag_query_configuration = tag_query_configuration;
    m_tag_query_configuration_isSet = true;
}

bool OAIPutConfigurationRequest_configuration::is_tag_query_configuration_Set() const{
    return m_tag_query_configuration_isSet;
}

bool OAIPutConfigurationRequest_configuration::is_tag_query_configuration_Valid() const{
    return m_tag_query_configuration_isValid;
}

bool OAIPutConfigurationRequest_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_query_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutConfigurationRequest_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
