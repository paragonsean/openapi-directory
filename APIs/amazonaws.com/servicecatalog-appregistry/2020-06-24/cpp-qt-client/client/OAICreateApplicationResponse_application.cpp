/**
 * AWS Service Catalog App Registry
 *  Amazon Web Services Service Catalog AppRegistry enables organizations to understand the application context of their Amazon Web Services resources. AppRegistry provides a repository of your applications, their resources, and the application metadata that you use within your enterprise.
 *
 * The version of the OpenAPI document: 2020-06-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationResponse_application.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationResponse_application::OAICreateApplicationResponse_application(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationResponse_application::OAICreateApplicationResponse_application() {
    this->initializeModel();
}

OAICreateApplicationResponse_application::~OAICreateApplicationResponse_application() {}

void OAICreateApplicationResponse_application::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApplicationResponse_application::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationResponse_application::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateApplicationResponse_application::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationResponse_application::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApplicationResponse_application::getId() const {
    return m_id;
}
void OAICreateApplicationResponse_application::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateApplicationResponse_application::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateApplicationResponse_application::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateApplicationResponse_application::getArn() const {
    return m_arn;
}
void OAICreateApplicationResponse_application::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateApplicationResponse_application::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateApplicationResponse_application::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateApplicationResponse_application::getName() const {
    return m_name;
}
void OAICreateApplicationResponse_application::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApplicationResponse_application::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApplicationResponse_application::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApplicationResponse_application::getDescription() const {
    return m_description;
}
void OAICreateApplicationResponse_application::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApplicationResponse_application::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApplicationResponse_application::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICreateApplicationResponse_application::getCreationTime() const {
    return m_creation_time;
}
void OAICreateApplicationResponse_application::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateApplicationResponse_application::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateApplicationResponse_application::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICreateApplicationResponse_application::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAICreateApplicationResponse_application::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAICreateApplicationResponse_application::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAICreateApplicationResponse_application::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QMap OAICreateApplicationResponse_application::getTags() const {
    return m_tags;
}
void OAICreateApplicationResponse_application::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationResponse_application::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationResponse_application::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApplicationResponse_application::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationResponse_application::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
