# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None):
        """UpdateApplicationRequest - a model defined in OpenAPI

        :param name: The name of this UpdateApplicationRequest.
        :param description: The description of this UpdateApplicationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description'
        }

        self._name = name
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApplication_request of this UpdateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateApplicationRequest.

        Deprecated: The new name of the application. The name must be unique in the region in which you are updating the application. Please do not use this field as we have stopped supporting name updates.

        :return: The name of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateApplicationRequest.

        Deprecated: The new name of the application. The name must be unique in the region in which you are updating the application. Please do not use this field as we have stopped supporting name updates.

        :param name: The name of this UpdateApplicationRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[-.\w]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[-.\w]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateApplicationRequest.

        The new description of the application.

        :return: The description of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateApplicationRequest.

        The new description of the application.

        :param description: The description of this UpdateApplicationRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")

        self._description = description
