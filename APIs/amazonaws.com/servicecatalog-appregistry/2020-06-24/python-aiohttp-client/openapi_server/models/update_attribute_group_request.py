# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAttributeGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, attributes: str=None):
        """UpdateAttributeGroupRequest - a model defined in OpenAPI

        :param name: The name of this UpdateAttributeGroupRequest.
        :param description: The description of this UpdateAttributeGroupRequest.
        :param attributes: The attributes of this UpdateAttributeGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'attributes': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'attributes': 'attributes'
        }

        self._name = name
        self._description = description
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAttributeGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAttributeGroup_request of this UpdateAttributeGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateAttributeGroupRequest.

        Deprecated: The new name of the attribute group. The name must be unique in the region in which you are updating the attribute group. Please do not use this field as we have stopped supporting name updates.

        :return: The name of this UpdateAttributeGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAttributeGroupRequest.

        Deprecated: The new name of the attribute group. The name must be unique in the region in which you are updating the attribute group. Please do not use this field as we have stopped supporting name updates.

        :param name: The name of this UpdateAttributeGroupRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[-.\w]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[-.\w]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateAttributeGroupRequest.

        The description of the attribute group that the user provides.

        :return: The description of this UpdateAttributeGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAttributeGroupRequest.

        The description of the attribute group that the user provides.

        :param description: The description of this UpdateAttributeGroupRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")

        self._description = description

    @property
    def attributes(self):
        """Gets the attributes of this UpdateAttributeGroupRequest.

        A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.

        :return: The attributes of this UpdateAttributeGroupRequest.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UpdateAttributeGroupRequest.

        A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.

        :param attributes: The attributes of this UpdateAttributeGroupRequest.
        :type attributes: str
        """
        if attributes is not None and len(attributes) > 8000:
            raise ValueError("Invalid value for `attributes`, length must be less than or equal to `8000`")
        if attributes is not None and len(attributes) < 1:
            raise ValueError("Invalid value for `attributes`, length must be greater than or equal to `1`")
        if attributes is not None and not re.search(r'[\u0009\u000A\u000D\u0020-\u00FF]+', attributes):
            raise ValueError("Invalid value for `attributes`, must be a follow pattern or equal to `/[\u0009\u000A\u000D\u0020-\u00FF]+/`")

        self._attributes = attributes
