# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, tags: Dict[str, str]=None, client_token: str=None):
        """CreateApplicationRequest - a model defined in OpenAPI

        :param name: The name of this CreateApplicationRequest.
        :param description: The description of this CreateApplicationRequest.
        :param tags: The tags of this CreateApplicationRequest.
        :param client_token: The client_token of this CreateApplicationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'tags': Dict[str, str],
            'client_token': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'tags': 'tags',
            'client_token': 'clientToken'
        }

        self._name = name
        self._description = description
        self._tags = tags
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplication_request of this CreateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateApplicationRequest.

        The name of the application. The name must be unique in the region in which you are creating the application.

        :return: The name of this CreateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateApplicationRequest.

        The name of the application. The name must be unique in the region in which you are creating the application.

        :param name: The name of this CreateApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[-.\w]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[-.\w]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateApplicationRequest.

        The description of the application.

        :return: The description of this CreateApplicationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateApplicationRequest.

        The description of the application.

        :param description: The description of this CreateApplicationRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationRequest.

        Key-value pairs you can use to associate with the application.

        :return: The tags of this CreateApplicationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationRequest.

        Key-value pairs you can use to associate with the application.

        :param tags: The tags of this CreateApplicationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateApplicationRequest.

        A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.

        :return: The client_token of this CreateApplicationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateApplicationRequest.

        A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.

        :param client_token: The client_token of this CreateApplicationRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[a-zA-Z0-9][a-zA-Z0-9_-]*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[a-zA-Z0-9][a-zA-Z0-9_-]*/`")

        self._client_token = client_token
