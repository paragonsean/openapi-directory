/*
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateFraudsterRequest;
import org.openapitools.client.model.AssociateFraudsterResponse;
import org.openapitools.client.model.CreateDomainRequest;
import org.openapitools.client.model.CreateDomainResponse;
import org.openapitools.client.model.CreateWatchlistRequest;
import org.openapitools.client.model.CreateWatchlistResponse;
import org.openapitools.client.model.DeleteDomainRequest;
import org.openapitools.client.model.DeleteFraudsterRequest;
import org.openapitools.client.model.DeleteSpeakerRequest;
import org.openapitools.client.model.DeleteWatchlistRequest;
import org.openapitools.client.model.DescribeDomainRequest;
import org.openapitools.client.model.DescribeDomainResponse;
import org.openapitools.client.model.DescribeFraudsterRegistrationJobRequest;
import org.openapitools.client.model.DescribeFraudsterRegistrationJobResponse;
import org.openapitools.client.model.DescribeFraudsterRequest;
import org.openapitools.client.model.DescribeFraudsterResponse;
import org.openapitools.client.model.DescribeSpeakerEnrollmentJobRequest;
import org.openapitools.client.model.DescribeSpeakerEnrollmentJobResponse;
import org.openapitools.client.model.DescribeSpeakerRequest;
import org.openapitools.client.model.DescribeSpeakerResponse;
import org.openapitools.client.model.DescribeWatchlistRequest;
import org.openapitools.client.model.DescribeWatchlistResponse;
import org.openapitools.client.model.DisassociateFraudsterRequest;
import org.openapitools.client.model.DisassociateFraudsterResponse;
import org.openapitools.client.model.EvaluateSessionRequest;
import org.openapitools.client.model.EvaluateSessionResponse;
import org.openapitools.client.model.ListDomainsRequest;
import org.openapitools.client.model.ListDomainsResponse;
import org.openapitools.client.model.ListFraudsterRegistrationJobsRequest;
import org.openapitools.client.model.ListFraudsterRegistrationJobsResponse;
import org.openapitools.client.model.ListFraudstersRequest;
import org.openapitools.client.model.ListFraudstersResponse;
import org.openapitools.client.model.ListSpeakerEnrollmentJobsRequest;
import org.openapitools.client.model.ListSpeakerEnrollmentJobsResponse;
import org.openapitools.client.model.ListSpeakersRequest;
import org.openapitools.client.model.ListSpeakersResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListWatchlistsRequest;
import org.openapitools.client.model.ListWatchlistsResponse;
import org.openapitools.client.model.OptOutSpeakerRequest;
import org.openapitools.client.model.OptOutSpeakerResponse;
import org.openapitools.client.model.StartFraudsterRegistrationJobRequest;
import org.openapitools.client.model.StartFraudsterRegistrationJobResponse;
import org.openapitools.client.model.StartSpeakerEnrollmentJobRequest;
import org.openapitools.client.model.StartSpeakerEnrollmentJobResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateDomainRequest;
import org.openapitools.client.model.UpdateDomainResponse;
import org.openapitools.client.model.UpdateWatchlistRequest;
import org.openapitools.client.model.UpdateWatchlistResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates the fraudsters with the watchlist specified in the same domain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateFraudsterTest() throws ApiException {
        String xAmzTarget = null;
        AssociateFraudsterRequest associateFraudsterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateFraudsterResponse response = api.associateFraudster(xAmzTarget, associateFraudsterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a domain that contains all Amazon Connect Voice ID data, such as speakers, fraudsters, customer audio, and voiceprints. Every domain is created with a default watchlist that fraudsters can be a part of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainTest() throws ApiException {
        String xAmzTarget = null;
        CreateDomainRequest createDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDomainResponse response = api.createDomain(xAmzTarget, createDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a watchlist that fraudsters can be a part of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWatchlistTest() throws ApiException {
        String xAmzTarget = null;
        CreateWatchlistRequest createWatchlistRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWatchlistResponse response = api.createWatchlist(xAmzTarget, createWatchlistRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified domain from Voice ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDomainRequest deleteDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDomain(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified fraudster from Voice ID. This action disassociates the fraudster from any watchlists it is a part of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFraudsterTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFraudsterRequest deleteFraudsterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteFraudster(xAmzTarget, deleteFraudsterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified speaker from Voice ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpeakerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSpeakerRequest deleteSpeakerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSpeaker(xAmzTarget, deleteSpeakerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified watchlist from Voice ID. This API throws an exception when there are fraudsters in the watchlist that you are trying to delete. You must delete the fraudsters, and then delete the watchlist. Every domain has a default watchlist which cannot be deleted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWatchlistTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWatchlistRequest deleteWatchlistRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteWatchlist(xAmzTarget, deleteWatchlistRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDomainTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDomainRequest describeDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDomainResponse response = api.describeDomain(xAmzTarget, describeDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified fraudster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFraudsterTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFraudsterRequest describeFraudsterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFraudsterResponse response = api.describeFraudster(xAmzTarget, describeFraudsterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified fraudster registration job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFraudsterRegistrationJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFraudsterRegistrationJobRequest describeFraudsterRegistrationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFraudsterRegistrationJobResponse response = api.describeFraudsterRegistrationJob(xAmzTarget, describeFraudsterRegistrationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified speaker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSpeakerTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSpeakerRequest describeSpeakerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSpeakerResponse response = api.describeSpeaker(xAmzTarget, describeSpeakerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified speaker enrollment job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSpeakerEnrollmentJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSpeakerEnrollmentJobRequest describeSpeakerEnrollmentJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSpeakerEnrollmentJobResponse response = api.describeSpeakerEnrollmentJob(xAmzTarget, describeSpeakerEnrollmentJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified watchlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWatchlistTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWatchlistRequest describeWatchlistRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWatchlistResponse response = api.describeWatchlist(xAmzTarget, describeWatchlistRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the fraudsters from the watchlist specified. Voice ID always expects a fraudster to be a part of at least one watchlist. If you try to disassociate a fraudster from its only watchlist, a &lt;code&gt;ValidationException&lt;/code&gt; is thrown. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFraudsterTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateFraudsterRequest disassociateFraudsterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateFraudsterResponse response = api.disassociateFraudster(xAmzTarget, disassociateFraudsterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Evaluates a specified session based on audio data accumulated during a streaming Amazon Connect Voice ID call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluateSessionTest() throws ApiException {
        String xAmzTarget = null;
        EvaluateSessionRequest evaluateSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EvaluateSessionResponse response = api.evaluateSession(xAmzTarget, evaluateSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all the domains in the Amazon Web Services account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainsTest() throws ApiException {
        String xAmzTarget = null;
        ListDomainsRequest listDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDomainsResponse response = api.listDomains(xAmzTarget, listDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the fraudster registration jobs in the domain with the given &lt;code&gt;JobStatus&lt;/code&gt;. If &lt;code&gt;JobStatus&lt;/code&gt; is not provided, this lists all fraudster registration jobs in the given domain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFraudsterRegistrationJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListFraudsterRegistrationJobsRequest listFraudsterRegistrationJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFraudsterRegistrationJobsResponse response = api.listFraudsterRegistrationJobs(xAmzTarget, listFraudsterRegistrationJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all fraudsters in a specified watchlist or domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFraudstersTest() throws ApiException {
        String xAmzTarget = null;
        ListFraudstersRequest listFraudstersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFraudstersResponse response = api.listFraudsters(xAmzTarget, listFraudstersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the speaker enrollment jobs in the domain with the specified &lt;code&gt;JobStatus&lt;/code&gt;. If &lt;code&gt;JobStatus&lt;/code&gt; is not provided, this lists all jobs with all possible speaker enrollment job statuses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSpeakerEnrollmentJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListSpeakerEnrollmentJobsRequest listSpeakerEnrollmentJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSpeakerEnrollmentJobsResponse response = api.listSpeakerEnrollmentJobs(xAmzTarget, listSpeakerEnrollmentJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all speakers in a specified domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSpeakersTest() throws ApiException {
        String xAmzTarget = null;
        ListSpeakersRequest listSpeakersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSpeakersResponse response = api.listSpeakers(xAmzTarget, listSpeakersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags associated with a specified Voice ID resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all watchlists in a specified domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWatchlistsTest() throws ApiException {
        String xAmzTarget = null;
        ListWatchlistsRequest listWatchlistsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWatchlistsResponse response = api.listWatchlists(xAmzTarget, listWatchlistsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Opts out a speaker from Voice ID. A speaker can be opted out regardless of whether or not they already exist in Voice ID. If they don&#39;t yet exist, a new speaker is created in an opted out state. If they already exist, their existing status is overridden and they are opted out. Enrollment and evaluation authentication requests are rejected for opted out speakers, and opted out speakers have no voice embeddings stored in Voice ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optOutSpeakerTest() throws ApiException {
        String xAmzTarget = null;
        OptOutSpeakerRequest optOutSpeakerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OptOutSpeakerResponse response = api.optOutSpeaker(xAmzTarget, optOutSpeakerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a new batch fraudster registration job using provided details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFraudsterRegistrationJobTest() throws ApiException {
        String xAmzTarget = null;
        StartFraudsterRegistrationJobRequest startFraudsterRegistrationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartFraudsterRegistrationJobResponse response = api.startFraudsterRegistrationJob(xAmzTarget, startFraudsterRegistrationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a new batch speaker enrollment job using specified details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSpeakerEnrollmentJobTest() throws ApiException {
        String xAmzTarget = null;
        StartSpeakerEnrollmentJobRequest startSpeakerEnrollmentJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartSpeakerEnrollmentJobResponse response = api.startSpeakerEnrollmentJob(xAmzTarget, startSpeakerEnrollmentJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tags a Voice ID resource with the provided list of tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes specified tags from a specified Amazon Connect Voice ID resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified domain. This API has clobber behavior, and clears and replaces all attributes. If an optional field, such as &#39;Description&#39; is not provided, it is removed from the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDomainRequest updateDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDomainResponse response = api.updateDomain(xAmzTarget, updateDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified watchlist. Every domain has a default watchlist which cannot be updated. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWatchlistTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWatchlistRequest updateWatchlistRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWatchlistResponse response = api.updateWatchlist(xAmzTarget, updateWatchlistRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
