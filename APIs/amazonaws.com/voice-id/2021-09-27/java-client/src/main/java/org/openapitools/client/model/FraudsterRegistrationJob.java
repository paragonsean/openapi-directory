/*
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FraudsterRegistrationJobFailureDetails;
import org.openapitools.client.model.FraudsterRegistrationJobInputDataConfig;
import org.openapitools.client.model.FraudsterRegistrationJobJobProgress;
import org.openapitools.client.model.FraudsterRegistrationJobOutputDataConfig;
import org.openapitools.client.model.FraudsterRegistrationJobRegistrationConfig;
import org.openapitools.client.model.FraudsterRegistrationJobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains all the information about a fraudster registration job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:42.900446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FraudsterRegistrationJob {
  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN = "DataAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN)
  private String dataAccessRoleArn;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "DomainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_ENDED_AT = "EndedAt";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private OffsetDateTime endedAt;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "FailureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private FraudsterRegistrationJobFailureDetails failureDetails;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "InputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private FraudsterRegistrationJobInputDataConfig inputDataConfig;

  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_PROGRESS = "JobProgress";
  @SerializedName(SERIALIZED_NAME_JOB_PROGRESS)
  private FraudsterRegistrationJobJobProgress jobProgress;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private FraudsterRegistrationJobStatus jobStatus;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "OutputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private FraudsterRegistrationJobOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_REGISTRATION_CONFIG = "RegistrationConfig";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_CONFIG)
  private FraudsterRegistrationJobRegistrationConfig registrationConfig;

  public FraudsterRegistrationJob() {
  }

  public FraudsterRegistrationJob createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FraudsterRegistrationJob dataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
    return this;
  }

  /**
   * Get dataAccessRoleArn
   * @return dataAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getDataAccessRoleArn() {
    return dataAccessRoleArn;
  }

  public void setDataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
  }


  public FraudsterRegistrationJob domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public FraudsterRegistrationJob endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Get endedAt
   * @return endedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }


  public FraudsterRegistrationJob failureDetails(FraudsterRegistrationJobFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
    return this;
  }

  /**
   * Get failureDetails
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public FraudsterRegistrationJobFailureDetails getFailureDetails() {
    return failureDetails;
  }

  public void setFailureDetails(FraudsterRegistrationJobFailureDetails failureDetails) {
    this.failureDetails = failureDetails;
  }


  public FraudsterRegistrationJob inputDataConfig(FraudsterRegistrationJobInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nullable
  public FraudsterRegistrationJobInputDataConfig getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(FraudsterRegistrationJobInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public FraudsterRegistrationJob jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public FraudsterRegistrationJob jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public FraudsterRegistrationJob jobProgress(FraudsterRegistrationJobJobProgress jobProgress) {
    this.jobProgress = jobProgress;
    return this;
  }

  /**
   * Get jobProgress
   * @return jobProgress
   */
  @javax.annotation.Nullable
  public FraudsterRegistrationJobJobProgress getJobProgress() {
    return jobProgress;
  }

  public void setJobProgress(FraudsterRegistrationJobJobProgress jobProgress) {
    this.jobProgress = jobProgress;
  }


  public FraudsterRegistrationJob jobStatus(FraudsterRegistrationJobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public FraudsterRegistrationJobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(FraudsterRegistrationJobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public FraudsterRegistrationJob outputDataConfig(FraudsterRegistrationJobOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nullable
  public FraudsterRegistrationJobOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(FraudsterRegistrationJobOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public FraudsterRegistrationJob registrationConfig(FraudsterRegistrationJobRegistrationConfig registrationConfig) {
    this.registrationConfig = registrationConfig;
    return this;
  }

  /**
   * Get registrationConfig
   * @return registrationConfig
   */
  @javax.annotation.Nullable
  public FraudsterRegistrationJobRegistrationConfig getRegistrationConfig() {
    return registrationConfig;
  }

  public void setRegistrationConfig(FraudsterRegistrationJobRegistrationConfig registrationConfig) {
    this.registrationConfig = registrationConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FraudsterRegistrationJob fraudsterRegistrationJob = (FraudsterRegistrationJob) o;
    return Objects.equals(this.createdAt, fraudsterRegistrationJob.createdAt) &&
        Objects.equals(this.dataAccessRoleArn, fraudsterRegistrationJob.dataAccessRoleArn) &&
        Objects.equals(this.domainId, fraudsterRegistrationJob.domainId) &&
        Objects.equals(this.endedAt, fraudsterRegistrationJob.endedAt) &&
        Objects.equals(this.failureDetails, fraudsterRegistrationJob.failureDetails) &&
        Objects.equals(this.inputDataConfig, fraudsterRegistrationJob.inputDataConfig) &&
        Objects.equals(this.jobId, fraudsterRegistrationJob.jobId) &&
        Objects.equals(this.jobName, fraudsterRegistrationJob.jobName) &&
        Objects.equals(this.jobProgress, fraudsterRegistrationJob.jobProgress) &&
        Objects.equals(this.jobStatus, fraudsterRegistrationJob.jobStatus) &&
        Objects.equals(this.outputDataConfig, fraudsterRegistrationJob.outputDataConfig) &&
        Objects.equals(this.registrationConfig, fraudsterRegistrationJob.registrationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, dataAccessRoleArn, domainId, endedAt, failureDetails, inputDataConfig, jobId, jobName, jobProgress, jobStatus, outputDataConfig, registrationConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FraudsterRegistrationJob {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dataAccessRoleArn: ").append(toIndentedString(dataAccessRoleArn)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobProgress: ").append(toIndentedString(jobProgress)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    registrationConfig: ").append(toIndentedString(registrationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedAt");
    openapiFields.add("DataAccessRoleArn");
    openapiFields.add("DomainId");
    openapiFields.add("EndedAt");
    openapiFields.add("FailureDetails");
    openapiFields.add("InputDataConfig");
    openapiFields.add("JobId");
    openapiFields.add("JobName");
    openapiFields.add("JobProgress");
    openapiFields.add("JobStatus");
    openapiFields.add("OutputDataConfig");
    openapiFields.add("RegistrationConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FraudsterRegistrationJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FraudsterRegistrationJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FraudsterRegistrationJob is not found in the empty JSON string", FraudsterRegistrationJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FraudsterRegistrationJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FraudsterRegistrationJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `DataAccessRoleArn`
      if (jsonObj.get("DataAccessRoleArn") != null && !jsonObj.get("DataAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataAccessRoleArn"));
      }
      // validate the optional field `DomainId`
      if (jsonObj.get("DomainId") != null && !jsonObj.get("DomainId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainId"));
      }
      // validate the optional field `EndedAt`
      if (jsonObj.get("EndedAt") != null && !jsonObj.get("EndedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndedAt"));
      }
      // validate the optional field `FailureDetails`
      if (jsonObj.get("FailureDetails") != null && !jsonObj.get("FailureDetails").isJsonNull()) {
        FraudsterRegistrationJobFailureDetails.validateJsonElement(jsonObj.get("FailureDetails"));
      }
      // validate the optional field `InputDataConfig`
      if (jsonObj.get("InputDataConfig") != null && !jsonObj.get("InputDataConfig").isJsonNull()) {
        FraudsterRegistrationJobInputDataConfig.validateJsonElement(jsonObj.get("InputDataConfig"));
      }
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobProgress`
      if (jsonObj.get("JobProgress") != null && !jsonObj.get("JobProgress").isJsonNull()) {
        FraudsterRegistrationJobJobProgress.validateJsonElement(jsonObj.get("JobProgress"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        FraudsterRegistrationJobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `OutputDataConfig`
      if (jsonObj.get("OutputDataConfig") != null && !jsonObj.get("OutputDataConfig").isJsonNull()) {
        FraudsterRegistrationJobOutputDataConfig.validateJsonElement(jsonObj.get("OutputDataConfig"));
      }
      // validate the optional field `RegistrationConfig`
      if (jsonObj.get("RegistrationConfig") != null && !jsonObj.get("RegistrationConfig").isJsonNull()) {
        FraudsterRegistrationJobRegistrationConfig.validateJsonElement(jsonObj.get("RegistrationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FraudsterRegistrationJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FraudsterRegistrationJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FraudsterRegistrationJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FraudsterRegistrationJob.class));

       return (TypeAdapter<T>) new TypeAdapter<FraudsterRegistrationJob>() {
           @Override
           public void write(JsonWriter out, FraudsterRegistrationJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FraudsterRegistrationJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FraudsterRegistrationJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FraudsterRegistrationJob
   * @throws IOException if the JSON string is invalid with respect to FraudsterRegistrationJob
   */
  public static FraudsterRegistrationJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FraudsterRegistrationJob.class);
  }

  /**
   * Convert an instance of FraudsterRegistrationJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

