/*
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SpeakerStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OptOutSpeakerResponseSpeaker
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:42.900446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OptOutSpeakerResponseSpeaker {
  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_SPEAKER_ID = "CustomerSpeakerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SPEAKER_ID)
  private String customerSpeakerId;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "DomainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_GENERATED_SPEAKER_ID = "GeneratedSpeakerId";
  @SerializedName(SERIALIZED_NAME_GENERATED_SPEAKER_ID)
  private String generatedSpeakerId;

  public static final String SERIALIZED_NAME_LAST_ACCESSED_AT = "LastAccessedAt";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESSED_AT)
  private OffsetDateTime lastAccessedAt;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SpeakerStatus status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public OptOutSpeakerResponseSpeaker() {
  }

  public OptOutSpeakerResponseSpeaker createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OptOutSpeakerResponseSpeaker customerSpeakerId(String customerSpeakerId) {
    this.customerSpeakerId = customerSpeakerId;
    return this;
  }

  /**
   * Get customerSpeakerId
   * @return customerSpeakerId
   */
  @javax.annotation.Nullable
  public String getCustomerSpeakerId() {
    return customerSpeakerId;
  }

  public void setCustomerSpeakerId(String customerSpeakerId) {
    this.customerSpeakerId = customerSpeakerId;
  }


  public OptOutSpeakerResponseSpeaker domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public OptOutSpeakerResponseSpeaker generatedSpeakerId(String generatedSpeakerId) {
    this.generatedSpeakerId = generatedSpeakerId;
    return this;
  }

  /**
   * Get generatedSpeakerId
   * @return generatedSpeakerId
   */
  @javax.annotation.Nullable
  public String getGeneratedSpeakerId() {
    return generatedSpeakerId;
  }

  public void setGeneratedSpeakerId(String generatedSpeakerId) {
    this.generatedSpeakerId = generatedSpeakerId;
  }


  public OptOutSpeakerResponseSpeaker lastAccessedAt(OffsetDateTime lastAccessedAt) {
    this.lastAccessedAt = lastAccessedAt;
    return this;
  }

  /**
   * Get lastAccessedAt
   * @return lastAccessedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAccessedAt() {
    return lastAccessedAt;
  }

  public void setLastAccessedAt(OffsetDateTime lastAccessedAt) {
    this.lastAccessedAt = lastAccessedAt;
  }


  public OptOutSpeakerResponseSpeaker status(SpeakerStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SpeakerStatus getStatus() {
    return status;
  }

  public void setStatus(SpeakerStatus status) {
    this.status = status;
  }


  public OptOutSpeakerResponseSpeaker updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptOutSpeakerResponseSpeaker optOutSpeakerResponseSpeaker = (OptOutSpeakerResponseSpeaker) o;
    return Objects.equals(this.createdAt, optOutSpeakerResponseSpeaker.createdAt) &&
        Objects.equals(this.customerSpeakerId, optOutSpeakerResponseSpeaker.customerSpeakerId) &&
        Objects.equals(this.domainId, optOutSpeakerResponseSpeaker.domainId) &&
        Objects.equals(this.generatedSpeakerId, optOutSpeakerResponseSpeaker.generatedSpeakerId) &&
        Objects.equals(this.lastAccessedAt, optOutSpeakerResponseSpeaker.lastAccessedAt) &&
        Objects.equals(this.status, optOutSpeakerResponseSpeaker.status) &&
        Objects.equals(this.updatedAt, optOutSpeakerResponseSpeaker.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, customerSpeakerId, domainId, generatedSpeakerId, lastAccessedAt, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptOutSpeakerResponseSpeaker {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerSpeakerId: ").append(toIndentedString(customerSpeakerId)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    generatedSpeakerId: ").append(toIndentedString(generatedSpeakerId)).append("\n");
    sb.append("    lastAccessedAt: ").append(toIndentedString(lastAccessedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedAt");
    openapiFields.add("CustomerSpeakerId");
    openapiFields.add("DomainId");
    openapiFields.add("GeneratedSpeakerId");
    openapiFields.add("LastAccessedAt");
    openapiFields.add("Status");
    openapiFields.add("UpdatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OptOutSpeakerResponseSpeaker
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OptOutSpeakerResponseSpeaker.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptOutSpeakerResponseSpeaker is not found in the empty JSON string", OptOutSpeakerResponseSpeaker.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OptOutSpeakerResponseSpeaker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OptOutSpeakerResponseSpeaker` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `CustomerSpeakerId`
      if (jsonObj.get("CustomerSpeakerId") != null && !jsonObj.get("CustomerSpeakerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomerSpeakerId"));
      }
      // validate the optional field `DomainId`
      if (jsonObj.get("DomainId") != null && !jsonObj.get("DomainId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainId"));
      }
      // validate the optional field `GeneratedSpeakerId`
      if (jsonObj.get("GeneratedSpeakerId") != null && !jsonObj.get("GeneratedSpeakerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GeneratedSpeakerId"));
      }
      // validate the optional field `LastAccessedAt`
      if (jsonObj.get("LastAccessedAt") != null && !jsonObj.get("LastAccessedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastAccessedAt"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SpeakerStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `UpdatedAt`
      if (jsonObj.get("UpdatedAt") != null && !jsonObj.get("UpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptOutSpeakerResponseSpeaker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptOutSpeakerResponseSpeaker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptOutSpeakerResponseSpeaker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptOutSpeakerResponseSpeaker.class));

       return (TypeAdapter<T>) new TypeAdapter<OptOutSpeakerResponseSpeaker>() {
           @Override
           public void write(JsonWriter out, OptOutSpeakerResponseSpeaker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OptOutSpeakerResponseSpeaker read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OptOutSpeakerResponseSpeaker given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OptOutSpeakerResponseSpeaker
   * @throws IOException if the JSON string is invalid with respect to OptOutSpeakerResponseSpeaker
   */
  public static OptOutSpeakerResponseSpeaker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptOutSpeakerResponseSpeaker.class);
  }

  /**
   * Convert an instance of OptOutSpeakerResponseSpeaker to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

