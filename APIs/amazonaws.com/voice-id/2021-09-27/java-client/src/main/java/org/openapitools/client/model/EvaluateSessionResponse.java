/*
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EvaluateSessionResponseAuthenticationResult;
import org.openapitools.client.model.EvaluateSessionResponseFraudDetectionResult;
import org.openapitools.client.model.StreamingStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EvaluateSessionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:42.900446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EvaluateSessionResponse {
  public static final String SERIALIZED_NAME_AUTHENTICATION_RESULT = "AuthenticationResult";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_RESULT)
  private EvaluateSessionResponseAuthenticationResult authenticationResult;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "DomainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_FRAUD_DETECTION_RESULT = "FraudDetectionResult";
  @SerializedName(SERIALIZED_NAME_FRAUD_DETECTION_RESULT)
  private EvaluateSessionResponseFraudDetectionResult fraudDetectionResult;

  public static final String SERIALIZED_NAME_SESSION_ID = "SessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SESSION_NAME = "SessionName";
  @SerializedName(SERIALIZED_NAME_SESSION_NAME)
  private String sessionName;

  public static final String SERIALIZED_NAME_STREAMING_STATUS = "StreamingStatus";
  @SerializedName(SERIALIZED_NAME_STREAMING_STATUS)
  private StreamingStatus streamingStatus;

  public EvaluateSessionResponse() {
  }

  public EvaluateSessionResponse authenticationResult(EvaluateSessionResponseAuthenticationResult authenticationResult) {
    this.authenticationResult = authenticationResult;
    return this;
  }

  /**
   * Get authenticationResult
   * @return authenticationResult
   */
  @javax.annotation.Nullable
  public EvaluateSessionResponseAuthenticationResult getAuthenticationResult() {
    return authenticationResult;
  }

  public void setAuthenticationResult(EvaluateSessionResponseAuthenticationResult authenticationResult) {
    this.authenticationResult = authenticationResult;
  }


  public EvaluateSessionResponse domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public EvaluateSessionResponse fraudDetectionResult(EvaluateSessionResponseFraudDetectionResult fraudDetectionResult) {
    this.fraudDetectionResult = fraudDetectionResult;
    return this;
  }

  /**
   * Get fraudDetectionResult
   * @return fraudDetectionResult
   */
  @javax.annotation.Nullable
  public EvaluateSessionResponseFraudDetectionResult getFraudDetectionResult() {
    return fraudDetectionResult;
  }

  public void setFraudDetectionResult(EvaluateSessionResponseFraudDetectionResult fraudDetectionResult) {
    this.fraudDetectionResult = fraudDetectionResult;
  }


  public EvaluateSessionResponse sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public EvaluateSessionResponse sessionName(String sessionName) {
    this.sessionName = sessionName;
    return this;
  }

  /**
   * Get sessionName
   * @return sessionName
   */
  @javax.annotation.Nullable
  public String getSessionName() {
    return sessionName;
  }

  public void setSessionName(String sessionName) {
    this.sessionName = sessionName;
  }


  public EvaluateSessionResponse streamingStatus(StreamingStatus streamingStatus) {
    this.streamingStatus = streamingStatus;
    return this;
  }

  /**
   * Get streamingStatus
   * @return streamingStatus
   */
  @javax.annotation.Nullable
  public StreamingStatus getStreamingStatus() {
    return streamingStatus;
  }

  public void setStreamingStatus(StreamingStatus streamingStatus) {
    this.streamingStatus = streamingStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluateSessionResponse evaluateSessionResponse = (EvaluateSessionResponse) o;
    return Objects.equals(this.authenticationResult, evaluateSessionResponse.authenticationResult) &&
        Objects.equals(this.domainId, evaluateSessionResponse.domainId) &&
        Objects.equals(this.fraudDetectionResult, evaluateSessionResponse.fraudDetectionResult) &&
        Objects.equals(this.sessionId, evaluateSessionResponse.sessionId) &&
        Objects.equals(this.sessionName, evaluateSessionResponse.sessionName) &&
        Objects.equals(this.streamingStatus, evaluateSessionResponse.streamingStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationResult, domainId, fraudDetectionResult, sessionId, sessionName, streamingStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluateSessionResponse {\n");
    sb.append("    authenticationResult: ").append(toIndentedString(authenticationResult)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    fraudDetectionResult: ").append(toIndentedString(fraudDetectionResult)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    sessionName: ").append(toIndentedString(sessionName)).append("\n");
    sb.append("    streamingStatus: ").append(toIndentedString(streamingStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthenticationResult");
    openapiFields.add("DomainId");
    openapiFields.add("FraudDetectionResult");
    openapiFields.add("SessionId");
    openapiFields.add("SessionName");
    openapiFields.add("StreamingStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluateSessionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluateSessionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluateSessionResponse is not found in the empty JSON string", EvaluateSessionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluateSessionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluateSessionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AuthenticationResult`
      if (jsonObj.get("AuthenticationResult") != null && !jsonObj.get("AuthenticationResult").isJsonNull()) {
        EvaluateSessionResponseAuthenticationResult.validateJsonElement(jsonObj.get("AuthenticationResult"));
      }
      // validate the optional field `DomainId`
      if (jsonObj.get("DomainId") != null && !jsonObj.get("DomainId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainId"));
      }
      // validate the optional field `FraudDetectionResult`
      if (jsonObj.get("FraudDetectionResult") != null && !jsonObj.get("FraudDetectionResult").isJsonNull()) {
        EvaluateSessionResponseFraudDetectionResult.validateJsonElement(jsonObj.get("FraudDetectionResult"));
      }
      // validate the optional field `SessionId`
      if (jsonObj.get("SessionId") != null && !jsonObj.get("SessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SessionId"));
      }
      // validate the optional field `SessionName`
      if (jsonObj.get("SessionName") != null && !jsonObj.get("SessionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SessionName"));
      }
      // validate the optional field `StreamingStatus`
      if (jsonObj.get("StreamingStatus") != null && !jsonObj.get("StreamingStatus").isJsonNull()) {
        StreamingStatus.validateJsonElement(jsonObj.get("StreamingStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluateSessionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluateSessionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluateSessionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluateSessionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluateSessionResponse>() {
           @Override
           public void write(JsonWriter out, EvaluateSessionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluateSessionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluateSessionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluateSessionResponse
   * @throws IOException if the JSON string is invalid with respect to EvaluateSessionResponse
   */
  public static EvaluateSessionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluateSessionResponse.class);
  }

  /**
   * Convert an instance of EvaluateSessionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

