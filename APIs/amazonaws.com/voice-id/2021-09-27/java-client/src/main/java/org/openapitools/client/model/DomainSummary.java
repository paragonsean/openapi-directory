/*
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DomainServerSideEncryptionConfiguration;
import org.openapitools.client.model.DomainServerSideEncryptionUpdateDetails;
import org.openapitools.client.model.DomainStatus;
import org.openapitools.client.model.DomainSummaryWatchlistDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a summary of information about a domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:42.900446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainSummary {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "DomainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_DOMAIN_STATUS = "DomainStatus";
  @SerializedName(SERIALIZED_NAME_DOMAIN_STATUS)
  private DomainStatus domainStatus;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_CONFIGURATION = "ServerSideEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_CONFIGURATION)
  private DomainServerSideEncryptionConfiguration serverSideEncryptionConfiguration;

  public static final String SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_UPDATE_DETAILS = "ServerSideEncryptionUpdateDetails";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_UPDATE_DETAILS)
  private DomainServerSideEncryptionUpdateDetails serverSideEncryptionUpdateDetails;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WATCHLIST_DETAILS = "WatchlistDetails";
  @SerializedName(SERIALIZED_NAME_WATCHLIST_DETAILS)
  private DomainSummaryWatchlistDetails watchlistDetails;

  public DomainSummary() {
  }

  public DomainSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DomainSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DomainSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DomainSummary domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public DomainSummary domainStatus(DomainStatus domainStatus) {
    this.domainStatus = domainStatus;
    return this;
  }

  /**
   * Get domainStatus
   * @return domainStatus
   */
  @javax.annotation.Nullable
  public DomainStatus getDomainStatus() {
    return domainStatus;
  }

  public void setDomainStatus(DomainStatus domainStatus) {
    this.domainStatus = domainStatus;
  }


  public DomainSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DomainSummary serverSideEncryptionConfiguration(DomainServerSideEncryptionConfiguration serverSideEncryptionConfiguration) {
    this.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration;
    return this;
  }

  /**
   * Get serverSideEncryptionConfiguration
   * @return serverSideEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public DomainServerSideEncryptionConfiguration getServerSideEncryptionConfiguration() {
    return serverSideEncryptionConfiguration;
  }

  public void setServerSideEncryptionConfiguration(DomainServerSideEncryptionConfiguration serverSideEncryptionConfiguration) {
    this.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration;
  }


  public DomainSummary serverSideEncryptionUpdateDetails(DomainServerSideEncryptionUpdateDetails serverSideEncryptionUpdateDetails) {
    this.serverSideEncryptionUpdateDetails = serverSideEncryptionUpdateDetails;
    return this;
  }

  /**
   * Get serverSideEncryptionUpdateDetails
   * @return serverSideEncryptionUpdateDetails
   */
  @javax.annotation.Nullable
  public DomainServerSideEncryptionUpdateDetails getServerSideEncryptionUpdateDetails() {
    return serverSideEncryptionUpdateDetails;
  }

  public void setServerSideEncryptionUpdateDetails(DomainServerSideEncryptionUpdateDetails serverSideEncryptionUpdateDetails) {
    this.serverSideEncryptionUpdateDetails = serverSideEncryptionUpdateDetails;
  }


  public DomainSummary updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DomainSummary watchlistDetails(DomainSummaryWatchlistDetails watchlistDetails) {
    this.watchlistDetails = watchlistDetails;
    return this;
  }

  /**
   * Get watchlistDetails
   * @return watchlistDetails
   */
  @javax.annotation.Nullable
  public DomainSummaryWatchlistDetails getWatchlistDetails() {
    return watchlistDetails;
  }

  public void setWatchlistDetails(DomainSummaryWatchlistDetails watchlistDetails) {
    this.watchlistDetails = watchlistDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainSummary domainSummary = (DomainSummary) o;
    return Objects.equals(this.arn, domainSummary.arn) &&
        Objects.equals(this.createdAt, domainSummary.createdAt) &&
        Objects.equals(this.description, domainSummary.description) &&
        Objects.equals(this.domainId, domainSummary.domainId) &&
        Objects.equals(this.domainStatus, domainSummary.domainStatus) &&
        Objects.equals(this.name, domainSummary.name) &&
        Objects.equals(this.serverSideEncryptionConfiguration, domainSummary.serverSideEncryptionConfiguration) &&
        Objects.equals(this.serverSideEncryptionUpdateDetails, domainSummary.serverSideEncryptionUpdateDetails) &&
        Objects.equals(this.updatedAt, domainSummary.updatedAt) &&
        Objects.equals(this.watchlistDetails, domainSummary.watchlistDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, createdAt, description, domainId, domainStatus, name, serverSideEncryptionConfiguration, serverSideEncryptionUpdateDetails, updatedAt, watchlistDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainSummary {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    domainStatus: ").append(toIndentedString(domainStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverSideEncryptionConfiguration: ").append(toIndentedString(serverSideEncryptionConfiguration)).append("\n");
    sb.append("    serverSideEncryptionUpdateDetails: ").append(toIndentedString(serverSideEncryptionUpdateDetails)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    watchlistDetails: ").append(toIndentedString(watchlistDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("CreatedAt");
    openapiFields.add("Description");
    openapiFields.add("DomainId");
    openapiFields.add("DomainStatus");
    openapiFields.add("Name");
    openapiFields.add("ServerSideEncryptionConfiguration");
    openapiFields.add("ServerSideEncryptionUpdateDetails");
    openapiFields.add("UpdatedAt");
    openapiFields.add("WatchlistDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainSummary is not found in the empty JSON string", DomainSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DomainId`
      if (jsonObj.get("DomainId") != null && !jsonObj.get("DomainId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainId"));
      }
      // validate the optional field `DomainStatus`
      if (jsonObj.get("DomainStatus") != null && !jsonObj.get("DomainStatus").isJsonNull()) {
        DomainStatus.validateJsonElement(jsonObj.get("DomainStatus"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `ServerSideEncryptionConfiguration`
      if (jsonObj.get("ServerSideEncryptionConfiguration") != null && !jsonObj.get("ServerSideEncryptionConfiguration").isJsonNull()) {
        DomainServerSideEncryptionConfiguration.validateJsonElement(jsonObj.get("ServerSideEncryptionConfiguration"));
      }
      // validate the optional field `ServerSideEncryptionUpdateDetails`
      if (jsonObj.get("ServerSideEncryptionUpdateDetails") != null && !jsonObj.get("ServerSideEncryptionUpdateDetails").isJsonNull()) {
        DomainServerSideEncryptionUpdateDetails.validateJsonElement(jsonObj.get("ServerSideEncryptionUpdateDetails"));
      }
      // validate the optional field `UpdatedAt`
      if (jsonObj.get("UpdatedAt") != null && !jsonObj.get("UpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedAt"));
      }
      // validate the optional field `WatchlistDetails`
      if (jsonObj.get("WatchlistDetails") != null && !jsonObj.get("WatchlistDetails").isJsonNull()) {
        DomainSummaryWatchlistDetails.validateJsonElement(jsonObj.get("WatchlistDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainSummary>() {
           @Override
           public void write(JsonWriter out, DomainSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainSummary
   * @throws IOException if the JSON string is invalid with respect to DomainSummary
   */
  public static DomainSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainSummary.class);
  }

  /**
   * Convert an instance of DomainSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

