# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_fraudster_registration_job_request_input_data_config import StartFraudsterRegistrationJobRequestInputDataConfig
from openapi_server.models.start_fraudster_registration_job_request_output_data_config import StartFraudsterRegistrationJobRequestOutputDataConfig
from openapi_server.models.start_fraudster_registration_job_request_registration_config import StartFraudsterRegistrationJobRequestRegistrationConfig
from openapi_server import util


class StartFraudsterRegistrationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, data_access_role_arn: str=None, domain_id: str=None, input_data_config: StartFraudsterRegistrationJobRequestInputDataConfig=None, job_name: str=None, output_data_config: StartFraudsterRegistrationJobRequestOutputDataConfig=None, registration_config: StartFraudsterRegistrationJobRequestRegistrationConfig=None):
        """StartFraudsterRegistrationJobRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartFraudsterRegistrationJobRequest.
        :param data_access_role_arn: The data_access_role_arn of this StartFraudsterRegistrationJobRequest.
        :param domain_id: The domain_id of this StartFraudsterRegistrationJobRequest.
        :param input_data_config: The input_data_config of this StartFraudsterRegistrationJobRequest.
        :param job_name: The job_name of this StartFraudsterRegistrationJobRequest.
        :param output_data_config: The output_data_config of this StartFraudsterRegistrationJobRequest.
        :param registration_config: The registration_config of this StartFraudsterRegistrationJobRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'data_access_role_arn': str,
            'domain_id': str,
            'input_data_config': StartFraudsterRegistrationJobRequestInputDataConfig,
            'job_name': str,
            'output_data_config': StartFraudsterRegistrationJobRequestOutputDataConfig,
            'registration_config': StartFraudsterRegistrationJobRequestRegistrationConfig
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'data_access_role_arn': 'DataAccessRoleArn',
            'domain_id': 'DomainId',
            'input_data_config': 'InputDataConfig',
            'job_name': 'JobName',
            'output_data_config': 'OutputDataConfig',
            'registration_config': 'RegistrationConfig'
        }

        self._client_token = client_token
        self._data_access_role_arn = data_access_role_arn
        self._domain_id = domain_id
        self._input_data_config = input_data_config
        self._job_name = job_name
        self._output_data_config = output_data_config
        self._registration_config = registration_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartFraudsterRegistrationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartFraudsterRegistrationJobRequest of this StartFraudsterRegistrationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartFraudsterRegistrationJobRequest.


        :return: The client_token of this StartFraudsterRegistrationJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartFraudsterRegistrationJobRequest.


        :param client_token: The client_token of this StartFraudsterRegistrationJobRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this StartFraudsterRegistrationJobRequest.


        :return: The data_access_role_arn of this StartFraudsterRegistrationJobRequest.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this StartFraudsterRegistrationJobRequest.


        :param data_access_role_arn: The data_access_role_arn of this StartFraudsterRegistrationJobRequest.
        :type data_access_role_arn: str
        """
        if data_access_role_arn is None:
            raise ValueError("Invalid value for `data_access_role_arn`, must not be `None`")

        self._data_access_role_arn = data_access_role_arn

    @property
    def domain_id(self):
        """Gets the domain_id of this StartFraudsterRegistrationJobRequest.


        :return: The domain_id of this StartFraudsterRegistrationJobRequest.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this StartFraudsterRegistrationJobRequest.


        :param domain_id: The domain_id of this StartFraudsterRegistrationJobRequest.
        :type domain_id: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def input_data_config(self):
        """Gets the input_data_config of this StartFraudsterRegistrationJobRequest.


        :return: The input_data_config of this StartFraudsterRegistrationJobRequest.
        :rtype: StartFraudsterRegistrationJobRequestInputDataConfig
        """
        return self._input_data_config

    @input_data_config.setter
    def input_data_config(self, input_data_config):
        """Sets the input_data_config of this StartFraudsterRegistrationJobRequest.


        :param input_data_config: The input_data_config of this StartFraudsterRegistrationJobRequest.
        :type input_data_config: StartFraudsterRegistrationJobRequestInputDataConfig
        """
        if input_data_config is None:
            raise ValueError("Invalid value for `input_data_config`, must not be `None`")

        self._input_data_config = input_data_config

    @property
    def job_name(self):
        """Gets the job_name of this StartFraudsterRegistrationJobRequest.


        :return: The job_name of this StartFraudsterRegistrationJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StartFraudsterRegistrationJobRequest.


        :param job_name: The job_name of this StartFraudsterRegistrationJobRequest.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def output_data_config(self):
        """Gets the output_data_config of this StartFraudsterRegistrationJobRequest.


        :return: The output_data_config of this StartFraudsterRegistrationJobRequest.
        :rtype: StartFraudsterRegistrationJobRequestOutputDataConfig
        """
        return self._output_data_config

    @output_data_config.setter
    def output_data_config(self, output_data_config):
        """Sets the output_data_config of this StartFraudsterRegistrationJobRequest.


        :param output_data_config: The output_data_config of this StartFraudsterRegistrationJobRequest.
        :type output_data_config: StartFraudsterRegistrationJobRequestOutputDataConfig
        """
        if output_data_config is None:
            raise ValueError("Invalid value for `output_data_config`, must not be `None`")

        self._output_data_config = output_data_config

    @property
    def registration_config(self):
        """Gets the registration_config of this StartFraudsterRegistrationJobRequest.


        :return: The registration_config of this StartFraudsterRegistrationJobRequest.
        :rtype: StartFraudsterRegistrationJobRequestRegistrationConfig
        """
        return self._registration_config

    @registration_config.setter
    def registration_config(self, registration_config):
        """Sets the registration_config of this StartFraudsterRegistrationJobRequest.


        :param registration_config: The registration_config of this StartFraudsterRegistrationJobRequest.
        :type registration_config: StartFraudsterRegistrationJobRequestRegistrationConfig
        """

        self._registration_config = registration_config
