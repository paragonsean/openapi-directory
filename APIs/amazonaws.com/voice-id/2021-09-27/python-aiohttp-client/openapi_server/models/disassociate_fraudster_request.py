# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisassociateFraudsterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_id: str=None, fraudster_id: str=None, watchlist_id: str=None):
        """DisassociateFraudsterRequest - a model defined in OpenAPI

        :param domain_id: The domain_id of this DisassociateFraudsterRequest.
        :param fraudster_id: The fraudster_id of this DisassociateFraudsterRequest.
        :param watchlist_id: The watchlist_id of this DisassociateFraudsterRequest.
        """
        self.openapi_types = {
            'domain_id': str,
            'fraudster_id': str,
            'watchlist_id': str
        }

        self.attribute_map = {
            'domain_id': 'DomainId',
            'fraudster_id': 'FraudsterId',
            'watchlist_id': 'WatchlistId'
        }

        self._domain_id = domain_id
        self._fraudster_id = fraudster_id
        self._watchlist_id = watchlist_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateFraudsterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateFraudsterRequest of this DisassociateFraudsterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_id(self):
        """Gets the domain_id of this DisassociateFraudsterRequest.


        :return: The domain_id of this DisassociateFraudsterRequest.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this DisassociateFraudsterRequest.


        :param domain_id: The domain_id of this DisassociateFraudsterRequest.
        :type domain_id: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def fraudster_id(self):
        """Gets the fraudster_id of this DisassociateFraudsterRequest.


        :return: The fraudster_id of this DisassociateFraudsterRequest.
        :rtype: str
        """
        return self._fraudster_id

    @fraudster_id.setter
    def fraudster_id(self, fraudster_id):
        """Sets the fraudster_id of this DisassociateFraudsterRequest.


        :param fraudster_id: The fraudster_id of this DisassociateFraudsterRequest.
        :type fraudster_id: str
        """
        if fraudster_id is None:
            raise ValueError("Invalid value for `fraudster_id`, must not be `None`")

        self._fraudster_id = fraudster_id

    @property
    def watchlist_id(self):
        """Gets the watchlist_id of this DisassociateFraudsterRequest.


        :return: The watchlist_id of this DisassociateFraudsterRequest.
        :rtype: str
        """
        return self._watchlist_id

    @watchlist_id.setter
    def watchlist_id(self, watchlist_id):
        """Sets the watchlist_id of this DisassociateFraudsterRequest.


        :param watchlist_id: The watchlist_id of this DisassociateFraudsterRequest.
        :type watchlist_id: str
        """
        if watchlist_id is None:
            raise ValueError("Invalid value for `watchlist_id`, must not be `None`")

        self._watchlist_id = watchlist_id
