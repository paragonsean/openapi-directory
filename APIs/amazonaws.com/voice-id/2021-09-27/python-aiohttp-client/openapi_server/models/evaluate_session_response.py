# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluate_session_response_authentication_result import EvaluateSessionResponseAuthenticationResult
from openapi_server.models.evaluate_session_response_fraud_detection_result import EvaluateSessionResponseFraudDetectionResult
from openapi_server.models.streaming_status import StreamingStatus
from openapi_server import util


class EvaluateSessionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_result: EvaluateSessionResponseAuthenticationResult=None, domain_id: str=None, fraud_detection_result: EvaluateSessionResponseFraudDetectionResult=None, session_id: str=None, session_name: str=None, streaming_status: StreamingStatus=None):
        """EvaluateSessionResponse - a model defined in OpenAPI

        :param authentication_result: The authentication_result of this EvaluateSessionResponse.
        :param domain_id: The domain_id of this EvaluateSessionResponse.
        :param fraud_detection_result: The fraud_detection_result of this EvaluateSessionResponse.
        :param session_id: The session_id of this EvaluateSessionResponse.
        :param session_name: The session_name of this EvaluateSessionResponse.
        :param streaming_status: The streaming_status of this EvaluateSessionResponse.
        """
        self.openapi_types = {
            'authentication_result': EvaluateSessionResponseAuthenticationResult,
            'domain_id': str,
            'fraud_detection_result': EvaluateSessionResponseFraudDetectionResult,
            'session_id': str,
            'session_name': str,
            'streaming_status': StreamingStatus
        }

        self.attribute_map = {
            'authentication_result': 'AuthenticationResult',
            'domain_id': 'DomainId',
            'fraud_detection_result': 'FraudDetectionResult',
            'session_id': 'SessionId',
            'session_name': 'SessionName',
            'streaming_status': 'StreamingStatus'
        }

        self._authentication_result = authentication_result
        self._domain_id = domain_id
        self._fraud_detection_result = fraud_detection_result
        self._session_id = session_id
        self._session_name = session_name
        self._streaming_status = streaming_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluateSessionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluateSessionResponse of this EvaluateSessionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_result(self):
        """Gets the authentication_result of this EvaluateSessionResponse.


        :return: The authentication_result of this EvaluateSessionResponse.
        :rtype: EvaluateSessionResponseAuthenticationResult
        """
        return self._authentication_result

    @authentication_result.setter
    def authentication_result(self, authentication_result):
        """Sets the authentication_result of this EvaluateSessionResponse.


        :param authentication_result: The authentication_result of this EvaluateSessionResponse.
        :type authentication_result: EvaluateSessionResponseAuthenticationResult
        """

        self._authentication_result = authentication_result

    @property
    def domain_id(self):
        """Gets the domain_id of this EvaluateSessionResponse.


        :return: The domain_id of this EvaluateSessionResponse.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this EvaluateSessionResponse.


        :param domain_id: The domain_id of this EvaluateSessionResponse.
        :type domain_id: str
        """

        self._domain_id = domain_id

    @property
    def fraud_detection_result(self):
        """Gets the fraud_detection_result of this EvaluateSessionResponse.


        :return: The fraud_detection_result of this EvaluateSessionResponse.
        :rtype: EvaluateSessionResponseFraudDetectionResult
        """
        return self._fraud_detection_result

    @fraud_detection_result.setter
    def fraud_detection_result(self, fraud_detection_result):
        """Sets the fraud_detection_result of this EvaluateSessionResponse.


        :param fraud_detection_result: The fraud_detection_result of this EvaluateSessionResponse.
        :type fraud_detection_result: EvaluateSessionResponseFraudDetectionResult
        """

        self._fraud_detection_result = fraud_detection_result

    @property
    def session_id(self):
        """Gets the session_id of this EvaluateSessionResponse.


        :return: The session_id of this EvaluateSessionResponse.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this EvaluateSessionResponse.


        :param session_id: The session_id of this EvaluateSessionResponse.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def session_name(self):
        """Gets the session_name of this EvaluateSessionResponse.


        :return: The session_name of this EvaluateSessionResponse.
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name):
        """Sets the session_name of this EvaluateSessionResponse.


        :param session_name: The session_name of this EvaluateSessionResponse.
        :type session_name: str
        """

        self._session_name = session_name

    @property
    def streaming_status(self):
        """Gets the streaming_status of this EvaluateSessionResponse.


        :return: The streaming_status of this EvaluateSessionResponse.
        :rtype: StreamingStatus
        """
        return self._streaming_status

    @streaming_status.setter
    def streaming_status(self, streaming_status):
        """Sets the streaming_status of this EvaluateSessionResponse.


        :param streaming_status: The streaming_status of this EvaluateSessionResponse.
        :type streaming_status: StreamingStatus
        """

        self._streaming_status = streaming_status
