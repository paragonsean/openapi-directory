# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateWatchlistRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, domain_id: str=None, name: str=None):
        """CreateWatchlistRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateWatchlistRequest.
        :param description: The description of this CreateWatchlistRequest.
        :param domain_id: The domain_id of this CreateWatchlistRequest.
        :param name: The name of this CreateWatchlistRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'domain_id': str,
            'name': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'domain_id': 'DomainId',
            'name': 'Name'
        }

        self._client_token = client_token
        self._description = description
        self._domain_id = domain_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWatchlistRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWatchlistRequest of this CreateWatchlistRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateWatchlistRequest.


        :return: The client_token of this CreateWatchlistRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateWatchlistRequest.


        :param client_token: The client_token of this CreateWatchlistRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateWatchlistRequest.


        :return: The description of this CreateWatchlistRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWatchlistRequest.


        :param description: The description of this CreateWatchlistRequest.
        :type description: str
        """

        self._description = description

    @property
    def domain_id(self):
        """Gets the domain_id of this CreateWatchlistRequest.


        :return: The domain_id of this CreateWatchlistRequest.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this CreateWatchlistRequest.


        :param domain_id: The domain_id of this CreateWatchlistRequest.
        :type domain_id: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def name(self):
        """Gets the name of this CreateWatchlistRequest.


        :return: The name of this CreateWatchlistRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWatchlistRequest.


        :param name: The name of this CreateWatchlistRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
