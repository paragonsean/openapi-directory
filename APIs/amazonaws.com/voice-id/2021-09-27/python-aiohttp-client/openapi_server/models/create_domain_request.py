# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_domain_request_server_side_encryption_configuration import CreateDomainRequestServerSideEncryptionConfiguration
from openapi_server import util


class CreateDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, name: str=None, server_side_encryption_configuration: CreateDomainRequestServerSideEncryptionConfiguration=None, tags: List=None):
        """CreateDomainRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateDomainRequest.
        :param description: The description of this CreateDomainRequest.
        :param name: The name of this CreateDomainRequest.
        :param server_side_encryption_configuration: The server_side_encryption_configuration of this CreateDomainRequest.
        :param tags: The tags of this CreateDomainRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'name': str,
            'server_side_encryption_configuration': CreateDomainRequestServerSideEncryptionConfiguration,
            'tags': List
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'name': 'Name',
            'server_side_encryption_configuration': 'ServerSideEncryptionConfiguration',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._description = description
        self._name = name
        self._server_side_encryption_configuration = server_side_encryption_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDomainRequest of this CreateDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateDomainRequest.


        :return: The client_token of this CreateDomainRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDomainRequest.


        :param client_token: The client_token of this CreateDomainRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateDomainRequest.


        :return: The description of this CreateDomainRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDomainRequest.


        :param description: The description of this CreateDomainRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateDomainRequest.


        :return: The name of this CreateDomainRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDomainRequest.


        :param name: The name of this CreateDomainRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def server_side_encryption_configuration(self):
        """Gets the server_side_encryption_configuration of this CreateDomainRequest.


        :return: The server_side_encryption_configuration of this CreateDomainRequest.
        :rtype: CreateDomainRequestServerSideEncryptionConfiguration
        """
        return self._server_side_encryption_configuration

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, server_side_encryption_configuration):
        """Sets the server_side_encryption_configuration of this CreateDomainRequest.


        :param server_side_encryption_configuration: The server_side_encryption_configuration of this CreateDomainRequest.
        :type server_side_encryption_configuration: CreateDomainRequestServerSideEncryptionConfiguration
        """
        if server_side_encryption_configuration is None:
            raise ValueError("Invalid value for `server_side_encryption_configuration`, must not be `None`")

        self._server_side_encryption_configuration = server_side_encryption_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateDomainRequest.


        :return: The tags of this CreateDomainRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDomainRequest.


        :param tags: The tags of this CreateDomainRequest.
        :type tags: List
        """

        self._tags = tags
