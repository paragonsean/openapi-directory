/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonVoiceId);
  }
}(this, function(expect, AmazonVoiceId) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonVoiceId.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateFraudster', function() {
      it('should call associateFraudster successfully', function(done) {
        //uncomment below and update the code to test associateFraudster
        //instance.associateFraudster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDomain', function() {
      it('should call createDomain successfully', function(done) {
        //uncomment below and update the code to test createDomain
        //instance.createDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWatchlist', function() {
      it('should call createWatchlist successfully', function(done) {
        //uncomment below and update the code to test createWatchlist
        //instance.createWatchlist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDomain', function() {
      it('should call deleteDomain successfully', function(done) {
        //uncomment below and update the code to test deleteDomain
        //instance.deleteDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFraudster', function() {
      it('should call deleteFraudster successfully', function(done) {
        //uncomment below and update the code to test deleteFraudster
        //instance.deleteFraudster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSpeaker', function() {
      it('should call deleteSpeaker successfully', function(done) {
        //uncomment below and update the code to test deleteSpeaker
        //instance.deleteSpeaker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWatchlist', function() {
      it('should call deleteWatchlist successfully', function(done) {
        //uncomment below and update the code to test deleteWatchlist
        //instance.deleteWatchlist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomain', function() {
      it('should call describeDomain successfully', function(done) {
        //uncomment below and update the code to test describeDomain
        //instance.describeDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFraudster', function() {
      it('should call describeFraudster successfully', function(done) {
        //uncomment below and update the code to test describeFraudster
        //instance.describeFraudster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFraudsterRegistrationJob', function() {
      it('should call describeFraudsterRegistrationJob successfully', function(done) {
        //uncomment below and update the code to test describeFraudsterRegistrationJob
        //instance.describeFraudsterRegistrationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSpeaker', function() {
      it('should call describeSpeaker successfully', function(done) {
        //uncomment below and update the code to test describeSpeaker
        //instance.describeSpeaker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSpeakerEnrollmentJob', function() {
      it('should call describeSpeakerEnrollmentJob successfully', function(done) {
        //uncomment below and update the code to test describeSpeakerEnrollmentJob
        //instance.describeSpeakerEnrollmentJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWatchlist', function() {
      it('should call describeWatchlist successfully', function(done) {
        //uncomment below and update the code to test describeWatchlist
        //instance.describeWatchlist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateFraudster', function() {
      it('should call disassociateFraudster successfully', function(done) {
        //uncomment below and update the code to test disassociateFraudster
        //instance.disassociateFraudster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('evaluateSession', function() {
      it('should call evaluateSession successfully', function(done) {
        //uncomment below and update the code to test evaluateSession
        //instance.evaluateSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomains', function() {
      it('should call listDomains successfully', function(done) {
        //uncomment below and update the code to test listDomains
        //instance.listDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFraudsterRegistrationJobs', function() {
      it('should call listFraudsterRegistrationJobs successfully', function(done) {
        //uncomment below and update the code to test listFraudsterRegistrationJobs
        //instance.listFraudsterRegistrationJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFraudsters', function() {
      it('should call listFraudsters successfully', function(done) {
        //uncomment below and update the code to test listFraudsters
        //instance.listFraudsters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSpeakerEnrollmentJobs', function() {
      it('should call listSpeakerEnrollmentJobs successfully', function(done) {
        //uncomment below and update the code to test listSpeakerEnrollmentJobs
        //instance.listSpeakerEnrollmentJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSpeakers', function() {
      it('should call listSpeakers successfully', function(done) {
        //uncomment below and update the code to test listSpeakers
        //instance.listSpeakers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWatchlists', function() {
      it('should call listWatchlists successfully', function(done) {
        //uncomment below and update the code to test listWatchlists
        //instance.listWatchlists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('optOutSpeaker', function() {
      it('should call optOutSpeaker successfully', function(done) {
        //uncomment below and update the code to test optOutSpeaker
        //instance.optOutSpeaker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFraudsterRegistrationJob', function() {
      it('should call startFraudsterRegistrationJob successfully', function(done) {
        //uncomment below and update the code to test startFraudsterRegistrationJob
        //instance.startFraudsterRegistrationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSpeakerEnrollmentJob', function() {
      it('should call startSpeakerEnrollmentJob successfully', function(done) {
        //uncomment below and update the code to test startSpeakerEnrollmentJob
        //instance.startSpeakerEnrollmentJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDomain', function() {
      it('should call updateDomain successfully', function(done) {
        //uncomment below and update the code to test updateDomain
        //instance.updateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWatchlist', function() {
      it('should call updateWatchlist successfully', function(done) {
        //uncomment below and update the code to test updateWatchlist
        //instance.updateWatchlist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
