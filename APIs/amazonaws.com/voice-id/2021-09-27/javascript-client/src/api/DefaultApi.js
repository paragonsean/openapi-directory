/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateFraudsterRequest from '../model/AssociateFraudsterRequest';
import AssociateFraudsterResponse from '../model/AssociateFraudsterResponse';
import CreateDomainRequest from '../model/CreateDomainRequest';
import CreateDomainResponse from '../model/CreateDomainResponse';
import CreateWatchlistRequest from '../model/CreateWatchlistRequest';
import CreateWatchlistResponse from '../model/CreateWatchlistResponse';
import DeleteDomainRequest from '../model/DeleteDomainRequest';
import DeleteFraudsterRequest from '../model/DeleteFraudsterRequest';
import DeleteSpeakerRequest from '../model/DeleteSpeakerRequest';
import DeleteWatchlistRequest from '../model/DeleteWatchlistRequest';
import DescribeDomainRequest from '../model/DescribeDomainRequest';
import DescribeDomainResponse from '../model/DescribeDomainResponse';
import DescribeFraudsterRegistrationJobRequest from '../model/DescribeFraudsterRegistrationJobRequest';
import DescribeFraudsterRegistrationJobResponse from '../model/DescribeFraudsterRegistrationJobResponse';
import DescribeFraudsterRequest from '../model/DescribeFraudsterRequest';
import DescribeFraudsterResponse from '../model/DescribeFraudsterResponse';
import DescribeSpeakerEnrollmentJobRequest from '../model/DescribeSpeakerEnrollmentJobRequest';
import DescribeSpeakerEnrollmentJobResponse from '../model/DescribeSpeakerEnrollmentJobResponse';
import DescribeSpeakerRequest from '../model/DescribeSpeakerRequest';
import DescribeSpeakerResponse from '../model/DescribeSpeakerResponse';
import DescribeWatchlistRequest from '../model/DescribeWatchlistRequest';
import DescribeWatchlistResponse from '../model/DescribeWatchlistResponse';
import DisassociateFraudsterRequest from '../model/DisassociateFraudsterRequest';
import DisassociateFraudsterResponse from '../model/DisassociateFraudsterResponse';
import EvaluateSessionRequest from '../model/EvaluateSessionRequest';
import EvaluateSessionResponse from '../model/EvaluateSessionResponse';
import ListDomainsRequest from '../model/ListDomainsRequest';
import ListDomainsResponse from '../model/ListDomainsResponse';
import ListFraudsterRegistrationJobsRequest from '../model/ListFraudsterRegistrationJobsRequest';
import ListFraudsterRegistrationJobsResponse from '../model/ListFraudsterRegistrationJobsResponse';
import ListFraudstersRequest from '../model/ListFraudstersRequest';
import ListFraudstersResponse from '../model/ListFraudstersResponse';
import ListSpeakerEnrollmentJobsRequest from '../model/ListSpeakerEnrollmentJobsRequest';
import ListSpeakerEnrollmentJobsResponse from '../model/ListSpeakerEnrollmentJobsResponse';
import ListSpeakersRequest from '../model/ListSpeakersRequest';
import ListSpeakersResponse from '../model/ListSpeakersResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListWatchlistsRequest from '../model/ListWatchlistsRequest';
import ListWatchlistsResponse from '../model/ListWatchlistsResponse';
import OptOutSpeakerRequest from '../model/OptOutSpeakerRequest';
import OptOutSpeakerResponse from '../model/OptOutSpeakerResponse';
import StartFraudsterRegistrationJobRequest from '../model/StartFraudsterRegistrationJobRequest';
import StartFraudsterRegistrationJobResponse from '../model/StartFraudsterRegistrationJobResponse';
import StartSpeakerEnrollmentJobRequest from '../model/StartSpeakerEnrollmentJobRequest';
import StartSpeakerEnrollmentJobResponse from '../model/StartSpeakerEnrollmentJobResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateDomainRequest from '../model/UpdateDomainRequest';
import UpdateDomainResponse from '../model/UpdateDomainResponse';
import UpdateWatchlistRequest from '../model/UpdateWatchlistRequest';
import UpdateWatchlistResponse from '../model/UpdateWatchlistResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-09-27
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateFraudster operation.
     * @callback module:api/DefaultApi~associateFraudsterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateFraudsterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the fraudsters with the watchlist specified in the same domain. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateFraudsterRequest} associateFraudsterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateFraudsterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateFraudsterResponse}
     */
    associateFraudster(xAmzTarget, associateFraudsterRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateFraudsterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateFraudster");
      }
      // verify the required parameter 'associateFraudsterRequest' is set
      if (associateFraudsterRequest === undefined || associateFraudsterRequest === null) {
        throw new Error("Missing the required parameter 'associateFraudsterRequest' when calling associateFraudster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateFraudsterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.AssociateFraudster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDomain operation.
     * @callback module:api/DefaultApi~createDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain that contains all Amazon Connect Voice ID data, such as speakers, fraudsters, customer audio, and voiceprints. Every domain is created with a default watchlist that fraudsters can be a part of.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDomainRequest} createDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    createDomain(xAmzTarget, createDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDomain");
      }
      // verify the required parameter 'createDomainRequest' is set
      if (createDomainRequest === undefined || createDomainRequest === null) {
        throw new Error("Missing the required parameter 'createDomainRequest' when calling createDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.CreateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWatchlist operation.
     * @callback module:api/DefaultApi~createWatchlistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWatchlistResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a watchlist that fraudsters can be a part of.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWatchlistRequest} createWatchlistRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWatchlistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWatchlistResponse}
     */
    createWatchlist(xAmzTarget, createWatchlistRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWatchlistRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWatchlist");
      }
      // verify the required parameter 'createWatchlistRequest' is set
      if (createWatchlistRequest === undefined || createWatchlistRequest === null) {
        throw new Error("Missing the required parameter 'createWatchlistRequest' when calling createWatchlist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWatchlistResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.CreateWatchlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DefaultApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified domain from Voice ID.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDomainRequest} deleteDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomain(xAmzTarget, deleteDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDomain");
      }
      // verify the required parameter 'deleteDomainRequest' is set
      if (deleteDomainRequest === undefined || deleteDomainRequest === null) {
        throw new Error("Missing the required parameter 'deleteDomainRequest' when calling deleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DeleteDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFraudster operation.
     * @callback module:api/DefaultApi~deleteFraudsterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified fraudster from Voice ID. This action disassociates the fraudster from any watchlists it is a part of.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFraudsterRequest} deleteFraudsterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFraudsterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFraudster(xAmzTarget, deleteFraudsterRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFraudsterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFraudster");
      }
      // verify the required parameter 'deleteFraudsterRequest' is set
      if (deleteFraudsterRequest === undefined || deleteFraudsterRequest === null) {
        throw new Error("Missing the required parameter 'deleteFraudsterRequest' when calling deleteFraudster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DeleteFraudster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpeaker operation.
     * @callback module:api/DefaultApi~deleteSpeakerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified speaker from Voice ID.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSpeakerRequest} deleteSpeakerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSpeakerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpeaker(xAmzTarget, deleteSpeakerRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSpeakerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSpeaker");
      }
      // verify the required parameter 'deleteSpeakerRequest' is set
      if (deleteSpeakerRequest === undefined || deleteSpeakerRequest === null) {
        throw new Error("Missing the required parameter 'deleteSpeakerRequest' when calling deleteSpeaker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DeleteSpeaker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWatchlist operation.
     * @callback module:api/DefaultApi~deleteWatchlistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified watchlist from Voice ID. This API throws an exception when there are fraudsters in the watchlist that you are trying to delete. You must delete the fraudsters, and then delete the watchlist. Every domain has a default watchlist which cannot be deleted. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWatchlistRequest} deleteWatchlistRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWatchlistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWatchlist(xAmzTarget, deleteWatchlistRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWatchlistRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWatchlist");
      }
      // verify the required parameter 'deleteWatchlistRequest' is set
      if (deleteWatchlistRequest === undefined || deleteWatchlistRequest === null) {
        throw new Error("Missing the required parameter 'deleteWatchlistRequest' when calling deleteWatchlist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DeleteWatchlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomain operation.
     * @callback module:api/DefaultApi~describeDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDomainRequest} describeDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainResponse}
     */
    describeDomain(xAmzTarget, describeDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDomain");
      }
      // verify the required parameter 'describeDomainRequest' is set
      if (describeDomainRequest === undefined || describeDomainRequest === null) {
        throw new Error("Missing the required parameter 'describeDomainRequest' when calling describeDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DescribeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFraudster operation.
     * @callback module:api/DefaultApi~describeFraudsterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFraudsterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified fraudster.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFraudsterRequest} describeFraudsterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFraudsterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFraudsterResponse}
     */
    describeFraudster(xAmzTarget, describeFraudsterRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFraudsterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFraudster");
      }
      // verify the required parameter 'describeFraudsterRequest' is set
      if (describeFraudsterRequest === undefined || describeFraudsterRequest === null) {
        throw new Error("Missing the required parameter 'describeFraudsterRequest' when calling describeFraudster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFraudsterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DescribeFraudster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFraudsterRegistrationJob operation.
     * @callback module:api/DefaultApi~describeFraudsterRegistrationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFraudsterRegistrationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified fraudster registration job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFraudsterRegistrationJobRequest} describeFraudsterRegistrationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFraudsterRegistrationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFraudsterRegistrationJobResponse}
     */
    describeFraudsterRegistrationJob(xAmzTarget, describeFraudsterRegistrationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFraudsterRegistrationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFraudsterRegistrationJob");
      }
      // verify the required parameter 'describeFraudsterRegistrationJobRequest' is set
      if (describeFraudsterRegistrationJobRequest === undefined || describeFraudsterRegistrationJobRequest === null) {
        throw new Error("Missing the required parameter 'describeFraudsterRegistrationJobRequest' when calling describeFraudsterRegistrationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFraudsterRegistrationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DescribeFraudsterRegistrationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSpeaker operation.
     * @callback module:api/DefaultApi~describeSpeakerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSpeakerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified speaker.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSpeakerRequest} describeSpeakerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSpeakerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSpeakerResponse}
     */
    describeSpeaker(xAmzTarget, describeSpeakerRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSpeakerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSpeaker");
      }
      // verify the required parameter 'describeSpeakerRequest' is set
      if (describeSpeakerRequest === undefined || describeSpeakerRequest === null) {
        throw new Error("Missing the required parameter 'describeSpeakerRequest' when calling describeSpeaker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSpeakerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DescribeSpeaker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSpeakerEnrollmentJob operation.
     * @callback module:api/DefaultApi~describeSpeakerEnrollmentJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSpeakerEnrollmentJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified speaker enrollment job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSpeakerEnrollmentJobRequest} describeSpeakerEnrollmentJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSpeakerEnrollmentJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSpeakerEnrollmentJobResponse}
     */
    describeSpeakerEnrollmentJob(xAmzTarget, describeSpeakerEnrollmentJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSpeakerEnrollmentJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSpeakerEnrollmentJob");
      }
      // verify the required parameter 'describeSpeakerEnrollmentJobRequest' is set
      if (describeSpeakerEnrollmentJobRequest === undefined || describeSpeakerEnrollmentJobRequest === null) {
        throw new Error("Missing the required parameter 'describeSpeakerEnrollmentJobRequest' when calling describeSpeakerEnrollmentJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSpeakerEnrollmentJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DescribeSpeakerEnrollmentJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWatchlist operation.
     * @callback module:api/DefaultApi~describeWatchlistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWatchlistResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified watchlist.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWatchlistRequest} describeWatchlistRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWatchlistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWatchlistResponse}
     */
    describeWatchlist(xAmzTarget, describeWatchlistRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWatchlistRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWatchlist");
      }
      // verify the required parameter 'describeWatchlistRequest' is set
      if (describeWatchlistRequest === undefined || describeWatchlistRequest === null) {
        throw new Error("Missing the required parameter 'describeWatchlistRequest' when calling describeWatchlist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWatchlistResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DescribeWatchlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateFraudster operation.
     * @callback module:api/DefaultApi~disassociateFraudsterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateFraudsterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the fraudsters from the watchlist specified. Voice ID always expects a fraudster to be a part of at least one watchlist. If you try to disassociate a fraudster from its only watchlist, a <code>ValidationException</code> is thrown. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateFraudsterRequest} disassociateFraudsterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateFraudsterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateFraudsterResponse}
     */
    disassociateFraudster(xAmzTarget, disassociateFraudsterRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateFraudsterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateFraudster");
      }
      // verify the required parameter 'disassociateFraudsterRequest' is set
      if (disassociateFraudsterRequest === undefined || disassociateFraudsterRequest === null) {
        throw new Error("Missing the required parameter 'disassociateFraudsterRequest' when calling disassociateFraudster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateFraudsterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.DisassociateFraudster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluateSession operation.
     * @callback module:api/DefaultApi~evaluateSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EvaluateSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluates a specified session based on audio data accumulated during a streaming Amazon Connect Voice ID call.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/EvaluateSessionRequest} evaluateSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~evaluateSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EvaluateSessionResponse}
     */
    evaluateSession(xAmzTarget, evaluateSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = evaluateSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling evaluateSession");
      }
      // verify the required parameter 'evaluateSessionRequest' is set
      if (evaluateSessionRequest === undefined || evaluateSessionRequest === null) {
        throw new Error("Missing the required parameter 'evaluateSessionRequest' when calling evaluateSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvaluateSessionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.EvaluateSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomains operation.
     * @callback module:api/DefaultApi~listDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the domains in the Amazon Web Services account. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDomainsRequest} listDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsResponse}
     */
    listDomains(xAmzTarget, listDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDomainsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDomains");
      }
      // verify the required parameter 'listDomainsRequest' is set
      if (listDomainsRequest === undefined || listDomainsRequest === null) {
        throw new Error("Missing the required parameter 'listDomainsRequest' when calling listDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDomainsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFraudsterRegistrationJobs operation.
     * @callback module:api/DefaultApi~listFraudsterRegistrationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFraudsterRegistrationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the fraudster registration jobs in the domain with the given <code>JobStatus</code>. If <code>JobStatus</code> is not provided, this lists all fraudster registration jobs in the given domain. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFraudsterRegistrationJobsRequest} listFraudsterRegistrationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFraudsterRegistrationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFraudsterRegistrationJobsResponse}
     */
    listFraudsterRegistrationJobs(xAmzTarget, listFraudsterRegistrationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFraudsterRegistrationJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFraudsterRegistrationJobs");
      }
      // verify the required parameter 'listFraudsterRegistrationJobsRequest' is set
      if (listFraudsterRegistrationJobsRequest === undefined || listFraudsterRegistrationJobsRequest === null) {
        throw new Error("Missing the required parameter 'listFraudsterRegistrationJobsRequest' when calling listFraudsterRegistrationJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFraudsterRegistrationJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListFraudsterRegistrationJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFraudsters operation.
     * @callback module:api/DefaultApi~listFraudstersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFraudstersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all fraudsters in a specified watchlist or domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFraudstersRequest} listFraudstersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFraudstersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFraudstersResponse}
     */
    listFraudsters(xAmzTarget, listFraudstersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFraudstersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFraudsters");
      }
      // verify the required parameter 'listFraudstersRequest' is set
      if (listFraudstersRequest === undefined || listFraudstersRequest === null) {
        throw new Error("Missing the required parameter 'listFraudstersRequest' when calling listFraudsters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFraudstersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListFraudsters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpeakerEnrollmentJobs operation.
     * @callback module:api/DefaultApi~listSpeakerEnrollmentJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpeakerEnrollmentJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the speaker enrollment jobs in the domain with the specified <code>JobStatus</code>. If <code>JobStatus</code> is not provided, this lists all jobs with all possible speaker enrollment job statuses.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSpeakerEnrollmentJobsRequest} listSpeakerEnrollmentJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSpeakerEnrollmentJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpeakerEnrollmentJobsResponse}
     */
    listSpeakerEnrollmentJobs(xAmzTarget, listSpeakerEnrollmentJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSpeakerEnrollmentJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSpeakerEnrollmentJobs");
      }
      // verify the required parameter 'listSpeakerEnrollmentJobsRequest' is set
      if (listSpeakerEnrollmentJobsRequest === undefined || listSpeakerEnrollmentJobsRequest === null) {
        throw new Error("Missing the required parameter 'listSpeakerEnrollmentJobsRequest' when calling listSpeakerEnrollmentJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSpeakerEnrollmentJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListSpeakerEnrollmentJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpeakers operation.
     * @callback module:api/DefaultApi~listSpeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpeakersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all speakers in a specified domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSpeakersRequest} listSpeakersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSpeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpeakersResponse}
     */
    listSpeakers(xAmzTarget, listSpeakersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSpeakersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSpeakers");
      }
      // verify the required parameter 'listSpeakersRequest' is set
      if (listSpeakersRequest === undefined || listSpeakersRequest === null) {
        throw new Error("Missing the required parameter 'listSpeakersRequest' when calling listSpeakers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSpeakersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListSpeakers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags associated with a specified Voice ID resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWatchlists operation.
     * @callback module:api/DefaultApi~listWatchlistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWatchlistsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all watchlists in a specified domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWatchlistsRequest} listWatchlistsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWatchlistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWatchlistsResponse}
     */
    listWatchlists(xAmzTarget, listWatchlistsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWatchlistsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWatchlists");
      }
      // verify the required parameter 'listWatchlistsRequest' is set
      if (listWatchlistsRequest === undefined || listWatchlistsRequest === null) {
        throw new Error("Missing the required parameter 'listWatchlistsRequest' when calling listWatchlists");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWatchlistsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.ListWatchlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optOutSpeaker operation.
     * @callback module:api/DefaultApi~optOutSpeakerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OptOutSpeakerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Opts out a speaker from Voice ID. A speaker can be opted out regardless of whether or not they already exist in Voice ID. If they don't yet exist, a new speaker is created in an opted out state. If they already exist, their existing status is overridden and they are opted out. Enrollment and evaluation authentication requests are rejected for opted out speakers, and opted out speakers have no voice embeddings stored in Voice ID.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/OptOutSpeakerRequest} optOutSpeakerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~optOutSpeakerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OptOutSpeakerResponse}
     */
    optOutSpeaker(xAmzTarget, optOutSpeakerRequest, opts, callback) {
      opts = opts || {};
      let postBody = optOutSpeakerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling optOutSpeaker");
      }
      // verify the required parameter 'optOutSpeakerRequest' is set
      if (optOutSpeakerRequest === undefined || optOutSpeakerRequest === null) {
        throw new Error("Missing the required parameter 'optOutSpeakerRequest' when calling optOutSpeaker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OptOutSpeakerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.OptOutSpeaker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFraudsterRegistrationJob operation.
     * @callback module:api/DefaultApi~startFraudsterRegistrationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartFraudsterRegistrationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a new batch fraudster registration job using provided details.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartFraudsterRegistrationJobRequest} startFraudsterRegistrationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFraudsterRegistrationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartFraudsterRegistrationJobResponse}
     */
    startFraudsterRegistrationJob(xAmzTarget, startFraudsterRegistrationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFraudsterRegistrationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startFraudsterRegistrationJob");
      }
      // verify the required parameter 'startFraudsterRegistrationJobRequest' is set
      if (startFraudsterRegistrationJobRequest === undefined || startFraudsterRegistrationJobRequest === null) {
        throw new Error("Missing the required parameter 'startFraudsterRegistrationJobRequest' when calling startFraudsterRegistrationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartFraudsterRegistrationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.StartFraudsterRegistrationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSpeakerEnrollmentJob operation.
     * @callback module:api/DefaultApi~startSpeakerEnrollmentJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSpeakerEnrollmentJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a new batch speaker enrollment job using specified details.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartSpeakerEnrollmentJobRequest} startSpeakerEnrollmentJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSpeakerEnrollmentJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSpeakerEnrollmentJobResponse}
     */
    startSpeakerEnrollmentJob(xAmzTarget, startSpeakerEnrollmentJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSpeakerEnrollmentJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startSpeakerEnrollmentJob");
      }
      // verify the required parameter 'startSpeakerEnrollmentJobRequest' is set
      if (startSpeakerEnrollmentJobRequest === undefined || startSpeakerEnrollmentJobRequest === null) {
        throw new Error("Missing the required parameter 'startSpeakerEnrollmentJobRequest' when calling startSpeakerEnrollmentJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSpeakerEnrollmentJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.StartSpeakerEnrollmentJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags a Voice ID resource with the provided list of tags.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes specified tags from a specified Amazon Connect Voice ID resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomain operation.
     * @callback module:api/DefaultApi~updateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified domain. This API has clobber behavior, and clears and replaces all attributes. If an optional field, such as 'Description' is not provided, it is removed from the domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDomainRequest} updateDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainResponse}
     */
    updateDomain(xAmzTarget, updateDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDomain");
      }
      // verify the required parameter 'updateDomainRequest' is set
      if (updateDomainRequest === undefined || updateDomainRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainRequest' when calling updateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.UpdateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWatchlist operation.
     * @callback module:api/DefaultApi~updateWatchlistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWatchlistResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified watchlist. Every domain has a default watchlist which cannot be updated. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateWatchlistRequest} updateWatchlistRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWatchlistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWatchlistResponse}
     */
    updateWatchlist(xAmzTarget, updateWatchlistRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWatchlistRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateWatchlist");
      }
      // verify the required parameter 'updateWatchlistRequest' is set
      if (updateWatchlistRequest === undefined || updateWatchlistRequest === null) {
        throw new Error("Missing the required parameter 'updateWatchlistRequest' when calling updateWatchlist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWatchlistResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VoiceID.UpdateWatchlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
