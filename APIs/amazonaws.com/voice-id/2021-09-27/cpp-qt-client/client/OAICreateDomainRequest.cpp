/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomainRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomainRequest::OAICreateDomainRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomainRequest::OAICreateDomainRequest() {
    this->initializeModel();
}

OAICreateDomainRequest::~OAICreateDomainRequest() {}

void OAICreateDomainRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDomainRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomainRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("ServerSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("ServerSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateDomainRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomainRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("ServerSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDomainRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDomainRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDomainRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDomainRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateDomainRequest::getDescription() const {
    return m_description;
}
void OAICreateDomainRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDomainRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDomainRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateDomainRequest::getName() const {
    return m_name;
}
void OAICreateDomainRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDomainRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDomainRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateDomainRequest_ServerSideEncryptionConfiguration OAICreateDomainRequest::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAICreateDomainRequest::setServerSideEncryptionConfiguration(const OAICreateDomainRequest_ServerSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAICreateDomainRequest::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAICreateDomainRequest::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

QList OAICreateDomainRequest::getTags() const {
    return m_tags;
}
void OAICreateDomainRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDomainRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDomainRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDomainRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomainRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_server_side_encryption_configuration_isValid && true;
}

} // namespace OpenAPI
