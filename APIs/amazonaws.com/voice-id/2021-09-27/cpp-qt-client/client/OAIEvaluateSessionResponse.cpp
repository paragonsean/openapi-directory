/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluateSessionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluateSessionResponse::OAIEvaluateSessionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluateSessionResponse::OAIEvaluateSessionResponse() {
    this->initializeModel();
}

OAIEvaluateSessionResponse::~OAIEvaluateSessionResponse() {}

void OAIEvaluateSessionResponse::initializeModel() {

    m_authentication_result_isSet = false;
    m_authentication_result_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_fraud_detection_result_isSet = false;
    m_fraud_detection_result_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_session_name_isSet = false;
    m_session_name_isValid = false;

    m_streaming_status_isSet = false;
    m_streaming_status_isValid = false;
}

void OAIEvaluateSessionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluateSessionResponse::fromJsonObject(QJsonObject json) {

    m_authentication_result_isValid = ::OpenAPI::fromJsonValue(m_authentication_result, json[QString("AuthenticationResult")]);
    m_authentication_result_isSet = !json[QString("AuthenticationResult")].isNull() && m_authentication_result_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_fraud_detection_result_isValid = ::OpenAPI::fromJsonValue(m_fraud_detection_result, json[QString("FraudDetectionResult")]);
    m_fraud_detection_result_isSet = !json[QString("FraudDetectionResult")].isNull() && m_fraud_detection_result_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("SessionId")]);
    m_session_id_isSet = !json[QString("SessionId")].isNull() && m_session_id_isValid;

    m_session_name_isValid = ::OpenAPI::fromJsonValue(m_session_name, json[QString("SessionName")]);
    m_session_name_isSet = !json[QString("SessionName")].isNull() && m_session_name_isValid;

    m_streaming_status_isValid = ::OpenAPI::fromJsonValue(m_streaming_status, json[QString("StreamingStatus")]);
    m_streaming_status_isSet = !json[QString("StreamingStatus")].isNull() && m_streaming_status_isValid;
}

QString OAIEvaluateSessionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluateSessionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_result.isSet()) {
        obj.insert(QString("AuthenticationResult"), ::OpenAPI::toJsonValue(m_authentication_result));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_fraud_detection_result.isSet()) {
        obj.insert(QString("FraudDetectionResult"), ::OpenAPI::toJsonValue(m_fraud_detection_result));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("SessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_session_name_isSet) {
        obj.insert(QString("SessionName"), ::OpenAPI::toJsonValue(m_session_name));
    }
    if (m_streaming_status.isSet()) {
        obj.insert(QString("StreamingStatus"), ::OpenAPI::toJsonValue(m_streaming_status));
    }
    return obj;
}

OAIEvaluateSessionResponse_AuthenticationResult OAIEvaluateSessionResponse::getAuthenticationResult() const {
    return m_authentication_result;
}
void OAIEvaluateSessionResponse::setAuthenticationResult(const OAIEvaluateSessionResponse_AuthenticationResult &authentication_result) {
    m_authentication_result = authentication_result;
    m_authentication_result_isSet = true;
}

bool OAIEvaluateSessionResponse::is_authentication_result_Set() const{
    return m_authentication_result_isSet;
}

bool OAIEvaluateSessionResponse::is_authentication_result_Valid() const{
    return m_authentication_result_isValid;
}

QString OAIEvaluateSessionResponse::getDomainId() const {
    return m_domain_id;
}
void OAIEvaluateSessionResponse::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIEvaluateSessionResponse::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIEvaluateSessionResponse::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

OAIEvaluateSessionResponse_FraudDetectionResult OAIEvaluateSessionResponse::getFraudDetectionResult() const {
    return m_fraud_detection_result;
}
void OAIEvaluateSessionResponse::setFraudDetectionResult(const OAIEvaluateSessionResponse_FraudDetectionResult &fraud_detection_result) {
    m_fraud_detection_result = fraud_detection_result;
    m_fraud_detection_result_isSet = true;
}

bool OAIEvaluateSessionResponse::is_fraud_detection_result_Set() const{
    return m_fraud_detection_result_isSet;
}

bool OAIEvaluateSessionResponse::is_fraud_detection_result_Valid() const{
    return m_fraud_detection_result_isValid;
}

QString OAIEvaluateSessionResponse::getSessionId() const {
    return m_session_id;
}
void OAIEvaluateSessionResponse::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIEvaluateSessionResponse::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIEvaluateSessionResponse::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIEvaluateSessionResponse::getSessionName() const {
    return m_session_name;
}
void OAIEvaluateSessionResponse::setSessionName(const QString &session_name) {
    m_session_name = session_name;
    m_session_name_isSet = true;
}

bool OAIEvaluateSessionResponse::is_session_name_Set() const{
    return m_session_name_isSet;
}

bool OAIEvaluateSessionResponse::is_session_name_Valid() const{
    return m_session_name_isValid;
}

OAIStreamingStatus OAIEvaluateSessionResponse::getStreamingStatus() const {
    return m_streaming_status;
}
void OAIEvaluateSessionResponse::setStreamingStatus(const OAIStreamingStatus &streaming_status) {
    m_streaming_status = streaming_status;
    m_streaming_status_isSet = true;
}

bool OAIEvaluateSessionResponse::is_streaming_status_Set() const{
    return m_streaming_status_isSet;
}

bool OAIEvaluateSessionResponse::is_streaming_status_Valid() const{
    return m_streaming_status_isValid;
}

bool OAIEvaluateSessionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_detection_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluateSessionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
