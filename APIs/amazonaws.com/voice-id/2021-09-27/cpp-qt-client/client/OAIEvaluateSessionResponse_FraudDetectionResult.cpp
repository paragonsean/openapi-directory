/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluateSessionResponse_FraudDetectionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluateSessionResponse_FraudDetectionResult::OAIEvaluateSessionResponse_FraudDetectionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluateSessionResponse_FraudDetectionResult::OAIEvaluateSessionResponse_FraudDetectionResult() {
    this->initializeModel();
}

OAIEvaluateSessionResponse_FraudDetectionResult::~OAIEvaluateSessionResponse_FraudDetectionResult() {}

void OAIEvaluateSessionResponse_FraudDetectionResult::initializeModel() {

    m_audio_aggregation_ended_at_isSet = false;
    m_audio_aggregation_ended_at_isValid = false;

    m_audio_aggregation_started_at_isSet = false;
    m_audio_aggregation_started_at_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_fraud_detection_result_id_isSet = false;
    m_fraud_detection_result_id_isValid = false;

    m_reasons_isSet = false;
    m_reasons_isValid = false;

    m_risk_details_isSet = false;
    m_risk_details_isValid = false;
}

void OAIEvaluateSessionResponse_FraudDetectionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluateSessionResponse_FraudDetectionResult::fromJsonObject(QJsonObject json) {

    m_audio_aggregation_ended_at_isValid = ::OpenAPI::fromJsonValue(m_audio_aggregation_ended_at, json[QString("AudioAggregationEndedAt")]);
    m_audio_aggregation_ended_at_isSet = !json[QString("AudioAggregationEndedAt")].isNull() && m_audio_aggregation_ended_at_isValid;

    m_audio_aggregation_started_at_isValid = ::OpenAPI::fromJsonValue(m_audio_aggregation_started_at, json[QString("AudioAggregationStartedAt")]);
    m_audio_aggregation_started_at_isSet = !json[QString("AudioAggregationStartedAt")].isNull() && m_audio_aggregation_started_at_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_decision_isValid = ::OpenAPI::fromJsonValue(m_decision, json[QString("Decision")]);
    m_decision_isSet = !json[QString("Decision")].isNull() && m_decision_isValid;

    m_fraud_detection_result_id_isValid = ::OpenAPI::fromJsonValue(m_fraud_detection_result_id, json[QString("FraudDetectionResultId")]);
    m_fraud_detection_result_id_isSet = !json[QString("FraudDetectionResultId")].isNull() && m_fraud_detection_result_id_isValid;

    m_reasons_isValid = ::OpenAPI::fromJsonValue(m_reasons, json[QString("Reasons")]);
    m_reasons_isSet = !json[QString("Reasons")].isNull() && m_reasons_isValid;

    m_risk_details_isValid = ::OpenAPI::fromJsonValue(m_risk_details, json[QString("RiskDetails")]);
    m_risk_details_isSet = !json[QString("RiskDetails")].isNull() && m_risk_details_isValid;
}

QString OAIEvaluateSessionResponse_FraudDetectionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluateSessionResponse_FraudDetectionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_aggregation_ended_at_isSet) {
        obj.insert(QString("AudioAggregationEndedAt"), ::OpenAPI::toJsonValue(m_audio_aggregation_ended_at));
    }
    if (m_audio_aggregation_started_at_isSet) {
        obj.insert(QString("AudioAggregationStartedAt"), ::OpenAPI::toJsonValue(m_audio_aggregation_started_at));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_decision.isSet()) {
        obj.insert(QString("Decision"), ::OpenAPI::toJsonValue(m_decision));
    }
    if (m_fraud_detection_result_id_isSet) {
        obj.insert(QString("FraudDetectionResultId"), ::OpenAPI::toJsonValue(m_fraud_detection_result_id));
    }
    if (m_reasons.isSet()) {
        obj.insert(QString("Reasons"), ::OpenAPI::toJsonValue(m_reasons));
    }
    if (m_risk_details.isSet()) {
        obj.insert(QString("RiskDetails"), ::OpenAPI::toJsonValue(m_risk_details));
    }
    return obj;
}

QDateTime OAIEvaluateSessionResponse_FraudDetectionResult::getAudioAggregationEndedAt() const {
    return m_audio_aggregation_ended_at;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setAudioAggregationEndedAt(const QDateTime &audio_aggregation_ended_at) {
    m_audio_aggregation_ended_at = audio_aggregation_ended_at;
    m_audio_aggregation_ended_at_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_audio_aggregation_ended_at_Set() const{
    return m_audio_aggregation_ended_at_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_audio_aggregation_ended_at_Valid() const{
    return m_audio_aggregation_ended_at_isValid;
}

QDateTime OAIEvaluateSessionResponse_FraudDetectionResult::getAudioAggregationStartedAt() const {
    return m_audio_aggregation_started_at;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setAudioAggregationStartedAt(const QDateTime &audio_aggregation_started_at) {
    m_audio_aggregation_started_at = audio_aggregation_started_at;
    m_audio_aggregation_started_at_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_audio_aggregation_started_at_Set() const{
    return m_audio_aggregation_started_at_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_audio_aggregation_started_at_Valid() const{
    return m_audio_aggregation_started_at_isValid;
}

OAIFraudDetectionResult_Configuration OAIEvaluateSessionResponse_FraudDetectionResult::getConfiguration() const {
    return m_configuration;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setConfiguration(const OAIFraudDetectionResult_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAIFraudDetectionDecision OAIEvaluateSessionResponse_FraudDetectionResult::getDecision() const {
    return m_decision;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setDecision(const OAIFraudDetectionDecision &decision) {
    m_decision = decision;
    m_decision_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_decision_Valid() const{
    return m_decision_isValid;
}

QString OAIEvaluateSessionResponse_FraudDetectionResult::getFraudDetectionResultId() const {
    return m_fraud_detection_result_id;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setFraudDetectionResultId(const QString &fraud_detection_result_id) {
    m_fraud_detection_result_id = fraud_detection_result_id;
    m_fraud_detection_result_id_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_fraud_detection_result_id_Set() const{
    return m_fraud_detection_result_id_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_fraud_detection_result_id_Valid() const{
    return m_fraud_detection_result_id_isValid;
}

QList OAIEvaluateSessionResponse_FraudDetectionResult::getReasons() const {
    return m_reasons;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setReasons(const QList &reasons) {
    m_reasons = reasons;
    m_reasons_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_reasons_Set() const{
    return m_reasons_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_reasons_Valid() const{
    return m_reasons_isValid;
}

OAIFraudDetectionResult_RiskDetails OAIEvaluateSessionResponse_FraudDetectionResult::getRiskDetails() const {
    return m_risk_details;
}
void OAIEvaluateSessionResponse_FraudDetectionResult::setRiskDetails(const OAIFraudDetectionResult_RiskDetails &risk_details) {
    m_risk_details = risk_details;
    m_risk_details_isSet = true;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_risk_details_Set() const{
    return m_risk_details_isSet;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::is_risk_details_Valid() const{
    return m_risk_details_isValid;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_aggregation_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_aggregation_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_detection_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluateSessionResponse_FraudDetectionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
