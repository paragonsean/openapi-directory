/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpeaker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpeaker::OAISpeaker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpeaker::OAISpeaker() {
    this->initializeModel();
}

OAISpeaker::~OAISpeaker() {}

void OAISpeaker::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_speaker_id_isSet = false;
    m_customer_speaker_id_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_generated_speaker_id_isSet = false;
    m_generated_speaker_id_isValid = false;

    m_last_accessed_at_isSet = false;
    m_last_accessed_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISpeaker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpeaker::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_customer_speaker_id_isValid = ::OpenAPI::fromJsonValue(m_customer_speaker_id, json[QString("CustomerSpeakerId")]);
    m_customer_speaker_id_isSet = !json[QString("CustomerSpeakerId")].isNull() && m_customer_speaker_id_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_generated_speaker_id_isValid = ::OpenAPI::fromJsonValue(m_generated_speaker_id, json[QString("GeneratedSpeakerId")]);
    m_generated_speaker_id_isSet = !json[QString("GeneratedSpeakerId")].isNull() && m_generated_speaker_id_isValid;

    m_last_accessed_at_isValid = ::OpenAPI::fromJsonValue(m_last_accessed_at, json[QString("LastAccessedAt")]);
    m_last_accessed_at_isSet = !json[QString("LastAccessedAt")].isNull() && m_last_accessed_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;
}

QString OAISpeaker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpeaker::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_speaker_id_isSet) {
        obj.insert(QString("CustomerSpeakerId"), ::OpenAPI::toJsonValue(m_customer_speaker_id));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_generated_speaker_id_isSet) {
        obj.insert(QString("GeneratedSpeakerId"), ::OpenAPI::toJsonValue(m_generated_speaker_id));
    }
    if (m_last_accessed_at_isSet) {
        obj.insert(QString("LastAccessedAt"), ::OpenAPI::toJsonValue(m_last_accessed_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAISpeaker::getCreatedAt() const {
    return m_created_at;
}
void OAISpeaker::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISpeaker::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISpeaker::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISpeaker::getCustomerSpeakerId() const {
    return m_customer_speaker_id;
}
void OAISpeaker::setCustomerSpeakerId(const QString &customer_speaker_id) {
    m_customer_speaker_id = customer_speaker_id;
    m_customer_speaker_id_isSet = true;
}

bool OAISpeaker::is_customer_speaker_id_Set() const{
    return m_customer_speaker_id_isSet;
}

bool OAISpeaker::is_customer_speaker_id_Valid() const{
    return m_customer_speaker_id_isValid;
}

QString OAISpeaker::getDomainId() const {
    return m_domain_id;
}
void OAISpeaker::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAISpeaker::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAISpeaker::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

QString OAISpeaker::getGeneratedSpeakerId() const {
    return m_generated_speaker_id;
}
void OAISpeaker::setGeneratedSpeakerId(const QString &generated_speaker_id) {
    m_generated_speaker_id = generated_speaker_id;
    m_generated_speaker_id_isSet = true;
}

bool OAISpeaker::is_generated_speaker_id_Set() const{
    return m_generated_speaker_id_isSet;
}

bool OAISpeaker::is_generated_speaker_id_Valid() const{
    return m_generated_speaker_id_isValid;
}

QDateTime OAISpeaker::getLastAccessedAt() const {
    return m_last_accessed_at;
}
void OAISpeaker::setLastAccessedAt(const QDateTime &last_accessed_at) {
    m_last_accessed_at = last_accessed_at;
    m_last_accessed_at_isSet = true;
}

bool OAISpeaker::is_last_accessed_at_Set() const{
    return m_last_accessed_at_isSet;
}

bool OAISpeaker::is_last_accessed_at_Valid() const{
    return m_last_accessed_at_isValid;
}

OAISpeakerStatus OAISpeaker::getStatus() const {
    return m_status;
}
void OAISpeaker::setStatus(const OAISpeakerStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpeaker::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpeaker::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAISpeaker::getUpdatedAt() const {
    return m_updated_at;
}
void OAISpeaker::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISpeaker::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISpeaker::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISpeaker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_speaker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_speaker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_accessed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpeaker::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
