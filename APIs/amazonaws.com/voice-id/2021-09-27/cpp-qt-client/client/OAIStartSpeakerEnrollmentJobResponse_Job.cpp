/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSpeakerEnrollmentJobResponse_Job.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSpeakerEnrollmentJobResponse_Job::OAIStartSpeakerEnrollmentJobResponse_Job(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSpeakerEnrollmentJobResponse_Job::OAIStartSpeakerEnrollmentJobResponse_Job() {
    this->initializeModel();
}

OAIStartSpeakerEnrollmentJobResponse_Job::~OAIStartSpeakerEnrollmentJobResponse_Job() {}

void OAIStartSpeakerEnrollmentJobResponse_Job::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_enrollment_config_isSet = false;
    m_enrollment_config_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_progress_isSet = false;
    m_job_progress_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;
}

void OAIStartSpeakerEnrollmentJobResponse_Job::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSpeakerEnrollmentJobResponse_Job::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("EndedAt")]);
    m_ended_at_isSet = !json[QString("EndedAt")].isNull() && m_ended_at_isValid;

    m_enrollment_config_isValid = ::OpenAPI::fromJsonValue(m_enrollment_config, json[QString("EnrollmentConfig")]);
    m_enrollment_config_isSet = !json[QString("EnrollmentConfig")].isNull() && m_enrollment_config_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("FailureDetails")]);
    m_failure_details_isSet = !json[QString("FailureDetails")].isNull() && m_failure_details_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_progress_isValid = ::OpenAPI::fromJsonValue(m_job_progress, json[QString("JobProgress")]);
    m_job_progress_isSet = !json[QString("JobProgress")].isNull() && m_job_progress_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;
}

QString OAIStartSpeakerEnrollmentJobResponse_Job::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSpeakerEnrollmentJobResponse_Job::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("EndedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_enrollment_config.isSet()) {
        obj.insert(QString("EnrollmentConfig"), ::OpenAPI::toJsonValue(m_enrollment_config));
    }
    if (m_failure_details.isSet()) {
        obj.insert(QString("FailureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_progress.isSet()) {
        obj.insert(QString("JobProgress"), ::OpenAPI::toJsonValue(m_job_progress));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    return obj;
}

QDateTime OAIStartSpeakerEnrollmentJobResponse_Job::getCreatedAt() const {
    return m_created_at;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStartSpeakerEnrollmentJobResponse_Job::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

QString OAIStartSpeakerEnrollmentJobResponse_Job::getDomainId() const {
    return m_domain_id;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

QDateTime OAIStartSpeakerEnrollmentJobResponse_Job::getEndedAt() const {
    return m_ended_at;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

OAISpeakerEnrollmentJob_EnrollmentConfig OAIStartSpeakerEnrollmentJobResponse_Job::getEnrollmentConfig() const {
    return m_enrollment_config;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setEnrollmentConfig(const OAISpeakerEnrollmentJob_EnrollmentConfig &enrollment_config) {
    m_enrollment_config = enrollment_config;
    m_enrollment_config_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_enrollment_config_Set() const{
    return m_enrollment_config_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_enrollment_config_Valid() const{
    return m_enrollment_config_isValid;
}

OAIFraudsterRegistrationJob_FailureDetails OAIStartSpeakerEnrollmentJobResponse_Job::getFailureDetails() const {
    return m_failure_details;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setFailureDetails(const OAIFraudsterRegistrationJob_FailureDetails &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

OAISpeakerEnrollmentJob_InputDataConfig OAIStartSpeakerEnrollmentJobResponse_Job::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setInputDataConfig(const OAISpeakerEnrollmentJob_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

QString OAIStartSpeakerEnrollmentJobResponse_Job::getJobId() const {
    return m_job_id;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIStartSpeakerEnrollmentJobResponse_Job::getJobName() const {
    return m_job_name;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAISpeakerEnrollmentJob_JobProgress OAIStartSpeakerEnrollmentJobResponse_Job::getJobProgress() const {
    return m_job_progress;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setJobProgress(const OAISpeakerEnrollmentJob_JobProgress &job_progress) {
    m_job_progress = job_progress;
    m_job_progress_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_progress_Set() const{
    return m_job_progress_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_progress_Valid() const{
    return m_job_progress_isValid;
}

OAISpeakerEnrollmentJobStatus OAIStartSpeakerEnrollmentJobResponse_Job::getJobStatus() const {
    return m_job_status;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setJobStatus(const OAISpeakerEnrollmentJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_job_status_Valid() const{
    return m_job_status_isValid;
}

OAIStartFraudsterRegistrationJobRequest_OutputDataConfig OAIStartSpeakerEnrollmentJobResponse_Job::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIStartSpeakerEnrollmentJobResponse_Job::setOutputDataConfig(const OAIStartFraudsterRegistrationJobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSpeakerEnrollmentJobResponse_Job::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
