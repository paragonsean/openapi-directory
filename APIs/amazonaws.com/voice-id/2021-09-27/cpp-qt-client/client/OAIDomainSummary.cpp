/**
 * Amazon Voice ID
 * Amazon Connect Voice ID provides real-time caller authentication and fraud risk detection, which make voice interactions in contact centers more secure and efficient.
 *
 * The version of the OpenAPI document: 2021-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainSummary::OAIDomainSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainSummary::OAIDomainSummary() {
    this->initializeModel();
}

OAIDomainSummary::~OAIDomainSummary() {}

void OAIDomainSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_domain_status_isSet = false;
    m_domain_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_side_encryption_configuration_isSet = false;
    m_server_side_encryption_configuration_isValid = false;

    m_server_side_encryption_update_details_isSet = false;
    m_server_side_encryption_update_details_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_watchlist_details_isSet = false;
    m_watchlist_details_isValid = false;
}

void OAIDomainSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_domain_status_isValid = ::OpenAPI::fromJsonValue(m_domain_status, json[QString("DomainStatus")]);
    m_domain_status_isSet = !json[QString("DomainStatus")].isNull() && m_domain_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_server_side_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_configuration, json[QString("ServerSideEncryptionConfiguration")]);
    m_server_side_encryption_configuration_isSet = !json[QString("ServerSideEncryptionConfiguration")].isNull() && m_server_side_encryption_configuration_isValid;

    m_server_side_encryption_update_details_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption_update_details, json[QString("ServerSideEncryptionUpdateDetails")]);
    m_server_side_encryption_update_details_isSet = !json[QString("ServerSideEncryptionUpdateDetails")].isNull() && m_server_side_encryption_update_details_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_watchlist_details_isValid = ::OpenAPI::fromJsonValue(m_watchlist_details, json[QString("WatchlistDetails")]);
    m_watchlist_details_isSet = !json[QString("WatchlistDetails")].isNull() && m_watchlist_details_isValid;
}

QString OAIDomainSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_domain_status.isSet()) {
        obj.insert(QString("DomainStatus"), ::OpenAPI::toJsonValue(m_domain_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_side_encryption_configuration.isSet()) {
        obj.insert(QString("ServerSideEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_server_side_encryption_configuration));
    }
    if (m_server_side_encryption_update_details.isSet()) {
        obj.insert(QString("ServerSideEncryptionUpdateDetails"), ::OpenAPI::toJsonValue(m_server_side_encryption_update_details));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_watchlist_details.isSet()) {
        obj.insert(QString("WatchlistDetails"), ::OpenAPI::toJsonValue(m_watchlist_details));
    }
    return obj;
}

QString OAIDomainSummary::getArn() const {
    return m_arn;
}
void OAIDomainSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDomainSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDomainSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDomainSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIDomainSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDomainSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDomainSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDomainSummary::getDescription() const {
    return m_description;
}
void OAIDomainSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDomainSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDomainSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDomainSummary::getDomainId() const {
    return m_domain_id;
}
void OAIDomainSummary::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIDomainSummary::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIDomainSummary::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

OAIDomainStatus OAIDomainSummary::getDomainStatus() const {
    return m_domain_status;
}
void OAIDomainSummary::setDomainStatus(const OAIDomainStatus &domain_status) {
    m_domain_status = domain_status;
    m_domain_status_isSet = true;
}

bool OAIDomainSummary::is_domain_status_Set() const{
    return m_domain_status_isSet;
}

bool OAIDomainSummary::is_domain_status_Valid() const{
    return m_domain_status_isValid;
}

QString OAIDomainSummary::getName() const {
    return m_name;
}
void OAIDomainSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomainSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomainSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIDomain_ServerSideEncryptionConfiguration OAIDomainSummary::getServerSideEncryptionConfiguration() const {
    return m_server_side_encryption_configuration;
}
void OAIDomainSummary::setServerSideEncryptionConfiguration(const OAIDomain_ServerSideEncryptionConfiguration &server_side_encryption_configuration) {
    m_server_side_encryption_configuration = server_side_encryption_configuration;
    m_server_side_encryption_configuration_isSet = true;
}

bool OAIDomainSummary::is_server_side_encryption_configuration_Set() const{
    return m_server_side_encryption_configuration_isSet;
}

bool OAIDomainSummary::is_server_side_encryption_configuration_Valid() const{
    return m_server_side_encryption_configuration_isValid;
}

OAIDomain_ServerSideEncryptionUpdateDetails OAIDomainSummary::getServerSideEncryptionUpdateDetails() const {
    return m_server_side_encryption_update_details;
}
void OAIDomainSummary::setServerSideEncryptionUpdateDetails(const OAIDomain_ServerSideEncryptionUpdateDetails &server_side_encryption_update_details) {
    m_server_side_encryption_update_details = server_side_encryption_update_details;
    m_server_side_encryption_update_details_isSet = true;
}

bool OAIDomainSummary::is_server_side_encryption_update_details_Set() const{
    return m_server_side_encryption_update_details_isSet;
}

bool OAIDomainSummary::is_server_side_encryption_update_details_Valid() const{
    return m_server_side_encryption_update_details_isValid;
}

QDateTime OAIDomainSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDomainSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDomainSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDomainSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIDomainSummary_WatchlistDetails OAIDomainSummary::getWatchlistDetails() const {
    return m_watchlist_details;
}
void OAIDomainSummary::setWatchlistDetails(const OAIDomainSummary_WatchlistDetails &watchlist_details) {
    m_watchlist_details = watchlist_details;
    m_watchlist_details_isSet = true;
}

bool OAIDomainSummary::is_watchlist_details_Set() const{
    return m_watchlist_details_isSet;
}

bool OAIDomainSummary::is_watchlist_details_Valid() const{
    return m_watchlist_details_isValid;
}

bool OAIDomainSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption_update_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
