/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingActor_userIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingActor_userIdentity::OAIFindingActor_userIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingActor_userIdentity::OAIFindingActor_userIdentity() {
    this->initializeModel();
}

OAIFindingActor_userIdentity::~OAIFindingActor_userIdentity() {}

void OAIFindingActor_userIdentity::initializeModel() {

    m_assumed_role_isSet = false;
    m_assumed_role_isValid = false;

    m_aws_account_isSet = false;
    m_aws_account_isValid = false;

    m_aws_service_isSet = false;
    m_aws_service_isValid = false;

    m_federated_user_isSet = false;
    m_federated_user_isValid = false;

    m_iam_user_isSet = false;
    m_iam_user_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFindingActor_userIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindingActor_userIdentity::fromJsonObject(QJsonObject json) {

    m_assumed_role_isValid = ::OpenAPI::fromJsonValue(m_assumed_role, json[QString("assumedRole")]);
    m_assumed_role_isSet = !json[QString("assumedRole")].isNull() && m_assumed_role_isValid;

    m_aws_account_isValid = ::OpenAPI::fromJsonValue(m_aws_account, json[QString("awsAccount")]);
    m_aws_account_isSet = !json[QString("awsAccount")].isNull() && m_aws_account_isValid;

    m_aws_service_isValid = ::OpenAPI::fromJsonValue(m_aws_service, json[QString("awsService")]);
    m_aws_service_isSet = !json[QString("awsService")].isNull() && m_aws_service_isValid;

    m_federated_user_isValid = ::OpenAPI::fromJsonValue(m_federated_user, json[QString("federatedUser")]);
    m_federated_user_isSet = !json[QString("federatedUser")].isNull() && m_federated_user_isValid;

    m_iam_user_isValid = ::OpenAPI::fromJsonValue(m_iam_user, json[QString("iamUser")]);
    m_iam_user_isSet = !json[QString("iamUser")].isNull() && m_iam_user_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFindingActor_userIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindingActor_userIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_assumed_role.isSet()) {
        obj.insert(QString("assumedRole"), ::OpenAPI::toJsonValue(m_assumed_role));
    }
    if (m_aws_account.isSet()) {
        obj.insert(QString("awsAccount"), ::OpenAPI::toJsonValue(m_aws_account));
    }
    if (m_aws_service.isSet()) {
        obj.insert(QString("awsService"), ::OpenAPI::toJsonValue(m_aws_service));
    }
    if (m_federated_user.isSet()) {
        obj.insert(QString("federatedUser"), ::OpenAPI::toJsonValue(m_federated_user));
    }
    if (m_iam_user.isSet()) {
        obj.insert(QString("iamUser"), ::OpenAPI::toJsonValue(m_iam_user));
    }
    if (m_root.isSet()) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIUserIdentity_assumedRole OAIFindingActor_userIdentity::getAssumedRole() const {
    return m_assumed_role;
}
void OAIFindingActor_userIdentity::setAssumedRole(const OAIUserIdentity_assumedRole &assumed_role) {
    m_assumed_role = assumed_role;
    m_assumed_role_isSet = true;
}

bool OAIFindingActor_userIdentity::is_assumed_role_Set() const{
    return m_assumed_role_isSet;
}

bool OAIFindingActor_userIdentity::is_assumed_role_Valid() const{
    return m_assumed_role_isValid;
}

OAIUserIdentity_awsAccount OAIFindingActor_userIdentity::getAwsAccount() const {
    return m_aws_account;
}
void OAIFindingActor_userIdentity::setAwsAccount(const OAIUserIdentity_awsAccount &aws_account) {
    m_aws_account = aws_account;
    m_aws_account_isSet = true;
}

bool OAIFindingActor_userIdentity::is_aws_account_Set() const{
    return m_aws_account_isSet;
}

bool OAIFindingActor_userIdentity::is_aws_account_Valid() const{
    return m_aws_account_isValid;
}

OAIUserIdentity_awsService OAIFindingActor_userIdentity::getAwsService() const {
    return m_aws_service;
}
void OAIFindingActor_userIdentity::setAwsService(const OAIUserIdentity_awsService &aws_service) {
    m_aws_service = aws_service;
    m_aws_service_isSet = true;
}

bool OAIFindingActor_userIdentity::is_aws_service_Set() const{
    return m_aws_service_isSet;
}

bool OAIFindingActor_userIdentity::is_aws_service_Valid() const{
    return m_aws_service_isValid;
}

OAIUserIdentity_federatedUser OAIFindingActor_userIdentity::getFederatedUser() const {
    return m_federated_user;
}
void OAIFindingActor_userIdentity::setFederatedUser(const OAIUserIdentity_federatedUser &federated_user) {
    m_federated_user = federated_user;
    m_federated_user_isSet = true;
}

bool OAIFindingActor_userIdentity::is_federated_user_Set() const{
    return m_federated_user_isSet;
}

bool OAIFindingActor_userIdentity::is_federated_user_Valid() const{
    return m_federated_user_isValid;
}

OAIUserIdentity_iamUser OAIFindingActor_userIdentity::getIamUser() const {
    return m_iam_user;
}
void OAIFindingActor_userIdentity::setIamUser(const OAIUserIdentity_iamUser &iam_user) {
    m_iam_user = iam_user;
    m_iam_user_isSet = true;
}

bool OAIFindingActor_userIdentity::is_iam_user_Set() const{
    return m_iam_user_isSet;
}

bool OAIFindingActor_userIdentity::is_iam_user_Valid() const{
    return m_iam_user_isValid;
}

OAIUserIdentity_root OAIFindingActor_userIdentity::getRoot() const {
    return m_root;
}
void OAIFindingActor_userIdentity::setRoot(const OAIUserIdentity_root &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIFindingActor_userIdentity::is_root_Set() const{
    return m_root_isSet;
}

bool OAIFindingActor_userIdentity::is_root_Valid() const{
    return m_root_isValid;
}

OAIUserIdentityType OAIFindingActor_userIdentity::getType() const {
    return m_type;
}
void OAIFindingActor_userIdentity::setType(const OAIUserIdentityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFindingActor_userIdentity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFindingActor_userIdentity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFindingActor_userIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assumed_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindingActor_userIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
