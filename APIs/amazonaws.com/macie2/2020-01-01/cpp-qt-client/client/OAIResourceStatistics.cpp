/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceStatistics::OAIResourceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceStatistics::OAIResourceStatistics() {
    this->initializeModel();
}

OAIResourceStatistics::~OAIResourceStatistics() {}

void OAIResourceStatistics::initializeModel() {

    m_total_bytes_classified_isSet = false;
    m_total_bytes_classified_isValid = false;

    m_total_detections_isSet = false;
    m_total_detections_isValid = false;

    m_total_detections_suppressed_isSet = false;
    m_total_detections_suppressed_isValid = false;

    m_total_items_classified_isSet = false;
    m_total_items_classified_isValid = false;

    m_total_items_sensitive_isSet = false;
    m_total_items_sensitive_isValid = false;

    m_total_items_skipped_isSet = false;
    m_total_items_skipped_isValid = false;

    m_total_items_skipped_invalid_encryption_isSet = false;
    m_total_items_skipped_invalid_encryption_isValid = false;

    m_total_items_skipped_invalid_kms_isSet = false;
    m_total_items_skipped_invalid_kms_isValid = false;

    m_total_items_skipped_permission_denied_isSet = false;
    m_total_items_skipped_permission_denied_isValid = false;
}

void OAIResourceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceStatistics::fromJsonObject(QJsonObject json) {

    m_total_bytes_classified_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_classified, json[QString("totalBytesClassified")]);
    m_total_bytes_classified_isSet = !json[QString("totalBytesClassified")].isNull() && m_total_bytes_classified_isValid;

    m_total_detections_isValid = ::OpenAPI::fromJsonValue(m_total_detections, json[QString("totalDetections")]);
    m_total_detections_isSet = !json[QString("totalDetections")].isNull() && m_total_detections_isValid;

    m_total_detections_suppressed_isValid = ::OpenAPI::fromJsonValue(m_total_detections_suppressed, json[QString("totalDetectionsSuppressed")]);
    m_total_detections_suppressed_isSet = !json[QString("totalDetectionsSuppressed")].isNull() && m_total_detections_suppressed_isValid;

    m_total_items_classified_isValid = ::OpenAPI::fromJsonValue(m_total_items_classified, json[QString("totalItemsClassified")]);
    m_total_items_classified_isSet = !json[QString("totalItemsClassified")].isNull() && m_total_items_classified_isValid;

    m_total_items_sensitive_isValid = ::OpenAPI::fromJsonValue(m_total_items_sensitive, json[QString("totalItemsSensitive")]);
    m_total_items_sensitive_isSet = !json[QString("totalItemsSensitive")].isNull() && m_total_items_sensitive_isValid;

    m_total_items_skipped_isValid = ::OpenAPI::fromJsonValue(m_total_items_skipped, json[QString("totalItemsSkipped")]);
    m_total_items_skipped_isSet = !json[QString("totalItemsSkipped")].isNull() && m_total_items_skipped_isValid;

    m_total_items_skipped_invalid_encryption_isValid = ::OpenAPI::fromJsonValue(m_total_items_skipped_invalid_encryption, json[QString("totalItemsSkippedInvalidEncryption")]);
    m_total_items_skipped_invalid_encryption_isSet = !json[QString("totalItemsSkippedInvalidEncryption")].isNull() && m_total_items_skipped_invalid_encryption_isValid;

    m_total_items_skipped_invalid_kms_isValid = ::OpenAPI::fromJsonValue(m_total_items_skipped_invalid_kms, json[QString("totalItemsSkippedInvalidKms")]);
    m_total_items_skipped_invalid_kms_isSet = !json[QString("totalItemsSkippedInvalidKms")].isNull() && m_total_items_skipped_invalid_kms_isValid;

    m_total_items_skipped_permission_denied_isValid = ::OpenAPI::fromJsonValue(m_total_items_skipped_permission_denied, json[QString("totalItemsSkippedPermissionDenied")]);
    m_total_items_skipped_permission_denied_isSet = !json[QString("totalItemsSkippedPermissionDenied")].isNull() && m_total_items_skipped_permission_denied_isValid;
}

QString OAIResourceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_total_bytes_classified_isSet) {
        obj.insert(QString("totalBytesClassified"), ::OpenAPI::toJsonValue(m_total_bytes_classified));
    }
    if (m_total_detections_isSet) {
        obj.insert(QString("totalDetections"), ::OpenAPI::toJsonValue(m_total_detections));
    }
    if (m_total_detections_suppressed_isSet) {
        obj.insert(QString("totalDetectionsSuppressed"), ::OpenAPI::toJsonValue(m_total_detections_suppressed));
    }
    if (m_total_items_classified_isSet) {
        obj.insert(QString("totalItemsClassified"), ::OpenAPI::toJsonValue(m_total_items_classified));
    }
    if (m_total_items_sensitive_isSet) {
        obj.insert(QString("totalItemsSensitive"), ::OpenAPI::toJsonValue(m_total_items_sensitive));
    }
    if (m_total_items_skipped_isSet) {
        obj.insert(QString("totalItemsSkipped"), ::OpenAPI::toJsonValue(m_total_items_skipped));
    }
    if (m_total_items_skipped_invalid_encryption_isSet) {
        obj.insert(QString("totalItemsSkippedInvalidEncryption"), ::OpenAPI::toJsonValue(m_total_items_skipped_invalid_encryption));
    }
    if (m_total_items_skipped_invalid_kms_isSet) {
        obj.insert(QString("totalItemsSkippedInvalidKms"), ::OpenAPI::toJsonValue(m_total_items_skipped_invalid_kms));
    }
    if (m_total_items_skipped_permission_denied_isSet) {
        obj.insert(QString("totalItemsSkippedPermissionDenied"), ::OpenAPI::toJsonValue(m_total_items_skipped_permission_denied));
    }
    return obj;
}

qint32 OAIResourceStatistics::getTotalBytesClassified() const {
    return m_total_bytes_classified;
}
void OAIResourceStatistics::setTotalBytesClassified(const qint32 &total_bytes_classified) {
    m_total_bytes_classified = total_bytes_classified;
    m_total_bytes_classified_isSet = true;
}

bool OAIResourceStatistics::is_total_bytes_classified_Set() const{
    return m_total_bytes_classified_isSet;
}

bool OAIResourceStatistics::is_total_bytes_classified_Valid() const{
    return m_total_bytes_classified_isValid;
}

qint32 OAIResourceStatistics::getTotalDetections() const {
    return m_total_detections;
}
void OAIResourceStatistics::setTotalDetections(const qint32 &total_detections) {
    m_total_detections = total_detections;
    m_total_detections_isSet = true;
}

bool OAIResourceStatistics::is_total_detections_Set() const{
    return m_total_detections_isSet;
}

bool OAIResourceStatistics::is_total_detections_Valid() const{
    return m_total_detections_isValid;
}

qint32 OAIResourceStatistics::getTotalDetectionsSuppressed() const {
    return m_total_detections_suppressed;
}
void OAIResourceStatistics::setTotalDetectionsSuppressed(const qint32 &total_detections_suppressed) {
    m_total_detections_suppressed = total_detections_suppressed;
    m_total_detections_suppressed_isSet = true;
}

bool OAIResourceStatistics::is_total_detections_suppressed_Set() const{
    return m_total_detections_suppressed_isSet;
}

bool OAIResourceStatistics::is_total_detections_suppressed_Valid() const{
    return m_total_detections_suppressed_isValid;
}

qint32 OAIResourceStatistics::getTotalItemsClassified() const {
    return m_total_items_classified;
}
void OAIResourceStatistics::setTotalItemsClassified(const qint32 &total_items_classified) {
    m_total_items_classified = total_items_classified;
    m_total_items_classified_isSet = true;
}

bool OAIResourceStatistics::is_total_items_classified_Set() const{
    return m_total_items_classified_isSet;
}

bool OAIResourceStatistics::is_total_items_classified_Valid() const{
    return m_total_items_classified_isValid;
}

qint32 OAIResourceStatistics::getTotalItemsSensitive() const {
    return m_total_items_sensitive;
}
void OAIResourceStatistics::setTotalItemsSensitive(const qint32 &total_items_sensitive) {
    m_total_items_sensitive = total_items_sensitive;
    m_total_items_sensitive_isSet = true;
}

bool OAIResourceStatistics::is_total_items_sensitive_Set() const{
    return m_total_items_sensitive_isSet;
}

bool OAIResourceStatistics::is_total_items_sensitive_Valid() const{
    return m_total_items_sensitive_isValid;
}

qint32 OAIResourceStatistics::getTotalItemsSkipped() const {
    return m_total_items_skipped;
}
void OAIResourceStatistics::setTotalItemsSkipped(const qint32 &total_items_skipped) {
    m_total_items_skipped = total_items_skipped;
    m_total_items_skipped_isSet = true;
}

bool OAIResourceStatistics::is_total_items_skipped_Set() const{
    return m_total_items_skipped_isSet;
}

bool OAIResourceStatistics::is_total_items_skipped_Valid() const{
    return m_total_items_skipped_isValid;
}

qint32 OAIResourceStatistics::getTotalItemsSkippedInvalidEncryption() const {
    return m_total_items_skipped_invalid_encryption;
}
void OAIResourceStatistics::setTotalItemsSkippedInvalidEncryption(const qint32 &total_items_skipped_invalid_encryption) {
    m_total_items_skipped_invalid_encryption = total_items_skipped_invalid_encryption;
    m_total_items_skipped_invalid_encryption_isSet = true;
}

bool OAIResourceStatistics::is_total_items_skipped_invalid_encryption_Set() const{
    return m_total_items_skipped_invalid_encryption_isSet;
}

bool OAIResourceStatistics::is_total_items_skipped_invalid_encryption_Valid() const{
    return m_total_items_skipped_invalid_encryption_isValid;
}

qint32 OAIResourceStatistics::getTotalItemsSkippedInvalidKms() const {
    return m_total_items_skipped_invalid_kms;
}
void OAIResourceStatistics::setTotalItemsSkippedInvalidKms(const qint32 &total_items_skipped_invalid_kms) {
    m_total_items_skipped_invalid_kms = total_items_skipped_invalid_kms;
    m_total_items_skipped_invalid_kms_isSet = true;
}

bool OAIResourceStatistics::is_total_items_skipped_invalid_kms_Set() const{
    return m_total_items_skipped_invalid_kms_isSet;
}

bool OAIResourceStatistics::is_total_items_skipped_invalid_kms_Valid() const{
    return m_total_items_skipped_invalid_kms_isValid;
}

qint32 OAIResourceStatistics::getTotalItemsSkippedPermissionDenied() const {
    return m_total_items_skipped_permission_denied;
}
void OAIResourceStatistics::setTotalItemsSkippedPermissionDenied(const qint32 &total_items_skipped_permission_denied) {
    m_total_items_skipped_permission_denied = total_items_skipped_permission_denied;
    m_total_items_skipped_permission_denied_isSet = true;
}

bool OAIResourceStatistics::is_total_items_skipped_permission_denied_Set() const{
    return m_total_items_skipped_permission_denied_isSet;
}

bool OAIResourceStatistics::is_total_items_skipped_permission_denied_Valid() const{
    return m_total_items_skipped_permission_denied_isValid;
}

bool OAIResourceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_bytes_classified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_detections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_detections_suppressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_classified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_skipped_invalid_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_skipped_invalid_kms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_skipped_permission_denied_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
