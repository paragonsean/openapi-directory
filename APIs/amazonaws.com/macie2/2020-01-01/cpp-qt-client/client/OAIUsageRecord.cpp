/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageRecord::OAIUsageRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageRecord::OAIUsageRecord() {
    this->initializeModel();
}

OAIUsageRecord::~OAIUsageRecord() {}

void OAIUsageRecord::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_automated_discovery_free_trial_start_date_isSet = false;
    m_automated_discovery_free_trial_start_date_isValid = false;

    m_free_trial_start_date_isSet = false;
    m_free_trial_start_date_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIUsageRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageRecord::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_automated_discovery_free_trial_start_date_isValid = ::OpenAPI::fromJsonValue(m_automated_discovery_free_trial_start_date, json[QString("automatedDiscoveryFreeTrialStartDate")]);
    m_automated_discovery_free_trial_start_date_isSet = !json[QString("automatedDiscoveryFreeTrialStartDate")].isNull() && m_automated_discovery_free_trial_start_date_isValid;

    m_free_trial_start_date_isValid = ::OpenAPI::fromJsonValue(m_free_trial_start_date, json[QString("freeTrialStartDate")]);
    m_free_trial_start_date_isSet = !json[QString("freeTrialStartDate")].isNull() && m_free_trial_start_date_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIUsageRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_automated_discovery_free_trial_start_date_isSet) {
        obj.insert(QString("automatedDiscoveryFreeTrialStartDate"), ::OpenAPI::toJsonValue(m_automated_discovery_free_trial_start_date));
    }
    if (m_free_trial_start_date_isSet) {
        obj.insert(QString("freeTrialStartDate"), ::OpenAPI::toJsonValue(m_free_trial_start_date));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIUsageRecord::getAccountId() const {
    return m_account_id;
}
void OAIUsageRecord::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUsageRecord::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUsageRecord::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAIUsageRecord::getAutomatedDiscoveryFreeTrialStartDate() const {
    return m_automated_discovery_free_trial_start_date;
}
void OAIUsageRecord::setAutomatedDiscoveryFreeTrialStartDate(const QDateTime &automated_discovery_free_trial_start_date) {
    m_automated_discovery_free_trial_start_date = automated_discovery_free_trial_start_date;
    m_automated_discovery_free_trial_start_date_isSet = true;
}

bool OAIUsageRecord::is_automated_discovery_free_trial_start_date_Set() const{
    return m_automated_discovery_free_trial_start_date_isSet;
}

bool OAIUsageRecord::is_automated_discovery_free_trial_start_date_Valid() const{
    return m_automated_discovery_free_trial_start_date_isValid;
}

QDateTime OAIUsageRecord::getFreeTrialStartDate() const {
    return m_free_trial_start_date;
}
void OAIUsageRecord::setFreeTrialStartDate(const QDateTime &free_trial_start_date) {
    m_free_trial_start_date = free_trial_start_date;
    m_free_trial_start_date_isSet = true;
}

bool OAIUsageRecord::is_free_trial_start_date_Set() const{
    return m_free_trial_start_date_isSet;
}

bool OAIUsageRecord::is_free_trial_start_date_Valid() const{
    return m_free_trial_start_date_isValid;
}

QList OAIUsageRecord::getUsage() const {
    return m_usage;
}
void OAIUsageRecord::setUsage(const QList &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIUsageRecord::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIUsageRecord::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIUsageRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_discovery_free_trial_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_trial_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
