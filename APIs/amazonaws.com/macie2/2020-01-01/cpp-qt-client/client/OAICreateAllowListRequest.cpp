/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAllowListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAllowListRequest::OAICreateAllowListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAllowListRequest::OAICreateAllowListRequest() {
    this->initializeModel();
}

OAICreateAllowListRequest::~OAICreateAllowListRequest() {}

void OAICreateAllowListRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAllowListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAllowListRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAllowListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAllowListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_criteria.isSet()) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAllowListRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAllowListRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAllowListRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAllowListRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIGetAllowListResponse_criteria OAICreateAllowListRequest::getCriteria() const {
    return m_criteria;
}
void OAICreateAllowListRequest::setCriteria(const OAIGetAllowListResponse_criteria &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAICreateAllowListRequest::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAICreateAllowListRequest::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAICreateAllowListRequest::getDescription() const {
    return m_description;
}
void OAICreateAllowListRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAllowListRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAllowListRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAllowListRequest::getName() const {
    return m_name;
}
void OAICreateAllowListRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAllowListRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAllowListRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAICreateAllowListRequest::getTags() const {
    return m_tags;
}
void OAICreateAllowListRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAllowListRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAllowListRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAllowListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAllowListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_criteria_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
