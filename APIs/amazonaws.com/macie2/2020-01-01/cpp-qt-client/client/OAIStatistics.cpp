/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistics::OAIStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistics::OAIStatistics() {
    this->initializeModel();
}

OAIStatistics::~OAIStatistics() {}

void OAIStatistics::initializeModel() {

    m_approximate_number_of_objects_to_process_isSet = false;
    m_approximate_number_of_objects_to_process_isValid = false;

    m_number_of_runs_isSet = false;
    m_number_of_runs_isValid = false;
}

void OAIStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistics::fromJsonObject(QJsonObject json) {

    m_approximate_number_of_objects_to_process_isValid = ::OpenAPI::fromJsonValue(m_approximate_number_of_objects_to_process, json[QString("approximateNumberOfObjectsToProcess")]);
    m_approximate_number_of_objects_to_process_isSet = !json[QString("approximateNumberOfObjectsToProcess")].isNull() && m_approximate_number_of_objects_to_process_isValid;

    m_number_of_runs_isValid = ::OpenAPI::fromJsonValue(m_number_of_runs, json[QString("numberOfRuns")]);
    m_number_of_runs_isSet = !json[QString("numberOfRuns")].isNull() && m_number_of_runs_isValid;
}

QString OAIStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_number_of_objects_to_process_isSet) {
        obj.insert(QString("approximateNumberOfObjectsToProcess"), ::OpenAPI::toJsonValue(m_approximate_number_of_objects_to_process));
    }
    if (m_number_of_runs_isSet) {
        obj.insert(QString("numberOfRuns"), ::OpenAPI::toJsonValue(m_number_of_runs));
    }
    return obj;
}

double OAIStatistics::getApproximateNumberOfObjectsToProcess() const {
    return m_approximate_number_of_objects_to_process;
}
void OAIStatistics::setApproximateNumberOfObjectsToProcess(const double &approximate_number_of_objects_to_process) {
    m_approximate_number_of_objects_to_process = approximate_number_of_objects_to_process;
    m_approximate_number_of_objects_to_process_isSet = true;
}

bool OAIStatistics::is_approximate_number_of_objects_to_process_Set() const{
    return m_approximate_number_of_objects_to_process_isSet;
}

bool OAIStatistics::is_approximate_number_of_objects_to_process_Valid() const{
    return m_approximate_number_of_objects_to_process_isValid;
}

double OAIStatistics::getNumberOfRuns() const {
    return m_number_of_runs;
}
void OAIStatistics::setNumberOfRuns(const double &number_of_runs) {
    m_number_of_runs = number_of_runs;
    m_number_of_runs_isSet = true;
}

bool OAIStatistics::is_number_of_runs_Set() const{
    return m_number_of_runs_isSet;
}

bool OAIStatistics::is_number_of_runs_Valid() const{
    return m_number_of_runs_isValid;
}

bool OAIStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_number_of_objects_to_process_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_runs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
