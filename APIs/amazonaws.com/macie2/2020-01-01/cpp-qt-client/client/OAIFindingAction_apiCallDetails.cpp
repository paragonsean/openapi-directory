/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingAction_apiCallDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingAction_apiCallDetails::OAIFindingAction_apiCallDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingAction_apiCallDetails::OAIFindingAction_apiCallDetails() {
    this->initializeModel();
}

OAIFindingAction_apiCallDetails::~OAIFindingAction_apiCallDetails() {}

void OAIFindingAction_apiCallDetails::initializeModel() {

    m_api_isSet = false;
    m_api_isValid = false;

    m_api_service_name_isSet = false;
    m_api_service_name_isValid = false;

    m_first_seen_isSet = false;
    m_first_seen_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;
}

void OAIFindingAction_apiCallDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindingAction_apiCallDetails::fromJsonObject(QJsonObject json) {

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_api_service_name_isValid = ::OpenAPI::fromJsonValue(m_api_service_name, json[QString("apiServiceName")]);
    m_api_service_name_isSet = !json[QString("apiServiceName")].isNull() && m_api_service_name_isValid;

    m_first_seen_isValid = ::OpenAPI::fromJsonValue(m_first_seen, json[QString("firstSeen")]);
    m_first_seen_isSet = !json[QString("firstSeen")].isNull() && m_first_seen_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("lastSeen")]);
    m_last_seen_isSet = !json[QString("lastSeen")].isNull() && m_last_seen_isValid;
}

QString OAIFindingAction_apiCallDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindingAction_apiCallDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_api_isSet) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_api_service_name_isSet) {
        obj.insert(QString("apiServiceName"), ::OpenAPI::toJsonValue(m_api_service_name));
    }
    if (m_first_seen_isSet) {
        obj.insert(QString("firstSeen"), ::OpenAPI::toJsonValue(m_first_seen));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("lastSeen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    return obj;
}

QString OAIFindingAction_apiCallDetails::getApi() const {
    return m_api;
}
void OAIFindingAction_apiCallDetails::setApi(const QString &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIFindingAction_apiCallDetails::is_api_Set() const{
    return m_api_isSet;
}

bool OAIFindingAction_apiCallDetails::is_api_Valid() const{
    return m_api_isValid;
}

QString OAIFindingAction_apiCallDetails::getApiServiceName() const {
    return m_api_service_name;
}
void OAIFindingAction_apiCallDetails::setApiServiceName(const QString &api_service_name) {
    m_api_service_name = api_service_name;
    m_api_service_name_isSet = true;
}

bool OAIFindingAction_apiCallDetails::is_api_service_name_Set() const{
    return m_api_service_name_isSet;
}

bool OAIFindingAction_apiCallDetails::is_api_service_name_Valid() const{
    return m_api_service_name_isValid;
}

QDateTime OAIFindingAction_apiCallDetails::getFirstSeen() const {
    return m_first_seen;
}
void OAIFindingAction_apiCallDetails::setFirstSeen(const QDateTime &first_seen) {
    m_first_seen = first_seen;
    m_first_seen_isSet = true;
}

bool OAIFindingAction_apiCallDetails::is_first_seen_Set() const{
    return m_first_seen_isSet;
}

bool OAIFindingAction_apiCallDetails::is_first_seen_Valid() const{
    return m_first_seen_isValid;
}

QDateTime OAIFindingAction_apiCallDetails::getLastSeen() const {
    return m_last_seen;
}
void OAIFindingAction_apiCallDetails::setLastSeen(const QDateTime &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIFindingAction_apiCallDetails::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIFindingAction_apiCallDetails::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

bool OAIFindingAction_apiCallDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindingAction_apiCallDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
