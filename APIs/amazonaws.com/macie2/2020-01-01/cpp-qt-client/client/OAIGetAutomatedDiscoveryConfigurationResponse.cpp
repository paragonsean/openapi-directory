/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAutomatedDiscoveryConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAutomatedDiscoveryConfigurationResponse::OAIGetAutomatedDiscoveryConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAutomatedDiscoveryConfigurationResponse::OAIGetAutomatedDiscoveryConfigurationResponse() {
    this->initializeModel();
}

OAIGetAutomatedDiscoveryConfigurationResponse::~OAIGetAutomatedDiscoveryConfigurationResponse() {}

void OAIGetAutomatedDiscoveryConfigurationResponse::initializeModel() {

    m_classification_scope_id_isSet = false;
    m_classification_scope_id_isValid = false;

    m_disabled_at_isSet = false;
    m_disabled_at_isValid = false;

    m_first_enabled_at_isSet = false;
    m_first_enabled_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_sensitivity_inspection_template_id_isSet = false;
    m_sensitivity_inspection_template_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetAutomatedDiscoveryConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAutomatedDiscoveryConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_classification_scope_id_isValid = ::OpenAPI::fromJsonValue(m_classification_scope_id, json[QString("classificationScopeId")]);
    m_classification_scope_id_isSet = !json[QString("classificationScopeId")].isNull() && m_classification_scope_id_isValid;

    m_disabled_at_isValid = ::OpenAPI::fromJsonValue(m_disabled_at, json[QString("disabledAt")]);
    m_disabled_at_isSet = !json[QString("disabledAt")].isNull() && m_disabled_at_isValid;

    m_first_enabled_at_isValid = ::OpenAPI::fromJsonValue(m_first_enabled_at, json[QString("firstEnabledAt")]);
    m_first_enabled_at_isSet = !json[QString("firstEnabledAt")].isNull() && m_first_enabled_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_sensitivity_inspection_template_id_isValid = ::OpenAPI::fromJsonValue(m_sensitivity_inspection_template_id, json[QString("sensitivityInspectionTemplateId")]);
    m_sensitivity_inspection_template_id_isSet = !json[QString("sensitivityInspectionTemplateId")].isNull() && m_sensitivity_inspection_template_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetAutomatedDiscoveryConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAutomatedDiscoveryConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_scope_id_isSet) {
        obj.insert(QString("classificationScopeId"), ::OpenAPI::toJsonValue(m_classification_scope_id));
    }
    if (m_disabled_at_isSet) {
        obj.insert(QString("disabledAt"), ::OpenAPI::toJsonValue(m_disabled_at));
    }
    if (m_first_enabled_at_isSet) {
        obj.insert(QString("firstEnabledAt"), ::OpenAPI::toJsonValue(m_first_enabled_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_sensitivity_inspection_template_id_isSet) {
        obj.insert(QString("sensitivityInspectionTemplateId"), ::OpenAPI::toJsonValue(m_sensitivity_inspection_template_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGetAutomatedDiscoveryConfigurationResponse::getClassificationScopeId() const {
    return m_classification_scope_id;
}
void OAIGetAutomatedDiscoveryConfigurationResponse::setClassificationScopeId(const QString &classification_scope_id) {
    m_classification_scope_id = classification_scope_id;
    m_classification_scope_id_isSet = true;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_classification_scope_id_Set() const{
    return m_classification_scope_id_isSet;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_classification_scope_id_Valid() const{
    return m_classification_scope_id_isValid;
}

QDateTime OAIGetAutomatedDiscoveryConfigurationResponse::getDisabledAt() const {
    return m_disabled_at;
}
void OAIGetAutomatedDiscoveryConfigurationResponse::setDisabledAt(const QDateTime &disabled_at) {
    m_disabled_at = disabled_at;
    m_disabled_at_isSet = true;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_disabled_at_Set() const{
    return m_disabled_at_isSet;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_disabled_at_Valid() const{
    return m_disabled_at_isValid;
}

QDateTime OAIGetAutomatedDiscoveryConfigurationResponse::getFirstEnabledAt() const {
    return m_first_enabled_at;
}
void OAIGetAutomatedDiscoveryConfigurationResponse::setFirstEnabledAt(const QDateTime &first_enabled_at) {
    m_first_enabled_at = first_enabled_at;
    m_first_enabled_at_isSet = true;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_first_enabled_at_Set() const{
    return m_first_enabled_at_isSet;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_first_enabled_at_Valid() const{
    return m_first_enabled_at_isValid;
}

QDateTime OAIGetAutomatedDiscoveryConfigurationResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetAutomatedDiscoveryConfigurationResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGetAutomatedDiscoveryConfigurationResponse::getSensitivityInspectionTemplateId() const {
    return m_sensitivity_inspection_template_id;
}
void OAIGetAutomatedDiscoveryConfigurationResponse::setSensitivityInspectionTemplateId(const QString &sensitivity_inspection_template_id) {
    m_sensitivity_inspection_template_id = sensitivity_inspection_template_id;
    m_sensitivity_inspection_template_id_isSet = true;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_sensitivity_inspection_template_id_Set() const{
    return m_sensitivity_inspection_template_id_isSet;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_sensitivity_inspection_template_id_Valid() const{
    return m_sensitivity_inspection_template_id_isValid;
}

OAIAutomatedDiscoveryStatus OAIGetAutomatedDiscoveryConfigurationResponse::getStatus() const {
    return m_status;
}
void OAIGetAutomatedDiscoveryConfigurationResponse::setStatus(const OAIAutomatedDiscoveryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_scope_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_enabled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_inspection_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAutomatedDiscoveryConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
