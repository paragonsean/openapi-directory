/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCustomDataIdentifierRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCustomDataIdentifierRequest::OAITestCustomDataIdentifierRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCustomDataIdentifierRequest::OAITestCustomDataIdentifierRequest() {
    this->initializeModel();
}

OAITestCustomDataIdentifierRequest::~OAITestCustomDataIdentifierRequest() {}

void OAITestCustomDataIdentifierRequest::initializeModel() {

    m_ignore_words_isSet = false;
    m_ignore_words_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_maximum_match_distance_isSet = false;
    m_maximum_match_distance_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_sample_text_isSet = false;
    m_sample_text_isValid = false;
}

void OAITestCustomDataIdentifierRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCustomDataIdentifierRequest::fromJsonObject(QJsonObject json) {

    m_ignore_words_isValid = ::OpenAPI::fromJsonValue(m_ignore_words, json[QString("ignoreWords")]);
    m_ignore_words_isSet = !json[QString("ignoreWords")].isNull() && m_ignore_words_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_maximum_match_distance_isValid = ::OpenAPI::fromJsonValue(m_maximum_match_distance, json[QString("maximumMatchDistance")]);
    m_maximum_match_distance_isSet = !json[QString("maximumMatchDistance")].isNull() && m_maximum_match_distance_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_sample_text_isValid = ::OpenAPI::fromJsonValue(m_sample_text, json[QString("sampleText")]);
    m_sample_text_isSet = !json[QString("sampleText")].isNull() && m_sample_text_isValid;
}

QString OAITestCustomDataIdentifierRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCustomDataIdentifierRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_words.isSet()) {
        obj.insert(QString("ignoreWords"), ::OpenAPI::toJsonValue(m_ignore_words));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_maximum_match_distance_isSet) {
        obj.insert(QString("maximumMatchDistance"), ::OpenAPI::toJsonValue(m_maximum_match_distance));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_sample_text_isSet) {
        obj.insert(QString("sampleText"), ::OpenAPI::toJsonValue(m_sample_text));
    }
    return obj;
}

QList OAITestCustomDataIdentifierRequest::getIgnoreWords() const {
    return m_ignore_words;
}
void OAITestCustomDataIdentifierRequest::setIgnoreWords(const QList &ignore_words) {
    m_ignore_words = ignore_words;
    m_ignore_words_isSet = true;
}

bool OAITestCustomDataIdentifierRequest::is_ignore_words_Set() const{
    return m_ignore_words_isSet;
}

bool OAITestCustomDataIdentifierRequest::is_ignore_words_Valid() const{
    return m_ignore_words_isValid;
}

QList OAITestCustomDataIdentifierRequest::getKeywords() const {
    return m_keywords;
}
void OAITestCustomDataIdentifierRequest::setKeywords(const QList &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAITestCustomDataIdentifierRequest::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAITestCustomDataIdentifierRequest::is_keywords_Valid() const{
    return m_keywords_isValid;
}

qint32 OAITestCustomDataIdentifierRequest::getMaximumMatchDistance() const {
    return m_maximum_match_distance;
}
void OAITestCustomDataIdentifierRequest::setMaximumMatchDistance(const qint32 &maximum_match_distance) {
    m_maximum_match_distance = maximum_match_distance;
    m_maximum_match_distance_isSet = true;
}

bool OAITestCustomDataIdentifierRequest::is_maximum_match_distance_Set() const{
    return m_maximum_match_distance_isSet;
}

bool OAITestCustomDataIdentifierRequest::is_maximum_match_distance_Valid() const{
    return m_maximum_match_distance_isValid;
}

QString OAITestCustomDataIdentifierRequest::getRegex() const {
    return m_regex;
}
void OAITestCustomDataIdentifierRequest::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAITestCustomDataIdentifierRequest::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAITestCustomDataIdentifierRequest::is_regex_Valid() const{
    return m_regex_isValid;
}

QString OAITestCustomDataIdentifierRequest::getSampleText() const {
    return m_sample_text;
}
void OAITestCustomDataIdentifierRequest::setSampleText(const QString &sample_text) {
    m_sample_text = sample_text;
    m_sample_text_isSet = true;
}

bool OAITestCustomDataIdentifierRequest::is_sample_text_Set() const{
    return m_sample_text_isSet;
}

bool OAITestCustomDataIdentifierRequest::is_sample_text_Valid() const{
    return m_sample_text_isValid;
}

bool OAITestCustomDataIdentifierRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_words.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_match_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCustomDataIdentifierRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_regex_isValid && m_sample_text_isValid && true;
}

} // namespace OpenAPI
