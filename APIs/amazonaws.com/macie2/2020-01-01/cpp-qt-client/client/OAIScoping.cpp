/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoping::OAIScoping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoping::OAIScoping() {
    this->initializeModel();
}

OAIScoping::~OAIScoping() {}

void OAIScoping::initializeModel() {

    m_excludes_isSet = false;
    m_excludes_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;
}

void OAIScoping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoping::fromJsonObject(QJsonObject json) {

    m_excludes_isValid = ::OpenAPI::fromJsonValue(m_excludes, json[QString("excludes")]);
    m_excludes_isSet = !json[QString("excludes")].isNull() && m_excludes_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("includes")]);
    m_includes_isSet = !json[QString("includes")].isNull() && m_includes_isValid;
}

QString OAIScoping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoping::asJsonObject() const {
    QJsonObject obj;
    if (m_excludes.isSet()) {
        obj.insert(QString("excludes"), ::OpenAPI::toJsonValue(m_excludes));
    }
    if (m_includes.isSet()) {
        obj.insert(QString("includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    return obj;
}

OAIScoping_excludes OAIScoping::getExcludes() const {
    return m_excludes;
}
void OAIScoping::setExcludes(const OAIScoping_excludes &excludes) {
    m_excludes = excludes;
    m_excludes_isSet = true;
}

bool OAIScoping::is_excludes_Set() const{
    return m_excludes_isSet;
}

bool OAIScoping::is_excludes_Valid() const{
    return m_excludes_isValid;
}

OAIScoping_includes OAIScoping::getIncludes() const {
    return m_includes;
}
void OAIScoping::setIncludes(const OAIScoping_includes &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIScoping::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIScoping::is_includes_Valid() const{
    return m_includes_isValid;
}

bool OAIScoping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excludes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
