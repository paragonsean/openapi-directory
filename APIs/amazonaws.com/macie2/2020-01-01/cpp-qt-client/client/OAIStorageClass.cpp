/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageClass::OAIStorageClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageClass::OAIStorageClass() {
    this->initializeModel();
}

OAIStorageClass::~OAIStorageClass() {}

void OAIStorageClass::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStorageClass::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStorageClass::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STANDARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REDUCED_REDUNDANCY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::REDUCED_REDUNDANCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STANDARD_IA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::STANDARD_IA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTELLIGENT_TIERING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::INTELLIGENT_TIERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEEP_ARCHIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::DEEP_ARCHIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONEZONE_IA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::ONEZONE_IA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GLACIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::GLACIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GLACIER_IR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::GLACIER_IR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTPOSTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStorageClass::OUTPOSTS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStorageClass::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStorageClass::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStorageClass::STANDARD:
            val = "STANDARD";
            break;
        case eOAIStorageClass::REDUCED_REDUNDANCY:
            val = "REDUCED_REDUNDANCY";
            break;
        case eOAIStorageClass::STANDARD_IA:
            val = "STANDARD_IA";
            break;
        case eOAIStorageClass::INTELLIGENT_TIERING:
            val = "INTELLIGENT_TIERING";
            break;
        case eOAIStorageClass::DEEP_ARCHIVE:
            val = "DEEP_ARCHIVE";
            break;
        case eOAIStorageClass::ONEZONE_IA:
            val = "ONEZONE_IA";
            break;
        case eOAIStorageClass::GLACIER:
            val = "GLACIER";
            break;
        case eOAIStorageClass::GLACIER_IR:
            val = "GLACIER_IR";
            break;
        case eOAIStorageClass::OUTPOSTS:
            val = "OUTPOSTS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStorageClass::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStorageClass::eOAIStorageClass OAIStorageClass::getValue() const {
    return m_value;
}

void OAIStorageClass::setValue(const OAIStorageClass::eOAIStorageClass& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStorageClass::isSet() const {
    
    return m_value_isSet;
}

bool OAIStorageClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
