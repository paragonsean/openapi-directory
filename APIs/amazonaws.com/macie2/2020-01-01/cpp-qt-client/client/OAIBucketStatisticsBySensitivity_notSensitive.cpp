/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketStatisticsBySensitivity_notSensitive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketStatisticsBySensitivity_notSensitive::OAIBucketStatisticsBySensitivity_notSensitive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketStatisticsBySensitivity_notSensitive::OAIBucketStatisticsBySensitivity_notSensitive() {
    this->initializeModel();
}

OAIBucketStatisticsBySensitivity_notSensitive::~OAIBucketStatisticsBySensitivity_notSensitive() {}

void OAIBucketStatisticsBySensitivity_notSensitive::initializeModel() {

    m_classifiable_size_in_bytes_isSet = false;
    m_classifiable_size_in_bytes_isValid = false;

    m_publicly_accessible_count_isSet = false;
    m_publicly_accessible_count_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_total_size_in_bytes_isSet = false;
    m_total_size_in_bytes_isValid = false;
}

void OAIBucketStatisticsBySensitivity_notSensitive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketStatisticsBySensitivity_notSensitive::fromJsonObject(QJsonObject json) {

    m_classifiable_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_classifiable_size_in_bytes, json[QString("classifiableSizeInBytes")]);
    m_classifiable_size_in_bytes_isSet = !json[QString("classifiableSizeInBytes")].isNull() && m_classifiable_size_in_bytes_isValid;

    m_publicly_accessible_count_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible_count, json[QString("publiclyAccessibleCount")]);
    m_publicly_accessible_count_isSet = !json[QString("publiclyAccessibleCount")].isNull() && m_publicly_accessible_count_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;

    m_total_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_size_in_bytes, json[QString("totalSizeInBytes")]);
    m_total_size_in_bytes_isSet = !json[QString("totalSizeInBytes")].isNull() && m_total_size_in_bytes_isValid;
}

QString OAIBucketStatisticsBySensitivity_notSensitive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketStatisticsBySensitivity_notSensitive::asJsonObject() const {
    QJsonObject obj;
    if (m_classifiable_size_in_bytes_isSet) {
        obj.insert(QString("classifiableSizeInBytes"), ::OpenAPI::toJsonValue(m_classifiable_size_in_bytes));
    }
    if (m_publicly_accessible_count_isSet) {
        obj.insert(QString("publiclyAccessibleCount"), ::OpenAPI::toJsonValue(m_publicly_accessible_count));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_total_size_in_bytes_isSet) {
        obj.insert(QString("totalSizeInBytes"), ::OpenAPI::toJsonValue(m_total_size_in_bytes));
    }
    return obj;
}

qint32 OAIBucketStatisticsBySensitivity_notSensitive::getClassifiableSizeInBytes() const {
    return m_classifiable_size_in_bytes;
}
void OAIBucketStatisticsBySensitivity_notSensitive::setClassifiableSizeInBytes(const qint32 &classifiable_size_in_bytes) {
    m_classifiable_size_in_bytes = classifiable_size_in_bytes;
    m_classifiable_size_in_bytes_isSet = true;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_classifiable_size_in_bytes_Set() const{
    return m_classifiable_size_in_bytes_isSet;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_classifiable_size_in_bytes_Valid() const{
    return m_classifiable_size_in_bytes_isValid;
}

qint32 OAIBucketStatisticsBySensitivity_notSensitive::getPubliclyAccessibleCount() const {
    return m_publicly_accessible_count;
}
void OAIBucketStatisticsBySensitivity_notSensitive::setPubliclyAccessibleCount(const qint32 &publicly_accessible_count) {
    m_publicly_accessible_count = publicly_accessible_count;
    m_publicly_accessible_count_isSet = true;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_publicly_accessible_count_Set() const{
    return m_publicly_accessible_count_isSet;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_publicly_accessible_count_Valid() const{
    return m_publicly_accessible_count_isValid;
}

qint32 OAIBucketStatisticsBySensitivity_notSensitive::getTotalCount() const {
    return m_total_count;
}
void OAIBucketStatisticsBySensitivity_notSensitive::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_total_count_Valid() const{
    return m_total_count_isValid;
}

qint32 OAIBucketStatisticsBySensitivity_notSensitive::getTotalSizeInBytes() const {
    return m_total_size_in_bytes;
}
void OAIBucketStatisticsBySensitivity_notSensitive::setTotalSizeInBytes(const qint32 &total_size_in_bytes) {
    m_total_size_in_bytes = total_size_in_bytes;
    m_total_size_in_bytes_isSet = true;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_total_size_in_bytes_Set() const{
    return m_total_size_in_bytes_isSet;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::is_total_size_in_bytes_Valid() const{
    return m_total_size_in_bytes_isValid;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classifiable_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketStatisticsBySensitivity_notSensitive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
