/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBucketStatisticsResponse_bucketCountByEncryptionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::OAIGetBucketStatisticsResponse_bucketCountByEncryptionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::OAIGetBucketStatisticsResponse_bucketCountByEncryptionType() {
    this->initializeModel();
}

OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::~OAIGetBucketStatisticsResponse_bucketCountByEncryptionType() {}

void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::initializeModel() {

    m_kms_managed_isSet = false;
    m_kms_managed_isValid = false;

    m_s3_managed_isSet = false;
    m_s3_managed_isValid = false;

    m_unencrypted_isSet = false;
    m_unencrypted_isValid = false;

    m_unknown_isSet = false;
    m_unknown_isValid = false;
}

void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::fromJsonObject(QJsonObject json) {

    m_kms_managed_isValid = ::OpenAPI::fromJsonValue(m_kms_managed, json[QString("kmsManaged")]);
    m_kms_managed_isSet = !json[QString("kmsManaged")].isNull() && m_kms_managed_isValid;

    m_s3_managed_isValid = ::OpenAPI::fromJsonValue(m_s3_managed, json[QString("s3Managed")]);
    m_s3_managed_isSet = !json[QString("s3Managed")].isNull() && m_s3_managed_isValid;

    m_unencrypted_isValid = ::OpenAPI::fromJsonValue(m_unencrypted, json[QString("unencrypted")]);
    m_unencrypted_isSet = !json[QString("unencrypted")].isNull() && m_unencrypted_isValid;

    m_unknown_isValid = ::OpenAPI::fromJsonValue(m_unknown, json[QString("unknown")]);
    m_unknown_isSet = !json[QString("unknown")].isNull() && m_unknown_isValid;
}

QString OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_managed_isSet) {
        obj.insert(QString("kmsManaged"), ::OpenAPI::toJsonValue(m_kms_managed));
    }
    if (m_s3_managed_isSet) {
        obj.insert(QString("s3Managed"), ::OpenAPI::toJsonValue(m_s3_managed));
    }
    if (m_unencrypted_isSet) {
        obj.insert(QString("unencrypted"), ::OpenAPI::toJsonValue(m_unencrypted));
    }
    if (m_unknown_isSet) {
        obj.insert(QString("unknown"), ::OpenAPI::toJsonValue(m_unknown));
    }
    return obj;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::getKmsManaged() const {
    return m_kms_managed;
}
void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::setKmsManaged(const qint32 &kms_managed) {
    m_kms_managed = kms_managed;
    m_kms_managed_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_kms_managed_Set() const{
    return m_kms_managed_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_kms_managed_Valid() const{
    return m_kms_managed_isValid;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::getS3Managed() const {
    return m_s3_managed;
}
void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::setS3Managed(const qint32 &s3_managed) {
    m_s3_managed = s3_managed;
    m_s3_managed_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_s3_managed_Set() const{
    return m_s3_managed_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_s3_managed_Valid() const{
    return m_s3_managed_isValid;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::getUnencrypted() const {
    return m_unencrypted;
}
void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::setUnencrypted(const qint32 &unencrypted) {
    m_unencrypted = unencrypted;
    m_unencrypted_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_unencrypted_Set() const{
    return m_unencrypted_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_unencrypted_Valid() const{
    return m_unencrypted_isValid;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::getUnknown() const {
    return m_unknown;
}
void OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::setUnknown(const qint32 &unknown) {
    m_unknown = unknown;
    m_unknown_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_unknown_Set() const{
    return m_unknown_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::is_unknown_Valid() const{
    return m_unknown_isValid;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unencrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBucketStatisticsResponse_bucketCountByEncryptionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
