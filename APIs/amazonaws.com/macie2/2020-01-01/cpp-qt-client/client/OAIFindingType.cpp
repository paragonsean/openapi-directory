/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingType::OAIFindingType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingType::OAIFindingType() {
    this->initializeModel();
}

OAIFindingType::~OAIFindingType() {}

void OAIFindingType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFindingType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFindingType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SensitiveData:S3Object/Multiple", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::SENSITIVEDATA_S3OBJECT_MULTIPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SensitiveData:S3Object/Financial", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::SENSITIVEDATA_S3OBJECT_FINANCIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SensitiveData:S3Object/Personal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::SENSITIVEDATA_S3OBJECT_PERSONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SensitiveData:S3Object/Credentials", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::SENSITIVEDATA_S3OBJECT_CREDENTIALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SensitiveData:S3Object/CustomIdentifier", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::SENSITIVEDATA_S3OBJECT_CUSTOMIDENTIFIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy:IAMUser/S3BucketPublic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::POLICY_IAMUSER_S3BUCKETPUBLIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy:IAMUser/S3BucketSharedExternally", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::POLICY_IAMUSER_S3BUCKETSHAREDEXTERNALLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy:IAMUser/S3BucketReplicatedExternally", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::POLICY_IAMUSER_S3BUCKETREPLICATEDEXTERNALLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy:IAMUser/S3BucketEncryptionDisabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::POLICY_IAMUSER_S3BUCKETENCRYPTIONDISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy:IAMUser/S3BlockPublicAccessDisabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::POLICY_IAMUSER_S3BLOCKPUBLICACCESSDISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy:IAMUser/S3BucketSharedWithCloudFront", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFindingType::POLICY_IAMUSER_S3BUCKETSHAREDWITHCLOUDFRONT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFindingType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFindingType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFindingType::SENSITIVEDATA_S3OBJECT_MULTIPLE:
            val = "SensitiveData:S3Object/Multiple";
            break;
        case eOAIFindingType::SENSITIVEDATA_S3OBJECT_FINANCIAL:
            val = "SensitiveData:S3Object/Financial";
            break;
        case eOAIFindingType::SENSITIVEDATA_S3OBJECT_PERSONAL:
            val = "SensitiveData:S3Object/Personal";
            break;
        case eOAIFindingType::SENSITIVEDATA_S3OBJECT_CREDENTIALS:
            val = "SensitiveData:S3Object/Credentials";
            break;
        case eOAIFindingType::SENSITIVEDATA_S3OBJECT_CUSTOMIDENTIFIER:
            val = "SensitiveData:S3Object/CustomIdentifier";
            break;
        case eOAIFindingType::POLICY_IAMUSER_S3BUCKETPUBLIC:
            val = "Policy:IAMUser/S3BucketPublic";
            break;
        case eOAIFindingType::POLICY_IAMUSER_S3BUCKETSHAREDEXTERNALLY:
            val = "Policy:IAMUser/S3BucketSharedExternally";
            break;
        case eOAIFindingType::POLICY_IAMUSER_S3BUCKETREPLICATEDEXTERNALLY:
            val = "Policy:IAMUser/S3BucketReplicatedExternally";
            break;
        case eOAIFindingType::POLICY_IAMUSER_S3BUCKETENCRYPTIONDISABLED:
            val = "Policy:IAMUser/S3BucketEncryptionDisabled";
            break;
        case eOAIFindingType::POLICY_IAMUSER_S3BLOCKPUBLICACCESSDISABLED:
            val = "Policy:IAMUser/S3BlockPublicAccessDisabled";
            break;
        case eOAIFindingType::POLICY_IAMUSER_S3BUCKETSHAREDWITHCLOUDFRONT:
            val = "Policy:IAMUser/S3BucketSharedWithCloudFront";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFindingType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFindingType::eOAIFindingType OAIFindingType::getValue() const {
    return m_value;
}

void OAIFindingType::setValue(const OAIFindingType::eOAIFindingType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFindingType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFindingType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
