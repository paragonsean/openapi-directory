/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchingBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchingBucket::OAIMatchingBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchingBucket::OAIMatchingBucket() {
    this->initializeModel();
}

OAIMatchingBucket::~OAIMatchingBucket() {}

void OAIMatchingBucket::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_classifiable_object_count_isSet = false;
    m_classifiable_object_count_isValid = false;

    m_classifiable_size_in_bytes_isSet = false;
    m_classifiable_size_in_bytes_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_job_details_isSet = false;
    m_job_details_isValid = false;

    m_last_automated_discovery_time_isSet = false;
    m_last_automated_discovery_time_isValid = false;

    m_object_count_isSet = false;
    m_object_count_isValid = false;

    m_object_count_by_encryption_type_isSet = false;
    m_object_count_by_encryption_type_isValid = false;

    m_sensitivity_score_isSet = false;
    m_sensitivity_score_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_size_in_bytes_compressed_isSet = false;
    m_size_in_bytes_compressed_isValid = false;

    m_unclassifiable_object_count_isSet = false;
    m_unclassifiable_object_count_isValid = false;

    m_unclassifiable_object_size_in_bytes_isSet = false;
    m_unclassifiable_object_size_in_bytes_isValid = false;
}

void OAIMatchingBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchingBucket::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_classifiable_object_count_isValid = ::OpenAPI::fromJsonValue(m_classifiable_object_count, json[QString("classifiableObjectCount")]);
    m_classifiable_object_count_isSet = !json[QString("classifiableObjectCount")].isNull() && m_classifiable_object_count_isValid;

    m_classifiable_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_classifiable_size_in_bytes, json[QString("classifiableSizeInBytes")]);
    m_classifiable_size_in_bytes_isSet = !json[QString("classifiableSizeInBytes")].isNull() && m_classifiable_size_in_bytes_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_job_details_isValid = ::OpenAPI::fromJsonValue(m_job_details, json[QString("jobDetails")]);
    m_job_details_isSet = !json[QString("jobDetails")].isNull() && m_job_details_isValid;

    m_last_automated_discovery_time_isValid = ::OpenAPI::fromJsonValue(m_last_automated_discovery_time, json[QString("lastAutomatedDiscoveryTime")]);
    m_last_automated_discovery_time_isSet = !json[QString("lastAutomatedDiscoveryTime")].isNull() && m_last_automated_discovery_time_isValid;

    m_object_count_isValid = ::OpenAPI::fromJsonValue(m_object_count, json[QString("objectCount")]);
    m_object_count_isSet = !json[QString("objectCount")].isNull() && m_object_count_isValid;

    m_object_count_by_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_object_count_by_encryption_type, json[QString("objectCountByEncryptionType")]);
    m_object_count_by_encryption_type_isSet = !json[QString("objectCountByEncryptionType")].isNull() && m_object_count_by_encryption_type_isValid;

    m_sensitivity_score_isValid = ::OpenAPI::fromJsonValue(m_sensitivity_score, json[QString("sensitivityScore")]);
    m_sensitivity_score_isSet = !json[QString("sensitivityScore")].isNull() && m_sensitivity_score_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_size_in_bytes_compressed_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes_compressed, json[QString("sizeInBytesCompressed")]);
    m_size_in_bytes_compressed_isSet = !json[QString("sizeInBytesCompressed")].isNull() && m_size_in_bytes_compressed_isValid;

    m_unclassifiable_object_count_isValid = ::OpenAPI::fromJsonValue(m_unclassifiable_object_count, json[QString("unclassifiableObjectCount")]);
    m_unclassifiable_object_count_isSet = !json[QString("unclassifiableObjectCount")].isNull() && m_unclassifiable_object_count_isValid;

    m_unclassifiable_object_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_unclassifiable_object_size_in_bytes, json[QString("unclassifiableObjectSizeInBytes")]);
    m_unclassifiable_object_size_in_bytes_isSet = !json[QString("unclassifiableObjectSizeInBytes")].isNull() && m_unclassifiable_object_size_in_bytes_isValid;
}

QString OAIMatchingBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchingBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_classifiable_object_count_isSet) {
        obj.insert(QString("classifiableObjectCount"), ::OpenAPI::toJsonValue(m_classifiable_object_count));
    }
    if (m_classifiable_size_in_bytes_isSet) {
        obj.insert(QString("classifiableSizeInBytes"), ::OpenAPI::toJsonValue(m_classifiable_size_in_bytes));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_job_details.isSet()) {
        obj.insert(QString("jobDetails"), ::OpenAPI::toJsonValue(m_job_details));
    }
    if (m_last_automated_discovery_time_isSet) {
        obj.insert(QString("lastAutomatedDiscoveryTime"), ::OpenAPI::toJsonValue(m_last_automated_discovery_time));
    }
    if (m_object_count_isSet) {
        obj.insert(QString("objectCount"), ::OpenAPI::toJsonValue(m_object_count));
    }
    if (m_object_count_by_encryption_type.isSet()) {
        obj.insert(QString("objectCountByEncryptionType"), ::OpenAPI::toJsonValue(m_object_count_by_encryption_type));
    }
    if (m_sensitivity_score_isSet) {
        obj.insert(QString("sensitivityScore"), ::OpenAPI::toJsonValue(m_sensitivity_score));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_size_in_bytes_compressed_isSet) {
        obj.insert(QString("sizeInBytesCompressed"), ::OpenAPI::toJsonValue(m_size_in_bytes_compressed));
    }
    if (m_unclassifiable_object_count.isSet()) {
        obj.insert(QString("unclassifiableObjectCount"), ::OpenAPI::toJsonValue(m_unclassifiable_object_count));
    }
    if (m_unclassifiable_object_size_in_bytes.isSet()) {
        obj.insert(QString("unclassifiableObjectSizeInBytes"), ::OpenAPI::toJsonValue(m_unclassifiable_object_size_in_bytes));
    }
    return obj;
}

QString OAIMatchingBucket::getAccountId() const {
    return m_account_id;
}
void OAIMatchingBucket::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMatchingBucket::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMatchingBucket::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIMatchingBucket::getBucketName() const {
    return m_bucket_name;
}
void OAIMatchingBucket::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIMatchingBucket::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIMatchingBucket::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

qint32 OAIMatchingBucket::getClassifiableObjectCount() const {
    return m_classifiable_object_count;
}
void OAIMatchingBucket::setClassifiableObjectCount(const qint32 &classifiable_object_count) {
    m_classifiable_object_count = classifiable_object_count;
    m_classifiable_object_count_isSet = true;
}

bool OAIMatchingBucket::is_classifiable_object_count_Set() const{
    return m_classifiable_object_count_isSet;
}

bool OAIMatchingBucket::is_classifiable_object_count_Valid() const{
    return m_classifiable_object_count_isValid;
}

qint32 OAIMatchingBucket::getClassifiableSizeInBytes() const {
    return m_classifiable_size_in_bytes;
}
void OAIMatchingBucket::setClassifiableSizeInBytes(const qint32 &classifiable_size_in_bytes) {
    m_classifiable_size_in_bytes = classifiable_size_in_bytes;
    m_classifiable_size_in_bytes_isSet = true;
}

bool OAIMatchingBucket::is_classifiable_size_in_bytes_Set() const{
    return m_classifiable_size_in_bytes_isSet;
}

bool OAIMatchingBucket::is_classifiable_size_in_bytes_Valid() const{
    return m_classifiable_size_in_bytes_isValid;
}

OAIBucketMetadataErrorCode OAIMatchingBucket::getErrorCode() const {
    return m_error_code;
}
void OAIMatchingBucket::setErrorCode(const OAIBucketMetadataErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIMatchingBucket::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIMatchingBucket::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIMatchingBucket::getErrorMessage() const {
    return m_error_message;
}
void OAIMatchingBucket::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIMatchingBucket::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIMatchingBucket::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIMatchingBucket_jobDetails OAIMatchingBucket::getJobDetails() const {
    return m_job_details;
}
void OAIMatchingBucket::setJobDetails(const OAIMatchingBucket_jobDetails &job_details) {
    m_job_details = job_details;
    m_job_details_isSet = true;
}

bool OAIMatchingBucket::is_job_details_Set() const{
    return m_job_details_isSet;
}

bool OAIMatchingBucket::is_job_details_Valid() const{
    return m_job_details_isValid;
}

QDateTime OAIMatchingBucket::getLastAutomatedDiscoveryTime() const {
    return m_last_automated_discovery_time;
}
void OAIMatchingBucket::setLastAutomatedDiscoveryTime(const QDateTime &last_automated_discovery_time) {
    m_last_automated_discovery_time = last_automated_discovery_time;
    m_last_automated_discovery_time_isSet = true;
}

bool OAIMatchingBucket::is_last_automated_discovery_time_Set() const{
    return m_last_automated_discovery_time_isSet;
}

bool OAIMatchingBucket::is_last_automated_discovery_time_Valid() const{
    return m_last_automated_discovery_time_isValid;
}

qint32 OAIMatchingBucket::getObjectCount() const {
    return m_object_count;
}
void OAIMatchingBucket::setObjectCount(const qint32 &object_count) {
    m_object_count = object_count;
    m_object_count_isSet = true;
}

bool OAIMatchingBucket::is_object_count_Set() const{
    return m_object_count_isSet;
}

bool OAIMatchingBucket::is_object_count_Valid() const{
    return m_object_count_isValid;
}

OAIBucketMetadata_objectCountByEncryptionType OAIMatchingBucket::getObjectCountByEncryptionType() const {
    return m_object_count_by_encryption_type;
}
void OAIMatchingBucket::setObjectCountByEncryptionType(const OAIBucketMetadata_objectCountByEncryptionType &object_count_by_encryption_type) {
    m_object_count_by_encryption_type = object_count_by_encryption_type;
    m_object_count_by_encryption_type_isSet = true;
}

bool OAIMatchingBucket::is_object_count_by_encryption_type_Set() const{
    return m_object_count_by_encryption_type_isSet;
}

bool OAIMatchingBucket::is_object_count_by_encryption_type_Valid() const{
    return m_object_count_by_encryption_type_isValid;
}

qint32 OAIMatchingBucket::getSensitivityScore() const {
    return m_sensitivity_score;
}
void OAIMatchingBucket::setSensitivityScore(const qint32 &sensitivity_score) {
    m_sensitivity_score = sensitivity_score;
    m_sensitivity_score_isSet = true;
}

bool OAIMatchingBucket::is_sensitivity_score_Set() const{
    return m_sensitivity_score_isSet;
}

bool OAIMatchingBucket::is_sensitivity_score_Valid() const{
    return m_sensitivity_score_isValid;
}

qint32 OAIMatchingBucket::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIMatchingBucket::setSizeInBytes(const qint32 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIMatchingBucket::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIMatchingBucket::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

qint32 OAIMatchingBucket::getSizeInBytesCompressed() const {
    return m_size_in_bytes_compressed;
}
void OAIMatchingBucket::setSizeInBytesCompressed(const qint32 &size_in_bytes_compressed) {
    m_size_in_bytes_compressed = size_in_bytes_compressed;
    m_size_in_bytes_compressed_isSet = true;
}

bool OAIMatchingBucket::is_size_in_bytes_compressed_Set() const{
    return m_size_in_bytes_compressed_isSet;
}

bool OAIMatchingBucket::is_size_in_bytes_compressed_Valid() const{
    return m_size_in_bytes_compressed_isValid;
}

OAIBucketMetadata_unclassifiableObjectCount OAIMatchingBucket::getUnclassifiableObjectCount() const {
    return m_unclassifiable_object_count;
}
void OAIMatchingBucket::setUnclassifiableObjectCount(const OAIBucketMetadata_unclassifiableObjectCount &unclassifiable_object_count) {
    m_unclassifiable_object_count = unclassifiable_object_count;
    m_unclassifiable_object_count_isSet = true;
}

bool OAIMatchingBucket::is_unclassifiable_object_count_Set() const{
    return m_unclassifiable_object_count_isSet;
}

bool OAIMatchingBucket::is_unclassifiable_object_count_Valid() const{
    return m_unclassifiable_object_count_isValid;
}

OAIBucketMetadata_unclassifiableObjectSizeInBytes OAIMatchingBucket::getUnclassifiableObjectSizeInBytes() const {
    return m_unclassifiable_object_size_in_bytes;
}
void OAIMatchingBucket::setUnclassifiableObjectSizeInBytes(const OAIBucketMetadata_unclassifiableObjectSizeInBytes &unclassifiable_object_size_in_bytes) {
    m_unclassifiable_object_size_in_bytes = unclassifiable_object_size_in_bytes;
    m_unclassifiable_object_size_in_bytes_isSet = true;
}

bool OAIMatchingBucket::is_unclassifiable_object_size_in_bytes_Set() const{
    return m_unclassifiable_object_size_in_bytes_isSet;
}

bool OAIMatchingBucket::is_unclassifiable_object_size_in_bytes_Valid() const{
    return m_unclassifiable_object_size_in_bytes_isValid;
}

bool OAIMatchingBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiable_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiable_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_automated_discovery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_by_encryption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclassifiable_object_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclassifiable_object_size_in_bytes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchingBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
