/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketMetadata::OAIBucketMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketMetadata::OAIBucketMetadata() {
    this->initializeModel();
}

OAIBucketMetadata::~OAIBucketMetadata() {}

void OAIBucketMetadata::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_allows_unencrypted_object_uploads_isSet = false;
    m_allows_unencrypted_object_uploads_isValid = false;

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_bucket_created_at_isSet = false;
    m_bucket_created_at_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_classifiable_object_count_isSet = false;
    m_classifiable_object_count_isValid = false;

    m_classifiable_size_in_bytes_isSet = false;
    m_classifiable_size_in_bytes_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_job_details_isSet = false;
    m_job_details_isValid = false;

    m_last_automated_discovery_time_isSet = false;
    m_last_automated_discovery_time_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_object_count_isSet = false;
    m_object_count_isValid = false;

    m_object_count_by_encryption_type_isSet = false;
    m_object_count_by_encryption_type_isValid = false;

    m_public_access_isSet = false;
    m_public_access_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_replication_details_isSet = false;
    m_replication_details_isValid = false;

    m_sensitivity_score_isSet = false;
    m_sensitivity_score_isValid = false;

    m_server_side_encryption_isSet = false;
    m_server_side_encryption_isValid = false;

    m_shared_access_isSet = false;
    m_shared_access_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_size_in_bytes_compressed_isSet = false;
    m_size_in_bytes_compressed_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_unclassifiable_object_count_isSet = false;
    m_unclassifiable_object_count_isValid = false;

    m_unclassifiable_object_size_in_bytes_isSet = false;
    m_unclassifiable_object_size_in_bytes_isValid = false;

    m_versioning_isSet = false;
    m_versioning_isValid = false;
}

void OAIBucketMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketMetadata::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_allows_unencrypted_object_uploads_isValid = ::OpenAPI::fromJsonValue(m_allows_unencrypted_object_uploads, json[QString("allowsUnencryptedObjectUploads")]);
    m_allows_unencrypted_object_uploads_isSet = !json[QString("allowsUnencryptedObjectUploads")].isNull() && m_allows_unencrypted_object_uploads_isValid;

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("bucketArn")]);
    m_bucket_arn_isSet = !json[QString("bucketArn")].isNull() && m_bucket_arn_isValid;

    m_bucket_created_at_isValid = ::OpenAPI::fromJsonValue(m_bucket_created_at, json[QString("bucketCreatedAt")]);
    m_bucket_created_at_isSet = !json[QString("bucketCreatedAt")].isNull() && m_bucket_created_at_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_classifiable_object_count_isValid = ::OpenAPI::fromJsonValue(m_classifiable_object_count, json[QString("classifiableObjectCount")]);
    m_classifiable_object_count_isSet = !json[QString("classifiableObjectCount")].isNull() && m_classifiable_object_count_isValid;

    m_classifiable_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_classifiable_size_in_bytes, json[QString("classifiableSizeInBytes")]);
    m_classifiable_size_in_bytes_isSet = !json[QString("classifiableSizeInBytes")].isNull() && m_classifiable_size_in_bytes_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_job_details_isValid = ::OpenAPI::fromJsonValue(m_job_details, json[QString("jobDetails")]);
    m_job_details_isSet = !json[QString("jobDetails")].isNull() && m_job_details_isValid;

    m_last_automated_discovery_time_isValid = ::OpenAPI::fromJsonValue(m_last_automated_discovery_time, json[QString("lastAutomatedDiscoveryTime")]);
    m_last_automated_discovery_time_isSet = !json[QString("lastAutomatedDiscoveryTime")].isNull() && m_last_automated_discovery_time_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_object_count_isValid = ::OpenAPI::fromJsonValue(m_object_count, json[QString("objectCount")]);
    m_object_count_isSet = !json[QString("objectCount")].isNull() && m_object_count_isValid;

    m_object_count_by_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_object_count_by_encryption_type, json[QString("objectCountByEncryptionType")]);
    m_object_count_by_encryption_type_isSet = !json[QString("objectCountByEncryptionType")].isNull() && m_object_count_by_encryption_type_isValid;

    m_public_access_isValid = ::OpenAPI::fromJsonValue(m_public_access, json[QString("publicAccess")]);
    m_public_access_isSet = !json[QString("publicAccess")].isNull() && m_public_access_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_replication_details_isValid = ::OpenAPI::fromJsonValue(m_replication_details, json[QString("replicationDetails")]);
    m_replication_details_isSet = !json[QString("replicationDetails")].isNull() && m_replication_details_isValid;

    m_sensitivity_score_isValid = ::OpenAPI::fromJsonValue(m_sensitivity_score, json[QString("sensitivityScore")]);
    m_sensitivity_score_isSet = !json[QString("sensitivityScore")].isNull() && m_sensitivity_score_isValid;

    m_server_side_encryption_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption, json[QString("serverSideEncryption")]);
    m_server_side_encryption_isSet = !json[QString("serverSideEncryption")].isNull() && m_server_side_encryption_isValid;

    m_shared_access_isValid = ::OpenAPI::fromJsonValue(m_shared_access, json[QString("sharedAccess")]);
    m_shared_access_isSet = !json[QString("sharedAccess")].isNull() && m_shared_access_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_size_in_bytes_compressed_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes_compressed, json[QString("sizeInBytesCompressed")]);
    m_size_in_bytes_compressed_isSet = !json[QString("sizeInBytesCompressed")].isNull() && m_size_in_bytes_compressed_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_unclassifiable_object_count_isValid = ::OpenAPI::fromJsonValue(m_unclassifiable_object_count, json[QString("unclassifiableObjectCount")]);
    m_unclassifiable_object_count_isSet = !json[QString("unclassifiableObjectCount")].isNull() && m_unclassifiable_object_count_isValid;

    m_unclassifiable_object_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_unclassifiable_object_size_in_bytes, json[QString("unclassifiableObjectSizeInBytes")]);
    m_unclassifiable_object_size_in_bytes_isSet = !json[QString("unclassifiableObjectSizeInBytes")].isNull() && m_unclassifiable_object_size_in_bytes_isValid;

    m_versioning_isValid = ::OpenAPI::fromJsonValue(m_versioning, json[QString("versioning")]);
    m_versioning_isSet = !json[QString("versioning")].isNull() && m_versioning_isValid;
}

QString OAIBucketMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_allows_unencrypted_object_uploads.isSet()) {
        obj.insert(QString("allowsUnencryptedObjectUploads"), ::OpenAPI::toJsonValue(m_allows_unencrypted_object_uploads));
    }
    if (m_bucket_arn_isSet) {
        obj.insert(QString("bucketArn"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_bucket_created_at_isSet) {
        obj.insert(QString("bucketCreatedAt"), ::OpenAPI::toJsonValue(m_bucket_created_at));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_classifiable_object_count_isSet) {
        obj.insert(QString("classifiableObjectCount"), ::OpenAPI::toJsonValue(m_classifiable_object_count));
    }
    if (m_classifiable_size_in_bytes_isSet) {
        obj.insert(QString("classifiableSizeInBytes"), ::OpenAPI::toJsonValue(m_classifiable_size_in_bytes));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_job_details.isSet()) {
        obj.insert(QString("jobDetails"), ::OpenAPI::toJsonValue(m_job_details));
    }
    if (m_last_automated_discovery_time_isSet) {
        obj.insert(QString("lastAutomatedDiscoveryTime"), ::OpenAPI::toJsonValue(m_last_automated_discovery_time));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_object_count_isSet) {
        obj.insert(QString("objectCount"), ::OpenAPI::toJsonValue(m_object_count));
    }
    if (m_object_count_by_encryption_type.isSet()) {
        obj.insert(QString("objectCountByEncryptionType"), ::OpenAPI::toJsonValue(m_object_count_by_encryption_type));
    }
    if (m_public_access.isSet()) {
        obj.insert(QString("publicAccess"), ::OpenAPI::toJsonValue(m_public_access));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_replication_details.isSet()) {
        obj.insert(QString("replicationDetails"), ::OpenAPI::toJsonValue(m_replication_details));
    }
    if (m_sensitivity_score_isSet) {
        obj.insert(QString("sensitivityScore"), ::OpenAPI::toJsonValue(m_sensitivity_score));
    }
    if (m_server_side_encryption.isSet()) {
        obj.insert(QString("serverSideEncryption"), ::OpenAPI::toJsonValue(m_server_side_encryption));
    }
    if (m_shared_access.isSet()) {
        obj.insert(QString("sharedAccess"), ::OpenAPI::toJsonValue(m_shared_access));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_size_in_bytes_compressed_isSet) {
        obj.insert(QString("sizeInBytesCompressed"), ::OpenAPI::toJsonValue(m_size_in_bytes_compressed));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_unclassifiable_object_count.isSet()) {
        obj.insert(QString("unclassifiableObjectCount"), ::OpenAPI::toJsonValue(m_unclassifiable_object_count));
    }
    if (m_unclassifiable_object_size_in_bytes.isSet()) {
        obj.insert(QString("unclassifiableObjectSizeInBytes"), ::OpenAPI::toJsonValue(m_unclassifiable_object_size_in_bytes));
    }
    if (m_versioning_isSet) {
        obj.insert(QString("versioning"), ::OpenAPI::toJsonValue(m_versioning));
    }
    return obj;
}

QString OAIBucketMetadata::getAccountId() const {
    return m_account_id;
}
void OAIBucketMetadata::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIBucketMetadata::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIBucketMetadata::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAllowsUnencryptedObjectUploads OAIBucketMetadata::getAllowsUnencryptedObjectUploads() const {
    return m_allows_unencrypted_object_uploads;
}
void OAIBucketMetadata::setAllowsUnencryptedObjectUploads(const OAIAllowsUnencryptedObjectUploads &allows_unencrypted_object_uploads) {
    m_allows_unencrypted_object_uploads = allows_unencrypted_object_uploads;
    m_allows_unencrypted_object_uploads_isSet = true;
}

bool OAIBucketMetadata::is_allows_unencrypted_object_uploads_Set() const{
    return m_allows_unencrypted_object_uploads_isSet;
}

bool OAIBucketMetadata::is_allows_unencrypted_object_uploads_Valid() const{
    return m_allows_unencrypted_object_uploads_isValid;
}

QString OAIBucketMetadata::getBucketArn() const {
    return m_bucket_arn;
}
void OAIBucketMetadata::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIBucketMetadata::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIBucketMetadata::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QDateTime OAIBucketMetadata::getBucketCreatedAt() const {
    return m_bucket_created_at;
}
void OAIBucketMetadata::setBucketCreatedAt(const QDateTime &bucket_created_at) {
    m_bucket_created_at = bucket_created_at;
    m_bucket_created_at_isSet = true;
}

bool OAIBucketMetadata::is_bucket_created_at_Set() const{
    return m_bucket_created_at_isSet;
}

bool OAIBucketMetadata::is_bucket_created_at_Valid() const{
    return m_bucket_created_at_isValid;
}

QString OAIBucketMetadata::getBucketName() const {
    return m_bucket_name;
}
void OAIBucketMetadata::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIBucketMetadata::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIBucketMetadata::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

qint32 OAIBucketMetadata::getClassifiableObjectCount() const {
    return m_classifiable_object_count;
}
void OAIBucketMetadata::setClassifiableObjectCount(const qint32 &classifiable_object_count) {
    m_classifiable_object_count = classifiable_object_count;
    m_classifiable_object_count_isSet = true;
}

bool OAIBucketMetadata::is_classifiable_object_count_Set() const{
    return m_classifiable_object_count_isSet;
}

bool OAIBucketMetadata::is_classifiable_object_count_Valid() const{
    return m_classifiable_object_count_isValid;
}

qint32 OAIBucketMetadata::getClassifiableSizeInBytes() const {
    return m_classifiable_size_in_bytes;
}
void OAIBucketMetadata::setClassifiableSizeInBytes(const qint32 &classifiable_size_in_bytes) {
    m_classifiable_size_in_bytes = classifiable_size_in_bytes;
    m_classifiable_size_in_bytes_isSet = true;
}

bool OAIBucketMetadata::is_classifiable_size_in_bytes_Set() const{
    return m_classifiable_size_in_bytes_isSet;
}

bool OAIBucketMetadata::is_classifiable_size_in_bytes_Valid() const{
    return m_classifiable_size_in_bytes_isValid;
}

OAIBucketMetadataErrorCode OAIBucketMetadata::getErrorCode() const {
    return m_error_code;
}
void OAIBucketMetadata::setErrorCode(const OAIBucketMetadataErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIBucketMetadata::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIBucketMetadata::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIBucketMetadata::getErrorMessage() const {
    return m_error_message;
}
void OAIBucketMetadata::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBucketMetadata::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBucketMetadata::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIBucketMetadata_jobDetails OAIBucketMetadata::getJobDetails() const {
    return m_job_details;
}
void OAIBucketMetadata::setJobDetails(const OAIBucketMetadata_jobDetails &job_details) {
    m_job_details = job_details;
    m_job_details_isSet = true;
}

bool OAIBucketMetadata::is_job_details_Set() const{
    return m_job_details_isSet;
}

bool OAIBucketMetadata::is_job_details_Valid() const{
    return m_job_details_isValid;
}

QDateTime OAIBucketMetadata::getLastAutomatedDiscoveryTime() const {
    return m_last_automated_discovery_time;
}
void OAIBucketMetadata::setLastAutomatedDiscoveryTime(const QDateTime &last_automated_discovery_time) {
    m_last_automated_discovery_time = last_automated_discovery_time;
    m_last_automated_discovery_time_isSet = true;
}

bool OAIBucketMetadata::is_last_automated_discovery_time_Set() const{
    return m_last_automated_discovery_time_isSet;
}

bool OAIBucketMetadata::is_last_automated_discovery_time_Valid() const{
    return m_last_automated_discovery_time_isValid;
}

QDateTime OAIBucketMetadata::getLastUpdated() const {
    return m_last_updated;
}
void OAIBucketMetadata::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIBucketMetadata::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIBucketMetadata::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIBucketMetadata::getObjectCount() const {
    return m_object_count;
}
void OAIBucketMetadata::setObjectCount(const qint32 &object_count) {
    m_object_count = object_count;
    m_object_count_isSet = true;
}

bool OAIBucketMetadata::is_object_count_Set() const{
    return m_object_count_isSet;
}

bool OAIBucketMetadata::is_object_count_Valid() const{
    return m_object_count_isValid;
}

OAIBucketMetadata_objectCountByEncryptionType OAIBucketMetadata::getObjectCountByEncryptionType() const {
    return m_object_count_by_encryption_type;
}
void OAIBucketMetadata::setObjectCountByEncryptionType(const OAIBucketMetadata_objectCountByEncryptionType &object_count_by_encryption_type) {
    m_object_count_by_encryption_type = object_count_by_encryption_type;
    m_object_count_by_encryption_type_isSet = true;
}

bool OAIBucketMetadata::is_object_count_by_encryption_type_Set() const{
    return m_object_count_by_encryption_type_isSet;
}

bool OAIBucketMetadata::is_object_count_by_encryption_type_Valid() const{
    return m_object_count_by_encryption_type_isValid;
}

OAIBucketMetadata_publicAccess OAIBucketMetadata::getPublicAccess() const {
    return m_public_access;
}
void OAIBucketMetadata::setPublicAccess(const OAIBucketMetadata_publicAccess &public_access) {
    m_public_access = public_access;
    m_public_access_isSet = true;
}

bool OAIBucketMetadata::is_public_access_Set() const{
    return m_public_access_isSet;
}

bool OAIBucketMetadata::is_public_access_Valid() const{
    return m_public_access_isValid;
}

QString OAIBucketMetadata::getRegion() const {
    return m_region;
}
void OAIBucketMetadata::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIBucketMetadata::is_region_Set() const{
    return m_region_isSet;
}

bool OAIBucketMetadata::is_region_Valid() const{
    return m_region_isValid;
}

OAIBucketMetadata_replicationDetails OAIBucketMetadata::getReplicationDetails() const {
    return m_replication_details;
}
void OAIBucketMetadata::setReplicationDetails(const OAIBucketMetadata_replicationDetails &replication_details) {
    m_replication_details = replication_details;
    m_replication_details_isSet = true;
}

bool OAIBucketMetadata::is_replication_details_Set() const{
    return m_replication_details_isSet;
}

bool OAIBucketMetadata::is_replication_details_Valid() const{
    return m_replication_details_isValid;
}

qint32 OAIBucketMetadata::getSensitivityScore() const {
    return m_sensitivity_score;
}
void OAIBucketMetadata::setSensitivityScore(const qint32 &sensitivity_score) {
    m_sensitivity_score = sensitivity_score;
    m_sensitivity_score_isSet = true;
}

bool OAIBucketMetadata::is_sensitivity_score_Set() const{
    return m_sensitivity_score_isSet;
}

bool OAIBucketMetadata::is_sensitivity_score_Valid() const{
    return m_sensitivity_score_isValid;
}

OAIBucketMetadata_serverSideEncryption OAIBucketMetadata::getServerSideEncryption() const {
    return m_server_side_encryption;
}
void OAIBucketMetadata::setServerSideEncryption(const OAIBucketMetadata_serverSideEncryption &server_side_encryption) {
    m_server_side_encryption = server_side_encryption;
    m_server_side_encryption_isSet = true;
}

bool OAIBucketMetadata::is_server_side_encryption_Set() const{
    return m_server_side_encryption_isSet;
}

bool OAIBucketMetadata::is_server_side_encryption_Valid() const{
    return m_server_side_encryption_isValid;
}

OAISharedAccess OAIBucketMetadata::getSharedAccess() const {
    return m_shared_access;
}
void OAIBucketMetadata::setSharedAccess(const OAISharedAccess &shared_access) {
    m_shared_access = shared_access;
    m_shared_access_isSet = true;
}

bool OAIBucketMetadata::is_shared_access_Set() const{
    return m_shared_access_isSet;
}

bool OAIBucketMetadata::is_shared_access_Valid() const{
    return m_shared_access_isValid;
}

qint32 OAIBucketMetadata::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIBucketMetadata::setSizeInBytes(const qint32 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIBucketMetadata::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIBucketMetadata::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

qint32 OAIBucketMetadata::getSizeInBytesCompressed() const {
    return m_size_in_bytes_compressed;
}
void OAIBucketMetadata::setSizeInBytesCompressed(const qint32 &size_in_bytes_compressed) {
    m_size_in_bytes_compressed = size_in_bytes_compressed;
    m_size_in_bytes_compressed_isSet = true;
}

bool OAIBucketMetadata::is_size_in_bytes_compressed_Set() const{
    return m_size_in_bytes_compressed_isSet;
}

bool OAIBucketMetadata::is_size_in_bytes_compressed_Valid() const{
    return m_size_in_bytes_compressed_isValid;
}

QList OAIBucketMetadata::getTags() const {
    return m_tags;
}
void OAIBucketMetadata::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIBucketMetadata::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIBucketMetadata::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIBucketMetadata_unclassifiableObjectCount OAIBucketMetadata::getUnclassifiableObjectCount() const {
    return m_unclassifiable_object_count;
}
void OAIBucketMetadata::setUnclassifiableObjectCount(const OAIBucketMetadata_unclassifiableObjectCount &unclassifiable_object_count) {
    m_unclassifiable_object_count = unclassifiable_object_count;
    m_unclassifiable_object_count_isSet = true;
}

bool OAIBucketMetadata::is_unclassifiable_object_count_Set() const{
    return m_unclassifiable_object_count_isSet;
}

bool OAIBucketMetadata::is_unclassifiable_object_count_Valid() const{
    return m_unclassifiable_object_count_isValid;
}

OAIBucketMetadata_unclassifiableObjectSizeInBytes OAIBucketMetadata::getUnclassifiableObjectSizeInBytes() const {
    return m_unclassifiable_object_size_in_bytes;
}
void OAIBucketMetadata::setUnclassifiableObjectSizeInBytes(const OAIBucketMetadata_unclassifiableObjectSizeInBytes &unclassifiable_object_size_in_bytes) {
    m_unclassifiable_object_size_in_bytes = unclassifiable_object_size_in_bytes;
    m_unclassifiable_object_size_in_bytes_isSet = true;
}

bool OAIBucketMetadata::is_unclassifiable_object_size_in_bytes_Set() const{
    return m_unclassifiable_object_size_in_bytes_isSet;
}

bool OAIBucketMetadata::is_unclassifiable_object_size_in_bytes_Valid() const{
    return m_unclassifiable_object_size_in_bytes_isValid;
}

bool OAIBucketMetadata::getVersioning() const {
    return m_versioning;
}
void OAIBucketMetadata::setVersioning(const bool &versioning) {
    m_versioning = versioning;
    m_versioning_isSet = true;
}

bool OAIBucketMetadata::is_versioning_Set() const{
    return m_versioning_isSet;
}

bool OAIBucketMetadata::is_versioning_Valid() const{
    return m_versioning_isValid;
}

bool OAIBucketMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_unencrypted_object_uploads.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiable_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiable_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_automated_discovery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_by_encryption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclassifiable_object_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclassifiable_object_size_in_bytes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_versioning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
