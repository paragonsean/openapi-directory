/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobSummary::OAIJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobSummary::OAIJobSummary() {
    this->initializeModel();
}

OAIJobSummary::~OAIJobSummary() {}

void OAIJobSummary::initializeModel() {

    m_bucket_criteria_isSet = false;
    m_bucket_criteria_isValid = false;

    m_bucket_definitions_isSet = false;
    m_bucket_definitions_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_last_run_error_status_isSet = false;
    m_last_run_error_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_paused_details_isSet = false;
    m_user_paused_details_isValid = false;
}

void OAIJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobSummary::fromJsonObject(QJsonObject json) {

    m_bucket_criteria_isValid = ::OpenAPI::fromJsonValue(m_bucket_criteria, json[QString("bucketCriteria")]);
    m_bucket_criteria_isSet = !json[QString("bucketCriteria")].isNull() && m_bucket_criteria_isValid;

    m_bucket_definitions_isValid = ::OpenAPI::fromJsonValue(m_bucket_definitions, json[QString("bucketDefinitions")]);
    m_bucket_definitions_isSet = !json[QString("bucketDefinitions")].isNull() && m_bucket_definitions_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("jobStatus")]);
    m_job_status_isSet = !json[QString("jobStatus")].isNull() && m_job_status_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_last_run_error_status_isValid = ::OpenAPI::fromJsonValue(m_last_run_error_status, json[QString("lastRunErrorStatus")]);
    m_last_run_error_status_isSet = !json[QString("lastRunErrorStatus")].isNull() && m_last_run_error_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_paused_details_isValid = ::OpenAPI::fromJsonValue(m_user_paused_details, json[QString("userPausedDetails")]);
    m_user_paused_details_isSet = !json[QString("userPausedDetails")].isNull() && m_user_paused_details_isValid;
}

QString OAIJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_criteria.isSet()) {
        obj.insert(QString("bucketCriteria"), ::OpenAPI::toJsonValue(m_bucket_criteria));
    }
    if (m_bucket_definitions.isSet()) {
        obj.insert(QString("bucketDefinitions"), ::OpenAPI::toJsonValue(m_bucket_definitions));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("jobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_last_run_error_status.isSet()) {
        obj.insert(QString("lastRunErrorStatus"), ::OpenAPI::toJsonValue(m_last_run_error_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_paused_details.isSet()) {
        obj.insert(QString("userPausedDetails"), ::OpenAPI::toJsonValue(m_user_paused_details));
    }
    return obj;
}

OAIJobSummary_bucketCriteria OAIJobSummary::getBucketCriteria() const {
    return m_bucket_criteria;
}
void OAIJobSummary::setBucketCriteria(const OAIJobSummary_bucketCriteria &bucket_criteria) {
    m_bucket_criteria = bucket_criteria;
    m_bucket_criteria_isSet = true;
}

bool OAIJobSummary::is_bucket_criteria_Set() const{
    return m_bucket_criteria_isSet;
}

bool OAIJobSummary::is_bucket_criteria_Valid() const{
    return m_bucket_criteria_isValid;
}

QList OAIJobSummary::getBucketDefinitions() const {
    return m_bucket_definitions;
}
void OAIJobSummary::setBucketDefinitions(const QList &bucket_definitions) {
    m_bucket_definitions = bucket_definitions;
    m_bucket_definitions_isSet = true;
}

bool OAIJobSummary::is_bucket_definitions_Set() const{
    return m_bucket_definitions_isSet;
}

bool OAIJobSummary::is_bucket_definitions_Valid() const{
    return m_bucket_definitions_isValid;
}

QDateTime OAIJobSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIJobSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIJobSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIJobSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIJobSummary::getJobId() const {
    return m_job_id;
}
void OAIJobSummary::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobSummary::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobSummary::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIJobStatus OAIJobSummary::getJobStatus() const {
    return m_job_status;
}
void OAIJobSummary::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIJobSummary::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIJobSummary::is_job_status_Valid() const{
    return m_job_status_isValid;
}

OAIJobType OAIJobSummary::getJobType() const {
    return m_job_type;
}
void OAIJobSummary::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJobSummary::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJobSummary::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAIDescribeClassificationJobResponse_lastRunErrorStatus OAIJobSummary::getLastRunErrorStatus() const {
    return m_last_run_error_status;
}
void OAIJobSummary::setLastRunErrorStatus(const OAIDescribeClassificationJobResponse_lastRunErrorStatus &last_run_error_status) {
    m_last_run_error_status = last_run_error_status;
    m_last_run_error_status_isSet = true;
}

bool OAIJobSummary::is_last_run_error_status_Set() const{
    return m_last_run_error_status_isSet;
}

bool OAIJobSummary::is_last_run_error_status_Valid() const{
    return m_last_run_error_status_isValid;
}

QString OAIJobSummary::getName() const {
    return m_name;
}
void OAIJobSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIDescribeClassificationJobResponse_userPausedDetails OAIJobSummary::getUserPausedDetails() const {
    return m_user_paused_details;
}
void OAIJobSummary::setUserPausedDetails(const OAIDescribeClassificationJobResponse_userPausedDetails &user_paused_details) {
    m_user_paused_details = user_paused_details;
    m_user_paused_details_isSet = true;
}

bool OAIJobSummary::is_user_paused_details_Set() const{
    return m_user_paused_details_isSet;
}

bool OAIJobSummary::is_user_paused_details_Valid() const{
    return m_user_paused_details_isValid;
}

bool OAIJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_error_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_paused_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
