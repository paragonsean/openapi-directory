/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassificationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassificationResult::OAIClassificationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassificationResult::OAIClassificationResult() {
    this->initializeModel();
}

OAIClassificationResult::~OAIClassificationResult() {}

void OAIClassificationResult::initializeModel() {

    m_additional_occurrences_isSet = false;
    m_additional_occurrences_isValid = false;

    m_custom_data_identifiers_isSet = false;
    m_custom_data_identifiers_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_sensitive_data_isSet = false;
    m_sensitive_data_isValid = false;

    m_size_classified_isSet = false;
    m_size_classified_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIClassificationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassificationResult::fromJsonObject(QJsonObject json) {

    m_additional_occurrences_isValid = ::OpenAPI::fromJsonValue(m_additional_occurrences, json[QString("additionalOccurrences")]);
    m_additional_occurrences_isSet = !json[QString("additionalOccurrences")].isNull() && m_additional_occurrences_isValid;

    m_custom_data_identifiers_isValid = ::OpenAPI::fromJsonValue(m_custom_data_identifiers, json[QString("customDataIdentifiers")]);
    m_custom_data_identifiers_isSet = !json[QString("customDataIdentifiers")].isNull() && m_custom_data_identifiers_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_sensitive_data_isValid = ::OpenAPI::fromJsonValue(m_sensitive_data, json[QString("sensitiveData")]);
    m_sensitive_data_isSet = !json[QString("sensitiveData")].isNull() && m_sensitive_data_isValid;

    m_size_classified_isValid = ::OpenAPI::fromJsonValue(m_size_classified, json[QString("sizeClassified")]);
    m_size_classified_isSet = !json[QString("sizeClassified")].isNull() && m_size_classified_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIClassificationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassificationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_occurrences_isSet) {
        obj.insert(QString("additionalOccurrences"), ::OpenAPI::toJsonValue(m_additional_occurrences));
    }
    if (m_custom_data_identifiers.isSet()) {
        obj.insert(QString("customDataIdentifiers"), ::OpenAPI::toJsonValue(m_custom_data_identifiers));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_sensitive_data.isSet()) {
        obj.insert(QString("sensitiveData"), ::OpenAPI::toJsonValue(m_sensitive_data));
    }
    if (m_size_classified_isSet) {
        obj.insert(QString("sizeClassified"), ::OpenAPI::toJsonValue(m_size_classified));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIClassificationResult::getAdditionalOccurrences() const {
    return m_additional_occurrences;
}
void OAIClassificationResult::setAdditionalOccurrences(const bool &additional_occurrences) {
    m_additional_occurrences = additional_occurrences;
    m_additional_occurrences_isSet = true;
}

bool OAIClassificationResult::is_additional_occurrences_Set() const{
    return m_additional_occurrences_isSet;
}

bool OAIClassificationResult::is_additional_occurrences_Valid() const{
    return m_additional_occurrences_isValid;
}

OAIClassificationResult_customDataIdentifiers OAIClassificationResult::getCustomDataIdentifiers() const {
    return m_custom_data_identifiers;
}
void OAIClassificationResult::setCustomDataIdentifiers(const OAIClassificationResult_customDataIdentifiers &custom_data_identifiers) {
    m_custom_data_identifiers = custom_data_identifiers;
    m_custom_data_identifiers_isSet = true;
}

bool OAIClassificationResult::is_custom_data_identifiers_Set() const{
    return m_custom_data_identifiers_isSet;
}

bool OAIClassificationResult::is_custom_data_identifiers_Valid() const{
    return m_custom_data_identifiers_isValid;
}

QString OAIClassificationResult::getMimeType() const {
    return m_mime_type;
}
void OAIClassificationResult::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIClassificationResult::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIClassificationResult::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QList OAIClassificationResult::getSensitiveData() const {
    return m_sensitive_data;
}
void OAIClassificationResult::setSensitiveData(const QList &sensitive_data) {
    m_sensitive_data = sensitive_data;
    m_sensitive_data_isSet = true;
}

bool OAIClassificationResult::is_sensitive_data_Set() const{
    return m_sensitive_data_isSet;
}

bool OAIClassificationResult::is_sensitive_data_Valid() const{
    return m_sensitive_data_isValid;
}

qint32 OAIClassificationResult::getSizeClassified() const {
    return m_size_classified;
}
void OAIClassificationResult::setSizeClassified(const qint32 &size_classified) {
    m_size_classified = size_classified;
    m_size_classified_isSet = true;
}

bool OAIClassificationResult::is_size_classified_Set() const{
    return m_size_classified_isSet;
}

bool OAIClassificationResult::is_size_classified_Valid() const{
    return m_size_classified_isValid;
}

OAIClassificationResult_status OAIClassificationResult::getStatus() const {
    return m_status;
}
void OAIClassificationResult::setStatus(const OAIClassificationResult_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClassificationResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClassificationResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIClassificationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_occurrences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_classified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassificationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
