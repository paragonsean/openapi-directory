/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding::OAIFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding::OAIFinding() {
    this->initializeModel();
}

OAIFinding::~OAIFinding() {}

void OAIFinding::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_classification_details_isSet = false;
    m_classification_details_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_policy_details_isSet = false;
    m_policy_details_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_resources_affected_isSet = false;
    m_resources_affected_isValid = false;

    m_sample_isSet = false;
    m_sample_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_classification_details_isValid = ::OpenAPI::fromJsonValue(m_classification_details, json[QString("classificationDetails")]);
    m_classification_details_isSet = !json[QString("classificationDetails")].isNull() && m_classification_details_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_policy_details_isValid = ::OpenAPI::fromJsonValue(m_policy_details, json[QString("policyDetails")]);
    m_policy_details_isSet = !json[QString("policyDetails")].isNull() && m_policy_details_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_resources_affected_isValid = ::OpenAPI::fromJsonValue(m_resources_affected, json[QString("resourcesAffected")]);
    m_resources_affected_isSet = !json[QString("resourcesAffected")].isNull() && m_resources_affected_isValid;

    m_sample_isValid = ::OpenAPI::fromJsonValue(m_sample, json[QString("sample")]);
    m_sample_isSet = !json[QString("sample")].isNull() && m_sample_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_classification_details.isSet()) {
        obj.insert(QString("classificationDetails"), ::OpenAPI::toJsonValue(m_classification_details));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_policy_details.isSet()) {
        obj.insert(QString("policyDetails"), ::OpenAPI::toJsonValue(m_policy_details));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_resources_affected.isSet()) {
        obj.insert(QString("resourcesAffected"), ::OpenAPI::toJsonValue(m_resources_affected));
    }
    if (m_sample_isSet) {
        obj.insert(QString("sample"), ::OpenAPI::toJsonValue(m_sample));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIFinding::getAccountId() const {
    return m_account_id;
}
void OAIFinding::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFinding::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFinding::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIFinding::getArchived() const {
    return m_archived;
}
void OAIFinding::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIFinding::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIFinding::is_archived_Valid() const{
    return m_archived_isValid;
}

OAIFindingCategory OAIFinding::getCategory() const {
    return m_category;
}
void OAIFinding::setCategory(const OAIFindingCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFinding::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFinding::is_category_Valid() const{
    return m_category_isValid;
}

OAIFinding_classificationDetails OAIFinding::getClassificationDetails() const {
    return m_classification_details;
}
void OAIFinding::setClassificationDetails(const OAIFinding_classificationDetails &classification_details) {
    m_classification_details = classification_details;
    m_classification_details_isSet = true;
}

bool OAIFinding::is_classification_details_Set() const{
    return m_classification_details_isSet;
}

bool OAIFinding::is_classification_details_Valid() const{
    return m_classification_details_isValid;
}

qint32 OAIFinding::getCount() const {
    return m_count;
}
void OAIFinding::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIFinding::is_count_Set() const{
    return m_count_isSet;
}

bool OAIFinding::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAIFinding::getCreatedAt() const {
    return m_created_at;
}
void OAIFinding::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFinding::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFinding::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFinding::getDescription() const {
    return m_description;
}
void OAIFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFinding::getId() const {
    return m_id;
}
void OAIFinding::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFinding::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFinding::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFinding::getPartition() const {
    return m_partition;
}
void OAIFinding::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIFinding::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIFinding::is_partition_Valid() const{
    return m_partition_isValid;
}

OAIFinding_policyDetails OAIFinding::getPolicyDetails() const {
    return m_policy_details;
}
void OAIFinding::setPolicyDetails(const OAIFinding_policyDetails &policy_details) {
    m_policy_details = policy_details;
    m_policy_details_isSet = true;
}

bool OAIFinding::is_policy_details_Set() const{
    return m_policy_details_isSet;
}

bool OAIFinding::is_policy_details_Valid() const{
    return m_policy_details_isValid;
}

QString OAIFinding::getRegion() const {
    return m_region;
}
void OAIFinding::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIFinding::is_region_Set() const{
    return m_region_isSet;
}

bool OAIFinding::is_region_Valid() const{
    return m_region_isValid;
}

OAIFinding_resourcesAffected OAIFinding::getResourcesAffected() const {
    return m_resources_affected;
}
void OAIFinding::setResourcesAffected(const OAIFinding_resourcesAffected &resources_affected) {
    m_resources_affected = resources_affected;
    m_resources_affected_isSet = true;
}

bool OAIFinding::is_resources_affected_Set() const{
    return m_resources_affected_isSet;
}

bool OAIFinding::is_resources_affected_Valid() const{
    return m_resources_affected_isValid;
}

bool OAIFinding::getSample() const {
    return m_sample;
}
void OAIFinding::setSample(const bool &sample) {
    m_sample = sample;
    m_sample_isSet = true;
}

bool OAIFinding::is_sample_Set() const{
    return m_sample_isSet;
}

bool OAIFinding::is_sample_Valid() const{
    return m_sample_isValid;
}

QString OAIFinding::getSchemaVersion() const {
    return m_schema_version;
}
void OAIFinding::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIFinding::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIFinding::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

OAIFinding_severity OAIFinding::getSeverity() const {
    return m_severity;
}
void OAIFinding::setSeverity(const OAIFinding_severity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFinding::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFinding::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIFinding::getTitle() const {
    return m_title;
}
void OAIFinding::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFinding::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFinding::is_title_Valid() const{
    return m_title_isValid;
}

OAIFindingType OAIFinding::getType() const {
    return m_type;
}
void OAIFinding::setType(const OAIFindingType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFinding::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFinding::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIFinding::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFinding::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFinding::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFinding::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_affected.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
