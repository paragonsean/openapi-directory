/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowListStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowListStatusCode::OAIAllowListStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowListStatusCode::OAIAllowListStatusCode() {
    this->initializeModel();
}

OAIAllowListStatusCode::~OAIAllowListStatusCode() {}

void OAIAllowListStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAllowListStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAllowListStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::OK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_OBJECT_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::S3_OBJECT_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_USER_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::S3_USER_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_OBJECT_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::S3_OBJECT_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_THROTTLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::S3_THROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_OBJECT_OVERSIZE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::S3_OBJECT_OVERSIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3_OBJECT_EMPTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::S3_OBJECT_EMPTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowListStatusCode::UNKNOWN_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAllowListStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAllowListStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAllowListStatusCode::OK:
            val = "OK";
            break;
        case eOAIAllowListStatusCode::S3_OBJECT_NOT_FOUND:
            val = "S3_OBJECT_NOT_FOUND";
            break;
        case eOAIAllowListStatusCode::S3_USER_ACCESS_DENIED:
            val = "S3_USER_ACCESS_DENIED";
            break;
        case eOAIAllowListStatusCode::S3_OBJECT_ACCESS_DENIED:
            val = "S3_OBJECT_ACCESS_DENIED";
            break;
        case eOAIAllowListStatusCode::S3_THROTTLED:
            val = "S3_THROTTLED";
            break;
        case eOAIAllowListStatusCode::S3_OBJECT_OVERSIZE:
            val = "S3_OBJECT_OVERSIZE";
            break;
        case eOAIAllowListStatusCode::S3_OBJECT_EMPTY:
            val = "S3_OBJECT_EMPTY";
            break;
        case eOAIAllowListStatusCode::UNKNOWN_ERROR:
            val = "UNKNOWN_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAllowListStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAllowListStatusCode::eOAIAllowListStatusCode OAIAllowListStatusCode::getValue() const {
    return m_value;
}

void OAIAllowListStatusCode::setValue(const OAIAllowListStatusCode::eOAIAllowListStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAllowListStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIAllowListStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
