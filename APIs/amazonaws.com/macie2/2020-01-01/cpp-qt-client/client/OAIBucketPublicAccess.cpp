/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketPublicAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketPublicAccess::OAIBucketPublicAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketPublicAccess::OAIBucketPublicAccess() {
    this->initializeModel();
}

OAIBucketPublicAccess::~OAIBucketPublicAccess() {}

void OAIBucketPublicAccess::initializeModel() {

    m_effective_permission_isSet = false;
    m_effective_permission_isValid = false;

    m_permission_configuration_isSet = false;
    m_permission_configuration_isValid = false;
}

void OAIBucketPublicAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketPublicAccess::fromJsonObject(QJsonObject json) {

    m_effective_permission_isValid = ::OpenAPI::fromJsonValue(m_effective_permission, json[QString("effectivePermission")]);
    m_effective_permission_isSet = !json[QString("effectivePermission")].isNull() && m_effective_permission_isValid;

    m_permission_configuration_isValid = ::OpenAPI::fromJsonValue(m_permission_configuration, json[QString("permissionConfiguration")]);
    m_permission_configuration_isSet = !json[QString("permissionConfiguration")].isNull() && m_permission_configuration_isValid;
}

QString OAIBucketPublicAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketPublicAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_permission.isSet()) {
        obj.insert(QString("effectivePermission"), ::OpenAPI::toJsonValue(m_effective_permission));
    }
    if (m_permission_configuration.isSet()) {
        obj.insert(QString("permissionConfiguration"), ::OpenAPI::toJsonValue(m_permission_configuration));
    }
    return obj;
}

OAIEffectivePermission OAIBucketPublicAccess::getEffectivePermission() const {
    return m_effective_permission;
}
void OAIBucketPublicAccess::setEffectivePermission(const OAIEffectivePermission &effective_permission) {
    m_effective_permission = effective_permission;
    m_effective_permission_isSet = true;
}

bool OAIBucketPublicAccess::is_effective_permission_Set() const{
    return m_effective_permission_isSet;
}

bool OAIBucketPublicAccess::is_effective_permission_Valid() const{
    return m_effective_permission_isValid;
}

OAIBucketPublicAccess_permissionConfiguration OAIBucketPublicAccess::getPermissionConfiguration() const {
    return m_permission_configuration;
}
void OAIBucketPublicAccess::setPermissionConfiguration(const OAIBucketPublicAccess_permissionConfiguration &permission_configuration) {
    m_permission_configuration = permission_configuration;
    m_permission_configuration_isSet = true;
}

bool OAIBucketPublicAccess::is_permission_configuration_Set() const{
    return m_permission_configuration_isSet;
}

bool OAIBucketPublicAccess::is_permission_configuration_Valid() const{
    return m_permission_configuration_isValid;
}

bool OAIBucketPublicAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketPublicAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
