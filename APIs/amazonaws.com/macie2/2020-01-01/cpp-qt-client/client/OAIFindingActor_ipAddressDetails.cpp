/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingActor_ipAddressDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingActor_ipAddressDetails::OAIFindingActor_ipAddressDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingActor_ipAddressDetails::OAIFindingActor_ipAddressDetails() {
    this->initializeModel();
}

OAIFindingActor_ipAddressDetails::~OAIFindingActor_ipAddressDetails() {}

void OAIFindingActor_ipAddressDetails::initializeModel() {

    m_ip_address_v4_isSet = false;
    m_ip_address_v4_isValid = false;

    m_ip_city_isSet = false;
    m_ip_city_isValid = false;

    m_ip_country_isSet = false;
    m_ip_country_isValid = false;

    m_ip_geo_location_isSet = false;
    m_ip_geo_location_isValid = false;

    m_ip_owner_isSet = false;
    m_ip_owner_isValid = false;
}

void OAIFindingActor_ipAddressDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindingActor_ipAddressDetails::fromJsonObject(QJsonObject json) {

    m_ip_address_v4_isValid = ::OpenAPI::fromJsonValue(m_ip_address_v4, json[QString("ipAddressV4")]);
    m_ip_address_v4_isSet = !json[QString("ipAddressV4")].isNull() && m_ip_address_v4_isValid;

    m_ip_city_isValid = ::OpenAPI::fromJsonValue(m_ip_city, json[QString("ipCity")]);
    m_ip_city_isSet = !json[QString("ipCity")].isNull() && m_ip_city_isValid;

    m_ip_country_isValid = ::OpenAPI::fromJsonValue(m_ip_country, json[QString("ipCountry")]);
    m_ip_country_isSet = !json[QString("ipCountry")].isNull() && m_ip_country_isValid;

    m_ip_geo_location_isValid = ::OpenAPI::fromJsonValue(m_ip_geo_location, json[QString("ipGeoLocation")]);
    m_ip_geo_location_isSet = !json[QString("ipGeoLocation")].isNull() && m_ip_geo_location_isValid;

    m_ip_owner_isValid = ::OpenAPI::fromJsonValue(m_ip_owner, json[QString("ipOwner")]);
    m_ip_owner_isSet = !json[QString("ipOwner")].isNull() && m_ip_owner_isValid;
}

QString OAIFindingActor_ipAddressDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindingActor_ipAddressDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_v4_isSet) {
        obj.insert(QString("ipAddressV4"), ::OpenAPI::toJsonValue(m_ip_address_v4));
    }
    if (m_ip_city.isSet()) {
        obj.insert(QString("ipCity"), ::OpenAPI::toJsonValue(m_ip_city));
    }
    if (m_ip_country.isSet()) {
        obj.insert(QString("ipCountry"), ::OpenAPI::toJsonValue(m_ip_country));
    }
    if (m_ip_geo_location.isSet()) {
        obj.insert(QString("ipGeoLocation"), ::OpenAPI::toJsonValue(m_ip_geo_location));
    }
    if (m_ip_owner.isSet()) {
        obj.insert(QString("ipOwner"), ::OpenAPI::toJsonValue(m_ip_owner));
    }
    return obj;
}

QString OAIFindingActor_ipAddressDetails::getIpAddressV4() const {
    return m_ip_address_v4;
}
void OAIFindingActor_ipAddressDetails::setIpAddressV4(const QString &ip_address_v4) {
    m_ip_address_v4 = ip_address_v4;
    m_ip_address_v4_isSet = true;
}

bool OAIFindingActor_ipAddressDetails::is_ip_address_v4_Set() const{
    return m_ip_address_v4_isSet;
}

bool OAIFindingActor_ipAddressDetails::is_ip_address_v4_Valid() const{
    return m_ip_address_v4_isValid;
}

OAIIpAddressDetails_ipCity OAIFindingActor_ipAddressDetails::getIpCity() const {
    return m_ip_city;
}
void OAIFindingActor_ipAddressDetails::setIpCity(const OAIIpAddressDetails_ipCity &ip_city) {
    m_ip_city = ip_city;
    m_ip_city_isSet = true;
}

bool OAIFindingActor_ipAddressDetails::is_ip_city_Set() const{
    return m_ip_city_isSet;
}

bool OAIFindingActor_ipAddressDetails::is_ip_city_Valid() const{
    return m_ip_city_isValid;
}

OAIIpAddressDetails_ipCountry OAIFindingActor_ipAddressDetails::getIpCountry() const {
    return m_ip_country;
}
void OAIFindingActor_ipAddressDetails::setIpCountry(const OAIIpAddressDetails_ipCountry &ip_country) {
    m_ip_country = ip_country;
    m_ip_country_isSet = true;
}

bool OAIFindingActor_ipAddressDetails::is_ip_country_Set() const{
    return m_ip_country_isSet;
}

bool OAIFindingActor_ipAddressDetails::is_ip_country_Valid() const{
    return m_ip_country_isValid;
}

OAIIpAddressDetails_ipGeoLocation OAIFindingActor_ipAddressDetails::getIpGeoLocation() const {
    return m_ip_geo_location;
}
void OAIFindingActor_ipAddressDetails::setIpGeoLocation(const OAIIpAddressDetails_ipGeoLocation &ip_geo_location) {
    m_ip_geo_location = ip_geo_location;
    m_ip_geo_location_isSet = true;
}

bool OAIFindingActor_ipAddressDetails::is_ip_geo_location_Set() const{
    return m_ip_geo_location_isSet;
}

bool OAIFindingActor_ipAddressDetails::is_ip_geo_location_Valid() const{
    return m_ip_geo_location_isValid;
}

OAIIpAddressDetails_ipOwner OAIFindingActor_ipAddressDetails::getIpOwner() const {
    return m_ip_owner;
}
void OAIFindingActor_ipAddressDetails::setIpOwner(const OAIIpAddressDetails_ipOwner &ip_owner) {
    m_ip_owner = ip_owner;
    m_ip_owner_isSet = true;
}

bool OAIFindingActor_ipAddressDetails::is_ip_owner_Set() const{
    return m_ip_owner_isSet;
}

bool OAIFindingActor_ipAddressDetails::is_ip_owner_Valid() const{
    return m_ip_owner_isValid;
}

bool OAIFindingActor_ipAddressDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_geo_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindingActor_ipAddressDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
