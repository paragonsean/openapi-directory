/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnavailabilityReasonCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnavailabilityReasonCode::OAIUnavailabilityReasonCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnavailabilityReasonCode::OAIUnavailabilityReasonCode() {
    this->initializeModel();
}

OAIUnavailabilityReasonCode::~OAIUnavailabilityReasonCode() {}

void OAIUnavailabilityReasonCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnavailabilityReasonCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnavailabilityReasonCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OBJECT_EXCEEDS_SIZE_QUOTA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailabilityReasonCode::OBJECT_EXCEEDS_SIZE_QUOTA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_OBJECT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailabilityReasonCode::UNSUPPORTED_OBJECT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_FINDING_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailabilityReasonCode::UNSUPPORTED_FINDING_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CLASSIFICATION_RESULT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailabilityReasonCode::INVALID_CLASSIFICATION_RESULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OBJECT_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnavailabilityReasonCode::OBJECT_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnavailabilityReasonCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnavailabilityReasonCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnavailabilityReasonCode::OBJECT_EXCEEDS_SIZE_QUOTA:
            val = "OBJECT_EXCEEDS_SIZE_QUOTA";
            break;
        case eOAIUnavailabilityReasonCode::UNSUPPORTED_OBJECT_TYPE:
            val = "UNSUPPORTED_OBJECT_TYPE";
            break;
        case eOAIUnavailabilityReasonCode::UNSUPPORTED_FINDING_TYPE:
            val = "UNSUPPORTED_FINDING_TYPE";
            break;
        case eOAIUnavailabilityReasonCode::INVALID_CLASSIFICATION_RESULT:
            val = "INVALID_CLASSIFICATION_RESULT";
            break;
        case eOAIUnavailabilityReasonCode::OBJECT_UNAVAILABLE:
            val = "OBJECT_UNAVAILABLE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnavailabilityReasonCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnavailabilityReasonCode::eOAIUnavailabilityReasonCode OAIUnavailabilityReasonCode::getValue() const {
    return m_value;
}

void OAIUnavailabilityReasonCode::setValue(const OAIUnavailabilityReasonCode::eOAIUnavailabilityReasonCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnavailabilityReasonCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnavailabilityReasonCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
