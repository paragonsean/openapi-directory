/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity() {
    this->initializeModel();
}

OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::~OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity() {}

void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::initializeModel() {

    m_classification_error_isSet = false;
    m_classification_error_isValid = false;

    m_not_classified_isSet = false;
    m_not_classified_isValid = false;

    m_not_sensitive_isSet = false;
    m_not_sensitive_isValid = false;

    m_sensitive_isSet = false;
    m_sensitive_isValid = false;
}

void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::fromJsonObject(QJsonObject json) {

    m_classification_error_isValid = ::OpenAPI::fromJsonValue(m_classification_error, json[QString("classificationError")]);
    m_classification_error_isSet = !json[QString("classificationError")].isNull() && m_classification_error_isValid;

    m_not_classified_isValid = ::OpenAPI::fromJsonValue(m_not_classified, json[QString("notClassified")]);
    m_not_classified_isSet = !json[QString("notClassified")].isNull() && m_not_classified_isValid;

    m_not_sensitive_isValid = ::OpenAPI::fromJsonValue(m_not_sensitive, json[QString("notSensitive")]);
    m_not_sensitive_isSet = !json[QString("notSensitive")].isNull() && m_not_sensitive_isValid;

    m_sensitive_isValid = ::OpenAPI::fromJsonValue(m_sensitive, json[QString("sensitive")]);
    m_sensitive_isSet = !json[QString("sensitive")].isNull() && m_sensitive_isValid;
}

QString OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_error.isSet()) {
        obj.insert(QString("classificationError"), ::OpenAPI::toJsonValue(m_classification_error));
    }
    if (m_not_classified.isSet()) {
        obj.insert(QString("notClassified"), ::OpenAPI::toJsonValue(m_not_classified));
    }
    if (m_not_sensitive.isSet()) {
        obj.insert(QString("notSensitive"), ::OpenAPI::toJsonValue(m_not_sensitive));
    }
    if (m_sensitive.isSet()) {
        obj.insert(QString("sensitive"), ::OpenAPI::toJsonValue(m_sensitive));
    }
    return obj;
}

OAIBucketStatisticsBySensitivity_classificationError OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::getClassificationError() const {
    return m_classification_error;
}
void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::setClassificationError(const OAIBucketStatisticsBySensitivity_classificationError &classification_error) {
    m_classification_error = classification_error;
    m_classification_error_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_classification_error_Set() const{
    return m_classification_error_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_classification_error_Valid() const{
    return m_classification_error_isValid;
}

OAIBucketStatisticsBySensitivity_notClassified OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::getNotClassified() const {
    return m_not_classified;
}
void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::setNotClassified(const OAIBucketStatisticsBySensitivity_notClassified &not_classified) {
    m_not_classified = not_classified;
    m_not_classified_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_not_classified_Set() const{
    return m_not_classified_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_not_classified_Valid() const{
    return m_not_classified_isValid;
}

OAIBucketStatisticsBySensitivity_notSensitive OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::getNotSensitive() const {
    return m_not_sensitive;
}
void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::setNotSensitive(const OAIBucketStatisticsBySensitivity_notSensitive &not_sensitive) {
    m_not_sensitive = not_sensitive;
    m_not_sensitive_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_not_sensitive_Set() const{
    return m_not_sensitive_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_not_sensitive_Valid() const{
    return m_not_sensitive_isValid;
}

OAIBucketStatisticsBySensitivity_sensitive OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::getSensitive() const {
    return m_sensitive;
}
void OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::setSensitive(const OAIBucketStatisticsBySensitivity_sensitive &sensitive) {
    m_sensitive = sensitive;
    m_sensitive_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_sensitive_Set() const{
    return m_sensitive_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::is_sensitive_Valid() const{
    return m_sensitive_isValid;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_classified.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_sensitive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
