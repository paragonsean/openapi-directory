/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Bucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Bucket::OAIS3Bucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Bucket::OAIS3Bucket() {
    this->initializeModel();
}

OAIS3Bucket::~OAIS3Bucket() {}

void OAIS3Bucket::initializeModel() {

    m_allows_unencrypted_object_uploads_isSet = false;
    m_allows_unencrypted_object_uploads_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_server_side_encryption_isSet = false;
    m_default_server_side_encryption_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_public_access_isSet = false;
    m_public_access_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIS3Bucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Bucket::fromJsonObject(QJsonObject json) {

    m_allows_unencrypted_object_uploads_isValid = ::OpenAPI::fromJsonValue(m_allows_unencrypted_object_uploads, json[QString("allowsUnencryptedObjectUploads")]);
    m_allows_unencrypted_object_uploads_isSet = !json[QString("allowsUnencryptedObjectUploads")].isNull() && m_allows_unencrypted_object_uploads_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_default_server_side_encryption_isValid = ::OpenAPI::fromJsonValue(m_default_server_side_encryption, json[QString("defaultServerSideEncryption")]);
    m_default_server_side_encryption_isSet = !json[QString("defaultServerSideEncryption")].isNull() && m_default_server_side_encryption_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_public_access_isValid = ::OpenAPI::fromJsonValue(m_public_access, json[QString("publicAccess")]);
    m_public_access_isSet = !json[QString("publicAccess")].isNull() && m_public_access_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIS3Bucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Bucket::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_unencrypted_object_uploads.isSet()) {
        obj.insert(QString("allowsUnencryptedObjectUploads"), ::OpenAPI::toJsonValue(m_allows_unencrypted_object_uploads));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_server_side_encryption.isSet()) {
        obj.insert(QString("defaultServerSideEncryption"), ::OpenAPI::toJsonValue(m_default_server_side_encryption));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_public_access.isSet()) {
        obj.insert(QString("publicAccess"), ::OpenAPI::toJsonValue(m_public_access));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIAllowsUnencryptedObjectUploads OAIS3Bucket::getAllowsUnencryptedObjectUploads() const {
    return m_allows_unencrypted_object_uploads;
}
void OAIS3Bucket::setAllowsUnencryptedObjectUploads(const OAIAllowsUnencryptedObjectUploads &allows_unencrypted_object_uploads) {
    m_allows_unencrypted_object_uploads = allows_unencrypted_object_uploads;
    m_allows_unencrypted_object_uploads_isSet = true;
}

bool OAIS3Bucket::is_allows_unencrypted_object_uploads_Set() const{
    return m_allows_unencrypted_object_uploads_isSet;
}

bool OAIS3Bucket::is_allows_unencrypted_object_uploads_Valid() const{
    return m_allows_unencrypted_object_uploads_isValid;
}

QString OAIS3Bucket::getArn() const {
    return m_arn;
}
void OAIS3Bucket::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIS3Bucket::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIS3Bucket::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIS3Bucket::getCreatedAt() const {
    return m_created_at;
}
void OAIS3Bucket::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIS3Bucket::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIS3Bucket::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIS3Bucket_defaultServerSideEncryption OAIS3Bucket::getDefaultServerSideEncryption() const {
    return m_default_server_side_encryption;
}
void OAIS3Bucket::setDefaultServerSideEncryption(const OAIS3Bucket_defaultServerSideEncryption &default_server_side_encryption) {
    m_default_server_side_encryption = default_server_side_encryption;
    m_default_server_side_encryption_isSet = true;
}

bool OAIS3Bucket::is_default_server_side_encryption_Set() const{
    return m_default_server_side_encryption_isSet;
}

bool OAIS3Bucket::is_default_server_side_encryption_Valid() const{
    return m_default_server_side_encryption_isValid;
}

QString OAIS3Bucket::getName() const {
    return m_name;
}
void OAIS3Bucket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIS3Bucket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIS3Bucket::is_name_Valid() const{
    return m_name_isValid;
}

OAIS3Bucket_owner OAIS3Bucket::getOwner() const {
    return m_owner;
}
void OAIS3Bucket::setOwner(const OAIS3Bucket_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIS3Bucket::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIS3Bucket::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIS3Bucket_publicAccess OAIS3Bucket::getPublicAccess() const {
    return m_public_access;
}
void OAIS3Bucket::setPublicAccess(const OAIS3Bucket_publicAccess &public_access) {
    m_public_access = public_access;
    m_public_access_isSet = true;
}

bool OAIS3Bucket::is_public_access_Set() const{
    return m_public_access_isSet;
}

bool OAIS3Bucket::is_public_access_Valid() const{
    return m_public_access_isValid;
}

QList OAIS3Bucket::getTags() const {
    return m_tags;
}
void OAIS3Bucket::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIS3Bucket::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIS3Bucket::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIS3Bucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_unencrypted_object_uploads.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_server_side_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Bucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
