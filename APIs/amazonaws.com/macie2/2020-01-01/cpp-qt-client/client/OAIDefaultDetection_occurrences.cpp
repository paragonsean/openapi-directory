/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultDetection_occurrences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultDetection_occurrences::OAIDefaultDetection_occurrences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultDetection_occurrences::OAIDefaultDetection_occurrences() {
    this->initializeModel();
}

OAIDefaultDetection_occurrences::~OAIDefaultDetection_occurrences() {}

void OAIDefaultDetection_occurrences::initializeModel() {

    m_cells_isSet = false;
    m_cells_isValid = false;

    m_line_ranges_isSet = false;
    m_line_ranges_isValid = false;

    m_offset_ranges_isSet = false;
    m_offset_ranges_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;
}

void OAIDefaultDetection_occurrences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultDetection_occurrences::fromJsonObject(QJsonObject json) {

    m_cells_isValid = ::OpenAPI::fromJsonValue(m_cells, json[QString("cells")]);
    m_cells_isSet = !json[QString("cells")].isNull() && m_cells_isValid;

    m_line_ranges_isValid = ::OpenAPI::fromJsonValue(m_line_ranges, json[QString("lineRanges")]);
    m_line_ranges_isSet = !json[QString("lineRanges")].isNull() && m_line_ranges_isValid;

    m_offset_ranges_isValid = ::OpenAPI::fromJsonValue(m_offset_ranges, json[QString("offsetRanges")]);
    m_offset_ranges_isSet = !json[QString("offsetRanges")].isNull() && m_offset_ranges_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;
}

QString OAIDefaultDetection_occurrences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultDetection_occurrences::asJsonObject() const {
    QJsonObject obj;
    if (m_cells.isSet()) {
        obj.insert(QString("cells"), ::OpenAPI::toJsonValue(m_cells));
    }
    if (m_line_ranges.isSet()) {
        obj.insert(QString("lineRanges"), ::OpenAPI::toJsonValue(m_line_ranges));
    }
    if (m_offset_ranges.isSet()) {
        obj.insert(QString("offsetRanges"), ::OpenAPI::toJsonValue(m_offset_ranges));
    }
    if (m_pages.isSet()) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_records.isSet()) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    return obj;
}

QList OAIDefaultDetection_occurrences::getCells() const {
    return m_cells;
}
void OAIDefaultDetection_occurrences::setCells(const QList &cells) {
    m_cells = cells;
    m_cells_isSet = true;
}

bool OAIDefaultDetection_occurrences::is_cells_Set() const{
    return m_cells_isSet;
}

bool OAIDefaultDetection_occurrences::is_cells_Valid() const{
    return m_cells_isValid;
}

QList OAIDefaultDetection_occurrences::getLineRanges() const {
    return m_line_ranges;
}
void OAIDefaultDetection_occurrences::setLineRanges(const QList &line_ranges) {
    m_line_ranges = line_ranges;
    m_line_ranges_isSet = true;
}

bool OAIDefaultDetection_occurrences::is_line_ranges_Set() const{
    return m_line_ranges_isSet;
}

bool OAIDefaultDetection_occurrences::is_line_ranges_Valid() const{
    return m_line_ranges_isValid;
}

QList OAIDefaultDetection_occurrences::getOffsetRanges() const {
    return m_offset_ranges;
}
void OAIDefaultDetection_occurrences::setOffsetRanges(const QList &offset_ranges) {
    m_offset_ranges = offset_ranges;
    m_offset_ranges_isSet = true;
}

bool OAIDefaultDetection_occurrences::is_offset_ranges_Set() const{
    return m_offset_ranges_isSet;
}

bool OAIDefaultDetection_occurrences::is_offset_ranges_Valid() const{
    return m_offset_ranges_isValid;
}

QList OAIDefaultDetection_occurrences::getPages() const {
    return m_pages;
}
void OAIDefaultDetection_occurrences::setPages(const QList &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIDefaultDetection_occurrences::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIDefaultDetection_occurrences::is_pages_Valid() const{
    return m_pages_isValid;
}

QList OAIDefaultDetection_occurrences::getRecords() const {
    return m_records;
}
void OAIDefaultDetection_occurrences::setRecords(const QList &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIDefaultDetection_occurrences::is_records_Set() const{
    return m_records_isSet;
}

bool OAIDefaultDetection_occurrences::is_records_Valid() const{
    return m_records_isValid;
}

bool OAIDefaultDetection_occurrences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultDetection_occurrences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
