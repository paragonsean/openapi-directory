/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding_resourcesAffected.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding_resourcesAffected::OAIFinding_resourcesAffected(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding_resourcesAffected::OAIFinding_resourcesAffected() {
    this->initializeModel();
}

OAIFinding_resourcesAffected::~OAIFinding_resourcesAffected() {}

void OAIFinding_resourcesAffected::initializeModel() {

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_object_isSet = false;
    m_s3_object_isValid = false;
}

void OAIFinding_resourcesAffected::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding_resourcesAffected::fromJsonObject(QJsonObject json) {

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("s3Bucket")]);
    m_s3_bucket_isSet = !json[QString("s3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_object_isValid = ::OpenAPI::fromJsonValue(m_s3_object, json[QString("s3Object")]);
    m_s3_object_isSet = !json[QString("s3Object")].isNull() && m_s3_object_isValid;
}

QString OAIFinding_resourcesAffected::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding_resourcesAffected::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket.isSet()) {
        obj.insert(QString("s3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_object.isSet()) {
        obj.insert(QString("s3Object"), ::OpenAPI::toJsonValue(m_s3_object));
    }
    return obj;
}

OAIResourcesAffected_s3Bucket OAIFinding_resourcesAffected::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIFinding_resourcesAffected::setS3Bucket(const OAIResourcesAffected_s3Bucket &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIFinding_resourcesAffected::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIFinding_resourcesAffected::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

OAIResourcesAffected_s3Object OAIFinding_resourcesAffected::getS3Object() const {
    return m_s3_object;
}
void OAIFinding_resourcesAffected::setS3Object(const OAIResourcesAffected_s3Object &s3_object) {
    m_s3_object = s3_object;
    m_s3_object_isSet = true;
}

bool OAIFinding_resourcesAffected::is_s3_object_Set() const{
    return m_s3_object_isSet;
}

bool OAIFinding_resourcesAffected::is_s3_object_Valid() const{
    return m_s3_object_isValid;
}

bool OAIFinding_resourcesAffected::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_object.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding_resourcesAffected::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
