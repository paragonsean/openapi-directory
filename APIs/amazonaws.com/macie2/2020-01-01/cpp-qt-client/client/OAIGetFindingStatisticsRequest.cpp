/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFindingStatisticsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFindingStatisticsRequest::OAIGetFindingStatisticsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFindingStatisticsRequest::OAIGetFindingStatisticsRequest() {
    this->initializeModel();
}

OAIGetFindingStatisticsRequest::~OAIGetFindingStatisticsRequest() {}

void OAIGetFindingStatisticsRequest::initializeModel() {

    m_finding_criteria_isSet = false;
    m_finding_criteria_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_sort_criteria_isSet = false;
    m_sort_criteria_isValid = false;
}

void OAIGetFindingStatisticsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFindingStatisticsRequest::fromJsonObject(QJsonObject json) {

    m_finding_criteria_isValid = ::OpenAPI::fromJsonValue(m_finding_criteria, json[QString("findingCriteria")]);
    m_finding_criteria_isSet = !json[QString("findingCriteria")].isNull() && m_finding_criteria_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("groupBy")]);
    m_group_by_isSet = !json[QString("groupBy")].isNull() && m_group_by_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_sort_criteria_isValid = ::OpenAPI::fromJsonValue(m_sort_criteria, json[QString("sortCriteria")]);
    m_sort_criteria_isSet = !json[QString("sortCriteria")].isNull() && m_sort_criteria_isValid;
}

QString OAIGetFindingStatisticsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFindingStatisticsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_finding_criteria.isSet()) {
        obj.insert(QString("findingCriteria"), ::OpenAPI::toJsonValue(m_finding_criteria));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("groupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_sort_criteria.isSet()) {
        obj.insert(QString("sortCriteria"), ::OpenAPI::toJsonValue(m_sort_criteria));
    }
    return obj;
}

OAIGetFindingStatisticsRequest_findingCriteria OAIGetFindingStatisticsRequest::getFindingCriteria() const {
    return m_finding_criteria;
}
void OAIGetFindingStatisticsRequest::setFindingCriteria(const OAIGetFindingStatisticsRequest_findingCriteria &finding_criteria) {
    m_finding_criteria = finding_criteria;
    m_finding_criteria_isSet = true;
}

bool OAIGetFindingStatisticsRequest::is_finding_criteria_Set() const{
    return m_finding_criteria_isSet;
}

bool OAIGetFindingStatisticsRequest::is_finding_criteria_Valid() const{
    return m_finding_criteria_isValid;
}

OAIGroupBy OAIGetFindingStatisticsRequest::getGroupBy() const {
    return m_group_by;
}
void OAIGetFindingStatisticsRequest::setGroupBy(const OAIGroupBy &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIGetFindingStatisticsRequest::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIGetFindingStatisticsRequest::is_group_by_Valid() const{
    return m_group_by_isValid;
}

qint32 OAIGetFindingStatisticsRequest::getSize() const {
    return m_size;
}
void OAIGetFindingStatisticsRequest::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGetFindingStatisticsRequest::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGetFindingStatisticsRequest::is_size_Valid() const{
    return m_size_isValid;
}

OAIGetFindingStatisticsRequest_sortCriteria OAIGetFindingStatisticsRequest::getSortCriteria() const {
    return m_sort_criteria;
}
void OAIGetFindingStatisticsRequest::setSortCriteria(const OAIGetFindingStatisticsRequest_sortCriteria &sort_criteria) {
    m_sort_criteria = sort_criteria;
    m_sort_criteria_isSet = true;
}

bool OAIGetFindingStatisticsRequest::is_sort_criteria_Set() const{
    return m_sort_criteria_isSet;
}

bool OAIGetFindingStatisticsRequest::is_sort_criteria_Valid() const{
    return m_sort_criteria_isValid;
}

bool OAIGetFindingStatisticsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finding_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFindingStatisticsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_by_isValid && true;
}

} // namespace OpenAPI
