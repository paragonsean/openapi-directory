/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpOwner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpOwner::OAIIpOwner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpOwner::OAIIpOwner() {
    this->initializeModel();
}

OAIIpOwner::~OAIIpOwner() {}

void OAIIpOwner::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_asn_org_isSet = false;
    m_asn_org_isValid = false;

    m_isp_isSet = false;
    m_isp_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;
}

void OAIIpOwner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpOwner::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_asn_org_isValid = ::OpenAPI::fromJsonValue(m_asn_org, json[QString("asnOrg")]);
    m_asn_org_isSet = !json[QString("asnOrg")].isNull() && m_asn_org_isValid;

    m_isp_isValid = ::OpenAPI::fromJsonValue(m_isp, json[QString("isp")]);
    m_isp_isSet = !json[QString("isp")].isNull() && m_isp_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;
}

QString OAIIpOwner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpOwner::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_asn_org_isSet) {
        obj.insert(QString("asnOrg"), ::OpenAPI::toJsonValue(m_asn_org));
    }
    if (m_isp_isSet) {
        obj.insert(QString("isp"), ::OpenAPI::toJsonValue(m_isp));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    return obj;
}

QString OAIIpOwner::getAsn() const {
    return m_asn;
}
void OAIIpOwner::setAsn(const QString &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIIpOwner::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIIpOwner::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIIpOwner::getAsnOrg() const {
    return m_asn_org;
}
void OAIIpOwner::setAsnOrg(const QString &asn_org) {
    m_asn_org = asn_org;
    m_asn_org_isSet = true;
}

bool OAIIpOwner::is_asn_org_Set() const{
    return m_asn_org_isSet;
}

bool OAIIpOwner::is_asn_org_Valid() const{
    return m_asn_org_isValid;
}

QString OAIIpOwner::getIsp() const {
    return m_isp;
}
void OAIIpOwner::setIsp(const QString &isp) {
    m_isp = isp;
    m_isp_isSet = true;
}

bool OAIIpOwner::is_isp_Set() const{
    return m_isp_isSet;
}

bool OAIIpOwner::is_isp_Valid() const{
    return m_isp_isValid;
}

QString OAIIpOwner::getOrg() const {
    return m_org;
}
void OAIIpOwner::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIIpOwner::is_org_Set() const{
    return m_org_isSet;
}

bool OAIIpOwner::is_org_Valid() const{
    return m_org_isValid;
}

bool OAIIpOwner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpOwner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
