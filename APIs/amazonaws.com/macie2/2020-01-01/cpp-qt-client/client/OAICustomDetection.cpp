/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomDetection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomDetection::OAICustomDetection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomDetection::OAICustomDetection() {
    this->initializeModel();
}

OAICustomDetection::~OAICustomDetection() {}

void OAICustomDetection::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_occurrences_isSet = false;
    m_occurrences_isValid = false;
}

void OAICustomDetection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomDetection::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_occurrences_isValid = ::OpenAPI::fromJsonValue(m_occurrences, json[QString("occurrences")]);
    m_occurrences_isSet = !json[QString("occurrences")].isNull() && m_occurrences_isValid;
}

QString OAICustomDetection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomDetection::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_occurrences.isSet()) {
        obj.insert(QString("occurrences"), ::OpenAPI::toJsonValue(m_occurrences));
    }
    return obj;
}

QString OAICustomDetection::getArn() const {
    return m_arn;
}
void OAICustomDetection::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICustomDetection::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICustomDetection::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAICustomDetection::getCount() const {
    return m_count;
}
void OAICustomDetection::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICustomDetection::is_count_Set() const{
    return m_count_isSet;
}

bool OAICustomDetection::is_count_Valid() const{
    return m_count_isValid;
}

QString OAICustomDetection::getName() const {
    return m_name;
}
void OAICustomDetection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomDetection::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomDetection::is_name_Valid() const{
    return m_name_isValid;
}

OAICustomDetection_occurrences OAICustomDetection::getOccurrences() const {
    return m_occurrences;
}
void OAICustomDetection::setOccurrences(const OAICustomDetection_occurrences &occurrences) {
    m_occurrences = occurrences;
    m_occurrences_isSet = true;
}

bool OAICustomDetection::is_occurrences_Set() const{
    return m_occurrences_isSet;
}

bool OAICustomDetection::is_occurrences_Valid() const{
    return m_occurrences_isValid;
}

bool OAICustomDetection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomDetection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
