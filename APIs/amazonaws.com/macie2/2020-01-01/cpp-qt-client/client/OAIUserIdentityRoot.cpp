/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserIdentityRoot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserIdentityRoot::OAIUserIdentityRoot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserIdentityRoot::OAIUserIdentityRoot() {
    this->initializeModel();
}

OAIUserIdentityRoot::~OAIUserIdentityRoot() {}

void OAIUserIdentityRoot::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;
}

void OAIUserIdentityRoot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserIdentityRoot::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;
}

QString OAIUserIdentityRoot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserIdentityRoot::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    return obj;
}

QString OAIUserIdentityRoot::getAccountId() const {
    return m_account_id;
}
void OAIUserIdentityRoot::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUserIdentityRoot::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUserIdentityRoot::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUserIdentityRoot::getArn() const {
    return m_arn;
}
void OAIUserIdentityRoot::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUserIdentityRoot::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUserIdentityRoot::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUserIdentityRoot::getPrincipalId() const {
    return m_principal_id;
}
void OAIUserIdentityRoot::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIUserIdentityRoot::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIUserIdentityRoot::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

bool OAIUserIdentityRoot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserIdentityRoot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
