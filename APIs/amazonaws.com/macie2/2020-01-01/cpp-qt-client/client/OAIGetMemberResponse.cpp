/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMemberResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMemberResponse::OAIGetMemberResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMemberResponse::OAIGetMemberResponse() {
    this->initializeModel();
}

OAIGetMemberResponse::~OAIGetMemberResponse() {}

void OAIGetMemberResponse::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_administrator_account_id_isSet = false;
    m_administrator_account_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_invited_at_isSet = false;
    m_invited_at_isValid = false;

    m_master_account_id_isSet = false;
    m_master_account_id_isValid = false;

    m_relationship_status_isSet = false;
    m_relationship_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetMemberResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMemberResponse::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_administrator_account_id_isValid = ::OpenAPI::fromJsonValue(m_administrator_account_id, json[QString("administratorAccountId")]);
    m_administrator_account_id_isSet = !json[QString("administratorAccountId")].isNull() && m_administrator_account_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_invited_at_isValid = ::OpenAPI::fromJsonValue(m_invited_at, json[QString("invitedAt")]);
    m_invited_at_isSet = !json[QString("invitedAt")].isNull() && m_invited_at_isValid;

    m_master_account_id_isValid = ::OpenAPI::fromJsonValue(m_master_account_id, json[QString("masterAccountId")]);
    m_master_account_id_isSet = !json[QString("masterAccountId")].isNull() && m_master_account_id_isValid;

    m_relationship_status_isValid = ::OpenAPI::fromJsonValue(m_relationship_status, json[QString("relationshipStatus")]);
    m_relationship_status_isSet = !json[QString("relationshipStatus")].isNull() && m_relationship_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIGetMemberResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMemberResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_administrator_account_id_isSet) {
        obj.insert(QString("administratorAccountId"), ::OpenAPI::toJsonValue(m_administrator_account_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_invited_at_isSet) {
        obj.insert(QString("invitedAt"), ::OpenAPI::toJsonValue(m_invited_at));
    }
    if (m_master_account_id_isSet) {
        obj.insert(QString("masterAccountId"), ::OpenAPI::toJsonValue(m_master_account_id));
    }
    if (m_relationship_status.isSet()) {
        obj.insert(QString("relationshipStatus"), ::OpenAPI::toJsonValue(m_relationship_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIGetMemberResponse::getAccountId() const {
    return m_account_id;
}
void OAIGetMemberResponse::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIGetMemberResponse::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIGetMemberResponse::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIGetMemberResponse::getAdministratorAccountId() const {
    return m_administrator_account_id;
}
void OAIGetMemberResponse::setAdministratorAccountId(const QString &administrator_account_id) {
    m_administrator_account_id = administrator_account_id;
    m_administrator_account_id_isSet = true;
}

bool OAIGetMemberResponse::is_administrator_account_id_Set() const{
    return m_administrator_account_id_isSet;
}

bool OAIGetMemberResponse::is_administrator_account_id_Valid() const{
    return m_administrator_account_id_isValid;
}

QString OAIGetMemberResponse::getArn() const {
    return m_arn;
}
void OAIGetMemberResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetMemberResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetMemberResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetMemberResponse::getEmail() const {
    return m_email;
}
void OAIGetMemberResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIGetMemberResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIGetMemberResponse::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIGetMemberResponse::getInvitedAt() const {
    return m_invited_at;
}
void OAIGetMemberResponse::setInvitedAt(const QDateTime &invited_at) {
    m_invited_at = invited_at;
    m_invited_at_isSet = true;
}

bool OAIGetMemberResponse::is_invited_at_Set() const{
    return m_invited_at_isSet;
}

bool OAIGetMemberResponse::is_invited_at_Valid() const{
    return m_invited_at_isValid;
}

QString OAIGetMemberResponse::getMasterAccountId() const {
    return m_master_account_id;
}
void OAIGetMemberResponse::setMasterAccountId(const QString &master_account_id) {
    m_master_account_id = master_account_id;
    m_master_account_id_isSet = true;
}

bool OAIGetMemberResponse::is_master_account_id_Set() const{
    return m_master_account_id_isSet;
}

bool OAIGetMemberResponse::is_master_account_id_Valid() const{
    return m_master_account_id_isValid;
}

OAIRelationshipStatus OAIGetMemberResponse::getRelationshipStatus() const {
    return m_relationship_status;
}
void OAIGetMemberResponse::setRelationshipStatus(const OAIRelationshipStatus &relationship_status) {
    m_relationship_status = relationship_status;
    m_relationship_status_isSet = true;
}

bool OAIGetMemberResponse::is_relationship_status_Set() const{
    return m_relationship_status_isSet;
}

bool OAIGetMemberResponse::is_relationship_status_Valid() const{
    return m_relationship_status_isValid;
}

QMap OAIGetMemberResponse::getTags() const {
    return m_tags;
}
void OAIGetMemberResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetMemberResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetMemberResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIGetMemberResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetMemberResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetMemberResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetMemberResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetMemberResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMemberResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
