/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClassificationJob_request_s3JobDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClassificationJob_request_s3JobDefinition::OAICreateClassificationJob_request_s3JobDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClassificationJob_request_s3JobDefinition::OAICreateClassificationJob_request_s3JobDefinition() {
    this->initializeModel();
}

OAICreateClassificationJob_request_s3JobDefinition::~OAICreateClassificationJob_request_s3JobDefinition() {}

void OAICreateClassificationJob_request_s3JobDefinition::initializeModel() {

    m_bucket_criteria_isSet = false;
    m_bucket_criteria_isValid = false;

    m_bucket_definitions_isSet = false;
    m_bucket_definitions_isValid = false;

    m_scoping_isSet = false;
    m_scoping_isValid = false;
}

void OAICreateClassificationJob_request_s3JobDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClassificationJob_request_s3JobDefinition::fromJsonObject(QJsonObject json) {

    m_bucket_criteria_isValid = ::OpenAPI::fromJsonValue(m_bucket_criteria, json[QString("bucketCriteria")]);
    m_bucket_criteria_isSet = !json[QString("bucketCriteria")].isNull() && m_bucket_criteria_isValid;

    m_bucket_definitions_isValid = ::OpenAPI::fromJsonValue(m_bucket_definitions, json[QString("bucketDefinitions")]);
    m_bucket_definitions_isSet = !json[QString("bucketDefinitions")].isNull() && m_bucket_definitions_isValid;

    m_scoping_isValid = ::OpenAPI::fromJsonValue(m_scoping, json[QString("scoping")]);
    m_scoping_isSet = !json[QString("scoping")].isNull() && m_scoping_isValid;
}

QString OAICreateClassificationJob_request_s3JobDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClassificationJob_request_s3JobDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_criteria.isSet()) {
        obj.insert(QString("bucketCriteria"), ::OpenAPI::toJsonValue(m_bucket_criteria));
    }
    if (m_bucket_definitions.isSet()) {
        obj.insert(QString("bucketDefinitions"), ::OpenAPI::toJsonValue(m_bucket_definitions));
    }
    if (m_scoping.isSet()) {
        obj.insert(QString("scoping"), ::OpenAPI::toJsonValue(m_scoping));
    }
    return obj;
}

OAICreateClassificationJob_request_s3JobDefinition_bucketCriteria OAICreateClassificationJob_request_s3JobDefinition::getBucketCriteria() const {
    return m_bucket_criteria;
}
void OAICreateClassificationJob_request_s3JobDefinition::setBucketCriteria(const OAICreateClassificationJob_request_s3JobDefinition_bucketCriteria &bucket_criteria) {
    m_bucket_criteria = bucket_criteria;
    m_bucket_criteria_isSet = true;
}

bool OAICreateClassificationJob_request_s3JobDefinition::is_bucket_criteria_Set() const{
    return m_bucket_criteria_isSet;
}

bool OAICreateClassificationJob_request_s3JobDefinition::is_bucket_criteria_Valid() const{
    return m_bucket_criteria_isValid;
}

QList OAICreateClassificationJob_request_s3JobDefinition::getBucketDefinitions() const {
    return m_bucket_definitions;
}
void OAICreateClassificationJob_request_s3JobDefinition::setBucketDefinitions(const QList &bucket_definitions) {
    m_bucket_definitions = bucket_definitions;
    m_bucket_definitions_isSet = true;
}

bool OAICreateClassificationJob_request_s3JobDefinition::is_bucket_definitions_Set() const{
    return m_bucket_definitions_isSet;
}

bool OAICreateClassificationJob_request_s3JobDefinition::is_bucket_definitions_Valid() const{
    return m_bucket_definitions_isValid;
}

OAICreateClassificationJob_request_s3JobDefinition_scoping OAICreateClassificationJob_request_s3JobDefinition::getScoping() const {
    return m_scoping;
}
void OAICreateClassificationJob_request_s3JobDefinition::setScoping(const OAICreateClassificationJob_request_s3JobDefinition_scoping &scoping) {
    m_scoping = scoping;
    m_scoping_isSet = true;
}

bool OAICreateClassificationJob_request_s3JobDefinition::is_scoping_Set() const{
    return m_scoping_isSet;
}

bool OAICreateClassificationJob_request_s3JobDefinition::is_scoping_Valid() const{
    return m_scoping_isValid;
}

bool OAICreateClassificationJob_request_s3JobDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClassificationJob_request_s3JobDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
