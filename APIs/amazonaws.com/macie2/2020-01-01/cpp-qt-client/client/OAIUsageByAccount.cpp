/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageByAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageByAccount::OAIUsageByAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageByAccount::OAIUsageByAccount() {
    this->initializeModel();
}

OAIUsageByAccount::~OAIUsageByAccount() {}

void OAIUsageByAccount::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_estimated_cost_isSet = false;
    m_estimated_cost_isValid = false;

    m_service_limit_isSet = false;
    m_service_limit_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUsageByAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageByAccount::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_estimated_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_cost, json[QString("estimatedCost")]);
    m_estimated_cost_isSet = !json[QString("estimatedCost")].isNull() && m_estimated_cost_isValid;

    m_service_limit_isValid = ::OpenAPI::fromJsonValue(m_service_limit, json[QString("serviceLimit")]);
    m_service_limit_isSet = !json[QString("serviceLimit")].isNull() && m_service_limit_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUsageByAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageByAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_estimated_cost_isSet) {
        obj.insert(QString("estimatedCost"), ::OpenAPI::toJsonValue(m_estimated_cost));
    }
    if (m_service_limit.isSet()) {
        obj.insert(QString("serviceLimit"), ::OpenAPI::toJsonValue(m_service_limit));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICurrency OAIUsageByAccount::getCurrency() const {
    return m_currency;
}
void OAIUsageByAccount::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUsageByAccount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUsageByAccount::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIUsageByAccount::getEstimatedCost() const {
    return m_estimated_cost;
}
void OAIUsageByAccount::setEstimatedCost(const QString &estimated_cost) {
    m_estimated_cost = estimated_cost;
    m_estimated_cost_isSet = true;
}

bool OAIUsageByAccount::is_estimated_cost_Set() const{
    return m_estimated_cost_isSet;
}

bool OAIUsageByAccount::is_estimated_cost_Valid() const{
    return m_estimated_cost_isValid;
}

OAIUsageByAccount_serviceLimit OAIUsageByAccount::getServiceLimit() const {
    return m_service_limit;
}
void OAIUsageByAccount::setServiceLimit(const OAIUsageByAccount_serviceLimit &service_limit) {
    m_service_limit = service_limit;
    m_service_limit_isSet = true;
}

bool OAIUsageByAccount::is_service_limit_Set() const{
    return m_service_limit_isSet;
}

bool OAIUsageByAccount::is_service_limit_Valid() const{
    return m_service_limit_isValid;
}

OAIUsageType OAIUsageByAccount::getType() const {
    return m_type;
}
void OAIUsageByAccount::setType(const OAIUsageType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUsageByAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUsageByAccount::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUsageByAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageByAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
