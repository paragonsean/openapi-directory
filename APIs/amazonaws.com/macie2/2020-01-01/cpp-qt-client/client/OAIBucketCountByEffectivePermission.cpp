/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketCountByEffectivePermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketCountByEffectivePermission::OAIBucketCountByEffectivePermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketCountByEffectivePermission::OAIBucketCountByEffectivePermission() {
    this->initializeModel();
}

OAIBucketCountByEffectivePermission::~OAIBucketCountByEffectivePermission() {}

void OAIBucketCountByEffectivePermission::initializeModel() {

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_publicly_readable_isSet = false;
    m_publicly_readable_isValid = false;

    m_publicly_writable_isSet = false;
    m_publicly_writable_isValid = false;

    m_unknown_isSet = false;
    m_unknown_isValid = false;
}

void OAIBucketCountByEffectivePermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketCountByEffectivePermission::fromJsonObject(QJsonObject json) {

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("publiclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("publiclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_publicly_readable_isValid = ::OpenAPI::fromJsonValue(m_publicly_readable, json[QString("publiclyReadable")]);
    m_publicly_readable_isSet = !json[QString("publiclyReadable")].isNull() && m_publicly_readable_isValid;

    m_publicly_writable_isValid = ::OpenAPI::fromJsonValue(m_publicly_writable, json[QString("publiclyWritable")]);
    m_publicly_writable_isSet = !json[QString("publiclyWritable")].isNull() && m_publicly_writable_isValid;

    m_unknown_isValid = ::OpenAPI::fromJsonValue(m_unknown, json[QString("unknown")]);
    m_unknown_isSet = !json[QString("unknown")].isNull() && m_unknown_isValid;
}

QString OAIBucketCountByEffectivePermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketCountByEffectivePermission::asJsonObject() const {
    QJsonObject obj;
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("publiclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_publicly_readable_isSet) {
        obj.insert(QString("publiclyReadable"), ::OpenAPI::toJsonValue(m_publicly_readable));
    }
    if (m_publicly_writable_isSet) {
        obj.insert(QString("publiclyWritable"), ::OpenAPI::toJsonValue(m_publicly_writable));
    }
    if (m_unknown_isSet) {
        obj.insert(QString("unknown"), ::OpenAPI::toJsonValue(m_unknown));
    }
    return obj;
}

qint32 OAIBucketCountByEffectivePermission::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIBucketCountByEffectivePermission::setPubliclyAccessible(const qint32 &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIBucketCountByEffectivePermission::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIBucketCountByEffectivePermission::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

qint32 OAIBucketCountByEffectivePermission::getPubliclyReadable() const {
    return m_publicly_readable;
}
void OAIBucketCountByEffectivePermission::setPubliclyReadable(const qint32 &publicly_readable) {
    m_publicly_readable = publicly_readable;
    m_publicly_readable_isSet = true;
}

bool OAIBucketCountByEffectivePermission::is_publicly_readable_Set() const{
    return m_publicly_readable_isSet;
}

bool OAIBucketCountByEffectivePermission::is_publicly_readable_Valid() const{
    return m_publicly_readable_isValid;
}

qint32 OAIBucketCountByEffectivePermission::getPubliclyWritable() const {
    return m_publicly_writable;
}
void OAIBucketCountByEffectivePermission::setPubliclyWritable(const qint32 &publicly_writable) {
    m_publicly_writable = publicly_writable;
    m_publicly_writable_isSet = true;
}

bool OAIBucketCountByEffectivePermission::is_publicly_writable_Set() const{
    return m_publicly_writable_isSet;
}

bool OAIBucketCountByEffectivePermission::is_publicly_writable_Valid() const{
    return m_publicly_writable_isValid;
}

qint32 OAIBucketCountByEffectivePermission::getUnknown() const {
    return m_unknown;
}
void OAIBucketCountByEffectivePermission::setUnknown(const qint32 &unknown) {
    m_unknown = unknown;
    m_unknown_isSet = true;
}

bool OAIBucketCountByEffectivePermission::is_unknown_Set() const{
    return m_unknown_isSet;
}

bool OAIBucketCountByEffectivePermission::is_unknown_Valid() const{
    return m_unknown_isValid;
}

bool OAIBucketCountByEffectivePermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_readable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_writable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketCountByEffectivePermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
