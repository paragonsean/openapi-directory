/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Object::OAIS3Object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Object::OAIS3Object() {
    this->initializeModel();
}

OAIS3Object::~OAIS3Object() {}

void OAIS3Object::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_public_access_isSet = false;
    m_public_access_isValid = false;

    m_server_side_encryption_isSet = false;
    m_server_side_encryption_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIS3Object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Object::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("bucketArn")]);
    m_bucket_arn_isSet = !json[QString("bucketArn")].isNull() && m_bucket_arn_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_public_access_isValid = ::OpenAPI::fromJsonValue(m_public_access, json[QString("publicAccess")]);
    m_public_access_isSet = !json[QString("publicAccess")].isNull() && m_public_access_isValid;

    m_server_side_encryption_isValid = ::OpenAPI::fromJsonValue(m_server_side_encryption, json[QString("serverSideEncryption")]);
    m_server_side_encryption_isSet = !json[QString("serverSideEncryption")].isNull() && m_server_side_encryption_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("storageClass")]);
    m_storage_class_isSet = !json[QString("storageClass")].isNull() && m_storage_class_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIS3Object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Object::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("bucketArn"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_public_access_isSet) {
        obj.insert(QString("publicAccess"), ::OpenAPI::toJsonValue(m_public_access));
    }
    if (m_server_side_encryption.isSet()) {
        obj.insert(QString("serverSideEncryption"), ::OpenAPI::toJsonValue(m_server_side_encryption));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_storage_class.isSet()) {
        obj.insert(QString("storageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIS3Object::getBucketArn() const {
    return m_bucket_arn;
}
void OAIS3Object::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIS3Object::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIS3Object::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAIS3Object::getETag() const {
    return m_e_tag;
}
void OAIS3Object::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIS3Object::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIS3Object::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QString OAIS3Object::getExtension() const {
    return m_extension;
}
void OAIS3Object::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIS3Object::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIS3Object::is_extension_Valid() const{
    return m_extension_isValid;
}

QString OAIS3Object::getKey() const {
    return m_key;
}
void OAIS3Object::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIS3Object::is_key_Set() const{
    return m_key_isSet;
}

bool OAIS3Object::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIS3Object::getLastModified() const {
    return m_last_modified;
}
void OAIS3Object::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIS3Object::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIS3Object::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIS3Object::getPath() const {
    return m_path;
}
void OAIS3Object::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIS3Object::is_path_Set() const{
    return m_path_isSet;
}

bool OAIS3Object::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIS3Object::getPublicAccess() const {
    return m_public_access;
}
void OAIS3Object::setPublicAccess(const bool &public_access) {
    m_public_access = public_access;
    m_public_access_isSet = true;
}

bool OAIS3Object::is_public_access_Set() const{
    return m_public_access_isSet;
}

bool OAIS3Object::is_public_access_Valid() const{
    return m_public_access_isValid;
}

OAIS3Object_serverSideEncryption OAIS3Object::getServerSideEncryption() const {
    return m_server_side_encryption;
}
void OAIS3Object::setServerSideEncryption(const OAIS3Object_serverSideEncryption &server_side_encryption) {
    m_server_side_encryption = server_side_encryption;
    m_server_side_encryption_isSet = true;
}

bool OAIS3Object::is_server_side_encryption_Set() const{
    return m_server_side_encryption_isSet;
}

bool OAIS3Object::is_server_side_encryption_Valid() const{
    return m_server_side_encryption_isValid;
}

qint32 OAIS3Object::getSize() const {
    return m_size;
}
void OAIS3Object::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIS3Object::is_size_Set() const{
    return m_size_isSet;
}

bool OAIS3Object::is_size_Valid() const{
    return m_size_isValid;
}

OAIStorageClass OAIS3Object::getStorageClass() const {
    return m_storage_class;
}
void OAIS3Object::setStorageClass(const OAIStorageClass &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIS3Object::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIS3Object::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

QList OAIS3Object::getTags() const {
    return m_tags;
}
void OAIS3Object::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIS3Object::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIS3Object::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIS3Object::getVersionId() const {
    return m_version_id;
}
void OAIS3Object::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIS3Object::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIS3Object::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIS3Object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Object::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
