/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBucketStatisticsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBucketStatisticsResponse::OAIGetBucketStatisticsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBucketStatisticsResponse::OAIGetBucketStatisticsResponse() {
    this->initializeModel();
}

OAIGetBucketStatisticsResponse::~OAIGetBucketStatisticsResponse() {}

void OAIGetBucketStatisticsResponse::initializeModel() {

    m_bucket_count_isSet = false;
    m_bucket_count_isValid = false;

    m_bucket_count_by_effective_permission_isSet = false;
    m_bucket_count_by_effective_permission_isValid = false;

    m_bucket_count_by_encryption_type_isSet = false;
    m_bucket_count_by_encryption_type_isValid = false;

    m_bucket_count_by_object_encryption_requirement_isSet = false;
    m_bucket_count_by_object_encryption_requirement_isValid = false;

    m_bucket_count_by_shared_access_type_isSet = false;
    m_bucket_count_by_shared_access_type_isValid = false;

    m_bucket_statistics_by_sensitivity_isSet = false;
    m_bucket_statistics_by_sensitivity_isValid = false;

    m_classifiable_object_count_isSet = false;
    m_classifiable_object_count_isValid = false;

    m_classifiable_size_in_bytes_isSet = false;
    m_classifiable_size_in_bytes_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_object_count_isSet = false;
    m_object_count_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_size_in_bytes_compressed_isSet = false;
    m_size_in_bytes_compressed_isValid = false;

    m_unclassifiable_object_count_isSet = false;
    m_unclassifiable_object_count_isValid = false;

    m_unclassifiable_object_size_in_bytes_isSet = false;
    m_unclassifiable_object_size_in_bytes_isValid = false;
}

void OAIGetBucketStatisticsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBucketStatisticsResponse::fromJsonObject(QJsonObject json) {

    m_bucket_count_isValid = ::OpenAPI::fromJsonValue(m_bucket_count, json[QString("bucketCount")]);
    m_bucket_count_isSet = !json[QString("bucketCount")].isNull() && m_bucket_count_isValid;

    m_bucket_count_by_effective_permission_isValid = ::OpenAPI::fromJsonValue(m_bucket_count_by_effective_permission, json[QString("bucketCountByEffectivePermission")]);
    m_bucket_count_by_effective_permission_isSet = !json[QString("bucketCountByEffectivePermission")].isNull() && m_bucket_count_by_effective_permission_isValid;

    m_bucket_count_by_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_bucket_count_by_encryption_type, json[QString("bucketCountByEncryptionType")]);
    m_bucket_count_by_encryption_type_isSet = !json[QString("bucketCountByEncryptionType")].isNull() && m_bucket_count_by_encryption_type_isValid;

    m_bucket_count_by_object_encryption_requirement_isValid = ::OpenAPI::fromJsonValue(m_bucket_count_by_object_encryption_requirement, json[QString("bucketCountByObjectEncryptionRequirement")]);
    m_bucket_count_by_object_encryption_requirement_isSet = !json[QString("bucketCountByObjectEncryptionRequirement")].isNull() && m_bucket_count_by_object_encryption_requirement_isValid;

    m_bucket_count_by_shared_access_type_isValid = ::OpenAPI::fromJsonValue(m_bucket_count_by_shared_access_type, json[QString("bucketCountBySharedAccessType")]);
    m_bucket_count_by_shared_access_type_isSet = !json[QString("bucketCountBySharedAccessType")].isNull() && m_bucket_count_by_shared_access_type_isValid;

    m_bucket_statistics_by_sensitivity_isValid = ::OpenAPI::fromJsonValue(m_bucket_statistics_by_sensitivity, json[QString("bucketStatisticsBySensitivity")]);
    m_bucket_statistics_by_sensitivity_isSet = !json[QString("bucketStatisticsBySensitivity")].isNull() && m_bucket_statistics_by_sensitivity_isValid;

    m_classifiable_object_count_isValid = ::OpenAPI::fromJsonValue(m_classifiable_object_count, json[QString("classifiableObjectCount")]);
    m_classifiable_object_count_isSet = !json[QString("classifiableObjectCount")].isNull() && m_classifiable_object_count_isValid;

    m_classifiable_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_classifiable_size_in_bytes, json[QString("classifiableSizeInBytes")]);
    m_classifiable_size_in_bytes_isSet = !json[QString("classifiableSizeInBytes")].isNull() && m_classifiable_size_in_bytes_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_object_count_isValid = ::OpenAPI::fromJsonValue(m_object_count, json[QString("objectCount")]);
    m_object_count_isSet = !json[QString("objectCount")].isNull() && m_object_count_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("sizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("sizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_size_in_bytes_compressed_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes_compressed, json[QString("sizeInBytesCompressed")]);
    m_size_in_bytes_compressed_isSet = !json[QString("sizeInBytesCompressed")].isNull() && m_size_in_bytes_compressed_isValid;

    m_unclassifiable_object_count_isValid = ::OpenAPI::fromJsonValue(m_unclassifiable_object_count, json[QString("unclassifiableObjectCount")]);
    m_unclassifiable_object_count_isSet = !json[QString("unclassifiableObjectCount")].isNull() && m_unclassifiable_object_count_isValid;

    m_unclassifiable_object_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_unclassifiable_object_size_in_bytes, json[QString("unclassifiableObjectSizeInBytes")]);
    m_unclassifiable_object_size_in_bytes_isSet = !json[QString("unclassifiableObjectSizeInBytes")].isNull() && m_unclassifiable_object_size_in_bytes_isValid;
}

QString OAIGetBucketStatisticsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBucketStatisticsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_count_isSet) {
        obj.insert(QString("bucketCount"), ::OpenAPI::toJsonValue(m_bucket_count));
    }
    if (m_bucket_count_by_effective_permission.isSet()) {
        obj.insert(QString("bucketCountByEffectivePermission"), ::OpenAPI::toJsonValue(m_bucket_count_by_effective_permission));
    }
    if (m_bucket_count_by_encryption_type.isSet()) {
        obj.insert(QString("bucketCountByEncryptionType"), ::OpenAPI::toJsonValue(m_bucket_count_by_encryption_type));
    }
    if (m_bucket_count_by_object_encryption_requirement.isSet()) {
        obj.insert(QString("bucketCountByObjectEncryptionRequirement"), ::OpenAPI::toJsonValue(m_bucket_count_by_object_encryption_requirement));
    }
    if (m_bucket_count_by_shared_access_type.isSet()) {
        obj.insert(QString("bucketCountBySharedAccessType"), ::OpenAPI::toJsonValue(m_bucket_count_by_shared_access_type));
    }
    if (m_bucket_statistics_by_sensitivity.isSet()) {
        obj.insert(QString("bucketStatisticsBySensitivity"), ::OpenAPI::toJsonValue(m_bucket_statistics_by_sensitivity));
    }
    if (m_classifiable_object_count_isSet) {
        obj.insert(QString("classifiableObjectCount"), ::OpenAPI::toJsonValue(m_classifiable_object_count));
    }
    if (m_classifiable_size_in_bytes_isSet) {
        obj.insert(QString("classifiableSizeInBytes"), ::OpenAPI::toJsonValue(m_classifiable_size_in_bytes));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_object_count_isSet) {
        obj.insert(QString("objectCount"), ::OpenAPI::toJsonValue(m_object_count));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("sizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_size_in_bytes_compressed_isSet) {
        obj.insert(QString("sizeInBytesCompressed"), ::OpenAPI::toJsonValue(m_size_in_bytes_compressed));
    }
    if (m_unclassifiable_object_count.isSet()) {
        obj.insert(QString("unclassifiableObjectCount"), ::OpenAPI::toJsonValue(m_unclassifiable_object_count));
    }
    if (m_unclassifiable_object_size_in_bytes.isSet()) {
        obj.insert(QString("unclassifiableObjectSizeInBytes"), ::OpenAPI::toJsonValue(m_unclassifiable_object_size_in_bytes));
    }
    return obj;
}

qint32 OAIGetBucketStatisticsResponse::getBucketCount() const {
    return m_bucket_count;
}
void OAIGetBucketStatisticsResponse::setBucketCount(const qint32 &bucket_count) {
    m_bucket_count = bucket_count;
    m_bucket_count_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_Set() const{
    return m_bucket_count_isSet;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_Valid() const{
    return m_bucket_count_isValid;
}

OAIGetBucketStatisticsResponse_bucketCountByEffectivePermission OAIGetBucketStatisticsResponse::getBucketCountByEffectivePermission() const {
    return m_bucket_count_by_effective_permission;
}
void OAIGetBucketStatisticsResponse::setBucketCountByEffectivePermission(const OAIGetBucketStatisticsResponse_bucketCountByEffectivePermission &bucket_count_by_effective_permission) {
    m_bucket_count_by_effective_permission = bucket_count_by_effective_permission;
    m_bucket_count_by_effective_permission_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_effective_permission_Set() const{
    return m_bucket_count_by_effective_permission_isSet;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_effective_permission_Valid() const{
    return m_bucket_count_by_effective_permission_isValid;
}

OAIGetBucketStatisticsResponse_bucketCountByEncryptionType OAIGetBucketStatisticsResponse::getBucketCountByEncryptionType() const {
    return m_bucket_count_by_encryption_type;
}
void OAIGetBucketStatisticsResponse::setBucketCountByEncryptionType(const OAIGetBucketStatisticsResponse_bucketCountByEncryptionType &bucket_count_by_encryption_type) {
    m_bucket_count_by_encryption_type = bucket_count_by_encryption_type;
    m_bucket_count_by_encryption_type_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_encryption_type_Set() const{
    return m_bucket_count_by_encryption_type_isSet;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_encryption_type_Valid() const{
    return m_bucket_count_by_encryption_type_isValid;
}

OAIGetBucketStatisticsResponse_bucketCountByObjectEncryptionRequirement OAIGetBucketStatisticsResponse::getBucketCountByObjectEncryptionRequirement() const {
    return m_bucket_count_by_object_encryption_requirement;
}
void OAIGetBucketStatisticsResponse::setBucketCountByObjectEncryptionRequirement(const OAIGetBucketStatisticsResponse_bucketCountByObjectEncryptionRequirement &bucket_count_by_object_encryption_requirement) {
    m_bucket_count_by_object_encryption_requirement = bucket_count_by_object_encryption_requirement;
    m_bucket_count_by_object_encryption_requirement_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_object_encryption_requirement_Set() const{
    return m_bucket_count_by_object_encryption_requirement_isSet;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_object_encryption_requirement_Valid() const{
    return m_bucket_count_by_object_encryption_requirement_isValid;
}

OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType OAIGetBucketStatisticsResponse::getBucketCountBySharedAccessType() const {
    return m_bucket_count_by_shared_access_type;
}
void OAIGetBucketStatisticsResponse::setBucketCountBySharedAccessType(const OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType &bucket_count_by_shared_access_type) {
    m_bucket_count_by_shared_access_type = bucket_count_by_shared_access_type;
    m_bucket_count_by_shared_access_type_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_shared_access_type_Set() const{
    return m_bucket_count_by_shared_access_type_isSet;
}

bool OAIGetBucketStatisticsResponse::is_bucket_count_by_shared_access_type_Valid() const{
    return m_bucket_count_by_shared_access_type_isValid;
}

OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity OAIGetBucketStatisticsResponse::getBucketStatisticsBySensitivity() const {
    return m_bucket_statistics_by_sensitivity;
}
void OAIGetBucketStatisticsResponse::setBucketStatisticsBySensitivity(const OAIGetBucketStatisticsResponse_bucketStatisticsBySensitivity &bucket_statistics_by_sensitivity) {
    m_bucket_statistics_by_sensitivity = bucket_statistics_by_sensitivity;
    m_bucket_statistics_by_sensitivity_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_bucket_statistics_by_sensitivity_Set() const{
    return m_bucket_statistics_by_sensitivity_isSet;
}

bool OAIGetBucketStatisticsResponse::is_bucket_statistics_by_sensitivity_Valid() const{
    return m_bucket_statistics_by_sensitivity_isValid;
}

qint32 OAIGetBucketStatisticsResponse::getClassifiableObjectCount() const {
    return m_classifiable_object_count;
}
void OAIGetBucketStatisticsResponse::setClassifiableObjectCount(const qint32 &classifiable_object_count) {
    m_classifiable_object_count = classifiable_object_count;
    m_classifiable_object_count_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_classifiable_object_count_Set() const{
    return m_classifiable_object_count_isSet;
}

bool OAIGetBucketStatisticsResponse::is_classifiable_object_count_Valid() const{
    return m_classifiable_object_count_isValid;
}

qint32 OAIGetBucketStatisticsResponse::getClassifiableSizeInBytes() const {
    return m_classifiable_size_in_bytes;
}
void OAIGetBucketStatisticsResponse::setClassifiableSizeInBytes(const qint32 &classifiable_size_in_bytes) {
    m_classifiable_size_in_bytes = classifiable_size_in_bytes;
    m_classifiable_size_in_bytes_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_classifiable_size_in_bytes_Set() const{
    return m_classifiable_size_in_bytes_isSet;
}

bool OAIGetBucketStatisticsResponse::is_classifiable_size_in_bytes_Valid() const{
    return m_classifiable_size_in_bytes_isValid;
}

QDateTime OAIGetBucketStatisticsResponse::getLastUpdated() const {
    return m_last_updated;
}
void OAIGetBucketStatisticsResponse::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIGetBucketStatisticsResponse::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIGetBucketStatisticsResponse::getObjectCount() const {
    return m_object_count;
}
void OAIGetBucketStatisticsResponse::setObjectCount(const qint32 &object_count) {
    m_object_count = object_count;
    m_object_count_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_object_count_Set() const{
    return m_object_count_isSet;
}

bool OAIGetBucketStatisticsResponse::is_object_count_Valid() const{
    return m_object_count_isValid;
}

qint32 OAIGetBucketStatisticsResponse::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIGetBucketStatisticsResponse::setSizeInBytes(const qint32 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIGetBucketStatisticsResponse::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

qint32 OAIGetBucketStatisticsResponse::getSizeInBytesCompressed() const {
    return m_size_in_bytes_compressed;
}
void OAIGetBucketStatisticsResponse::setSizeInBytesCompressed(const qint32 &size_in_bytes_compressed) {
    m_size_in_bytes_compressed = size_in_bytes_compressed;
    m_size_in_bytes_compressed_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_size_in_bytes_compressed_Set() const{
    return m_size_in_bytes_compressed_isSet;
}

bool OAIGetBucketStatisticsResponse::is_size_in_bytes_compressed_Valid() const{
    return m_size_in_bytes_compressed_isValid;
}

OAIGetBucketStatisticsResponse_unclassifiableObjectCount OAIGetBucketStatisticsResponse::getUnclassifiableObjectCount() const {
    return m_unclassifiable_object_count;
}
void OAIGetBucketStatisticsResponse::setUnclassifiableObjectCount(const OAIGetBucketStatisticsResponse_unclassifiableObjectCount &unclassifiable_object_count) {
    m_unclassifiable_object_count = unclassifiable_object_count;
    m_unclassifiable_object_count_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_unclassifiable_object_count_Set() const{
    return m_unclassifiable_object_count_isSet;
}

bool OAIGetBucketStatisticsResponse::is_unclassifiable_object_count_Valid() const{
    return m_unclassifiable_object_count_isValid;
}

OAIGetBucketStatisticsResponse_unclassifiableObjectSizeInBytes OAIGetBucketStatisticsResponse::getUnclassifiableObjectSizeInBytes() const {
    return m_unclassifiable_object_size_in_bytes;
}
void OAIGetBucketStatisticsResponse::setUnclassifiableObjectSizeInBytes(const OAIGetBucketStatisticsResponse_unclassifiableObjectSizeInBytes &unclassifiable_object_size_in_bytes) {
    m_unclassifiable_object_size_in_bytes = unclassifiable_object_size_in_bytes;
    m_unclassifiable_object_size_in_bytes_isSet = true;
}

bool OAIGetBucketStatisticsResponse::is_unclassifiable_object_size_in_bytes_Set() const{
    return m_unclassifiable_object_size_in_bytes_isSet;
}

bool OAIGetBucketStatisticsResponse::is_unclassifiable_object_size_in_bytes_Valid() const{
    return m_unclassifiable_object_size_in_bytes_isValid;
}

bool OAIGetBucketStatisticsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_count_by_effective_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_count_by_encryption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_count_by_object_encryption_requirement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_count_by_shared_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_statistics_by_sensitivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiable_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifiable_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclassifiable_object_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unclassifiable_object_size_in_bytes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBucketStatisticsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
