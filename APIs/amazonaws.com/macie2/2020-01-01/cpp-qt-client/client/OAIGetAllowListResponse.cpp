/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAllowListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAllowListResponse::OAIGetAllowListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAllowListResponse::OAIGetAllowListResponse() {
    this->initializeModel();
}

OAIGetAllowListResponse::~OAIGetAllowListResponse() {}

void OAIGetAllowListResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetAllowListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAllowListResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIGetAllowListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAllowListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_criteria.isSet()) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIGetAllowListResponse::getArn() const {
    return m_arn;
}
void OAIGetAllowListResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetAllowListResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetAllowListResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetAllowListResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetAllowListResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetAllowListResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetAllowListResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIGetAllowListResponse_criteria OAIGetAllowListResponse::getCriteria() const {
    return m_criteria;
}
void OAIGetAllowListResponse::setCriteria(const OAIGetAllowListResponse_criteria &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIGetAllowListResponse::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIGetAllowListResponse::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAIGetAllowListResponse::getDescription() const {
    return m_description;
}
void OAIGetAllowListResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetAllowListResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetAllowListResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetAllowListResponse::getId() const {
    return m_id;
}
void OAIGetAllowListResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetAllowListResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetAllowListResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetAllowListResponse::getName() const {
    return m_name;
}
void OAIGetAllowListResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAllowListResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAllowListResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetAllowListResponse_status OAIGetAllowListResponse::getStatus() const {
    return m_status;
}
void OAIGetAllowListResponse::setStatus(const OAIGetAllowListResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetAllowListResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetAllowListResponse::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIGetAllowListResponse::getTags() const {
    return m_tags;
}
void OAIGetAllowListResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetAllowListResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetAllowListResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIGetAllowListResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetAllowListResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetAllowListResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetAllowListResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetAllowListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAllowListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
