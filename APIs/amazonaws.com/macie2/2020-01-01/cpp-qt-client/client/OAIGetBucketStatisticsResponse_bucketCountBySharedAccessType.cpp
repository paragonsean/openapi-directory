/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType() {
    this->initializeModel();
}

OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::~OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType() {}

void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::initializeModel() {

    m_external_isSet = false;
    m_external_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_not_shared_isSet = false;
    m_not_shared_isValid = false;

    m_unknown_isSet = false;
    m_unknown_isValid = false;
}

void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::fromJsonObject(QJsonObject json) {

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_not_shared_isValid = ::OpenAPI::fromJsonValue(m_not_shared, json[QString("notShared")]);
    m_not_shared_isSet = !json[QString("notShared")].isNull() && m_not_shared_isValid;

    m_unknown_isValid = ::OpenAPI::fromJsonValue(m_unknown, json[QString("unknown")]);
    m_unknown_isSet = !json[QString("unknown")].isNull() && m_unknown_isValid;
}

QString OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::asJsonObject() const {
    QJsonObject obj;
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_not_shared_isSet) {
        obj.insert(QString("notShared"), ::OpenAPI::toJsonValue(m_not_shared));
    }
    if (m_unknown_isSet) {
        obj.insert(QString("unknown"), ::OpenAPI::toJsonValue(m_unknown));
    }
    return obj;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::getExternal() const {
    return m_external;
}
void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::setExternal(const qint32 &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_external_Set() const{
    return m_external_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_external_Valid() const{
    return m_external_isValid;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::getInternal() const {
    return m_internal;
}
void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::setInternal(const qint32 &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_internal_Valid() const{
    return m_internal_isValid;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::getNotShared() const {
    return m_not_shared;
}
void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::setNotShared(const qint32 &not_shared) {
    m_not_shared = not_shared;
    m_not_shared_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_not_shared_Set() const{
    return m_not_shared_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_not_shared_Valid() const{
    return m_not_shared_isValid;
}

qint32 OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::getUnknown() const {
    return m_unknown;
}
void OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::setUnknown(const qint32 &unknown) {
    m_unknown = unknown;
    m_unknown_isSet = true;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_unknown_Set() const{
    return m_unknown_isSet;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::is_unknown_Valid() const{
    return m_unknown_isValid;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBucketStatisticsResponse_bucketCountBySharedAccessType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
