/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserIdentityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserIdentityType::OAIUserIdentityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserIdentityType::OAIUserIdentityType() {
    this->initializeModel();
}

OAIUserIdentityType::~OAIUserIdentityType() {}

void OAIUserIdentityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUserIdentityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUserIdentityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AssumedRole", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserIdentityType::ASSUMEDROLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IAMUser", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserIdentityType::IAMUSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FederatedUser", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserIdentityType::FEDERATEDUSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Root", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserIdentityType::ROOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWSAccount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserIdentityType::AWSACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWSService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserIdentityType::AWSSERVICE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUserIdentityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUserIdentityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUserIdentityType::ASSUMEDROLE:
            val = "AssumedRole";
            break;
        case eOAIUserIdentityType::IAMUSER:
            val = "IAMUser";
            break;
        case eOAIUserIdentityType::FEDERATEDUSER:
            val = "FederatedUser";
            break;
        case eOAIUserIdentityType::ROOT:
            val = "Root";
            break;
        case eOAIUserIdentityType::AWSACCOUNT:
            val = "AWSAccount";
            break;
        case eOAIUserIdentityType::AWSSERVICE:
            val = "AWSService";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUserIdentityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUserIdentityType::eOAIUserIdentityType OAIUserIdentityType::getValue() const {
    return m_value;
}

void OAIUserIdentityType::setValue(const OAIUserIdentityType::eOAIUserIdentityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUserIdentityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIUserIdentityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
