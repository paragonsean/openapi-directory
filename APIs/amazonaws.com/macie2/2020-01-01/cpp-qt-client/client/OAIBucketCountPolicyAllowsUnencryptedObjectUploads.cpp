/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketCountPolicyAllowsUnencryptedObjectUploads.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketCountPolicyAllowsUnencryptedObjectUploads::OAIBucketCountPolicyAllowsUnencryptedObjectUploads(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketCountPolicyAllowsUnencryptedObjectUploads::OAIBucketCountPolicyAllowsUnencryptedObjectUploads() {
    this->initializeModel();
}

OAIBucketCountPolicyAllowsUnencryptedObjectUploads::~OAIBucketCountPolicyAllowsUnencryptedObjectUploads() {}

void OAIBucketCountPolicyAllowsUnencryptedObjectUploads::initializeModel() {

    m_allows_unencrypted_object_uploads_isSet = false;
    m_allows_unencrypted_object_uploads_isValid = false;

    m_denies_unencrypted_object_uploads_isSet = false;
    m_denies_unencrypted_object_uploads_isValid = false;

    m_unknown_isSet = false;
    m_unknown_isValid = false;
}

void OAIBucketCountPolicyAllowsUnencryptedObjectUploads::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketCountPolicyAllowsUnencryptedObjectUploads::fromJsonObject(QJsonObject json) {

    m_allows_unencrypted_object_uploads_isValid = ::OpenAPI::fromJsonValue(m_allows_unencrypted_object_uploads, json[QString("allowsUnencryptedObjectUploads")]);
    m_allows_unencrypted_object_uploads_isSet = !json[QString("allowsUnencryptedObjectUploads")].isNull() && m_allows_unencrypted_object_uploads_isValid;

    m_denies_unencrypted_object_uploads_isValid = ::OpenAPI::fromJsonValue(m_denies_unencrypted_object_uploads, json[QString("deniesUnencryptedObjectUploads")]);
    m_denies_unencrypted_object_uploads_isSet = !json[QString("deniesUnencryptedObjectUploads")].isNull() && m_denies_unencrypted_object_uploads_isValid;

    m_unknown_isValid = ::OpenAPI::fromJsonValue(m_unknown, json[QString("unknown")]);
    m_unknown_isSet = !json[QString("unknown")].isNull() && m_unknown_isValid;
}

QString OAIBucketCountPolicyAllowsUnencryptedObjectUploads::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketCountPolicyAllowsUnencryptedObjectUploads::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_unencrypted_object_uploads_isSet) {
        obj.insert(QString("allowsUnencryptedObjectUploads"), ::OpenAPI::toJsonValue(m_allows_unencrypted_object_uploads));
    }
    if (m_denies_unencrypted_object_uploads_isSet) {
        obj.insert(QString("deniesUnencryptedObjectUploads"), ::OpenAPI::toJsonValue(m_denies_unencrypted_object_uploads));
    }
    if (m_unknown_isSet) {
        obj.insert(QString("unknown"), ::OpenAPI::toJsonValue(m_unknown));
    }
    return obj;
}

qint32 OAIBucketCountPolicyAllowsUnencryptedObjectUploads::getAllowsUnencryptedObjectUploads() const {
    return m_allows_unencrypted_object_uploads;
}
void OAIBucketCountPolicyAllowsUnencryptedObjectUploads::setAllowsUnencryptedObjectUploads(const qint32 &allows_unencrypted_object_uploads) {
    m_allows_unencrypted_object_uploads = allows_unencrypted_object_uploads;
    m_allows_unencrypted_object_uploads_isSet = true;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::is_allows_unencrypted_object_uploads_Set() const{
    return m_allows_unencrypted_object_uploads_isSet;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::is_allows_unencrypted_object_uploads_Valid() const{
    return m_allows_unencrypted_object_uploads_isValid;
}

qint32 OAIBucketCountPolicyAllowsUnencryptedObjectUploads::getDeniesUnencryptedObjectUploads() const {
    return m_denies_unencrypted_object_uploads;
}
void OAIBucketCountPolicyAllowsUnencryptedObjectUploads::setDeniesUnencryptedObjectUploads(const qint32 &denies_unencrypted_object_uploads) {
    m_denies_unencrypted_object_uploads = denies_unencrypted_object_uploads;
    m_denies_unencrypted_object_uploads_isSet = true;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::is_denies_unencrypted_object_uploads_Set() const{
    return m_denies_unencrypted_object_uploads_isSet;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::is_denies_unencrypted_object_uploads_Valid() const{
    return m_denies_unencrypted_object_uploads_isValid;
}

qint32 OAIBucketCountPolicyAllowsUnencryptedObjectUploads::getUnknown() const {
    return m_unknown;
}
void OAIBucketCountPolicyAllowsUnencryptedObjectUploads::setUnknown(const qint32 &unknown) {
    m_unknown = unknown;
    m_unknown_isSet = true;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::is_unknown_Set() const{
    return m_unknown_isSet;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::is_unknown_Valid() const{
    return m_unknown_isValid;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_unencrypted_object_uploads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denies_unencrypted_object_uploads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketCountPolicyAllowsUnencryptedObjectUploads::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
