/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketCriteriaAdditionalProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketCriteriaAdditionalProperties::OAIBucketCriteriaAdditionalProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketCriteriaAdditionalProperties::OAIBucketCriteriaAdditionalProperties() {
    this->initializeModel();
}

OAIBucketCriteriaAdditionalProperties::~OAIBucketCriteriaAdditionalProperties() {}

void OAIBucketCriteriaAdditionalProperties::initializeModel() {

    m_eq_isSet = false;
    m_eq_isValid = false;

    m_gt_isSet = false;
    m_gt_isValid = false;

    m_gte_isSet = false;
    m_gte_isValid = false;

    m_lt_isSet = false;
    m_lt_isValid = false;

    m_lte_isSet = false;
    m_lte_isValid = false;

    m_neq_isSet = false;
    m_neq_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIBucketCriteriaAdditionalProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketCriteriaAdditionalProperties::fromJsonObject(QJsonObject json) {

    m_eq_isValid = ::OpenAPI::fromJsonValue(m_eq, json[QString("eq")]);
    m_eq_isSet = !json[QString("eq")].isNull() && m_eq_isValid;

    m_gt_isValid = ::OpenAPI::fromJsonValue(m_gt, json[QString("gt")]);
    m_gt_isSet = !json[QString("gt")].isNull() && m_gt_isValid;

    m_gte_isValid = ::OpenAPI::fromJsonValue(m_gte, json[QString("gte")]);
    m_gte_isSet = !json[QString("gte")].isNull() && m_gte_isValid;

    m_lt_isValid = ::OpenAPI::fromJsonValue(m_lt, json[QString("lt")]);
    m_lt_isSet = !json[QString("lt")].isNull() && m_lt_isValid;

    m_lte_isValid = ::OpenAPI::fromJsonValue(m_lte, json[QString("lte")]);
    m_lte_isSet = !json[QString("lte")].isNull() && m_lte_isValid;

    m_neq_isValid = ::OpenAPI::fromJsonValue(m_neq, json[QString("neq")]);
    m_neq_isSet = !json[QString("neq")].isNull() && m_neq_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIBucketCriteriaAdditionalProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketCriteriaAdditionalProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_eq.isSet()) {
        obj.insert(QString("eq"), ::OpenAPI::toJsonValue(m_eq));
    }
    if (m_gt_isSet) {
        obj.insert(QString("gt"), ::OpenAPI::toJsonValue(m_gt));
    }
    if (m_gte_isSet) {
        obj.insert(QString("gte"), ::OpenAPI::toJsonValue(m_gte));
    }
    if (m_lt_isSet) {
        obj.insert(QString("lt"), ::OpenAPI::toJsonValue(m_lt));
    }
    if (m_lte_isSet) {
        obj.insert(QString("lte"), ::OpenAPI::toJsonValue(m_lte));
    }
    if (m_neq.isSet()) {
        obj.insert(QString("neq"), ::OpenAPI::toJsonValue(m_neq));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QList OAIBucketCriteriaAdditionalProperties::getEq() const {
    return m_eq;
}
void OAIBucketCriteriaAdditionalProperties::setEq(const QList &eq) {
    m_eq = eq;
    m_eq_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_eq_Set() const{
    return m_eq_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_eq_Valid() const{
    return m_eq_isValid;
}

qint32 OAIBucketCriteriaAdditionalProperties::getGt() const {
    return m_gt;
}
void OAIBucketCriteriaAdditionalProperties::setGt(const qint32 &gt) {
    m_gt = gt;
    m_gt_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_gt_Set() const{
    return m_gt_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_gt_Valid() const{
    return m_gt_isValid;
}

qint32 OAIBucketCriteriaAdditionalProperties::getGte() const {
    return m_gte;
}
void OAIBucketCriteriaAdditionalProperties::setGte(const qint32 &gte) {
    m_gte = gte;
    m_gte_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_gte_Set() const{
    return m_gte_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_gte_Valid() const{
    return m_gte_isValid;
}

qint32 OAIBucketCriteriaAdditionalProperties::getLt() const {
    return m_lt;
}
void OAIBucketCriteriaAdditionalProperties::setLt(const qint32 &lt) {
    m_lt = lt;
    m_lt_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_lt_Set() const{
    return m_lt_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_lt_Valid() const{
    return m_lt_isValid;
}

qint32 OAIBucketCriteriaAdditionalProperties::getLte() const {
    return m_lte;
}
void OAIBucketCriteriaAdditionalProperties::setLte(const qint32 &lte) {
    m_lte = lte;
    m_lte_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_lte_Set() const{
    return m_lte_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_lte_Valid() const{
    return m_lte_isValid;
}

QList OAIBucketCriteriaAdditionalProperties::getNeq() const {
    return m_neq;
}
void OAIBucketCriteriaAdditionalProperties::setNeq(const QList &neq) {
    m_neq = neq;
    m_neq_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_neq_Set() const{
    return m_neq_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_neq_Valid() const{
    return m_neq_isValid;
}

QString OAIBucketCriteriaAdditionalProperties::getPrefix() const {
    return m_prefix;
}
void OAIBucketCriteriaAdditionalProperties::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIBucketCriteriaAdditionalProperties::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIBucketCriteriaAdditionalProperties::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIBucketCriteriaAdditionalProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eq.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neq.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketCriteriaAdditionalProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
