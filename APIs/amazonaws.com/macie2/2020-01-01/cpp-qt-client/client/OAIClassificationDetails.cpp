/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassificationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassificationDetails::OAIClassificationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassificationDetails::OAIClassificationDetails() {
    this->initializeModel();
}

OAIClassificationDetails::~OAIClassificationDetails() {}

void OAIClassificationDetails::initializeModel() {

    m_detailed_results_location_isSet = false;
    m_detailed_results_location_isValid = false;

    m_job_arn_isSet = false;
    m_job_arn_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_origin_type_isSet = false;
    m_origin_type_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIClassificationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassificationDetails::fromJsonObject(QJsonObject json) {

    m_detailed_results_location_isValid = ::OpenAPI::fromJsonValue(m_detailed_results_location, json[QString("detailedResultsLocation")]);
    m_detailed_results_location_isSet = !json[QString("detailedResultsLocation")].isNull() && m_detailed_results_location_isValid;

    m_job_arn_isValid = ::OpenAPI::fromJsonValue(m_job_arn, json[QString("jobArn")]);
    m_job_arn_isSet = !json[QString("jobArn")].isNull() && m_job_arn_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_origin_type_isValid = ::OpenAPI::fromJsonValue(m_origin_type, json[QString("originType")]);
    m_origin_type_isSet = !json[QString("originType")].isNull() && m_origin_type_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIClassificationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassificationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_detailed_results_location_isSet) {
        obj.insert(QString("detailedResultsLocation"), ::OpenAPI::toJsonValue(m_detailed_results_location));
    }
    if (m_job_arn_isSet) {
        obj.insert(QString("jobArn"), ::OpenAPI::toJsonValue(m_job_arn));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_origin_type.isSet()) {
        obj.insert(QString("originType"), ::OpenAPI::toJsonValue(m_origin_type));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAIClassificationDetails::getDetailedResultsLocation() const {
    return m_detailed_results_location;
}
void OAIClassificationDetails::setDetailedResultsLocation(const QString &detailed_results_location) {
    m_detailed_results_location = detailed_results_location;
    m_detailed_results_location_isSet = true;
}

bool OAIClassificationDetails::is_detailed_results_location_Set() const{
    return m_detailed_results_location_isSet;
}

bool OAIClassificationDetails::is_detailed_results_location_Valid() const{
    return m_detailed_results_location_isValid;
}

QString OAIClassificationDetails::getJobArn() const {
    return m_job_arn;
}
void OAIClassificationDetails::setJobArn(const QString &job_arn) {
    m_job_arn = job_arn;
    m_job_arn_isSet = true;
}

bool OAIClassificationDetails::is_job_arn_Set() const{
    return m_job_arn_isSet;
}

bool OAIClassificationDetails::is_job_arn_Valid() const{
    return m_job_arn_isValid;
}

QString OAIClassificationDetails::getJobId() const {
    return m_job_id;
}
void OAIClassificationDetails::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIClassificationDetails::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIClassificationDetails::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIOriginType OAIClassificationDetails::getOriginType() const {
    return m_origin_type;
}
void OAIClassificationDetails::setOriginType(const OAIOriginType &origin_type) {
    m_origin_type = origin_type;
    m_origin_type_isSet = true;
}

bool OAIClassificationDetails::is_origin_type_Set() const{
    return m_origin_type_isSet;
}

bool OAIClassificationDetails::is_origin_type_Valid() const{
    return m_origin_type_isValid;
}

OAIClassificationDetails_result OAIClassificationDetails::getResult() const {
    return m_result;
}
void OAIClassificationDetails::setResult(const OAIClassificationDetails_result &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIClassificationDetails::is_result_Set() const{
    return m_result_isSet;
}

bool OAIClassificationDetails::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIClassificationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detailed_results_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassificationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
