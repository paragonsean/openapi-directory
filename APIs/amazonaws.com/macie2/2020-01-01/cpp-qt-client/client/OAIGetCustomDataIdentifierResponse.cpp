/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCustomDataIdentifierResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCustomDataIdentifierResponse::OAIGetCustomDataIdentifierResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCustomDataIdentifierResponse::OAIGetCustomDataIdentifierResponse() {
    this->initializeModel();
}

OAIGetCustomDataIdentifierResponse::~OAIGetCustomDataIdentifierResponse() {}

void OAIGetCustomDataIdentifierResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignore_words_isSet = false;
    m_ignore_words_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_maximum_match_distance_isSet = false;
    m_maximum_match_distance_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_severity_levels_isSet = false;
    m_severity_levels_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetCustomDataIdentifierResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCustomDataIdentifierResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignore_words_isValid = ::OpenAPI::fromJsonValue(m_ignore_words, json[QString("ignoreWords")]);
    m_ignore_words_isSet = !json[QString("ignoreWords")].isNull() && m_ignore_words_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_maximum_match_distance_isValid = ::OpenAPI::fromJsonValue(m_maximum_match_distance, json[QString("maximumMatchDistance")]);
    m_maximum_match_distance_isSet = !json[QString("maximumMatchDistance")].isNull() && m_maximum_match_distance_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_severity_levels_isValid = ::OpenAPI::fromJsonValue(m_severity_levels, json[QString("severityLevels")]);
    m_severity_levels_isSet = !json[QString("severityLevels")].isNull() && m_severity_levels_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetCustomDataIdentifierResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCustomDataIdentifierResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignore_words.isSet()) {
        obj.insert(QString("ignoreWords"), ::OpenAPI::toJsonValue(m_ignore_words));
    }
    if (m_keywords.isSet()) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_maximum_match_distance_isSet) {
        obj.insert(QString("maximumMatchDistance"), ::OpenAPI::toJsonValue(m_maximum_match_distance));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_severity_levels.isSet()) {
        obj.insert(QString("severityLevels"), ::OpenAPI::toJsonValue(m_severity_levels));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetCustomDataIdentifierResponse::getArn() const {
    return m_arn;
}
void OAIGetCustomDataIdentifierResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetCustomDataIdentifierResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetCustomDataIdentifierResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIGetCustomDataIdentifierResponse::getDeleted() const {
    return m_deleted;
}
void OAIGetCustomDataIdentifierResponse::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIGetCustomDataIdentifierResponse::getDescription() const {
    return m_description;
}
void OAIGetCustomDataIdentifierResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetCustomDataIdentifierResponse::getId() const {
    return m_id;
}
void OAIGetCustomDataIdentifierResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIGetCustomDataIdentifierResponse::getIgnoreWords() const {
    return m_ignore_words;
}
void OAIGetCustomDataIdentifierResponse::setIgnoreWords(const QList &ignore_words) {
    m_ignore_words = ignore_words;
    m_ignore_words_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_ignore_words_Set() const{
    return m_ignore_words_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_ignore_words_Valid() const{
    return m_ignore_words_isValid;
}

QList OAIGetCustomDataIdentifierResponse::getKeywords() const {
    return m_keywords;
}
void OAIGetCustomDataIdentifierResponse::setKeywords(const QList &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_keywords_Valid() const{
    return m_keywords_isValid;
}

qint32 OAIGetCustomDataIdentifierResponse::getMaximumMatchDistance() const {
    return m_maximum_match_distance;
}
void OAIGetCustomDataIdentifierResponse::setMaximumMatchDistance(const qint32 &maximum_match_distance) {
    m_maximum_match_distance = maximum_match_distance;
    m_maximum_match_distance_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_maximum_match_distance_Set() const{
    return m_maximum_match_distance_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_maximum_match_distance_Valid() const{
    return m_maximum_match_distance_isValid;
}

QString OAIGetCustomDataIdentifierResponse::getName() const {
    return m_name;
}
void OAIGetCustomDataIdentifierResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetCustomDataIdentifierResponse::getRegex() const {
    return m_regex;
}
void OAIGetCustomDataIdentifierResponse::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_regex_Valid() const{
    return m_regex_isValid;
}

QList OAIGetCustomDataIdentifierResponse::getSeverityLevels() const {
    return m_severity_levels;
}
void OAIGetCustomDataIdentifierResponse::setSeverityLevels(const QList &severity_levels) {
    m_severity_levels = severity_levels;
    m_severity_levels_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_severity_levels_Set() const{
    return m_severity_levels_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_severity_levels_Valid() const{
    return m_severity_levels_isValid;
}

QMap OAIGetCustomDataIdentifierResponse::getTags() const {
    return m_tags;
}
void OAIGetCustomDataIdentifierResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetCustomDataIdentifierResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetCustomDataIdentifierResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetCustomDataIdentifierResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_words.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_match_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_levels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCustomDataIdentifierResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
