/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClassificationJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClassificationJob_request::OAICreateClassificationJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClassificationJob_request::OAICreateClassificationJob_request() {
    this->initializeModel();
}

OAICreateClassificationJob_request::~OAICreateClassificationJob_request() {}

void OAICreateClassificationJob_request::initializeModel() {

    m_allow_list_ids_isSet = false;
    m_allow_list_ids_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_custom_data_identifier_ids_isSet = false;
    m_custom_data_identifier_ids_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_initial_run_isSet = false;
    m_initial_run_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_managed_data_identifier_ids_isSet = false;
    m_managed_data_identifier_ids_isValid = false;

    m_managed_data_identifier_selector_isSet = false;
    m_managed_data_identifier_selector_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_s3_job_definition_isSet = false;
    m_s3_job_definition_isValid = false;

    m_sampling_percentage_isSet = false;
    m_sampling_percentage_isValid = false;

    m_schedule_frequency_isSet = false;
    m_schedule_frequency_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateClassificationJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClassificationJob_request::fromJsonObject(QJsonObject json) {

    m_allow_list_ids_isValid = ::OpenAPI::fromJsonValue(m_allow_list_ids, json[QString("allowListIds")]);
    m_allow_list_ids_isSet = !json[QString("allowListIds")].isNull() && m_allow_list_ids_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_custom_data_identifier_ids_isValid = ::OpenAPI::fromJsonValue(m_custom_data_identifier_ids, json[QString("customDataIdentifierIds")]);
    m_custom_data_identifier_ids_isSet = !json[QString("customDataIdentifierIds")].isNull() && m_custom_data_identifier_ids_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_initial_run_isValid = ::OpenAPI::fromJsonValue(m_initial_run, json[QString("initialRun")]);
    m_initial_run_isSet = !json[QString("initialRun")].isNull() && m_initial_run_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_managed_data_identifier_ids_isValid = ::OpenAPI::fromJsonValue(m_managed_data_identifier_ids, json[QString("managedDataIdentifierIds")]);
    m_managed_data_identifier_ids_isSet = !json[QString("managedDataIdentifierIds")].isNull() && m_managed_data_identifier_ids_isValid;

    m_managed_data_identifier_selector_isValid = ::OpenAPI::fromJsonValue(m_managed_data_identifier_selector, json[QString("managedDataIdentifierSelector")]);
    m_managed_data_identifier_selector_isSet = !json[QString("managedDataIdentifierSelector")].isNull() && m_managed_data_identifier_selector_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_s3_job_definition_isValid = ::OpenAPI::fromJsonValue(m_s3_job_definition, json[QString("s3JobDefinition")]);
    m_s3_job_definition_isSet = !json[QString("s3JobDefinition")].isNull() && m_s3_job_definition_isValid;

    m_sampling_percentage_isValid = ::OpenAPI::fromJsonValue(m_sampling_percentage, json[QString("samplingPercentage")]);
    m_sampling_percentage_isSet = !json[QString("samplingPercentage")].isNull() && m_sampling_percentage_isValid;

    m_schedule_frequency_isValid = ::OpenAPI::fromJsonValue(m_schedule_frequency, json[QString("scheduleFrequency")]);
    m_schedule_frequency_isSet = !json[QString("scheduleFrequency")].isNull() && m_schedule_frequency_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateClassificationJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClassificationJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_list_ids.size() > 0) {
        obj.insert(QString("allowListIds"), ::OpenAPI::toJsonValue(m_allow_list_ids));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_custom_data_identifier_ids.size() > 0) {
        obj.insert(QString("customDataIdentifierIds"), ::OpenAPI::toJsonValue(m_custom_data_identifier_ids));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_initial_run_isSet) {
        obj.insert(QString("initialRun"), ::OpenAPI::toJsonValue(m_initial_run));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_managed_data_identifier_ids.size() > 0) {
        obj.insert(QString("managedDataIdentifierIds"), ::OpenAPI::toJsonValue(m_managed_data_identifier_ids));
    }
    if (m_managed_data_identifier_selector_isSet) {
        obj.insert(QString("managedDataIdentifierSelector"), ::OpenAPI::toJsonValue(m_managed_data_identifier_selector));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_s3_job_definition.isSet()) {
        obj.insert(QString("s3JobDefinition"), ::OpenAPI::toJsonValue(m_s3_job_definition));
    }
    if (m_sampling_percentage_isSet) {
        obj.insert(QString("samplingPercentage"), ::OpenAPI::toJsonValue(m_sampling_percentage));
    }
    if (m_schedule_frequency.isSet()) {
        obj.insert(QString("scheduleFrequency"), ::OpenAPI::toJsonValue(m_schedule_frequency));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAICreateClassificationJob_request::getAllowListIds() const {
    return m_allow_list_ids;
}
void OAICreateClassificationJob_request::setAllowListIds(const QList<QString> &allow_list_ids) {
    m_allow_list_ids = allow_list_ids;
    m_allow_list_ids_isSet = true;
}

bool OAICreateClassificationJob_request::is_allow_list_ids_Set() const{
    return m_allow_list_ids_isSet;
}

bool OAICreateClassificationJob_request::is_allow_list_ids_Valid() const{
    return m_allow_list_ids_isValid;
}

QString OAICreateClassificationJob_request::getClientToken() const {
    return m_client_token;
}
void OAICreateClassificationJob_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateClassificationJob_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateClassificationJob_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAICreateClassificationJob_request::getCustomDataIdentifierIds() const {
    return m_custom_data_identifier_ids;
}
void OAICreateClassificationJob_request::setCustomDataIdentifierIds(const QList<QString> &custom_data_identifier_ids) {
    m_custom_data_identifier_ids = custom_data_identifier_ids;
    m_custom_data_identifier_ids_isSet = true;
}

bool OAICreateClassificationJob_request::is_custom_data_identifier_ids_Set() const{
    return m_custom_data_identifier_ids_isSet;
}

bool OAICreateClassificationJob_request::is_custom_data_identifier_ids_Valid() const{
    return m_custom_data_identifier_ids_isValid;
}

QString OAICreateClassificationJob_request::getDescription() const {
    return m_description;
}
void OAICreateClassificationJob_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateClassificationJob_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateClassificationJob_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateClassificationJob_request::isInitialRun() const {
    return m_initial_run;
}
void OAICreateClassificationJob_request::setInitialRun(const bool &initial_run) {
    m_initial_run = initial_run;
    m_initial_run_isSet = true;
}

bool OAICreateClassificationJob_request::is_initial_run_Set() const{
    return m_initial_run_isSet;
}

bool OAICreateClassificationJob_request::is_initial_run_Valid() const{
    return m_initial_run_isValid;
}

QString OAICreateClassificationJob_request::getJobType() const {
    return m_job_type;
}
void OAICreateClassificationJob_request::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAICreateClassificationJob_request::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAICreateClassificationJob_request::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QList<QString> OAICreateClassificationJob_request::getManagedDataIdentifierIds() const {
    return m_managed_data_identifier_ids;
}
void OAICreateClassificationJob_request::setManagedDataIdentifierIds(const QList<QString> &managed_data_identifier_ids) {
    m_managed_data_identifier_ids = managed_data_identifier_ids;
    m_managed_data_identifier_ids_isSet = true;
}

bool OAICreateClassificationJob_request::is_managed_data_identifier_ids_Set() const{
    return m_managed_data_identifier_ids_isSet;
}

bool OAICreateClassificationJob_request::is_managed_data_identifier_ids_Valid() const{
    return m_managed_data_identifier_ids_isValid;
}

QString OAICreateClassificationJob_request::getManagedDataIdentifierSelector() const {
    return m_managed_data_identifier_selector;
}
void OAICreateClassificationJob_request::setManagedDataIdentifierSelector(const QString &managed_data_identifier_selector) {
    m_managed_data_identifier_selector = managed_data_identifier_selector;
    m_managed_data_identifier_selector_isSet = true;
}

bool OAICreateClassificationJob_request::is_managed_data_identifier_selector_Set() const{
    return m_managed_data_identifier_selector_isSet;
}

bool OAICreateClassificationJob_request::is_managed_data_identifier_selector_Valid() const{
    return m_managed_data_identifier_selector_isValid;
}

QString OAICreateClassificationJob_request::getName() const {
    return m_name;
}
void OAICreateClassificationJob_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateClassificationJob_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateClassificationJob_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateClassificationJob_request_s3JobDefinition OAICreateClassificationJob_request::getS3JobDefinition() const {
    return m_s3_job_definition;
}
void OAICreateClassificationJob_request::setS3JobDefinition(const OAICreateClassificationJob_request_s3JobDefinition &s3_job_definition) {
    m_s3_job_definition = s3_job_definition;
    m_s3_job_definition_isSet = true;
}

bool OAICreateClassificationJob_request::is_s3_job_definition_Set() const{
    return m_s3_job_definition_isSet;
}

bool OAICreateClassificationJob_request::is_s3_job_definition_Valid() const{
    return m_s3_job_definition_isValid;
}

qint32 OAICreateClassificationJob_request::getSamplingPercentage() const {
    return m_sampling_percentage;
}
void OAICreateClassificationJob_request::setSamplingPercentage(const qint32 &sampling_percentage) {
    m_sampling_percentage = sampling_percentage;
    m_sampling_percentage_isSet = true;
}

bool OAICreateClassificationJob_request::is_sampling_percentage_Set() const{
    return m_sampling_percentage_isSet;
}

bool OAICreateClassificationJob_request::is_sampling_percentage_Valid() const{
    return m_sampling_percentage_isValid;
}

OAICreateClassificationJob_request_scheduleFrequency OAICreateClassificationJob_request::getScheduleFrequency() const {
    return m_schedule_frequency;
}
void OAICreateClassificationJob_request::setScheduleFrequency(const OAICreateClassificationJob_request_scheduleFrequency &schedule_frequency) {
    m_schedule_frequency = schedule_frequency;
    m_schedule_frequency_isSet = true;
}

bool OAICreateClassificationJob_request::is_schedule_frequency_Set() const{
    return m_schedule_frequency_isSet;
}

bool OAICreateClassificationJob_request::is_schedule_frequency_Valid() const{
    return m_schedule_frequency_isValid;
}

QMap<QString, QString> OAICreateClassificationJob_request::getTags() const {
    return m_tags;
}
void OAICreateClassificationJob_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateClassificationJob_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateClassificationJob_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateClassificationJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_list_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_identifier_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_data_identifier_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_data_identifier_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_job_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClassificationJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_job_type_isValid && m_name_isValid && m_s3_job_definition_isValid && true;
}

} // namespace OpenAPI
