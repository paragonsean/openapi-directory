/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFindingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFindingsRequest::OAIGetFindingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFindingsRequest::OAIGetFindingsRequest() {
    this->initializeModel();
}

OAIGetFindingsRequest::~OAIGetFindingsRequest() {}

void OAIGetFindingsRequest::initializeModel() {

    m_finding_ids_isSet = false;
    m_finding_ids_isValid = false;

    m_sort_criteria_isSet = false;
    m_sort_criteria_isValid = false;
}

void OAIGetFindingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFindingsRequest::fromJsonObject(QJsonObject json) {

    m_finding_ids_isValid = ::OpenAPI::fromJsonValue(m_finding_ids, json[QString("findingIds")]);
    m_finding_ids_isSet = !json[QString("findingIds")].isNull() && m_finding_ids_isValid;

    m_sort_criteria_isValid = ::OpenAPI::fromJsonValue(m_sort_criteria, json[QString("sortCriteria")]);
    m_sort_criteria_isSet = !json[QString("sortCriteria")].isNull() && m_sort_criteria_isValid;
}

QString OAIGetFindingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFindingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_finding_ids.isSet()) {
        obj.insert(QString("findingIds"), ::OpenAPI::toJsonValue(m_finding_ids));
    }
    if (m_sort_criteria.isSet()) {
        obj.insert(QString("sortCriteria"), ::OpenAPI::toJsonValue(m_sort_criteria));
    }
    return obj;
}

QList OAIGetFindingsRequest::getFindingIds() const {
    return m_finding_ids;
}
void OAIGetFindingsRequest::setFindingIds(const QList &finding_ids) {
    m_finding_ids = finding_ids;
    m_finding_ids_isSet = true;
}

bool OAIGetFindingsRequest::is_finding_ids_Set() const{
    return m_finding_ids_isSet;
}

bool OAIGetFindingsRequest::is_finding_ids_Valid() const{
    return m_finding_ids_isValid;
}

OAIGetFindingsRequest_sortCriteria OAIGetFindingsRequest::getSortCriteria() const {
    return m_sort_criteria;
}
void OAIGetFindingsRequest::setSortCriteria(const OAIGetFindingsRequest_sortCriteria &sort_criteria) {
    m_sort_criteria = sort_criteria;
    m_sort_criteria_isSet = true;
}

bool OAIGetFindingsRequest::is_sort_criteria_Set() const{
    return m_sort_criteria_isSet;
}

bool OAIGetFindingsRequest::is_sort_criteria_Valid() const{
    return m_sort_criteria_isValid;
}

bool OAIGetFindingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finding_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFindingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_finding_ids_isValid && true;
}

} // namespace OpenAPI
