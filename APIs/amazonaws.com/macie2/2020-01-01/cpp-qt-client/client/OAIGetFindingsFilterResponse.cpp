/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFindingsFilterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFindingsFilterResponse::OAIGetFindingsFilterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFindingsFilterResponse::OAIGetFindingsFilterResponse() {
    this->initializeModel();
}

OAIGetFindingsFilterResponse::~OAIGetFindingsFilterResponse() {}

void OAIGetFindingsFilterResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_finding_criteria_isSet = false;
    m_finding_criteria_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetFindingsFilterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFindingsFilterResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_finding_criteria_isValid = ::OpenAPI::fromJsonValue(m_finding_criteria, json[QString("findingCriteria")]);
    m_finding_criteria_isSet = !json[QString("findingCriteria")].isNull() && m_finding_criteria_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetFindingsFilterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFindingsFilterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_finding_criteria.isSet()) {
        obj.insert(QString("findingCriteria"), ::OpenAPI::toJsonValue(m_finding_criteria));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIFindingsFilterAction OAIGetFindingsFilterResponse::getAction() const {
    return m_action;
}
void OAIGetFindingsFilterResponse::setAction(const OAIFindingsFilterAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGetFindingsFilterResponse::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIGetFindingsFilterResponse::getArn() const {
    return m_arn;
}
void OAIGetFindingsFilterResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetFindingsFilterResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetFindingsFilterResponse::getDescription() const {
    return m_description;
}
void OAIGetFindingsFilterResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetFindingsFilterResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIGetFindingsFilterResponse_findingCriteria OAIGetFindingsFilterResponse::getFindingCriteria() const {
    return m_finding_criteria;
}
void OAIGetFindingsFilterResponse::setFindingCriteria(const OAIGetFindingsFilterResponse_findingCriteria &finding_criteria) {
    m_finding_criteria = finding_criteria;
    m_finding_criteria_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_finding_criteria_Set() const{
    return m_finding_criteria_isSet;
}

bool OAIGetFindingsFilterResponse::is_finding_criteria_Valid() const{
    return m_finding_criteria_isValid;
}

QString OAIGetFindingsFilterResponse::getId() const {
    return m_id;
}
void OAIGetFindingsFilterResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetFindingsFilterResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetFindingsFilterResponse::getName() const {
    return m_name;
}
void OAIGetFindingsFilterResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetFindingsFilterResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetFindingsFilterResponse::getPosition() const {
    return m_position;
}
void OAIGetFindingsFilterResponse::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_position_Set() const{
    return m_position_isSet;
}

bool OAIGetFindingsFilterResponse::is_position_Valid() const{
    return m_position_isValid;
}

QMap OAIGetFindingsFilterResponse::getTags() const {
    return m_tags;
}
void OAIGetFindingsFilterResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetFindingsFilterResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetFindingsFilterResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetFindingsFilterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFindingsFilterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
