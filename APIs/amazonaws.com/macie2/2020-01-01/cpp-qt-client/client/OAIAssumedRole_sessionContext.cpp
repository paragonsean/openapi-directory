/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssumedRole_sessionContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssumedRole_sessionContext::OAIAssumedRole_sessionContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssumedRole_sessionContext::OAIAssumedRole_sessionContext() {
    this->initializeModel();
}

OAIAssumedRole_sessionContext::~OAIAssumedRole_sessionContext() {}

void OAIAssumedRole_sessionContext::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_session_issuer_isSet = false;
    m_session_issuer_isValid = false;
}

void OAIAssumedRole_sessionContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssumedRole_sessionContext::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_session_issuer_isValid = ::OpenAPI::fromJsonValue(m_session_issuer, json[QString("sessionIssuer")]);
    m_session_issuer_isSet = !json[QString("sessionIssuer")].isNull() && m_session_issuer_isValid;
}

QString OAIAssumedRole_sessionContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssumedRole_sessionContext::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_session_issuer.isSet()) {
        obj.insert(QString("sessionIssuer"), ::OpenAPI::toJsonValue(m_session_issuer));
    }
    return obj;
}

OAISessionContext_attributes OAIAssumedRole_sessionContext::getAttributes() const {
    return m_attributes;
}
void OAIAssumedRole_sessionContext::setAttributes(const OAISessionContext_attributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAssumedRole_sessionContext::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAssumedRole_sessionContext::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAISessionContext_sessionIssuer OAIAssumedRole_sessionContext::getSessionIssuer() const {
    return m_session_issuer;
}
void OAIAssumedRole_sessionContext::setSessionIssuer(const OAISessionContext_sessionIssuer &session_issuer) {
    m_session_issuer = session_issuer;
    m_session_issuer_isSet = true;
}

bool OAIAssumedRole_sessionContext::is_session_issuer_Set() const{
    return m_session_issuer_isSet;
}

bool OAIAssumedRole_sessionContext::is_session_issuer_Valid() const{
    return m_session_issuer_isValid;
}

bool OAIAssumedRole_sessionContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_issuer.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssumedRole_sessionContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
