/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobDetails::OAIJobDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobDetails::OAIJobDetails() {
    this->initializeModel();
}

OAIJobDetails::~OAIJobDetails() {}

void OAIJobDetails::initializeModel() {

    m_is_defined_in_job_isSet = false;
    m_is_defined_in_job_isValid = false;

    m_is_monitored_by_job_isSet = false;
    m_is_monitored_by_job_isValid = false;

    m_last_job_id_isSet = false;
    m_last_job_id_isValid = false;

    m_last_job_run_time_isSet = false;
    m_last_job_run_time_isValid = false;
}

void OAIJobDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobDetails::fromJsonObject(QJsonObject json) {

    m_is_defined_in_job_isValid = ::OpenAPI::fromJsonValue(m_is_defined_in_job, json[QString("isDefinedInJob")]);
    m_is_defined_in_job_isSet = !json[QString("isDefinedInJob")].isNull() && m_is_defined_in_job_isValid;

    m_is_monitored_by_job_isValid = ::OpenAPI::fromJsonValue(m_is_monitored_by_job, json[QString("isMonitoredByJob")]);
    m_is_monitored_by_job_isSet = !json[QString("isMonitoredByJob")].isNull() && m_is_monitored_by_job_isValid;

    m_last_job_id_isValid = ::OpenAPI::fromJsonValue(m_last_job_id, json[QString("lastJobId")]);
    m_last_job_id_isSet = !json[QString("lastJobId")].isNull() && m_last_job_id_isValid;

    m_last_job_run_time_isValid = ::OpenAPI::fromJsonValue(m_last_job_run_time, json[QString("lastJobRunTime")]);
    m_last_job_run_time_isSet = !json[QString("lastJobRunTime")].isNull() && m_last_job_run_time_isValid;
}

QString OAIJobDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_is_defined_in_job.isSet()) {
        obj.insert(QString("isDefinedInJob"), ::OpenAPI::toJsonValue(m_is_defined_in_job));
    }
    if (m_is_monitored_by_job.isSet()) {
        obj.insert(QString("isMonitoredByJob"), ::OpenAPI::toJsonValue(m_is_monitored_by_job));
    }
    if (m_last_job_id_isSet) {
        obj.insert(QString("lastJobId"), ::OpenAPI::toJsonValue(m_last_job_id));
    }
    if (m_last_job_run_time_isSet) {
        obj.insert(QString("lastJobRunTime"), ::OpenAPI::toJsonValue(m_last_job_run_time));
    }
    return obj;
}

OAIIsDefinedInJob OAIJobDetails::getIsDefinedInJob() const {
    return m_is_defined_in_job;
}
void OAIJobDetails::setIsDefinedInJob(const OAIIsDefinedInJob &is_defined_in_job) {
    m_is_defined_in_job = is_defined_in_job;
    m_is_defined_in_job_isSet = true;
}

bool OAIJobDetails::is_is_defined_in_job_Set() const{
    return m_is_defined_in_job_isSet;
}

bool OAIJobDetails::is_is_defined_in_job_Valid() const{
    return m_is_defined_in_job_isValid;
}

OAIIsMonitoredByJob OAIJobDetails::getIsMonitoredByJob() const {
    return m_is_monitored_by_job;
}
void OAIJobDetails::setIsMonitoredByJob(const OAIIsMonitoredByJob &is_monitored_by_job) {
    m_is_monitored_by_job = is_monitored_by_job;
    m_is_monitored_by_job_isSet = true;
}

bool OAIJobDetails::is_is_monitored_by_job_Set() const{
    return m_is_monitored_by_job_isSet;
}

bool OAIJobDetails::is_is_monitored_by_job_Valid() const{
    return m_is_monitored_by_job_isValid;
}

QString OAIJobDetails::getLastJobId() const {
    return m_last_job_id;
}
void OAIJobDetails::setLastJobId(const QString &last_job_id) {
    m_last_job_id = last_job_id;
    m_last_job_id_isSet = true;
}

bool OAIJobDetails::is_last_job_id_Set() const{
    return m_last_job_id_isSet;
}

bool OAIJobDetails::is_last_job_id_Valid() const{
    return m_last_job_id_isValid;
}

QDateTime OAIJobDetails::getLastJobRunTime() const {
    return m_last_job_run_time;
}
void OAIJobDetails::setLastJobRunTime(const QDateTime &last_job_run_time) {
    m_last_job_run_time = last_job_run_time;
    m_last_job_run_time_isSet = true;
}

bool OAIJobDetails::is_last_job_run_time_Set() const{
    return m_last_job_run_time_isSet;
}

bool OAIJobDetails::is_last_job_run_time_Valid() const{
    return m_last_job_run_time_isValid;
}

bool OAIJobDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_defined_in_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_monitored_by_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_job_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
