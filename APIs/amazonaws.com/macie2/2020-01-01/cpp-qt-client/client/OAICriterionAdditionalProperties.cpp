/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICriterionAdditionalProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICriterionAdditionalProperties::OAICriterionAdditionalProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICriterionAdditionalProperties::OAICriterionAdditionalProperties() {
    this->initializeModel();
}

OAICriterionAdditionalProperties::~OAICriterionAdditionalProperties() {}

void OAICriterionAdditionalProperties::initializeModel() {

    m_eq_isSet = false;
    m_eq_isValid = false;

    m_eq_exact_match_isSet = false;
    m_eq_exact_match_isValid = false;

    m_gt_isSet = false;
    m_gt_isValid = false;

    m_gte_isSet = false;
    m_gte_isValid = false;

    m_lt_isSet = false;
    m_lt_isValid = false;

    m_lte_isSet = false;
    m_lte_isValid = false;

    m_neq_isSet = false;
    m_neq_isValid = false;
}

void OAICriterionAdditionalProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICriterionAdditionalProperties::fromJsonObject(QJsonObject json) {

    m_eq_isValid = ::OpenAPI::fromJsonValue(m_eq, json[QString("eq")]);
    m_eq_isSet = !json[QString("eq")].isNull() && m_eq_isValid;

    m_eq_exact_match_isValid = ::OpenAPI::fromJsonValue(m_eq_exact_match, json[QString("eqExactMatch")]);
    m_eq_exact_match_isSet = !json[QString("eqExactMatch")].isNull() && m_eq_exact_match_isValid;

    m_gt_isValid = ::OpenAPI::fromJsonValue(m_gt, json[QString("gt")]);
    m_gt_isSet = !json[QString("gt")].isNull() && m_gt_isValid;

    m_gte_isValid = ::OpenAPI::fromJsonValue(m_gte, json[QString("gte")]);
    m_gte_isSet = !json[QString("gte")].isNull() && m_gte_isValid;

    m_lt_isValid = ::OpenAPI::fromJsonValue(m_lt, json[QString("lt")]);
    m_lt_isSet = !json[QString("lt")].isNull() && m_lt_isValid;

    m_lte_isValid = ::OpenAPI::fromJsonValue(m_lte, json[QString("lte")]);
    m_lte_isSet = !json[QString("lte")].isNull() && m_lte_isValid;

    m_neq_isValid = ::OpenAPI::fromJsonValue(m_neq, json[QString("neq")]);
    m_neq_isSet = !json[QString("neq")].isNull() && m_neq_isValid;
}

QString OAICriterionAdditionalProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICriterionAdditionalProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_eq.isSet()) {
        obj.insert(QString("eq"), ::OpenAPI::toJsonValue(m_eq));
    }
    if (m_eq_exact_match.isSet()) {
        obj.insert(QString("eqExactMatch"), ::OpenAPI::toJsonValue(m_eq_exact_match));
    }
    if (m_gt_isSet) {
        obj.insert(QString("gt"), ::OpenAPI::toJsonValue(m_gt));
    }
    if (m_gte_isSet) {
        obj.insert(QString("gte"), ::OpenAPI::toJsonValue(m_gte));
    }
    if (m_lt_isSet) {
        obj.insert(QString("lt"), ::OpenAPI::toJsonValue(m_lt));
    }
    if (m_lte_isSet) {
        obj.insert(QString("lte"), ::OpenAPI::toJsonValue(m_lte));
    }
    if (m_neq.isSet()) {
        obj.insert(QString("neq"), ::OpenAPI::toJsonValue(m_neq));
    }
    return obj;
}

QList OAICriterionAdditionalProperties::getEq() const {
    return m_eq;
}
void OAICriterionAdditionalProperties::setEq(const QList &eq) {
    m_eq = eq;
    m_eq_isSet = true;
}

bool OAICriterionAdditionalProperties::is_eq_Set() const{
    return m_eq_isSet;
}

bool OAICriterionAdditionalProperties::is_eq_Valid() const{
    return m_eq_isValid;
}

QList OAICriterionAdditionalProperties::getEqExactMatch() const {
    return m_eq_exact_match;
}
void OAICriterionAdditionalProperties::setEqExactMatch(const QList &eq_exact_match) {
    m_eq_exact_match = eq_exact_match;
    m_eq_exact_match_isSet = true;
}

bool OAICriterionAdditionalProperties::is_eq_exact_match_Set() const{
    return m_eq_exact_match_isSet;
}

bool OAICriterionAdditionalProperties::is_eq_exact_match_Valid() const{
    return m_eq_exact_match_isValid;
}

qint32 OAICriterionAdditionalProperties::getGt() const {
    return m_gt;
}
void OAICriterionAdditionalProperties::setGt(const qint32 &gt) {
    m_gt = gt;
    m_gt_isSet = true;
}

bool OAICriterionAdditionalProperties::is_gt_Set() const{
    return m_gt_isSet;
}

bool OAICriterionAdditionalProperties::is_gt_Valid() const{
    return m_gt_isValid;
}

qint32 OAICriterionAdditionalProperties::getGte() const {
    return m_gte;
}
void OAICriterionAdditionalProperties::setGte(const qint32 &gte) {
    m_gte = gte;
    m_gte_isSet = true;
}

bool OAICriterionAdditionalProperties::is_gte_Set() const{
    return m_gte_isSet;
}

bool OAICriterionAdditionalProperties::is_gte_Valid() const{
    return m_gte_isValid;
}

qint32 OAICriterionAdditionalProperties::getLt() const {
    return m_lt;
}
void OAICriterionAdditionalProperties::setLt(const qint32 &lt) {
    m_lt = lt;
    m_lt_isSet = true;
}

bool OAICriterionAdditionalProperties::is_lt_Set() const{
    return m_lt_isSet;
}

bool OAICriterionAdditionalProperties::is_lt_Valid() const{
    return m_lt_isValid;
}

qint32 OAICriterionAdditionalProperties::getLte() const {
    return m_lte;
}
void OAICriterionAdditionalProperties::setLte(const qint32 &lte) {
    m_lte = lte;
    m_lte_isSet = true;
}

bool OAICriterionAdditionalProperties::is_lte_Set() const{
    return m_lte_isSet;
}

bool OAICriterionAdditionalProperties::is_lte_Valid() const{
    return m_lte_isValid;
}

QList OAICriterionAdditionalProperties::getNeq() const {
    return m_neq;
}
void OAICriterionAdditionalProperties::setNeq(const QList &neq) {
    m_neq = neq;
    m_neq_isSet = true;
}

bool OAICriterionAdditionalProperties::is_neq_Set() const{
    return m_neq_isSet;
}

bool OAICriterionAdditionalProperties::is_neq_Valid() const{
    return m_neq_isValid;
}

bool OAICriterionAdditionalProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eq.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eq_exact_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neq.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICriterionAdditionalProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
