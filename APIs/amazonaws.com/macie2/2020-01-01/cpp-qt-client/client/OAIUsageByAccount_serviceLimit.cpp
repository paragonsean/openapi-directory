/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageByAccount_serviceLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageByAccount_serviceLimit::OAIUsageByAccount_serviceLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageByAccount_serviceLimit::OAIUsageByAccount_serviceLimit() {
    this->initializeModel();
}

OAIUsageByAccount_serviceLimit::~OAIUsageByAccount_serviceLimit() {}

void OAIUsageByAccount_serviceLimit::initializeModel() {

    m_is_service_limited_isSet = false;
    m_is_service_limited_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIUsageByAccount_serviceLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageByAccount_serviceLimit::fromJsonObject(QJsonObject json) {

    m_is_service_limited_isValid = ::OpenAPI::fromJsonValue(m_is_service_limited, json[QString("isServiceLimited")]);
    m_is_service_limited_isSet = !json[QString("isServiceLimited")].isNull() && m_is_service_limited_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIUsageByAccount_serviceLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageByAccount_serviceLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_is_service_limited_isSet) {
        obj.insert(QString("isServiceLimited"), ::OpenAPI::toJsonValue(m_is_service_limited));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIUsageByAccount_serviceLimit::getIsServiceLimited() const {
    return m_is_service_limited;
}
void OAIUsageByAccount_serviceLimit::setIsServiceLimited(const bool &is_service_limited) {
    m_is_service_limited = is_service_limited;
    m_is_service_limited_isSet = true;
}

bool OAIUsageByAccount_serviceLimit::is_is_service_limited_Set() const{
    return m_is_service_limited_isSet;
}

bool OAIUsageByAccount_serviceLimit::is_is_service_limited_Valid() const{
    return m_is_service_limited_isValid;
}

OAIUnit OAIUsageByAccount_serviceLimit::getUnit() const {
    return m_unit;
}
void OAIUsageByAccount_serviceLimit::setUnit(const OAIUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIUsageByAccount_serviceLimit::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIUsageByAccount_serviceLimit::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAIUsageByAccount_serviceLimit::getValue() const {
    return m_value;
}
void OAIUsageByAccount_serviceLimit::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUsageByAccount_serviceLimit::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUsageByAccount_serviceLimit::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIUsageByAccount_serviceLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_service_limited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageByAccount_serviceLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
