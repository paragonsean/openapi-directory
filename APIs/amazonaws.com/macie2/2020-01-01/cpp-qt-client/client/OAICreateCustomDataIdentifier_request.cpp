/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCustomDataIdentifier_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCustomDataIdentifier_request::OAICreateCustomDataIdentifier_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCustomDataIdentifier_request::OAICreateCustomDataIdentifier_request() {
    this->initializeModel();
}

OAICreateCustomDataIdentifier_request::~OAICreateCustomDataIdentifier_request() {}

void OAICreateCustomDataIdentifier_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ignore_words_isSet = false;
    m_ignore_words_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_maximum_match_distance_isSet = false;
    m_maximum_match_distance_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_severity_levels_isSet = false;
    m_severity_levels_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateCustomDataIdentifier_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCustomDataIdentifier_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ignore_words_isValid = ::OpenAPI::fromJsonValue(m_ignore_words, json[QString("ignoreWords")]);
    m_ignore_words_isSet = !json[QString("ignoreWords")].isNull() && m_ignore_words_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_maximum_match_distance_isValid = ::OpenAPI::fromJsonValue(m_maximum_match_distance, json[QString("maximumMatchDistance")]);
    m_maximum_match_distance_isSet = !json[QString("maximumMatchDistance")].isNull() && m_maximum_match_distance_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_severity_levels_isValid = ::OpenAPI::fromJsonValue(m_severity_levels, json[QString("severityLevels")]);
    m_severity_levels_isSet = !json[QString("severityLevels")].isNull() && m_severity_levels_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateCustomDataIdentifier_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCustomDataIdentifier_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ignore_words.size() > 0) {
        obj.insert(QString("ignoreWords"), ::OpenAPI::toJsonValue(m_ignore_words));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_maximum_match_distance_isSet) {
        obj.insert(QString("maximumMatchDistance"), ::OpenAPI::toJsonValue(m_maximum_match_distance));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_severity_levels.size() > 0) {
        obj.insert(QString("severityLevels"), ::OpenAPI::toJsonValue(m_severity_levels));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateCustomDataIdentifier_request::getClientToken() const {
    return m_client_token;
}
void OAICreateCustomDataIdentifier_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateCustomDataIdentifier_request::getDescription() const {
    return m_description;
}
void OAICreateCustomDataIdentifier_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAICreateCustomDataIdentifier_request::getIgnoreWords() const {
    return m_ignore_words;
}
void OAICreateCustomDataIdentifier_request::setIgnoreWords(const QList<QString> &ignore_words) {
    m_ignore_words = ignore_words;
    m_ignore_words_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_ignore_words_Set() const{
    return m_ignore_words_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_ignore_words_Valid() const{
    return m_ignore_words_isValid;
}

QList<QString> OAICreateCustomDataIdentifier_request::getKeywords() const {
    return m_keywords;
}
void OAICreateCustomDataIdentifier_request::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_keywords_Valid() const{
    return m_keywords_isValid;
}

qint32 OAICreateCustomDataIdentifier_request::getMaximumMatchDistance() const {
    return m_maximum_match_distance;
}
void OAICreateCustomDataIdentifier_request::setMaximumMatchDistance(const qint32 &maximum_match_distance) {
    m_maximum_match_distance = maximum_match_distance;
    m_maximum_match_distance_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_maximum_match_distance_Set() const{
    return m_maximum_match_distance_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_maximum_match_distance_Valid() const{
    return m_maximum_match_distance_isValid;
}

QString OAICreateCustomDataIdentifier_request::getName() const {
    return m_name;
}
void OAICreateCustomDataIdentifier_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateCustomDataIdentifier_request::getRegex() const {
    return m_regex;
}
void OAICreateCustomDataIdentifier_request::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_regex_Valid() const{
    return m_regex_isValid;
}

QList<OAISeverityLevel> OAICreateCustomDataIdentifier_request::getSeverityLevels() const {
    return m_severity_levels;
}
void OAICreateCustomDataIdentifier_request::setSeverityLevels(const QList<OAISeverityLevel> &severity_levels) {
    m_severity_levels = severity_levels;
    m_severity_levels_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_severity_levels_Set() const{
    return m_severity_levels_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_severity_levels_Valid() const{
    return m_severity_levels_isValid;
}

QMap<QString, QString> OAICreateCustomDataIdentifier_request::getTags() const {
    return m_tags;
}
void OAICreateCustomDataIdentifier_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCustomDataIdentifier_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCustomDataIdentifier_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateCustomDataIdentifier_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_match_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCustomDataIdentifier_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_regex_isValid && true;
}

} // namespace OpenAPI
