/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateClassificationJobRequestS3JobDefinition;
import org.openapitools.client.model.CreateClassificationJobRequestScheduleFrequency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateClassificationJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateClassificationJobRequest {
  public static final String SERIALIZED_NAME_ALLOW_LIST_IDS = "allowListIds";
  @SerializedName(SERIALIZED_NAME_ALLOW_LIST_IDS)
  private List<String> allowListIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CUSTOM_DATA_IDENTIFIER_IDS = "customDataIdentifierIds";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA_IDENTIFIER_IDS)
  private List<String> customDataIdentifierIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INITIAL_RUN = "initialRun";
  @SerializedName(SERIALIZED_NAME_INITIAL_RUN)
  private Boolean initialRun;

  /**
   * The schedule for running a classification job. Valid values are:
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    ONE_TIME("ONE_TIME"),
    
    SCHEDULED("SCHEDULED");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_MANAGED_DATA_IDENTIFIER_IDS = "managedDataIdentifierIds";
  @SerializedName(SERIALIZED_NAME_MANAGED_DATA_IDENTIFIER_IDS)
  private List<String> managedDataIdentifierIds = new ArrayList<>();

  /**
   * The selection type that determines which managed data identifiers a classification job uses to analyze data. Valid values are:
   */
  @JsonAdapter(ManagedDataIdentifierSelectorEnum.Adapter.class)
  public enum ManagedDataIdentifierSelectorEnum {
    ALL("ALL"),
    
    EXCLUDE("EXCLUDE"),
    
    INCLUDE("INCLUDE"),
    
    NONE("NONE"),
    
    RECOMMENDED("RECOMMENDED");

    private String value;

    ManagedDataIdentifierSelectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedDataIdentifierSelectorEnum fromValue(String value) {
      for (ManagedDataIdentifierSelectorEnum b : ManagedDataIdentifierSelectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedDataIdentifierSelectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedDataIdentifierSelectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedDataIdentifierSelectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedDataIdentifierSelectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedDataIdentifierSelectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_DATA_IDENTIFIER_SELECTOR = "managedDataIdentifierSelector";
  @SerializedName(SERIALIZED_NAME_MANAGED_DATA_IDENTIFIER_SELECTOR)
  private ManagedDataIdentifierSelectorEnum managedDataIdentifierSelector;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_S3_JOB_DEFINITION = "s3JobDefinition";
  @SerializedName(SERIALIZED_NAME_S3_JOB_DEFINITION)
  private CreateClassificationJobRequestS3JobDefinition s3JobDefinition;

  public static final String SERIALIZED_NAME_SAMPLING_PERCENTAGE = "samplingPercentage";
  @SerializedName(SERIALIZED_NAME_SAMPLING_PERCENTAGE)
  private Integer samplingPercentage;

  public static final String SERIALIZED_NAME_SCHEDULE_FREQUENCY = "scheduleFrequency";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_FREQUENCY)
  private CreateClassificationJobRequestScheduleFrequency scheduleFrequency;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateClassificationJobRequest() {
  }

  public CreateClassificationJobRequest allowListIds(List<String> allowListIds) {
    this.allowListIds = allowListIds;
    return this;
  }

  public CreateClassificationJobRequest addAllowListIdsItem(String allowListIdsItem) {
    if (this.allowListIds == null) {
      this.allowListIds = new ArrayList<>();
    }
    this.allowListIds.add(allowListIdsItem);
    return this;
  }

  /**
   * An array of unique identifiers, one for each allow list for the job to use when it analyzes data.
   * @return allowListIds
   */
  @javax.annotation.Nullable
  public List<String> getAllowListIds() {
    return allowListIds;
  }

  public void setAllowListIds(List<String> allowListIds) {
    this.allowListIds = allowListIds;
  }


  public CreateClassificationJobRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive token that you provide to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateClassificationJobRequest customDataIdentifierIds(List<String> customDataIdentifierIds) {
    this.customDataIdentifierIds = customDataIdentifierIds;
    return this;
  }

  public CreateClassificationJobRequest addCustomDataIdentifierIdsItem(String customDataIdentifierIdsItem) {
    if (this.customDataIdentifierIds == null) {
      this.customDataIdentifierIds = new ArrayList<>();
    }
    this.customDataIdentifierIds.add(customDataIdentifierIdsItem);
    return this;
  }

  /**
   * An array of unique identifiers, one for each custom data identifier for the job to use when it analyzes data. To use only managed data identifiers, don&#39;t specify a value for this property and specify a value other than NONE for the managedDataIdentifierSelector property.
   * @return customDataIdentifierIds
   */
  @javax.annotation.Nullable
  public List<String> getCustomDataIdentifierIds() {
    return customDataIdentifierIds;
  }

  public void setCustomDataIdentifierIds(List<String> customDataIdentifierIds) {
    this.customDataIdentifierIds = customDataIdentifierIds;
  }


  public CreateClassificationJobRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A custom description of the job. The description can contain as many as 200 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateClassificationJobRequest initialRun(Boolean initialRun) {
    this.initialRun = initialRun;
    return this;
  }

  /**
   * &lt;p&gt;For a recurring job, specifies whether to analyze all existing, eligible objects immediately after the job is created (true). To analyze only those objects that are created or changed after you create the job and before the job&#39;s first scheduled run, set this value to false.&lt;/p&gt; &lt;p&gt;If you configure the job to run only once, don&#39;t specify a value for this property.&lt;/p&gt;
   * @return initialRun
   */
  @javax.annotation.Nullable
  public Boolean getInitialRun() {
    return initialRun;
  }

  public void setInitialRun(Boolean initialRun) {
    this.initialRun = initialRun;
  }


  public CreateClassificationJobRequest jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * The schedule for running a classification job. Valid values are:
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public CreateClassificationJobRequest managedDataIdentifierIds(List<String> managedDataIdentifierIds) {
    this.managedDataIdentifierIds = managedDataIdentifierIds;
    return this;
  }

  public CreateClassificationJobRequest addManagedDataIdentifierIdsItem(String managedDataIdentifierIdsItem) {
    if (this.managedDataIdentifierIds == null) {
      this.managedDataIdentifierIds = new ArrayList<>();
    }
    this.managedDataIdentifierIds.add(managedDataIdentifierIdsItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of unique identifiers, one for each managed data identifier for the job to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type that you specify for the job (managedDataIdentifierSelector).&lt;/p&gt; &lt;p&gt;To retrieve a list of valid values for this property, use the ListManagedDataIdentifiers operation.&lt;/p&gt;
   * @return managedDataIdentifierIds
   */
  @javax.annotation.Nullable
  public List<String> getManagedDataIdentifierIds() {
    return managedDataIdentifierIds;
  }

  public void setManagedDataIdentifierIds(List<String> managedDataIdentifierIds) {
    this.managedDataIdentifierIds = managedDataIdentifierIds;
  }


  public CreateClassificationJobRequest managedDataIdentifierSelector(ManagedDataIdentifierSelectorEnum managedDataIdentifierSelector) {
    this.managedDataIdentifierSelector = managedDataIdentifierSelector;
    return this;
  }

  /**
   * The selection type that determines which managed data identifiers a classification job uses to analyze data. Valid values are:
   * @return managedDataIdentifierSelector
   */
  @javax.annotation.Nullable
  public ManagedDataIdentifierSelectorEnum getManagedDataIdentifierSelector() {
    return managedDataIdentifierSelector;
  }

  public void setManagedDataIdentifierSelector(ManagedDataIdentifierSelectorEnum managedDataIdentifierSelector) {
    this.managedDataIdentifierSelector = managedDataIdentifierSelector;
  }


  public CreateClassificationJobRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A custom name for the job. The name can contain as many as 500 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateClassificationJobRequest s3JobDefinition(CreateClassificationJobRequestS3JobDefinition s3JobDefinition) {
    this.s3JobDefinition = s3JobDefinition;
    return this;
  }

  /**
   * Get s3JobDefinition
   * @return s3JobDefinition
   */
  @javax.annotation.Nonnull
  public CreateClassificationJobRequestS3JobDefinition getS3JobDefinition() {
    return s3JobDefinition;
  }

  public void setS3JobDefinition(CreateClassificationJobRequestS3JobDefinition s3JobDefinition) {
    this.s3JobDefinition = s3JobDefinition;
  }


  public CreateClassificationJobRequest samplingPercentage(Integer samplingPercentage) {
    this.samplingPercentage = samplingPercentage;
    return this;
  }

  /**
   * The sampling depth, as a percentage, for the job to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
   * @return samplingPercentage
   */
  @javax.annotation.Nullable
  public Integer getSamplingPercentage() {
    return samplingPercentage;
  }

  public void setSamplingPercentage(Integer samplingPercentage) {
    this.samplingPercentage = samplingPercentage;
  }


  public CreateClassificationJobRequest scheduleFrequency(CreateClassificationJobRequestScheduleFrequency scheduleFrequency) {
    this.scheduleFrequency = scheduleFrequency;
    return this;
  }

  /**
   * Get scheduleFrequency
   * @return scheduleFrequency
   */
  @javax.annotation.Nullable
  public CreateClassificationJobRequestScheduleFrequency getScheduleFrequency() {
    return scheduleFrequency;
  }

  public void setScheduleFrequency(CreateClassificationJobRequestScheduleFrequency scheduleFrequency) {
    this.scheduleFrequency = scheduleFrequency;
  }


  public CreateClassificationJobRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateClassificationJobRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClassificationJobRequest createClassificationJobRequest = (CreateClassificationJobRequest) o;
    return Objects.equals(this.allowListIds, createClassificationJobRequest.allowListIds) &&
        Objects.equals(this.clientToken, createClassificationJobRequest.clientToken) &&
        Objects.equals(this.customDataIdentifierIds, createClassificationJobRequest.customDataIdentifierIds) &&
        Objects.equals(this.description, createClassificationJobRequest.description) &&
        Objects.equals(this.initialRun, createClassificationJobRequest.initialRun) &&
        Objects.equals(this.jobType, createClassificationJobRequest.jobType) &&
        Objects.equals(this.managedDataIdentifierIds, createClassificationJobRequest.managedDataIdentifierIds) &&
        Objects.equals(this.managedDataIdentifierSelector, createClassificationJobRequest.managedDataIdentifierSelector) &&
        Objects.equals(this.name, createClassificationJobRequest.name) &&
        Objects.equals(this.s3JobDefinition, createClassificationJobRequest.s3JobDefinition) &&
        Objects.equals(this.samplingPercentage, createClassificationJobRequest.samplingPercentage) &&
        Objects.equals(this.scheduleFrequency, createClassificationJobRequest.scheduleFrequency) &&
        Objects.equals(this.tags, createClassificationJobRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowListIds, clientToken, customDataIdentifierIds, description, initialRun, jobType, managedDataIdentifierIds, managedDataIdentifierSelector, name, s3JobDefinition, samplingPercentage, scheduleFrequency, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClassificationJobRequest {\n");
    sb.append("    allowListIds: ").append(toIndentedString(allowListIds)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    customDataIdentifierIds: ").append(toIndentedString(customDataIdentifierIds)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    initialRun: ").append(toIndentedString(initialRun)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    managedDataIdentifierIds: ").append(toIndentedString(managedDataIdentifierIds)).append("\n");
    sb.append("    managedDataIdentifierSelector: ").append(toIndentedString(managedDataIdentifierSelector)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    s3JobDefinition: ").append(toIndentedString(s3JobDefinition)).append("\n");
    sb.append("    samplingPercentage: ").append(toIndentedString(samplingPercentage)).append("\n");
    sb.append("    scheduleFrequency: ").append(toIndentedString(scheduleFrequency)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowListIds");
    openapiFields.add("clientToken");
    openapiFields.add("customDataIdentifierIds");
    openapiFields.add("description");
    openapiFields.add("initialRun");
    openapiFields.add("jobType");
    openapiFields.add("managedDataIdentifierIds");
    openapiFields.add("managedDataIdentifierSelector");
    openapiFields.add("name");
    openapiFields.add("s3JobDefinition");
    openapiFields.add("samplingPercentage");
    openapiFields.add("scheduleFrequency");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientToken");
    openapiRequiredFields.add("jobType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("s3JobDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateClassificationJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClassificationJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClassificationJobRequest is not found in the empty JSON string", CreateClassificationJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateClassificationJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClassificationJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClassificationJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowListIds") != null && !jsonObj.get("allowListIds").isJsonNull() && !jsonObj.get("allowListIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowListIds` to be an array in the JSON string but got `%s`", jsonObj.get("allowListIds").toString()));
      }
      if (!jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customDataIdentifierIds") != null && !jsonObj.get("customDataIdentifierIds").isJsonNull() && !jsonObj.get("customDataIdentifierIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customDataIdentifierIds` to be an array in the JSON string but got `%s`", jsonObj.get("customDataIdentifierIds").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      // validate the required field `jobType`
      JobTypeEnum.validateJsonElement(jsonObj.get("jobType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("managedDataIdentifierIds") != null && !jsonObj.get("managedDataIdentifierIds").isJsonNull() && !jsonObj.get("managedDataIdentifierIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedDataIdentifierIds` to be an array in the JSON string but got `%s`", jsonObj.get("managedDataIdentifierIds").toString()));
      }
      if ((jsonObj.get("managedDataIdentifierSelector") != null && !jsonObj.get("managedDataIdentifierSelector").isJsonNull()) && !jsonObj.get("managedDataIdentifierSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedDataIdentifierSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedDataIdentifierSelector").toString()));
      }
      // validate the optional field `managedDataIdentifierSelector`
      if (jsonObj.get("managedDataIdentifierSelector") != null && !jsonObj.get("managedDataIdentifierSelector").isJsonNull()) {
        ManagedDataIdentifierSelectorEnum.validateJsonElement(jsonObj.get("managedDataIdentifierSelector"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `s3JobDefinition`
      CreateClassificationJobRequestS3JobDefinition.validateJsonElement(jsonObj.get("s3JobDefinition"));
      // validate the optional field `scheduleFrequency`
      if (jsonObj.get("scheduleFrequency") != null && !jsonObj.get("scheduleFrequency").isJsonNull()) {
        CreateClassificationJobRequestScheduleFrequency.validateJsonElement(jsonObj.get("scheduleFrequency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClassificationJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClassificationJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClassificationJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClassificationJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClassificationJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateClassificationJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClassificationJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateClassificationJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateClassificationJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateClassificationJobRequest
   */
  public static CreateClassificationJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClassificationJobRequest.class);
  }

  /**
   * Convert an instance of CreateClassificationJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

