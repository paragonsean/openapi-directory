/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IpAddressDetailsIpCity;
import org.openapitools.client.model.IpAddressDetailsIpCountry;
import org.openapitools.client.model.IpAddressDetailsIpGeoLocation;
import org.openapitools.client.model.IpAddressDetailsIpOwner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FindingActorIpAddressDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingActorIpAddressDetails {
  public static final String SERIALIZED_NAME_IP_ADDRESS_V4 = "ipAddressV4";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_V4)
  private String ipAddressV4;

  public static final String SERIALIZED_NAME_IP_CITY = "ipCity";
  @SerializedName(SERIALIZED_NAME_IP_CITY)
  private IpAddressDetailsIpCity ipCity;

  public static final String SERIALIZED_NAME_IP_COUNTRY = "ipCountry";
  @SerializedName(SERIALIZED_NAME_IP_COUNTRY)
  private IpAddressDetailsIpCountry ipCountry;

  public static final String SERIALIZED_NAME_IP_GEO_LOCATION = "ipGeoLocation";
  @SerializedName(SERIALIZED_NAME_IP_GEO_LOCATION)
  private IpAddressDetailsIpGeoLocation ipGeoLocation;

  public static final String SERIALIZED_NAME_IP_OWNER = "ipOwner";
  @SerializedName(SERIALIZED_NAME_IP_OWNER)
  private IpAddressDetailsIpOwner ipOwner;

  public FindingActorIpAddressDetails() {
  }

  public FindingActorIpAddressDetails ipAddressV4(String ipAddressV4) {
    this.ipAddressV4 = ipAddressV4;
    return this;
  }

  /**
   * Get ipAddressV4
   * @return ipAddressV4
   */
  @javax.annotation.Nullable
  public String getIpAddressV4() {
    return ipAddressV4;
  }

  public void setIpAddressV4(String ipAddressV4) {
    this.ipAddressV4 = ipAddressV4;
  }


  public FindingActorIpAddressDetails ipCity(IpAddressDetailsIpCity ipCity) {
    this.ipCity = ipCity;
    return this;
  }

  /**
   * Get ipCity
   * @return ipCity
   */
  @javax.annotation.Nullable
  public IpAddressDetailsIpCity getIpCity() {
    return ipCity;
  }

  public void setIpCity(IpAddressDetailsIpCity ipCity) {
    this.ipCity = ipCity;
  }


  public FindingActorIpAddressDetails ipCountry(IpAddressDetailsIpCountry ipCountry) {
    this.ipCountry = ipCountry;
    return this;
  }

  /**
   * Get ipCountry
   * @return ipCountry
   */
  @javax.annotation.Nullable
  public IpAddressDetailsIpCountry getIpCountry() {
    return ipCountry;
  }

  public void setIpCountry(IpAddressDetailsIpCountry ipCountry) {
    this.ipCountry = ipCountry;
  }


  public FindingActorIpAddressDetails ipGeoLocation(IpAddressDetailsIpGeoLocation ipGeoLocation) {
    this.ipGeoLocation = ipGeoLocation;
    return this;
  }

  /**
   * Get ipGeoLocation
   * @return ipGeoLocation
   */
  @javax.annotation.Nullable
  public IpAddressDetailsIpGeoLocation getIpGeoLocation() {
    return ipGeoLocation;
  }

  public void setIpGeoLocation(IpAddressDetailsIpGeoLocation ipGeoLocation) {
    this.ipGeoLocation = ipGeoLocation;
  }


  public FindingActorIpAddressDetails ipOwner(IpAddressDetailsIpOwner ipOwner) {
    this.ipOwner = ipOwner;
    return this;
  }

  /**
   * Get ipOwner
   * @return ipOwner
   */
  @javax.annotation.Nullable
  public IpAddressDetailsIpOwner getIpOwner() {
    return ipOwner;
  }

  public void setIpOwner(IpAddressDetailsIpOwner ipOwner) {
    this.ipOwner = ipOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingActorIpAddressDetails findingActorIpAddressDetails = (FindingActorIpAddressDetails) o;
    return Objects.equals(this.ipAddressV4, findingActorIpAddressDetails.ipAddressV4) &&
        Objects.equals(this.ipCity, findingActorIpAddressDetails.ipCity) &&
        Objects.equals(this.ipCountry, findingActorIpAddressDetails.ipCountry) &&
        Objects.equals(this.ipGeoLocation, findingActorIpAddressDetails.ipGeoLocation) &&
        Objects.equals(this.ipOwner, findingActorIpAddressDetails.ipOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddressV4, ipCity, ipCountry, ipGeoLocation, ipOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingActorIpAddressDetails {\n");
    sb.append("    ipAddressV4: ").append(toIndentedString(ipAddressV4)).append("\n");
    sb.append("    ipCity: ").append(toIndentedString(ipCity)).append("\n");
    sb.append("    ipCountry: ").append(toIndentedString(ipCountry)).append("\n");
    sb.append("    ipGeoLocation: ").append(toIndentedString(ipGeoLocation)).append("\n");
    sb.append("    ipOwner: ").append(toIndentedString(ipOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipAddressV4");
    openapiFields.add("ipCity");
    openapiFields.add("ipCountry");
    openapiFields.add("ipGeoLocation");
    openapiFields.add("ipOwner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingActorIpAddressDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingActorIpAddressDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingActorIpAddressDetails is not found in the empty JSON string", FindingActorIpAddressDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingActorIpAddressDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingActorIpAddressDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ipAddressV4`
      if (jsonObj.get("ipAddressV4") != null && !jsonObj.get("ipAddressV4").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ipAddressV4"));
      }
      // validate the optional field `ipCity`
      if (jsonObj.get("ipCity") != null && !jsonObj.get("ipCity").isJsonNull()) {
        IpAddressDetailsIpCity.validateJsonElement(jsonObj.get("ipCity"));
      }
      // validate the optional field `ipCountry`
      if (jsonObj.get("ipCountry") != null && !jsonObj.get("ipCountry").isJsonNull()) {
        IpAddressDetailsIpCountry.validateJsonElement(jsonObj.get("ipCountry"));
      }
      // validate the optional field `ipGeoLocation`
      if (jsonObj.get("ipGeoLocation") != null && !jsonObj.get("ipGeoLocation").isJsonNull()) {
        IpAddressDetailsIpGeoLocation.validateJsonElement(jsonObj.get("ipGeoLocation"));
      }
      // validate the optional field `ipOwner`
      if (jsonObj.get("ipOwner") != null && !jsonObj.get("ipOwner").isJsonNull()) {
        IpAddressDetailsIpOwner.validateJsonElement(jsonObj.get("ipOwner"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingActorIpAddressDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingActorIpAddressDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingActorIpAddressDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingActorIpAddressDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingActorIpAddressDetails>() {
           @Override
           public void write(JsonWriter out, FindingActorIpAddressDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingActorIpAddressDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingActorIpAddressDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingActorIpAddressDetails
   * @throws IOException if the JSON string is invalid with respect to FindingActorIpAddressDetails
   */
  public static FindingActorIpAddressDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingActorIpAddressDetails.class);
  }

  /**
   * Convert an instance of FindingActorIpAddressDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

