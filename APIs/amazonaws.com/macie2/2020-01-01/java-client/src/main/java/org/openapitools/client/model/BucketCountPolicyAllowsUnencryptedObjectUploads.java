/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the number of S3 buckets whose bucket policies do or don&#39;t require server-side encryption of objects when objects are added to the buckets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketCountPolicyAllowsUnencryptedObjectUploads {
  public static final String SERIALIZED_NAME_ALLOWS_UNENCRYPTED_OBJECT_UPLOADS = "allowsUnencryptedObjectUploads";
  @SerializedName(SERIALIZED_NAME_ALLOWS_UNENCRYPTED_OBJECT_UPLOADS)
  private Integer allowsUnencryptedObjectUploads;

  public static final String SERIALIZED_NAME_DENIES_UNENCRYPTED_OBJECT_UPLOADS = "deniesUnencryptedObjectUploads";
  @SerializedName(SERIALIZED_NAME_DENIES_UNENCRYPTED_OBJECT_UPLOADS)
  private Integer deniesUnencryptedObjectUploads;

  public static final String SERIALIZED_NAME_UNKNOWN = "unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private Integer unknown;

  public BucketCountPolicyAllowsUnencryptedObjectUploads() {
  }

  public BucketCountPolicyAllowsUnencryptedObjectUploads allowsUnencryptedObjectUploads(Integer allowsUnencryptedObjectUploads) {
    this.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads;
    return this;
  }

  /**
   * Get allowsUnencryptedObjectUploads
   * @return allowsUnencryptedObjectUploads
   */
  @javax.annotation.Nullable
  public Integer getAllowsUnencryptedObjectUploads() {
    return allowsUnencryptedObjectUploads;
  }

  public void setAllowsUnencryptedObjectUploads(Integer allowsUnencryptedObjectUploads) {
    this.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads;
  }


  public BucketCountPolicyAllowsUnencryptedObjectUploads deniesUnencryptedObjectUploads(Integer deniesUnencryptedObjectUploads) {
    this.deniesUnencryptedObjectUploads = deniesUnencryptedObjectUploads;
    return this;
  }

  /**
   * Get deniesUnencryptedObjectUploads
   * @return deniesUnencryptedObjectUploads
   */
  @javax.annotation.Nullable
  public Integer getDeniesUnencryptedObjectUploads() {
    return deniesUnencryptedObjectUploads;
  }

  public void setDeniesUnencryptedObjectUploads(Integer deniesUnencryptedObjectUploads) {
    this.deniesUnencryptedObjectUploads = deniesUnencryptedObjectUploads;
  }


  public BucketCountPolicyAllowsUnencryptedObjectUploads unknown(Integer unknown) {
    this.unknown = unknown;
    return this;
  }

  /**
   * Get unknown
   * @return unknown
   */
  @javax.annotation.Nullable
  public Integer getUnknown() {
    return unknown;
  }

  public void setUnknown(Integer unknown) {
    this.unknown = unknown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketCountPolicyAllowsUnencryptedObjectUploads bucketCountPolicyAllowsUnencryptedObjectUploads = (BucketCountPolicyAllowsUnencryptedObjectUploads) o;
    return Objects.equals(this.allowsUnencryptedObjectUploads, bucketCountPolicyAllowsUnencryptedObjectUploads.allowsUnencryptedObjectUploads) &&
        Objects.equals(this.deniesUnencryptedObjectUploads, bucketCountPolicyAllowsUnencryptedObjectUploads.deniesUnencryptedObjectUploads) &&
        Objects.equals(this.unknown, bucketCountPolicyAllowsUnencryptedObjectUploads.unknown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsUnencryptedObjectUploads, deniesUnencryptedObjectUploads, unknown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketCountPolicyAllowsUnencryptedObjectUploads {\n");
    sb.append("    allowsUnencryptedObjectUploads: ").append(toIndentedString(allowsUnencryptedObjectUploads)).append("\n");
    sb.append("    deniesUnencryptedObjectUploads: ").append(toIndentedString(deniesUnencryptedObjectUploads)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowsUnencryptedObjectUploads");
    openapiFields.add("deniesUnencryptedObjectUploads");
    openapiFields.add("unknown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketCountPolicyAllowsUnencryptedObjectUploads
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketCountPolicyAllowsUnencryptedObjectUploads.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketCountPolicyAllowsUnencryptedObjectUploads is not found in the empty JSON string", BucketCountPolicyAllowsUnencryptedObjectUploads.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketCountPolicyAllowsUnencryptedObjectUploads.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketCountPolicyAllowsUnencryptedObjectUploads` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowsUnencryptedObjectUploads`
      if (jsonObj.get("allowsUnencryptedObjectUploads") != null && !jsonObj.get("allowsUnencryptedObjectUploads").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("allowsUnencryptedObjectUploads"));
      }
      // validate the optional field `deniesUnencryptedObjectUploads`
      if (jsonObj.get("deniesUnencryptedObjectUploads") != null && !jsonObj.get("deniesUnencryptedObjectUploads").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("deniesUnencryptedObjectUploads"));
      }
      // validate the optional field `unknown`
      if (jsonObj.get("unknown") != null && !jsonObj.get("unknown").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("unknown"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketCountPolicyAllowsUnencryptedObjectUploads.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketCountPolicyAllowsUnencryptedObjectUploads' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketCountPolicyAllowsUnencryptedObjectUploads> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketCountPolicyAllowsUnencryptedObjectUploads.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketCountPolicyAllowsUnencryptedObjectUploads>() {
           @Override
           public void write(JsonWriter out, BucketCountPolicyAllowsUnencryptedObjectUploads value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketCountPolicyAllowsUnencryptedObjectUploads read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketCountPolicyAllowsUnencryptedObjectUploads given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketCountPolicyAllowsUnencryptedObjectUploads
   * @throws IOException if the JSON string is invalid with respect to BucketCountPolicyAllowsUnencryptedObjectUploads
   */
  public static BucketCountPolicyAllowsUnencryptedObjectUploads fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketCountPolicyAllowsUnencryptedObjectUploads.class);
  }

  /**
   * Convert an instance of BucketCountPolicyAllowsUnencryptedObjectUploads to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

