/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestCustomDataIdentifierRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCustomDataIdentifierRequest {
  public static final String SERIALIZED_NAME_IGNORE_WORDS = "ignoreWords";
  @SerializedName(SERIALIZED_NAME_IGNORE_WORDS)
  private List<String> ignoreWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAXIMUM_MATCH_DISTANCE = "maximumMatchDistance";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_MATCH_DISTANCE)
  private Integer maximumMatchDistance;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private String regex;

  public static final String SERIALIZED_NAME_SAMPLE_TEXT = "sampleText";
  @SerializedName(SERIALIZED_NAME_SAMPLE_TEXT)
  private String sampleText;

  public TestCustomDataIdentifierRequest() {
  }

  public TestCustomDataIdentifierRequest ignoreWords(List<String> ignoreWords) {
    this.ignoreWords = ignoreWords;
    return this;
  }

  public TestCustomDataIdentifierRequest addIgnoreWordsItem(String ignoreWordsItem) {
    if (this.ignoreWords == null) {
      this.ignoreWords = new ArrayList<>();
    }
    this.ignoreWords.add(ignoreWordsItem);
    return this;
  }

  /**
   * An array that lists specific character sequences (&lt;i&gt;ignore words&lt;/i&gt;) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.
   * @return ignoreWords
   */
  @javax.annotation.Nullable
  public List<String> getIgnoreWords() {
    return ignoreWords;
  }

  public void setIgnoreWords(List<String> ignoreWords) {
    this.ignoreWords = ignoreWords;
  }


  public TestCustomDataIdentifierRequest keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public TestCustomDataIdentifierRequest addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * An array that lists specific character sequences (&lt;i&gt;keywords&lt;/i&gt;), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren&#39;t case sensitive.
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public TestCustomDataIdentifierRequest maximumMatchDistance(Integer maximumMatchDistance) {
    this.maximumMatchDistance = maximumMatchDistance;
    return this;
  }

  /**
   * The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.
   * @return maximumMatchDistance
   */
  @javax.annotation.Nullable
  public Integer getMaximumMatchDistance() {
    return maximumMatchDistance;
  }

  public void setMaximumMatchDistance(Integer maximumMatchDistance) {
    this.maximumMatchDistance = maximumMatchDistance;
  }


  public TestCustomDataIdentifierRequest regex(String regex) {
    this.regex = regex;
    return this;
  }

  /**
   * The regular expression (&lt;i&gt;regex&lt;/i&gt;) that defines the pattern to match. The expression can contain as many as 512 characters.
   * @return regex
   */
  @javax.annotation.Nonnull
  public String getRegex() {
    return regex;
  }

  public void setRegex(String regex) {
    this.regex = regex;
  }


  public TestCustomDataIdentifierRequest sampleText(String sampleText) {
    this.sampleText = sampleText;
    return this;
  }

  /**
   * The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.
   * @return sampleText
   */
  @javax.annotation.Nonnull
  public String getSampleText() {
    return sampleText;
  }

  public void setSampleText(String sampleText) {
    this.sampleText = sampleText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCustomDataIdentifierRequest testCustomDataIdentifierRequest = (TestCustomDataIdentifierRequest) o;
    return Objects.equals(this.ignoreWords, testCustomDataIdentifierRequest.ignoreWords) &&
        Objects.equals(this.keywords, testCustomDataIdentifierRequest.keywords) &&
        Objects.equals(this.maximumMatchDistance, testCustomDataIdentifierRequest.maximumMatchDistance) &&
        Objects.equals(this.regex, testCustomDataIdentifierRequest.regex) &&
        Objects.equals(this.sampleText, testCustomDataIdentifierRequest.sampleText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreWords, keywords, maximumMatchDistance, regex, sampleText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCustomDataIdentifierRequest {\n");
    sb.append("    ignoreWords: ").append(toIndentedString(ignoreWords)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    maximumMatchDistance: ").append(toIndentedString(maximumMatchDistance)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    sampleText: ").append(toIndentedString(sampleText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreWords");
    openapiFields.add("keywords");
    openapiFields.add("maximumMatchDistance");
    openapiFields.add("regex");
    openapiFields.add("sampleText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("regex");
    openapiRequiredFields.add("sampleText");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCustomDataIdentifierRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCustomDataIdentifierRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCustomDataIdentifierRequest is not found in the empty JSON string", TestCustomDataIdentifierRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCustomDataIdentifierRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCustomDataIdentifierRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCustomDataIdentifierRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoreWords") != null && !jsonObj.get("ignoreWords").isJsonNull() && !jsonObj.get("ignoreWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreWords` to be an array in the JSON string but got `%s`", jsonObj.get("ignoreWords").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if (!jsonObj.get("regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regex").toString()));
      }
      if (!jsonObj.get("sampleText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCustomDataIdentifierRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCustomDataIdentifierRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCustomDataIdentifierRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCustomDataIdentifierRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCustomDataIdentifierRequest>() {
           @Override
           public void write(JsonWriter out, TestCustomDataIdentifierRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCustomDataIdentifierRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCustomDataIdentifierRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCustomDataIdentifierRequest
   * @throws IOException if the JSON string is invalid with respect to TestCustomDataIdentifierRequest
   */
  public static TestCustomDataIdentifierRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCustomDataIdentifierRequest.class);
  }

  /**
   * Convert an instance of TestCustomDataIdentifierRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

