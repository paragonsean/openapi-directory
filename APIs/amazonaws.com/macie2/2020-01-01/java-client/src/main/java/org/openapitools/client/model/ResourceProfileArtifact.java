/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about an S3 object that Amazon Macie selected for analysis while performing automated sensitive data discovery for an S3 bucket, and the status and results of the analysis. This information is available only if automated sensitive data discovery is currently enabled for your account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceProfileArtifact {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CLASSIFICATION_RESULT_STATUS = "classificationResultStatus";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_RESULT_STATUS)
  private String classificationResultStatus;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private Boolean sensitive;

  public ResourceProfileArtifact() {
  }

  public ResourceProfileArtifact arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ResourceProfileArtifact classificationResultStatus(String classificationResultStatus) {
    this.classificationResultStatus = classificationResultStatus;
    return this;
  }

  /**
   * Get classificationResultStatus
   * @return classificationResultStatus
   */
  @javax.annotation.Nonnull
  public String getClassificationResultStatus() {
    return classificationResultStatus;
  }

  public void setClassificationResultStatus(String classificationResultStatus) {
    this.classificationResultStatus = classificationResultStatus;
  }


  public ResourceProfileArtifact sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

  /**
   * Get sensitive
   * @return sensitive
   */
  @javax.annotation.Nullable
  public Boolean getSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceProfileArtifact resourceProfileArtifact = (ResourceProfileArtifact) o;
    return Objects.equals(this.arn, resourceProfileArtifact.arn) &&
        Objects.equals(this.classificationResultStatus, resourceProfileArtifact.classificationResultStatus) &&
        Objects.equals(this.sensitive, resourceProfileArtifact.sensitive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, classificationResultStatus, sensitive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceProfileArtifact {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    classificationResultStatus: ").append(toIndentedString(classificationResultStatus)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("classificationResultStatus");
    openapiFields.add("sensitive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("classificationResultStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceProfileArtifact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceProfileArtifact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceProfileArtifact is not found in the empty JSON string", ResourceProfileArtifact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceProfileArtifact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceProfileArtifact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceProfileArtifact.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `classificationResultStatus`
      String.validateJsonElement(jsonObj.get("classificationResultStatus"));
      // validate the optional field `sensitive`
      if (jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("sensitive"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceProfileArtifact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceProfileArtifact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceProfileArtifact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceProfileArtifact.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceProfileArtifact>() {
           @Override
           public void write(JsonWriter out, ResourceProfileArtifact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceProfileArtifact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceProfileArtifact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceProfileArtifact
   * @throws IOException if the JSON string is invalid with respect to ResourceProfileArtifact
   */
  public static ResourceProfileArtifact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceProfileArtifact.class);
  }

  /**
   * Convert an instance of ResourceProfileArtifact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

