/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the registered owner of an IP address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpOwner {
  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private String asn;

  public static final String SERIALIZED_NAME_ASN_ORG = "asnOrg";
  @SerializedName(SERIALIZED_NAME_ASN_ORG)
  private String asnOrg;

  public static final String SERIALIZED_NAME_ISP = "isp";
  @SerializedName(SERIALIZED_NAME_ISP)
  private String isp;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private String org;

  public IpOwner() {
  }

  public IpOwner asn(String asn) {
    this.asn = asn;
    return this;
  }

  /**
   * Get asn
   * @return asn
   */
  @javax.annotation.Nullable
  public String getAsn() {
    return asn;
  }

  public void setAsn(String asn) {
    this.asn = asn;
  }


  public IpOwner asnOrg(String asnOrg) {
    this.asnOrg = asnOrg;
    return this;
  }

  /**
   * Get asnOrg
   * @return asnOrg
   */
  @javax.annotation.Nullable
  public String getAsnOrg() {
    return asnOrg;
  }

  public void setAsnOrg(String asnOrg) {
    this.asnOrg = asnOrg;
  }


  public IpOwner isp(String isp) {
    this.isp = isp;
    return this;
  }

  /**
   * Get isp
   * @return isp
   */
  @javax.annotation.Nullable
  public String getIsp() {
    return isp;
  }

  public void setIsp(String isp) {
    this.isp = isp;
  }


  public IpOwner org(String org) {
    this.org = org;
    return this;
  }

  /**
   * Get org
   * @return org
   */
  @javax.annotation.Nullable
  public String getOrg() {
    return org;
  }

  public void setOrg(String org) {
    this.org = org;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpOwner ipOwner = (IpOwner) o;
    return Objects.equals(this.asn, ipOwner.asn) &&
        Objects.equals(this.asnOrg, ipOwner.asnOrg) &&
        Objects.equals(this.isp, ipOwner.isp) &&
        Objects.equals(this.org, ipOwner.org);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn, asnOrg, isp, org);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpOwner {\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    asnOrg: ").append(toIndentedString(asnOrg)).append("\n");
    sb.append("    isp: ").append(toIndentedString(isp)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn");
    openapiFields.add("asnOrg");
    openapiFields.add("isp");
    openapiFields.add("org");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpOwner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpOwner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpOwner is not found in the empty JSON string", IpOwner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpOwner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpOwner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `asn`
      if (jsonObj.get("asn") != null && !jsonObj.get("asn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("asn"));
      }
      // validate the optional field `asnOrg`
      if (jsonObj.get("asnOrg") != null && !jsonObj.get("asnOrg").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("asnOrg"));
      }
      // validate the optional field `isp`
      if (jsonObj.get("isp") != null && !jsonObj.get("isp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("isp"));
      }
      // validate the optional field `org`
      if (jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("org"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpOwner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpOwner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpOwner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpOwner.class));

       return (TypeAdapter<T>) new TypeAdapter<IpOwner>() {
           @Override
           public void write(JsonWriter out, IpOwner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpOwner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpOwner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpOwner
   * @throws IOException if the JSON string is invalid with respect to IpOwner
   */
  public static IpOwner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpOwner.class);
  }

  /**
   * Convert an instance of IpOwner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

