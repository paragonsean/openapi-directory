/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassificationResultCustomDataIdentifiers;
import org.openapitools.client.model.ClassificationResultStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the details of a sensitive data finding, including the types, number of occurrences, and locations of the sensitive data that was detected.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClassificationResult {
  public static final String SERIALIZED_NAME_ADDITIONAL_OCCURRENCES = "additionalOccurrences";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OCCURRENCES)
  private Boolean additionalOccurrences;

  public static final String SERIALIZED_NAME_CUSTOM_DATA_IDENTIFIERS = "customDataIdentifiers";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA_IDENTIFIERS)
  private ClassificationResultCustomDataIdentifiers customDataIdentifiers;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_SENSITIVE_DATA = "sensitiveData";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_DATA)
  private List sensitiveData;

  public static final String SERIALIZED_NAME_SIZE_CLASSIFIED = "sizeClassified";
  @SerializedName(SERIALIZED_NAME_SIZE_CLASSIFIED)
  private Integer sizeClassified;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ClassificationResultStatus status;

  public ClassificationResult() {
  }

  public ClassificationResult additionalOccurrences(Boolean additionalOccurrences) {
    this.additionalOccurrences = additionalOccurrences;
    return this;
  }

  /**
   * Get additionalOccurrences
   * @return additionalOccurrences
   */
  @javax.annotation.Nullable
  public Boolean getAdditionalOccurrences() {
    return additionalOccurrences;
  }

  public void setAdditionalOccurrences(Boolean additionalOccurrences) {
    this.additionalOccurrences = additionalOccurrences;
  }


  public ClassificationResult customDataIdentifiers(ClassificationResultCustomDataIdentifiers customDataIdentifiers) {
    this.customDataIdentifiers = customDataIdentifiers;
    return this;
  }

  /**
   * Get customDataIdentifiers
   * @return customDataIdentifiers
   */
  @javax.annotation.Nullable
  public ClassificationResultCustomDataIdentifiers getCustomDataIdentifiers() {
    return customDataIdentifiers;
  }

  public void setCustomDataIdentifiers(ClassificationResultCustomDataIdentifiers customDataIdentifiers) {
    this.customDataIdentifiers = customDataIdentifiers;
  }


  public ClassificationResult mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Get mimeType
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public ClassificationResult sensitiveData(List sensitiveData) {
    this.sensitiveData = sensitiveData;
    return this;
  }

  /**
   * Get sensitiveData
   * @return sensitiveData
   */
  @javax.annotation.Nullable
  public List getSensitiveData() {
    return sensitiveData;
  }

  public void setSensitiveData(List sensitiveData) {
    this.sensitiveData = sensitiveData;
  }


  public ClassificationResult sizeClassified(Integer sizeClassified) {
    this.sizeClassified = sizeClassified;
    return this;
  }

  /**
   * Get sizeClassified
   * @return sizeClassified
   */
  @javax.annotation.Nullable
  public Integer getSizeClassified() {
    return sizeClassified;
  }

  public void setSizeClassified(Integer sizeClassified) {
    this.sizeClassified = sizeClassified;
  }


  public ClassificationResult status(ClassificationResultStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ClassificationResultStatus getStatus() {
    return status;
  }

  public void setStatus(ClassificationResultStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassificationResult classificationResult = (ClassificationResult) o;
    return Objects.equals(this.additionalOccurrences, classificationResult.additionalOccurrences) &&
        Objects.equals(this.customDataIdentifiers, classificationResult.customDataIdentifiers) &&
        Objects.equals(this.mimeType, classificationResult.mimeType) &&
        Objects.equals(this.sensitiveData, classificationResult.sensitiveData) &&
        Objects.equals(this.sizeClassified, classificationResult.sizeClassified) &&
        Objects.equals(this.status, classificationResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalOccurrences, customDataIdentifiers, mimeType, sensitiveData, sizeClassified, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassificationResult {\n");
    sb.append("    additionalOccurrences: ").append(toIndentedString(additionalOccurrences)).append("\n");
    sb.append("    customDataIdentifiers: ").append(toIndentedString(customDataIdentifiers)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    sensitiveData: ").append(toIndentedString(sensitiveData)).append("\n");
    sb.append("    sizeClassified: ").append(toIndentedString(sizeClassified)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalOccurrences");
    openapiFields.add("customDataIdentifiers");
    openapiFields.add("mimeType");
    openapiFields.add("sensitiveData");
    openapiFields.add("sizeClassified");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassificationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassificationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassificationResult is not found in the empty JSON string", ClassificationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassificationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassificationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalOccurrences`
      if (jsonObj.get("additionalOccurrences") != null && !jsonObj.get("additionalOccurrences").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("additionalOccurrences"));
      }
      // validate the optional field `customDataIdentifiers`
      if (jsonObj.get("customDataIdentifiers") != null && !jsonObj.get("customDataIdentifiers").isJsonNull()) {
        ClassificationResultCustomDataIdentifiers.validateJsonElement(jsonObj.get("customDataIdentifiers"));
      }
      // validate the optional field `mimeType`
      if (jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mimeType"));
      }
      // validate the optional field `sensitiveData`
      if (jsonObj.get("sensitiveData") != null && !jsonObj.get("sensitiveData").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sensitiveData"));
      }
      // validate the optional field `sizeClassified`
      if (jsonObj.get("sizeClassified") != null && !jsonObj.get("sizeClassified").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("sizeClassified"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ClassificationResultStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassificationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassificationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassificationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassificationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassificationResult>() {
           @Override
           public void write(JsonWriter out, ClassificationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassificationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassificationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassificationResult
   * @throws IOException if the JSON string is invalid with respect to ClassificationResult
   */
  public static ClassificationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassificationResult.class);
  }

  /**
   * Convert an instance of ClassificationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

