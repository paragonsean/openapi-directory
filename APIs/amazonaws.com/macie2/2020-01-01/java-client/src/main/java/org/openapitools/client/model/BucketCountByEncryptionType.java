/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the number of S3 buckets whose settings do or don&#39;t specify default server-side encryption behavior for objects that are added to the buckets. For detailed information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html\&quot;&gt;Setting default server-side encryption behavior for Amazon S3 buckets&lt;/a&gt; in the &lt;i&gt;Amazon Simple Storage Service User Guide&lt;/i&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketCountByEncryptionType {
  public static final String SERIALIZED_NAME_KMS_MANAGED = "kmsManaged";
  @SerializedName(SERIALIZED_NAME_KMS_MANAGED)
  private Integer kmsManaged;

  public static final String SERIALIZED_NAME_S3_MANAGED = "s3Managed";
  @SerializedName(SERIALIZED_NAME_S3_MANAGED)
  private Integer s3Managed;

  public static final String SERIALIZED_NAME_UNENCRYPTED = "unencrypted";
  @SerializedName(SERIALIZED_NAME_UNENCRYPTED)
  private Integer unencrypted;

  public static final String SERIALIZED_NAME_UNKNOWN = "unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private Integer unknown;

  public BucketCountByEncryptionType() {
  }

  public BucketCountByEncryptionType kmsManaged(Integer kmsManaged) {
    this.kmsManaged = kmsManaged;
    return this;
  }

  /**
   * Get kmsManaged
   * @return kmsManaged
   */
  @javax.annotation.Nullable
  public Integer getKmsManaged() {
    return kmsManaged;
  }

  public void setKmsManaged(Integer kmsManaged) {
    this.kmsManaged = kmsManaged;
  }


  public BucketCountByEncryptionType s3Managed(Integer s3Managed) {
    this.s3Managed = s3Managed;
    return this;
  }

  /**
   * Get s3Managed
   * @return s3Managed
   */
  @javax.annotation.Nullable
  public Integer getS3Managed() {
    return s3Managed;
  }

  public void setS3Managed(Integer s3Managed) {
    this.s3Managed = s3Managed;
  }


  public BucketCountByEncryptionType unencrypted(Integer unencrypted) {
    this.unencrypted = unencrypted;
    return this;
  }

  /**
   * Get unencrypted
   * @return unencrypted
   */
  @javax.annotation.Nullable
  public Integer getUnencrypted() {
    return unencrypted;
  }

  public void setUnencrypted(Integer unencrypted) {
    this.unencrypted = unencrypted;
  }


  public BucketCountByEncryptionType unknown(Integer unknown) {
    this.unknown = unknown;
    return this;
  }

  /**
   * Get unknown
   * @return unknown
   */
  @javax.annotation.Nullable
  public Integer getUnknown() {
    return unknown;
  }

  public void setUnknown(Integer unknown) {
    this.unknown = unknown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketCountByEncryptionType bucketCountByEncryptionType = (BucketCountByEncryptionType) o;
    return Objects.equals(this.kmsManaged, bucketCountByEncryptionType.kmsManaged) &&
        Objects.equals(this.s3Managed, bucketCountByEncryptionType.s3Managed) &&
        Objects.equals(this.unencrypted, bucketCountByEncryptionType.unencrypted) &&
        Objects.equals(this.unknown, bucketCountByEncryptionType.unknown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kmsManaged, s3Managed, unencrypted, unknown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketCountByEncryptionType {\n");
    sb.append("    kmsManaged: ").append(toIndentedString(kmsManaged)).append("\n");
    sb.append("    s3Managed: ").append(toIndentedString(s3Managed)).append("\n");
    sb.append("    unencrypted: ").append(toIndentedString(unencrypted)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kmsManaged");
    openapiFields.add("s3Managed");
    openapiFields.add("unencrypted");
    openapiFields.add("unknown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketCountByEncryptionType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketCountByEncryptionType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketCountByEncryptionType is not found in the empty JSON string", BucketCountByEncryptionType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketCountByEncryptionType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketCountByEncryptionType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `kmsManaged`
      if (jsonObj.get("kmsManaged") != null && !jsonObj.get("kmsManaged").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("kmsManaged"));
      }
      // validate the optional field `s3Managed`
      if (jsonObj.get("s3Managed") != null && !jsonObj.get("s3Managed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("s3Managed"));
      }
      // validate the optional field `unencrypted`
      if (jsonObj.get("unencrypted") != null && !jsonObj.get("unencrypted").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("unencrypted"));
      }
      // validate the optional field `unknown`
      if (jsonObj.get("unknown") != null && !jsonObj.get("unknown").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("unknown"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketCountByEncryptionType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketCountByEncryptionType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketCountByEncryptionType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketCountByEncryptionType.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketCountByEncryptionType>() {
           @Override
           public void write(JsonWriter out, BucketCountByEncryptionType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketCountByEncryptionType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketCountByEncryptionType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketCountByEncryptionType
   * @throws IOException if the JSON string is invalid with respect to BucketCountByEncryptionType
   */
  public static BucketCountByEncryptionType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketCountByEncryptionType.class);
  }

  /**
   * Convert an instance of BucketCountByEncryptionType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

