/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BucketStatisticsBySensitivityClassificationError;
import org.openapitools.client.model.BucketStatisticsBySensitivityNotClassified;
import org.openapitools.client.model.BucketStatisticsBySensitivityNotSensitive;
import org.openapitools.client.model.BucketStatisticsBySensitivitySensitive;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBucketStatisticsResponseBucketStatisticsBySensitivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBucketStatisticsResponseBucketStatisticsBySensitivity {
  public static final String SERIALIZED_NAME_CLASSIFICATION_ERROR = "classificationError";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_ERROR)
  private BucketStatisticsBySensitivityClassificationError classificationError;

  public static final String SERIALIZED_NAME_NOT_CLASSIFIED = "notClassified";
  @SerializedName(SERIALIZED_NAME_NOT_CLASSIFIED)
  private BucketStatisticsBySensitivityNotClassified notClassified;

  public static final String SERIALIZED_NAME_NOT_SENSITIVE = "notSensitive";
  @SerializedName(SERIALIZED_NAME_NOT_SENSITIVE)
  private BucketStatisticsBySensitivityNotSensitive notSensitive;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private BucketStatisticsBySensitivitySensitive sensitive;

  public GetBucketStatisticsResponseBucketStatisticsBySensitivity() {
  }

  public GetBucketStatisticsResponseBucketStatisticsBySensitivity classificationError(BucketStatisticsBySensitivityClassificationError classificationError) {
    this.classificationError = classificationError;
    return this;
  }

  /**
   * Get classificationError
   * @return classificationError
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivityClassificationError getClassificationError() {
    return classificationError;
  }

  public void setClassificationError(BucketStatisticsBySensitivityClassificationError classificationError) {
    this.classificationError = classificationError;
  }


  public GetBucketStatisticsResponseBucketStatisticsBySensitivity notClassified(BucketStatisticsBySensitivityNotClassified notClassified) {
    this.notClassified = notClassified;
    return this;
  }

  /**
   * Get notClassified
   * @return notClassified
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivityNotClassified getNotClassified() {
    return notClassified;
  }

  public void setNotClassified(BucketStatisticsBySensitivityNotClassified notClassified) {
    this.notClassified = notClassified;
  }


  public GetBucketStatisticsResponseBucketStatisticsBySensitivity notSensitive(BucketStatisticsBySensitivityNotSensitive notSensitive) {
    this.notSensitive = notSensitive;
    return this;
  }

  /**
   * Get notSensitive
   * @return notSensitive
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivityNotSensitive getNotSensitive() {
    return notSensitive;
  }

  public void setNotSensitive(BucketStatisticsBySensitivityNotSensitive notSensitive) {
    this.notSensitive = notSensitive;
  }


  public GetBucketStatisticsResponseBucketStatisticsBySensitivity sensitive(BucketStatisticsBySensitivitySensitive sensitive) {
    this.sensitive = sensitive;
    return this;
  }

  /**
   * Get sensitive
   * @return sensitive
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivitySensitive getSensitive() {
    return sensitive;
  }

  public void setSensitive(BucketStatisticsBySensitivitySensitive sensitive) {
    this.sensitive = sensitive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBucketStatisticsResponseBucketStatisticsBySensitivity getBucketStatisticsResponseBucketStatisticsBySensitivity = (GetBucketStatisticsResponseBucketStatisticsBySensitivity) o;
    return Objects.equals(this.classificationError, getBucketStatisticsResponseBucketStatisticsBySensitivity.classificationError) &&
        Objects.equals(this.notClassified, getBucketStatisticsResponseBucketStatisticsBySensitivity.notClassified) &&
        Objects.equals(this.notSensitive, getBucketStatisticsResponseBucketStatisticsBySensitivity.notSensitive) &&
        Objects.equals(this.sensitive, getBucketStatisticsResponseBucketStatisticsBySensitivity.sensitive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationError, notClassified, notSensitive, sensitive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBucketStatisticsResponseBucketStatisticsBySensitivity {\n");
    sb.append("    classificationError: ").append(toIndentedString(classificationError)).append("\n");
    sb.append("    notClassified: ").append(toIndentedString(notClassified)).append("\n");
    sb.append("    notSensitive: ").append(toIndentedString(notSensitive)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classificationError");
    openapiFields.add("notClassified");
    openapiFields.add("notSensitive");
    openapiFields.add("sensitive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBucketStatisticsResponseBucketStatisticsBySensitivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBucketStatisticsResponseBucketStatisticsBySensitivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBucketStatisticsResponseBucketStatisticsBySensitivity is not found in the empty JSON string", GetBucketStatisticsResponseBucketStatisticsBySensitivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBucketStatisticsResponseBucketStatisticsBySensitivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBucketStatisticsResponseBucketStatisticsBySensitivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `classificationError`
      if (jsonObj.get("classificationError") != null && !jsonObj.get("classificationError").isJsonNull()) {
        BucketStatisticsBySensitivityClassificationError.validateJsonElement(jsonObj.get("classificationError"));
      }
      // validate the optional field `notClassified`
      if (jsonObj.get("notClassified") != null && !jsonObj.get("notClassified").isJsonNull()) {
        BucketStatisticsBySensitivityNotClassified.validateJsonElement(jsonObj.get("notClassified"));
      }
      // validate the optional field `notSensitive`
      if (jsonObj.get("notSensitive") != null && !jsonObj.get("notSensitive").isJsonNull()) {
        BucketStatisticsBySensitivityNotSensitive.validateJsonElement(jsonObj.get("notSensitive"));
      }
      // validate the optional field `sensitive`
      if (jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) {
        BucketStatisticsBySensitivitySensitive.validateJsonElement(jsonObj.get("sensitive"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBucketStatisticsResponseBucketStatisticsBySensitivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBucketStatisticsResponseBucketStatisticsBySensitivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBucketStatisticsResponseBucketStatisticsBySensitivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBucketStatisticsResponseBucketStatisticsBySensitivity.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBucketStatisticsResponseBucketStatisticsBySensitivity>() {
           @Override
           public void write(JsonWriter out, GetBucketStatisticsResponseBucketStatisticsBySensitivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBucketStatisticsResponseBucketStatisticsBySensitivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBucketStatisticsResponseBucketStatisticsBySensitivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBucketStatisticsResponseBucketStatisticsBySensitivity
   * @throws IOException if the JSON string is invalid with respect to GetBucketStatisticsResponseBucketStatisticsBySensitivity
   */
  public static GetBucketStatisticsResponseBucketStatisticsBySensitivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBucketStatisticsResponseBucketStatisticsBySensitivity.class);
  }

  /**
   * Convert an instance of GetBucketStatisticsResponseBucketStatisticsBySensitivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

