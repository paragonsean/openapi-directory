/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnableMacieRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnableMacieRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  /**
   * The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html\&quot;&gt;Monitoring and processing findings&lt;/a&gt; in the &lt;i&gt;Amazon Macie User Guide&lt;/i&gt;. Valid values are:
   */
  @JsonAdapter(FindingPublishingFrequencyEnum.Adapter.class)
  public enum FindingPublishingFrequencyEnum {
    FIFTEEN_MINUTES("FIFTEEN_MINUTES"),
    
    ONE_HOUR("ONE_HOUR"),
    
    SIX_HOURS("SIX_HOURS");

    private String value;

    FindingPublishingFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FindingPublishingFrequencyEnum fromValue(String value) {
      for (FindingPublishingFrequencyEnum b : FindingPublishingFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FindingPublishingFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FindingPublishingFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FindingPublishingFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FindingPublishingFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FindingPublishingFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FINDING_PUBLISHING_FREQUENCY = "findingPublishingFrequency";
  @SerializedName(SERIALIZED_NAME_FINDING_PUBLISHING_FREQUENCY)
  private FindingPublishingFrequencyEnum findingPublishingFrequency;

  /**
   * The status of an Amazon Macie account. Valid values are:
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PAUSED("PAUSED"),
    
    ENABLED("ENABLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public EnableMacieRequest() {
  }

  public EnableMacieRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive token that you provide to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public EnableMacieRequest findingPublishingFrequency(FindingPublishingFrequencyEnum findingPublishingFrequency) {
    this.findingPublishingFrequency = findingPublishingFrequency;
    return this;
  }

  /**
   * The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html\&quot;&gt;Monitoring and processing findings&lt;/a&gt; in the &lt;i&gt;Amazon Macie User Guide&lt;/i&gt;. Valid values are:
   * @return findingPublishingFrequency
   */
  @javax.annotation.Nullable
  public FindingPublishingFrequencyEnum getFindingPublishingFrequency() {
    return findingPublishingFrequency;
  }

  public void setFindingPublishingFrequency(FindingPublishingFrequencyEnum findingPublishingFrequency) {
    this.findingPublishingFrequency = findingPublishingFrequency;
  }


  public EnableMacieRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of an Amazon Macie account. Valid values are:
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnableMacieRequest enableMacieRequest = (EnableMacieRequest) o;
    return Objects.equals(this.clientToken, enableMacieRequest.clientToken) &&
        Objects.equals(this.findingPublishingFrequency, enableMacieRequest.findingPublishingFrequency) &&
        Objects.equals(this.status, enableMacieRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, findingPublishingFrequency, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnableMacieRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    findingPublishingFrequency: ").append(toIndentedString(findingPublishingFrequency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("findingPublishingFrequency");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnableMacieRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnableMacieRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnableMacieRequest is not found in the empty JSON string", EnableMacieRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnableMacieRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnableMacieRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if ((jsonObj.get("findingPublishingFrequency") != null && !jsonObj.get("findingPublishingFrequency").isJsonNull()) && !jsonObj.get("findingPublishingFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `findingPublishingFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("findingPublishingFrequency").toString()));
      }
      // validate the optional field `findingPublishingFrequency`
      if (jsonObj.get("findingPublishingFrequency") != null && !jsonObj.get("findingPublishingFrequency").isJsonNull()) {
        FindingPublishingFrequencyEnum.validateJsonElement(jsonObj.get("findingPublishingFrequency"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnableMacieRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnableMacieRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnableMacieRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnableMacieRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnableMacieRequest>() {
           @Override
           public void write(JsonWriter out, EnableMacieRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnableMacieRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnableMacieRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnableMacieRequest
   * @throws IOException if the JSON string is invalid with respect to EnableMacieRequest
   */
  public static EnableMacieRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnableMacieRequest.class);
  }

  /**
   * Convert an instance of EnableMacieRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

