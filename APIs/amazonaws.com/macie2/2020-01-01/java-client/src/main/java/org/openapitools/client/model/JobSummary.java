/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeClassificationJobResponseLastRunErrorStatus;
import org.openapitools.client.model.DescribeClassificationJobResponseUserPausedDetails;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.JobSummaryBucketCriteria;
import org.openapitools.client.model.JobType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about a classification job, including the current status of the job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobSummary {
  public static final String SERIALIZED_NAME_BUCKET_CRITERIA = "bucketCriteria";
  @SerializedName(SERIALIZED_NAME_BUCKET_CRITERIA)
  private JobSummaryBucketCriteria bucketCriteria;

  public static final String SERIALIZED_NAME_BUCKET_DEFINITIONS = "bucketDefinitions";
  @SerializedName(SERIALIZED_NAME_BUCKET_DEFINITIONS)
  private List bucketDefinitions;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_STATUS = "jobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobType jobType;

  public static final String SERIALIZED_NAME_LAST_RUN_ERROR_STATUS = "lastRunErrorStatus";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_ERROR_STATUS)
  private DescribeClassificationJobResponseLastRunErrorStatus lastRunErrorStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER_PAUSED_DETAILS = "userPausedDetails";
  @SerializedName(SERIALIZED_NAME_USER_PAUSED_DETAILS)
  private DescribeClassificationJobResponseUserPausedDetails userPausedDetails;

  public JobSummary() {
  }

  public JobSummary bucketCriteria(JobSummaryBucketCriteria bucketCriteria) {
    this.bucketCriteria = bucketCriteria;
    return this;
  }

  /**
   * Get bucketCriteria
   * @return bucketCriteria
   */
  @javax.annotation.Nullable
  public JobSummaryBucketCriteria getBucketCriteria() {
    return bucketCriteria;
  }

  public void setBucketCriteria(JobSummaryBucketCriteria bucketCriteria) {
    this.bucketCriteria = bucketCriteria;
  }


  public JobSummary bucketDefinitions(List bucketDefinitions) {
    this.bucketDefinitions = bucketDefinitions;
    return this;
  }

  /**
   * Get bucketDefinitions
   * @return bucketDefinitions
   */
  @javax.annotation.Nullable
  public List getBucketDefinitions() {
    return bucketDefinitions;
  }

  public void setBucketDefinitions(List bucketDefinitions) {
    this.bucketDefinitions = bucketDefinitions;
  }


  public JobSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public JobSummary jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public JobSummary jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public JobSummary jobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nullable
  public JobType getJobType() {
    return jobType;
  }

  public void setJobType(JobType jobType) {
    this.jobType = jobType;
  }


  public JobSummary lastRunErrorStatus(DescribeClassificationJobResponseLastRunErrorStatus lastRunErrorStatus) {
    this.lastRunErrorStatus = lastRunErrorStatus;
    return this;
  }

  /**
   * Get lastRunErrorStatus
   * @return lastRunErrorStatus
   */
  @javax.annotation.Nullable
  public DescribeClassificationJobResponseLastRunErrorStatus getLastRunErrorStatus() {
    return lastRunErrorStatus;
  }

  public void setLastRunErrorStatus(DescribeClassificationJobResponseLastRunErrorStatus lastRunErrorStatus) {
    this.lastRunErrorStatus = lastRunErrorStatus;
  }


  public JobSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public JobSummary userPausedDetails(DescribeClassificationJobResponseUserPausedDetails userPausedDetails) {
    this.userPausedDetails = userPausedDetails;
    return this;
  }

  /**
   * Get userPausedDetails
   * @return userPausedDetails
   */
  @javax.annotation.Nullable
  public DescribeClassificationJobResponseUserPausedDetails getUserPausedDetails() {
    return userPausedDetails;
  }

  public void setUserPausedDetails(DescribeClassificationJobResponseUserPausedDetails userPausedDetails) {
    this.userPausedDetails = userPausedDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSummary jobSummary = (JobSummary) o;
    return Objects.equals(this.bucketCriteria, jobSummary.bucketCriteria) &&
        Objects.equals(this.bucketDefinitions, jobSummary.bucketDefinitions) &&
        Objects.equals(this.createdAt, jobSummary.createdAt) &&
        Objects.equals(this.jobId, jobSummary.jobId) &&
        Objects.equals(this.jobStatus, jobSummary.jobStatus) &&
        Objects.equals(this.jobType, jobSummary.jobType) &&
        Objects.equals(this.lastRunErrorStatus, jobSummary.lastRunErrorStatus) &&
        Objects.equals(this.name, jobSummary.name) &&
        Objects.equals(this.userPausedDetails, jobSummary.userPausedDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketCriteria, bucketDefinitions, createdAt, jobId, jobStatus, jobType, lastRunErrorStatus, name, userPausedDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSummary {\n");
    sb.append("    bucketCriteria: ").append(toIndentedString(bucketCriteria)).append("\n");
    sb.append("    bucketDefinitions: ").append(toIndentedString(bucketDefinitions)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    lastRunErrorStatus: ").append(toIndentedString(lastRunErrorStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userPausedDetails: ").append(toIndentedString(userPausedDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketCriteria");
    openapiFields.add("bucketDefinitions");
    openapiFields.add("createdAt");
    openapiFields.add("jobId");
    openapiFields.add("jobStatus");
    openapiFields.add("jobType");
    openapiFields.add("lastRunErrorStatus");
    openapiFields.add("name");
    openapiFields.add("userPausedDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSummary is not found in the empty JSON string", JobSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucketCriteria`
      if (jsonObj.get("bucketCriteria") != null && !jsonObj.get("bucketCriteria").isJsonNull()) {
        JobSummaryBucketCriteria.validateJsonElement(jsonObj.get("bucketCriteria"));
      }
      // validate the optional field `bucketDefinitions`
      if (jsonObj.get("bucketDefinitions") != null && !jsonObj.get("bucketDefinitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("bucketDefinitions"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `jobId`
      if (jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobId"));
      }
      // validate the optional field `jobStatus`
      if (jsonObj.get("jobStatus") != null && !jsonObj.get("jobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("jobStatus"));
      }
      // validate the optional field `jobType`
      if (jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) {
        JobType.validateJsonElement(jsonObj.get("jobType"));
      }
      // validate the optional field `lastRunErrorStatus`
      if (jsonObj.get("lastRunErrorStatus") != null && !jsonObj.get("lastRunErrorStatus").isJsonNull()) {
        DescribeClassificationJobResponseLastRunErrorStatus.validateJsonElement(jsonObj.get("lastRunErrorStatus"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `userPausedDetails`
      if (jsonObj.get("userPausedDetails") != null && !jsonObj.get("userPausedDetails").isJsonNull()) {
        DescribeClassificationJobResponseUserPausedDetails.validateJsonElement(jsonObj.get("userPausedDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSummary>() {
           @Override
           public void write(JsonWriter out, JobSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSummary
   * @throws IOException if the JSON string is invalid with respect to JobSummary
   */
  public static JobSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSummary.class);
  }

  /**
   * Convert an instance of JobSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

