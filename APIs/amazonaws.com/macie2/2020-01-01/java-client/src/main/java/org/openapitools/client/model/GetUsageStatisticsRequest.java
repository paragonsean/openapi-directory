/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetUsageStatisticsRequestSortBy;
import org.openapitools.client.model.UsageStatisticsFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUsageStatisticsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetUsageStatisticsRequest {
  public static final String SERIALIZED_NAME_FILTER_BY = "filterBy";
  @SerializedName(SERIALIZED_NAME_FILTER_BY)
  private List<UsageStatisticsFilter> filterBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private GetUsageStatisticsRequestSortBy sortBy;

  /**
   * An inclusive time period that Amazon Macie usage data applies to. Possible values are:
   */
  @JsonAdapter(TimeRangeEnum.Adapter.class)
  public enum TimeRangeEnum {
    MONTH_TO_DATE("MONTH_TO_DATE"),
    
    PAST_30_DAYS("PAST_30_DAYS");

    private String value;

    TimeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeRangeEnum fromValue(String value) {
      for (TimeRangeEnum b : TimeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_RANGE = "timeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private TimeRangeEnum timeRange;

  public GetUsageStatisticsRequest() {
  }

  public GetUsageStatisticsRequest filterBy(List<UsageStatisticsFilter> filterBy) {
    this.filterBy = filterBy;
    return this;
  }

  public GetUsageStatisticsRequest addFilterByItem(UsageStatisticsFilter filterByItem) {
    if (this.filterBy == null) {
      this.filterBy = new ArrayList<>();
    }
    this.filterBy.add(filterByItem);
    return this;
  }

  /**
   * An array of objects, one for each condition to use to filter the query results. If you specify more than one condition, Amazon Macie uses an AND operator to join the conditions.
   * @return filterBy
   */
  @javax.annotation.Nullable
  public List<UsageStatisticsFilter> getFilterBy() {
    return filterBy;
  }

  public void setFilterBy(List<UsageStatisticsFilter> filterBy) {
    this.filterBy = filterBy;
  }


  public GetUsageStatisticsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of items to include in each page of the response.
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GetUsageStatisticsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The nextToken string that specifies which page of results to return in a paginated response.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public GetUsageStatisticsRequest sortBy(GetUsageStatisticsRequestSortBy sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public GetUsageStatisticsRequestSortBy getSortBy() {
    return sortBy;
  }

  public void setSortBy(GetUsageStatisticsRequestSortBy sortBy) {
    this.sortBy = sortBy;
  }


  public GetUsageStatisticsRequest timeRange(TimeRangeEnum timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * An inclusive time period that Amazon Macie usage data applies to. Possible values are:
   * @return timeRange
   */
  @javax.annotation.Nullable
  public TimeRangeEnum getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(TimeRangeEnum timeRange) {
    this.timeRange = timeRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUsageStatisticsRequest getUsageStatisticsRequest = (GetUsageStatisticsRequest) o;
    return Objects.equals(this.filterBy, getUsageStatisticsRequest.filterBy) &&
        Objects.equals(this.maxResults, getUsageStatisticsRequest.maxResults) &&
        Objects.equals(this.nextToken, getUsageStatisticsRequest.nextToken) &&
        Objects.equals(this.sortBy, getUsageStatisticsRequest.sortBy) &&
        Objects.equals(this.timeRange, getUsageStatisticsRequest.timeRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterBy, maxResults, nextToken, sortBy, timeRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUsageStatisticsRequest {\n");
    sb.append("    filterBy: ").append(toIndentedString(filterBy)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterBy");
    openapiFields.add("maxResults");
    openapiFields.add("nextToken");
    openapiFields.add("sortBy");
    openapiFields.add("timeRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUsageStatisticsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUsageStatisticsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUsageStatisticsRequest is not found in the empty JSON string", GetUsageStatisticsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUsageStatisticsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUsageStatisticsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("filterBy") != null && !jsonObj.get("filterBy").isJsonNull()) {
        JsonArray jsonArrayfilterBy = jsonObj.getAsJsonArray("filterBy");
        if (jsonArrayfilterBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterBy` to be an array in the JSON string but got `%s`", jsonObj.get("filterBy").toString()));
          }

          // validate the optional field `filterBy` (array)
          for (int i = 0; i < jsonArrayfilterBy.size(); i++) {
            UsageStatisticsFilter.validateJsonElement(jsonArrayfilterBy.get(i));
          };
        }
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        GetUsageStatisticsRequestSortBy.validateJsonElement(jsonObj.get("sortBy"));
      }
      if ((jsonObj.get("timeRange") != null && !jsonObj.get("timeRange").isJsonNull()) && !jsonObj.get("timeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeRange").toString()));
      }
      // validate the optional field `timeRange`
      if (jsonObj.get("timeRange") != null && !jsonObj.get("timeRange").isJsonNull()) {
        TimeRangeEnum.validateJsonElement(jsonObj.get("timeRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUsageStatisticsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUsageStatisticsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUsageStatisticsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUsageStatisticsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUsageStatisticsRequest>() {
           @Override
           public void write(JsonWriter out, GetUsageStatisticsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUsageStatisticsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUsageStatisticsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUsageStatisticsRequest
   * @throws IOException if the JSON string is invalid with respect to GetUsageStatisticsRequest
   */
  public static GetUsageStatisticsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUsageStatisticsRequest.class);
  }

  /**
   * Convert an instance of GetUsageStatisticsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

