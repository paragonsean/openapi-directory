/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.RelationshipStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMemberResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMemberResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADMINISTRATOR_ACCOUNT_ID = "administratorAccountId";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_ACCOUNT_ID)
  private String administratorAccountId;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_INVITED_AT = "invitedAt";
  @SerializedName(SERIALIZED_NAME_INVITED_AT)
  private OffsetDateTime invitedAt;

  public static final String SERIALIZED_NAME_MASTER_ACCOUNT_ID = "masterAccountId";
  @SerializedName(SERIALIZED_NAME_MASTER_ACCOUNT_ID)
  private String masterAccountId;

  public static final String SERIALIZED_NAME_RELATIONSHIP_STATUS = "relationshipStatus";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_STATUS)
  private RelationshipStatus relationshipStatus;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public GetMemberResponse() {
  }

  public GetMemberResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public GetMemberResponse administratorAccountId(String administratorAccountId) {
    this.administratorAccountId = administratorAccountId;
    return this;
  }

  /**
   * Get administratorAccountId
   * @return administratorAccountId
   */
  @javax.annotation.Nullable
  public String getAdministratorAccountId() {
    return administratorAccountId;
  }

  public void setAdministratorAccountId(String administratorAccountId) {
    this.administratorAccountId = administratorAccountId;
  }


  public GetMemberResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetMemberResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public GetMemberResponse invitedAt(OffsetDateTime invitedAt) {
    this.invitedAt = invitedAt;
    return this;
  }

  /**
   * Get invitedAt
   * @return invitedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvitedAt() {
    return invitedAt;
  }

  public void setInvitedAt(OffsetDateTime invitedAt) {
    this.invitedAt = invitedAt;
  }


  public GetMemberResponse masterAccountId(String masterAccountId) {
    this.masterAccountId = masterAccountId;
    return this;
  }

  /**
   * Get masterAccountId
   * @return masterAccountId
   */
  @javax.annotation.Nullable
  public String getMasterAccountId() {
    return masterAccountId;
  }

  public void setMasterAccountId(String masterAccountId) {
    this.masterAccountId = masterAccountId;
  }


  public GetMemberResponse relationshipStatus(RelationshipStatus relationshipStatus) {
    this.relationshipStatus = relationshipStatus;
    return this;
  }

  /**
   * Get relationshipStatus
   * @return relationshipStatus
   */
  @javax.annotation.Nullable
  public RelationshipStatus getRelationshipStatus() {
    return relationshipStatus;
  }

  public void setRelationshipStatus(RelationshipStatus relationshipStatus) {
    this.relationshipStatus = relationshipStatus;
  }


  public GetMemberResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public GetMemberResponse updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMemberResponse getMemberResponse = (GetMemberResponse) o;
    return Objects.equals(this.accountId, getMemberResponse.accountId) &&
        Objects.equals(this.administratorAccountId, getMemberResponse.administratorAccountId) &&
        Objects.equals(this.arn, getMemberResponse.arn) &&
        Objects.equals(this.email, getMemberResponse.email) &&
        Objects.equals(this.invitedAt, getMemberResponse.invitedAt) &&
        Objects.equals(this.masterAccountId, getMemberResponse.masterAccountId) &&
        Objects.equals(this.relationshipStatus, getMemberResponse.relationshipStatus) &&
        Objects.equals(this.tags, getMemberResponse.tags) &&
        Objects.equals(this.updatedAt, getMemberResponse.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, administratorAccountId, arn, email, invitedAt, masterAccountId, relationshipStatus, tags, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMemberResponse {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    administratorAccountId: ").append(toIndentedString(administratorAccountId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    invitedAt: ").append(toIndentedString(invitedAt)).append("\n");
    sb.append("    masterAccountId: ").append(toIndentedString(masterAccountId)).append("\n");
    sb.append("    relationshipStatus: ").append(toIndentedString(relationshipStatus)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("administratorAccountId");
    openapiFields.add("arn");
    openapiFields.add("email");
    openapiFields.add("invitedAt");
    openapiFields.add("masterAccountId");
    openapiFields.add("relationshipStatus");
    openapiFields.add("tags");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMemberResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMemberResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMemberResponse is not found in the empty JSON string", GetMemberResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMemberResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMemberResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `administratorAccountId`
      if (jsonObj.get("administratorAccountId") != null && !jsonObj.get("administratorAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("administratorAccountId"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `email`
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("email"));
      }
      // validate the optional field `invitedAt`
      if (jsonObj.get("invitedAt") != null && !jsonObj.get("invitedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("invitedAt"));
      }
      // validate the optional field `masterAccountId`
      if (jsonObj.get("masterAccountId") != null && !jsonObj.get("masterAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("masterAccountId"));
      }
      // validate the optional field `relationshipStatus`
      if (jsonObj.get("relationshipStatus") != null && !jsonObj.get("relationshipStatus").isJsonNull()) {
        RelationshipStatus.validateJsonElement(jsonObj.get("relationshipStatus"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMemberResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMemberResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMemberResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMemberResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMemberResponse>() {
           @Override
           public void write(JsonWriter out, GetMemberResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMemberResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMemberResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMemberResponse
   * @throws IOException if the JSON string is invalid with respect to GetMemberResponse
   */
  public static GetMemberResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMemberResponse.class);
  }

  /**
   * Convert an instance of GetMemberResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

