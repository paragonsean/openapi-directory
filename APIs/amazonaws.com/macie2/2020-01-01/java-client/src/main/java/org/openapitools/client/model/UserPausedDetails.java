/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about when a classification job was paused. For a one-time job, this object also specifies when the job will expire and be cancelled if it isn&#39;t resumed. For a recurring job, this object also specifies when the paused job run will expire and be cancelled if it isn&#39;t resumed. This object is present only if a job&#39;s current status (jobStatus) is USER_PAUSED. The information in this object applies only to a job that was paused while it had a status of RUNNING.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserPausedDetails {
  public static final String SERIALIZED_NAME_JOB_EXPIRES_AT = "jobExpiresAt";
  @SerializedName(SERIALIZED_NAME_JOB_EXPIRES_AT)
  private OffsetDateTime jobExpiresAt;

  public static final String SERIALIZED_NAME_JOB_IMMINENT_EXPIRATION_HEALTH_EVENT_ARN = "jobImminentExpirationHealthEventArn";
  @SerializedName(SERIALIZED_NAME_JOB_IMMINENT_EXPIRATION_HEALTH_EVENT_ARN)
  private String jobImminentExpirationHealthEventArn;

  public static final String SERIALIZED_NAME_JOB_PAUSED_AT = "jobPausedAt";
  @SerializedName(SERIALIZED_NAME_JOB_PAUSED_AT)
  private OffsetDateTime jobPausedAt;

  public UserPausedDetails() {
  }

  public UserPausedDetails jobExpiresAt(OffsetDateTime jobExpiresAt) {
    this.jobExpiresAt = jobExpiresAt;
    return this;
  }

  /**
   * Get jobExpiresAt
   * @return jobExpiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getJobExpiresAt() {
    return jobExpiresAt;
  }

  public void setJobExpiresAt(OffsetDateTime jobExpiresAt) {
    this.jobExpiresAt = jobExpiresAt;
  }


  public UserPausedDetails jobImminentExpirationHealthEventArn(String jobImminentExpirationHealthEventArn) {
    this.jobImminentExpirationHealthEventArn = jobImminentExpirationHealthEventArn;
    return this;
  }

  /**
   * Get jobImminentExpirationHealthEventArn
   * @return jobImminentExpirationHealthEventArn
   */
  @javax.annotation.Nullable
  public String getJobImminentExpirationHealthEventArn() {
    return jobImminentExpirationHealthEventArn;
  }

  public void setJobImminentExpirationHealthEventArn(String jobImminentExpirationHealthEventArn) {
    this.jobImminentExpirationHealthEventArn = jobImminentExpirationHealthEventArn;
  }


  public UserPausedDetails jobPausedAt(OffsetDateTime jobPausedAt) {
    this.jobPausedAt = jobPausedAt;
    return this;
  }

  /**
   * Get jobPausedAt
   * @return jobPausedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getJobPausedAt() {
    return jobPausedAt;
  }

  public void setJobPausedAt(OffsetDateTime jobPausedAt) {
    this.jobPausedAt = jobPausedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPausedDetails userPausedDetails = (UserPausedDetails) o;
    return Objects.equals(this.jobExpiresAt, userPausedDetails.jobExpiresAt) &&
        Objects.equals(this.jobImminentExpirationHealthEventArn, userPausedDetails.jobImminentExpirationHealthEventArn) &&
        Objects.equals(this.jobPausedAt, userPausedDetails.jobPausedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobExpiresAt, jobImminentExpirationHealthEventArn, jobPausedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPausedDetails {\n");
    sb.append("    jobExpiresAt: ").append(toIndentedString(jobExpiresAt)).append("\n");
    sb.append("    jobImminentExpirationHealthEventArn: ").append(toIndentedString(jobImminentExpirationHealthEventArn)).append("\n");
    sb.append("    jobPausedAt: ").append(toIndentedString(jobPausedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobExpiresAt");
    openapiFields.add("jobImminentExpirationHealthEventArn");
    openapiFields.add("jobPausedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserPausedDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserPausedDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserPausedDetails is not found in the empty JSON string", UserPausedDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserPausedDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserPausedDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobExpiresAt`
      if (jsonObj.get("jobExpiresAt") != null && !jsonObj.get("jobExpiresAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("jobExpiresAt"));
      }
      // validate the optional field `jobImminentExpirationHealthEventArn`
      if (jsonObj.get("jobImminentExpirationHealthEventArn") != null && !jsonObj.get("jobImminentExpirationHealthEventArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobImminentExpirationHealthEventArn"));
      }
      // validate the optional field `jobPausedAt`
      if (jsonObj.get("jobPausedAt") != null && !jsonObj.get("jobPausedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("jobPausedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserPausedDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserPausedDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserPausedDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserPausedDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UserPausedDetails>() {
           @Override
           public void write(JsonWriter out, UserPausedDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserPausedDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserPausedDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserPausedDetails
   * @throws IOException if the JSON string is invalid with respect to UserPausedDetails
   */
  public static UserPausedDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserPausedDetails.class);
  }

  /**
   * Convert an instance of UserPausedDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

