/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BucketLevelPermissionsAccessControlList;
import org.openapitools.client.model.BucketLevelPermissionsBlockPublicAccess;
import org.openapitools.client.model.BucketLevelPermissionsBucketPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the bucket-level permissions settings for an S3 bucket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketLevelPermissions {
  public static final String SERIALIZED_NAME_ACCESS_CONTROL_LIST = "accessControlList";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_LIST)
  private BucketLevelPermissionsAccessControlList accessControlList;

  public static final String SERIALIZED_NAME_BLOCK_PUBLIC_ACCESS = "blockPublicAccess";
  @SerializedName(SERIALIZED_NAME_BLOCK_PUBLIC_ACCESS)
  private BucketLevelPermissionsBlockPublicAccess blockPublicAccess;

  public static final String SERIALIZED_NAME_BUCKET_POLICY = "bucketPolicy";
  @SerializedName(SERIALIZED_NAME_BUCKET_POLICY)
  private BucketLevelPermissionsBucketPolicy bucketPolicy;

  public BucketLevelPermissions() {
  }

  public BucketLevelPermissions accessControlList(BucketLevelPermissionsAccessControlList accessControlList) {
    this.accessControlList = accessControlList;
    return this;
  }

  /**
   * Get accessControlList
   * @return accessControlList
   */
  @javax.annotation.Nullable
  public BucketLevelPermissionsAccessControlList getAccessControlList() {
    return accessControlList;
  }

  public void setAccessControlList(BucketLevelPermissionsAccessControlList accessControlList) {
    this.accessControlList = accessControlList;
  }


  public BucketLevelPermissions blockPublicAccess(BucketLevelPermissionsBlockPublicAccess blockPublicAccess) {
    this.blockPublicAccess = blockPublicAccess;
    return this;
  }

  /**
   * Get blockPublicAccess
   * @return blockPublicAccess
   */
  @javax.annotation.Nullable
  public BucketLevelPermissionsBlockPublicAccess getBlockPublicAccess() {
    return blockPublicAccess;
  }

  public void setBlockPublicAccess(BucketLevelPermissionsBlockPublicAccess blockPublicAccess) {
    this.blockPublicAccess = blockPublicAccess;
  }


  public BucketLevelPermissions bucketPolicy(BucketLevelPermissionsBucketPolicy bucketPolicy) {
    this.bucketPolicy = bucketPolicy;
    return this;
  }

  /**
   * Get bucketPolicy
   * @return bucketPolicy
   */
  @javax.annotation.Nullable
  public BucketLevelPermissionsBucketPolicy getBucketPolicy() {
    return bucketPolicy;
  }

  public void setBucketPolicy(BucketLevelPermissionsBucketPolicy bucketPolicy) {
    this.bucketPolicy = bucketPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketLevelPermissions bucketLevelPermissions = (BucketLevelPermissions) o;
    return Objects.equals(this.accessControlList, bucketLevelPermissions.accessControlList) &&
        Objects.equals(this.blockPublicAccess, bucketLevelPermissions.blockPublicAccess) &&
        Objects.equals(this.bucketPolicy, bucketLevelPermissions.bucketPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessControlList, blockPublicAccess, bucketPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketLevelPermissions {\n");
    sb.append("    accessControlList: ").append(toIndentedString(accessControlList)).append("\n");
    sb.append("    blockPublicAccess: ").append(toIndentedString(blockPublicAccess)).append("\n");
    sb.append("    bucketPolicy: ").append(toIndentedString(bucketPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessControlList");
    openapiFields.add("blockPublicAccess");
    openapiFields.add("bucketPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketLevelPermissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketLevelPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketLevelPermissions is not found in the empty JSON string", BucketLevelPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketLevelPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketLevelPermissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessControlList`
      if (jsonObj.get("accessControlList") != null && !jsonObj.get("accessControlList").isJsonNull()) {
        BucketLevelPermissionsAccessControlList.validateJsonElement(jsonObj.get("accessControlList"));
      }
      // validate the optional field `blockPublicAccess`
      if (jsonObj.get("blockPublicAccess") != null && !jsonObj.get("blockPublicAccess").isJsonNull()) {
        BucketLevelPermissionsBlockPublicAccess.validateJsonElement(jsonObj.get("blockPublicAccess"));
      }
      // validate the optional field `bucketPolicy`
      if (jsonObj.get("bucketPolicy") != null && !jsonObj.get("bucketPolicy").isJsonNull()) {
        BucketLevelPermissionsBucketPolicy.validateJsonElement(jsonObj.get("bucketPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketLevelPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketLevelPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketLevelPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketLevelPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketLevelPermissions>() {
           @Override
           public void write(JsonWriter out, BucketLevelPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketLevelPermissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketLevelPermissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketLevelPermissions
   * @throws IOException if the JSON string is invalid with respect to BucketLevelPermissions
   */
  public static BucketLevelPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketLevelPermissions.class);
  }

  /**
   * Convert an instance of BucketLevelPermissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

