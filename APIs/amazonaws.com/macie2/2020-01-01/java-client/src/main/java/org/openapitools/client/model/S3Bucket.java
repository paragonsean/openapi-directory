/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AllowsUnencryptedObjectUploads;
import org.openapitools.client.model.S3BucketDefaultServerSideEncryption;
import org.openapitools.client.model.S3BucketOwner;
import org.openapitools.client.model.S3BucketPublicAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the S3 bucket that a finding applies to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3Bucket {
  public static final String SERIALIZED_NAME_ALLOWS_UNENCRYPTED_OBJECT_UPLOADS = "allowsUnencryptedObjectUploads";
  @SerializedName(SERIALIZED_NAME_ALLOWS_UNENCRYPTED_OBJECT_UPLOADS)
  private AllowsUnencryptedObjectUploads allowsUnencryptedObjectUploads;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_SERVER_SIDE_ENCRYPTION = "defaultServerSideEncryption";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SERVER_SIDE_ENCRYPTION)
  private S3BucketDefaultServerSideEncryption defaultServerSideEncryption;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private S3BucketOwner owner;

  public static final String SERIALIZED_NAME_PUBLIC_ACCESS = "publicAccess";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ACCESS)
  private S3BucketPublicAccess publicAccess;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public S3Bucket() {
  }

  public S3Bucket allowsUnencryptedObjectUploads(AllowsUnencryptedObjectUploads allowsUnencryptedObjectUploads) {
    this.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads;
    return this;
  }

  /**
   * Get allowsUnencryptedObjectUploads
   * @return allowsUnencryptedObjectUploads
   */
  @javax.annotation.Nullable
  public AllowsUnencryptedObjectUploads getAllowsUnencryptedObjectUploads() {
    return allowsUnencryptedObjectUploads;
  }

  public void setAllowsUnencryptedObjectUploads(AllowsUnencryptedObjectUploads allowsUnencryptedObjectUploads) {
    this.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads;
  }


  public S3Bucket arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public S3Bucket createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public S3Bucket defaultServerSideEncryption(S3BucketDefaultServerSideEncryption defaultServerSideEncryption) {
    this.defaultServerSideEncryption = defaultServerSideEncryption;
    return this;
  }

  /**
   * Get defaultServerSideEncryption
   * @return defaultServerSideEncryption
   */
  @javax.annotation.Nullable
  public S3BucketDefaultServerSideEncryption getDefaultServerSideEncryption() {
    return defaultServerSideEncryption;
  }

  public void setDefaultServerSideEncryption(S3BucketDefaultServerSideEncryption defaultServerSideEncryption) {
    this.defaultServerSideEncryption = defaultServerSideEncryption;
  }


  public S3Bucket name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public S3Bucket owner(S3BucketOwner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public S3BucketOwner getOwner() {
    return owner;
  }

  public void setOwner(S3BucketOwner owner) {
    this.owner = owner;
  }


  public S3Bucket publicAccess(S3BucketPublicAccess publicAccess) {
    this.publicAccess = publicAccess;
    return this;
  }

  /**
   * Get publicAccess
   * @return publicAccess
   */
  @javax.annotation.Nullable
  public S3BucketPublicAccess getPublicAccess() {
    return publicAccess;
  }

  public void setPublicAccess(S3BucketPublicAccess publicAccess) {
    this.publicAccess = publicAccess;
  }


  public S3Bucket tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3Bucket s3Bucket = (S3Bucket) o;
    return Objects.equals(this.allowsUnencryptedObjectUploads, s3Bucket.allowsUnencryptedObjectUploads) &&
        Objects.equals(this.arn, s3Bucket.arn) &&
        Objects.equals(this.createdAt, s3Bucket.createdAt) &&
        Objects.equals(this.defaultServerSideEncryption, s3Bucket.defaultServerSideEncryption) &&
        Objects.equals(this.name, s3Bucket.name) &&
        Objects.equals(this.owner, s3Bucket.owner) &&
        Objects.equals(this.publicAccess, s3Bucket.publicAccess) &&
        Objects.equals(this.tags, s3Bucket.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsUnencryptedObjectUploads, arn, createdAt, defaultServerSideEncryption, name, owner, publicAccess, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3Bucket {\n");
    sb.append("    allowsUnencryptedObjectUploads: ").append(toIndentedString(allowsUnencryptedObjectUploads)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultServerSideEncryption: ").append(toIndentedString(defaultServerSideEncryption)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    publicAccess: ").append(toIndentedString(publicAccess)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowsUnencryptedObjectUploads");
    openapiFields.add("arn");
    openapiFields.add("createdAt");
    openapiFields.add("defaultServerSideEncryption");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("publicAccess");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3Bucket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3Bucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3Bucket is not found in the empty JSON string", S3Bucket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3Bucket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3Bucket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowsUnencryptedObjectUploads`
      if (jsonObj.get("allowsUnencryptedObjectUploads") != null && !jsonObj.get("allowsUnencryptedObjectUploads").isJsonNull()) {
        AllowsUnencryptedObjectUploads.validateJsonElement(jsonObj.get("allowsUnencryptedObjectUploads"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `defaultServerSideEncryption`
      if (jsonObj.get("defaultServerSideEncryption") != null && !jsonObj.get("defaultServerSideEncryption").isJsonNull()) {
        S3BucketDefaultServerSideEncryption.validateJsonElement(jsonObj.get("defaultServerSideEncryption"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        S3BucketOwner.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `publicAccess`
      if (jsonObj.get("publicAccess") != null && !jsonObj.get("publicAccess").isJsonNull()) {
        S3BucketPublicAccess.validateJsonElement(jsonObj.get("publicAccess"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3Bucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3Bucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3Bucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3Bucket.class));

       return (TypeAdapter<T>) new TypeAdapter<S3Bucket>() {
           @Override
           public void write(JsonWriter out, S3Bucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3Bucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3Bucket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3Bucket
   * @throws IOException if the JSON string is invalid with respect to S3Bucket
   */
  public static S3Bucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3Bucket.class);
  }

  /**
   * Convert an instance of S3Bucket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

