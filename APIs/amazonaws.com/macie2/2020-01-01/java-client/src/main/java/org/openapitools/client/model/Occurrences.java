/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the location of 1-15 occurrences of sensitive data that was detected by a managed data identifier or a custom data identifier and produced a sensitive data finding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Occurrences {
  public static final String SERIALIZED_NAME_CELLS = "cells";
  @SerializedName(SERIALIZED_NAME_CELLS)
  private List cells;

  public static final String SERIALIZED_NAME_LINE_RANGES = "lineRanges";
  @SerializedName(SERIALIZED_NAME_LINE_RANGES)
  private List lineRanges;

  public static final String SERIALIZED_NAME_OFFSET_RANGES = "offsetRanges";
  @SerializedName(SERIALIZED_NAME_OFFSET_RANGES)
  private List offsetRanges;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List pages;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List records;

  public Occurrences() {
  }

  public Occurrences cells(List cells) {
    this.cells = cells;
    return this;
  }

  /**
   * Get cells
   * @return cells
   */
  @javax.annotation.Nullable
  public List getCells() {
    return cells;
  }

  public void setCells(List cells) {
    this.cells = cells;
  }


  public Occurrences lineRanges(List lineRanges) {
    this.lineRanges = lineRanges;
    return this;
  }

  /**
   * Get lineRanges
   * @return lineRanges
   */
  @javax.annotation.Nullable
  public List getLineRanges() {
    return lineRanges;
  }

  public void setLineRanges(List lineRanges) {
    this.lineRanges = lineRanges;
  }


  public Occurrences offsetRanges(List offsetRanges) {
    this.offsetRanges = offsetRanges;
    return this;
  }

  /**
   * Get offsetRanges
   * @return offsetRanges
   */
  @javax.annotation.Nullable
  public List getOffsetRanges() {
    return offsetRanges;
  }

  public void setOffsetRanges(List offsetRanges) {
    this.offsetRanges = offsetRanges;
  }


  public Occurrences pages(List pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public List getPages() {
    return pages;
  }

  public void setPages(List pages) {
    this.pages = pages;
  }


  public Occurrences records(List records) {
    this.records = records;
    return this;
  }

  /**
   * Get records
   * @return records
   */
  @javax.annotation.Nullable
  public List getRecords() {
    return records;
  }

  public void setRecords(List records) {
    this.records = records;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Occurrences occurrences = (Occurrences) o;
    return Objects.equals(this.cells, occurrences.cells) &&
        Objects.equals(this.lineRanges, occurrences.lineRanges) &&
        Objects.equals(this.offsetRanges, occurrences.offsetRanges) &&
        Objects.equals(this.pages, occurrences.pages) &&
        Objects.equals(this.records, occurrences.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cells, lineRanges, offsetRanges, pages, records);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Occurrences {\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    lineRanges: ").append(toIndentedString(lineRanges)).append("\n");
    sb.append("    offsetRanges: ").append(toIndentedString(offsetRanges)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cells");
    openapiFields.add("lineRanges");
    openapiFields.add("offsetRanges");
    openapiFields.add("pages");
    openapiFields.add("records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Occurrences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Occurrences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Occurrences is not found in the empty JSON string", Occurrences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Occurrences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Occurrences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cells`
      if (jsonObj.get("cells") != null && !jsonObj.get("cells").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cells"));
      }
      // validate the optional field `lineRanges`
      if (jsonObj.get("lineRanges") != null && !jsonObj.get("lineRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("lineRanges"));
      }
      // validate the optional field `offsetRanges`
      if (jsonObj.get("offsetRanges") != null && !jsonObj.get("offsetRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("offsetRanges"));
      }
      // validate the optional field `pages`
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("pages"));
      }
      // validate the optional field `records`
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("records"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Occurrences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Occurrences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Occurrences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Occurrences.class));

       return (TypeAdapter<T>) new TypeAdapter<Occurrences>() {
           @Override
           public void write(JsonWriter out, Occurrences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Occurrences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Occurrences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Occurrences
   * @throws IOException if the JSON string is invalid with respect to Occurrences
   */
  public static Occurrences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Occurrences.class);
  }

  /**
   * Convert an instance of Occurrences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

