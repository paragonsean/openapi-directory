/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.UsageByAccountServiceLimit;
import org.openapitools.client.model.UsageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides data for a specific usage metric and the corresponding quota for an Amazon Macie account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageByAccount {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_ESTIMATED_COST = "estimatedCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_COST)
  private String estimatedCost;

  public static final String SERIALIZED_NAME_SERVICE_LIMIT = "serviceLimit";
  @SerializedName(SERIALIZED_NAME_SERVICE_LIMIT)
  private UsageByAccountServiceLimit serviceLimit;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private UsageType type;

  public UsageByAccount() {
  }

  public UsageByAccount currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public UsageByAccount estimatedCost(String estimatedCost) {
    this.estimatedCost = estimatedCost;
    return this;
  }

  /**
   * Get estimatedCost
   * @return estimatedCost
   */
  @javax.annotation.Nullable
  public String getEstimatedCost() {
    return estimatedCost;
  }

  public void setEstimatedCost(String estimatedCost) {
    this.estimatedCost = estimatedCost;
  }


  public UsageByAccount serviceLimit(UsageByAccountServiceLimit serviceLimit) {
    this.serviceLimit = serviceLimit;
    return this;
  }

  /**
   * Get serviceLimit
   * @return serviceLimit
   */
  @javax.annotation.Nullable
  public UsageByAccountServiceLimit getServiceLimit() {
    return serviceLimit;
  }

  public void setServiceLimit(UsageByAccountServiceLimit serviceLimit) {
    this.serviceLimit = serviceLimit;
  }


  public UsageByAccount type(UsageType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public UsageType getType() {
    return type;
  }

  public void setType(UsageType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageByAccount usageByAccount = (UsageByAccount) o;
    return Objects.equals(this.currency, usageByAccount.currency) &&
        Objects.equals(this.estimatedCost, usageByAccount.estimatedCost) &&
        Objects.equals(this.serviceLimit, usageByAccount.serviceLimit) &&
        Objects.equals(this.type, usageByAccount.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, estimatedCost, serviceLimit, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageByAccount {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    estimatedCost: ").append(toIndentedString(estimatedCost)).append("\n");
    sb.append("    serviceLimit: ").append(toIndentedString(serviceLimit)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("estimatedCost");
    openapiFields.add("serviceLimit");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageByAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageByAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageByAccount is not found in the empty JSON string", UsageByAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageByAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageByAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `estimatedCost`
      if (jsonObj.get("estimatedCost") != null && !jsonObj.get("estimatedCost").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("estimatedCost"));
      }
      // validate the optional field `serviceLimit`
      if (jsonObj.get("serviceLimit") != null && !jsonObj.get("serviceLimit").isJsonNull()) {
        UsageByAccountServiceLimit.validateJsonElement(jsonObj.get("serviceLimit"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        UsageType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageByAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageByAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageByAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageByAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageByAccount>() {
           @Override
           public void write(JsonWriter out, UsageByAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageByAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageByAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageByAccount
   * @throws IOException if the JSON string is invalid with respect to UsageByAccount
   */
  public static UsageByAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageByAccount.class);
  }

  /**
   * Convert an instance of UsageByAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

