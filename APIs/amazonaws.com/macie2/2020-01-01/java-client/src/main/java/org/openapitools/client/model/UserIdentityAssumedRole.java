/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssumedRoleSessionContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserIdentityAssumedRole
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserIdentityAssumedRole {
  public static final String SERIALIZED_NAME_ACCESS_KEY_ID = "accessKeyId";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY_ID)
  private String accessKeyId;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private String principalId;

  public static final String SERIALIZED_NAME_SESSION_CONTEXT = "sessionContext";
  @SerializedName(SERIALIZED_NAME_SESSION_CONTEXT)
  private AssumedRoleSessionContext sessionContext;

  public UserIdentityAssumedRole() {
  }

  public UserIdentityAssumedRole accessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
    return this;
  }

  /**
   * Get accessKeyId
   * @return accessKeyId
   */
  @javax.annotation.Nullable
  public String getAccessKeyId() {
    return accessKeyId;
  }

  public void setAccessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
  }


  public UserIdentityAssumedRole accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public UserIdentityAssumedRole arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UserIdentityAssumedRole principalId(String principalId) {
    this.principalId = principalId;
    return this;
  }

  /**
   * Get principalId
   * @return principalId
   */
  @javax.annotation.Nullable
  public String getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(String principalId) {
    this.principalId = principalId;
  }


  public UserIdentityAssumedRole sessionContext(AssumedRoleSessionContext sessionContext) {
    this.sessionContext = sessionContext;
    return this;
  }

  /**
   * Get sessionContext
   * @return sessionContext
   */
  @javax.annotation.Nullable
  public AssumedRoleSessionContext getSessionContext() {
    return sessionContext;
  }

  public void setSessionContext(AssumedRoleSessionContext sessionContext) {
    this.sessionContext = sessionContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserIdentityAssumedRole userIdentityAssumedRole = (UserIdentityAssumedRole) o;
    return Objects.equals(this.accessKeyId, userIdentityAssumedRole.accessKeyId) &&
        Objects.equals(this.accountId, userIdentityAssumedRole.accountId) &&
        Objects.equals(this.arn, userIdentityAssumedRole.arn) &&
        Objects.equals(this.principalId, userIdentityAssumedRole.principalId) &&
        Objects.equals(this.sessionContext, userIdentityAssumedRole.sessionContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKeyId, accountId, arn, principalId, sessionContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserIdentityAssumedRole {\n");
    sb.append("    accessKeyId: ").append(toIndentedString(accessKeyId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    sessionContext: ").append(toIndentedString(sessionContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessKeyId");
    openapiFields.add("accountId");
    openapiFields.add("arn");
    openapiFields.add("principalId");
    openapiFields.add("sessionContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserIdentityAssumedRole
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserIdentityAssumedRole.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserIdentityAssumedRole is not found in the empty JSON string", UserIdentityAssumedRole.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserIdentityAssumedRole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserIdentityAssumedRole` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessKeyId`
      if (jsonObj.get("accessKeyId") != null && !jsonObj.get("accessKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accessKeyId"));
      }
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `principalId`
      if (jsonObj.get("principalId") != null && !jsonObj.get("principalId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("principalId"));
      }
      // validate the optional field `sessionContext`
      if (jsonObj.get("sessionContext") != null && !jsonObj.get("sessionContext").isJsonNull()) {
        AssumedRoleSessionContext.validateJsonElement(jsonObj.get("sessionContext"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserIdentityAssumedRole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserIdentityAssumedRole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserIdentityAssumedRole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserIdentityAssumedRole.class));

       return (TypeAdapter<T>) new TypeAdapter<UserIdentityAssumedRole>() {
           @Override
           public void write(JsonWriter out, UserIdentityAssumedRole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserIdentityAssumedRole read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserIdentityAssumedRole given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserIdentityAssumedRole
   * @throws IOException if the JSON string is invalid with respect to UserIdentityAssumedRole
   */
  public static UserIdentityAssumedRole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserIdentityAssumedRole.class);
  }

  /**
   * Convert an instance of UserIdentityAssumedRole to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

