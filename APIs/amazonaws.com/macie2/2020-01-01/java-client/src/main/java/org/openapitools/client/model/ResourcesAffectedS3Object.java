/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.S3ObjectServerSideEncryption;
import org.openapitools.client.model.StorageClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourcesAffectedS3Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourcesAffectedS3Object {
  public static final String SERIALIZED_NAME_BUCKET_ARN = "bucketArn";
  @SerializedName(SERIALIZED_NAME_BUCKET_ARN)
  private String bucketArn;

  public static final String SERIALIZED_NAME_E_TAG = "eTag";
  @SerializedName(SERIALIZED_NAME_E_TAG)
  private String eTag;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PUBLIC_ACCESS = "publicAccess";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ACCESS)
  private Boolean publicAccess;

  public static final String SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION = "serverSideEncryption";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION)
  private S3ObjectServerSideEncryption serverSideEncryption;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private StorageClass storageClass;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public ResourcesAffectedS3Object() {
  }

  public ResourcesAffectedS3Object bucketArn(String bucketArn) {
    this.bucketArn = bucketArn;
    return this;
  }

  /**
   * Get bucketArn
   * @return bucketArn
   */
  @javax.annotation.Nullable
  public String getBucketArn() {
    return bucketArn;
  }

  public void setBucketArn(String bucketArn) {
    this.bucketArn = bucketArn;
  }


  public ResourcesAffectedS3Object eTag(String eTag) {
    this.eTag = eTag;
    return this;
  }

  /**
   * Get eTag
   * @return eTag
   */
  @javax.annotation.Nullable
  public String geteTag() {
    return eTag;
  }

  public void seteTag(String eTag) {
    this.eTag = eTag;
  }


  public ResourcesAffectedS3Object extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Get extension
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public ResourcesAffectedS3Object key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ResourcesAffectedS3Object lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public ResourcesAffectedS3Object path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ResourcesAffectedS3Object publicAccess(Boolean publicAccess) {
    this.publicAccess = publicAccess;
    return this;
  }

  /**
   * Get publicAccess
   * @return publicAccess
   */
  @javax.annotation.Nullable
  public Boolean getPublicAccess() {
    return publicAccess;
  }

  public void setPublicAccess(Boolean publicAccess) {
    this.publicAccess = publicAccess;
  }


  public ResourcesAffectedS3Object serverSideEncryption(S3ObjectServerSideEncryption serverSideEncryption) {
    this.serverSideEncryption = serverSideEncryption;
    return this;
  }

  /**
   * Get serverSideEncryption
   * @return serverSideEncryption
   */
  @javax.annotation.Nullable
  public S3ObjectServerSideEncryption getServerSideEncryption() {
    return serverSideEncryption;
  }

  public void setServerSideEncryption(S3ObjectServerSideEncryption serverSideEncryption) {
    this.serverSideEncryption = serverSideEncryption;
  }


  public ResourcesAffectedS3Object size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public ResourcesAffectedS3Object storageClass(StorageClass storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * Get storageClass
   * @return storageClass
   */
  @javax.annotation.Nullable
  public StorageClass getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(StorageClass storageClass) {
    this.storageClass = storageClass;
  }


  public ResourcesAffectedS3Object tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public ResourcesAffectedS3Object versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourcesAffectedS3Object resourcesAffectedS3Object = (ResourcesAffectedS3Object) o;
    return Objects.equals(this.bucketArn, resourcesAffectedS3Object.bucketArn) &&
        Objects.equals(this.eTag, resourcesAffectedS3Object.eTag) &&
        Objects.equals(this.extension, resourcesAffectedS3Object.extension) &&
        Objects.equals(this.key, resourcesAffectedS3Object.key) &&
        Objects.equals(this.lastModified, resourcesAffectedS3Object.lastModified) &&
        Objects.equals(this.path, resourcesAffectedS3Object.path) &&
        Objects.equals(this.publicAccess, resourcesAffectedS3Object.publicAccess) &&
        Objects.equals(this.serverSideEncryption, resourcesAffectedS3Object.serverSideEncryption) &&
        Objects.equals(this.size, resourcesAffectedS3Object.size) &&
        Objects.equals(this.storageClass, resourcesAffectedS3Object.storageClass) &&
        Objects.equals(this.tags, resourcesAffectedS3Object.tags) &&
        Objects.equals(this.versionId, resourcesAffectedS3Object.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketArn, eTag, extension, key, lastModified, path, publicAccess, serverSideEncryption, size, storageClass, tags, versionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourcesAffectedS3Object {\n");
    sb.append("    bucketArn: ").append(toIndentedString(bucketArn)).append("\n");
    sb.append("    eTag: ").append(toIndentedString(eTag)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    publicAccess: ").append(toIndentedString(publicAccess)).append("\n");
    sb.append("    serverSideEncryption: ").append(toIndentedString(serverSideEncryption)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketArn");
    openapiFields.add("eTag");
    openapiFields.add("extension");
    openapiFields.add("key");
    openapiFields.add("lastModified");
    openapiFields.add("path");
    openapiFields.add("publicAccess");
    openapiFields.add("serverSideEncryption");
    openapiFields.add("size");
    openapiFields.add("storageClass");
    openapiFields.add("tags");
    openapiFields.add("versionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourcesAffectedS3Object
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourcesAffectedS3Object.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourcesAffectedS3Object is not found in the empty JSON string", ResourcesAffectedS3Object.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourcesAffectedS3Object.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourcesAffectedS3Object` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucketArn`
      if (jsonObj.get("bucketArn") != null && !jsonObj.get("bucketArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucketArn"));
      }
      // validate the optional field `eTag`
      if (jsonObj.get("eTag") != null && !jsonObj.get("eTag").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eTag"));
      }
      // validate the optional field `extension`
      if (jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("extension"));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("key"));
      }
      // validate the optional field `lastModified`
      if (jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastModified"));
      }
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("path"));
      }
      // validate the optional field `publicAccess`
      if (jsonObj.get("publicAccess") != null && !jsonObj.get("publicAccess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("publicAccess"));
      }
      // validate the optional field `serverSideEncryption`
      if (jsonObj.get("serverSideEncryption") != null && !jsonObj.get("serverSideEncryption").isJsonNull()) {
        S3ObjectServerSideEncryption.validateJsonElement(jsonObj.get("serverSideEncryption"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("size"));
      }
      // validate the optional field `storageClass`
      if (jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) {
        StorageClass.validateJsonElement(jsonObj.get("storageClass"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `versionId`
      if (jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("versionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourcesAffectedS3Object.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourcesAffectedS3Object' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourcesAffectedS3Object> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourcesAffectedS3Object.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourcesAffectedS3Object>() {
           @Override
           public void write(JsonWriter out, ResourcesAffectedS3Object value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourcesAffectedS3Object read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourcesAffectedS3Object given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourcesAffectedS3Object
   * @throws IOException if the JSON string is invalid with respect to ResourcesAffectedS3Object
   */
  public static ResourcesAffectedS3Object fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourcesAffectedS3Object.class);
  }

  /**
   * Convert an instance of ResourcesAffectedS3Object to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

