/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BucketStatisticsBySensitivityClassificationError;
import org.openapitools.client.model.BucketStatisticsBySensitivityNotClassified;
import org.openapitools.client.model.BucketStatisticsBySensitivityNotSensitive;
import org.openapitools.client.model.BucketStatisticsBySensitivitySensitive;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides aggregated statistical data for sensitive data discovery metrics that apply to S3 buckets, grouped by bucket sensitivity score (sensitivityScore). If automated sensitive data discovery is currently disabled for your account, the value for each metric is 0.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketStatisticsBySensitivity {
  public static final String SERIALIZED_NAME_CLASSIFICATION_ERROR = "classificationError";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_ERROR)
  private BucketStatisticsBySensitivityClassificationError classificationError;

  public static final String SERIALIZED_NAME_NOT_CLASSIFIED = "notClassified";
  @SerializedName(SERIALIZED_NAME_NOT_CLASSIFIED)
  private BucketStatisticsBySensitivityNotClassified notClassified;

  public static final String SERIALIZED_NAME_NOT_SENSITIVE = "notSensitive";
  @SerializedName(SERIALIZED_NAME_NOT_SENSITIVE)
  private BucketStatisticsBySensitivityNotSensitive notSensitive;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private BucketStatisticsBySensitivitySensitive sensitive;

  public BucketStatisticsBySensitivity() {
  }

  public BucketStatisticsBySensitivity classificationError(BucketStatisticsBySensitivityClassificationError classificationError) {
    this.classificationError = classificationError;
    return this;
  }

  /**
   * Get classificationError
   * @return classificationError
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivityClassificationError getClassificationError() {
    return classificationError;
  }

  public void setClassificationError(BucketStatisticsBySensitivityClassificationError classificationError) {
    this.classificationError = classificationError;
  }


  public BucketStatisticsBySensitivity notClassified(BucketStatisticsBySensitivityNotClassified notClassified) {
    this.notClassified = notClassified;
    return this;
  }

  /**
   * Get notClassified
   * @return notClassified
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivityNotClassified getNotClassified() {
    return notClassified;
  }

  public void setNotClassified(BucketStatisticsBySensitivityNotClassified notClassified) {
    this.notClassified = notClassified;
  }


  public BucketStatisticsBySensitivity notSensitive(BucketStatisticsBySensitivityNotSensitive notSensitive) {
    this.notSensitive = notSensitive;
    return this;
  }

  /**
   * Get notSensitive
   * @return notSensitive
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivityNotSensitive getNotSensitive() {
    return notSensitive;
  }

  public void setNotSensitive(BucketStatisticsBySensitivityNotSensitive notSensitive) {
    this.notSensitive = notSensitive;
  }


  public BucketStatisticsBySensitivity sensitive(BucketStatisticsBySensitivitySensitive sensitive) {
    this.sensitive = sensitive;
    return this;
  }

  /**
   * Get sensitive
   * @return sensitive
   */
  @javax.annotation.Nullable
  public BucketStatisticsBySensitivitySensitive getSensitive() {
    return sensitive;
  }

  public void setSensitive(BucketStatisticsBySensitivitySensitive sensitive) {
    this.sensitive = sensitive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketStatisticsBySensitivity bucketStatisticsBySensitivity = (BucketStatisticsBySensitivity) o;
    return Objects.equals(this.classificationError, bucketStatisticsBySensitivity.classificationError) &&
        Objects.equals(this.notClassified, bucketStatisticsBySensitivity.notClassified) &&
        Objects.equals(this.notSensitive, bucketStatisticsBySensitivity.notSensitive) &&
        Objects.equals(this.sensitive, bucketStatisticsBySensitivity.sensitive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationError, notClassified, notSensitive, sensitive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketStatisticsBySensitivity {\n");
    sb.append("    classificationError: ").append(toIndentedString(classificationError)).append("\n");
    sb.append("    notClassified: ").append(toIndentedString(notClassified)).append("\n");
    sb.append("    notSensitive: ").append(toIndentedString(notSensitive)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classificationError");
    openapiFields.add("notClassified");
    openapiFields.add("notSensitive");
    openapiFields.add("sensitive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketStatisticsBySensitivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketStatisticsBySensitivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketStatisticsBySensitivity is not found in the empty JSON string", BucketStatisticsBySensitivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketStatisticsBySensitivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketStatisticsBySensitivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `classificationError`
      if (jsonObj.get("classificationError") != null && !jsonObj.get("classificationError").isJsonNull()) {
        BucketStatisticsBySensitivityClassificationError.validateJsonElement(jsonObj.get("classificationError"));
      }
      // validate the optional field `notClassified`
      if (jsonObj.get("notClassified") != null && !jsonObj.get("notClassified").isJsonNull()) {
        BucketStatisticsBySensitivityNotClassified.validateJsonElement(jsonObj.get("notClassified"));
      }
      // validate the optional field `notSensitive`
      if (jsonObj.get("notSensitive") != null && !jsonObj.get("notSensitive").isJsonNull()) {
        BucketStatisticsBySensitivityNotSensitive.validateJsonElement(jsonObj.get("notSensitive"));
      }
      // validate the optional field `sensitive`
      if (jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) {
        BucketStatisticsBySensitivitySensitive.validateJsonElement(jsonObj.get("sensitive"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketStatisticsBySensitivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketStatisticsBySensitivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketStatisticsBySensitivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketStatisticsBySensitivity.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketStatisticsBySensitivity>() {
           @Override
           public void write(JsonWriter out, BucketStatisticsBySensitivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketStatisticsBySensitivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketStatisticsBySensitivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketStatisticsBySensitivity
   * @throws IOException if the JSON string is invalid with respect to BucketStatisticsBySensitivity
   */
  public static BucketStatisticsBySensitivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketStatisticsBySensitivity.class);
  }

  /**
   * Convert an instance of BucketStatisticsBySensitivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

