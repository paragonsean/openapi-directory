/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the operator to use in a property-based condition that filters the results of a query for findings. For detailed information and examples of each operator, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/macie/latest/user/findings-filter-basics.html\&quot;&gt;Fundamentals of filtering findings&lt;/a&gt; in the &lt;i&gt;Amazon Macie User Guide&lt;/i&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CriterionAdditionalProperties {
  public static final String SERIALIZED_NAME_EQ = "eq";
  @SerializedName(SERIALIZED_NAME_EQ)
  private List eq;

  public static final String SERIALIZED_NAME_EQ_EXACT_MATCH = "eqExactMatch";
  @SerializedName(SERIALIZED_NAME_EQ_EXACT_MATCH)
  private List eqExactMatch;

  public static final String SERIALIZED_NAME_GT = "gt";
  @SerializedName(SERIALIZED_NAME_GT)
  private Integer gt;

  public static final String SERIALIZED_NAME_GTE = "gte";
  @SerializedName(SERIALIZED_NAME_GTE)
  private Integer gte;

  public static final String SERIALIZED_NAME_LT = "lt";
  @SerializedName(SERIALIZED_NAME_LT)
  private Integer lt;

  public static final String SERIALIZED_NAME_LTE = "lte";
  @SerializedName(SERIALIZED_NAME_LTE)
  private Integer lte;

  public static final String SERIALIZED_NAME_NEQ = "neq";
  @SerializedName(SERIALIZED_NAME_NEQ)
  private List neq;

  public CriterionAdditionalProperties() {
  }

  public CriterionAdditionalProperties eq(List eq) {
    this.eq = eq;
    return this;
  }

  /**
   * Get eq
   * @return eq
   */
  @javax.annotation.Nullable
  public List getEq() {
    return eq;
  }

  public void setEq(List eq) {
    this.eq = eq;
  }


  public CriterionAdditionalProperties eqExactMatch(List eqExactMatch) {
    this.eqExactMatch = eqExactMatch;
    return this;
  }

  /**
   * Get eqExactMatch
   * @return eqExactMatch
   */
  @javax.annotation.Nullable
  public List getEqExactMatch() {
    return eqExactMatch;
  }

  public void setEqExactMatch(List eqExactMatch) {
    this.eqExactMatch = eqExactMatch;
  }


  public CriterionAdditionalProperties gt(Integer gt) {
    this.gt = gt;
    return this;
  }

  /**
   * Get gt
   * @return gt
   */
  @javax.annotation.Nullable
  public Integer getGt() {
    return gt;
  }

  public void setGt(Integer gt) {
    this.gt = gt;
  }


  public CriterionAdditionalProperties gte(Integer gte) {
    this.gte = gte;
    return this;
  }

  /**
   * Get gte
   * @return gte
   */
  @javax.annotation.Nullable
  public Integer getGte() {
    return gte;
  }

  public void setGte(Integer gte) {
    this.gte = gte;
  }


  public CriterionAdditionalProperties lt(Integer lt) {
    this.lt = lt;
    return this;
  }

  /**
   * Get lt
   * @return lt
   */
  @javax.annotation.Nullable
  public Integer getLt() {
    return lt;
  }

  public void setLt(Integer lt) {
    this.lt = lt;
  }


  public CriterionAdditionalProperties lte(Integer lte) {
    this.lte = lte;
    return this;
  }

  /**
   * Get lte
   * @return lte
   */
  @javax.annotation.Nullable
  public Integer getLte() {
    return lte;
  }

  public void setLte(Integer lte) {
    this.lte = lte;
  }


  public CriterionAdditionalProperties neq(List neq) {
    this.neq = neq;
    return this;
  }

  /**
   * Get neq
   * @return neq
   */
  @javax.annotation.Nullable
  public List getNeq() {
    return neq;
  }

  public void setNeq(List neq) {
    this.neq = neq;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CriterionAdditionalProperties criterionAdditionalProperties = (CriterionAdditionalProperties) o;
    return Objects.equals(this.eq, criterionAdditionalProperties.eq) &&
        Objects.equals(this.eqExactMatch, criterionAdditionalProperties.eqExactMatch) &&
        Objects.equals(this.gt, criterionAdditionalProperties.gt) &&
        Objects.equals(this.gte, criterionAdditionalProperties.gte) &&
        Objects.equals(this.lt, criterionAdditionalProperties.lt) &&
        Objects.equals(this.lte, criterionAdditionalProperties.lte) &&
        Objects.equals(this.neq, criterionAdditionalProperties.neq);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eq, eqExactMatch, gt, gte, lt, lte, neq);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CriterionAdditionalProperties {\n");
    sb.append("    eq: ").append(toIndentedString(eq)).append("\n");
    sb.append("    eqExactMatch: ").append(toIndentedString(eqExactMatch)).append("\n");
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    gte: ").append(toIndentedString(gte)).append("\n");
    sb.append("    lt: ").append(toIndentedString(lt)).append("\n");
    sb.append("    lte: ").append(toIndentedString(lte)).append("\n");
    sb.append("    neq: ").append(toIndentedString(neq)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eq");
    openapiFields.add("eqExactMatch");
    openapiFields.add("gt");
    openapiFields.add("gte");
    openapiFields.add("lt");
    openapiFields.add("lte");
    openapiFields.add("neq");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CriterionAdditionalProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CriterionAdditionalProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CriterionAdditionalProperties is not found in the empty JSON string", CriterionAdditionalProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CriterionAdditionalProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CriterionAdditionalProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eq`
      if (jsonObj.get("eq") != null && !jsonObj.get("eq").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("eq"));
      }
      // validate the optional field `eqExactMatch`
      if (jsonObj.get("eqExactMatch") != null && !jsonObj.get("eqExactMatch").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("eqExactMatch"));
      }
      // validate the optional field `gt`
      if (jsonObj.get("gt") != null && !jsonObj.get("gt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("gt"));
      }
      // validate the optional field `gte`
      if (jsonObj.get("gte") != null && !jsonObj.get("gte").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("gte"));
      }
      // validate the optional field `lt`
      if (jsonObj.get("lt") != null && !jsonObj.get("lt").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lt"));
      }
      // validate the optional field `lte`
      if (jsonObj.get("lte") != null && !jsonObj.get("lte").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lte"));
      }
      // validate the optional field `neq`
      if (jsonObj.get("neq") != null && !jsonObj.get("neq").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("neq"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CriterionAdditionalProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CriterionAdditionalProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CriterionAdditionalProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CriterionAdditionalProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CriterionAdditionalProperties>() {
           @Override
           public void write(JsonWriter out, CriterionAdditionalProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CriterionAdditionalProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CriterionAdditionalProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CriterionAdditionalProperties
   * @throws IOException if the JSON string is invalid with respect to CriterionAdditionalProperties
   */
  public static CriterionAdditionalProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CriterionAdditionalProperties.class);
  }

  /**
   * Convert an instance of CriterionAdditionalProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

