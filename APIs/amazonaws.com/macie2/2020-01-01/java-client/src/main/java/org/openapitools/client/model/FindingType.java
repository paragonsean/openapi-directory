/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of finding. For details about each type, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/macie/latest/user/findings-types.html\&quot;&gt;Types of Amazon Macie findings&lt;/a&gt; in the &lt;i&gt;Amazon Macie User Guide&lt;/i&gt;. Possible values are:
 */
@JsonAdapter(FindingType.Adapter.class)
public enum FindingType {
  
  SENSITIVE_DATA_S3_OBJECT_MULTIPLE("SensitiveData:S3Object/Multiple"),
  
  SENSITIVE_DATA_S3_OBJECT_FINANCIAL("SensitiveData:S3Object/Financial"),
  
  SENSITIVE_DATA_S3_OBJECT_PERSONAL("SensitiveData:S3Object/Personal"),
  
  SENSITIVE_DATA_S3_OBJECT_CREDENTIALS("SensitiveData:S3Object/Credentials"),
  
  SENSITIVE_DATA_S3_OBJECT_CUSTOM_IDENTIFIER("SensitiveData:S3Object/CustomIdentifier"),
  
  POLICY_IAM_USER_S3_BUCKET_PUBLIC("Policy:IAMUser/S3BucketPublic"),
  
  POLICY_IAM_USER_S3_BUCKET_SHARED_EXTERNALLY("Policy:IAMUser/S3BucketSharedExternally"),
  
  POLICY_IAM_USER_S3_BUCKET_REPLICATED_EXTERNALLY("Policy:IAMUser/S3BucketReplicatedExternally"),
  
  POLICY_IAM_USER_S3_BUCKET_ENCRYPTION_DISABLED("Policy:IAMUser/S3BucketEncryptionDisabled"),
  
  POLICY_IAM_USER_S3_BLOCK_PUBLIC_ACCESS_DISABLED("Policy:IAMUser/S3BlockPublicAccessDisabled"),
  
  POLICY_IAM_USER_S3_BUCKET_SHARED_WITH_CLOUD_FRONT("Policy:IAMUser/S3BucketSharedWithCloudFront");

  private String value;

  FindingType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FindingType fromValue(String value) {
    for (FindingType b : FindingType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FindingType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FindingType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FindingType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FindingType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FindingType.fromValue(value);
  }
}

