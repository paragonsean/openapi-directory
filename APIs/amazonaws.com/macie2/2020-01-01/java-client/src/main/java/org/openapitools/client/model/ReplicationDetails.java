/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about settings that define whether one or more objects in an S3 bucket are replicated to S3 buckets for other Amazon Web Services accounts and, if so, which accounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationDetails {
  public static final String SERIALIZED_NAME_REPLICATED = "replicated";
  @SerializedName(SERIALIZED_NAME_REPLICATED)
  private Boolean replicated;

  public static final String SERIALIZED_NAME_REPLICATED_EXTERNALLY = "replicatedExternally";
  @SerializedName(SERIALIZED_NAME_REPLICATED_EXTERNALLY)
  private Boolean replicatedExternally;

  public static final String SERIALIZED_NAME_REPLICATION_ACCOUNTS = "replicationAccounts";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ACCOUNTS)
  private List replicationAccounts;

  public ReplicationDetails() {
  }

  public ReplicationDetails replicated(Boolean replicated) {
    this.replicated = replicated;
    return this;
  }

  /**
   * Get replicated
   * @return replicated
   */
  @javax.annotation.Nullable
  public Boolean getReplicated() {
    return replicated;
  }

  public void setReplicated(Boolean replicated) {
    this.replicated = replicated;
  }


  public ReplicationDetails replicatedExternally(Boolean replicatedExternally) {
    this.replicatedExternally = replicatedExternally;
    return this;
  }

  /**
   * Get replicatedExternally
   * @return replicatedExternally
   */
  @javax.annotation.Nullable
  public Boolean getReplicatedExternally() {
    return replicatedExternally;
  }

  public void setReplicatedExternally(Boolean replicatedExternally) {
    this.replicatedExternally = replicatedExternally;
  }


  public ReplicationDetails replicationAccounts(List replicationAccounts) {
    this.replicationAccounts = replicationAccounts;
    return this;
  }

  /**
   * Get replicationAccounts
   * @return replicationAccounts
   */
  @javax.annotation.Nullable
  public List getReplicationAccounts() {
    return replicationAccounts;
  }

  public void setReplicationAccounts(List replicationAccounts) {
    this.replicationAccounts = replicationAccounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationDetails replicationDetails = (ReplicationDetails) o;
    return Objects.equals(this.replicated, replicationDetails.replicated) &&
        Objects.equals(this.replicatedExternally, replicationDetails.replicatedExternally) &&
        Objects.equals(this.replicationAccounts, replicationDetails.replicationAccounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicated, replicatedExternally, replicationAccounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationDetails {\n");
    sb.append("    replicated: ").append(toIndentedString(replicated)).append("\n");
    sb.append("    replicatedExternally: ").append(toIndentedString(replicatedExternally)).append("\n");
    sb.append("    replicationAccounts: ").append(toIndentedString(replicationAccounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("replicated");
    openapiFields.add("replicatedExternally");
    openapiFields.add("replicationAccounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationDetails is not found in the empty JSON string", ReplicationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `replicated`
      if (jsonObj.get("replicated") != null && !jsonObj.get("replicated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("replicated"));
      }
      // validate the optional field `replicatedExternally`
      if (jsonObj.get("replicatedExternally") != null && !jsonObj.get("replicatedExternally").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("replicatedExternally"));
      }
      // validate the optional field `replicationAccounts`
      if (jsonObj.get("replicationAccounts") != null && !jsonObj.get("replicationAccounts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("replicationAccounts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationDetails>() {
           @Override
           public void write(JsonWriter out, ReplicationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationDetails
   * @throws IOException if the JSON string is invalid with respect to ReplicationDetails
   */
  public static ReplicationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationDetails.class);
  }

  /**
   * Convert an instance of ReplicationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

