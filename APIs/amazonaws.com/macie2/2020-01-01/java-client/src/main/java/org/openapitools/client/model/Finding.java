/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FindingCategory;
import org.openapitools.client.model.FindingClassificationDetails;
import org.openapitools.client.model.FindingPolicyDetails;
import org.openapitools.client.model.FindingResourcesAffected;
import org.openapitools.client.model.FindingSeverity;
import org.openapitools.client.model.FindingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides the details of a finding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:49.935146-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Finding {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private FindingCategory category;

  public static final String SERIALIZED_NAME_CLASSIFICATION_DETAILS = "classificationDetails";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_DETAILS)
  private FindingClassificationDetails classificationDetails;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_POLICY_DETAILS = "policyDetails";
  @SerializedName(SERIALIZED_NAME_POLICY_DETAILS)
  private FindingPolicyDetails policyDetails;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESOURCES_AFFECTED = "resourcesAffected";
  @SerializedName(SERIALIZED_NAME_RESOURCES_AFFECTED)
  private FindingResourcesAffected resourcesAffected;

  public static final String SERIALIZED_NAME_SAMPLE = "sample";
  @SerializedName(SERIALIZED_NAME_SAMPLE)
  private Boolean sample;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private FindingSeverity severity;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private FindingType type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Finding() {
  }

  public Finding accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Finding archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Finding category(FindingCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public FindingCategory getCategory() {
    return category;
  }

  public void setCategory(FindingCategory category) {
    this.category = category;
  }


  public Finding classificationDetails(FindingClassificationDetails classificationDetails) {
    this.classificationDetails = classificationDetails;
    return this;
  }

  /**
   * Get classificationDetails
   * @return classificationDetails
   */
  @javax.annotation.Nullable
  public FindingClassificationDetails getClassificationDetails() {
    return classificationDetails;
  }

  public void setClassificationDetails(FindingClassificationDetails classificationDetails) {
    this.classificationDetails = classificationDetails;
  }


  public Finding count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public Finding createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Finding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Finding id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Finding partition(String partition) {
    this.partition = partition;
    return this;
  }

  /**
   * Get partition
   * @return partition
   */
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }


  public Finding policyDetails(FindingPolicyDetails policyDetails) {
    this.policyDetails = policyDetails;
    return this;
  }

  /**
   * Get policyDetails
   * @return policyDetails
   */
  @javax.annotation.Nullable
  public FindingPolicyDetails getPolicyDetails() {
    return policyDetails;
  }

  public void setPolicyDetails(FindingPolicyDetails policyDetails) {
    this.policyDetails = policyDetails;
  }


  public Finding region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Finding resourcesAffected(FindingResourcesAffected resourcesAffected) {
    this.resourcesAffected = resourcesAffected;
    return this;
  }

  /**
   * Get resourcesAffected
   * @return resourcesAffected
   */
  @javax.annotation.Nullable
  public FindingResourcesAffected getResourcesAffected() {
    return resourcesAffected;
  }

  public void setResourcesAffected(FindingResourcesAffected resourcesAffected) {
    this.resourcesAffected = resourcesAffected;
  }


  public Finding sample(Boolean sample) {
    this.sample = sample;
    return this;
  }

  /**
   * Get sample
   * @return sample
   */
  @javax.annotation.Nullable
  public Boolean getSample() {
    return sample;
  }

  public void setSample(Boolean sample) {
    this.sample = sample;
  }


  public Finding schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public Finding severity(FindingSeverity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public FindingSeverity getSeverity() {
    return severity;
  }

  public void setSeverity(FindingSeverity severity) {
    this.severity = severity;
  }


  public Finding title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Finding type(FindingType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public FindingType getType() {
    return type;
  }

  public void setType(FindingType type) {
    this.type = type;
  }


  public Finding updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Finding finding = (Finding) o;
    return Objects.equals(this.accountId, finding.accountId) &&
        Objects.equals(this.archived, finding.archived) &&
        Objects.equals(this.category, finding.category) &&
        Objects.equals(this.classificationDetails, finding.classificationDetails) &&
        Objects.equals(this.count, finding.count) &&
        Objects.equals(this.createdAt, finding.createdAt) &&
        Objects.equals(this.description, finding.description) &&
        Objects.equals(this.id, finding.id) &&
        Objects.equals(this.partition, finding.partition) &&
        Objects.equals(this.policyDetails, finding.policyDetails) &&
        Objects.equals(this.region, finding.region) &&
        Objects.equals(this.resourcesAffected, finding.resourcesAffected) &&
        Objects.equals(this.sample, finding.sample) &&
        Objects.equals(this.schemaVersion, finding.schemaVersion) &&
        Objects.equals(this.severity, finding.severity) &&
        Objects.equals(this.title, finding.title) &&
        Objects.equals(this.type, finding.type) &&
        Objects.equals(this.updatedAt, finding.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, archived, category, classificationDetails, count, createdAt, description, id, partition, policyDetails, region, resourcesAffected, sample, schemaVersion, severity, title, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Finding {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    classificationDetails: ").append(toIndentedString(classificationDetails)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    policyDetails: ").append(toIndentedString(policyDetails)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    resourcesAffected: ").append(toIndentedString(resourcesAffected)).append("\n");
    sb.append("    sample: ").append(toIndentedString(sample)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("archived");
    openapiFields.add("category");
    openapiFields.add("classificationDetails");
    openapiFields.add("count");
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("partition");
    openapiFields.add("policyDetails");
    openapiFields.add("region");
    openapiFields.add("resourcesAffected");
    openapiFields.add("sample");
    openapiFields.add("schemaVersion");
    openapiFields.add("severity");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Finding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Finding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Finding is not found in the empty JSON string", Finding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Finding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Finding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountId`
      if (jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accountId"));
      }
      // validate the optional field `archived`
      if (jsonObj.get("archived") != null && !jsonObj.get("archived").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("archived"));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        FindingCategory.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `classificationDetails`
      if (jsonObj.get("classificationDetails") != null && !jsonObj.get("classificationDetails").isJsonNull()) {
        FindingClassificationDetails.validateJsonElement(jsonObj.get("classificationDetails"));
      }
      // validate the optional field `count`
      if (jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("count"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `partition`
      if (jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("partition"));
      }
      // validate the optional field `policyDetails`
      if (jsonObj.get("policyDetails") != null && !jsonObj.get("policyDetails").isJsonNull()) {
        FindingPolicyDetails.validateJsonElement(jsonObj.get("policyDetails"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `resourcesAffected`
      if (jsonObj.get("resourcesAffected") != null && !jsonObj.get("resourcesAffected").isJsonNull()) {
        FindingResourcesAffected.validateJsonElement(jsonObj.get("resourcesAffected"));
      }
      // validate the optional field `sample`
      if (jsonObj.get("sample") != null && !jsonObj.get("sample").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("sample"));
      }
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("schemaVersion"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        FindingSeverity.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("title"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        FindingType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Finding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Finding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Finding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Finding.class));

       return (TypeAdapter<T>) new TypeAdapter<Finding>() {
           @Override
           public void write(JsonWriter out, Finding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Finding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Finding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Finding
   * @throws IOException if the JSON string is invalid with respect to Finding
   */
  public static Finding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Finding.class);
  }

  /**
   * Convert an instance of Finding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

