/*
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptInvitationRequest;
import org.openapitools.client.model.BatchGetCustomDataIdentifiersRequest;
import org.openapitools.client.model.BatchGetCustomDataIdentifiersResponse;
import org.openapitools.client.model.CreateAllowListRequest;
import org.openapitools.client.model.CreateAllowListResponse;
import org.openapitools.client.model.CreateClassificationJobRequest;
import org.openapitools.client.model.CreateClassificationJobResponse;
import org.openapitools.client.model.CreateCustomDataIdentifierRequest;
import org.openapitools.client.model.CreateCustomDataIdentifierResponse;
import org.openapitools.client.model.CreateFindingsFilterRequest;
import org.openapitools.client.model.CreateFindingsFilterResponse;
import org.openapitools.client.model.CreateInvitationsRequest;
import org.openapitools.client.model.CreateInvitationsResponse;
import org.openapitools.client.model.CreateMemberRequest;
import org.openapitools.client.model.CreateMemberResponse;
import org.openapitools.client.model.CreateSampleFindingsRequest;
import org.openapitools.client.model.DeclineInvitationsRequest;
import org.openapitools.client.model.DeclineInvitationsResponse;
import org.openapitools.client.model.DeleteInvitationsRequest;
import org.openapitools.client.model.DeleteInvitationsResponse;
import org.openapitools.client.model.DescribeBucketsRequest;
import org.openapitools.client.model.DescribeBucketsResponse;
import org.openapitools.client.model.DescribeClassificationJobResponse;
import org.openapitools.client.model.DescribeOrganizationConfigurationResponse;
import org.openapitools.client.model.EnableMacieRequest;
import org.openapitools.client.model.EnableOrganizationAdminAccountRequest;
import org.openapitools.client.model.GetAdministratorAccountResponse;
import org.openapitools.client.model.GetAllowListResponse;
import org.openapitools.client.model.GetAutomatedDiscoveryConfigurationResponse;
import org.openapitools.client.model.GetBucketStatisticsRequest;
import org.openapitools.client.model.GetBucketStatisticsResponse;
import org.openapitools.client.model.GetClassificationExportConfigurationResponse;
import org.openapitools.client.model.GetClassificationScopeResponse;
import org.openapitools.client.model.GetCustomDataIdentifierResponse;
import org.openapitools.client.model.GetFindingStatisticsRequest;
import org.openapitools.client.model.GetFindingStatisticsResponse;
import org.openapitools.client.model.GetFindingsFilterResponse;
import org.openapitools.client.model.GetFindingsPublicationConfigurationResponse;
import org.openapitools.client.model.GetFindingsRequest;
import org.openapitools.client.model.GetFindingsResponse;
import org.openapitools.client.model.GetInvitationsCountResponse;
import org.openapitools.client.model.GetMacieSessionResponse;
import org.openapitools.client.model.GetMasterAccountResponse;
import org.openapitools.client.model.GetMemberResponse;
import org.openapitools.client.model.GetResourceProfileResponse;
import org.openapitools.client.model.GetRevealConfigurationResponse;
import org.openapitools.client.model.GetSensitiveDataOccurrencesAvailabilityResponse;
import org.openapitools.client.model.GetSensitiveDataOccurrencesResponse;
import org.openapitools.client.model.GetSensitivityInspectionTemplateResponse;
import org.openapitools.client.model.GetUsageStatisticsRequest;
import org.openapitools.client.model.GetUsageStatisticsResponse;
import org.openapitools.client.model.GetUsageTotalsResponse;
import org.openapitools.client.model.ListAllowListsResponse;
import org.openapitools.client.model.ListClassificationJobsRequest;
import org.openapitools.client.model.ListClassificationJobsResponse;
import org.openapitools.client.model.ListClassificationScopesResponse;
import org.openapitools.client.model.ListCustomDataIdentifiersRequest;
import org.openapitools.client.model.ListCustomDataIdentifiersResponse;
import org.openapitools.client.model.ListFindingsFiltersResponse;
import org.openapitools.client.model.ListFindingsRequest;
import org.openapitools.client.model.ListFindingsResponse;
import org.openapitools.client.model.ListInvitationsResponse;
import org.openapitools.client.model.ListManagedDataIdentifiersRequest;
import org.openapitools.client.model.ListManagedDataIdentifiersResponse;
import org.openapitools.client.model.ListMembersResponse;
import org.openapitools.client.model.ListOrganizationAdminAccountsResponse;
import org.openapitools.client.model.ListResourceProfileArtifactsResponse;
import org.openapitools.client.model.ListResourceProfileDetectionsResponse;
import org.openapitools.client.model.ListSensitivityInspectionTemplatesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutClassificationExportConfigurationRequest;
import org.openapitools.client.model.PutClassificationExportConfigurationResponse;
import org.openapitools.client.model.PutFindingsPublicationConfigurationRequest;
import org.openapitools.client.model.SearchResourcesRequest;
import org.openapitools.client.model.SearchResourcesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TestCustomDataIdentifierRequest;
import org.openapitools.client.model.TestCustomDataIdentifierResponse;
import org.openapitools.client.model.UpdateAllowListRequest;
import org.openapitools.client.model.UpdateAllowListResponse;
import org.openapitools.client.model.UpdateAutomatedDiscoveryConfigurationRequest;
import org.openapitools.client.model.UpdateClassificationJobRequest;
import org.openapitools.client.model.UpdateClassificationScopeRequest;
import org.openapitools.client.model.UpdateFindingsFilterRequest;
import org.openapitools.client.model.UpdateFindingsFilterResponse;
import org.openapitools.client.model.UpdateMacieSessionRequest;
import org.openapitools.client.model.UpdateMemberSessionRequest;
import org.openapitools.client.model.UpdateOrganizationConfigurationRequest;
import org.openapitools.client.model.UpdateResourceProfileDetectionsRequest;
import org.openapitools.client.model.UpdateResourceProfileRequest;
import org.openapitools.client.model.UpdateRevealConfigurationRequest;
import org.openapitools.client.model.UpdateRevealConfigurationResponse;
import org.openapitools.client.model.UpdateSensitivityInspectionTemplateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Accepts an Amazon Macie membership invitation that was received from a specific account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInvitationTest() throws ApiException {
        AcceptInvitationRequest acceptInvitationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.acceptInvitation(acceptInvitationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about one or more custom data identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetCustomDataIdentifiersTest() throws ApiException {
        BatchGetCustomDataIdentifiersRequest batchGetCustomDataIdentifiersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetCustomDataIdentifiersResponse response = api.batchGetCustomDataIdentifiers(batchGetCustomDataIdentifiersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and defines the settings for an allow list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAllowListTest() throws ApiException {
        CreateAllowListRequest createAllowListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAllowListResponse response = api.createAllowList(createAllowListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and defines the settings for a classification job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClassificationJobTest() throws ApiException {
        CreateClassificationJobRequest createClassificationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClassificationJobResponse response = api.createClassificationJob(createClassificationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and defines the criteria and other settings for a custom data identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomDataIdentifierTest() throws ApiException {
        CreateCustomDataIdentifierRequest createCustomDataIdentifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCustomDataIdentifierResponse response = api.createCustomDataIdentifier(createCustomDataIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and defines the criteria and other settings for a findings filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFindingsFilterTest() throws ApiException {
        CreateFindingsFilterRequest createFindingsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFindingsFilterResponse response = api.createFindingsFilter(createFindingsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends an Amazon Macie membership invitation to one or more accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvitationsTest() throws ApiException {
        CreateInvitationsRequest createInvitationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInvitationsResponse response = api.createInvitations(createInvitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates an account with an Amazon Macie administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMemberTest() throws ApiException {
        CreateMemberRequest createMemberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMemberResponse response = api.createMember(createMemberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates sample findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSampleFindingsTest() throws ApiException {
        CreateSampleFindingsRequest createSampleFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createSampleFindings(createSampleFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Declines Amazon Macie membership invitations that were received from specific accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void declineInvitationsTest() throws ApiException {
        DeclineInvitationsRequest declineInvitationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeclineInvitationsResponse response = api.declineInvitations(declineInvitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an allow list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllowListTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ignoreJobChecks = null;
        Object response = api.deleteAllowList(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ignoreJobChecks);
        // TODO: test validations
    }

    /**
     * Soft deletes a custom data identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomDataIdentifierTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteCustomDataIdentifier(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a findings filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFindingsFilterTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFindingsFilter(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes Amazon Macie membership invitations that were received from specific accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInvitationsTest() throws ApiException {
        DeleteInvitationsRequest deleteInvitationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInvitationsResponse response = api.deleteInvitations(deleteInvitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the association between an Amazon Macie administrator account and an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMember(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) statistical data and other information about one or more S3 buckets that Amazon Macie monitors and analyzes for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBucketsTest() throws ApiException {
        DescribeBucketsRequest describeBucketsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeBucketsResponse response = api.describeBuckets(describeBucketsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the status and settings for a classification job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClassificationJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClassificationJobResponse response = api.describeClassificationJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the Amazon Macie configuration settings for an organization in Organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOrganizationConfigurationResponse response = api.describeOrganizationConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables Amazon Macie and deletes all settings and resources for a Macie account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableMacieTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableMacie(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables an account as the delegated Amazon Macie administrator account for an organization in Organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableOrganizationAdminAccountTest() throws ApiException {
        String adminAccountId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableOrganizationAdminAccount(adminAccountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a member account from its Amazon Macie administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFromAdministratorAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateFromAdministratorAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * (Deprecated) Disassociates a member account from its Amazon Macie administrator account. This operation has been replaced by the &lt;link  linkend&#x3D;\&quot;DisassociateFromAdministratorAccount\&quot;&gt;DisassociateFromAdministratorAccount&lt;/link&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFromMasterAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateFromMasterAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates an Amazon Macie administrator account from a member account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateMemberTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateMember(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables Amazon Macie and specifies the configuration settings for a Macie account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableMacieTest() throws ApiException {
        EnableMacieRequest enableMacieRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableMacie(enableMacieRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Designates an account as the delegated Amazon Macie administrator account for an organization in Organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableOrganizationAdminAccountTest() throws ApiException {
        EnableOrganizationAdminAccountRequest enableOrganizationAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableOrganizationAdminAccount(enableOrganizationAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the Amazon Macie administrator account for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdministratorAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAdministratorAccountResponse response = api.getAdministratorAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the settings and status of an allow list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllowListTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAllowListResponse response = api.getAllowList(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the configuration settings and status of automated sensitive data discovery for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutomatedDiscoveryConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAutomatedDiscoveryConfigurationResponse response = api.getAutomatedDiscoveryConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) aggregated statistical data about all the S3 buckets that Amazon Macie monitors and analyzes for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketStatisticsTest() throws ApiException {
        GetBucketStatisticsRequest getBucketStatisticsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBucketStatisticsResponse response = api.getBucketStatistics(getBucketStatisticsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the configuration settings for storing data classification results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassificationExportConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetClassificationExportConfigurationResponse response = api.getClassificationExportConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the classification scope settings for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassificationScopeTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetClassificationScopeResponse response = api.getClassificationScope(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the criteria and other settings for a custom data identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomDataIdentifierTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCustomDataIdentifierResponse response = api.getCustomDataIdentifier(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) aggregated statistical data about findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingStatisticsTest() throws ApiException {
        GetFindingStatisticsRequest getFindingStatisticsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingStatisticsResponse response = api.getFindingStatistics(getFindingStatisticsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of one or more findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingsTest() throws ApiException {
        GetFindingsRequest getFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingsResponse response = api.getFindings(getFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the criteria and other settings for a findings filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingsFilterTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingsFilterResponse response = api.getFindingsFilter(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the configuration settings for publishing findings to Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingsPublicationConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingsPublicationConfigurationResponse response = api.getFindingsPublicationConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the count of Amazon Macie membership invitations that were received by an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvitationsCountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInvitationsCountResponse response = api.getInvitationsCount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the status and configuration settings for an Amazon Macie account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMacieSessionTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMacieSessionResponse response = api.getMacieSession(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * (Deprecated) Retrieves information about the Amazon Macie administrator account for an account. This operation has been replaced by the &lt;link  linkend&#x3D;\&quot;GetAdministratorAccount\&quot;&gt;GetAdministratorAccount&lt;/link&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMasterAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMasterAccountResponse response = api.getMasterAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an account that&#39;s associated with an Amazon Macie administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMemberTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMemberResponse response = api.getMember(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) sensitive data discovery statistics and the sensitivity score for an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceProfileTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourceProfileResponse response = api.getResourceProfile(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the status and configuration settings for retrieving occurrences of sensitive data reported by findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevealConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRevealConfigurationResponse response = api.getRevealConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves occurrences of sensitive data reported by a finding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSensitiveDataOccurrencesTest() throws ApiException {
        String findingId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSensitiveDataOccurrencesResponse response = api.getSensitiveDataOccurrences(findingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks whether occurrences of sensitive data can be retrieved for a finding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSensitiveDataOccurrencesAvailabilityTest() throws ApiException {
        String findingId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSensitiveDataOccurrencesAvailabilityResponse response = api.getSensitiveDataOccurrencesAvailability(findingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  &lt;p&gt;Retrieves the settings for the sensitivity inspection template for an account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSensitivityInspectionTemplateTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSensitivityInspectionTemplateResponse response = api.getSensitivityInspectionTemplate(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) quotas and aggregated usage data for one or more accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsageStatisticsTest() throws ApiException {
        GetUsageStatisticsRequest getUsageStatisticsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetUsageStatisticsResponse response = api.getUsageStatistics(getUsageStatisticsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) aggregated usage data for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsageTotalsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String timeRange = null;
        GetUsageTotalsResponse response = api.getUsageTotals(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, timeRange);
        // TODO: test validations
    }

    /**
     * Retrieves a subset of information about all the allow lists for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllowListsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListAllowListsResponse response = api.listAllowLists(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a subset of information about one or more classification jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClassificationJobsTest() throws ApiException {
        ListClassificationJobsRequest listClassificationJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListClassificationJobsResponse response = api.listClassificationJobs(listClassificationJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a subset of information about the classification scope for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClassificationScopesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        String nextToken = null;
        ListClassificationScopesResponse response = api.listClassificationScopes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a subset of information about all the custom data identifiers for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomDataIdentifiersTest() throws ApiException {
        ListCustomDataIdentifiersRequest listCustomDataIdentifiersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCustomDataIdentifiersResponse response = api.listCustomDataIdentifiers(listCustomDataIdentifiersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a subset of information about one or more findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingsTest() throws ApiException {
        ListFindingsRequest listFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFindingsResponse response = api.listFindings(listFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a subset of information about all the findings filters for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingsFiltersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListFindingsFiltersResponse response = api.listFindingsFilters(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about the Amazon Macie membership invitations that were received by an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvitationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListInvitationsResponse response = api.listInvitations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the managed data identifiers that Amazon Macie currently provides.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listManagedDataIdentifiersTest() throws ApiException {
        ListManagedDataIdentifiersRequest listManagedDataIdentifiersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListManagedDataIdentifiersResponse response = api.listManagedDataIdentifiers(listManagedDataIdentifiersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about the accounts that are associated with an Amazon Macie administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String onlyAssociated = null;
        ListMembersResponse response = api.listMembers(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, onlyAssociated);
        // TODO: test validations
    }

    /**
     * Retrieves information about the delegated Amazon Macie administrator account for an organization in Organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationAdminAccountsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListOrganizationAdminAccountsResponse response = api.listOrganizationAdminAccounts(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about objects that were selected from an S3 bucket for automated sensitive data discovery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceProfileArtifactsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListResourceProfileArtifactsResponse response = api.listResourceProfileArtifacts(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about the types and amount of sensitive data that Amazon Macie found in an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceProfileDetectionsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListResourceProfileDetectionsResponse response = api.listResourceProfileDetections(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  &lt;p&gt;Retrieves a subset of information about the sensitivity inspection template for an account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSensitivityInspectionTemplatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSensitivityInspectionTemplatesResponse response = api.listSensitivityInspectionTemplates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the tags (keys and values) that are associated with an Amazon Macie resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the configuration settings for storing data classification results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putClassificationExportConfigurationTest() throws ApiException {
        PutClassificationExportConfigurationRequest putClassificationExportConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutClassificationExportConfigurationResponse response = api.putClassificationExportConfiguration(putClassificationExportConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration settings for publishing findings to Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putFindingsPublicationConfigurationTest() throws ApiException {
        PutFindingsPublicationConfigurationRequest putFindingsPublicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putFindingsPublicationConfiguration(putFindingsPublicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) statistical data and other information about Amazon Web Services resources that Amazon Macie monitors and analyzes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchResourcesTest() throws ApiException {
        SearchResourcesRequest searchResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchResourcesResponse response = api.searchResources(searchResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Adds or updates one or more tags (keys and values) that are associated with an Amazon Macie resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tests a custom data identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCustomDataIdentifierTest() throws ApiException {
        TestCustomDataIdentifierRequest testCustomDataIdentifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestCustomDataIdentifierResponse response = api.testCustomDataIdentifier(testCustomDataIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags (keys and values) from an Amazon Macie resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the settings for an allow list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAllowListTest() throws ApiException {
        String id = null;
        UpdateAllowListRequest updateAllowListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAllowListResponse response = api.updateAllowList(id, updateAllowListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables or disables automated sensitive data discovery for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAutomatedDiscoveryConfigurationTest() throws ApiException {
        UpdateAutomatedDiscoveryConfigurationRequest updateAutomatedDiscoveryConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateAutomatedDiscoveryConfiguration(updateAutomatedDiscoveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the status of a classification job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClassificationJobTest() throws ApiException {
        String jobId = null;
        UpdateClassificationJobRequest updateClassificationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateClassificationJob(jobId, updateClassificationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the classification scope settings for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClassificationScopeTest() throws ApiException {
        String id = null;
        UpdateClassificationScopeRequest updateClassificationScopeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateClassificationScope(id, updateClassificationScopeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the criteria and other settings for a findings filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFindingsFilterTest() throws ApiException {
        String id = null;
        UpdateFindingsFilterRequest updateFindingsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFindingsFilterResponse response = api.updateFindingsFilter(id, updateFindingsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Suspends or re-enables Amazon Macie, or updates the configuration settings for a Macie account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMacieSessionTest() throws ApiException {
        UpdateMacieSessionRequest updateMacieSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateMacieSession(updateMacieSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables an Amazon Macie administrator to suspend or re-enable Macie for a member account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMemberSessionTest() throws ApiException {
        String id = null;
        UpdateMemberSessionRequest updateMemberSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateMemberSession(id, updateMemberSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the Amazon Macie configuration settings for an organization in Organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigurationTest() throws ApiException {
        UpdateOrganizationConfigurationRequest updateOrganizationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateOrganizationConfiguration(updateOrganizationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the sensitivity score for an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceProfileTest() throws ApiException {
        String resourceArn = null;
        UpdateResourceProfileRequest updateResourceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateResourceProfile(resourceArn, updateResourceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the sensitivity scoring settings for an S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceProfileDetectionsTest() throws ApiException {
        String resourceArn = null;
        UpdateResourceProfileDetectionsRequest updateResourceProfileDetectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateResourceProfileDetections(resourceArn, updateResourceProfileDetectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the status and configuration settings for retrieving occurrences of sensitive data reported by findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRevealConfigurationTest() throws ApiException {
        UpdateRevealConfigurationRequest updateRevealConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRevealConfigurationResponse response = api.updateRevealConfiguration(updateRevealConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  &lt;p&gt;Updates the settings for the sensitivity inspection template for an account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSensitivityInspectionTemplateTest() throws ApiException {
        String id = null;
        UpdateSensitivityInspectionTemplateRequest updateSensitivityInspectionTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateSensitivityInspectionTemplate(id, updateSensitivityInspectionTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
