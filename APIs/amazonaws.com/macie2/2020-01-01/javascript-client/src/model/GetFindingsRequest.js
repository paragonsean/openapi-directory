/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetFindingsRequestSortCriteria from './GetFindingsRequestSortCriteria';

/**
 * The GetFindingsRequest model module.
 * @module model/GetFindingsRequest
 * @version 2020-01-01
 */
class GetFindingsRequest {
    /**
     * Constructs a new <code>GetFindingsRequest</code>.
     * @alias module:model/GetFindingsRequest
     * @param findingIds {Array.<String>} An array of strings that lists the unique identifiers for the findings to retrieve. You can specify as many as 50 unique identifiers in this array.
     */
    constructor(findingIds) { 
        
        GetFindingsRequest.initialize(this, findingIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, findingIds) { 
        obj['findingIds'] = findingIds;
    }

    /**
     * Constructs a <code>GetFindingsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetFindingsRequest} obj Optional instance to populate.
     * @return {module:model/GetFindingsRequest} The populated <code>GetFindingsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetFindingsRequest();

            if (data.hasOwnProperty('findingIds')) {
                obj['findingIds'] = ApiClient.convertToType(data['findingIds'], ['String']);
            }
            if (data.hasOwnProperty('sortCriteria')) {
                obj['sortCriteria'] = GetFindingsRequestSortCriteria.constructFromObject(data['sortCriteria']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetFindingsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetFindingsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetFindingsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['findingIds'])) {
            throw new Error("Expected the field `findingIds` to be an array in the JSON data but got " + data['findingIds']);
        }
        // validate the optional field `sortCriteria`
        if (data['sortCriteria']) { // data not null
          GetFindingsRequestSortCriteria.validateJSON(data['sortCriteria']);
        }

        return true;
    }


}

GetFindingsRequest.RequiredProperties = ["findingIds"];

/**
 * An array of strings that lists the unique identifiers for the findings to retrieve. You can specify as many as 50 unique identifiers in this array.
 * @member {Array.<String>} findingIds
 */
GetFindingsRequest.prototype['findingIds'] = undefined;

/**
 * @member {module:model/GetFindingsRequestSortCriteria} sortCriteria
 */
GetFindingsRequest.prototype['sortCriteria'] = undefined;






export default GetFindingsRequest;

