/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FindingCategory from './FindingCategory';
import FindingClassificationDetails from './FindingClassificationDetails';
import FindingPolicyDetails from './FindingPolicyDetails';
import FindingResourcesAffected from './FindingResourcesAffected';
import FindingSeverity from './FindingSeverity';
import FindingType from './FindingType';

/**
 * The Finding model module.
 * @module model/Finding
 * @version 2020-01-01
 */
class Finding {
    /**
     * Constructs a new <code>Finding</code>.
     * Provides the details of a finding.
     * @alias module:model/Finding
     */
    constructor() { 
        
        Finding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Finding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Finding} obj Optional instance to populate.
     * @return {module:model/Finding} The populated <code>Finding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Finding();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], FindingCategory);
            }
            if (data.hasOwnProperty('classificationDetails')) {
                obj['classificationDetails'] = FindingClassificationDetails.constructFromObject(data['classificationDetails']);
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('partition')) {
                obj['partition'] = ApiClient.convertToType(data['partition'], 'String');
            }
            if (data.hasOwnProperty('policyDetails')) {
                obj['policyDetails'] = FindingPolicyDetails.constructFromObject(data['policyDetails']);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('resourcesAffected')) {
                obj['resourcesAffected'] = FindingResourcesAffected.constructFromObject(data['resourcesAffected']);
            }
            if (data.hasOwnProperty('sample')) {
                obj['sample'] = ApiClient.convertToType(data['sample'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = FindingSeverity.constructFromObject(data['severity']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], FindingType);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Finding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Finding</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accountId`
        if (data['accountId']) { // data not null
          String.validateJSON(data['accountId']);
        }
        // validate the optional field `archived`
        if (data['archived']) { // data not null
          Boolean.validateJSON(data['archived']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          FindingCategory.validateJSON(data['category']);
        }
        // validate the optional field `classificationDetails`
        if (data['classificationDetails']) { // data not null
          FindingClassificationDetails.validateJSON(data['classificationDetails']);
        }
        // validate the optional field `count`
        if (data['count']) { // data not null
          Number.validateJSON(data['count']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `partition`
        if (data['partition']) { // data not null
          String.validateJSON(data['partition']);
        }
        // validate the optional field `policyDetails`
        if (data['policyDetails']) { // data not null
          FindingPolicyDetails.validateJSON(data['policyDetails']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          String.validateJSON(data['region']);
        }
        // validate the optional field `resourcesAffected`
        if (data['resourcesAffected']) { // data not null
          FindingResourcesAffected.validateJSON(data['resourcesAffected']);
        }
        // validate the optional field `sample`
        if (data['sample']) { // data not null
          Boolean.validateJSON(data['sample']);
        }
        // validate the optional field `schemaVersion`
        if (data['schemaVersion']) { // data not null
          String.validateJSON(data['schemaVersion']);
        }
        // validate the optional field `severity`
        if (data['severity']) { // data not null
          FindingSeverity.validateJSON(data['severity']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          String.validateJSON(data['title']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          FindingType.validateJSON(data['type']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }

        return true;
    }


}



/**
 * @member {String} accountId
 */
Finding.prototype['accountId'] = undefined;

/**
 * @member {Boolean} archived
 */
Finding.prototype['archived'] = undefined;

/**
 * @member {module:model/FindingCategory} category
 */
Finding.prototype['category'] = undefined;

/**
 * @member {module:model/FindingClassificationDetails} classificationDetails
 */
Finding.prototype['classificationDetails'] = undefined;

/**
 * @member {Number} count
 */
Finding.prototype['count'] = undefined;

/**
 * @member {Date} createdAt
 */
Finding.prototype['createdAt'] = undefined;

/**
 * @member {String} description
 */
Finding.prototype['description'] = undefined;

/**
 * @member {String} id
 */
Finding.prototype['id'] = undefined;

/**
 * @member {String} partition
 */
Finding.prototype['partition'] = undefined;

/**
 * @member {module:model/FindingPolicyDetails} policyDetails
 */
Finding.prototype['policyDetails'] = undefined;

/**
 * @member {String} region
 */
Finding.prototype['region'] = undefined;

/**
 * @member {module:model/FindingResourcesAffected} resourcesAffected
 */
Finding.prototype['resourcesAffected'] = undefined;

/**
 * @member {Boolean} sample
 */
Finding.prototype['sample'] = undefined;

/**
 * @member {String} schemaVersion
 */
Finding.prototype['schemaVersion'] = undefined;

/**
 * @member {module:model/FindingSeverity} severity
 */
Finding.prototype['severity'] = undefined;

/**
 * @member {String} title
 */
Finding.prototype['title'] = undefined;

/**
 * @member {module:model/FindingType} type
 */
Finding.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
Finding.prototype['updatedAt'] = undefined;






export default Finding;

