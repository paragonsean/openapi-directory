/**
 * Amazon Macie 2
 * Amazon Macie
 *
 * The version of the OpenAPI document: 2020-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestCustomDataIdentifierRequest model module.
 * @module model/TestCustomDataIdentifierRequest
 * @version 2020-01-01
 */
class TestCustomDataIdentifierRequest {
    /**
     * Constructs a new <code>TestCustomDataIdentifierRequest</code>.
     * @alias module:model/TestCustomDataIdentifierRequest
     * @param regex {String} The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.
     * @param sampleText {String} The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.
     */
    constructor(regex, sampleText) { 
        
        TestCustomDataIdentifierRequest.initialize(this, regex, sampleText);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, regex, sampleText) { 
        obj['regex'] = regex;
        obj['sampleText'] = sampleText;
    }

    /**
     * Constructs a <code>TestCustomDataIdentifierRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestCustomDataIdentifierRequest} obj Optional instance to populate.
     * @return {module:model/TestCustomDataIdentifierRequest} The populated <code>TestCustomDataIdentifierRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestCustomDataIdentifierRequest();

            if (data.hasOwnProperty('ignoreWords')) {
                obj['ignoreWords'] = ApiClient.convertToType(data['ignoreWords'], ['String']);
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('maximumMatchDistance')) {
                obj['maximumMatchDistance'] = ApiClient.convertToType(data['maximumMatchDistance'], 'Number');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = ApiClient.convertToType(data['regex'], 'String');
            }
            if (data.hasOwnProperty('sampleText')) {
                obj['sampleText'] = ApiClient.convertToType(data['sampleText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestCustomDataIdentifierRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestCustomDataIdentifierRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestCustomDataIdentifierRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ignoreWords'])) {
            throw new Error("Expected the field `ignoreWords` to be an array in the JSON data but got " + data['ignoreWords']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['regex'] && !(typeof data['regex'] === 'string' || data['regex'] instanceof String)) {
            throw new Error("Expected the field `regex` to be a primitive type in the JSON string but got " + data['regex']);
        }
        // ensure the json data is a string
        if (data['sampleText'] && !(typeof data['sampleText'] === 'string' || data['sampleText'] instanceof String)) {
            throw new Error("Expected the field `sampleText` to be a primitive type in the JSON string but got " + data['sampleText']);
        }

        return true;
    }


}

TestCustomDataIdentifierRequest.RequiredProperties = ["regex", "sampleText"];

/**
 * An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.
 * @member {Array.<String>} ignoreWords
 */
TestCustomDataIdentifierRequest.prototype['ignoreWords'] = undefined;

/**
 * An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.
 * @member {Array.<String>} keywords
 */
TestCustomDataIdentifierRequest.prototype['keywords'] = undefined;

/**
 * The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.
 * @member {Number} maximumMatchDistance
 */
TestCustomDataIdentifierRequest.prototype['maximumMatchDistance'] = undefined;

/**
 * The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.
 * @member {String} regex
 */
TestCustomDataIdentifierRequest.prototype['regex'] = undefined;

/**
 * The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.
 * @member {String} sampleText
 */
TestCustomDataIdentifierRequest.prototype['sampleText'] = undefined;






export default TestCustomDataIdentifierRequest;

