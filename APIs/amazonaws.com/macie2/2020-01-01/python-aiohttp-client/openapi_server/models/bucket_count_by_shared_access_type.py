# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketCountBySharedAccessType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external: int=None, internal: int=None, not_shared: int=None, unknown: int=None):
        """BucketCountBySharedAccessType - a model defined in OpenAPI

        :param external: The external of this BucketCountBySharedAccessType.
        :param internal: The internal of this BucketCountBySharedAccessType.
        :param not_shared: The not_shared of this BucketCountBySharedAccessType.
        :param unknown: The unknown of this BucketCountBySharedAccessType.
        """
        self.openapi_types = {
            'external': int,
            'internal': int,
            'not_shared': int,
            'unknown': int
        }

        self.attribute_map = {
            'external': 'external',
            'internal': 'internal',
            'not_shared': 'notShared',
            'unknown': 'unknown'
        }

        self._external = external
        self._internal = internal
        self._not_shared = not_shared
        self._unknown = unknown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketCountBySharedAccessType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketCountBySharedAccessType of this BucketCountBySharedAccessType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external(self):
        """Gets the external of this BucketCountBySharedAccessType.


        :return: The external of this BucketCountBySharedAccessType.
        :rtype: int
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this BucketCountBySharedAccessType.


        :param external: The external of this BucketCountBySharedAccessType.
        :type external: int
        """

        self._external = external

    @property
    def internal(self):
        """Gets the internal of this BucketCountBySharedAccessType.


        :return: The internal of this BucketCountBySharedAccessType.
        :rtype: int
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this BucketCountBySharedAccessType.


        :param internal: The internal of this BucketCountBySharedAccessType.
        :type internal: int
        """

        self._internal = internal

    @property
    def not_shared(self):
        """Gets the not_shared of this BucketCountBySharedAccessType.


        :return: The not_shared of this BucketCountBySharedAccessType.
        :rtype: int
        """
        return self._not_shared

    @not_shared.setter
    def not_shared(self, not_shared):
        """Sets the not_shared of this BucketCountBySharedAccessType.


        :param not_shared: The not_shared of this BucketCountBySharedAccessType.
        :type not_shared: int
        """

        self._not_shared = not_shared

    @property
    def unknown(self):
        """Gets the unknown of this BucketCountBySharedAccessType.


        :return: The unknown of this BucketCountBySharedAccessType.
        :rtype: int
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this BucketCountBySharedAccessType.


        :param unknown: The unknown of this BucketCountBySharedAccessType.
        :type unknown: int
        """

        self._unknown = unknown
