# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cell(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_reference: str=None, column: int=None, column_name: str=None, row: int=None):
        """Cell - a model defined in OpenAPI

        :param cell_reference: The cell_reference of this Cell.
        :param column: The column of this Cell.
        :param column_name: The column_name of this Cell.
        :param row: The row of this Cell.
        """
        self.openapi_types = {
            'cell_reference': str,
            'column': int,
            'column_name': str,
            'row': int
        }

        self.attribute_map = {
            'cell_reference': 'cellReference',
            'column': 'column',
            'column_name': 'columnName',
            'row': 'row'
        }

        self._cell_reference = cell_reference
        self._column = column
        self._column_name = column_name
        self._row = row

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cell':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cell of this Cell.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_reference(self):
        """Gets the cell_reference of this Cell.


        :return: The cell_reference of this Cell.
        :rtype: str
        """
        return self._cell_reference

    @cell_reference.setter
    def cell_reference(self, cell_reference):
        """Sets the cell_reference of this Cell.


        :param cell_reference: The cell_reference of this Cell.
        :type cell_reference: str
        """

        self._cell_reference = cell_reference

    @property
    def column(self):
        """Gets the column of this Cell.


        :return: The column of this Cell.
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Cell.


        :param column: The column of this Cell.
        :type column: int
        """

        self._column = column

    @property
    def column_name(self):
        """Gets the column_name of this Cell.


        :return: The column_name of this Cell.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this Cell.


        :param column_name: The column_name of this Cell.
        :type column_name: str
        """

        self._column_name = column_name

    @property
    def row(self):
        """Gets the row of this Cell.


        :return: The row of this Cell.
        :rtype: int
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this Cell.


        :param row: The row of this Cell.
        :type row: int
        """

        self._row = row
