# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_allow_list_request_criteria import CreateAllowListRequestCriteria
import re
from openapi_server import util


class UpdateAllowListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: CreateAllowListRequestCriteria=None, description: str=None, name: str=None):
        """UpdateAllowListRequest - a model defined in OpenAPI

        :param criteria: The criteria of this UpdateAllowListRequest.
        :param description: The description of this UpdateAllowListRequest.
        :param name: The name of this UpdateAllowListRequest.
        """
        self.openapi_types = {
            'criteria': CreateAllowListRequestCriteria,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'description': 'description',
            'name': 'name'
        }

        self._criteria = criteria
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAllowListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAllowList_request of this UpdateAllowListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this UpdateAllowListRequest.


        :return: The criteria of this UpdateAllowListRequest.
        :rtype: CreateAllowListRequestCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this UpdateAllowListRequest.


        :param criteria: The criteria of this UpdateAllowListRequest.
        :type criteria: CreateAllowListRequestCriteria
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")

        self._criteria = criteria

    @property
    def description(self):
        """Gets the description of this UpdateAllowListRequest.

        A custom description of the allow list. The description can contain as many as 512 characters.

        :return: The description of this UpdateAllowListRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAllowListRequest.

        A custom description of the allow list. The description can contain as many as 512 characters.

        :param description: The description of this UpdateAllowListRequest.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'^[\s\S]+$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[\s\S]+$/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this UpdateAllowListRequest.

        A custom name for the allow list. The name can contain as many as 128 characters.

        :return: The name of this UpdateAllowListRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAllowListRequest.

        A custom name for the allow list. The name can contain as many as 128 characters.

        :param name: The name of this UpdateAllowListRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^.+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^.+$/`")

        self._name = name
