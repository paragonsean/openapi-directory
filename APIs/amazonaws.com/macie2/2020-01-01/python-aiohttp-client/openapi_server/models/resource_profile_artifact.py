# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceProfileArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, classification_result_status: str=None, sensitive: bool=None):
        """ResourceProfileArtifact - a model defined in OpenAPI

        :param arn: The arn of this ResourceProfileArtifact.
        :param classification_result_status: The classification_result_status of this ResourceProfileArtifact.
        :param sensitive: The sensitive of this ResourceProfileArtifact.
        """
        self.openapi_types = {
            'arn': str,
            'classification_result_status': str,
            'sensitive': bool
        }

        self.attribute_map = {
            'arn': 'arn',
            'classification_result_status': 'classificationResultStatus',
            'sensitive': 'sensitive'
        }

        self._arn = arn
        self._classification_result_status = classification_result_status
        self._sensitive = sensitive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceProfileArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceProfileArtifact of this ResourceProfileArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ResourceProfileArtifact.


        :return: The arn of this ResourceProfileArtifact.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ResourceProfileArtifact.


        :param arn: The arn of this ResourceProfileArtifact.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def classification_result_status(self):
        """Gets the classification_result_status of this ResourceProfileArtifact.


        :return: The classification_result_status of this ResourceProfileArtifact.
        :rtype: str
        """
        return self._classification_result_status

    @classification_result_status.setter
    def classification_result_status(self, classification_result_status):
        """Sets the classification_result_status of this ResourceProfileArtifact.


        :param classification_result_status: The classification_result_status of this ResourceProfileArtifact.
        :type classification_result_status: str
        """
        if classification_result_status is None:
            raise ValueError("Invalid value for `classification_result_status`, must not be `None`")

        self._classification_result_status = classification_result_status

    @property
    def sensitive(self):
        """Gets the sensitive of this ResourceProfileArtifact.


        :return: The sensitive of this ResourceProfileArtifact.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this ResourceProfileArtifact.


        :param sensitive: The sensitive of this ResourceProfileArtifact.
        :type sensitive: bool
        """

        self._sensitive = sensitive
