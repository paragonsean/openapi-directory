# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_usage_statistics_request_sort_by import GetUsageStatisticsRequestSortBy
from openapi_server.models.usage_statistics_filter import UsageStatisticsFilter
from openapi_server import util


class GetUsageStatisticsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_by: List[UsageStatisticsFilter]=None, max_results: int=None, next_token: str=None, sort_by: GetUsageStatisticsRequestSortBy=None, time_range: str=None):
        """GetUsageStatisticsRequest - a model defined in OpenAPI

        :param filter_by: The filter_by of this GetUsageStatisticsRequest.
        :param max_results: The max_results of this GetUsageStatisticsRequest.
        :param next_token: The next_token of this GetUsageStatisticsRequest.
        :param sort_by: The sort_by of this GetUsageStatisticsRequest.
        :param time_range: The time_range of this GetUsageStatisticsRequest.
        """
        self.openapi_types = {
            'filter_by': List[UsageStatisticsFilter],
            'max_results': int,
            'next_token': str,
            'sort_by': GetUsageStatisticsRequestSortBy,
            'time_range': str
        }

        self.attribute_map = {
            'filter_by': 'filterBy',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'sort_by': 'sortBy',
            'time_range': 'timeRange'
        }

        self._filter_by = filter_by
        self._max_results = max_results
        self._next_token = next_token
        self._sort_by = sort_by
        self._time_range = time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUsageStatisticsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetUsageStatistics_request of this GetUsageStatisticsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_by(self):
        """Gets the filter_by of this GetUsageStatisticsRequest.

        An array of objects, one for each condition to use to filter the query results. If you specify more than one condition, Amazon Macie uses an AND operator to join the conditions.

        :return: The filter_by of this GetUsageStatisticsRequest.
        :rtype: List[UsageStatisticsFilter]
        """
        return self._filter_by

    @filter_by.setter
    def filter_by(self, filter_by):
        """Sets the filter_by of this GetUsageStatisticsRequest.

        An array of objects, one for each condition to use to filter the query results. If you specify more than one condition, Amazon Macie uses an AND operator to join the conditions.

        :param filter_by: The filter_by of this GetUsageStatisticsRequest.
        :type filter_by: List[UsageStatisticsFilter]
        """

        self._filter_by = filter_by

    @property
    def max_results(self):
        """Gets the max_results of this GetUsageStatisticsRequest.

        The maximum number of items to include in each page of the response.

        :return: The max_results of this GetUsageStatisticsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetUsageStatisticsRequest.

        The maximum number of items to include in each page of the response.

        :param max_results: The max_results of this GetUsageStatisticsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetUsageStatisticsRequest.

        The nextToken string that specifies which page of results to return in a paginated response.

        :return: The next_token of this GetUsageStatisticsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetUsageStatisticsRequest.

        The nextToken string that specifies which page of results to return in a paginated response.

        :param next_token: The next_token of this GetUsageStatisticsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def sort_by(self):
        """Gets the sort_by of this GetUsageStatisticsRequest.


        :return: The sort_by of this GetUsageStatisticsRequest.
        :rtype: GetUsageStatisticsRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this GetUsageStatisticsRequest.


        :param sort_by: The sort_by of this GetUsageStatisticsRequest.
        :type sort_by: GetUsageStatisticsRequestSortBy
        """

        self._sort_by = sort_by

    @property
    def time_range(self):
        """Gets the time_range of this GetUsageStatisticsRequest.

        An inclusive time period that Amazon Macie usage data applies to. Possible values are:

        :return: The time_range of this GetUsageStatisticsRequest.
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this GetUsageStatisticsRequest.

        An inclusive time period that Amazon Macie usage data applies to. Possible values are:

        :param time_range: The time_range of this GetUsageStatisticsRequest.
        :type time_range: str
        """
        allowed_values = ["MONTH_TO_DATE", "PAST_30_DAYS"]  # noqa: E501
        if time_range not in allowed_values:
            raise ValueError(
                "Invalid value for `time_range` ({0}), must be one of {1}"
                .format(time_range, allowed_values)
            )

        self._time_range = time_range
