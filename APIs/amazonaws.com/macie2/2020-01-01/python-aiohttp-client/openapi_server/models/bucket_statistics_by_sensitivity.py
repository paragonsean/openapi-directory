# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_statistics_by_sensitivity_classification_error import BucketStatisticsBySensitivityClassificationError
from openapi_server.models.bucket_statistics_by_sensitivity_not_classified import BucketStatisticsBySensitivityNotClassified
from openapi_server.models.bucket_statistics_by_sensitivity_not_sensitive import BucketStatisticsBySensitivityNotSensitive
from openapi_server.models.bucket_statistics_by_sensitivity_sensitive import BucketStatisticsBySensitivitySensitive
from openapi_server import util


class BucketStatisticsBySensitivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification_error: BucketStatisticsBySensitivityClassificationError=None, not_classified: BucketStatisticsBySensitivityNotClassified=None, not_sensitive: BucketStatisticsBySensitivityNotSensitive=None, sensitive: BucketStatisticsBySensitivitySensitive=None):
        """BucketStatisticsBySensitivity - a model defined in OpenAPI

        :param classification_error: The classification_error of this BucketStatisticsBySensitivity.
        :param not_classified: The not_classified of this BucketStatisticsBySensitivity.
        :param not_sensitive: The not_sensitive of this BucketStatisticsBySensitivity.
        :param sensitive: The sensitive of this BucketStatisticsBySensitivity.
        """
        self.openapi_types = {
            'classification_error': BucketStatisticsBySensitivityClassificationError,
            'not_classified': BucketStatisticsBySensitivityNotClassified,
            'not_sensitive': BucketStatisticsBySensitivityNotSensitive,
            'sensitive': BucketStatisticsBySensitivitySensitive
        }

        self.attribute_map = {
            'classification_error': 'classificationError',
            'not_classified': 'notClassified',
            'not_sensitive': 'notSensitive',
            'sensitive': 'sensitive'
        }

        self._classification_error = classification_error
        self._not_classified = not_classified
        self._not_sensitive = not_sensitive
        self._sensitive = sensitive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketStatisticsBySensitivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketStatisticsBySensitivity of this BucketStatisticsBySensitivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification_error(self):
        """Gets the classification_error of this BucketStatisticsBySensitivity.


        :return: The classification_error of this BucketStatisticsBySensitivity.
        :rtype: BucketStatisticsBySensitivityClassificationError
        """
        return self._classification_error

    @classification_error.setter
    def classification_error(self, classification_error):
        """Sets the classification_error of this BucketStatisticsBySensitivity.


        :param classification_error: The classification_error of this BucketStatisticsBySensitivity.
        :type classification_error: BucketStatisticsBySensitivityClassificationError
        """

        self._classification_error = classification_error

    @property
    def not_classified(self):
        """Gets the not_classified of this BucketStatisticsBySensitivity.


        :return: The not_classified of this BucketStatisticsBySensitivity.
        :rtype: BucketStatisticsBySensitivityNotClassified
        """
        return self._not_classified

    @not_classified.setter
    def not_classified(self, not_classified):
        """Sets the not_classified of this BucketStatisticsBySensitivity.


        :param not_classified: The not_classified of this BucketStatisticsBySensitivity.
        :type not_classified: BucketStatisticsBySensitivityNotClassified
        """

        self._not_classified = not_classified

    @property
    def not_sensitive(self):
        """Gets the not_sensitive of this BucketStatisticsBySensitivity.


        :return: The not_sensitive of this BucketStatisticsBySensitivity.
        :rtype: BucketStatisticsBySensitivityNotSensitive
        """
        return self._not_sensitive

    @not_sensitive.setter
    def not_sensitive(self, not_sensitive):
        """Sets the not_sensitive of this BucketStatisticsBySensitivity.


        :param not_sensitive: The not_sensitive of this BucketStatisticsBySensitivity.
        :type not_sensitive: BucketStatisticsBySensitivityNotSensitive
        """

        self._not_sensitive = not_sensitive

    @property
    def sensitive(self):
        """Gets the sensitive of this BucketStatisticsBySensitivity.


        :return: The sensitive of this BucketStatisticsBySensitivity.
        :rtype: BucketStatisticsBySensitivitySensitive
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this BucketStatisticsBySensitivity.


        :param sensitive: The sensitive of this BucketStatisticsBySensitivity.
        :type sensitive: BucketStatisticsBySensitivitySensitive
        """

        self._sensitive = sensitive
