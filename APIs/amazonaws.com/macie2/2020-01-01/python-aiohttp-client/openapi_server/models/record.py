# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Record(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, json_path: str=None, record_index: int=None):
        """Record - a model defined in OpenAPI

        :param json_path: The json_path of this Record.
        :param record_index: The record_index of this Record.
        """
        self.openapi_types = {
            'json_path': str,
            'record_index': int
        }

        self.attribute_map = {
            'json_path': 'jsonPath',
            'record_index': 'recordIndex'
        }

        self._json_path = json_path
        self._record_index = record_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Record of this Record.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def json_path(self):
        """Gets the json_path of this Record.


        :return: The json_path of this Record.
        :rtype: str
        """
        return self._json_path

    @json_path.setter
    def json_path(self, json_path):
        """Sets the json_path of this Record.


        :param json_path: The json_path of this Record.
        :type json_path: str
        """

        self._json_path = json_path

    @property
    def record_index(self):
        """Gets the record_index of this Record.


        :return: The record_index of this Record.
        :rtype: int
        """
        return self._record_index

    @record_index.setter
    def record_index(self, record_index):
        """Sets the record_index of this Record.


        :param record_index: The record_index of this Record.
        :type record_index: int
        """

        self._record_index = record_index
