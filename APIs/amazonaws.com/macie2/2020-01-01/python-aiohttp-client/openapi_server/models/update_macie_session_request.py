# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateMacieSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finding_publishing_frequency: str=None, status: str=None):
        """UpdateMacieSessionRequest - a model defined in OpenAPI

        :param finding_publishing_frequency: The finding_publishing_frequency of this UpdateMacieSessionRequest.
        :param status: The status of this UpdateMacieSessionRequest.
        """
        self.openapi_types = {
            'finding_publishing_frequency': str,
            'status': str
        }

        self.attribute_map = {
            'finding_publishing_frequency': 'findingPublishingFrequency',
            'status': 'status'
        }

        self._finding_publishing_frequency = finding_publishing_frequency
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMacieSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMacieSession_request of this UpdateMacieSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finding_publishing_frequency(self):
        """Gets the finding_publishing_frequency of this UpdateMacieSessionRequest.

        The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see <a href=\"https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html\">Monitoring and processing findings</a> in the <i>Amazon Macie User Guide</i>. Valid values are:

        :return: The finding_publishing_frequency of this UpdateMacieSessionRequest.
        :rtype: str
        """
        return self._finding_publishing_frequency

    @finding_publishing_frequency.setter
    def finding_publishing_frequency(self, finding_publishing_frequency):
        """Sets the finding_publishing_frequency of this UpdateMacieSessionRequest.

        The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see <a href=\"https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html\">Monitoring and processing findings</a> in the <i>Amazon Macie User Guide</i>. Valid values are:

        :param finding_publishing_frequency: The finding_publishing_frequency of this UpdateMacieSessionRequest.
        :type finding_publishing_frequency: str
        """
        allowed_values = ["FIFTEEN_MINUTES", "ONE_HOUR", "SIX_HOURS"]  # noqa: E501
        if finding_publishing_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `finding_publishing_frequency` ({0}), must be one of {1}"
                .format(finding_publishing_frequency, allowed_values)
            )

        self._finding_publishing_frequency = finding_publishing_frequency

    @property
    def status(self):
        """Gets the status of this UpdateMacieSessionRequest.

        The status of an Amazon Macie account. Valid values are:

        :return: The status of this UpdateMacieSessionRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateMacieSessionRequest.

        The status of an Amazon Macie account. Valid values are:

        :param status: The status of this UpdateMacieSessionRequest.
        :type status: str
        """
        allowed_values = ["PAUSED", "ENABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
