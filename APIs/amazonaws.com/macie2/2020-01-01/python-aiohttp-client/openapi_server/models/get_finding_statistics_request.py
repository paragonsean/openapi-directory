# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_findings_filter_request_finding_criteria import CreateFindingsFilterRequestFindingCriteria
from openapi_server.models.get_finding_statistics_request_sort_criteria import GetFindingStatisticsRequestSortCriteria
from openapi_server import util


class GetFindingStatisticsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finding_criteria: CreateFindingsFilterRequestFindingCriteria=None, group_by: str=None, size: int=None, sort_criteria: GetFindingStatisticsRequestSortCriteria=None):
        """GetFindingStatisticsRequest - a model defined in OpenAPI

        :param finding_criteria: The finding_criteria of this GetFindingStatisticsRequest.
        :param group_by: The group_by of this GetFindingStatisticsRequest.
        :param size: The size of this GetFindingStatisticsRequest.
        :param sort_criteria: The sort_criteria of this GetFindingStatisticsRequest.
        """
        self.openapi_types = {
            'finding_criteria': CreateFindingsFilterRequestFindingCriteria,
            'group_by': str,
            'size': int,
            'sort_criteria': GetFindingStatisticsRequestSortCriteria
        }

        self.attribute_map = {
            'finding_criteria': 'findingCriteria',
            'group_by': 'groupBy',
            'size': 'size',
            'sort_criteria': 'sortCriteria'
        }

        self._finding_criteria = finding_criteria
        self._group_by = group_by
        self._size = size
        self._sort_criteria = sort_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFindingStatisticsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFindingStatistics_request of this GetFindingStatisticsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finding_criteria(self):
        """Gets the finding_criteria of this GetFindingStatisticsRequest.


        :return: The finding_criteria of this GetFindingStatisticsRequest.
        :rtype: CreateFindingsFilterRequestFindingCriteria
        """
        return self._finding_criteria

    @finding_criteria.setter
    def finding_criteria(self, finding_criteria):
        """Sets the finding_criteria of this GetFindingStatisticsRequest.


        :param finding_criteria: The finding_criteria of this GetFindingStatisticsRequest.
        :type finding_criteria: CreateFindingsFilterRequestFindingCriteria
        """

        self._finding_criteria = finding_criteria

    @property
    def group_by(self):
        """Gets the group_by of this GetFindingStatisticsRequest.

        <p>The finding property to use to group the query results. Valid values are:</p> <ul><li><p>classificationDetails.jobId - The unique identifier for the classification job that produced the finding.</p></li> <li><p>resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.</p></li> <li><p>severity.description - The severity level of the finding, such as High or Medium.</p></li> <li><p>type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.</p></li></ul>

        :return: The group_by of this GetFindingStatisticsRequest.
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this GetFindingStatisticsRequest.

        <p>The finding property to use to group the query results. Valid values are:</p> <ul><li><p>classificationDetails.jobId - The unique identifier for the classification job that produced the finding.</p></li> <li><p>resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.</p></li> <li><p>severity.description - The severity level of the finding, such as High or Medium.</p></li> <li><p>type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.</p></li></ul>

        :param group_by: The group_by of this GetFindingStatisticsRequest.
        :type group_by: str
        """
        allowed_values = ["resourcesAffected.s3Bucket.name", "type", "classificationDetails.jobId", "severity.description"]  # noqa: E501
        if group_by not in allowed_values:
            raise ValueError(
                "Invalid value for `group_by` ({0}), must be one of {1}"
                .format(group_by, allowed_values)
            )

        self._group_by = group_by

    @property
    def size(self):
        """Gets the size of this GetFindingStatisticsRequest.

        The maximum number of items to include in each page of the response.

        :return: The size of this GetFindingStatisticsRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GetFindingStatisticsRequest.

        The maximum number of items to include in each page of the response.

        :param size: The size of this GetFindingStatisticsRequest.
        :type size: int
        """

        self._size = size

    @property
    def sort_criteria(self):
        """Gets the sort_criteria of this GetFindingStatisticsRequest.


        :return: The sort_criteria of this GetFindingStatisticsRequest.
        :rtype: GetFindingStatisticsRequestSortCriteria
        """
        return self._sort_criteria

    @sort_criteria.setter
    def sort_criteria(self, sort_criteria):
        """Sets the sort_criteria of this GetFindingStatisticsRequest.


        :param sort_criteria: The sort_criteria of this GetFindingStatisticsRequest.
        :type sort_criteria: GetFindingStatisticsRequestSortCriteria
        """

        self._sort_criteria = sort_criteria
