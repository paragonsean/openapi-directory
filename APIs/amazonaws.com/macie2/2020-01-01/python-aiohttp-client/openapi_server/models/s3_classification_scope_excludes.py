# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3ClassificationScopeExcludes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_names: List=None):
        """S3ClassificationScopeExcludes - a model defined in OpenAPI

        :param bucket_names: The bucket_names of this S3ClassificationScopeExcludes.
        """
        self.openapi_types = {
            'bucket_names': List
        }

        self.attribute_map = {
            'bucket_names': 'bucketNames'
        }

        self._bucket_names = bucket_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3ClassificationScopeExcludes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3ClassificationScope_excludes of this S3ClassificationScopeExcludes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_names(self):
        """Gets the bucket_names of this S3ClassificationScopeExcludes.


        :return: The bucket_names of this S3ClassificationScopeExcludes.
        :rtype: List
        """
        return self._bucket_names

    @bucket_names.setter
    def bucket_names(self, bucket_names):
        """Sets the bucket_names of this S3ClassificationScopeExcludes.


        :param bucket_names: The bucket_names of this S3ClassificationScopeExcludes.
        :type bucket_names: List
        """
        if bucket_names is None:
            raise ValueError("Invalid value for `bucket_names`, must not be `None`")

        self._bucket_names = bucket_names
