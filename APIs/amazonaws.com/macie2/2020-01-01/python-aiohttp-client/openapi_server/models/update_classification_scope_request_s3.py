# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_classification_scope_request_s3_excludes import UpdateClassificationScopeRequestS3Excludes
from openapi_server import util


class UpdateClassificationScopeRequestS3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excludes: UpdateClassificationScopeRequestS3Excludes=None):
        """UpdateClassificationScopeRequestS3 - a model defined in OpenAPI

        :param excludes: The excludes of this UpdateClassificationScopeRequestS3.
        """
        self.openapi_types = {
            'excludes': UpdateClassificationScopeRequestS3Excludes
        }

        self.attribute_map = {
            'excludes': 'excludes'
        }

        self._excludes = excludes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateClassificationScopeRequestS3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateClassificationScopeRequest_s3 of this UpdateClassificationScopeRequestS3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excludes(self):
        """Gets the excludes of this UpdateClassificationScopeRequestS3.


        :return: The excludes of this UpdateClassificationScopeRequestS3.
        :rtype: UpdateClassificationScopeRequestS3Excludes
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this UpdateClassificationScopeRequestS3.


        :param excludes: The excludes of this UpdateClassificationScopeRequestS3.
        :type excludes: UpdateClassificationScopeRequestS3Excludes
        """
        if excludes is None:
            raise ValueError("Invalid value for `excludes`, must not be `None`")

        self._excludes = excludes
