# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScopingExcludes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _and: List=None):
        """ScopingExcludes - a model defined in OpenAPI

        :param _and: The _and of this ScopingExcludes.
        """
        self.openapi_types = {
            '_and': List
        }

        self.attribute_map = {
            '_and': 'and'
        }

        self.__and = _and

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopingExcludes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scoping_excludes of this ScopingExcludes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _and(self):
        """Gets the _and of this ScopingExcludes.


        :return: The _and of this ScopingExcludes.
        :rtype: List
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this ScopingExcludes.


        :param _and: The _and of this ScopingExcludes.
        :type _and: List
        """

        self.__and = _and
