# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_identity_assumed_role import UserIdentityAssumedRole
from openapi_server.models.user_identity_aws_account import UserIdentityAwsAccount
from openapi_server.models.user_identity_aws_service import UserIdentityAwsService
from openapi_server.models.user_identity_federated_user import UserIdentityFederatedUser
from openapi_server.models.user_identity_iam_user import UserIdentityIamUser
from openapi_server.models.user_identity_root import UserIdentityRoot
from openapi_server.models.user_identity_type import UserIdentityType
from openapi_server import util


class UserIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assumed_role: UserIdentityAssumedRole=None, aws_account: UserIdentityAwsAccount=None, aws_service: UserIdentityAwsService=None, federated_user: UserIdentityFederatedUser=None, iam_user: UserIdentityIamUser=None, root: UserIdentityRoot=None, type: UserIdentityType=None):
        """UserIdentity - a model defined in OpenAPI

        :param assumed_role: The assumed_role of this UserIdentity.
        :param aws_account: The aws_account of this UserIdentity.
        :param aws_service: The aws_service of this UserIdentity.
        :param federated_user: The federated_user of this UserIdentity.
        :param iam_user: The iam_user of this UserIdentity.
        :param root: The root of this UserIdentity.
        :param type: The type of this UserIdentity.
        """
        self.openapi_types = {
            'assumed_role': UserIdentityAssumedRole,
            'aws_account': UserIdentityAwsAccount,
            'aws_service': UserIdentityAwsService,
            'federated_user': UserIdentityFederatedUser,
            'iam_user': UserIdentityIamUser,
            'root': UserIdentityRoot,
            'type': UserIdentityType
        }

        self.attribute_map = {
            'assumed_role': 'assumedRole',
            'aws_account': 'awsAccount',
            'aws_service': 'awsService',
            'federated_user': 'federatedUser',
            'iam_user': 'iamUser',
            'root': 'root',
            'type': 'type'
        }

        self._assumed_role = assumed_role
        self._aws_account = aws_account
        self._aws_service = aws_service
        self._federated_user = federated_user
        self._iam_user = iam_user
        self._root = root
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserIdentity of this UserIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assumed_role(self):
        """Gets the assumed_role of this UserIdentity.


        :return: The assumed_role of this UserIdentity.
        :rtype: UserIdentityAssumedRole
        """
        return self._assumed_role

    @assumed_role.setter
    def assumed_role(self, assumed_role):
        """Sets the assumed_role of this UserIdentity.


        :param assumed_role: The assumed_role of this UserIdentity.
        :type assumed_role: UserIdentityAssumedRole
        """

        self._assumed_role = assumed_role

    @property
    def aws_account(self):
        """Gets the aws_account of this UserIdentity.


        :return: The aws_account of this UserIdentity.
        :rtype: UserIdentityAwsAccount
        """
        return self._aws_account

    @aws_account.setter
    def aws_account(self, aws_account):
        """Sets the aws_account of this UserIdentity.


        :param aws_account: The aws_account of this UserIdentity.
        :type aws_account: UserIdentityAwsAccount
        """

        self._aws_account = aws_account

    @property
    def aws_service(self):
        """Gets the aws_service of this UserIdentity.


        :return: The aws_service of this UserIdentity.
        :rtype: UserIdentityAwsService
        """
        return self._aws_service

    @aws_service.setter
    def aws_service(self, aws_service):
        """Sets the aws_service of this UserIdentity.


        :param aws_service: The aws_service of this UserIdentity.
        :type aws_service: UserIdentityAwsService
        """

        self._aws_service = aws_service

    @property
    def federated_user(self):
        """Gets the federated_user of this UserIdentity.


        :return: The federated_user of this UserIdentity.
        :rtype: UserIdentityFederatedUser
        """
        return self._federated_user

    @federated_user.setter
    def federated_user(self, federated_user):
        """Sets the federated_user of this UserIdentity.


        :param federated_user: The federated_user of this UserIdentity.
        :type federated_user: UserIdentityFederatedUser
        """

        self._federated_user = federated_user

    @property
    def iam_user(self):
        """Gets the iam_user of this UserIdentity.


        :return: The iam_user of this UserIdentity.
        :rtype: UserIdentityIamUser
        """
        return self._iam_user

    @iam_user.setter
    def iam_user(self, iam_user):
        """Sets the iam_user of this UserIdentity.


        :param iam_user: The iam_user of this UserIdentity.
        :type iam_user: UserIdentityIamUser
        """

        self._iam_user = iam_user

    @property
    def root(self):
        """Gets the root of this UserIdentity.


        :return: The root of this UserIdentity.
        :rtype: UserIdentityRoot
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this UserIdentity.


        :param root: The root of this UserIdentity.
        :type root: UserIdentityRoot
        """

        self._root = root

    @property
    def type(self):
        """Gets the type of this UserIdentity.


        :return: The type of this UserIdentity.
        :rtype: UserIdentityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserIdentity.


        :param type: The type of this UserIdentity.
        :type type: UserIdentityType
        """

        self._type = type
