# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableMacieRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, finding_publishing_frequency: str=None, status: str=None):
        """EnableMacieRequest - a model defined in OpenAPI

        :param client_token: The client_token of this EnableMacieRequest.
        :param finding_publishing_frequency: The finding_publishing_frequency of this EnableMacieRequest.
        :param status: The status of this EnableMacieRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'finding_publishing_frequency': str,
            'status': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'finding_publishing_frequency': 'findingPublishingFrequency',
            'status': 'status'
        }

        self._client_token = client_token
        self._finding_publishing_frequency = finding_publishing_frequency
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableMacieRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableMacie_request of this EnableMacieRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this EnableMacieRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :return: The client_token of this EnableMacieRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this EnableMacieRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this EnableMacieRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def finding_publishing_frequency(self):
        """Gets the finding_publishing_frequency of this EnableMacieRequest.

        The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see <a href=\"https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html\">Monitoring and processing findings</a> in the <i>Amazon Macie User Guide</i>. Valid values are:

        :return: The finding_publishing_frequency of this EnableMacieRequest.
        :rtype: str
        """
        return self._finding_publishing_frequency

    @finding_publishing_frequency.setter
    def finding_publishing_frequency(self, finding_publishing_frequency):
        """Sets the finding_publishing_frequency of this EnableMacieRequest.

        The frequency with which Amazon Macie publishes updates to policy findings for an account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events). For more information, see <a href=\"https://docs.aws.amazon.com/macie/latest/user/findings-monitor.html\">Monitoring and processing findings</a> in the <i>Amazon Macie User Guide</i>. Valid values are:

        :param finding_publishing_frequency: The finding_publishing_frequency of this EnableMacieRequest.
        :type finding_publishing_frequency: str
        """
        allowed_values = ["FIFTEEN_MINUTES", "ONE_HOUR", "SIX_HOURS"]  # noqa: E501
        if finding_publishing_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `finding_publishing_frequency` ({0}), must be one of {1}"
                .format(finding_publishing_frequency, allowed_values)
            )

        self._finding_publishing_frequency = finding_publishing_frequency

    @property
    def status(self):
        """Gets the status of this EnableMacieRequest.

        The status of an Amazon Macie account. Valid values are:

        :return: The status of this EnableMacieRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnableMacieRequest.

        The status of an Amazon Macie account. Valid values are:

        :param status: The status of this EnableMacieRequest.
        :type status: str
        """
        allowed_values = ["PAUSED", "ENABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
