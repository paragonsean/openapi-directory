# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relationship_status import RelationshipStatus
from openapi_server import util


class Member(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, administrator_account_id: str=None, arn: str=None, email: str=None, invited_at: datetime=None, master_account_id: str=None, relationship_status: RelationshipStatus=None, tags: Dict=None, updated_at: datetime=None):
        """Member - a model defined in OpenAPI

        :param account_id: The account_id of this Member.
        :param administrator_account_id: The administrator_account_id of this Member.
        :param arn: The arn of this Member.
        :param email: The email of this Member.
        :param invited_at: The invited_at of this Member.
        :param master_account_id: The master_account_id of this Member.
        :param relationship_status: The relationship_status of this Member.
        :param tags: The tags of this Member.
        :param updated_at: The updated_at of this Member.
        """
        self.openapi_types = {
            'account_id': str,
            'administrator_account_id': str,
            'arn': str,
            'email': str,
            'invited_at': datetime,
            'master_account_id': str,
            'relationship_status': RelationshipStatus,
            'tags': Dict,
            'updated_at': datetime
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'administrator_account_id': 'administratorAccountId',
            'arn': 'arn',
            'email': 'email',
            'invited_at': 'invitedAt',
            'master_account_id': 'masterAccountId',
            'relationship_status': 'relationshipStatus',
            'tags': 'tags',
            'updated_at': 'updatedAt'
        }

        self._account_id = account_id
        self._administrator_account_id = administrator_account_id
        self._arn = arn
        self._email = email
        self._invited_at = invited_at
        self._master_account_id = master_account_id
        self._relationship_status = relationship_status
        self._tags = tags
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Member':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Member of this Member.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Member.


        :return: The account_id of this Member.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Member.


        :param account_id: The account_id of this Member.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def administrator_account_id(self):
        """Gets the administrator_account_id of this Member.


        :return: The administrator_account_id of this Member.
        :rtype: str
        """
        return self._administrator_account_id

    @administrator_account_id.setter
    def administrator_account_id(self, administrator_account_id):
        """Sets the administrator_account_id of this Member.


        :param administrator_account_id: The administrator_account_id of this Member.
        :type administrator_account_id: str
        """

        self._administrator_account_id = administrator_account_id

    @property
    def arn(self):
        """Gets the arn of this Member.


        :return: The arn of this Member.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Member.


        :param arn: The arn of this Member.
        :type arn: str
        """

        self._arn = arn

    @property
    def email(self):
        """Gets the email of this Member.


        :return: The email of this Member.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Member.


        :param email: The email of this Member.
        :type email: str
        """

        self._email = email

    @property
    def invited_at(self):
        """Gets the invited_at of this Member.


        :return: The invited_at of this Member.
        :rtype: datetime
        """
        return self._invited_at

    @invited_at.setter
    def invited_at(self, invited_at):
        """Sets the invited_at of this Member.


        :param invited_at: The invited_at of this Member.
        :type invited_at: datetime
        """

        self._invited_at = invited_at

    @property
    def master_account_id(self):
        """Gets the master_account_id of this Member.


        :return: The master_account_id of this Member.
        :rtype: str
        """
        return self._master_account_id

    @master_account_id.setter
    def master_account_id(self, master_account_id):
        """Sets the master_account_id of this Member.


        :param master_account_id: The master_account_id of this Member.
        :type master_account_id: str
        """

        self._master_account_id = master_account_id

    @property
    def relationship_status(self):
        """Gets the relationship_status of this Member.


        :return: The relationship_status of this Member.
        :rtype: RelationshipStatus
        """
        return self._relationship_status

    @relationship_status.setter
    def relationship_status(self, relationship_status):
        """Sets the relationship_status of this Member.


        :param relationship_status: The relationship_status of this Member.
        :type relationship_status: RelationshipStatus
        """

        self._relationship_status = relationship_status

    @property
    def tags(self):
        """Gets the tags of this Member.


        :return: The tags of this Member.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Member.


        :param tags: The tags of this Member.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def updated_at(self):
        """Gets the updated_at of this Member.


        :return: The updated_at of this Member.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Member.


        :param updated_at: The updated_at of this Member.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
