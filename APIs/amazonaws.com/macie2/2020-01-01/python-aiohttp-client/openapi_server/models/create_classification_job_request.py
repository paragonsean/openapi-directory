# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_classification_job_request_s3_job_definition import CreateClassificationJobRequestS3JobDefinition
from openapi_server.models.create_classification_job_request_schedule_frequency import CreateClassificationJobRequestScheduleFrequency
from openapi_server import util


class CreateClassificationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_list_ids: List[str]=None, client_token: str=None, custom_data_identifier_ids: List[str]=None, description: str=None, initial_run: bool=None, job_type: str=None, managed_data_identifier_ids: List[str]=None, managed_data_identifier_selector: str=None, name: str=None, s3_job_definition: CreateClassificationJobRequestS3JobDefinition=None, sampling_percentage: int=None, schedule_frequency: CreateClassificationJobRequestScheduleFrequency=None, tags: Dict[str, str]=None):
        """CreateClassificationJobRequest - a model defined in OpenAPI

        :param allow_list_ids: The allow_list_ids of this CreateClassificationJobRequest.
        :param client_token: The client_token of this CreateClassificationJobRequest.
        :param custom_data_identifier_ids: The custom_data_identifier_ids of this CreateClassificationJobRequest.
        :param description: The description of this CreateClassificationJobRequest.
        :param initial_run: The initial_run of this CreateClassificationJobRequest.
        :param job_type: The job_type of this CreateClassificationJobRequest.
        :param managed_data_identifier_ids: The managed_data_identifier_ids of this CreateClassificationJobRequest.
        :param managed_data_identifier_selector: The managed_data_identifier_selector of this CreateClassificationJobRequest.
        :param name: The name of this CreateClassificationJobRequest.
        :param s3_job_definition: The s3_job_definition of this CreateClassificationJobRequest.
        :param sampling_percentage: The sampling_percentage of this CreateClassificationJobRequest.
        :param schedule_frequency: The schedule_frequency of this CreateClassificationJobRequest.
        :param tags: The tags of this CreateClassificationJobRequest.
        """
        self.openapi_types = {
            'allow_list_ids': List[str],
            'client_token': str,
            'custom_data_identifier_ids': List[str],
            'description': str,
            'initial_run': bool,
            'job_type': str,
            'managed_data_identifier_ids': List[str],
            'managed_data_identifier_selector': str,
            'name': str,
            's3_job_definition': CreateClassificationJobRequestS3JobDefinition,
            'sampling_percentage': int,
            'schedule_frequency': CreateClassificationJobRequestScheduleFrequency,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'allow_list_ids': 'allowListIds',
            'client_token': 'clientToken',
            'custom_data_identifier_ids': 'customDataIdentifierIds',
            'description': 'description',
            'initial_run': 'initialRun',
            'job_type': 'jobType',
            'managed_data_identifier_ids': 'managedDataIdentifierIds',
            'managed_data_identifier_selector': 'managedDataIdentifierSelector',
            'name': 'name',
            's3_job_definition': 's3JobDefinition',
            'sampling_percentage': 'samplingPercentage',
            'schedule_frequency': 'scheduleFrequency',
            'tags': 'tags'
        }

        self._allow_list_ids = allow_list_ids
        self._client_token = client_token
        self._custom_data_identifier_ids = custom_data_identifier_ids
        self._description = description
        self._initial_run = initial_run
        self._job_type = job_type
        self._managed_data_identifier_ids = managed_data_identifier_ids
        self._managed_data_identifier_selector = managed_data_identifier_selector
        self._name = name
        self._s3_job_definition = s3_job_definition
        self._sampling_percentage = sampling_percentage
        self._schedule_frequency = schedule_frequency
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClassificationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateClassificationJob_request of this CreateClassificationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_list_ids(self):
        """Gets the allow_list_ids of this CreateClassificationJobRequest.

        An array of unique identifiers, one for each allow list for the job to use when it analyzes data.

        :return: The allow_list_ids of this CreateClassificationJobRequest.
        :rtype: List[str]
        """
        return self._allow_list_ids

    @allow_list_ids.setter
    def allow_list_ids(self, allow_list_ids):
        """Sets the allow_list_ids of this CreateClassificationJobRequest.

        An array of unique identifiers, one for each allow list for the job to use when it analyzes data.

        :param allow_list_ids: The allow_list_ids of this CreateClassificationJobRequest.
        :type allow_list_ids: List[str]
        """

        self._allow_list_ids = allow_list_ids

    @property
    def client_token(self):
        """Gets the client_token of this CreateClassificationJobRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateClassificationJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateClassificationJobRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateClassificationJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def custom_data_identifier_ids(self):
        """Gets the custom_data_identifier_ids of this CreateClassificationJobRequest.

        An array of unique identifiers, one for each custom data identifier for the job to use when it analyzes data. To use only managed data identifiers, don't specify a value for this property and specify a value other than NONE for the managedDataIdentifierSelector property.

        :return: The custom_data_identifier_ids of this CreateClassificationJobRequest.
        :rtype: List[str]
        """
        return self._custom_data_identifier_ids

    @custom_data_identifier_ids.setter
    def custom_data_identifier_ids(self, custom_data_identifier_ids):
        """Sets the custom_data_identifier_ids of this CreateClassificationJobRequest.

        An array of unique identifiers, one for each custom data identifier for the job to use when it analyzes data. To use only managed data identifiers, don't specify a value for this property and specify a value other than NONE for the managedDataIdentifierSelector property.

        :param custom_data_identifier_ids: The custom_data_identifier_ids of this CreateClassificationJobRequest.
        :type custom_data_identifier_ids: List[str]
        """

        self._custom_data_identifier_ids = custom_data_identifier_ids

    @property
    def description(self):
        """Gets the description of this CreateClassificationJobRequest.

        A custom description of the job. The description can contain as many as 200 characters.

        :return: The description of this CreateClassificationJobRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateClassificationJobRequest.

        A custom description of the job. The description can contain as many as 200 characters.

        :param description: The description of this CreateClassificationJobRequest.
        :type description: str
        """

        self._description = description

    @property
    def initial_run(self):
        """Gets the initial_run of this CreateClassificationJobRequest.

        <p>For a recurring job, specifies whether to analyze all existing, eligible objects immediately after the job is created (true). To analyze only those objects that are created or changed after you create the job and before the job's first scheduled run, set this value to false.</p> <p>If you configure the job to run only once, don't specify a value for this property.</p>

        :return: The initial_run of this CreateClassificationJobRequest.
        :rtype: bool
        """
        return self._initial_run

    @initial_run.setter
    def initial_run(self, initial_run):
        """Sets the initial_run of this CreateClassificationJobRequest.

        <p>For a recurring job, specifies whether to analyze all existing, eligible objects immediately after the job is created (true). To analyze only those objects that are created or changed after you create the job and before the job's first scheduled run, set this value to false.</p> <p>If you configure the job to run only once, don't specify a value for this property.</p>

        :param initial_run: The initial_run of this CreateClassificationJobRequest.
        :type initial_run: bool
        """

        self._initial_run = initial_run

    @property
    def job_type(self):
        """Gets the job_type of this CreateClassificationJobRequest.

        The schedule for running a classification job. Valid values are:

        :return: The job_type of this CreateClassificationJobRequest.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreateClassificationJobRequest.

        The schedule for running a classification job. Valid values are:

        :param job_type: The job_type of this CreateClassificationJobRequest.
        :type job_type: str
        """
        allowed_values = ["ONE_TIME", "SCHEDULED"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def managed_data_identifier_ids(self):
        """Gets the managed_data_identifier_ids of this CreateClassificationJobRequest.

        <p>An array of unique identifiers, one for each managed data identifier for the job to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type that you specify for the job (managedDataIdentifierSelector).</p> <p>To retrieve a list of valid values for this property, use the ListManagedDataIdentifiers operation.</p>

        :return: The managed_data_identifier_ids of this CreateClassificationJobRequest.
        :rtype: List[str]
        """
        return self._managed_data_identifier_ids

    @managed_data_identifier_ids.setter
    def managed_data_identifier_ids(self, managed_data_identifier_ids):
        """Sets the managed_data_identifier_ids of this CreateClassificationJobRequest.

        <p>An array of unique identifiers, one for each managed data identifier for the job to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type that you specify for the job (managedDataIdentifierSelector).</p> <p>To retrieve a list of valid values for this property, use the ListManagedDataIdentifiers operation.</p>

        :param managed_data_identifier_ids: The managed_data_identifier_ids of this CreateClassificationJobRequest.
        :type managed_data_identifier_ids: List[str]
        """

        self._managed_data_identifier_ids = managed_data_identifier_ids

    @property
    def managed_data_identifier_selector(self):
        """Gets the managed_data_identifier_selector of this CreateClassificationJobRequest.

        The selection type that determines which managed data identifiers a classification job uses to analyze data. Valid values are:

        :return: The managed_data_identifier_selector of this CreateClassificationJobRequest.
        :rtype: str
        """
        return self._managed_data_identifier_selector

    @managed_data_identifier_selector.setter
    def managed_data_identifier_selector(self, managed_data_identifier_selector):
        """Sets the managed_data_identifier_selector of this CreateClassificationJobRequest.

        The selection type that determines which managed data identifiers a classification job uses to analyze data. Valid values are:

        :param managed_data_identifier_selector: The managed_data_identifier_selector of this CreateClassificationJobRequest.
        :type managed_data_identifier_selector: str
        """
        allowed_values = ["ALL", "EXCLUDE", "INCLUDE", "NONE", "RECOMMENDED"]  # noqa: E501
        if managed_data_identifier_selector not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_data_identifier_selector` ({0}), must be one of {1}"
                .format(managed_data_identifier_selector, allowed_values)
            )

        self._managed_data_identifier_selector = managed_data_identifier_selector

    @property
    def name(self):
        """Gets the name of this CreateClassificationJobRequest.

        A custom name for the job. The name can contain as many as 500 characters.

        :return: The name of this CreateClassificationJobRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClassificationJobRequest.

        A custom name for the job. The name can contain as many as 500 characters.

        :param name: The name of this CreateClassificationJobRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def s3_job_definition(self):
        """Gets the s3_job_definition of this CreateClassificationJobRequest.


        :return: The s3_job_definition of this CreateClassificationJobRequest.
        :rtype: CreateClassificationJobRequestS3JobDefinition
        """
        return self._s3_job_definition

    @s3_job_definition.setter
    def s3_job_definition(self, s3_job_definition):
        """Sets the s3_job_definition of this CreateClassificationJobRequest.


        :param s3_job_definition: The s3_job_definition of this CreateClassificationJobRequest.
        :type s3_job_definition: CreateClassificationJobRequestS3JobDefinition
        """
        if s3_job_definition is None:
            raise ValueError("Invalid value for `s3_job_definition`, must not be `None`")

        self._s3_job_definition = s3_job_definition

    @property
    def sampling_percentage(self):
        """Gets the sampling_percentage of this CreateClassificationJobRequest.

        The sampling depth, as a percentage, for the job to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.

        :return: The sampling_percentage of this CreateClassificationJobRequest.
        :rtype: int
        """
        return self._sampling_percentage

    @sampling_percentage.setter
    def sampling_percentage(self, sampling_percentage):
        """Sets the sampling_percentage of this CreateClassificationJobRequest.

        The sampling depth, as a percentage, for the job to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.

        :param sampling_percentage: The sampling_percentage of this CreateClassificationJobRequest.
        :type sampling_percentage: int
        """

        self._sampling_percentage = sampling_percentage

    @property
    def schedule_frequency(self):
        """Gets the schedule_frequency of this CreateClassificationJobRequest.


        :return: The schedule_frequency of this CreateClassificationJobRequest.
        :rtype: CreateClassificationJobRequestScheduleFrequency
        """
        return self._schedule_frequency

    @schedule_frequency.setter
    def schedule_frequency(self, schedule_frequency):
        """Sets the schedule_frequency of this CreateClassificationJobRequest.


        :param schedule_frequency: The schedule_frequency of this CreateClassificationJobRequest.
        :type schedule_frequency: CreateClassificationJobRequestScheduleFrequency
        """

        self._schedule_frequency = schedule_frequency

    @property
    def tags(self):
        """Gets the tags of this CreateClassificationJobRequest.

        A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.

        :return: The tags of this CreateClassificationJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateClassificationJobRequest.

        A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.

        :param tags: The tags of this CreateClassificationJobRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
