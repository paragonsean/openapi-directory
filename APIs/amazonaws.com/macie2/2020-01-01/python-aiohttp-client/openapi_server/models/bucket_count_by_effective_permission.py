# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketCountByEffectivePermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, publicly_accessible: int=None, publicly_readable: int=None, publicly_writable: int=None, unknown: int=None):
        """BucketCountByEffectivePermission - a model defined in OpenAPI

        :param publicly_accessible: The publicly_accessible of this BucketCountByEffectivePermission.
        :param publicly_readable: The publicly_readable of this BucketCountByEffectivePermission.
        :param publicly_writable: The publicly_writable of this BucketCountByEffectivePermission.
        :param unknown: The unknown of this BucketCountByEffectivePermission.
        """
        self.openapi_types = {
            'publicly_accessible': int,
            'publicly_readable': int,
            'publicly_writable': int,
            'unknown': int
        }

        self.attribute_map = {
            'publicly_accessible': 'publiclyAccessible',
            'publicly_readable': 'publiclyReadable',
            'publicly_writable': 'publiclyWritable',
            'unknown': 'unknown'
        }

        self._publicly_accessible = publicly_accessible
        self._publicly_readable = publicly_readable
        self._publicly_writable = publicly_writable
        self._unknown = unknown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketCountByEffectivePermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketCountByEffectivePermission of this BucketCountByEffectivePermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def publicly_accessible(self):
        """Gets the publicly_accessible of this BucketCountByEffectivePermission.


        :return: The publicly_accessible of this BucketCountByEffectivePermission.
        :rtype: int
        """
        return self._publicly_accessible

    @publicly_accessible.setter
    def publicly_accessible(self, publicly_accessible):
        """Sets the publicly_accessible of this BucketCountByEffectivePermission.


        :param publicly_accessible: The publicly_accessible of this BucketCountByEffectivePermission.
        :type publicly_accessible: int
        """

        self._publicly_accessible = publicly_accessible

    @property
    def publicly_readable(self):
        """Gets the publicly_readable of this BucketCountByEffectivePermission.


        :return: The publicly_readable of this BucketCountByEffectivePermission.
        :rtype: int
        """
        return self._publicly_readable

    @publicly_readable.setter
    def publicly_readable(self, publicly_readable):
        """Sets the publicly_readable of this BucketCountByEffectivePermission.


        :param publicly_readable: The publicly_readable of this BucketCountByEffectivePermission.
        :type publicly_readable: int
        """

        self._publicly_readable = publicly_readable

    @property
    def publicly_writable(self):
        """Gets the publicly_writable of this BucketCountByEffectivePermission.


        :return: The publicly_writable of this BucketCountByEffectivePermission.
        :rtype: int
        """
        return self._publicly_writable

    @publicly_writable.setter
    def publicly_writable(self, publicly_writable):
        """Sets the publicly_writable of this BucketCountByEffectivePermission.


        :param publicly_writable: The publicly_writable of this BucketCountByEffectivePermission.
        :type publicly_writable: int
        """

        self._publicly_writable = publicly_writable

    @property
    def unknown(self):
        """Gets the unknown of this BucketCountByEffectivePermission.


        :return: The unknown of this BucketCountByEffectivePermission.
        :rtype: int
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this BucketCountByEffectivePermission.


        :param unknown: The unknown of this BucketCountByEffectivePermission.
        :type unknown: int
        """

        self._unknown = unknown
