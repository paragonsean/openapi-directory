# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_identifier_severity import DataIdentifierSeverity
from openapi_server import util


class SeverityLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occurrences_threshold: int=None, severity: DataIdentifierSeverity=None):
        """SeverityLevel - a model defined in OpenAPI

        :param occurrences_threshold: The occurrences_threshold of this SeverityLevel.
        :param severity: The severity of this SeverityLevel.
        """
        self.openapi_types = {
            'occurrences_threshold': int,
            'severity': DataIdentifierSeverity
        }

        self.attribute_map = {
            'occurrences_threshold': 'occurrencesThreshold',
            'severity': 'severity'
        }

        self._occurrences_threshold = occurrences_threshold
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeverityLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeverityLevel of this SeverityLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occurrences_threshold(self):
        """Gets the occurrences_threshold of this SeverityLevel.


        :return: The occurrences_threshold of this SeverityLevel.
        :rtype: int
        """
        return self._occurrences_threshold

    @occurrences_threshold.setter
    def occurrences_threshold(self, occurrences_threshold):
        """Sets the occurrences_threshold of this SeverityLevel.


        :param occurrences_threshold: The occurrences_threshold of this SeverityLevel.
        :type occurrences_threshold: int
        """
        if occurrences_threshold is None:
            raise ValueError("Invalid value for `occurrences_threshold`, must not be `None`")

        self._occurrences_threshold = occurrences_threshold

    @property
    def severity(self):
        """Gets the severity of this SeverityLevel.


        :return: The severity of this SeverityLevel.
        :rtype: DataIdentifierSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this SeverityLevel.


        :param severity: The severity of this SeverityLevel.
        :type severity: DataIdentifierSeverity
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity
