# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_details_ip_city import IpAddressDetailsIpCity
from openapi_server.models.ip_address_details_ip_country import IpAddressDetailsIpCountry
from openapi_server.models.ip_address_details_ip_geo_location import IpAddressDetailsIpGeoLocation
from openapi_server.models.ip_address_details_ip_owner import IpAddressDetailsIpOwner
from openapi_server import util


class FindingActorIpAddressDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address_v4: str=None, ip_city: IpAddressDetailsIpCity=None, ip_country: IpAddressDetailsIpCountry=None, ip_geo_location: IpAddressDetailsIpGeoLocation=None, ip_owner: IpAddressDetailsIpOwner=None):
        """FindingActorIpAddressDetails - a model defined in OpenAPI

        :param ip_address_v4: The ip_address_v4 of this FindingActorIpAddressDetails.
        :param ip_city: The ip_city of this FindingActorIpAddressDetails.
        :param ip_country: The ip_country of this FindingActorIpAddressDetails.
        :param ip_geo_location: The ip_geo_location of this FindingActorIpAddressDetails.
        :param ip_owner: The ip_owner of this FindingActorIpAddressDetails.
        """
        self.openapi_types = {
            'ip_address_v4': str,
            'ip_city': IpAddressDetailsIpCity,
            'ip_country': IpAddressDetailsIpCountry,
            'ip_geo_location': IpAddressDetailsIpGeoLocation,
            'ip_owner': IpAddressDetailsIpOwner
        }

        self.attribute_map = {
            'ip_address_v4': 'ipAddressV4',
            'ip_city': 'ipCity',
            'ip_country': 'ipCountry',
            'ip_geo_location': 'ipGeoLocation',
            'ip_owner': 'ipOwner'
        }

        self._ip_address_v4 = ip_address_v4
        self._ip_city = ip_city
        self._ip_country = ip_country
        self._ip_geo_location = ip_geo_location
        self._ip_owner = ip_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindingActorIpAddressDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FindingActor_ipAddressDetails of this FindingActorIpAddressDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address_v4(self):
        """Gets the ip_address_v4 of this FindingActorIpAddressDetails.


        :return: The ip_address_v4 of this FindingActorIpAddressDetails.
        :rtype: str
        """
        return self._ip_address_v4

    @ip_address_v4.setter
    def ip_address_v4(self, ip_address_v4):
        """Sets the ip_address_v4 of this FindingActorIpAddressDetails.


        :param ip_address_v4: The ip_address_v4 of this FindingActorIpAddressDetails.
        :type ip_address_v4: str
        """

        self._ip_address_v4 = ip_address_v4

    @property
    def ip_city(self):
        """Gets the ip_city of this FindingActorIpAddressDetails.


        :return: The ip_city of this FindingActorIpAddressDetails.
        :rtype: IpAddressDetailsIpCity
        """
        return self._ip_city

    @ip_city.setter
    def ip_city(self, ip_city):
        """Sets the ip_city of this FindingActorIpAddressDetails.


        :param ip_city: The ip_city of this FindingActorIpAddressDetails.
        :type ip_city: IpAddressDetailsIpCity
        """

        self._ip_city = ip_city

    @property
    def ip_country(self):
        """Gets the ip_country of this FindingActorIpAddressDetails.


        :return: The ip_country of this FindingActorIpAddressDetails.
        :rtype: IpAddressDetailsIpCountry
        """
        return self._ip_country

    @ip_country.setter
    def ip_country(self, ip_country):
        """Sets the ip_country of this FindingActorIpAddressDetails.


        :param ip_country: The ip_country of this FindingActorIpAddressDetails.
        :type ip_country: IpAddressDetailsIpCountry
        """

        self._ip_country = ip_country

    @property
    def ip_geo_location(self):
        """Gets the ip_geo_location of this FindingActorIpAddressDetails.


        :return: The ip_geo_location of this FindingActorIpAddressDetails.
        :rtype: IpAddressDetailsIpGeoLocation
        """
        return self._ip_geo_location

    @ip_geo_location.setter
    def ip_geo_location(self, ip_geo_location):
        """Sets the ip_geo_location of this FindingActorIpAddressDetails.


        :param ip_geo_location: The ip_geo_location of this FindingActorIpAddressDetails.
        :type ip_geo_location: IpAddressDetailsIpGeoLocation
        """

        self._ip_geo_location = ip_geo_location

    @property
    def ip_owner(self):
        """Gets the ip_owner of this FindingActorIpAddressDetails.


        :return: The ip_owner of this FindingActorIpAddressDetails.
        :rtype: IpAddressDetailsIpOwner
        """
        return self._ip_owner

    @ip_owner.setter
    def ip_owner(self, ip_owner):
        """Sets the ip_owner of this FindingActorIpAddressDetails.


        :param ip_owner: The ip_owner of this FindingActorIpAddressDetails.
        :type ip_owner: IpAddressDetailsIpOwner
        """

        self._ip_owner = ip_owner
