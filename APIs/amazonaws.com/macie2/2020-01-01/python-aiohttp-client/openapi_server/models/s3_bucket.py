# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allows_unencrypted_object_uploads import AllowsUnencryptedObjectUploads
from openapi_server.models.s3_bucket_default_server_side_encryption import S3BucketDefaultServerSideEncryption
from openapi_server.models.s3_bucket_owner import S3BucketOwner
from openapi_server.models.s3_bucket_public_access import S3BucketPublicAccess
from openapi_server import util


class S3Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_unencrypted_object_uploads: AllowsUnencryptedObjectUploads=None, arn: str=None, created_at: datetime=None, default_server_side_encryption: S3BucketDefaultServerSideEncryption=None, name: str=None, owner: S3BucketOwner=None, public_access: S3BucketPublicAccess=None, tags: List=None):
        """S3Bucket - a model defined in OpenAPI

        :param allows_unencrypted_object_uploads: The allows_unencrypted_object_uploads of this S3Bucket.
        :param arn: The arn of this S3Bucket.
        :param created_at: The created_at of this S3Bucket.
        :param default_server_side_encryption: The default_server_side_encryption of this S3Bucket.
        :param name: The name of this S3Bucket.
        :param owner: The owner of this S3Bucket.
        :param public_access: The public_access of this S3Bucket.
        :param tags: The tags of this S3Bucket.
        """
        self.openapi_types = {
            'allows_unencrypted_object_uploads': AllowsUnencryptedObjectUploads,
            'arn': str,
            'created_at': datetime,
            'default_server_side_encryption': S3BucketDefaultServerSideEncryption,
            'name': str,
            'owner': S3BucketOwner,
            'public_access': S3BucketPublicAccess,
            'tags': List
        }

        self.attribute_map = {
            'allows_unencrypted_object_uploads': 'allowsUnencryptedObjectUploads',
            'arn': 'arn',
            'created_at': 'createdAt',
            'default_server_side_encryption': 'defaultServerSideEncryption',
            'name': 'name',
            'owner': 'owner',
            'public_access': 'publicAccess',
            'tags': 'tags'
        }

        self._allows_unencrypted_object_uploads = allows_unencrypted_object_uploads
        self._arn = arn
        self._created_at = created_at
        self._default_server_side_encryption = default_server_side_encryption
        self._name = name
        self._owner = owner
        self._public_access = public_access
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Bucket of this S3Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_unencrypted_object_uploads(self):
        """Gets the allows_unencrypted_object_uploads of this S3Bucket.


        :return: The allows_unencrypted_object_uploads of this S3Bucket.
        :rtype: AllowsUnencryptedObjectUploads
        """
        return self._allows_unencrypted_object_uploads

    @allows_unencrypted_object_uploads.setter
    def allows_unencrypted_object_uploads(self, allows_unencrypted_object_uploads):
        """Sets the allows_unencrypted_object_uploads of this S3Bucket.


        :param allows_unencrypted_object_uploads: The allows_unencrypted_object_uploads of this S3Bucket.
        :type allows_unencrypted_object_uploads: AllowsUnencryptedObjectUploads
        """

        self._allows_unencrypted_object_uploads = allows_unencrypted_object_uploads

    @property
    def arn(self):
        """Gets the arn of this S3Bucket.


        :return: The arn of this S3Bucket.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this S3Bucket.


        :param arn: The arn of this S3Bucket.
        :type arn: str
        """

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this S3Bucket.


        :return: The created_at of this S3Bucket.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this S3Bucket.


        :param created_at: The created_at of this S3Bucket.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def default_server_side_encryption(self):
        """Gets the default_server_side_encryption of this S3Bucket.


        :return: The default_server_side_encryption of this S3Bucket.
        :rtype: S3BucketDefaultServerSideEncryption
        """
        return self._default_server_side_encryption

    @default_server_side_encryption.setter
    def default_server_side_encryption(self, default_server_side_encryption):
        """Sets the default_server_side_encryption of this S3Bucket.


        :param default_server_side_encryption: The default_server_side_encryption of this S3Bucket.
        :type default_server_side_encryption: S3BucketDefaultServerSideEncryption
        """

        self._default_server_side_encryption = default_server_side_encryption

    @property
    def name(self):
        """Gets the name of this S3Bucket.


        :return: The name of this S3Bucket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this S3Bucket.


        :param name: The name of this S3Bucket.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this S3Bucket.


        :return: The owner of this S3Bucket.
        :rtype: S3BucketOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this S3Bucket.


        :param owner: The owner of this S3Bucket.
        :type owner: S3BucketOwner
        """

        self._owner = owner

    @property
    def public_access(self):
        """Gets the public_access of this S3Bucket.


        :return: The public_access of this S3Bucket.
        :rtype: S3BucketPublicAccess
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this S3Bucket.


        :param public_access: The public_access of this S3Bucket.
        :type public_access: S3BucketPublicAccess
        """

        self._public_access = public_access

    @property
    def tags(self):
        """Gets the tags of this S3Bucket.


        :return: The tags of this S3Bucket.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this S3Bucket.


        :param tags: The tags of this S3Bucket.
        :type tags: List
        """

        self._tags = tags
