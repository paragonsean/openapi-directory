# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3BucketDefinitionForJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, buckets: List=None):
        """S3BucketDefinitionForJob - a model defined in OpenAPI

        :param account_id: The account_id of this S3BucketDefinitionForJob.
        :param buckets: The buckets of this S3BucketDefinitionForJob.
        """
        self.openapi_types = {
            'account_id': str,
            'buckets': List
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'buckets': 'buckets'
        }

        self._account_id = account_id
        self._buckets = buckets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3BucketDefinitionForJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3BucketDefinitionForJob of this S3BucketDefinitionForJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this S3BucketDefinitionForJob.


        :return: The account_id of this S3BucketDefinitionForJob.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this S3BucketDefinitionForJob.


        :param account_id: The account_id of this S3BucketDefinitionForJob.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def buckets(self):
        """Gets the buckets of this S3BucketDefinitionForJob.


        :return: The buckets of this S3BucketDefinitionForJob.
        :rtype: List
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this S3BucketDefinitionForJob.


        :param buckets: The buckets of this S3BucketDefinitionForJob.
        :type buckets: List
        """
        if buckets is None:
            raise ValueError("Invalid value for `buckets`, must not be `None`")

        self._buckets = buckets
