# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableOrganizationAdminAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_account_id: str=None, client_token: str=None):
        """EnableOrganizationAdminAccountRequest - a model defined in OpenAPI

        :param admin_account_id: The admin_account_id of this EnableOrganizationAdminAccountRequest.
        :param client_token: The client_token of this EnableOrganizationAdminAccountRequest.
        """
        self.openapi_types = {
            'admin_account_id': str,
            'client_token': str
        }

        self.attribute_map = {
            'admin_account_id': 'adminAccountId',
            'client_token': 'clientToken'
        }

        self._admin_account_id = admin_account_id
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableOrganizationAdminAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableOrganizationAdminAccount_request of this EnableOrganizationAdminAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_account_id(self):
        """Gets the admin_account_id of this EnableOrganizationAdminAccountRequest.

        The Amazon Web Services account ID for the account to designate as the delegated Amazon Macie administrator account for the organization.

        :return: The admin_account_id of this EnableOrganizationAdminAccountRequest.
        :rtype: str
        """
        return self._admin_account_id

    @admin_account_id.setter
    def admin_account_id(self, admin_account_id):
        """Sets the admin_account_id of this EnableOrganizationAdminAccountRequest.

        The Amazon Web Services account ID for the account to designate as the delegated Amazon Macie administrator account for the organization.

        :param admin_account_id: The admin_account_id of this EnableOrganizationAdminAccountRequest.
        :type admin_account_id: str
        """
        if admin_account_id is None:
            raise ValueError("Invalid value for `admin_account_id`, must not be `None`")

        self._admin_account_id = admin_account_id

    @property
    def client_token(self):
        """Gets the client_token of this EnableOrganizationAdminAccountRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :return: The client_token of this EnableOrganizationAdminAccountRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this EnableOrganizationAdminAccountRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this EnableOrganizationAdminAccountRequest.
        :type client_token: str
        """

        self._client_token = client_token
