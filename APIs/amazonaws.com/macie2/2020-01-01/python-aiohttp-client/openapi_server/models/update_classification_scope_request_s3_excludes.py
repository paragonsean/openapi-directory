# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_scope_update_operation import ClassificationScopeUpdateOperation
from openapi_server import util


class UpdateClassificationScopeRequestS3Excludes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_names: List=None, operation: ClassificationScopeUpdateOperation=None):
        """UpdateClassificationScopeRequestS3Excludes - a model defined in OpenAPI

        :param bucket_names: The bucket_names of this UpdateClassificationScopeRequestS3Excludes.
        :param operation: The operation of this UpdateClassificationScopeRequestS3Excludes.
        """
        self.openapi_types = {
            'bucket_names': List,
            'operation': ClassificationScopeUpdateOperation
        }

        self.attribute_map = {
            'bucket_names': 'bucketNames',
            'operation': 'operation'
        }

        self._bucket_names = bucket_names
        self._operation = operation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateClassificationScopeRequestS3Excludes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateClassificationScope_request_s3_excludes of this UpdateClassificationScopeRequestS3Excludes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_names(self):
        """Gets the bucket_names of this UpdateClassificationScopeRequestS3Excludes.


        :return: The bucket_names of this UpdateClassificationScopeRequestS3Excludes.
        :rtype: List
        """
        return self._bucket_names

    @bucket_names.setter
    def bucket_names(self, bucket_names):
        """Sets the bucket_names of this UpdateClassificationScopeRequestS3Excludes.


        :param bucket_names: The bucket_names of this UpdateClassificationScopeRequestS3Excludes.
        :type bucket_names: List
        """
        if bucket_names is None:
            raise ValueError("Invalid value for `bucket_names`, must not be `None`")

        self._bucket_names = bucket_names

    @property
    def operation(self):
        """Gets the operation of this UpdateClassificationScopeRequestS3Excludes.


        :return: The operation of this UpdateClassificationScopeRequestS3Excludes.
        :rtype: ClassificationScopeUpdateOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this UpdateClassificationScopeRequestS3Excludes.


        :param operation: The operation of this UpdateClassificationScopeRequestS3Excludes.
        :type operation: ClassificationScopeUpdateOperation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation
