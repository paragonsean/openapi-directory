# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_comparator import JobComparator
from openapi_server.models.tag_target import TagTarget
from openapi_server import util


class JobScopeTermTagScopeTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparator: JobComparator=None, key: str=None, tag_values: List=None, target: TagTarget=None):
        """JobScopeTermTagScopeTerm - a model defined in OpenAPI

        :param comparator: The comparator of this JobScopeTermTagScopeTerm.
        :param key: The key of this JobScopeTermTagScopeTerm.
        :param tag_values: The tag_values of this JobScopeTermTagScopeTerm.
        :param target: The target of this JobScopeTermTagScopeTerm.
        """
        self.openapi_types = {
            'comparator': JobComparator,
            'key': str,
            'tag_values': List,
            'target': TagTarget
        }

        self.attribute_map = {
            'comparator': 'comparator',
            'key': 'key',
            'tag_values': 'tagValues',
            'target': 'target'
        }

        self._comparator = comparator
        self._key = key
        self._tag_values = tag_values
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobScopeTermTagScopeTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobScopeTerm_tagScopeTerm of this JobScopeTermTagScopeTerm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparator(self):
        """Gets the comparator of this JobScopeTermTagScopeTerm.


        :return: The comparator of this JobScopeTermTagScopeTerm.
        :rtype: JobComparator
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this JobScopeTermTagScopeTerm.


        :param comparator: The comparator of this JobScopeTermTagScopeTerm.
        :type comparator: JobComparator
        """

        self._comparator = comparator

    @property
    def key(self):
        """Gets the key of this JobScopeTermTagScopeTerm.


        :return: The key of this JobScopeTermTagScopeTerm.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this JobScopeTermTagScopeTerm.


        :param key: The key of this JobScopeTermTagScopeTerm.
        :type key: str
        """

        self._key = key

    @property
    def tag_values(self):
        """Gets the tag_values of this JobScopeTermTagScopeTerm.


        :return: The tag_values of this JobScopeTermTagScopeTerm.
        :rtype: List
        """
        return self._tag_values

    @tag_values.setter
    def tag_values(self, tag_values):
        """Sets the tag_values of this JobScopeTermTagScopeTerm.


        :param tag_values: The tag_values of this JobScopeTermTagScopeTerm.
        :type tag_values: List
        """

        self._tag_values = tag_values

    @property
    def target(self):
        """Gets the target of this JobScopeTermTagScopeTerm.


        :return: The target of this JobScopeTermTagScopeTerm.
        :rtype: TagTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this JobScopeTermTagScopeTerm.


        :param target: The target of this JobScopeTermTagScopeTerm.
        :type target: TagTarget
        """

        self._target = target
