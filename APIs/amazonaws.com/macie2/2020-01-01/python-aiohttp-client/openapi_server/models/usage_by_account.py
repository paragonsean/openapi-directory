# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.usage_by_account_service_limit import UsageByAccountServiceLimit
from openapi_server.models.usage_type import UsageType
from openapi_server import util


class UsageByAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: Currency=None, estimated_cost: str=None, service_limit: UsageByAccountServiceLimit=None, type: UsageType=None):
        """UsageByAccount - a model defined in OpenAPI

        :param currency: The currency of this UsageByAccount.
        :param estimated_cost: The estimated_cost of this UsageByAccount.
        :param service_limit: The service_limit of this UsageByAccount.
        :param type: The type of this UsageByAccount.
        """
        self.openapi_types = {
            'currency': Currency,
            'estimated_cost': str,
            'service_limit': UsageByAccountServiceLimit,
            'type': UsageType
        }

        self.attribute_map = {
            'currency': 'currency',
            'estimated_cost': 'estimatedCost',
            'service_limit': 'serviceLimit',
            'type': 'type'
        }

        self._currency = currency
        self._estimated_cost = estimated_cost
        self._service_limit = service_limit
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageByAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageByAccount of this UsageByAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this UsageByAccount.


        :return: The currency of this UsageByAccount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UsageByAccount.


        :param currency: The currency of this UsageByAccount.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def estimated_cost(self):
        """Gets the estimated_cost of this UsageByAccount.


        :return: The estimated_cost of this UsageByAccount.
        :rtype: str
        """
        return self._estimated_cost

    @estimated_cost.setter
    def estimated_cost(self, estimated_cost):
        """Sets the estimated_cost of this UsageByAccount.


        :param estimated_cost: The estimated_cost of this UsageByAccount.
        :type estimated_cost: str
        """

        self._estimated_cost = estimated_cost

    @property
    def service_limit(self):
        """Gets the service_limit of this UsageByAccount.


        :return: The service_limit of this UsageByAccount.
        :rtype: UsageByAccountServiceLimit
        """
        return self._service_limit

    @service_limit.setter
    def service_limit(self, service_limit):
        """Sets the service_limit of this UsageByAccount.


        :param service_limit: The service_limit of this UsageByAccount.
        :type service_limit: UsageByAccountServiceLimit
        """

        self._service_limit = service_limit

    @property
    def type(self):
        """Gets the type of this UsageByAccount.


        :return: The type of this UsageByAccount.
        :rtype: UsageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UsageByAccount.


        :param type: The type of this UsageByAccount.
        :type type: UsageType
        """

        self._type = type
