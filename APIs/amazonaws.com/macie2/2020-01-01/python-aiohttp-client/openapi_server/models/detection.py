# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_identifier_type import DataIdentifierType
from openapi_server import util


class Detection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, count: int=None, id: str=None, name: str=None, suppressed: bool=None, type: DataIdentifierType=None):
        """Detection - a model defined in OpenAPI

        :param arn: The arn of this Detection.
        :param count: The count of this Detection.
        :param id: The id of this Detection.
        :param name: The name of this Detection.
        :param suppressed: The suppressed of this Detection.
        :param type: The type of this Detection.
        """
        self.openapi_types = {
            'arn': str,
            'count': int,
            'id': str,
            'name': str,
            'suppressed': bool,
            'type': DataIdentifierType
        }

        self.attribute_map = {
            'arn': 'arn',
            'count': 'count',
            'id': 'id',
            'name': 'name',
            'suppressed': 'suppressed',
            'type': 'type'
        }

        self._arn = arn
        self._count = count
        self._id = id
        self._name = name
        self._suppressed = suppressed
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Detection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Detection of this Detection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Detection.


        :return: The arn of this Detection.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Detection.


        :param arn: The arn of this Detection.
        :type arn: str
        """

        self._arn = arn

    @property
    def count(self):
        """Gets the count of this Detection.


        :return: The count of this Detection.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Detection.


        :param count: The count of this Detection.
        :type count: int
        """

        self._count = count

    @property
    def id(self):
        """Gets the id of this Detection.


        :return: The id of this Detection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Detection.


        :param id: The id of this Detection.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Detection.


        :return: The name of this Detection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Detection.


        :param name: The name of this Detection.
        :type name: str
        """

        self._name = name

    @property
    def suppressed(self):
        """Gets the suppressed of this Detection.


        :return: The suppressed of this Detection.
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this Detection.


        :param suppressed: The suppressed of this Detection.
        :type suppressed: bool
        """

        self._suppressed = suppressed

    @property
    def type(self):
        """Gets the type of this Detection.


        :return: The type of this Detection.
        :rtype: DataIdentifierType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Detection.


        :param type: The type of this Detection.
        :type type: DataIdentifierType
        """

        self._type = type
