# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCustomDataIdentifierRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_words: List[str]=None, keywords: List[str]=None, maximum_match_distance: int=None, regex: str=None, sample_text: str=None):
        """TestCustomDataIdentifierRequest - a model defined in OpenAPI

        :param ignore_words: The ignore_words of this TestCustomDataIdentifierRequest.
        :param keywords: The keywords of this TestCustomDataIdentifierRequest.
        :param maximum_match_distance: The maximum_match_distance of this TestCustomDataIdentifierRequest.
        :param regex: The regex of this TestCustomDataIdentifierRequest.
        :param sample_text: The sample_text of this TestCustomDataIdentifierRequest.
        """
        self.openapi_types = {
            'ignore_words': List[str],
            'keywords': List[str],
            'maximum_match_distance': int,
            'regex': str,
            'sample_text': str
        }

        self.attribute_map = {
            'ignore_words': 'ignoreWords',
            'keywords': 'keywords',
            'maximum_match_distance': 'maximumMatchDistance',
            'regex': 'regex',
            'sample_text': 'sampleText'
        }

        self._ignore_words = ignore_words
        self._keywords = keywords
        self._maximum_match_distance = maximum_match_distance
        self._regex = regex
        self._sample_text = sample_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCustomDataIdentifierRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCustomDataIdentifier_request of this TestCustomDataIdentifierRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_words(self):
        """Gets the ignore_words of this TestCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.

        :return: The ignore_words of this TestCustomDataIdentifierRequest.
        :rtype: List[str]
        """
        return self._ignore_words

    @ignore_words.setter
    def ignore_words(self, ignore_words):
        """Sets the ignore_words of this TestCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.

        :param ignore_words: The ignore_words of this TestCustomDataIdentifierRequest.
        :type ignore_words: List[str]
        """

        self._ignore_words = ignore_words

    @property
    def keywords(self):
        """Gets the keywords of this TestCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.

        :return: The keywords of this TestCustomDataIdentifierRequest.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this TestCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.

        :param keywords: The keywords of this TestCustomDataIdentifierRequest.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def maximum_match_distance(self):
        """Gets the maximum_match_distance of this TestCustomDataIdentifierRequest.

        The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.

        :return: The maximum_match_distance of this TestCustomDataIdentifierRequest.
        :rtype: int
        """
        return self._maximum_match_distance

    @maximum_match_distance.setter
    def maximum_match_distance(self, maximum_match_distance):
        """Sets the maximum_match_distance of this TestCustomDataIdentifierRequest.

        The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.

        :param maximum_match_distance: The maximum_match_distance of this TestCustomDataIdentifierRequest.
        :type maximum_match_distance: int
        """

        self._maximum_match_distance = maximum_match_distance

    @property
    def regex(self):
        """Gets the regex of this TestCustomDataIdentifierRequest.

        The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.

        :return: The regex of this TestCustomDataIdentifierRequest.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this TestCustomDataIdentifierRequest.

        The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.

        :param regex: The regex of this TestCustomDataIdentifierRequest.
        :type regex: str
        """
        if regex is None:
            raise ValueError("Invalid value for `regex`, must not be `None`")

        self._regex = regex

    @property
    def sample_text(self):
        """Gets the sample_text of this TestCustomDataIdentifierRequest.

        The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.

        :return: The sample_text of this TestCustomDataIdentifierRequest.
        :rtype: str
        """
        return self._sample_text

    @sample_text.setter
    def sample_text(self, sample_text):
        """Sets the sample_text of this TestCustomDataIdentifierRequest.

        The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.

        :param sample_text: The sample_text of this TestCustomDataIdentifierRequest.
        :type sample_text: str
        """
        if sample_text is None:
            raise ValueError("Invalid value for `sample_text`, must not be `None`")

        self._sample_text = sample_text
