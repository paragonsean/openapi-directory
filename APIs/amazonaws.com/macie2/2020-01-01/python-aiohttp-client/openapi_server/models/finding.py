# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.finding_category import FindingCategory
from openapi_server.models.finding_classification_details import FindingClassificationDetails
from openapi_server.models.finding_policy_details import FindingPolicyDetails
from openapi_server.models.finding_resources_affected import FindingResourcesAffected
from openapi_server.models.finding_severity import FindingSeverity
from openapi_server.models.finding_type import FindingType
from openapi_server import util


class Finding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, archived: bool=None, category: FindingCategory=None, classification_details: FindingClassificationDetails=None, count: int=None, created_at: datetime=None, description: str=None, id: str=None, partition: str=None, policy_details: FindingPolicyDetails=None, region: str=None, resources_affected: FindingResourcesAffected=None, sample: bool=None, schema_version: str=None, severity: FindingSeverity=None, title: str=None, type: FindingType=None, updated_at: datetime=None):
        """Finding - a model defined in OpenAPI

        :param account_id: The account_id of this Finding.
        :param archived: The archived of this Finding.
        :param category: The category of this Finding.
        :param classification_details: The classification_details of this Finding.
        :param count: The count of this Finding.
        :param created_at: The created_at of this Finding.
        :param description: The description of this Finding.
        :param id: The id of this Finding.
        :param partition: The partition of this Finding.
        :param policy_details: The policy_details of this Finding.
        :param region: The region of this Finding.
        :param resources_affected: The resources_affected of this Finding.
        :param sample: The sample of this Finding.
        :param schema_version: The schema_version of this Finding.
        :param severity: The severity of this Finding.
        :param title: The title of this Finding.
        :param type: The type of this Finding.
        :param updated_at: The updated_at of this Finding.
        """
        self.openapi_types = {
            'account_id': str,
            'archived': bool,
            'category': FindingCategory,
            'classification_details': FindingClassificationDetails,
            'count': int,
            'created_at': datetime,
            'description': str,
            'id': str,
            'partition': str,
            'policy_details': FindingPolicyDetails,
            'region': str,
            'resources_affected': FindingResourcesAffected,
            'sample': bool,
            'schema_version': str,
            'severity': FindingSeverity,
            'title': str,
            'type': FindingType,
            'updated_at': datetime
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'archived': 'archived',
            'category': 'category',
            'classification_details': 'classificationDetails',
            'count': 'count',
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'partition': 'partition',
            'policy_details': 'policyDetails',
            'region': 'region',
            'resources_affected': 'resourcesAffected',
            'sample': 'sample',
            'schema_version': 'schemaVersion',
            'severity': 'severity',
            'title': 'title',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._account_id = account_id
        self._archived = archived
        self._category = category
        self._classification_details = classification_details
        self._count = count
        self._created_at = created_at
        self._description = description
        self._id = id
        self._partition = partition
        self._policy_details = policy_details
        self._region = region
        self._resources_affected = resources_affected
        self._sample = sample
        self._schema_version = schema_version
        self._severity = severity
        self._title = title
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Finding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Finding of this Finding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Finding.


        :return: The account_id of this Finding.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Finding.


        :param account_id: The account_id of this Finding.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def archived(self):
        """Gets the archived of this Finding.


        :return: The archived of this Finding.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Finding.


        :param archived: The archived of this Finding.
        :type archived: bool
        """

        self._archived = archived

    @property
    def category(self):
        """Gets the category of this Finding.


        :return: The category of this Finding.
        :rtype: FindingCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Finding.


        :param category: The category of this Finding.
        :type category: FindingCategory
        """

        self._category = category

    @property
    def classification_details(self):
        """Gets the classification_details of this Finding.


        :return: The classification_details of this Finding.
        :rtype: FindingClassificationDetails
        """
        return self._classification_details

    @classification_details.setter
    def classification_details(self, classification_details):
        """Sets the classification_details of this Finding.


        :param classification_details: The classification_details of this Finding.
        :type classification_details: FindingClassificationDetails
        """

        self._classification_details = classification_details

    @property
    def count(self):
        """Gets the count of this Finding.


        :return: The count of this Finding.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Finding.


        :param count: The count of this Finding.
        :type count: int
        """

        self._count = count

    @property
    def created_at(self):
        """Gets the created_at of this Finding.


        :return: The created_at of this Finding.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Finding.


        :param created_at: The created_at of this Finding.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Finding.


        :return: The description of this Finding.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Finding.


        :param description: The description of this Finding.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Finding.


        :return: The id of this Finding.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Finding.


        :param id: The id of this Finding.
        :type id: str
        """

        self._id = id

    @property
    def partition(self):
        """Gets the partition of this Finding.


        :return: The partition of this Finding.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this Finding.


        :param partition: The partition of this Finding.
        :type partition: str
        """

        self._partition = partition

    @property
    def policy_details(self):
        """Gets the policy_details of this Finding.


        :return: The policy_details of this Finding.
        :rtype: FindingPolicyDetails
        """
        return self._policy_details

    @policy_details.setter
    def policy_details(self, policy_details):
        """Sets the policy_details of this Finding.


        :param policy_details: The policy_details of this Finding.
        :type policy_details: FindingPolicyDetails
        """

        self._policy_details = policy_details

    @property
    def region(self):
        """Gets the region of this Finding.


        :return: The region of this Finding.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Finding.


        :param region: The region of this Finding.
        :type region: str
        """

        self._region = region

    @property
    def resources_affected(self):
        """Gets the resources_affected of this Finding.


        :return: The resources_affected of this Finding.
        :rtype: FindingResourcesAffected
        """
        return self._resources_affected

    @resources_affected.setter
    def resources_affected(self, resources_affected):
        """Sets the resources_affected of this Finding.


        :param resources_affected: The resources_affected of this Finding.
        :type resources_affected: FindingResourcesAffected
        """

        self._resources_affected = resources_affected

    @property
    def sample(self):
        """Gets the sample of this Finding.


        :return: The sample of this Finding.
        :rtype: bool
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this Finding.


        :param sample: The sample of this Finding.
        :type sample: bool
        """

        self._sample = sample

    @property
    def schema_version(self):
        """Gets the schema_version of this Finding.


        :return: The schema_version of this Finding.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this Finding.


        :param schema_version: The schema_version of this Finding.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def severity(self):
        """Gets the severity of this Finding.


        :return: The severity of this Finding.
        :rtype: FindingSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Finding.


        :param severity: The severity of this Finding.
        :type severity: FindingSeverity
        """

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this Finding.


        :return: The title of this Finding.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Finding.


        :param title: The title of this Finding.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Finding.


        :return: The type of this Finding.
        :rtype: FindingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Finding.


        :param type: The type of this Finding.
        :type type: FindingType
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Finding.


        :return: The updated_at of this Finding.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Finding.


        :param updated_at: The updated_at of this Finding.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
