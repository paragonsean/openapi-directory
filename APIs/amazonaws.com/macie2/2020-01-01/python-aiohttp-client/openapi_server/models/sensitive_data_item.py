# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sensitive_data_item_category import SensitiveDataItemCategory
from openapi_server import util


class SensitiveDataItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: SensitiveDataItemCategory=None, detections: List=None, total_count: int=None):
        """SensitiveDataItem - a model defined in OpenAPI

        :param category: The category of this SensitiveDataItem.
        :param detections: The detections of this SensitiveDataItem.
        :param total_count: The total_count of this SensitiveDataItem.
        """
        self.openapi_types = {
            'category': SensitiveDataItemCategory,
            'detections': List,
            'total_count': int
        }

        self.attribute_map = {
            'category': 'category',
            'detections': 'detections',
            'total_count': 'totalCount'
        }

        self._category = category
        self._detections = detections
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveDataItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensitiveDataItem of this SensitiveDataItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this SensitiveDataItem.


        :return: The category of this SensitiveDataItem.
        :rtype: SensitiveDataItemCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SensitiveDataItem.


        :param category: The category of this SensitiveDataItem.
        :type category: SensitiveDataItemCategory
        """

        self._category = category

    @property
    def detections(self):
        """Gets the detections of this SensitiveDataItem.


        :return: The detections of this SensitiveDataItem.
        :rtype: List
        """
        return self._detections

    @detections.setter
    def detections(self, detections):
        """Sets the detections of this SensitiveDataItem.


        :param detections: The detections of this SensitiveDataItem.
        :type detections: List
        """

        self._detections = detections

    @property
    def total_count(self):
        """Gets the total_count of this SensitiveDataItem.


        :return: The total_count of this SensitiveDataItem.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SensitiveDataItem.


        :param total_count: The total_count of this SensitiveDataItem.
        :type total_count: int
        """

        self._total_count = total_count
