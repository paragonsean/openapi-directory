# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Occurrences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cells: List=None, line_ranges: List=None, offset_ranges: List=None, pages: List=None, records: List=None):
        """Occurrences - a model defined in OpenAPI

        :param cells: The cells of this Occurrences.
        :param line_ranges: The line_ranges of this Occurrences.
        :param offset_ranges: The offset_ranges of this Occurrences.
        :param pages: The pages of this Occurrences.
        :param records: The records of this Occurrences.
        """
        self.openapi_types = {
            'cells': List,
            'line_ranges': List,
            'offset_ranges': List,
            'pages': List,
            'records': List
        }

        self.attribute_map = {
            'cells': 'cells',
            'line_ranges': 'lineRanges',
            'offset_ranges': 'offsetRanges',
            'pages': 'pages',
            'records': 'records'
        }

        self._cells = cells
        self._line_ranges = line_ranges
        self._offset_ranges = offset_ranges
        self._pages = pages
        self._records = records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Occurrences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Occurrences of this Occurrences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cells(self):
        """Gets the cells of this Occurrences.


        :return: The cells of this Occurrences.
        :rtype: List
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this Occurrences.


        :param cells: The cells of this Occurrences.
        :type cells: List
        """

        self._cells = cells

    @property
    def line_ranges(self):
        """Gets the line_ranges of this Occurrences.


        :return: The line_ranges of this Occurrences.
        :rtype: List
        """
        return self._line_ranges

    @line_ranges.setter
    def line_ranges(self, line_ranges):
        """Sets the line_ranges of this Occurrences.


        :param line_ranges: The line_ranges of this Occurrences.
        :type line_ranges: List
        """

        self._line_ranges = line_ranges

    @property
    def offset_ranges(self):
        """Gets the offset_ranges of this Occurrences.


        :return: The offset_ranges of this Occurrences.
        :rtype: List
        """
        return self._offset_ranges

    @offset_ranges.setter
    def offset_ranges(self, offset_ranges):
        """Sets the offset_ranges of this Occurrences.


        :param offset_ranges: The offset_ranges of this Occurrences.
        :type offset_ranges: List
        """

        self._offset_ranges = offset_ranges

    @property
    def pages(self):
        """Gets the pages of this Occurrences.


        :return: The pages of this Occurrences.
        :rtype: List
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Occurrences.


        :param pages: The pages of this Occurrences.
        :type pages: List
        """

        self._pages = pages

    @property
    def records(self):
        """Gets the records of this Occurrences.


        :return: The records of this Occurrences.
        :rtype: List
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this Occurrences.


        :param records: The records of this Occurrences.
        :type records: List
        """

        self._records = records
