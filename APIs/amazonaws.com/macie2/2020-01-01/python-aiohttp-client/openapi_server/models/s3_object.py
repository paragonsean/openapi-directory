# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_object_server_side_encryption import S3ObjectServerSideEncryption
from openapi_server.models.storage_class import StorageClass
from openapi_server import util


class S3Object(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_arn: str=None, e_tag: str=None, extension: str=None, key: str=None, last_modified: datetime=None, path: str=None, public_access: bool=None, server_side_encryption: S3ObjectServerSideEncryption=None, size: int=None, storage_class: StorageClass=None, tags: List=None, version_id: str=None):
        """S3Object - a model defined in OpenAPI

        :param bucket_arn: The bucket_arn of this S3Object.
        :param e_tag: The e_tag of this S3Object.
        :param extension: The extension of this S3Object.
        :param key: The key of this S3Object.
        :param last_modified: The last_modified of this S3Object.
        :param path: The path of this S3Object.
        :param public_access: The public_access of this S3Object.
        :param server_side_encryption: The server_side_encryption of this S3Object.
        :param size: The size of this S3Object.
        :param storage_class: The storage_class of this S3Object.
        :param tags: The tags of this S3Object.
        :param version_id: The version_id of this S3Object.
        """
        self.openapi_types = {
            'bucket_arn': str,
            'e_tag': str,
            'extension': str,
            'key': str,
            'last_modified': datetime,
            'path': str,
            'public_access': bool,
            'server_side_encryption': S3ObjectServerSideEncryption,
            'size': int,
            'storage_class': StorageClass,
            'tags': List,
            'version_id': str
        }

        self.attribute_map = {
            'bucket_arn': 'bucketArn',
            'e_tag': 'eTag',
            'extension': 'extension',
            'key': 'key',
            'last_modified': 'lastModified',
            'path': 'path',
            'public_access': 'publicAccess',
            'server_side_encryption': 'serverSideEncryption',
            'size': 'size',
            'storage_class': 'storageClass',
            'tags': 'tags',
            'version_id': 'versionId'
        }

        self._bucket_arn = bucket_arn
        self._e_tag = e_tag
        self._extension = extension
        self._key = key
        self._last_modified = last_modified
        self._path = path
        self._public_access = public_access
        self._server_side_encryption = server_side_encryption
        self._size = size
        self._storage_class = storage_class
        self._tags = tags
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Object':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Object of this S3Object.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_arn(self):
        """Gets the bucket_arn of this S3Object.


        :return: The bucket_arn of this S3Object.
        :rtype: str
        """
        return self._bucket_arn

    @bucket_arn.setter
    def bucket_arn(self, bucket_arn):
        """Sets the bucket_arn of this S3Object.


        :param bucket_arn: The bucket_arn of this S3Object.
        :type bucket_arn: str
        """

        self._bucket_arn = bucket_arn

    @property
    def e_tag(self):
        """Gets the e_tag of this S3Object.


        :return: The e_tag of this S3Object.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this S3Object.


        :param e_tag: The e_tag of this S3Object.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def extension(self):
        """Gets the extension of this S3Object.


        :return: The extension of this S3Object.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this S3Object.


        :param extension: The extension of this S3Object.
        :type extension: str
        """

        self._extension = extension

    @property
    def key(self):
        """Gets the key of this S3Object.


        :return: The key of this S3Object.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this S3Object.


        :param key: The key of this S3Object.
        :type key: str
        """

        self._key = key

    @property
    def last_modified(self):
        """Gets the last_modified of this S3Object.


        :return: The last_modified of this S3Object.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this S3Object.


        :param last_modified: The last_modified of this S3Object.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def path(self):
        """Gets the path of this S3Object.


        :return: The path of this S3Object.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this S3Object.


        :param path: The path of this S3Object.
        :type path: str
        """

        self._path = path

    @property
    def public_access(self):
        """Gets the public_access of this S3Object.


        :return: The public_access of this S3Object.
        :rtype: bool
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this S3Object.


        :param public_access: The public_access of this S3Object.
        :type public_access: bool
        """

        self._public_access = public_access

    @property
    def server_side_encryption(self):
        """Gets the server_side_encryption of this S3Object.


        :return: The server_side_encryption of this S3Object.
        :rtype: S3ObjectServerSideEncryption
        """
        return self._server_side_encryption

    @server_side_encryption.setter
    def server_side_encryption(self, server_side_encryption):
        """Sets the server_side_encryption of this S3Object.


        :param server_side_encryption: The server_side_encryption of this S3Object.
        :type server_side_encryption: S3ObjectServerSideEncryption
        """

        self._server_side_encryption = server_side_encryption

    @property
    def size(self):
        """Gets the size of this S3Object.


        :return: The size of this S3Object.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this S3Object.


        :param size: The size of this S3Object.
        :type size: int
        """

        self._size = size

    @property
    def storage_class(self):
        """Gets the storage_class of this S3Object.


        :return: The storage_class of this S3Object.
        :rtype: StorageClass
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this S3Object.


        :param storage_class: The storage_class of this S3Object.
        :type storage_class: StorageClass
        """

        self._storage_class = storage_class

    @property
    def tags(self):
        """Gets the tags of this S3Object.


        :return: The tags of this S3Object.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this S3Object.


        :param tags: The tags of this S3Object.
        :type tags: List
        """

        self._tags = tags

    @property
    def version_id(self):
        """Gets the version_id of this S3Object.


        :return: The version_id of this S3Object.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this S3Object.


        :param version_id: The version_id of this S3Object.
        :type version_id: str
        """

        self._version_id = version_id
