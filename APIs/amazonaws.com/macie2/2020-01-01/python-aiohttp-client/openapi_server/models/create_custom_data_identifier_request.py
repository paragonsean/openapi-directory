# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.severity_level import SeverityLevel
from openapi_server import util


class CreateCustomDataIdentifierRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, ignore_words: List[str]=None, keywords: List[str]=None, maximum_match_distance: int=None, name: str=None, regex: str=None, severity_levels: List[SeverityLevel]=None, tags: Dict[str, str]=None):
        """CreateCustomDataIdentifierRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateCustomDataIdentifierRequest.
        :param description: The description of this CreateCustomDataIdentifierRequest.
        :param ignore_words: The ignore_words of this CreateCustomDataIdentifierRequest.
        :param keywords: The keywords of this CreateCustomDataIdentifierRequest.
        :param maximum_match_distance: The maximum_match_distance of this CreateCustomDataIdentifierRequest.
        :param name: The name of this CreateCustomDataIdentifierRequest.
        :param regex: The regex of this CreateCustomDataIdentifierRequest.
        :param severity_levels: The severity_levels of this CreateCustomDataIdentifierRequest.
        :param tags: The tags of this CreateCustomDataIdentifierRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'ignore_words': List[str],
            'keywords': List[str],
            'maximum_match_distance': int,
            'name': str,
            'regex': str,
            'severity_levels': List[SeverityLevel],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'ignore_words': 'ignoreWords',
            'keywords': 'keywords',
            'maximum_match_distance': 'maximumMatchDistance',
            'name': 'name',
            'regex': 'regex',
            'severity_levels': 'severityLevels',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._description = description
        self._ignore_words = ignore_words
        self._keywords = keywords
        self._maximum_match_distance = maximum_match_distance
        self._name = name
        self._regex = regex
        self._severity_levels = severity_levels
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomDataIdentifierRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomDataIdentifier_request of this CreateCustomDataIdentifierRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateCustomDataIdentifierRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateCustomDataIdentifierRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateCustomDataIdentifierRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateCustomDataIdentifierRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateCustomDataIdentifierRequest.

        <p>A custom description of the custom data identifier. The description can contain as many as 512 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the description of a custom data identifier. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :return: The description of this CreateCustomDataIdentifierRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCustomDataIdentifierRequest.

        <p>A custom description of the custom data identifier. The description can contain as many as 512 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the description of a custom data identifier. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :param description: The description of this CreateCustomDataIdentifierRequest.
        :type description: str
        """

        self._description = description

    @property
    def ignore_words(self):
        """Gets the ignore_words of this CreateCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.

        :return: The ignore_words of this CreateCustomDataIdentifierRequest.
        :rtype: List[str]
        """
        return self._ignore_words

    @ignore_words.setter
    def ignore_words(self, ignore_words):
        """Sets the ignore_words of this CreateCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.

        :param ignore_words: The ignore_words of this CreateCustomDataIdentifierRequest.
        :type ignore_words: List[str]
        """

        self._ignore_words = ignore_words

    @property
    def keywords(self):
        """Gets the keywords of this CreateCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.

        :return: The keywords of this CreateCustomDataIdentifierRequest.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CreateCustomDataIdentifierRequest.

        An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.

        :param keywords: The keywords of this CreateCustomDataIdentifierRequest.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def maximum_match_distance(self):
        """Gets the maximum_match_distance of this CreateCustomDataIdentifierRequest.

        The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.

        :return: The maximum_match_distance of this CreateCustomDataIdentifierRequest.
        :rtype: int
        """
        return self._maximum_match_distance

    @maximum_match_distance.setter
    def maximum_match_distance(self, maximum_match_distance):
        """Sets the maximum_match_distance of this CreateCustomDataIdentifierRequest.

        The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.

        :param maximum_match_distance: The maximum_match_distance of this CreateCustomDataIdentifierRequest.
        :type maximum_match_distance: int
        """

        self._maximum_match_distance = maximum_match_distance

    @property
    def name(self):
        """Gets the name of this CreateCustomDataIdentifierRequest.

        <p>A custom name for the custom data identifier. The name can contain as many as 128 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the name of a custom data identifier. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :return: The name of this CreateCustomDataIdentifierRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCustomDataIdentifierRequest.

        <p>A custom name for the custom data identifier. The name can contain as many as 128 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the name of a custom data identifier. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :param name: The name of this CreateCustomDataIdentifierRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def regex(self):
        """Gets the regex of this CreateCustomDataIdentifierRequest.

        The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.

        :return: The regex of this CreateCustomDataIdentifierRequest.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this CreateCustomDataIdentifierRequest.

        The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.

        :param regex: The regex of this CreateCustomDataIdentifierRequest.
        :type regex: str
        """
        if regex is None:
            raise ValueError("Invalid value for `regex`, must not be `None`")

        self._regex = regex

    @property
    def severity_levels(self):
        """Gets the severity_levels of this CreateCustomDataIdentifierRequest.

        <p>The severity to assign to findings that the custom data identifier produces, based on the number of occurrences of text that matches the custom data identifier's detection criteria. You can specify as many as three SeverityLevel objects in this array, one for each severity: LOW, MEDIUM, or HIGH. If you specify more than one, the occurrences thresholds must be in ascending order by severity, moving from LOW to HIGH. For example, 1 for LOW, 50 for MEDIUM, and 100 for HIGH. If an S3 object contains fewer occurrences than the lowest specified threshold, Amazon Macie doesn't create a finding.</p> <p>If you don't specify any values for this array, Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie automatically assigns the MEDIUM severity to those findings.</p>

        :return: The severity_levels of this CreateCustomDataIdentifierRequest.
        :rtype: List[SeverityLevel]
        """
        return self._severity_levels

    @severity_levels.setter
    def severity_levels(self, severity_levels):
        """Sets the severity_levels of this CreateCustomDataIdentifierRequest.

        <p>The severity to assign to findings that the custom data identifier produces, based on the number of occurrences of text that matches the custom data identifier's detection criteria. You can specify as many as three SeverityLevel objects in this array, one for each severity: LOW, MEDIUM, or HIGH. If you specify more than one, the occurrences thresholds must be in ascending order by severity, moving from LOW to HIGH. For example, 1 for LOW, 50 for MEDIUM, and 100 for HIGH. If an S3 object contains fewer occurrences than the lowest specified threshold, Amazon Macie doesn't create a finding.</p> <p>If you don't specify any values for this array, Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie automatically assigns the MEDIUM severity to those findings.</p>

        :param severity_levels: The severity_levels of this CreateCustomDataIdentifierRequest.
        :type severity_levels: List[SeverityLevel]
        """

        self._severity_levels = severity_levels

    @property
    def tags(self):
        """Gets the tags of this CreateCustomDataIdentifierRequest.

        A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.

        :return: The tags of this CreateCustomDataIdentifierRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCustomDataIdentifierRequest.

        A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.

        :param tags: The tags of this CreateCustomDataIdentifierRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
