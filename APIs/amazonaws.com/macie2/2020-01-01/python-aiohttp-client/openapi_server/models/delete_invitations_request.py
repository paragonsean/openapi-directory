# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteInvitationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ids: List[str]=None):
        """DeleteInvitationsRequest - a model defined in OpenAPI

        :param account_ids: The account_ids of this DeleteInvitationsRequest.
        """
        self.openapi_types = {
            'account_ids': List[str]
        }

        self.attribute_map = {
            'account_ids': 'accountIds'
        }

        self._account_ids = account_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteInvitationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteInvitations_request of this DeleteInvitationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ids(self):
        """Gets the account_ids of this DeleteInvitationsRequest.

        An array that lists Amazon Web Services account IDs, one for each account that sent an invitation to delete.

        :return: The account_ids of this DeleteInvitationsRequest.
        :rtype: List[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this DeleteInvitationsRequest.

        An array that lists Amazon Web Services account IDs, one for each account that sent an invitation to delete.

        :param account_ids: The account_ids of this DeleteInvitationsRequest.
        :type account_ids: List[str]
        """
        if account_ids is None:
            raise ValueError("Invalid value for `account_ids`, must not be `None`")

        self._account_ids = account_ids
