# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_detection_occurrences import CustomDetectionOccurrences
from openapi_server import util


class CustomDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, count: int=None, name: str=None, occurrences: CustomDetectionOccurrences=None):
        """CustomDetection - a model defined in OpenAPI

        :param arn: The arn of this CustomDetection.
        :param count: The count of this CustomDetection.
        :param name: The name of this CustomDetection.
        :param occurrences: The occurrences of this CustomDetection.
        """
        self.openapi_types = {
            'arn': str,
            'count': int,
            'name': str,
            'occurrences': CustomDetectionOccurrences
        }

        self.attribute_map = {
            'arn': 'arn',
            'count': 'count',
            'name': 'name',
            'occurrences': 'occurrences'
        }

        self._arn = arn
        self._count = count
        self._name = name
        self._occurrences = occurrences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDetection of this CustomDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CustomDetection.


        :return: The arn of this CustomDetection.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CustomDetection.


        :param arn: The arn of this CustomDetection.
        :type arn: str
        """

        self._arn = arn

    @property
    def count(self):
        """Gets the count of this CustomDetection.


        :return: The count of this CustomDetection.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CustomDetection.


        :param count: The count of this CustomDetection.
        :type count: int
        """

        self._count = count

    @property
    def name(self):
        """Gets the name of this CustomDetection.


        :return: The name of this CustomDetection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomDetection.


        :param name: The name of this CustomDetection.
        :type name: str
        """

        self._name = name

    @property
    def occurrences(self):
        """Gets the occurrences of this CustomDetection.


        :return: The occurrences of this CustomDetection.
        :rtype: CustomDetectionOccurrences
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this CustomDetection.


        :param occurrences: The occurrences of this CustomDetection.
        :type occurrences: CustomDetectionOccurrences
        """

        self._occurrences = occurrences
