# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_public_access_permission_configuration import BucketPublicAccessPermissionConfiguration
from openapi_server.models.effective_permission import EffectivePermission
from openapi_server import util


class BucketMetadataPublicAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_permission: EffectivePermission=None, permission_configuration: BucketPublicAccessPermissionConfiguration=None):
        """BucketMetadataPublicAccess - a model defined in OpenAPI

        :param effective_permission: The effective_permission of this BucketMetadataPublicAccess.
        :param permission_configuration: The permission_configuration of this BucketMetadataPublicAccess.
        """
        self.openapi_types = {
            'effective_permission': EffectivePermission,
            'permission_configuration': BucketPublicAccessPermissionConfiguration
        }

        self.attribute_map = {
            'effective_permission': 'effectivePermission',
            'permission_configuration': 'permissionConfiguration'
        }

        self._effective_permission = effective_permission
        self._permission_configuration = permission_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketMetadataPublicAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketMetadata_publicAccess of this BucketMetadataPublicAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_permission(self):
        """Gets the effective_permission of this BucketMetadataPublicAccess.


        :return: The effective_permission of this BucketMetadataPublicAccess.
        :rtype: EffectivePermission
        """
        return self._effective_permission

    @effective_permission.setter
    def effective_permission(self, effective_permission):
        """Sets the effective_permission of this BucketMetadataPublicAccess.


        :param effective_permission: The effective_permission of this BucketMetadataPublicAccess.
        :type effective_permission: EffectivePermission
        """

        self._effective_permission = effective_permission

    @property
    def permission_configuration(self):
        """Gets the permission_configuration of this BucketMetadataPublicAccess.


        :return: The permission_configuration of this BucketMetadataPublicAccess.
        :rtype: BucketPublicAccessPermissionConfiguration
        """
        return self._permission_configuration

    @permission_configuration.setter
    def permission_configuration(self, permission_configuration):
        """Sets the permission_configuration of this BucketMetadataPublicAccess.


        :param permission_configuration: The permission_configuration of this BucketMetadataPublicAccess.
        :type permission_configuration: BucketPublicAccessPermissionConfiguration
        """

        self._permission_configuration = permission_configuration
