# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketStatisticsBySensitivityNotSensitive(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classifiable_size_in_bytes: int=None, publicly_accessible_count: int=None, total_count: int=None, total_size_in_bytes: int=None):
        """BucketStatisticsBySensitivityNotSensitive - a model defined in OpenAPI

        :param classifiable_size_in_bytes: The classifiable_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.
        :param publicly_accessible_count: The publicly_accessible_count of this BucketStatisticsBySensitivityNotSensitive.
        :param total_count: The total_count of this BucketStatisticsBySensitivityNotSensitive.
        :param total_size_in_bytes: The total_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.
        """
        self.openapi_types = {
            'classifiable_size_in_bytes': int,
            'publicly_accessible_count': int,
            'total_count': int,
            'total_size_in_bytes': int
        }

        self.attribute_map = {
            'classifiable_size_in_bytes': 'classifiableSizeInBytes',
            'publicly_accessible_count': 'publiclyAccessibleCount',
            'total_count': 'totalCount',
            'total_size_in_bytes': 'totalSizeInBytes'
        }

        self._classifiable_size_in_bytes = classifiable_size_in_bytes
        self._publicly_accessible_count = publicly_accessible_count
        self._total_count = total_count
        self._total_size_in_bytes = total_size_in_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketStatisticsBySensitivityNotSensitive':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketStatisticsBySensitivity_notSensitive of this BucketStatisticsBySensitivityNotSensitive.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classifiable_size_in_bytes(self):
        """Gets the classifiable_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.


        :return: The classifiable_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.
        :rtype: int
        """
        return self._classifiable_size_in_bytes

    @classifiable_size_in_bytes.setter
    def classifiable_size_in_bytes(self, classifiable_size_in_bytes):
        """Sets the classifiable_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.


        :param classifiable_size_in_bytes: The classifiable_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.
        :type classifiable_size_in_bytes: int
        """

        self._classifiable_size_in_bytes = classifiable_size_in_bytes

    @property
    def publicly_accessible_count(self):
        """Gets the publicly_accessible_count of this BucketStatisticsBySensitivityNotSensitive.


        :return: The publicly_accessible_count of this BucketStatisticsBySensitivityNotSensitive.
        :rtype: int
        """
        return self._publicly_accessible_count

    @publicly_accessible_count.setter
    def publicly_accessible_count(self, publicly_accessible_count):
        """Sets the publicly_accessible_count of this BucketStatisticsBySensitivityNotSensitive.


        :param publicly_accessible_count: The publicly_accessible_count of this BucketStatisticsBySensitivityNotSensitive.
        :type publicly_accessible_count: int
        """

        self._publicly_accessible_count = publicly_accessible_count

    @property
    def total_count(self):
        """Gets the total_count of this BucketStatisticsBySensitivityNotSensitive.


        :return: The total_count of this BucketStatisticsBySensitivityNotSensitive.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this BucketStatisticsBySensitivityNotSensitive.


        :param total_count: The total_count of this BucketStatisticsBySensitivityNotSensitive.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def total_size_in_bytes(self):
        """Gets the total_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.


        :return: The total_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.
        :rtype: int
        """
        return self._total_size_in_bytes

    @total_size_in_bytes.setter
    def total_size_in_bytes(self, total_size_in_bytes):
        """Sets the total_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.


        :param total_size_in_bytes: The total_size_in_bytes of this BucketStatisticsBySensitivityNotSensitive.
        :type total_size_in_bytes: int
        """

        self._total_size_in_bytes = total_size_in_bytes
