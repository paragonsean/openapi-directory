# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketMetadataObjectCountByEncryptionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_managed: int=None, kms_managed: int=None, s3_managed: int=None, unencrypted: int=None, unknown: int=None):
        """BucketMetadataObjectCountByEncryptionType - a model defined in OpenAPI

        :param customer_managed: The customer_managed of this BucketMetadataObjectCountByEncryptionType.
        :param kms_managed: The kms_managed of this BucketMetadataObjectCountByEncryptionType.
        :param s3_managed: The s3_managed of this BucketMetadataObjectCountByEncryptionType.
        :param unencrypted: The unencrypted of this BucketMetadataObjectCountByEncryptionType.
        :param unknown: The unknown of this BucketMetadataObjectCountByEncryptionType.
        """
        self.openapi_types = {
            'customer_managed': int,
            'kms_managed': int,
            's3_managed': int,
            'unencrypted': int,
            'unknown': int
        }

        self.attribute_map = {
            'customer_managed': 'customerManaged',
            'kms_managed': 'kmsManaged',
            's3_managed': 's3Managed',
            'unencrypted': 'unencrypted',
            'unknown': 'unknown'
        }

        self._customer_managed = customer_managed
        self._kms_managed = kms_managed
        self._s3_managed = s3_managed
        self._unencrypted = unencrypted
        self._unknown = unknown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketMetadataObjectCountByEncryptionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BucketMetadata_objectCountByEncryptionType of this BucketMetadataObjectCountByEncryptionType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_managed(self):
        """Gets the customer_managed of this BucketMetadataObjectCountByEncryptionType.


        :return: The customer_managed of this BucketMetadataObjectCountByEncryptionType.
        :rtype: int
        """
        return self._customer_managed

    @customer_managed.setter
    def customer_managed(self, customer_managed):
        """Sets the customer_managed of this BucketMetadataObjectCountByEncryptionType.


        :param customer_managed: The customer_managed of this BucketMetadataObjectCountByEncryptionType.
        :type customer_managed: int
        """

        self._customer_managed = customer_managed

    @property
    def kms_managed(self):
        """Gets the kms_managed of this BucketMetadataObjectCountByEncryptionType.


        :return: The kms_managed of this BucketMetadataObjectCountByEncryptionType.
        :rtype: int
        """
        return self._kms_managed

    @kms_managed.setter
    def kms_managed(self, kms_managed):
        """Sets the kms_managed of this BucketMetadataObjectCountByEncryptionType.


        :param kms_managed: The kms_managed of this BucketMetadataObjectCountByEncryptionType.
        :type kms_managed: int
        """

        self._kms_managed = kms_managed

    @property
    def s3_managed(self):
        """Gets the s3_managed of this BucketMetadataObjectCountByEncryptionType.


        :return: The s3_managed of this BucketMetadataObjectCountByEncryptionType.
        :rtype: int
        """
        return self._s3_managed

    @s3_managed.setter
    def s3_managed(self, s3_managed):
        """Sets the s3_managed of this BucketMetadataObjectCountByEncryptionType.


        :param s3_managed: The s3_managed of this BucketMetadataObjectCountByEncryptionType.
        :type s3_managed: int
        """

        self._s3_managed = s3_managed

    @property
    def unencrypted(self):
        """Gets the unencrypted of this BucketMetadataObjectCountByEncryptionType.


        :return: The unencrypted of this BucketMetadataObjectCountByEncryptionType.
        :rtype: int
        """
        return self._unencrypted

    @unencrypted.setter
    def unencrypted(self, unencrypted):
        """Sets the unencrypted of this BucketMetadataObjectCountByEncryptionType.


        :param unencrypted: The unencrypted of this BucketMetadataObjectCountByEncryptionType.
        :type unencrypted: int
        """

        self._unencrypted = unencrypted

    @property
    def unknown(self):
        """Gets the unknown of this BucketMetadataObjectCountByEncryptionType.


        :return: The unknown of this BucketMetadataObjectCountByEncryptionType.
        :rtype: int
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this BucketMetadataObjectCountByEncryptionType.


        :param unknown: The unknown of this BucketMetadataObjectCountByEncryptionType.
        :type unknown: int
        """

        self._unknown = unknown
