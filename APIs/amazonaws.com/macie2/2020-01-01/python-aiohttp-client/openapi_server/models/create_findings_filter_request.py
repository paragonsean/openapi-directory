# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_findings_filter_request_finding_criteria import CreateFindingsFilterRequestFindingCriteria
from openapi_server import util


class CreateFindingsFilterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, client_token: str=None, description: str=None, finding_criteria: CreateFindingsFilterRequestFindingCriteria=None, name: str=None, position: int=None, tags: Dict[str, str]=None):
        """CreateFindingsFilterRequest - a model defined in OpenAPI

        :param action: The action of this CreateFindingsFilterRequest.
        :param client_token: The client_token of this CreateFindingsFilterRequest.
        :param description: The description of this CreateFindingsFilterRequest.
        :param finding_criteria: The finding_criteria of this CreateFindingsFilterRequest.
        :param name: The name of this CreateFindingsFilterRequest.
        :param position: The position of this CreateFindingsFilterRequest.
        :param tags: The tags of this CreateFindingsFilterRequest.
        """
        self.openapi_types = {
            'action': str,
            'client_token': str,
            'description': str,
            'finding_criteria': CreateFindingsFilterRequestFindingCriteria,
            'name': str,
            'position': int,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'action': 'action',
            'client_token': 'clientToken',
            'description': 'description',
            'finding_criteria': 'findingCriteria',
            'name': 'name',
            'position': 'position',
            'tags': 'tags'
        }

        self._action = action
        self._client_token = client_token
        self._description = description
        self._finding_criteria = finding_criteria
        self._name = name
        self._position = position
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFindingsFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFindingsFilter_request of this CreateFindingsFilterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateFindingsFilterRequest.

        The action to perform on findings that match the filter criteria. To suppress (automatically archive) findings that match the criteria, set this value to ARCHIVE. Valid values are:

        :return: The action of this CreateFindingsFilterRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateFindingsFilterRequest.

        The action to perform on findings that match the filter criteria. To suppress (automatically archive) findings that match the criteria, set this value to ARCHIVE. Valid values are:

        :param action: The action of this CreateFindingsFilterRequest.
        :type action: str
        """
        allowed_values = ["ARCHIVE", "NOOP"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def client_token(self):
        """Gets the client_token of this CreateFindingsFilterRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateFindingsFilterRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateFindingsFilterRequest.

        A unique, case-sensitive token that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateFindingsFilterRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateFindingsFilterRequest.

        <p>A custom description of the filter. The description can contain as many as 512 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the description of a filter. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :return: The description of this CreateFindingsFilterRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFindingsFilterRequest.

        <p>A custom description of the filter. The description can contain as many as 512 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the description of a filter. Other users of your account might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :param description: The description of this CreateFindingsFilterRequest.
        :type description: str
        """

        self._description = description

    @property
    def finding_criteria(self):
        """Gets the finding_criteria of this CreateFindingsFilterRequest.


        :return: The finding_criteria of this CreateFindingsFilterRequest.
        :rtype: CreateFindingsFilterRequestFindingCriteria
        """
        return self._finding_criteria

    @finding_criteria.setter
    def finding_criteria(self, finding_criteria):
        """Sets the finding_criteria of this CreateFindingsFilterRequest.


        :param finding_criteria: The finding_criteria of this CreateFindingsFilterRequest.
        :type finding_criteria: CreateFindingsFilterRequestFindingCriteria
        """
        if finding_criteria is None:
            raise ValueError("Invalid value for `finding_criteria`, must not be `None`")

        self._finding_criteria = finding_criteria

    @property
    def name(self):
        """Gets the name of this CreateFindingsFilterRequest.

        <p>A custom name for the filter. The name must contain at least 3 characters and can contain as many as 64 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the name of a filter. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :return: The name of this CreateFindingsFilterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFindingsFilterRequest.

        <p>A custom name for the filter. The name must contain at least 3 characters and can contain as many as 64 characters.</p> <p>We strongly recommend that you avoid including any sensitive data in the name of a filter. Other users of your account might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.</p>

        :param name: The name of this CreateFindingsFilterRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this CreateFindingsFilterRequest.

        The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.

        :return: The position of this CreateFindingsFilterRequest.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CreateFindingsFilterRequest.

        The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.

        :param position: The position of this CreateFindingsFilterRequest.
        :type position: int
        """

        self._position = position

    @property
    def tags(self):
        """Gets the tags of this CreateFindingsFilterRequest.

        A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.

        :return: The tags of this CreateFindingsFilterRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFindingsFilterRequest.

        A string-to-string map of key-value pairs that specifies the tags (keys and values) for an Amazon Macie resource.

        :param tags: The tags of this CreateFindingsFilterRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
