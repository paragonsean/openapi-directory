/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationRequest_RunConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationRequest_RunConfigurationUpdate::OAIUpdateApplicationRequest_RunConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationRequest_RunConfigurationUpdate::OAIUpdateApplicationRequest_RunConfigurationUpdate() {
    this->initializeModel();
}

OAIUpdateApplicationRequest_RunConfigurationUpdate::~OAIUpdateApplicationRequest_RunConfigurationUpdate() {}

void OAIUpdateApplicationRequest_RunConfigurationUpdate::initializeModel() {

    m_flink_run_configuration_isSet = false;
    m_flink_run_configuration_isValid = false;

    m_application_restore_configuration_isSet = false;
    m_application_restore_configuration_isValid = false;
}

void OAIUpdateApplicationRequest_RunConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationRequest_RunConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_flink_run_configuration_isValid = ::OpenAPI::fromJsonValue(m_flink_run_configuration, json[QString("FlinkRunConfiguration")]);
    m_flink_run_configuration_isSet = !json[QString("FlinkRunConfiguration")].isNull() && m_flink_run_configuration_isValid;

    m_application_restore_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_restore_configuration, json[QString("ApplicationRestoreConfiguration")]);
    m_application_restore_configuration_isSet = !json[QString("ApplicationRestoreConfiguration")].isNull() && m_application_restore_configuration_isValid;
}

QString OAIUpdateApplicationRequest_RunConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationRequest_RunConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_flink_run_configuration.isSet()) {
        obj.insert(QString("FlinkRunConfiguration"), ::OpenAPI::toJsonValue(m_flink_run_configuration));
    }
    if (m_application_restore_configuration.isSet()) {
        obj.insert(QString("ApplicationRestoreConfiguration"), ::OpenAPI::toJsonValue(m_application_restore_configuration));
    }
    return obj;
}

OAIRunConfiguration_FlinkRunConfiguration OAIUpdateApplicationRequest_RunConfigurationUpdate::getFlinkRunConfiguration() const {
    return m_flink_run_configuration;
}
void OAIUpdateApplicationRequest_RunConfigurationUpdate::setFlinkRunConfiguration(const OAIRunConfiguration_FlinkRunConfiguration &flink_run_configuration) {
    m_flink_run_configuration = flink_run_configuration;
    m_flink_run_configuration_isSet = true;
}

bool OAIUpdateApplicationRequest_RunConfigurationUpdate::is_flink_run_configuration_Set() const{
    return m_flink_run_configuration_isSet;
}

bool OAIUpdateApplicationRequest_RunConfigurationUpdate::is_flink_run_configuration_Valid() const{
    return m_flink_run_configuration_isValid;
}

OAIRunConfigurationUpdate_ApplicationRestoreConfiguration OAIUpdateApplicationRequest_RunConfigurationUpdate::getApplicationRestoreConfiguration() const {
    return m_application_restore_configuration;
}
void OAIUpdateApplicationRequest_RunConfigurationUpdate::setApplicationRestoreConfiguration(const OAIRunConfigurationUpdate_ApplicationRestoreConfiguration &application_restore_configuration) {
    m_application_restore_configuration = application_restore_configuration;
    m_application_restore_configuration_isSet = true;
}

bool OAIUpdateApplicationRequest_RunConfigurationUpdate::is_application_restore_configuration_Set() const{
    return m_application_restore_configuration_isSet;
}

bool OAIUpdateApplicationRequest_RunConfigurationUpdate::is_application_restore_configuration_Valid() const{
    return m_application_restore_configuration_isValid;
}

bool OAIUpdateApplicationRequest_RunConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flink_run_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_restore_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationRequest_RunConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
