/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInputDescription.h
 *
 * Describes the application input configuration for a SQL-based Kinesis Data Analytics application. 
 */

#ifndef OAIInputDescription_H
#define OAIInputDescription_H

#include <QJsonObject>

#include "OAIInputDescription_InputParallelism.h"
#include "OAIInputDescription_InputProcessingConfigurationDescription.h"
#include "OAIInputDescription_InputSchema.h"
#include "OAIInputDescription_InputStartingPositionConfiguration.h"
#include "OAIInputDescription_KinesisFirehoseInputDescription.h"
#include "OAIInputDescription_KinesisStreamsInputDescription.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputDescription_InputProcessingConfigurationDescription;
class OAIInputDescription_KinesisStreamsInputDescription;
class OAIInputDescription_KinesisFirehoseInputDescription;
class OAIInputDescription_InputSchema;
class OAIInputDescription_InputParallelism;
class OAIInputDescription_InputStartingPositionConfiguration;

class OAIInputDescription : public OAIObject {
public:
    OAIInputDescription();
    OAIInputDescription(QString json);
    ~OAIInputDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInputId() const;
    void setInputId(const QString &input_id);
    bool is_input_id_Set() const;
    bool is_input_id_Valid() const;

    QString getNamePrefix() const;
    void setNamePrefix(const QString &name_prefix);
    bool is_name_prefix_Set() const;
    bool is_name_prefix_Valid() const;

    QList getInAppStreamNames() const;
    void setInAppStreamNames(const QList &in_app_stream_names);
    bool is_in_app_stream_names_Set() const;
    bool is_in_app_stream_names_Valid() const;

    OAIInputDescription_InputProcessingConfigurationDescription getInputProcessingConfigurationDescription() const;
    void setInputProcessingConfigurationDescription(const OAIInputDescription_InputProcessingConfigurationDescription &input_processing_configuration_description);
    bool is_input_processing_configuration_description_Set() const;
    bool is_input_processing_configuration_description_Valid() const;

    OAIInputDescription_KinesisStreamsInputDescription getKinesisStreamsInputDescription() const;
    void setKinesisStreamsInputDescription(const OAIInputDescription_KinesisStreamsInputDescription &kinesis_streams_input_description);
    bool is_kinesis_streams_input_description_Set() const;
    bool is_kinesis_streams_input_description_Valid() const;

    OAIInputDescription_KinesisFirehoseInputDescription getKinesisFirehoseInputDescription() const;
    void setKinesisFirehoseInputDescription(const OAIInputDescription_KinesisFirehoseInputDescription &kinesis_firehose_input_description);
    bool is_kinesis_firehose_input_description_Set() const;
    bool is_kinesis_firehose_input_description_Valid() const;

    OAIInputDescription_InputSchema getInputSchema() const;
    void setInputSchema(const OAIInputDescription_InputSchema &input_schema);
    bool is_input_schema_Set() const;
    bool is_input_schema_Valid() const;

    OAIInputDescription_InputParallelism getInputParallelism() const;
    void setInputParallelism(const OAIInputDescription_InputParallelism &input_parallelism);
    bool is_input_parallelism_Set() const;
    bool is_input_parallelism_Valid() const;

    OAIInputDescription_InputStartingPositionConfiguration getInputStartingPositionConfiguration() const;
    void setInputStartingPositionConfiguration(const OAIInputDescription_InputStartingPositionConfiguration &input_starting_position_configuration);
    bool is_input_starting_position_configuration_Set() const;
    bool is_input_starting_position_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_input_id;
    bool m_input_id_isSet;
    bool m_input_id_isValid;

    QString m_name_prefix;
    bool m_name_prefix_isSet;
    bool m_name_prefix_isValid;

    QList m_in_app_stream_names;
    bool m_in_app_stream_names_isSet;
    bool m_in_app_stream_names_isValid;

    OAIInputDescription_InputProcessingConfigurationDescription m_input_processing_configuration_description;
    bool m_input_processing_configuration_description_isSet;
    bool m_input_processing_configuration_description_isValid;

    OAIInputDescription_KinesisStreamsInputDescription m_kinesis_streams_input_description;
    bool m_kinesis_streams_input_description_isSet;
    bool m_kinesis_streams_input_description_isValid;

    OAIInputDescription_KinesisFirehoseInputDescription m_kinesis_firehose_input_description;
    bool m_kinesis_firehose_input_description_isSet;
    bool m_kinesis_firehose_input_description_isValid;

    OAIInputDescription_InputSchema m_input_schema;
    bool m_input_schema_isSet;
    bool m_input_schema_isValid;

    OAIInputDescription_InputParallelism m_input_parallelism;
    bool m_input_parallelism_isSet;
    bool m_input_parallelism_isValid;

    OAIInputDescription_InputStartingPositionConfiguration m_input_starting_position_configuration;
    bool m_input_starting_position_configuration_isSet;
    bool m_input_starting_position_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInputDescription)

#endif // OAIInputDescription_H
