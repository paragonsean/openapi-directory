/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoverInputSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoverInputSchemaRequest::OAIDiscoverInputSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoverInputSchemaRequest::OAIDiscoverInputSchemaRequest() {
    this->initializeModel();
}

OAIDiscoverInputSchemaRequest::~OAIDiscoverInputSchemaRequest() {}

void OAIDiscoverInputSchemaRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_service_execution_role_isSet = false;
    m_service_execution_role_isValid = false;

    m_input_starting_position_configuration_isSet = false;
    m_input_starting_position_configuration_isValid = false;

    m_s3_configuration_isSet = false;
    m_s3_configuration_isValid = false;

    m_input_processing_configuration_isSet = false;
    m_input_processing_configuration_isValid = false;
}

void OAIDiscoverInputSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoverInputSchemaRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_service_execution_role_isValid = ::OpenAPI::fromJsonValue(m_service_execution_role, json[QString("ServiceExecutionRole")]);
    m_service_execution_role_isSet = !json[QString("ServiceExecutionRole")].isNull() && m_service_execution_role_isValid;

    m_input_starting_position_configuration_isValid = ::OpenAPI::fromJsonValue(m_input_starting_position_configuration, json[QString("InputStartingPositionConfiguration")]);
    m_input_starting_position_configuration_isSet = !json[QString("InputStartingPositionConfiguration")].isNull() && m_input_starting_position_configuration_isValid;

    m_s3_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_configuration, json[QString("S3Configuration")]);
    m_s3_configuration_isSet = !json[QString("S3Configuration")].isNull() && m_s3_configuration_isValid;

    m_input_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_input_processing_configuration, json[QString("InputProcessingConfiguration")]);
    m_input_processing_configuration_isSet = !json[QString("InputProcessingConfiguration")].isNull() && m_input_processing_configuration_isValid;
}

QString OAIDiscoverInputSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoverInputSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_service_execution_role_isSet) {
        obj.insert(QString("ServiceExecutionRole"), ::OpenAPI::toJsonValue(m_service_execution_role));
    }
    if (m_input_starting_position_configuration.isSet()) {
        obj.insert(QString("InputStartingPositionConfiguration"), ::OpenAPI::toJsonValue(m_input_starting_position_configuration));
    }
    if (m_s3_configuration.isSet()) {
        obj.insert(QString("S3Configuration"), ::OpenAPI::toJsonValue(m_s3_configuration));
    }
    if (m_input_processing_configuration.isSet()) {
        obj.insert(QString("InputProcessingConfiguration"), ::OpenAPI::toJsonValue(m_input_processing_configuration));
    }
    return obj;
}

QString OAIDiscoverInputSchemaRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIDiscoverInputSchemaRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDiscoverInputSchemaRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDiscoverInputSchemaRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIDiscoverInputSchemaRequest::getServiceExecutionRole() const {
    return m_service_execution_role;
}
void OAIDiscoverInputSchemaRequest::setServiceExecutionRole(const QString &service_execution_role) {
    m_service_execution_role = service_execution_role;
    m_service_execution_role_isSet = true;
}

bool OAIDiscoverInputSchemaRequest::is_service_execution_role_Set() const{
    return m_service_execution_role_isSet;
}

bool OAIDiscoverInputSchemaRequest::is_service_execution_role_Valid() const{
    return m_service_execution_role_isValid;
}

OAIDiscoverInputSchemaRequest_InputStartingPositionConfiguration OAIDiscoverInputSchemaRequest::getInputStartingPositionConfiguration() const {
    return m_input_starting_position_configuration;
}
void OAIDiscoverInputSchemaRequest::setInputStartingPositionConfiguration(const OAIDiscoverInputSchemaRequest_InputStartingPositionConfiguration &input_starting_position_configuration) {
    m_input_starting_position_configuration = input_starting_position_configuration;
    m_input_starting_position_configuration_isSet = true;
}

bool OAIDiscoverInputSchemaRequest::is_input_starting_position_configuration_Set() const{
    return m_input_starting_position_configuration_isSet;
}

bool OAIDiscoverInputSchemaRequest::is_input_starting_position_configuration_Valid() const{
    return m_input_starting_position_configuration_isValid;
}

OAIDiscoverInputSchemaRequest_S3Configuration OAIDiscoverInputSchemaRequest::getS3Configuration() const {
    return m_s3_configuration;
}
void OAIDiscoverInputSchemaRequest::setS3Configuration(const OAIDiscoverInputSchemaRequest_S3Configuration &s3_configuration) {
    m_s3_configuration = s3_configuration;
    m_s3_configuration_isSet = true;
}

bool OAIDiscoverInputSchemaRequest::is_s3_configuration_Set() const{
    return m_s3_configuration_isSet;
}

bool OAIDiscoverInputSchemaRequest::is_s3_configuration_Valid() const{
    return m_s3_configuration_isValid;
}

OAIDiscoverInputSchemaRequest_InputProcessingConfiguration OAIDiscoverInputSchemaRequest::getInputProcessingConfiguration() const {
    return m_input_processing_configuration;
}
void OAIDiscoverInputSchemaRequest::setInputProcessingConfiguration(const OAIDiscoverInputSchemaRequest_InputProcessingConfiguration &input_processing_configuration) {
    m_input_processing_configuration = input_processing_configuration;
    m_input_processing_configuration_isSet = true;
}

bool OAIDiscoverInputSchemaRequest::is_input_processing_configuration_Set() const{
    return m_input_processing_configuration_isSet;
}

bool OAIDiscoverInputSchemaRequest::is_input_processing_configuration_Valid() const{
    return m_input_processing_configuration_isValid;
}

bool OAIDiscoverInputSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_execution_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_starting_position_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoverInputSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_execution_role_isValid && true;
}

} // namespace OpenAPI
