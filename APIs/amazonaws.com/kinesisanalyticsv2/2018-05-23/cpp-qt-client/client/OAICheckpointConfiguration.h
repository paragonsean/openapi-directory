/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICheckpointConfiguration.h
 *
 * Describes an application&#39;s checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see &lt;a href&#x3D;\&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/concepts/programming-model.html#checkpoints-for-fault-tolerance\&quot;&gt; Checkpoints for Fault Tolerance&lt;/a&gt; in the &lt;a href&#x3D;\&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/\&quot;&gt;Apache Flink Documentation&lt;/a&gt;.
 */

#ifndef OAICheckpointConfiguration_H
#define OAICheckpointConfiguration_H

#include <QJsonObject>

#include "OAIConfigurationType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICheckpointConfiguration : public OAIObject {
public:
    OAICheckpointConfiguration();
    OAICheckpointConfiguration(QString json);
    ~OAICheckpointConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigurationType getConfigurationType() const;
    void setConfigurationType(const OAIConfigurationType &configuration_type);
    bool is_configuration_type_Set() const;
    bool is_configuration_type_Valid() const;

    bool getCheckpointingEnabled() const;
    void setCheckpointingEnabled(const bool &checkpointing_enabled);
    bool is_checkpointing_enabled_Set() const;
    bool is_checkpointing_enabled_Valid() const;

    qint32 getCheckpointInterval() const;
    void setCheckpointInterval(const qint32 &checkpoint_interval);
    bool is_checkpoint_interval_Set() const;
    bool is_checkpoint_interval_Valid() const;

    qint32 getMinPauseBetweenCheckpoints() const;
    void setMinPauseBetweenCheckpoints(const qint32 &min_pause_between_checkpoints);
    bool is_min_pause_between_checkpoints_Set() const;
    bool is_min_pause_between_checkpoints_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConfigurationType m_configuration_type;
    bool m_configuration_type_isSet;
    bool m_configuration_type_isValid;

    bool m_checkpointing_enabled;
    bool m_checkpointing_enabled_isSet;
    bool m_checkpointing_enabled_isValid;

    qint32 m_checkpoint_interval;
    bool m_checkpoint_interval_isSet;
    bool m_checkpoint_interval_isValid;

    qint32 m_min_pause_between_checkpoints;
    bool m_min_pause_between_checkpoints_isSet;
    bool m_min_pause_between_checkpoints_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICheckpointConfiguration)

#endif // OAICheckpointConfiguration_H
