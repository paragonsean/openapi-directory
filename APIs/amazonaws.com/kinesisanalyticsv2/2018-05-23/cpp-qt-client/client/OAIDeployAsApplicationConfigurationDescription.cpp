/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployAsApplicationConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployAsApplicationConfigurationDescription::OAIDeployAsApplicationConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployAsApplicationConfigurationDescription::OAIDeployAsApplicationConfigurationDescription() {
    this->initializeModel();
}

OAIDeployAsApplicationConfigurationDescription::~OAIDeployAsApplicationConfigurationDescription() {}

void OAIDeployAsApplicationConfigurationDescription::initializeModel() {

    m_s3_content_location_description_isSet = false;
    m_s3_content_location_description_isValid = false;
}

void OAIDeployAsApplicationConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployAsApplicationConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_s3_content_location_description_isValid = ::OpenAPI::fromJsonValue(m_s3_content_location_description, json[QString("S3ContentLocationDescription")]);
    m_s3_content_location_description_isSet = !json[QString("S3ContentLocationDescription")].isNull() && m_s3_content_location_description_isValid;
}

QString OAIDeployAsApplicationConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployAsApplicationConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_content_location_description.isSet()) {
        obj.insert(QString("S3ContentLocationDescription"), ::OpenAPI::toJsonValue(m_s3_content_location_description));
    }
    return obj;
}

OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription OAIDeployAsApplicationConfigurationDescription::getS3ContentLocationDescription() const {
    return m_s3_content_location_description;
}
void OAIDeployAsApplicationConfigurationDescription::setS3ContentLocationDescription(const OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription &s3_content_location_description) {
    m_s3_content_location_description = s3_content_location_description;
    m_s3_content_location_description_isSet = true;
}

bool OAIDeployAsApplicationConfigurationDescription::is_s3_content_location_description_Set() const{
    return m_s3_content_location_description_isSet;
}

bool OAIDeployAsApplicationConfigurationDescription::is_s3_content_location_description_Valid() const{
    return m_s3_content_location_description_isValid;
}

bool OAIDeployAsApplicationConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_content_location_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployAsApplicationConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_content_location_description_isValid && true;
}

} // namespace OpenAPI
