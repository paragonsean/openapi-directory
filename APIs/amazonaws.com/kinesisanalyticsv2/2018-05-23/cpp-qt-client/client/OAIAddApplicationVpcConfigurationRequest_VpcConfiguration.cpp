/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationVpcConfigurationRequest_VpcConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::OAIAddApplicationVpcConfigurationRequest_VpcConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::OAIAddApplicationVpcConfigurationRequest_VpcConfiguration() {
    this->initializeModel();
}

OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::~OAIAddApplicationVpcConfigurationRequest_VpcConfiguration() {}

void OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::initializeModel() {

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;
}

void OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::fromJsonObject(QJsonObject json) {

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;
}

QString OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    return obj;
}

QList OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

bool OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationVpcConfigurationRequest_VpcConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subnet_ids_isValid && m_security_group_ids_isValid && true;
}

} // namespace OpenAPI
