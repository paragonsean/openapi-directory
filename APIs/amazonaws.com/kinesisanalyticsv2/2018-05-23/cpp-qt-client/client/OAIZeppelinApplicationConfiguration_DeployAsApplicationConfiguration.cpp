/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration() {
    this->initializeModel();
}

OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::~OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration() {}

void OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::initializeModel() {

    m_s3_content_location_isSet = false;
    m_s3_content_location_isValid = false;
}

void OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_s3_content_location_isValid = ::OpenAPI::fromJsonValue(m_s3_content_location, json[QString("S3ContentLocation")]);
    m_s3_content_location_isSet = !json[QString("S3ContentLocation")].isNull() && m_s3_content_location_isValid;
}

QString OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_content_location.isSet()) {
        obj.insert(QString("S3ContentLocation"), ::OpenAPI::toJsonValue(m_s3_content_location));
    }
    return obj;
}

OAIDeployAsApplicationConfiguration_S3ContentLocation OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::getS3ContentLocation() const {
    return m_s3_content_location;
}
void OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::setS3ContentLocation(const OAIDeployAsApplicationConfiguration_S3ContentLocation &s3_content_location) {
    m_s3_content_location = s3_content_location;
    m_s3_content_location_isSet = true;
}

bool OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::is_s3_content_location_Set() const{
    return m_s3_content_location_isSet;
}

bool OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::is_s3_content_location_Valid() const{
    return m_s3_content_location_isValid;
}

bool OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_content_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_content_location_isValid && true;
}

} // namespace OpenAPI
