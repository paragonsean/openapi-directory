/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartApplicationRequest_RunConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartApplicationRequest_RunConfiguration::OAIStartApplicationRequest_RunConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartApplicationRequest_RunConfiguration::OAIStartApplicationRequest_RunConfiguration() {
    this->initializeModel();
}

OAIStartApplicationRequest_RunConfiguration::~OAIStartApplicationRequest_RunConfiguration() {}

void OAIStartApplicationRequest_RunConfiguration::initializeModel() {

    m_flink_run_configuration_isSet = false;
    m_flink_run_configuration_isValid = false;

    m_sql_run_configurations_isSet = false;
    m_sql_run_configurations_isValid = false;

    m_application_restore_configuration_isSet = false;
    m_application_restore_configuration_isValid = false;
}

void OAIStartApplicationRequest_RunConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartApplicationRequest_RunConfiguration::fromJsonObject(QJsonObject json) {

    m_flink_run_configuration_isValid = ::OpenAPI::fromJsonValue(m_flink_run_configuration, json[QString("FlinkRunConfiguration")]);
    m_flink_run_configuration_isSet = !json[QString("FlinkRunConfiguration")].isNull() && m_flink_run_configuration_isValid;

    m_sql_run_configurations_isValid = ::OpenAPI::fromJsonValue(m_sql_run_configurations, json[QString("SqlRunConfigurations")]);
    m_sql_run_configurations_isSet = !json[QString("SqlRunConfigurations")].isNull() && m_sql_run_configurations_isValid;

    m_application_restore_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_restore_configuration, json[QString("ApplicationRestoreConfiguration")]);
    m_application_restore_configuration_isSet = !json[QString("ApplicationRestoreConfiguration")].isNull() && m_application_restore_configuration_isValid;
}

QString OAIStartApplicationRequest_RunConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartApplicationRequest_RunConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_flink_run_configuration.isSet()) {
        obj.insert(QString("FlinkRunConfiguration"), ::OpenAPI::toJsonValue(m_flink_run_configuration));
    }
    if (m_sql_run_configurations.isSet()) {
        obj.insert(QString("SqlRunConfigurations"), ::OpenAPI::toJsonValue(m_sql_run_configurations));
    }
    if (m_application_restore_configuration.isSet()) {
        obj.insert(QString("ApplicationRestoreConfiguration"), ::OpenAPI::toJsonValue(m_application_restore_configuration));
    }
    return obj;
}

OAIRunConfiguration_FlinkRunConfiguration OAIStartApplicationRequest_RunConfiguration::getFlinkRunConfiguration() const {
    return m_flink_run_configuration;
}
void OAIStartApplicationRequest_RunConfiguration::setFlinkRunConfiguration(const OAIRunConfiguration_FlinkRunConfiguration &flink_run_configuration) {
    m_flink_run_configuration = flink_run_configuration;
    m_flink_run_configuration_isSet = true;
}

bool OAIStartApplicationRequest_RunConfiguration::is_flink_run_configuration_Set() const{
    return m_flink_run_configuration_isSet;
}

bool OAIStartApplicationRequest_RunConfiguration::is_flink_run_configuration_Valid() const{
    return m_flink_run_configuration_isValid;
}

QList OAIStartApplicationRequest_RunConfiguration::getSqlRunConfigurations() const {
    return m_sql_run_configurations;
}
void OAIStartApplicationRequest_RunConfiguration::setSqlRunConfigurations(const QList &sql_run_configurations) {
    m_sql_run_configurations = sql_run_configurations;
    m_sql_run_configurations_isSet = true;
}

bool OAIStartApplicationRequest_RunConfiguration::is_sql_run_configurations_Set() const{
    return m_sql_run_configurations_isSet;
}

bool OAIStartApplicationRequest_RunConfiguration::is_sql_run_configurations_Valid() const{
    return m_sql_run_configurations_isValid;
}

OAIRunConfigurationDescription_ApplicationRestoreConfigurationDescription OAIStartApplicationRequest_RunConfiguration::getApplicationRestoreConfiguration() const {
    return m_application_restore_configuration;
}
void OAIStartApplicationRequest_RunConfiguration::setApplicationRestoreConfiguration(const OAIRunConfigurationDescription_ApplicationRestoreConfigurationDescription &application_restore_configuration) {
    m_application_restore_configuration = application_restore_configuration;
    m_application_restore_configuration_isSet = true;
}

bool OAIStartApplicationRequest_RunConfiguration::is_application_restore_configuration_Set() const{
    return m_application_restore_configuration_isSet;
}

bool OAIStartApplicationRequest_RunConfiguration::is_application_restore_configuration_Valid() const{
    return m_application_restore_configuration_isValid;
}

bool OAIStartApplicationRequest_RunConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flink_run_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_run_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_restore_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartApplicationRequest_RunConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
