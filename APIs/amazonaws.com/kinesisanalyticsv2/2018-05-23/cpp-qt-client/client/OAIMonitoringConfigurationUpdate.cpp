/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringConfigurationUpdate::OAIMonitoringConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringConfigurationUpdate::OAIMonitoringConfigurationUpdate() {
    this->initializeModel();
}

OAIMonitoringConfigurationUpdate::~OAIMonitoringConfigurationUpdate() {}

void OAIMonitoringConfigurationUpdate::initializeModel() {

    m_configuration_type_update_isSet = false;
    m_configuration_type_update_isValid = false;

    m_metrics_level_update_isSet = false;
    m_metrics_level_update_isValid = false;

    m_log_level_update_isSet = false;
    m_log_level_update_isValid = false;
}

void OAIMonitoringConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_configuration_type_update_isValid = ::OpenAPI::fromJsonValue(m_configuration_type_update, json[QString("ConfigurationTypeUpdate")]);
    m_configuration_type_update_isSet = !json[QString("ConfigurationTypeUpdate")].isNull() && m_configuration_type_update_isValid;

    m_metrics_level_update_isValid = ::OpenAPI::fromJsonValue(m_metrics_level_update, json[QString("MetricsLevelUpdate")]);
    m_metrics_level_update_isSet = !json[QString("MetricsLevelUpdate")].isNull() && m_metrics_level_update_isValid;

    m_log_level_update_isValid = ::OpenAPI::fromJsonValue(m_log_level_update, json[QString("LogLevelUpdate")]);
    m_log_level_update_isSet = !json[QString("LogLevelUpdate")].isNull() && m_log_level_update_isValid;
}

QString OAIMonitoringConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_type_update.isSet()) {
        obj.insert(QString("ConfigurationTypeUpdate"), ::OpenAPI::toJsonValue(m_configuration_type_update));
    }
    if (m_metrics_level_update.isSet()) {
        obj.insert(QString("MetricsLevelUpdate"), ::OpenAPI::toJsonValue(m_metrics_level_update));
    }
    if (m_log_level_update.isSet()) {
        obj.insert(QString("LogLevelUpdate"), ::OpenAPI::toJsonValue(m_log_level_update));
    }
    return obj;
}

OAIConfigurationType OAIMonitoringConfigurationUpdate::getConfigurationTypeUpdate() const {
    return m_configuration_type_update;
}
void OAIMonitoringConfigurationUpdate::setConfigurationTypeUpdate(const OAIConfigurationType &configuration_type_update) {
    m_configuration_type_update = configuration_type_update;
    m_configuration_type_update_isSet = true;
}

bool OAIMonitoringConfigurationUpdate::is_configuration_type_update_Set() const{
    return m_configuration_type_update_isSet;
}

bool OAIMonitoringConfigurationUpdate::is_configuration_type_update_Valid() const{
    return m_configuration_type_update_isValid;
}

OAIMetricsLevel OAIMonitoringConfigurationUpdate::getMetricsLevelUpdate() const {
    return m_metrics_level_update;
}
void OAIMonitoringConfigurationUpdate::setMetricsLevelUpdate(const OAIMetricsLevel &metrics_level_update) {
    m_metrics_level_update = metrics_level_update;
    m_metrics_level_update_isSet = true;
}

bool OAIMonitoringConfigurationUpdate::is_metrics_level_update_Set() const{
    return m_metrics_level_update_isSet;
}

bool OAIMonitoringConfigurationUpdate::is_metrics_level_update_Valid() const{
    return m_metrics_level_update_isValid;
}

OAILogLevel OAIMonitoringConfigurationUpdate::getLogLevelUpdate() const {
    return m_log_level_update;
}
void OAIMonitoringConfigurationUpdate::setLogLevelUpdate(const OAILogLevel &log_level_update) {
    m_log_level_update = log_level_update;
    m_log_level_update_isSet = true;
}

bool OAIMonitoringConfigurationUpdate::is_log_level_update_Set() const{
    return m_log_level_update_isSet;
}

bool OAIMonitoringConfigurationUpdate::is_log_level_update_Valid() const{
    return m_log_level_update_isValid;
}

bool OAIMonitoringConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_type_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_level_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
