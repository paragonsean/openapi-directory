/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceDataSource::OAIReferenceDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceDataSource::OAIReferenceDataSource() {
    this->initializeModel();
}

OAIReferenceDataSource::~OAIReferenceDataSource() {}

void OAIReferenceDataSource::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_s3_reference_data_source_isSet = false;
    m_s3_reference_data_source_isValid = false;

    m_reference_schema_isSet = false;
    m_reference_schema_isValid = false;
}

void OAIReferenceDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceDataSource::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_s3_reference_data_source_isValid = ::OpenAPI::fromJsonValue(m_s3_reference_data_source, json[QString("S3ReferenceDataSource")]);
    m_s3_reference_data_source_isSet = !json[QString("S3ReferenceDataSource")].isNull() && m_s3_reference_data_source_isValid;

    m_reference_schema_isValid = ::OpenAPI::fromJsonValue(m_reference_schema, json[QString("ReferenceSchema")]);
    m_reference_schema_isSet = !json[QString("ReferenceSchema")].isNull() && m_reference_schema_isValid;
}

QString OAIReferenceDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_s3_reference_data_source.isSet()) {
        obj.insert(QString("S3ReferenceDataSource"), ::OpenAPI::toJsonValue(m_s3_reference_data_source));
    }
    if (m_reference_schema.isSet()) {
        obj.insert(QString("ReferenceSchema"), ::OpenAPI::toJsonValue(m_reference_schema));
    }
    return obj;
}

QString OAIReferenceDataSource::getTableName() const {
    return m_table_name;
}
void OAIReferenceDataSource::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIReferenceDataSource::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIReferenceDataSource::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIReferenceDataSource_S3ReferenceDataSource OAIReferenceDataSource::getS3ReferenceDataSource() const {
    return m_s3_reference_data_source;
}
void OAIReferenceDataSource::setS3ReferenceDataSource(const OAIReferenceDataSource_S3ReferenceDataSource &s3_reference_data_source) {
    m_s3_reference_data_source = s3_reference_data_source;
    m_s3_reference_data_source_isSet = true;
}

bool OAIReferenceDataSource::is_s3_reference_data_source_Set() const{
    return m_s3_reference_data_source_isSet;
}

bool OAIReferenceDataSource::is_s3_reference_data_source_Valid() const{
    return m_s3_reference_data_source_isValid;
}

OAIReferenceDataSource_ReferenceSchema OAIReferenceDataSource::getReferenceSchema() const {
    return m_reference_schema;
}
void OAIReferenceDataSource::setReferenceSchema(const OAIReferenceDataSource_ReferenceSchema &reference_schema) {
    m_reference_schema = reference_schema;
    m_reference_schema_isSet = true;
}

bool OAIReferenceDataSource::is_reference_schema_Set() const{
    return m_reference_schema_isSet;
}

bool OAIReferenceDataSource::is_reference_schema_Valid() const{
    return m_reference_schema_isValid;
}

bool OAIReferenceDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_reference_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_reference_schema_isValid && true;
}

} // namespace OpenAPI
