/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeEnvironment::OAIRuntimeEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeEnvironment::OAIRuntimeEnvironment() {
    this->initializeModel();
}

OAIRuntimeEnvironment::~OAIRuntimeEnvironment() {}

void OAIRuntimeEnvironment::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRuntimeEnvironment::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRuntimeEnvironment::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SQL-1_0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::SQL_1_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLINK-1_6", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::FLINK_1_6;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLINK-1_8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::FLINK_1_8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZEPPELIN-FLINK-1_0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::ZEPPELIN_FLINK_1_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLINK-1_11", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::FLINK_1_11;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLINK-1_13", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::FLINK_1_13;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZEPPELIN-FLINK-2_0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::ZEPPELIN_FLINK_2_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLINK-1_15", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::FLINK_1_15;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ZEPPELIN-FLINK-3_0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRuntimeEnvironment::ZEPPELIN_FLINK_3_0;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRuntimeEnvironment::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRuntimeEnvironment::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRuntimeEnvironment::SQL_1_0:
            val = "SQL-1_0";
            break;
        case eOAIRuntimeEnvironment::FLINK_1_6:
            val = "FLINK-1_6";
            break;
        case eOAIRuntimeEnvironment::FLINK_1_8:
            val = "FLINK-1_8";
            break;
        case eOAIRuntimeEnvironment::ZEPPELIN_FLINK_1_0:
            val = "ZEPPELIN-FLINK-1_0";
            break;
        case eOAIRuntimeEnvironment::FLINK_1_11:
            val = "FLINK-1_11";
            break;
        case eOAIRuntimeEnvironment::FLINK_1_13:
            val = "FLINK-1_13";
            break;
        case eOAIRuntimeEnvironment::ZEPPELIN_FLINK_2_0:
            val = "ZEPPELIN-FLINK-2_0";
            break;
        case eOAIRuntimeEnvironment::FLINK_1_15:
            val = "FLINK-1_15";
            break;
        case eOAIRuntimeEnvironment::ZEPPELIN_FLINK_3_0:
            val = "ZEPPELIN-FLINK-3_0";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRuntimeEnvironment::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRuntimeEnvironment::eOAIRuntimeEnvironment OAIRuntimeEnvironment::getValue() const {
    return m_value;
}

void OAIRuntimeEnvironment::setValue(const OAIRuntimeEnvironment::eOAIRuntimeEnvironment& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRuntimeEnvironment::isSet() const {
    
    return m_value_isSet;
}

bool OAIRuntimeEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
