/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputUpdate_InputProcessingConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputUpdate_InputProcessingConfigurationUpdate::OAIInputUpdate_InputProcessingConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputUpdate_InputProcessingConfigurationUpdate::OAIInputUpdate_InputProcessingConfigurationUpdate() {
    this->initializeModel();
}

OAIInputUpdate_InputProcessingConfigurationUpdate::~OAIInputUpdate_InputProcessingConfigurationUpdate() {}

void OAIInputUpdate_InputProcessingConfigurationUpdate::initializeModel() {

    m_input_lambda_processor_update_isSet = false;
    m_input_lambda_processor_update_isValid = false;
}

void OAIInputUpdate_InputProcessingConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputUpdate_InputProcessingConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_input_lambda_processor_update_isValid = ::OpenAPI::fromJsonValue(m_input_lambda_processor_update, json[QString("InputLambdaProcessorUpdate")]);
    m_input_lambda_processor_update_isSet = !json[QString("InputLambdaProcessorUpdate")].isNull() && m_input_lambda_processor_update_isValid;
}

QString OAIInputUpdate_InputProcessingConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputUpdate_InputProcessingConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_input_lambda_processor_update.isSet()) {
        obj.insert(QString("InputLambdaProcessorUpdate"), ::OpenAPI::toJsonValue(m_input_lambda_processor_update));
    }
    return obj;
}

OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate OAIInputUpdate_InputProcessingConfigurationUpdate::getInputLambdaProcessorUpdate() const {
    return m_input_lambda_processor_update;
}
void OAIInputUpdate_InputProcessingConfigurationUpdate::setInputLambdaProcessorUpdate(const OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate &input_lambda_processor_update) {
    m_input_lambda_processor_update = input_lambda_processor_update;
    m_input_lambda_processor_update_isSet = true;
}

bool OAIInputUpdate_InputProcessingConfigurationUpdate::is_input_lambda_processor_update_Set() const{
    return m_input_lambda_processor_update_isSet;
}

bool OAIInputUpdate_InputProcessingConfigurationUpdate::is_input_lambda_processor_update_Valid() const{
    return m_input_lambda_processor_update_isValid;
}

bool OAIInputUpdate_InputProcessingConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_lambda_processor_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputUpdate_InputProcessingConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_lambda_processor_update_isValid && true;
}

} // namespace OpenAPI
