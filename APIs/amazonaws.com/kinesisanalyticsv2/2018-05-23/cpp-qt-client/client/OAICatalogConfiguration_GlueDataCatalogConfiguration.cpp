/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogConfiguration_GlueDataCatalogConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogConfiguration_GlueDataCatalogConfiguration::OAICatalogConfiguration_GlueDataCatalogConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogConfiguration_GlueDataCatalogConfiguration::OAICatalogConfiguration_GlueDataCatalogConfiguration() {
    this->initializeModel();
}

OAICatalogConfiguration_GlueDataCatalogConfiguration::~OAICatalogConfiguration_GlueDataCatalogConfiguration() {}

void OAICatalogConfiguration_GlueDataCatalogConfiguration::initializeModel() {

    m_database_arn_isSet = false;
    m_database_arn_isValid = false;
}

void OAICatalogConfiguration_GlueDataCatalogConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogConfiguration_GlueDataCatalogConfiguration::fromJsonObject(QJsonObject json) {

    m_database_arn_isValid = ::OpenAPI::fromJsonValue(m_database_arn, json[QString("DatabaseARN")]);
    m_database_arn_isSet = !json[QString("DatabaseARN")].isNull() && m_database_arn_isValid;
}

QString OAICatalogConfiguration_GlueDataCatalogConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogConfiguration_GlueDataCatalogConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_database_arn_isSet) {
        obj.insert(QString("DatabaseARN"), ::OpenAPI::toJsonValue(m_database_arn));
    }
    return obj;
}

QString OAICatalogConfiguration_GlueDataCatalogConfiguration::getDatabaseArn() const {
    return m_database_arn;
}
void OAICatalogConfiguration_GlueDataCatalogConfiguration::setDatabaseArn(const QString &database_arn) {
    m_database_arn = database_arn;
    m_database_arn_isSet = true;
}

bool OAICatalogConfiguration_GlueDataCatalogConfiguration::is_database_arn_Set() const{
    return m_database_arn_isSet;
}

bool OAICatalogConfiguration_GlueDataCatalogConfiguration::is_database_arn_Valid() const{
    return m_database_arn_isValid;
}

bool OAICatalogConfiguration_GlueDataCatalogConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogConfiguration_GlueDataCatalogConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_arn_isValid && true;
}

} // namespace OpenAPI
