/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription() {
    this->initializeModel();
}

OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::~OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription() {}

void OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::initializeModel() {

    m_input_descriptions_isSet = false;
    m_input_descriptions_isValid = false;

    m_output_descriptions_isSet = false;
    m_output_descriptions_isValid = false;

    m_reference_data_source_descriptions_isSet = false;
    m_reference_data_source_descriptions_isValid = false;
}

void OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_input_descriptions_isValid = ::OpenAPI::fromJsonValue(m_input_descriptions, json[QString("InputDescriptions")]);
    m_input_descriptions_isSet = !json[QString("InputDescriptions")].isNull() && m_input_descriptions_isValid;

    m_output_descriptions_isValid = ::OpenAPI::fromJsonValue(m_output_descriptions, json[QString("OutputDescriptions")]);
    m_output_descriptions_isSet = !json[QString("OutputDescriptions")].isNull() && m_output_descriptions_isValid;

    m_reference_data_source_descriptions_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source_descriptions, json[QString("ReferenceDataSourceDescriptions")]);
    m_reference_data_source_descriptions_isSet = !json[QString("ReferenceDataSourceDescriptions")].isNull() && m_reference_data_source_descriptions_isValid;
}

QString OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_input_descriptions.isSet()) {
        obj.insert(QString("InputDescriptions"), ::OpenAPI::toJsonValue(m_input_descriptions));
    }
    if (m_output_descriptions.isSet()) {
        obj.insert(QString("OutputDescriptions"), ::OpenAPI::toJsonValue(m_output_descriptions));
    }
    if (m_reference_data_source_descriptions.isSet()) {
        obj.insert(QString("ReferenceDataSourceDescriptions"), ::OpenAPI::toJsonValue(m_reference_data_source_descriptions));
    }
    return obj;
}

QList OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::getInputDescriptions() const {
    return m_input_descriptions;
}
void OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::setInputDescriptions(const QList &input_descriptions) {
    m_input_descriptions = input_descriptions;
    m_input_descriptions_isSet = true;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::is_input_descriptions_Set() const{
    return m_input_descriptions_isSet;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::is_input_descriptions_Valid() const{
    return m_input_descriptions_isValid;
}

QList OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::getOutputDescriptions() const {
    return m_output_descriptions;
}
void OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::setOutputDescriptions(const QList &output_descriptions) {
    m_output_descriptions = output_descriptions;
    m_output_descriptions_isSet = true;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::is_output_descriptions_Set() const{
    return m_output_descriptions_isSet;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::is_output_descriptions_Valid() const{
    return m_output_descriptions_isValid;
}

QList OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::getReferenceDataSourceDescriptions() const {
    return m_reference_data_source_descriptions;
}
void OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::setReferenceDataSourceDescriptions(const QList &reference_data_source_descriptions) {
    m_reference_data_source_descriptions = reference_data_source_descriptions;
    m_reference_data_source_descriptions_isSet = true;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::is_reference_data_source_descriptions_Set() const{
    return m_reference_data_source_descriptions_isSet;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::is_reference_data_source_descriptions_Valid() const{
    return m_reference_data_source_descriptions_isValid;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
