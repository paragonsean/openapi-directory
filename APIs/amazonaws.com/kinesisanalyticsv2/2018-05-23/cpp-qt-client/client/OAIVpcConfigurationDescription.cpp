/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcConfigurationDescription::OAIVpcConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcConfigurationDescription::OAIVpcConfigurationDescription() {
    this->initializeModel();
}

OAIVpcConfigurationDescription::~OAIVpcConfigurationDescription() {}

void OAIVpcConfigurationDescription::initializeModel() {

    m_vpc_configuration_id_isSet = false;
    m_vpc_configuration_id_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;
}

void OAIVpcConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_vpc_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration_id, json[QString("VpcConfigurationId")]);
    m_vpc_configuration_id_isSet = !json[QString("VpcConfigurationId")].isNull() && m_vpc_configuration_id_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;
}

QString OAIVpcConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_configuration_id_isSet) {
        obj.insert(QString("VpcConfigurationId"), ::OpenAPI::toJsonValue(m_vpc_configuration_id));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    return obj;
}

QString OAIVpcConfigurationDescription::getVpcConfigurationId() const {
    return m_vpc_configuration_id;
}
void OAIVpcConfigurationDescription::setVpcConfigurationId(const QString &vpc_configuration_id) {
    m_vpc_configuration_id = vpc_configuration_id;
    m_vpc_configuration_id_isSet = true;
}

bool OAIVpcConfigurationDescription::is_vpc_configuration_id_Set() const{
    return m_vpc_configuration_id_isSet;
}

bool OAIVpcConfigurationDescription::is_vpc_configuration_id_Valid() const{
    return m_vpc_configuration_id_isValid;
}

QString OAIVpcConfigurationDescription::getVpcId() const {
    return m_vpc_id;
}
void OAIVpcConfigurationDescription::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIVpcConfigurationDescription::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIVpcConfigurationDescription::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QList OAIVpcConfigurationDescription::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIVpcConfigurationDescription::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIVpcConfigurationDescription::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIVpcConfigurationDescription::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList OAIVpcConfigurationDescription::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIVpcConfigurationDescription::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIVpcConfigurationDescription::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIVpcConfigurationDescription::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

bool OAIVpcConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpc_configuration_id_isValid && m_vpc_id_isValid && m_subnet_ids_isValid && m_security_group_ids_isValid && true;
}

} // namespace OpenAPI
