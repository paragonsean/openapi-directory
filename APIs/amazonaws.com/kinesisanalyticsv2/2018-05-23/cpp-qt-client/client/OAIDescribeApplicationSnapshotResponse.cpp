/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeApplicationSnapshotResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeApplicationSnapshotResponse::OAIDescribeApplicationSnapshotResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeApplicationSnapshotResponse::OAIDescribeApplicationSnapshotResponse() {
    this->initializeModel();
}

OAIDescribeApplicationSnapshotResponse::~OAIDescribeApplicationSnapshotResponse() {}

void OAIDescribeApplicationSnapshotResponse::initializeModel() {

    m_snapshot_details_isSet = false;
    m_snapshot_details_isValid = false;
}

void OAIDescribeApplicationSnapshotResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeApplicationSnapshotResponse::fromJsonObject(QJsonObject json) {

    m_snapshot_details_isValid = ::OpenAPI::fromJsonValue(m_snapshot_details, json[QString("SnapshotDetails")]);
    m_snapshot_details_isSet = !json[QString("SnapshotDetails")].isNull() && m_snapshot_details_isValid;
}

QString OAIDescribeApplicationSnapshotResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeApplicationSnapshotResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_details.isSet()) {
        obj.insert(QString("SnapshotDetails"), ::OpenAPI::toJsonValue(m_snapshot_details));
    }
    return obj;
}

OAIDescribeApplicationSnapshotResponse_SnapshotDetails OAIDescribeApplicationSnapshotResponse::getSnapshotDetails() const {
    return m_snapshot_details;
}
void OAIDescribeApplicationSnapshotResponse::setSnapshotDetails(const OAIDescribeApplicationSnapshotResponse_SnapshotDetails &snapshot_details) {
    m_snapshot_details = snapshot_details;
    m_snapshot_details_isSet = true;
}

bool OAIDescribeApplicationSnapshotResponse::is_snapshot_details_Set() const{
    return m_snapshot_details_isSet;
}

bool OAIDescribeApplicationSnapshotResponse::is_snapshot_details_Valid() const{
    return m_snapshot_details_isValid;
}

bool OAIDescribeApplicationSnapshotResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeApplicationSnapshotResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snapshot_details_isValid && true;
}

} // namespace OpenAPI
