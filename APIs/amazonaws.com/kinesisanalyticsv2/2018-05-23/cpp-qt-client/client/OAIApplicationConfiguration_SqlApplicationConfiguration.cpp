/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfiguration_SqlApplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfiguration_SqlApplicationConfiguration::OAIApplicationConfiguration_SqlApplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfiguration_SqlApplicationConfiguration::OAIApplicationConfiguration_SqlApplicationConfiguration() {
    this->initializeModel();
}

OAIApplicationConfiguration_SqlApplicationConfiguration::~OAIApplicationConfiguration_SqlApplicationConfiguration() {}

void OAIApplicationConfiguration_SqlApplicationConfiguration::initializeModel() {

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_reference_data_sources_isSet = false;
    m_reference_data_sources_isValid = false;
}

void OAIApplicationConfiguration_SqlApplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfiguration_SqlApplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_reference_data_sources_isValid = ::OpenAPI::fromJsonValue(m_reference_data_sources, json[QString("ReferenceDataSources")]);
    m_reference_data_sources_isSet = !json[QString("ReferenceDataSources")].isNull() && m_reference_data_sources_isValid;
}

QString OAIApplicationConfiguration_SqlApplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfiguration_SqlApplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_reference_data_sources.isSet()) {
        obj.insert(QString("ReferenceDataSources"), ::OpenAPI::toJsonValue(m_reference_data_sources));
    }
    return obj;
}

QList OAIApplicationConfiguration_SqlApplicationConfiguration::getInputs() const {
    return m_inputs;
}
void OAIApplicationConfiguration_SqlApplicationConfiguration::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QList OAIApplicationConfiguration_SqlApplicationConfiguration::getOutputs() const {
    return m_outputs;
}
void OAIApplicationConfiguration_SqlApplicationConfiguration::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QList OAIApplicationConfiguration_SqlApplicationConfiguration::getReferenceDataSources() const {
    return m_reference_data_sources;
}
void OAIApplicationConfiguration_SqlApplicationConfiguration::setReferenceDataSources(const QList &reference_data_sources) {
    m_reference_data_sources = reference_data_sources;
    m_reference_data_sources_isSet = true;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::is_reference_data_sources_Set() const{
    return m_reference_data_sources_isSet;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::is_reference_data_sources_Valid() const{
    return m_reference_data_sources_isValid;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfiguration_SqlApplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
