/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeContentDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeContentDescription::OAICodeContentDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeContentDescription::OAICodeContentDescription() {
    this->initializeModel();
}

OAICodeContentDescription::~OAICodeContentDescription() {}

void OAICodeContentDescription::initializeModel() {

    m_text_content_isSet = false;
    m_text_content_isValid = false;

    m_code_md5_isSet = false;
    m_code_md5_isValid = false;

    m_code_size_isSet = false;
    m_code_size_isValid = false;

    m_s3_application_code_location_description_isSet = false;
    m_s3_application_code_location_description_isValid = false;
}

void OAICodeContentDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeContentDescription::fromJsonObject(QJsonObject json) {

    m_text_content_isValid = ::OpenAPI::fromJsonValue(m_text_content, json[QString("TextContent")]);
    m_text_content_isSet = !json[QString("TextContent")].isNull() && m_text_content_isValid;

    m_code_md5_isValid = ::OpenAPI::fromJsonValue(m_code_md5, json[QString("CodeMD5")]);
    m_code_md5_isSet = !json[QString("CodeMD5")].isNull() && m_code_md5_isValid;

    m_code_size_isValid = ::OpenAPI::fromJsonValue(m_code_size, json[QString("CodeSize")]);
    m_code_size_isSet = !json[QString("CodeSize")].isNull() && m_code_size_isValid;

    m_s3_application_code_location_description_isValid = ::OpenAPI::fromJsonValue(m_s3_application_code_location_description, json[QString("S3ApplicationCodeLocationDescription")]);
    m_s3_application_code_location_description_isSet = !json[QString("S3ApplicationCodeLocationDescription")].isNull() && m_s3_application_code_location_description_isValid;
}

QString OAICodeContentDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeContentDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_text_content_isSet) {
        obj.insert(QString("TextContent"), ::OpenAPI::toJsonValue(m_text_content));
    }
    if (m_code_md5_isSet) {
        obj.insert(QString("CodeMD5"), ::OpenAPI::toJsonValue(m_code_md5));
    }
    if (m_code_size_isSet) {
        obj.insert(QString("CodeSize"), ::OpenAPI::toJsonValue(m_code_size));
    }
    if (m_s3_application_code_location_description.isSet()) {
        obj.insert(QString("S3ApplicationCodeLocationDescription"), ::OpenAPI::toJsonValue(m_s3_application_code_location_description));
    }
    return obj;
}

QString OAICodeContentDescription::getTextContent() const {
    return m_text_content;
}
void OAICodeContentDescription::setTextContent(const QString &text_content) {
    m_text_content = text_content;
    m_text_content_isSet = true;
}

bool OAICodeContentDescription::is_text_content_Set() const{
    return m_text_content_isSet;
}

bool OAICodeContentDescription::is_text_content_Valid() const{
    return m_text_content_isValid;
}

QString OAICodeContentDescription::getCodeMd5() const {
    return m_code_md5;
}
void OAICodeContentDescription::setCodeMd5(const QString &code_md5) {
    m_code_md5 = code_md5;
    m_code_md5_isSet = true;
}

bool OAICodeContentDescription::is_code_md5_Set() const{
    return m_code_md5_isSet;
}

bool OAICodeContentDescription::is_code_md5_Valid() const{
    return m_code_md5_isValid;
}

qint32 OAICodeContentDescription::getCodeSize() const {
    return m_code_size;
}
void OAICodeContentDescription::setCodeSize(const qint32 &code_size) {
    m_code_size = code_size;
    m_code_size_isSet = true;
}

bool OAICodeContentDescription::is_code_size_Set() const{
    return m_code_size_isSet;
}

bool OAICodeContentDescription::is_code_size_Valid() const{
    return m_code_size_isValid;
}

OAICodeContentDescription_S3ApplicationCodeLocationDescription OAICodeContentDescription::getS3ApplicationCodeLocationDescription() const {
    return m_s3_application_code_location_description;
}
void OAICodeContentDescription::setS3ApplicationCodeLocationDescription(const OAICodeContentDescription_S3ApplicationCodeLocationDescription &s3_application_code_location_description) {
    m_s3_application_code_location_description = s3_application_code_location_description;
    m_s3_application_code_location_description_isSet = true;
}

bool OAICodeContentDescription::is_s3_application_code_location_description_Set() const{
    return m_s3_application_code_location_description_isSet;
}

bool OAICodeContentDescription::is_s3_application_code_location_description_Valid() const{
    return m_s3_application_code_location_description_isValid;
}

bool OAICodeContentDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_application_code_location_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeContentDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
