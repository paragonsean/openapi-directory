/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZeppelinMonitoringConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZeppelinMonitoringConfigurationDescription::OAIZeppelinMonitoringConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZeppelinMonitoringConfigurationDescription::OAIZeppelinMonitoringConfigurationDescription() {
    this->initializeModel();
}

OAIZeppelinMonitoringConfigurationDescription::~OAIZeppelinMonitoringConfigurationDescription() {}

void OAIZeppelinMonitoringConfigurationDescription::initializeModel() {

    m_log_level_isSet = false;
    m_log_level_isValid = false;
}

void OAIZeppelinMonitoringConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZeppelinMonitoringConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;
}

QString OAIZeppelinMonitoringConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZeppelinMonitoringConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    return obj;
}

OAILogLevel OAIZeppelinMonitoringConfigurationDescription::getLogLevel() const {
    return m_log_level;
}
void OAIZeppelinMonitoringConfigurationDescription::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIZeppelinMonitoringConfigurationDescription::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIZeppelinMonitoringConfigurationDescription::is_log_level_Valid() const{
    return m_log_level_isValid;
}

bool OAIZeppelinMonitoringConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZeppelinMonitoringConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
