/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputUpdate::OAIOutputUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputUpdate::OAIOutputUpdate() {
    this->initializeModel();
}

OAIOutputUpdate::~OAIOutputUpdate() {}

void OAIOutputUpdate::initializeModel() {

    m_output_id_isSet = false;
    m_output_id_isValid = false;

    m_name_update_isSet = false;
    m_name_update_isValid = false;

    m_kinesis_streams_output_update_isSet = false;
    m_kinesis_streams_output_update_isValid = false;

    m_kinesis_firehose_output_update_isSet = false;
    m_kinesis_firehose_output_update_isValid = false;

    m_lambda_output_update_isSet = false;
    m_lambda_output_update_isValid = false;

    m_destination_schema_update_isSet = false;
    m_destination_schema_update_isValid = false;
}

void OAIOutputUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputUpdate::fromJsonObject(QJsonObject json) {

    m_output_id_isValid = ::OpenAPI::fromJsonValue(m_output_id, json[QString("OutputId")]);
    m_output_id_isSet = !json[QString("OutputId")].isNull() && m_output_id_isValid;

    m_name_update_isValid = ::OpenAPI::fromJsonValue(m_name_update, json[QString("NameUpdate")]);
    m_name_update_isSet = !json[QString("NameUpdate")].isNull() && m_name_update_isValid;

    m_kinesis_streams_output_update_isValid = ::OpenAPI::fromJsonValue(m_kinesis_streams_output_update, json[QString("KinesisStreamsOutputUpdate")]);
    m_kinesis_streams_output_update_isSet = !json[QString("KinesisStreamsOutputUpdate")].isNull() && m_kinesis_streams_output_update_isValid;

    m_kinesis_firehose_output_update_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_output_update, json[QString("KinesisFirehoseOutputUpdate")]);
    m_kinesis_firehose_output_update_isSet = !json[QString("KinesisFirehoseOutputUpdate")].isNull() && m_kinesis_firehose_output_update_isValid;

    m_lambda_output_update_isValid = ::OpenAPI::fromJsonValue(m_lambda_output_update, json[QString("LambdaOutputUpdate")]);
    m_lambda_output_update_isSet = !json[QString("LambdaOutputUpdate")].isNull() && m_lambda_output_update_isValid;

    m_destination_schema_update_isValid = ::OpenAPI::fromJsonValue(m_destination_schema_update, json[QString("DestinationSchemaUpdate")]);
    m_destination_schema_update_isSet = !json[QString("DestinationSchemaUpdate")].isNull() && m_destination_schema_update_isValid;
}

QString OAIOutputUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_output_id_isSet) {
        obj.insert(QString("OutputId"), ::OpenAPI::toJsonValue(m_output_id));
    }
    if (m_name_update_isSet) {
        obj.insert(QString("NameUpdate"), ::OpenAPI::toJsonValue(m_name_update));
    }
    if (m_kinesis_streams_output_update.isSet()) {
        obj.insert(QString("KinesisStreamsOutputUpdate"), ::OpenAPI::toJsonValue(m_kinesis_streams_output_update));
    }
    if (m_kinesis_firehose_output_update.isSet()) {
        obj.insert(QString("KinesisFirehoseOutputUpdate"), ::OpenAPI::toJsonValue(m_kinesis_firehose_output_update));
    }
    if (m_lambda_output_update.isSet()) {
        obj.insert(QString("LambdaOutputUpdate"), ::OpenAPI::toJsonValue(m_lambda_output_update));
    }
    if (m_destination_schema_update.isSet()) {
        obj.insert(QString("DestinationSchemaUpdate"), ::OpenAPI::toJsonValue(m_destination_schema_update));
    }
    return obj;
}

QString OAIOutputUpdate::getOutputId() const {
    return m_output_id;
}
void OAIOutputUpdate::setOutputId(const QString &output_id) {
    m_output_id = output_id;
    m_output_id_isSet = true;
}

bool OAIOutputUpdate::is_output_id_Set() const{
    return m_output_id_isSet;
}

bool OAIOutputUpdate::is_output_id_Valid() const{
    return m_output_id_isValid;
}

QString OAIOutputUpdate::getNameUpdate() const {
    return m_name_update;
}
void OAIOutputUpdate::setNameUpdate(const QString &name_update) {
    m_name_update = name_update;
    m_name_update_isSet = true;
}

bool OAIOutputUpdate::is_name_update_Set() const{
    return m_name_update_isSet;
}

bool OAIOutputUpdate::is_name_update_Valid() const{
    return m_name_update_isValid;
}

OAIOutputUpdate_KinesisStreamsOutputUpdate OAIOutputUpdate::getKinesisStreamsOutputUpdate() const {
    return m_kinesis_streams_output_update;
}
void OAIOutputUpdate::setKinesisStreamsOutputUpdate(const OAIOutputUpdate_KinesisStreamsOutputUpdate &kinesis_streams_output_update) {
    m_kinesis_streams_output_update = kinesis_streams_output_update;
    m_kinesis_streams_output_update_isSet = true;
}

bool OAIOutputUpdate::is_kinesis_streams_output_update_Set() const{
    return m_kinesis_streams_output_update_isSet;
}

bool OAIOutputUpdate::is_kinesis_streams_output_update_Valid() const{
    return m_kinesis_streams_output_update_isValid;
}

OAIOutputUpdate_KinesisFirehoseOutputUpdate OAIOutputUpdate::getKinesisFirehoseOutputUpdate() const {
    return m_kinesis_firehose_output_update;
}
void OAIOutputUpdate::setKinesisFirehoseOutputUpdate(const OAIOutputUpdate_KinesisFirehoseOutputUpdate &kinesis_firehose_output_update) {
    m_kinesis_firehose_output_update = kinesis_firehose_output_update;
    m_kinesis_firehose_output_update_isSet = true;
}

bool OAIOutputUpdate::is_kinesis_firehose_output_update_Set() const{
    return m_kinesis_firehose_output_update_isSet;
}

bool OAIOutputUpdate::is_kinesis_firehose_output_update_Valid() const{
    return m_kinesis_firehose_output_update_isValid;
}

OAIOutputUpdate_LambdaOutputUpdate OAIOutputUpdate::getLambdaOutputUpdate() const {
    return m_lambda_output_update;
}
void OAIOutputUpdate::setLambdaOutputUpdate(const OAIOutputUpdate_LambdaOutputUpdate &lambda_output_update) {
    m_lambda_output_update = lambda_output_update;
    m_lambda_output_update_isSet = true;
}

bool OAIOutputUpdate::is_lambda_output_update_Set() const{
    return m_lambda_output_update_isSet;
}

bool OAIOutputUpdate::is_lambda_output_update_Valid() const{
    return m_lambda_output_update_isValid;
}

OAIOutput_DestinationSchema OAIOutputUpdate::getDestinationSchemaUpdate() const {
    return m_destination_schema_update;
}
void OAIOutputUpdate::setDestinationSchemaUpdate(const OAIOutput_DestinationSchema &destination_schema_update) {
    m_destination_schema_update = destination_schema_update;
    m_destination_schema_update_isSet = true;
}

bool OAIOutputUpdate::is_destination_schema_update_Set() const{
    return m_destination_schema_update_isSet;
}

bool OAIOutputUpdate::is_destination_schema_update_Valid() const{
    return m_destination_schema_update_isValid;
}

bool OAIOutputUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_streams_output_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_output_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_output_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_schema_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_id_isValid && true;
}

} // namespace OpenAPI
