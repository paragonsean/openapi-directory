/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationPresignedUrlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationPresignedUrlResponse::OAICreateApplicationPresignedUrlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationPresignedUrlResponse::OAICreateApplicationPresignedUrlResponse() {
    this->initializeModel();
}

OAICreateApplicationPresignedUrlResponse::~OAICreateApplicationPresignedUrlResponse() {}

void OAICreateApplicationPresignedUrlResponse::initializeModel() {

    m_authorized_url_isSet = false;
    m_authorized_url_isValid = false;
}

void OAICreateApplicationPresignedUrlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationPresignedUrlResponse::fromJsonObject(QJsonObject json) {

    m_authorized_url_isValid = ::OpenAPI::fromJsonValue(m_authorized_url, json[QString("AuthorizedUrl")]);
    m_authorized_url_isSet = !json[QString("AuthorizedUrl")].isNull() && m_authorized_url_isValid;
}

QString OAICreateApplicationPresignedUrlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationPresignedUrlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_url_isSet) {
        obj.insert(QString("AuthorizedUrl"), ::OpenAPI::toJsonValue(m_authorized_url));
    }
    return obj;
}

QString OAICreateApplicationPresignedUrlResponse::getAuthorizedUrl() const {
    return m_authorized_url;
}
void OAICreateApplicationPresignedUrlResponse::setAuthorizedUrl(const QString &authorized_url) {
    m_authorized_url = authorized_url;
    m_authorized_url_isSet = true;
}

bool OAICreateApplicationPresignedUrlResponse::is_authorized_url_Set() const{
    return m_authorized_url_isSet;
}

bool OAICreateApplicationPresignedUrlResponse::is_authorized_url_Valid() const{
    return m_authorized_url_isValid;
}

bool OAICreateApplicationPresignedUrlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationPresignedUrlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
