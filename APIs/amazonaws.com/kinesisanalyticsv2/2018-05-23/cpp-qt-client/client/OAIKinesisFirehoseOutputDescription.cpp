/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKinesisFirehoseOutputDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKinesisFirehoseOutputDescription::OAIKinesisFirehoseOutputDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKinesisFirehoseOutputDescription::OAIKinesisFirehoseOutputDescription() {
    this->initializeModel();
}

OAIKinesisFirehoseOutputDescription::~OAIKinesisFirehoseOutputDescription() {}

void OAIKinesisFirehoseOutputDescription::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIKinesisFirehoseOutputDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKinesisFirehoseOutputDescription::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;
}

QString OAIKinesisFirehoseOutputDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKinesisFirehoseOutputDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIKinesisFirehoseOutputDescription::getResourceArn() const {
    return m_resource_arn;
}
void OAIKinesisFirehoseOutputDescription::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIKinesisFirehoseOutputDescription::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIKinesisFirehoseOutputDescription::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIKinesisFirehoseOutputDescription::getRoleArn() const {
    return m_role_arn;
}
void OAIKinesisFirehoseOutputDescription::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIKinesisFirehoseOutputDescription::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIKinesisFirehoseOutputDescription::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIKinesisFirehoseOutputDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKinesisFirehoseOutputDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
