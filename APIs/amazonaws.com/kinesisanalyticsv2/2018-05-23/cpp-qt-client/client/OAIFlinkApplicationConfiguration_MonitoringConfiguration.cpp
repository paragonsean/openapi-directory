/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlinkApplicationConfiguration_MonitoringConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlinkApplicationConfiguration_MonitoringConfiguration::OAIFlinkApplicationConfiguration_MonitoringConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlinkApplicationConfiguration_MonitoringConfiguration::OAIFlinkApplicationConfiguration_MonitoringConfiguration() {
    this->initializeModel();
}

OAIFlinkApplicationConfiguration_MonitoringConfiguration::~OAIFlinkApplicationConfiguration_MonitoringConfiguration() {}

void OAIFlinkApplicationConfiguration_MonitoringConfiguration::initializeModel() {

    m_configuration_type_isSet = false;
    m_configuration_type_isValid = false;

    m_metrics_level_isSet = false;
    m_metrics_level_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;
}

void OAIFlinkApplicationConfiguration_MonitoringConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlinkApplicationConfiguration_MonitoringConfiguration::fromJsonObject(QJsonObject json) {

    m_configuration_type_isValid = ::OpenAPI::fromJsonValue(m_configuration_type, json[QString("ConfigurationType")]);
    m_configuration_type_isSet = !json[QString("ConfigurationType")].isNull() && m_configuration_type_isValid;

    m_metrics_level_isValid = ::OpenAPI::fromJsonValue(m_metrics_level, json[QString("MetricsLevel")]);
    m_metrics_level_isSet = !json[QString("MetricsLevel")].isNull() && m_metrics_level_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;
}

QString OAIFlinkApplicationConfiguration_MonitoringConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlinkApplicationConfiguration_MonitoringConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_type.isSet()) {
        obj.insert(QString("ConfigurationType"), ::OpenAPI::toJsonValue(m_configuration_type));
    }
    if (m_metrics_level.isSet()) {
        obj.insert(QString("MetricsLevel"), ::OpenAPI::toJsonValue(m_metrics_level));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    return obj;
}

OAIConfigurationType OAIFlinkApplicationConfiguration_MonitoringConfiguration::getConfigurationType() const {
    return m_configuration_type;
}
void OAIFlinkApplicationConfiguration_MonitoringConfiguration::setConfigurationType(const OAIConfigurationType &configuration_type) {
    m_configuration_type = configuration_type;
    m_configuration_type_isSet = true;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::is_configuration_type_Set() const{
    return m_configuration_type_isSet;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::is_configuration_type_Valid() const{
    return m_configuration_type_isValid;
}

OAIMetricsLevel OAIFlinkApplicationConfiguration_MonitoringConfiguration::getMetricsLevel() const {
    return m_metrics_level;
}
void OAIFlinkApplicationConfiguration_MonitoringConfiguration::setMetricsLevel(const OAIMetricsLevel &metrics_level) {
    m_metrics_level = metrics_level;
    m_metrics_level_isSet = true;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::is_metrics_level_Set() const{
    return m_metrics_level_isSet;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::is_metrics_level_Valid() const{
    return m_metrics_level_isValid;
}

OAILogLevel OAIFlinkApplicationConfiguration_MonitoringConfiguration::getLogLevel() const {
    return m_log_level;
}
void OAIFlinkApplicationConfiguration_MonitoringConfiguration::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::is_log_level_Valid() const{
    return m_log_level_isValid;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlinkApplicationConfiguration_MonitoringConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_type_isValid && true;
}

} // namespace OpenAPI
