/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlinkApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlinkApplicationConfigurationUpdate::OAIFlinkApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlinkApplicationConfigurationUpdate::OAIFlinkApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIFlinkApplicationConfigurationUpdate::~OAIFlinkApplicationConfigurationUpdate() {}

void OAIFlinkApplicationConfigurationUpdate::initializeModel() {

    m_checkpoint_configuration_update_isSet = false;
    m_checkpoint_configuration_update_isValid = false;

    m_monitoring_configuration_update_isSet = false;
    m_monitoring_configuration_update_isValid = false;

    m_parallelism_configuration_update_isSet = false;
    m_parallelism_configuration_update_isValid = false;
}

void OAIFlinkApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlinkApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_checkpoint_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_configuration_update, json[QString("CheckpointConfigurationUpdate")]);
    m_checkpoint_configuration_update_isSet = !json[QString("CheckpointConfigurationUpdate")].isNull() && m_checkpoint_configuration_update_isValid;

    m_monitoring_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration_update, json[QString("MonitoringConfigurationUpdate")]);
    m_monitoring_configuration_update_isSet = !json[QString("MonitoringConfigurationUpdate")].isNull() && m_monitoring_configuration_update_isValid;

    m_parallelism_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration_update, json[QString("ParallelismConfigurationUpdate")]);
    m_parallelism_configuration_update_isSet = !json[QString("ParallelismConfigurationUpdate")].isNull() && m_parallelism_configuration_update_isValid;
}

QString OAIFlinkApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlinkApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_checkpoint_configuration_update.isSet()) {
        obj.insert(QString("CheckpointConfigurationUpdate"), ::OpenAPI::toJsonValue(m_checkpoint_configuration_update));
    }
    if (m_monitoring_configuration_update.isSet()) {
        obj.insert(QString("MonitoringConfigurationUpdate"), ::OpenAPI::toJsonValue(m_monitoring_configuration_update));
    }
    if (m_parallelism_configuration_update.isSet()) {
        obj.insert(QString("ParallelismConfigurationUpdate"), ::OpenAPI::toJsonValue(m_parallelism_configuration_update));
    }
    return obj;
}

OAIFlinkApplicationConfigurationUpdate_CheckpointConfigurationUpdate OAIFlinkApplicationConfigurationUpdate::getCheckpointConfigurationUpdate() const {
    return m_checkpoint_configuration_update;
}
void OAIFlinkApplicationConfigurationUpdate::setCheckpointConfigurationUpdate(const OAIFlinkApplicationConfigurationUpdate_CheckpointConfigurationUpdate &checkpoint_configuration_update) {
    m_checkpoint_configuration_update = checkpoint_configuration_update;
    m_checkpoint_configuration_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate::is_checkpoint_configuration_update_Set() const{
    return m_checkpoint_configuration_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate::is_checkpoint_configuration_update_Valid() const{
    return m_checkpoint_configuration_update_isValid;
}

OAIFlinkApplicationConfigurationUpdate_MonitoringConfigurationUpdate OAIFlinkApplicationConfigurationUpdate::getMonitoringConfigurationUpdate() const {
    return m_monitoring_configuration_update;
}
void OAIFlinkApplicationConfigurationUpdate::setMonitoringConfigurationUpdate(const OAIFlinkApplicationConfigurationUpdate_MonitoringConfigurationUpdate &monitoring_configuration_update) {
    m_monitoring_configuration_update = monitoring_configuration_update;
    m_monitoring_configuration_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate::is_monitoring_configuration_update_Set() const{
    return m_monitoring_configuration_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate::is_monitoring_configuration_update_Valid() const{
    return m_monitoring_configuration_update_isValid;
}

OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate OAIFlinkApplicationConfigurationUpdate::getParallelismConfigurationUpdate() const {
    return m_parallelism_configuration_update;
}
void OAIFlinkApplicationConfigurationUpdate::setParallelismConfigurationUpdate(const OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate &parallelism_configuration_update) {
    m_parallelism_configuration_update = parallelism_configuration_update;
    m_parallelism_configuration_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate::is_parallelism_configuration_update_Set() const{
    return m_parallelism_configuration_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate::is_parallelism_configuration_update_Valid() const{
    return m_parallelism_configuration_update_isValid;
}

bool OAIFlinkApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkpoint_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlinkApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
