/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationRequest::OAIUpdateApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationRequest::OAIUpdateApplicationRequest() {
    this->initializeModel();
}

OAIUpdateApplicationRequest::~OAIUpdateApplicationRequest() {}

void OAIUpdateApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_application_configuration_update_isSet = false;
    m_application_configuration_update_isValid = false;

    m_service_execution_role_update_isSet = false;
    m_service_execution_role_update_isValid = false;

    m_run_configuration_update_isSet = false;
    m_run_configuration_update_isValid = false;

    m_cloud_watch_logging_option_updates_isSet = false;
    m_cloud_watch_logging_option_updates_isValid = false;

    m_conditional_token_isSet = false;
    m_conditional_token_isValid = false;
}

void OAIUpdateApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_application_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_application_configuration_update, json[QString("ApplicationConfigurationUpdate")]);
    m_application_configuration_update_isSet = !json[QString("ApplicationConfigurationUpdate")].isNull() && m_application_configuration_update_isValid;

    m_service_execution_role_update_isValid = ::OpenAPI::fromJsonValue(m_service_execution_role_update, json[QString("ServiceExecutionRoleUpdate")]);
    m_service_execution_role_update_isSet = !json[QString("ServiceExecutionRoleUpdate")].isNull() && m_service_execution_role_update_isValid;

    m_run_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_run_configuration_update, json[QString("RunConfigurationUpdate")]);
    m_run_configuration_update_isSet = !json[QString("RunConfigurationUpdate")].isNull() && m_run_configuration_update_isValid;

    m_cloud_watch_logging_option_updates_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_updates, json[QString("CloudWatchLoggingOptionUpdates")]);
    m_cloud_watch_logging_option_updates_isSet = !json[QString("CloudWatchLoggingOptionUpdates")].isNull() && m_cloud_watch_logging_option_updates_isValid;

    m_conditional_token_isValid = ::OpenAPI::fromJsonValue(m_conditional_token, json[QString("ConditionalToken")]);
    m_conditional_token_isSet = !json[QString("ConditionalToken")].isNull() && m_conditional_token_isValid;
}

QString OAIUpdateApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_application_configuration_update.isSet()) {
        obj.insert(QString("ApplicationConfigurationUpdate"), ::OpenAPI::toJsonValue(m_application_configuration_update));
    }
    if (m_service_execution_role_update_isSet) {
        obj.insert(QString("ServiceExecutionRoleUpdate"), ::OpenAPI::toJsonValue(m_service_execution_role_update));
    }
    if (m_run_configuration_update.isSet()) {
        obj.insert(QString("RunConfigurationUpdate"), ::OpenAPI::toJsonValue(m_run_configuration_update));
    }
    if (m_cloud_watch_logging_option_updates.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptionUpdates"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_updates));
    }
    if (m_conditional_token_isSet) {
        obj.insert(QString("ConditionalToken"), ::OpenAPI::toJsonValue(m_conditional_token));
    }
    return obj;
}

QString OAIUpdateApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIUpdateApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIUpdateApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIUpdateApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIUpdateApplicationRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIUpdateApplicationRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIUpdateApplicationRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIUpdateApplicationRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

OAIUpdateApplicationRequest_ApplicationConfigurationUpdate OAIUpdateApplicationRequest::getApplicationConfigurationUpdate() const {
    return m_application_configuration_update;
}
void OAIUpdateApplicationRequest::setApplicationConfigurationUpdate(const OAIUpdateApplicationRequest_ApplicationConfigurationUpdate &application_configuration_update) {
    m_application_configuration_update = application_configuration_update;
    m_application_configuration_update_isSet = true;
}

bool OAIUpdateApplicationRequest::is_application_configuration_update_Set() const{
    return m_application_configuration_update_isSet;
}

bool OAIUpdateApplicationRequest::is_application_configuration_update_Valid() const{
    return m_application_configuration_update_isValid;
}

QString OAIUpdateApplicationRequest::getServiceExecutionRoleUpdate() const {
    return m_service_execution_role_update;
}
void OAIUpdateApplicationRequest::setServiceExecutionRoleUpdate(const QString &service_execution_role_update) {
    m_service_execution_role_update = service_execution_role_update;
    m_service_execution_role_update_isSet = true;
}

bool OAIUpdateApplicationRequest::is_service_execution_role_update_Set() const{
    return m_service_execution_role_update_isSet;
}

bool OAIUpdateApplicationRequest::is_service_execution_role_update_Valid() const{
    return m_service_execution_role_update_isValid;
}

OAIUpdateApplicationRequest_RunConfigurationUpdate OAIUpdateApplicationRequest::getRunConfigurationUpdate() const {
    return m_run_configuration_update;
}
void OAIUpdateApplicationRequest::setRunConfigurationUpdate(const OAIUpdateApplicationRequest_RunConfigurationUpdate &run_configuration_update) {
    m_run_configuration_update = run_configuration_update;
    m_run_configuration_update_isSet = true;
}

bool OAIUpdateApplicationRequest::is_run_configuration_update_Set() const{
    return m_run_configuration_update_isSet;
}

bool OAIUpdateApplicationRequest::is_run_configuration_update_Valid() const{
    return m_run_configuration_update_isValid;
}

QList OAIUpdateApplicationRequest::getCloudWatchLoggingOptionUpdates() const {
    return m_cloud_watch_logging_option_updates;
}
void OAIUpdateApplicationRequest::setCloudWatchLoggingOptionUpdates(const QList &cloud_watch_logging_option_updates) {
    m_cloud_watch_logging_option_updates = cloud_watch_logging_option_updates;
    m_cloud_watch_logging_option_updates_isSet = true;
}

bool OAIUpdateApplicationRequest::is_cloud_watch_logging_option_updates_Set() const{
    return m_cloud_watch_logging_option_updates_isSet;
}

bool OAIUpdateApplicationRequest::is_cloud_watch_logging_option_updates_Valid() const{
    return m_cloud_watch_logging_option_updates_isValid;
}

QString OAIUpdateApplicationRequest::getConditionalToken() const {
    return m_conditional_token;
}
void OAIUpdateApplicationRequest::setConditionalToken(const QString &conditional_token) {
    m_conditional_token = conditional_token;
    m_conditional_token_isSet = true;
}

bool OAIUpdateApplicationRequest::is_conditional_token_Set() const{
    return m_conditional_token_isSet;
}

bool OAIUpdateApplicationRequest::is_conditional_token_Valid() const{
    return m_conditional_token_isValid;
}

bool OAIUpdateApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_execution_role_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_option_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && true;
}

} // namespace OpenAPI
