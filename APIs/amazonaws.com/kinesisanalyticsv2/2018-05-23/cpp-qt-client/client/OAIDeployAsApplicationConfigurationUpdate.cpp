/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployAsApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployAsApplicationConfigurationUpdate::OAIDeployAsApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployAsApplicationConfigurationUpdate::OAIDeployAsApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIDeployAsApplicationConfigurationUpdate::~OAIDeployAsApplicationConfigurationUpdate() {}

void OAIDeployAsApplicationConfigurationUpdate::initializeModel() {

    m_s3_content_location_update_isSet = false;
    m_s3_content_location_update_isValid = false;
}

void OAIDeployAsApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployAsApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_s3_content_location_update_isValid = ::OpenAPI::fromJsonValue(m_s3_content_location_update, json[QString("S3ContentLocationUpdate")]);
    m_s3_content_location_update_isSet = !json[QString("S3ContentLocationUpdate")].isNull() && m_s3_content_location_update_isValid;
}

QString OAIDeployAsApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployAsApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_content_location_update.isSet()) {
        obj.insert(QString("S3ContentLocationUpdate"), ::OpenAPI::toJsonValue(m_s3_content_location_update));
    }
    return obj;
}

OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate OAIDeployAsApplicationConfigurationUpdate::getS3ContentLocationUpdate() const {
    return m_s3_content_location_update;
}
void OAIDeployAsApplicationConfigurationUpdate::setS3ContentLocationUpdate(const OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate &s3_content_location_update) {
    m_s3_content_location_update = s3_content_location_update;
    m_s3_content_location_update_isSet = true;
}

bool OAIDeployAsApplicationConfigurationUpdate::is_s3_content_location_update_Set() const{
    return m_s3_content_location_update_isSet;
}

bool OAIDeployAsApplicationConfigurationUpdate::is_s3_content_location_update_Valid() const{
    return m_s3_content_location_update_isValid;
}

bool OAIDeployAsApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_content_location_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployAsApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
