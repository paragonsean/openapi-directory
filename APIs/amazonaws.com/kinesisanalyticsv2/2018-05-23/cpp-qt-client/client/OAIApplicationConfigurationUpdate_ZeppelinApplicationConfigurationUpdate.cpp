/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::~OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate() {}

void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::initializeModel() {

    m_monitoring_configuration_update_isSet = false;
    m_monitoring_configuration_update_isValid = false;

    m_catalog_configuration_update_isSet = false;
    m_catalog_configuration_update_isValid = false;

    m_deploy_as_application_configuration_update_isSet = false;
    m_deploy_as_application_configuration_update_isValid = false;

    m_custom_artifacts_configuration_update_isSet = false;
    m_custom_artifacts_configuration_update_isValid = false;
}

void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_monitoring_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration_update, json[QString("MonitoringConfigurationUpdate")]);
    m_monitoring_configuration_update_isSet = !json[QString("MonitoringConfigurationUpdate")].isNull() && m_monitoring_configuration_update_isValid;

    m_catalog_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_catalog_configuration_update, json[QString("CatalogConfigurationUpdate")]);
    m_catalog_configuration_update_isSet = !json[QString("CatalogConfigurationUpdate")].isNull() && m_catalog_configuration_update_isValid;

    m_deploy_as_application_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_deploy_as_application_configuration_update, json[QString("DeployAsApplicationConfigurationUpdate")]);
    m_deploy_as_application_configuration_update_isSet = !json[QString("DeployAsApplicationConfigurationUpdate")].isNull() && m_deploy_as_application_configuration_update_isValid;

    m_custom_artifacts_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_custom_artifacts_configuration_update, json[QString("CustomArtifactsConfigurationUpdate")]);
    m_custom_artifacts_configuration_update_isSet = !json[QString("CustomArtifactsConfigurationUpdate")].isNull() && m_custom_artifacts_configuration_update_isValid;
}

QString OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_monitoring_configuration_update.isSet()) {
        obj.insert(QString("MonitoringConfigurationUpdate"), ::OpenAPI::toJsonValue(m_monitoring_configuration_update));
    }
    if (m_catalog_configuration_update.isSet()) {
        obj.insert(QString("CatalogConfigurationUpdate"), ::OpenAPI::toJsonValue(m_catalog_configuration_update));
    }
    if (m_deploy_as_application_configuration_update.isSet()) {
        obj.insert(QString("DeployAsApplicationConfigurationUpdate"), ::OpenAPI::toJsonValue(m_deploy_as_application_configuration_update));
    }
    if (m_custom_artifacts_configuration_update.isSet()) {
        obj.insert(QString("CustomArtifactsConfigurationUpdate"), ::OpenAPI::toJsonValue(m_custom_artifacts_configuration_update));
    }
    return obj;
}

OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::getMonitoringConfigurationUpdate() const {
    return m_monitoring_configuration_update;
}
void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::setMonitoringConfigurationUpdate(const OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate &monitoring_configuration_update) {
    m_monitoring_configuration_update = monitoring_configuration_update;
    m_monitoring_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_monitoring_configuration_update_Set() const{
    return m_monitoring_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_monitoring_configuration_update_Valid() const{
    return m_monitoring_configuration_update_isValid;
}

OAIZeppelinApplicationConfigurationUpdate_CatalogConfigurationUpdate OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::getCatalogConfigurationUpdate() const {
    return m_catalog_configuration_update;
}
void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::setCatalogConfigurationUpdate(const OAIZeppelinApplicationConfigurationUpdate_CatalogConfigurationUpdate &catalog_configuration_update) {
    m_catalog_configuration_update = catalog_configuration_update;
    m_catalog_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_catalog_configuration_update_Set() const{
    return m_catalog_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_catalog_configuration_update_Valid() const{
    return m_catalog_configuration_update_isValid;
}

OAIDeployAsApplicationConfigurationUpdate OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::getDeployAsApplicationConfigurationUpdate() const {
    return m_deploy_as_application_configuration_update;
}
void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::setDeployAsApplicationConfigurationUpdate(const OAIDeployAsApplicationConfigurationUpdate &deploy_as_application_configuration_update) {
    m_deploy_as_application_configuration_update = deploy_as_application_configuration_update;
    m_deploy_as_application_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_deploy_as_application_configuration_update_Set() const{
    return m_deploy_as_application_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_deploy_as_application_configuration_update_Valid() const{
    return m_deploy_as_application_configuration_update_isValid;
}

QList OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::getCustomArtifactsConfigurationUpdate() const {
    return m_custom_artifacts_configuration_update;
}
void OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::setCustomArtifactsConfigurationUpdate(const QList &custom_artifacts_configuration_update) {
    m_custom_artifacts_configuration_update = custom_artifacts_configuration_update;
    m_custom_artifacts_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_custom_artifacts_configuration_update_Set() const{
    return m_custom_artifacts_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::is_custom_artifacts_configuration_update_Valid() const{
    return m_custom_artifacts_configuration_update_isValid;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitoring_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_as_application_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_artifacts_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
