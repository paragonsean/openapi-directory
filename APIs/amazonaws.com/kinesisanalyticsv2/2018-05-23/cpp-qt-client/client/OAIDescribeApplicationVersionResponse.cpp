/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeApplicationVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeApplicationVersionResponse::OAIDescribeApplicationVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeApplicationVersionResponse::OAIDescribeApplicationVersionResponse() {
    this->initializeModel();
}

OAIDescribeApplicationVersionResponse::~OAIDescribeApplicationVersionResponse() {}

void OAIDescribeApplicationVersionResponse::initializeModel() {

    m_application_version_detail_isSet = false;
    m_application_version_detail_isValid = false;
}

void OAIDescribeApplicationVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeApplicationVersionResponse::fromJsonObject(QJsonObject json) {

    m_application_version_detail_isValid = ::OpenAPI::fromJsonValue(m_application_version_detail, json[QString("ApplicationVersionDetail")]);
    m_application_version_detail_isSet = !json[QString("ApplicationVersionDetail")].isNull() && m_application_version_detail_isValid;
}

QString OAIDescribeApplicationVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeApplicationVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_detail.isSet()) {
        obj.insert(QString("ApplicationVersionDetail"), ::OpenAPI::toJsonValue(m_application_version_detail));
    }
    return obj;
}

OAIApplicationDetail OAIDescribeApplicationVersionResponse::getApplicationVersionDetail() const {
    return m_application_version_detail;
}
void OAIDescribeApplicationVersionResponse::setApplicationVersionDetail(const OAIApplicationDetail &application_version_detail) {
    m_application_version_detail = application_version_detail;
    m_application_version_detail_isSet = true;
}

bool OAIDescribeApplicationVersionResponse::is_application_version_detail_Set() const{
    return m_application_version_detail_isSet;
}

bool OAIDescribeApplicationVersionResponse::is_application_version_detail_Valid() const{
    return m_application_version_detail_isValid;
}

bool OAIDescribeApplicationVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeApplicationVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
