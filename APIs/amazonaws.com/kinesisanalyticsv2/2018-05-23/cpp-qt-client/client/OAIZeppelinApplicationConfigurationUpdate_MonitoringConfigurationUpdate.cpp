/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate() {
    this->initializeModel();
}

OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::~OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate() {}

void OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::initializeModel() {

    m_log_level_update_isSet = false;
    m_log_level_update_isValid = false;
}

void OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_log_level_update_isValid = ::OpenAPI::fromJsonValue(m_log_level_update, json[QString("LogLevelUpdate")]);
    m_log_level_update_isSet = !json[QString("LogLevelUpdate")].isNull() && m_log_level_update_isValid;
}

QString OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_log_level_update.isSet()) {
        obj.insert(QString("LogLevelUpdate"), ::OpenAPI::toJsonValue(m_log_level_update));
    }
    return obj;
}

OAILogLevel OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::getLogLevelUpdate() const {
    return m_log_level_update;
}
void OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::setLogLevelUpdate(const OAILogLevel &log_level_update) {
    m_log_level_update = log_level_update;
    m_log_level_update_isSet = true;
}

bool OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::is_log_level_update_Set() const{
    return m_log_level_update_isSet;
}

bool OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::is_log_level_update_Valid() const{
    return m_log_level_update_isValid;
}

bool OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_level_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_level_update_isValid && true;
}

} // namespace OpenAPI
