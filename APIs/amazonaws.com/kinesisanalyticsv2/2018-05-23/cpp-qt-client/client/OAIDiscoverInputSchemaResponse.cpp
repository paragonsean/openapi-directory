/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoverInputSchemaResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoverInputSchemaResponse::OAIDiscoverInputSchemaResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoverInputSchemaResponse::OAIDiscoverInputSchemaResponse() {
    this->initializeModel();
}

OAIDiscoverInputSchemaResponse::~OAIDiscoverInputSchemaResponse() {}

void OAIDiscoverInputSchemaResponse::initializeModel() {

    m_input_schema_isSet = false;
    m_input_schema_isValid = false;

    m_parsed_input_records_isSet = false;
    m_parsed_input_records_isValid = false;

    m_processed_input_records_isSet = false;
    m_processed_input_records_isValid = false;

    m_raw_input_records_isSet = false;
    m_raw_input_records_isValid = false;
}

void OAIDiscoverInputSchemaResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoverInputSchemaResponse::fromJsonObject(QJsonObject json) {

    m_input_schema_isValid = ::OpenAPI::fromJsonValue(m_input_schema, json[QString("InputSchema")]);
    m_input_schema_isSet = !json[QString("InputSchema")].isNull() && m_input_schema_isValid;

    m_parsed_input_records_isValid = ::OpenAPI::fromJsonValue(m_parsed_input_records, json[QString("ParsedInputRecords")]);
    m_parsed_input_records_isSet = !json[QString("ParsedInputRecords")].isNull() && m_parsed_input_records_isValid;

    m_processed_input_records_isValid = ::OpenAPI::fromJsonValue(m_processed_input_records, json[QString("ProcessedInputRecords")]);
    m_processed_input_records_isSet = !json[QString("ProcessedInputRecords")].isNull() && m_processed_input_records_isValid;

    m_raw_input_records_isValid = ::OpenAPI::fromJsonValue(m_raw_input_records, json[QString("RawInputRecords")]);
    m_raw_input_records_isSet = !json[QString("RawInputRecords")].isNull() && m_raw_input_records_isValid;
}

QString OAIDiscoverInputSchemaResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoverInputSchemaResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_input_schema.isSet()) {
        obj.insert(QString("InputSchema"), ::OpenAPI::toJsonValue(m_input_schema));
    }
    if (m_parsed_input_records.isSet()) {
        obj.insert(QString("ParsedInputRecords"), ::OpenAPI::toJsonValue(m_parsed_input_records));
    }
    if (m_processed_input_records.isSet()) {
        obj.insert(QString("ProcessedInputRecords"), ::OpenAPI::toJsonValue(m_processed_input_records));
    }
    if (m_raw_input_records.isSet()) {
        obj.insert(QString("RawInputRecords"), ::OpenAPI::toJsonValue(m_raw_input_records));
    }
    return obj;
}

OAIDiscoverInputSchemaResponse_InputSchema OAIDiscoverInputSchemaResponse::getInputSchema() const {
    return m_input_schema;
}
void OAIDiscoverInputSchemaResponse::setInputSchema(const OAIDiscoverInputSchemaResponse_InputSchema &input_schema) {
    m_input_schema = input_schema;
    m_input_schema_isSet = true;
}

bool OAIDiscoverInputSchemaResponse::is_input_schema_Set() const{
    return m_input_schema_isSet;
}

bool OAIDiscoverInputSchemaResponse::is_input_schema_Valid() const{
    return m_input_schema_isValid;
}

QList OAIDiscoverInputSchemaResponse::getParsedInputRecords() const {
    return m_parsed_input_records;
}
void OAIDiscoverInputSchemaResponse::setParsedInputRecords(const QList &parsed_input_records) {
    m_parsed_input_records = parsed_input_records;
    m_parsed_input_records_isSet = true;
}

bool OAIDiscoverInputSchemaResponse::is_parsed_input_records_Set() const{
    return m_parsed_input_records_isSet;
}

bool OAIDiscoverInputSchemaResponse::is_parsed_input_records_Valid() const{
    return m_parsed_input_records_isValid;
}

QList OAIDiscoverInputSchemaResponse::getProcessedInputRecords() const {
    return m_processed_input_records;
}
void OAIDiscoverInputSchemaResponse::setProcessedInputRecords(const QList &processed_input_records) {
    m_processed_input_records = processed_input_records;
    m_processed_input_records_isSet = true;
}

bool OAIDiscoverInputSchemaResponse::is_processed_input_records_Set() const{
    return m_processed_input_records_isSet;
}

bool OAIDiscoverInputSchemaResponse::is_processed_input_records_Valid() const{
    return m_processed_input_records_isValid;
}

QList OAIDiscoverInputSchemaResponse::getRawInputRecords() const {
    return m_raw_input_records;
}
void OAIDiscoverInputSchemaResponse::setRawInputRecords(const QList &raw_input_records) {
    m_raw_input_records = raw_input_records;
    m_raw_input_records_isSet = true;
}

bool OAIDiscoverInputSchemaResponse::is_raw_input_records_Set() const{
    return m_raw_input_records_isSet;
}

bool OAIDiscoverInputSchemaResponse::is_raw_input_records_Valid() const{
    return m_raw_input_records_isValid;
}

bool OAIDiscoverInputSchemaResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parsed_input_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_input_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_input_records.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoverInputSchemaResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
