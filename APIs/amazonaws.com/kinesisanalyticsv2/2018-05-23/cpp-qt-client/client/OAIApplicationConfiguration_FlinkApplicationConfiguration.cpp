/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfiguration_FlinkApplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfiguration_FlinkApplicationConfiguration::OAIApplicationConfiguration_FlinkApplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfiguration_FlinkApplicationConfiguration::OAIApplicationConfiguration_FlinkApplicationConfiguration() {
    this->initializeModel();
}

OAIApplicationConfiguration_FlinkApplicationConfiguration::~OAIApplicationConfiguration_FlinkApplicationConfiguration() {}

void OAIApplicationConfiguration_FlinkApplicationConfiguration::initializeModel() {

    m_checkpoint_configuration_isSet = false;
    m_checkpoint_configuration_isValid = false;

    m_monitoring_configuration_isSet = false;
    m_monitoring_configuration_isValid = false;

    m_parallelism_configuration_isSet = false;
    m_parallelism_configuration_isValid = false;
}

void OAIApplicationConfiguration_FlinkApplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfiguration_FlinkApplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_checkpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_configuration, json[QString("CheckpointConfiguration")]);
    m_checkpoint_configuration_isSet = !json[QString("CheckpointConfiguration")].isNull() && m_checkpoint_configuration_isValid;

    m_monitoring_configuration_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration, json[QString("MonitoringConfiguration")]);
    m_monitoring_configuration_isSet = !json[QString("MonitoringConfiguration")].isNull() && m_monitoring_configuration_isValid;

    m_parallelism_configuration_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration, json[QString("ParallelismConfiguration")]);
    m_parallelism_configuration_isSet = !json[QString("ParallelismConfiguration")].isNull() && m_parallelism_configuration_isValid;
}

QString OAIApplicationConfiguration_FlinkApplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfiguration_FlinkApplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_checkpoint_configuration.isSet()) {
        obj.insert(QString("CheckpointConfiguration"), ::OpenAPI::toJsonValue(m_checkpoint_configuration));
    }
    if (m_monitoring_configuration.isSet()) {
        obj.insert(QString("MonitoringConfiguration"), ::OpenAPI::toJsonValue(m_monitoring_configuration));
    }
    if (m_parallelism_configuration.isSet()) {
        obj.insert(QString("ParallelismConfiguration"), ::OpenAPI::toJsonValue(m_parallelism_configuration));
    }
    return obj;
}

OAIFlinkApplicationConfiguration_CheckpointConfiguration OAIApplicationConfiguration_FlinkApplicationConfiguration::getCheckpointConfiguration() const {
    return m_checkpoint_configuration;
}
void OAIApplicationConfiguration_FlinkApplicationConfiguration::setCheckpointConfiguration(const OAIFlinkApplicationConfiguration_CheckpointConfiguration &checkpoint_configuration) {
    m_checkpoint_configuration = checkpoint_configuration;
    m_checkpoint_configuration_isSet = true;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::is_checkpoint_configuration_Set() const{
    return m_checkpoint_configuration_isSet;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::is_checkpoint_configuration_Valid() const{
    return m_checkpoint_configuration_isValid;
}

OAIFlinkApplicationConfiguration_MonitoringConfiguration OAIApplicationConfiguration_FlinkApplicationConfiguration::getMonitoringConfiguration() const {
    return m_monitoring_configuration;
}
void OAIApplicationConfiguration_FlinkApplicationConfiguration::setMonitoringConfiguration(const OAIFlinkApplicationConfiguration_MonitoringConfiguration &monitoring_configuration) {
    m_monitoring_configuration = monitoring_configuration;
    m_monitoring_configuration_isSet = true;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::is_monitoring_configuration_Set() const{
    return m_monitoring_configuration_isSet;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::is_monitoring_configuration_Valid() const{
    return m_monitoring_configuration_isValid;
}

OAIFlinkApplicationConfiguration_ParallelismConfiguration OAIApplicationConfiguration_FlinkApplicationConfiguration::getParallelismConfiguration() const {
    return m_parallelism_configuration;
}
void OAIApplicationConfiguration_FlinkApplicationConfiguration::setParallelismConfiguration(const OAIFlinkApplicationConfiguration_ParallelismConfiguration &parallelism_configuration) {
    m_parallelism_configuration = parallelism_configuration;
    m_parallelism_configuration_isSet = true;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::is_parallelism_configuration_Set() const{
    return m_parallelism_configuration_isSet;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::is_parallelism_configuration_Valid() const{
    return m_parallelism_configuration_isValid;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfiguration_FlinkApplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
