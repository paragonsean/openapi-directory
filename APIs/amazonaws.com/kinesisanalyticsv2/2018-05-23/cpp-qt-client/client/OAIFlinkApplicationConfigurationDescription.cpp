/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlinkApplicationConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlinkApplicationConfigurationDescription::OAIFlinkApplicationConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlinkApplicationConfigurationDescription::OAIFlinkApplicationConfigurationDescription() {
    this->initializeModel();
}

OAIFlinkApplicationConfigurationDescription::~OAIFlinkApplicationConfigurationDescription() {}

void OAIFlinkApplicationConfigurationDescription::initializeModel() {

    m_checkpoint_configuration_description_isSet = false;
    m_checkpoint_configuration_description_isValid = false;

    m_monitoring_configuration_description_isSet = false;
    m_monitoring_configuration_description_isValid = false;

    m_parallelism_configuration_description_isSet = false;
    m_parallelism_configuration_description_isValid = false;

    m_job_plan_description_isSet = false;
    m_job_plan_description_isValid = false;
}

void OAIFlinkApplicationConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlinkApplicationConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_checkpoint_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_configuration_description, json[QString("CheckpointConfigurationDescription")]);
    m_checkpoint_configuration_description_isSet = !json[QString("CheckpointConfigurationDescription")].isNull() && m_checkpoint_configuration_description_isValid;

    m_monitoring_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration_description, json[QString("MonitoringConfigurationDescription")]);
    m_monitoring_configuration_description_isSet = !json[QString("MonitoringConfigurationDescription")].isNull() && m_monitoring_configuration_description_isValid;

    m_parallelism_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration_description, json[QString("ParallelismConfigurationDescription")]);
    m_parallelism_configuration_description_isSet = !json[QString("ParallelismConfigurationDescription")].isNull() && m_parallelism_configuration_description_isValid;

    m_job_plan_description_isValid = ::OpenAPI::fromJsonValue(m_job_plan_description, json[QString("JobPlanDescription")]);
    m_job_plan_description_isSet = !json[QString("JobPlanDescription")].isNull() && m_job_plan_description_isValid;
}

QString OAIFlinkApplicationConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlinkApplicationConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_checkpoint_configuration_description.isSet()) {
        obj.insert(QString("CheckpointConfigurationDescription"), ::OpenAPI::toJsonValue(m_checkpoint_configuration_description));
    }
    if (m_monitoring_configuration_description.isSet()) {
        obj.insert(QString("MonitoringConfigurationDescription"), ::OpenAPI::toJsonValue(m_monitoring_configuration_description));
    }
    if (m_parallelism_configuration_description.isSet()) {
        obj.insert(QString("ParallelismConfigurationDescription"), ::OpenAPI::toJsonValue(m_parallelism_configuration_description));
    }
    if (m_job_plan_description_isSet) {
        obj.insert(QString("JobPlanDescription"), ::OpenAPI::toJsonValue(m_job_plan_description));
    }
    return obj;
}

OAIFlinkApplicationConfigurationDescription_CheckpointConfigurationDescription OAIFlinkApplicationConfigurationDescription::getCheckpointConfigurationDescription() const {
    return m_checkpoint_configuration_description;
}
void OAIFlinkApplicationConfigurationDescription::setCheckpointConfigurationDescription(const OAIFlinkApplicationConfigurationDescription_CheckpointConfigurationDescription &checkpoint_configuration_description) {
    m_checkpoint_configuration_description = checkpoint_configuration_description;
    m_checkpoint_configuration_description_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription::is_checkpoint_configuration_description_Set() const{
    return m_checkpoint_configuration_description_isSet;
}

bool OAIFlinkApplicationConfigurationDescription::is_checkpoint_configuration_description_Valid() const{
    return m_checkpoint_configuration_description_isValid;
}

OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription OAIFlinkApplicationConfigurationDescription::getMonitoringConfigurationDescription() const {
    return m_monitoring_configuration_description;
}
void OAIFlinkApplicationConfigurationDescription::setMonitoringConfigurationDescription(const OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription &monitoring_configuration_description) {
    m_monitoring_configuration_description = monitoring_configuration_description;
    m_monitoring_configuration_description_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription::is_monitoring_configuration_description_Set() const{
    return m_monitoring_configuration_description_isSet;
}

bool OAIFlinkApplicationConfigurationDescription::is_monitoring_configuration_description_Valid() const{
    return m_monitoring_configuration_description_isValid;
}

OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription OAIFlinkApplicationConfigurationDescription::getParallelismConfigurationDescription() const {
    return m_parallelism_configuration_description;
}
void OAIFlinkApplicationConfigurationDescription::setParallelismConfigurationDescription(const OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription &parallelism_configuration_description) {
    m_parallelism_configuration_description = parallelism_configuration_description;
    m_parallelism_configuration_description_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription::is_parallelism_configuration_description_Set() const{
    return m_parallelism_configuration_description_isSet;
}

bool OAIFlinkApplicationConfigurationDescription::is_parallelism_configuration_description_Valid() const{
    return m_parallelism_configuration_description_isValid;
}

QString OAIFlinkApplicationConfigurationDescription::getJobPlanDescription() const {
    return m_job_plan_description;
}
void OAIFlinkApplicationConfigurationDescription::setJobPlanDescription(const QString &job_plan_description) {
    m_job_plan_description = job_plan_description;
    m_job_plan_description_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription::is_job_plan_description_Set() const{
    return m_job_plan_description_isSet;
}

bool OAIFlinkApplicationConfigurationDescription::is_job_plan_description_Valid() const{
    return m_job_plan_description_isValid;
}

bool OAIFlinkApplicationConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkpoint_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlinkApplicationConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
