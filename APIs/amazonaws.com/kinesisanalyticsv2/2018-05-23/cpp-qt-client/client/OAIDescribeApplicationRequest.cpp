/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeApplicationRequest::OAIDescribeApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeApplicationRequest::OAIDescribeApplicationRequest() {
    this->initializeModel();
}

OAIDescribeApplicationRequest::~OAIDescribeApplicationRequest() {}

void OAIDescribeApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_include_additional_details_isSet = false;
    m_include_additional_details_isValid = false;
}

void OAIDescribeApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_include_additional_details_isValid = ::OpenAPI::fromJsonValue(m_include_additional_details, json[QString("IncludeAdditionalDetails")]);
    m_include_additional_details_isSet = !json[QString("IncludeAdditionalDetails")].isNull() && m_include_additional_details_isValid;
}

QString OAIDescribeApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_include_additional_details_isSet) {
        obj.insert(QString("IncludeAdditionalDetails"), ::OpenAPI::toJsonValue(m_include_additional_details));
    }
    return obj;
}

QString OAIDescribeApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIDescribeApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIDescribeApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIDescribeApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

bool OAIDescribeApplicationRequest::getIncludeAdditionalDetails() const {
    return m_include_additional_details;
}
void OAIDescribeApplicationRequest::setIncludeAdditionalDetails(const bool &include_additional_details) {
    m_include_additional_details = include_additional_details;
    m_include_additional_details_isSet = true;
}

bool OAIDescribeApplicationRequest::is_include_additional_details_Set() const{
    return m_include_additional_details_isSet;
}

bool OAIDescribeApplicationRequest::is_include_additional_details_Valid() const{
    return m_include_additional_details_isValid;
}

bool OAIDescribeApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_additional_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && true;
}

} // namespace OpenAPI
