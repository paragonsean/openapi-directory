/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICheckpointConfigurationUpdate.h
 *
 * Describes updates to the checkpointing parameters for a Flink-based Kinesis Data Analytics application.
 */

#ifndef OAICheckpointConfigurationUpdate_H
#define OAICheckpointConfigurationUpdate_H

#include <QJsonObject>

#include "OAIConfigurationType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICheckpointConfigurationUpdate : public OAIObject {
public:
    OAICheckpointConfigurationUpdate();
    OAICheckpointConfigurationUpdate(QString json);
    ~OAICheckpointConfigurationUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigurationType getConfigurationTypeUpdate() const;
    void setConfigurationTypeUpdate(const OAIConfigurationType &configuration_type_update);
    bool is_configuration_type_update_Set() const;
    bool is_configuration_type_update_Valid() const;

    bool getCheckpointingEnabledUpdate() const;
    void setCheckpointingEnabledUpdate(const bool &checkpointing_enabled_update);
    bool is_checkpointing_enabled_update_Set() const;
    bool is_checkpointing_enabled_update_Valid() const;

    qint32 getCheckpointIntervalUpdate() const;
    void setCheckpointIntervalUpdate(const qint32 &checkpoint_interval_update);
    bool is_checkpoint_interval_update_Set() const;
    bool is_checkpoint_interval_update_Valid() const;

    qint32 getMinPauseBetweenCheckpointsUpdate() const;
    void setMinPauseBetweenCheckpointsUpdate(const qint32 &min_pause_between_checkpoints_update);
    bool is_min_pause_between_checkpoints_update_Set() const;
    bool is_min_pause_between_checkpoints_update_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConfigurationType m_configuration_type_update;
    bool m_configuration_type_update_isSet;
    bool m_configuration_type_update_isValid;

    bool m_checkpointing_enabled_update;
    bool m_checkpointing_enabled_update_isSet;
    bool m_checkpointing_enabled_update_isValid;

    qint32 m_checkpoint_interval_update;
    bool m_checkpoint_interval_update_isSet;
    bool m_checkpoint_interval_update_isValid;

    qint32 m_min_pause_between_checkpoints_update;
    bool m_min_pause_between_checkpoints_update_isSet;
    bool m_min_pause_between_checkpoints_update_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICheckpointConfigurationUpdate)

#endif // OAICheckpointConfigurationUpdate_H
