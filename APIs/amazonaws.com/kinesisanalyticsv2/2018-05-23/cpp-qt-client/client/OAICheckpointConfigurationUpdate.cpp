/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckpointConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckpointConfigurationUpdate::OAICheckpointConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckpointConfigurationUpdate::OAICheckpointConfigurationUpdate() {
    this->initializeModel();
}

OAICheckpointConfigurationUpdate::~OAICheckpointConfigurationUpdate() {}

void OAICheckpointConfigurationUpdate::initializeModel() {

    m_configuration_type_update_isSet = false;
    m_configuration_type_update_isValid = false;

    m_checkpointing_enabled_update_isSet = false;
    m_checkpointing_enabled_update_isValid = false;

    m_checkpoint_interval_update_isSet = false;
    m_checkpoint_interval_update_isValid = false;

    m_min_pause_between_checkpoints_update_isSet = false;
    m_min_pause_between_checkpoints_update_isValid = false;
}

void OAICheckpointConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckpointConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_configuration_type_update_isValid = ::OpenAPI::fromJsonValue(m_configuration_type_update, json[QString("ConfigurationTypeUpdate")]);
    m_configuration_type_update_isSet = !json[QString("ConfigurationTypeUpdate")].isNull() && m_configuration_type_update_isValid;

    m_checkpointing_enabled_update_isValid = ::OpenAPI::fromJsonValue(m_checkpointing_enabled_update, json[QString("CheckpointingEnabledUpdate")]);
    m_checkpointing_enabled_update_isSet = !json[QString("CheckpointingEnabledUpdate")].isNull() && m_checkpointing_enabled_update_isValid;

    m_checkpoint_interval_update_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_interval_update, json[QString("CheckpointIntervalUpdate")]);
    m_checkpoint_interval_update_isSet = !json[QString("CheckpointIntervalUpdate")].isNull() && m_checkpoint_interval_update_isValid;

    m_min_pause_between_checkpoints_update_isValid = ::OpenAPI::fromJsonValue(m_min_pause_between_checkpoints_update, json[QString("MinPauseBetweenCheckpointsUpdate")]);
    m_min_pause_between_checkpoints_update_isSet = !json[QString("MinPauseBetweenCheckpointsUpdate")].isNull() && m_min_pause_between_checkpoints_update_isValid;
}

QString OAICheckpointConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckpointConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_type_update.isSet()) {
        obj.insert(QString("ConfigurationTypeUpdate"), ::OpenAPI::toJsonValue(m_configuration_type_update));
    }
    if (m_checkpointing_enabled_update_isSet) {
        obj.insert(QString("CheckpointingEnabledUpdate"), ::OpenAPI::toJsonValue(m_checkpointing_enabled_update));
    }
    if (m_checkpoint_interval_update_isSet) {
        obj.insert(QString("CheckpointIntervalUpdate"), ::OpenAPI::toJsonValue(m_checkpoint_interval_update));
    }
    if (m_min_pause_between_checkpoints_update_isSet) {
        obj.insert(QString("MinPauseBetweenCheckpointsUpdate"), ::OpenAPI::toJsonValue(m_min_pause_between_checkpoints_update));
    }
    return obj;
}

OAIConfigurationType OAICheckpointConfigurationUpdate::getConfigurationTypeUpdate() const {
    return m_configuration_type_update;
}
void OAICheckpointConfigurationUpdate::setConfigurationTypeUpdate(const OAIConfigurationType &configuration_type_update) {
    m_configuration_type_update = configuration_type_update;
    m_configuration_type_update_isSet = true;
}

bool OAICheckpointConfigurationUpdate::is_configuration_type_update_Set() const{
    return m_configuration_type_update_isSet;
}

bool OAICheckpointConfigurationUpdate::is_configuration_type_update_Valid() const{
    return m_configuration_type_update_isValid;
}

bool OAICheckpointConfigurationUpdate::getCheckpointingEnabledUpdate() const {
    return m_checkpointing_enabled_update;
}
void OAICheckpointConfigurationUpdate::setCheckpointingEnabledUpdate(const bool &checkpointing_enabled_update) {
    m_checkpointing_enabled_update = checkpointing_enabled_update;
    m_checkpointing_enabled_update_isSet = true;
}

bool OAICheckpointConfigurationUpdate::is_checkpointing_enabled_update_Set() const{
    return m_checkpointing_enabled_update_isSet;
}

bool OAICheckpointConfigurationUpdate::is_checkpointing_enabled_update_Valid() const{
    return m_checkpointing_enabled_update_isValid;
}

qint32 OAICheckpointConfigurationUpdate::getCheckpointIntervalUpdate() const {
    return m_checkpoint_interval_update;
}
void OAICheckpointConfigurationUpdate::setCheckpointIntervalUpdate(const qint32 &checkpoint_interval_update) {
    m_checkpoint_interval_update = checkpoint_interval_update;
    m_checkpoint_interval_update_isSet = true;
}

bool OAICheckpointConfigurationUpdate::is_checkpoint_interval_update_Set() const{
    return m_checkpoint_interval_update_isSet;
}

bool OAICheckpointConfigurationUpdate::is_checkpoint_interval_update_Valid() const{
    return m_checkpoint_interval_update_isValid;
}

qint32 OAICheckpointConfigurationUpdate::getMinPauseBetweenCheckpointsUpdate() const {
    return m_min_pause_between_checkpoints_update;
}
void OAICheckpointConfigurationUpdate::setMinPauseBetweenCheckpointsUpdate(const qint32 &min_pause_between_checkpoints_update) {
    m_min_pause_between_checkpoints_update = min_pause_between_checkpoints_update;
    m_min_pause_between_checkpoints_update_isSet = true;
}

bool OAICheckpointConfigurationUpdate::is_min_pause_between_checkpoints_update_Set() const{
    return m_min_pause_between_checkpoints_update_isSet;
}

bool OAICheckpointConfigurationUpdate::is_min_pause_between_checkpoints_update_Valid() const{
    return m_min_pause_between_checkpoints_update_isValid;
}

bool OAICheckpointConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_type_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpointing_enabled_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_interval_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_pause_between_checkpoints_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckpointConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
