/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationInputProcessingConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationInputProcessingConfigurationRequest::OAIAddApplicationInputProcessingConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationInputProcessingConfigurationRequest::OAIAddApplicationInputProcessingConfigurationRequest() {
    this->initializeModel();
}

OAIAddApplicationInputProcessingConfigurationRequest::~OAIAddApplicationInputProcessingConfigurationRequest() {}

void OAIAddApplicationInputProcessingConfigurationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_input_id_isSet = false;
    m_input_id_isValid = false;

    m_input_processing_configuration_isSet = false;
    m_input_processing_configuration_isValid = false;
}

void OAIAddApplicationInputProcessingConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationInputProcessingConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_input_id_isValid = ::OpenAPI::fromJsonValue(m_input_id, json[QString("InputId")]);
    m_input_id_isSet = !json[QString("InputId")].isNull() && m_input_id_isValid;

    m_input_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_input_processing_configuration, json[QString("InputProcessingConfiguration")]);
    m_input_processing_configuration_isSet = !json[QString("InputProcessingConfiguration")].isNull() && m_input_processing_configuration_isValid;
}

QString OAIAddApplicationInputProcessingConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationInputProcessingConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_input_id_isSet) {
        obj.insert(QString("InputId"), ::OpenAPI::toJsonValue(m_input_id));
    }
    if (m_input_processing_configuration.isSet()) {
        obj.insert(QString("InputProcessingConfiguration"), ::OpenAPI::toJsonValue(m_input_processing_configuration));
    }
    return obj;
}

QString OAIAddApplicationInputProcessingConfigurationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIAddApplicationInputProcessingConfigurationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIAddApplicationInputProcessingConfigurationRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIAddApplicationInputProcessingConfigurationRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

QString OAIAddApplicationInputProcessingConfigurationRequest::getInputId() const {
    return m_input_id;
}
void OAIAddApplicationInputProcessingConfigurationRequest::setInputId(const QString &input_id) {
    m_input_id = input_id;
    m_input_id_isSet = true;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_input_id_Set() const{
    return m_input_id_isSet;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_input_id_Valid() const{
    return m_input_id_isValid;
}

OAIAddApplicationInputProcessingConfigurationRequest_InputProcessingConfiguration OAIAddApplicationInputProcessingConfigurationRequest::getInputProcessingConfiguration() const {
    return m_input_processing_configuration;
}
void OAIAddApplicationInputProcessingConfigurationRequest::setInputProcessingConfiguration(const OAIAddApplicationInputProcessingConfigurationRequest_InputProcessingConfiguration &input_processing_configuration) {
    m_input_processing_configuration = input_processing_configuration;
    m_input_processing_configuration_isSet = true;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_input_processing_configuration_Set() const{
    return m_input_processing_configuration_isSet;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::is_input_processing_configuration_Valid() const{
    return m_input_processing_configuration_isValid;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationInputProcessingConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_current_application_version_id_isValid && m_input_id_isValid && m_input_processing_configuration_isValid && true;
}

} // namespace OpenAPI
