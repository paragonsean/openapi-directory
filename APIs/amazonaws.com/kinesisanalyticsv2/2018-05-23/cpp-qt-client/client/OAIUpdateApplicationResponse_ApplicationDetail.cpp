/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationResponse_ApplicationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationResponse_ApplicationDetail::OAIUpdateApplicationResponse_ApplicationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationResponse_ApplicationDetail::OAIUpdateApplicationResponse_ApplicationDetail() {
    this->initializeModel();
}

OAIUpdateApplicationResponse_ApplicationDetail::~OAIUpdateApplicationResponse_ApplicationDetail() {}

void OAIUpdateApplicationResponse_ApplicationDetail::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_description_isSet = false;
    m_application_description_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_runtime_environment_isSet = false;
    m_runtime_environment_isValid = false;

    m_service_execution_role_isSet = false;
    m_service_execution_role_isValid = false;

    m_application_status_isSet = false;
    m_application_status_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_create_timestamp_isSet = false;
    m_create_timestamp_isValid = false;

    m_last_update_timestamp_isSet = false;
    m_last_update_timestamp_isValid = false;

    m_application_configuration_description_isSet = false;
    m_application_configuration_description_isValid = false;

    m_cloud_watch_logging_option_descriptions_isSet = false;
    m_cloud_watch_logging_option_descriptions_isValid = false;

    m_application_maintenance_configuration_description_isSet = false;
    m_application_maintenance_configuration_description_isValid = false;

    m_application_version_updated_from_isSet = false;
    m_application_version_updated_from_isValid = false;

    m_application_version_rolled_back_from_isSet = false;
    m_application_version_rolled_back_from_isValid = false;

    m_conditional_token_isSet = false;
    m_conditional_token_isValid = false;

    m_application_version_rolled_back_to_isSet = false;
    m_application_version_rolled_back_to_isValid = false;

    m_application_mode_isSet = false;
    m_application_mode_isValid = false;
}

void OAIUpdateApplicationResponse_ApplicationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationResponse_ApplicationDetail::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_description_isValid = ::OpenAPI::fromJsonValue(m_application_description, json[QString("ApplicationDescription")]);
    m_application_description_isSet = !json[QString("ApplicationDescription")].isNull() && m_application_description_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_runtime_environment_isValid = ::OpenAPI::fromJsonValue(m_runtime_environment, json[QString("RuntimeEnvironment")]);
    m_runtime_environment_isSet = !json[QString("RuntimeEnvironment")].isNull() && m_runtime_environment_isValid;

    m_service_execution_role_isValid = ::OpenAPI::fromJsonValue(m_service_execution_role, json[QString("ServiceExecutionRole")]);
    m_service_execution_role_isSet = !json[QString("ServiceExecutionRole")].isNull() && m_service_execution_role_isValid;

    m_application_status_isValid = ::OpenAPI::fromJsonValue(m_application_status, json[QString("ApplicationStatus")]);
    m_application_status_isSet = !json[QString("ApplicationStatus")].isNull() && m_application_status_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_create_timestamp_isValid = ::OpenAPI::fromJsonValue(m_create_timestamp, json[QString("CreateTimestamp")]);
    m_create_timestamp_isSet = !json[QString("CreateTimestamp")].isNull() && m_create_timestamp_isValid;

    m_last_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_update_timestamp, json[QString("LastUpdateTimestamp")]);
    m_last_update_timestamp_isSet = !json[QString("LastUpdateTimestamp")].isNull() && m_last_update_timestamp_isValid;

    m_application_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_application_configuration_description, json[QString("ApplicationConfigurationDescription")]);
    m_application_configuration_description_isSet = !json[QString("ApplicationConfigurationDescription")].isNull() && m_application_configuration_description_isValid;

    m_cloud_watch_logging_option_descriptions_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_descriptions, json[QString("CloudWatchLoggingOptionDescriptions")]);
    m_cloud_watch_logging_option_descriptions_isSet = !json[QString("CloudWatchLoggingOptionDescriptions")].isNull() && m_cloud_watch_logging_option_descriptions_isValid;

    m_application_maintenance_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_application_maintenance_configuration_description, json[QString("ApplicationMaintenanceConfigurationDescription")]);
    m_application_maintenance_configuration_description_isSet = !json[QString("ApplicationMaintenanceConfigurationDescription")].isNull() && m_application_maintenance_configuration_description_isValid;

    m_application_version_updated_from_isValid = ::OpenAPI::fromJsonValue(m_application_version_updated_from, json[QString("ApplicationVersionUpdatedFrom")]);
    m_application_version_updated_from_isSet = !json[QString("ApplicationVersionUpdatedFrom")].isNull() && m_application_version_updated_from_isValid;

    m_application_version_rolled_back_from_isValid = ::OpenAPI::fromJsonValue(m_application_version_rolled_back_from, json[QString("ApplicationVersionRolledBackFrom")]);
    m_application_version_rolled_back_from_isSet = !json[QString("ApplicationVersionRolledBackFrom")].isNull() && m_application_version_rolled_back_from_isValid;

    m_conditional_token_isValid = ::OpenAPI::fromJsonValue(m_conditional_token, json[QString("ConditionalToken")]);
    m_conditional_token_isSet = !json[QString("ConditionalToken")].isNull() && m_conditional_token_isValid;

    m_application_version_rolled_back_to_isValid = ::OpenAPI::fromJsonValue(m_application_version_rolled_back_to, json[QString("ApplicationVersionRolledBackTo")]);
    m_application_version_rolled_back_to_isSet = !json[QString("ApplicationVersionRolledBackTo")].isNull() && m_application_version_rolled_back_to_isValid;

    m_application_mode_isValid = ::OpenAPI::fromJsonValue(m_application_mode, json[QString("ApplicationMode")]);
    m_application_mode_isSet = !json[QString("ApplicationMode")].isNull() && m_application_mode_isValid;
}

QString OAIUpdateApplicationResponse_ApplicationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationResponse_ApplicationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_description_isSet) {
        obj.insert(QString("ApplicationDescription"), ::OpenAPI::toJsonValue(m_application_description));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_runtime_environment.isSet()) {
        obj.insert(QString("RuntimeEnvironment"), ::OpenAPI::toJsonValue(m_runtime_environment));
    }
    if (m_service_execution_role_isSet) {
        obj.insert(QString("ServiceExecutionRole"), ::OpenAPI::toJsonValue(m_service_execution_role));
    }
    if (m_application_status.isSet()) {
        obj.insert(QString("ApplicationStatus"), ::OpenAPI::toJsonValue(m_application_status));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_create_timestamp_isSet) {
        obj.insert(QString("CreateTimestamp"), ::OpenAPI::toJsonValue(m_create_timestamp));
    }
    if (m_last_update_timestamp_isSet) {
        obj.insert(QString("LastUpdateTimestamp"), ::OpenAPI::toJsonValue(m_last_update_timestamp));
    }
    if (m_application_configuration_description.isSet()) {
        obj.insert(QString("ApplicationConfigurationDescription"), ::OpenAPI::toJsonValue(m_application_configuration_description));
    }
    if (m_cloud_watch_logging_option_descriptions.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptionDescriptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_descriptions));
    }
    if (m_application_maintenance_configuration_description.isSet()) {
        obj.insert(QString("ApplicationMaintenanceConfigurationDescription"), ::OpenAPI::toJsonValue(m_application_maintenance_configuration_description));
    }
    if (m_application_version_updated_from_isSet) {
        obj.insert(QString("ApplicationVersionUpdatedFrom"), ::OpenAPI::toJsonValue(m_application_version_updated_from));
    }
    if (m_application_version_rolled_back_from_isSet) {
        obj.insert(QString("ApplicationVersionRolledBackFrom"), ::OpenAPI::toJsonValue(m_application_version_rolled_back_from));
    }
    if (m_conditional_token_isSet) {
        obj.insert(QString("ConditionalToken"), ::OpenAPI::toJsonValue(m_conditional_token));
    }
    if (m_application_version_rolled_back_to_isSet) {
        obj.insert(QString("ApplicationVersionRolledBackTo"), ::OpenAPI::toJsonValue(m_application_version_rolled_back_to));
    }
    if (m_application_mode.isSet()) {
        obj.insert(QString("ApplicationMode"), ::OpenAPI::toJsonValue(m_application_mode));
    }
    return obj;
}

QString OAIUpdateApplicationResponse_ApplicationDetail::getApplicationArn() const {
    return m_application_arn;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

QString OAIUpdateApplicationResponse_ApplicationDetail::getApplicationDescription() const {
    return m_application_description;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationDescription(const QString &application_description) {
    m_application_description = application_description;
    m_application_description_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_description_Set() const{
    return m_application_description_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_description_Valid() const{
    return m_application_description_isValid;
}

QString OAIUpdateApplicationResponse_ApplicationDetail::getApplicationName() const {
    return m_application_name;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_name_Valid() const{
    return m_application_name_isValid;
}

OAIRuntimeEnvironment OAIUpdateApplicationResponse_ApplicationDetail::getRuntimeEnvironment() const {
    return m_runtime_environment;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setRuntimeEnvironment(const OAIRuntimeEnvironment &runtime_environment) {
    m_runtime_environment = runtime_environment;
    m_runtime_environment_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_runtime_environment_Set() const{
    return m_runtime_environment_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_runtime_environment_Valid() const{
    return m_runtime_environment_isValid;
}

QString OAIUpdateApplicationResponse_ApplicationDetail::getServiceExecutionRole() const {
    return m_service_execution_role;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setServiceExecutionRole(const QString &service_execution_role) {
    m_service_execution_role = service_execution_role;
    m_service_execution_role_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_service_execution_role_Set() const{
    return m_service_execution_role_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_service_execution_role_Valid() const{
    return m_service_execution_role_isValid;
}

OAIApplicationStatus OAIUpdateApplicationResponse_ApplicationDetail::getApplicationStatus() const {
    return m_application_status;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationStatus(const OAIApplicationStatus &application_status) {
    m_application_status = application_status;
    m_application_status_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_status_Set() const{
    return m_application_status_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_status_Valid() const{
    return m_application_status_isValid;
}

qint32 OAIUpdateApplicationResponse_ApplicationDetail::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

QDateTime OAIUpdateApplicationResponse_ApplicationDetail::getCreateTimestamp() const {
    return m_create_timestamp;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setCreateTimestamp(const QDateTime &create_timestamp) {
    m_create_timestamp = create_timestamp;
    m_create_timestamp_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_create_timestamp_Set() const{
    return m_create_timestamp_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_create_timestamp_Valid() const{
    return m_create_timestamp_isValid;
}

QDateTime OAIUpdateApplicationResponse_ApplicationDetail::getLastUpdateTimestamp() const {
    return m_last_update_timestamp;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setLastUpdateTimestamp(const QDateTime &last_update_timestamp) {
    m_last_update_timestamp = last_update_timestamp;
    m_last_update_timestamp_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_last_update_timestamp_Set() const{
    return m_last_update_timestamp_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_last_update_timestamp_Valid() const{
    return m_last_update_timestamp_isValid;
}

OAIApplicationDetail_ApplicationConfigurationDescription OAIUpdateApplicationResponse_ApplicationDetail::getApplicationConfigurationDescription() const {
    return m_application_configuration_description;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationConfigurationDescription(const OAIApplicationDetail_ApplicationConfigurationDescription &application_configuration_description) {
    m_application_configuration_description = application_configuration_description;
    m_application_configuration_description_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_configuration_description_Set() const{
    return m_application_configuration_description_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_configuration_description_Valid() const{
    return m_application_configuration_description_isValid;
}

QList OAIUpdateApplicationResponse_ApplicationDetail::getCloudWatchLoggingOptionDescriptions() const {
    return m_cloud_watch_logging_option_descriptions;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setCloudWatchLoggingOptionDescriptions(const QList &cloud_watch_logging_option_descriptions) {
    m_cloud_watch_logging_option_descriptions = cloud_watch_logging_option_descriptions;
    m_cloud_watch_logging_option_descriptions_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_cloud_watch_logging_option_descriptions_Set() const{
    return m_cloud_watch_logging_option_descriptions_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_cloud_watch_logging_option_descriptions_Valid() const{
    return m_cloud_watch_logging_option_descriptions_isValid;
}

OAIApplicationDetail_ApplicationMaintenanceConfigurationDescription OAIUpdateApplicationResponse_ApplicationDetail::getApplicationMaintenanceConfigurationDescription() const {
    return m_application_maintenance_configuration_description;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationMaintenanceConfigurationDescription(const OAIApplicationDetail_ApplicationMaintenanceConfigurationDescription &application_maintenance_configuration_description) {
    m_application_maintenance_configuration_description = application_maintenance_configuration_description;
    m_application_maintenance_configuration_description_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_maintenance_configuration_description_Set() const{
    return m_application_maintenance_configuration_description_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_maintenance_configuration_description_Valid() const{
    return m_application_maintenance_configuration_description_isValid;
}

qint32 OAIUpdateApplicationResponse_ApplicationDetail::getApplicationVersionUpdatedFrom() const {
    return m_application_version_updated_from;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationVersionUpdatedFrom(const qint32 &application_version_updated_from) {
    m_application_version_updated_from = application_version_updated_from;
    m_application_version_updated_from_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_updated_from_Set() const{
    return m_application_version_updated_from_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_updated_from_Valid() const{
    return m_application_version_updated_from_isValid;
}

qint32 OAIUpdateApplicationResponse_ApplicationDetail::getApplicationVersionRolledBackFrom() const {
    return m_application_version_rolled_back_from;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationVersionRolledBackFrom(const qint32 &application_version_rolled_back_from) {
    m_application_version_rolled_back_from = application_version_rolled_back_from;
    m_application_version_rolled_back_from_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_rolled_back_from_Set() const{
    return m_application_version_rolled_back_from_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_rolled_back_from_Valid() const{
    return m_application_version_rolled_back_from_isValid;
}

QString OAIUpdateApplicationResponse_ApplicationDetail::getConditionalToken() const {
    return m_conditional_token;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setConditionalToken(const QString &conditional_token) {
    m_conditional_token = conditional_token;
    m_conditional_token_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_conditional_token_Set() const{
    return m_conditional_token_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_conditional_token_Valid() const{
    return m_conditional_token_isValid;
}

qint32 OAIUpdateApplicationResponse_ApplicationDetail::getApplicationVersionRolledBackTo() const {
    return m_application_version_rolled_back_to;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationVersionRolledBackTo(const qint32 &application_version_rolled_back_to) {
    m_application_version_rolled_back_to = application_version_rolled_back_to;
    m_application_version_rolled_back_to_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_rolled_back_to_Set() const{
    return m_application_version_rolled_back_to_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_version_rolled_back_to_Valid() const{
    return m_application_version_rolled_back_to_isValid;
}

OAIApplicationMode OAIUpdateApplicationResponse_ApplicationDetail::getApplicationMode() const {
    return m_application_mode;
}
void OAIUpdateApplicationResponse_ApplicationDetail::setApplicationMode(const OAIApplicationMode &application_mode) {
    m_application_mode = application_mode;
    m_application_mode_isSet = true;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_mode_Set() const{
    return m_application_mode_isSet;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::is_application_mode_Valid() const{
    return m_application_mode_isValid;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_execution_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_option_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_maintenance_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_updated_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_rolled_back_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_rolled_back_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationResponse_ApplicationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_arn_isValid && m_application_name_isValid && m_runtime_environment_isValid && m_application_status_isValid && m_application_version_id_isValid && true;
}

} // namespace OpenAPI
