/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputProcessingConfiguration_InputLambdaProcessor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputProcessingConfiguration_InputLambdaProcessor::OAIInputProcessingConfiguration_InputLambdaProcessor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputProcessingConfiguration_InputLambdaProcessor::OAIInputProcessingConfiguration_InputLambdaProcessor() {
    this->initializeModel();
}

OAIInputProcessingConfiguration_InputLambdaProcessor::~OAIInputProcessingConfiguration_InputLambdaProcessor() {}

void OAIInputProcessingConfiguration_InputLambdaProcessor::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIInputProcessingConfiguration_InputLambdaProcessor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputProcessingConfiguration_InputLambdaProcessor::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;
}

QString OAIInputProcessingConfiguration_InputLambdaProcessor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputProcessingConfiguration_InputLambdaProcessor::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIInputProcessingConfiguration_InputLambdaProcessor::getResourceArn() const {
    return m_resource_arn;
}
void OAIInputProcessingConfiguration_InputLambdaProcessor::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIInputProcessingConfiguration_InputLambdaProcessor::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIInputProcessingConfiguration_InputLambdaProcessor::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIInputProcessingConfiguration_InputLambdaProcessor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputProcessingConfiguration_InputLambdaProcessor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
