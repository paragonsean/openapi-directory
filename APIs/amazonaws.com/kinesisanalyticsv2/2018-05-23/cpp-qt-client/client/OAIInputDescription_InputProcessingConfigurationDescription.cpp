/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDescription_InputProcessingConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDescription_InputProcessingConfigurationDescription::OAIInputDescription_InputProcessingConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDescription_InputProcessingConfigurationDescription::OAIInputDescription_InputProcessingConfigurationDescription() {
    this->initializeModel();
}

OAIInputDescription_InputProcessingConfigurationDescription::~OAIInputDescription_InputProcessingConfigurationDescription() {}

void OAIInputDescription_InputProcessingConfigurationDescription::initializeModel() {

    m_input_lambda_processor_description_isSet = false;
    m_input_lambda_processor_description_isValid = false;
}

void OAIInputDescription_InputProcessingConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDescription_InputProcessingConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_input_lambda_processor_description_isValid = ::OpenAPI::fromJsonValue(m_input_lambda_processor_description, json[QString("InputLambdaProcessorDescription")]);
    m_input_lambda_processor_description_isSet = !json[QString("InputLambdaProcessorDescription")].isNull() && m_input_lambda_processor_description_isValid;
}

QString OAIInputDescription_InputProcessingConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDescription_InputProcessingConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_input_lambda_processor_description.isSet()) {
        obj.insert(QString("InputLambdaProcessorDescription"), ::OpenAPI::toJsonValue(m_input_lambda_processor_description));
    }
    return obj;
}

OAIInputProcessingConfigurationDescription_InputLambdaProcessorDescription OAIInputDescription_InputProcessingConfigurationDescription::getInputLambdaProcessorDescription() const {
    return m_input_lambda_processor_description;
}
void OAIInputDescription_InputProcessingConfigurationDescription::setInputLambdaProcessorDescription(const OAIInputProcessingConfigurationDescription_InputLambdaProcessorDescription &input_lambda_processor_description) {
    m_input_lambda_processor_description = input_lambda_processor_description;
    m_input_lambda_processor_description_isSet = true;
}

bool OAIInputDescription_InputProcessingConfigurationDescription::is_input_lambda_processor_description_Set() const{
    return m_input_lambda_processor_description_isSet;
}

bool OAIInputDescription_InputProcessingConfigurationDescription::is_input_lambda_processor_description_Valid() const{
    return m_input_lambda_processor_description_isValid;
}

bool OAIInputDescription_InputProcessingConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_lambda_processor_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDescription_InputProcessingConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
