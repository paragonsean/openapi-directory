/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription() {
    this->initializeModel();
}

OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::~OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription() {}

void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::initializeModel() {

    m_configuration_type_isSet = false;
    m_configuration_type_isValid = false;

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_parallelism_per_kpu_isSet = false;
    m_parallelism_per_kpu_isValid = false;

    m_current_parallelism_isSet = false;
    m_current_parallelism_isValid = false;

    m_auto_scaling_enabled_isSet = false;
    m_auto_scaling_enabled_isValid = false;
}

void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_configuration_type_isValid = ::OpenAPI::fromJsonValue(m_configuration_type, json[QString("ConfigurationType")]);
    m_configuration_type_isSet = !json[QString("ConfigurationType")].isNull() && m_configuration_type_isValid;

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("Parallelism")]);
    m_parallelism_isSet = !json[QString("Parallelism")].isNull() && m_parallelism_isValid;

    m_parallelism_per_kpu_isValid = ::OpenAPI::fromJsonValue(m_parallelism_per_kpu, json[QString("ParallelismPerKPU")]);
    m_parallelism_per_kpu_isSet = !json[QString("ParallelismPerKPU")].isNull() && m_parallelism_per_kpu_isValid;

    m_current_parallelism_isValid = ::OpenAPI::fromJsonValue(m_current_parallelism, json[QString("CurrentParallelism")]);
    m_current_parallelism_isSet = !json[QString("CurrentParallelism")].isNull() && m_current_parallelism_isValid;

    m_auto_scaling_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_enabled, json[QString("AutoScalingEnabled")]);
    m_auto_scaling_enabled_isSet = !json[QString("AutoScalingEnabled")].isNull() && m_auto_scaling_enabled_isValid;
}

QString OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_type.isSet()) {
        obj.insert(QString("ConfigurationType"), ::OpenAPI::toJsonValue(m_configuration_type));
    }
    if (m_parallelism_isSet) {
        obj.insert(QString("Parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_parallelism_per_kpu_isSet) {
        obj.insert(QString("ParallelismPerKPU"), ::OpenAPI::toJsonValue(m_parallelism_per_kpu));
    }
    if (m_current_parallelism_isSet) {
        obj.insert(QString("CurrentParallelism"), ::OpenAPI::toJsonValue(m_current_parallelism));
    }
    if (m_auto_scaling_enabled_isSet) {
        obj.insert(QString("AutoScalingEnabled"), ::OpenAPI::toJsonValue(m_auto_scaling_enabled));
    }
    return obj;
}

OAIConfigurationType OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::getConfigurationType() const {
    return m_configuration_type;
}
void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::setConfigurationType(const OAIConfigurationType &configuration_type) {
    m_configuration_type = configuration_type;
    m_configuration_type_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_configuration_type_Set() const{
    return m_configuration_type_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_configuration_type_Valid() const{
    return m_configuration_type_isValid;
}

qint32 OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::getParallelism() const {
    return m_parallelism;
}
void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::setParallelism(const qint32 &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

qint32 OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::getParallelismPerKpu() const {
    return m_parallelism_per_kpu;
}
void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::setParallelismPerKpu(const qint32 &parallelism_per_kpu) {
    m_parallelism_per_kpu = parallelism_per_kpu;
    m_parallelism_per_kpu_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_parallelism_per_kpu_Set() const{
    return m_parallelism_per_kpu_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_parallelism_per_kpu_Valid() const{
    return m_parallelism_per_kpu_isValid;
}

qint32 OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::getCurrentParallelism() const {
    return m_current_parallelism;
}
void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::setCurrentParallelism(const qint32 &current_parallelism) {
    m_current_parallelism = current_parallelism;
    m_current_parallelism_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_current_parallelism_Set() const{
    return m_current_parallelism_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_current_parallelism_Valid() const{
    return m_current_parallelism_isValid;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::getAutoScalingEnabled() const {
    return m_auto_scaling_enabled;
}
void OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::setAutoScalingEnabled(const bool &auto_scaling_enabled) {
    m_auto_scaling_enabled = auto_scaling_enabled;
    m_auto_scaling_enabled_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_auto_scaling_enabled_Set() const{
    return m_auto_scaling_enabled_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::is_auto_scaling_enabled_Valid() const{
    return m_auto_scaling_enabled_isValid;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_per_kpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlinkApplicationConfigurationDescription_ParallelismConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
