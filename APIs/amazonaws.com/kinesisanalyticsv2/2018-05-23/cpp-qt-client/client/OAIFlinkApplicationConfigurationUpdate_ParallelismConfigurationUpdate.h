/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate.h
 *
 * 
 */

#ifndef OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate_H
#define OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate_H

#include <QJsonObject>

#include "OAIConfigurationType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate : public OAIObject {
public:
    OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate();
    OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate(QString json);
    ~OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigurationType getConfigurationTypeUpdate() const;
    void setConfigurationTypeUpdate(const OAIConfigurationType &configuration_type_update);
    bool is_configuration_type_update_Set() const;
    bool is_configuration_type_update_Valid() const;

    qint32 getParallelismUpdate() const;
    void setParallelismUpdate(const qint32 &parallelism_update);
    bool is_parallelism_update_Set() const;
    bool is_parallelism_update_Valid() const;

    qint32 getParallelismPerKpuUpdate() const;
    void setParallelismPerKpuUpdate(const qint32 &parallelism_per_kpu_update);
    bool is_parallelism_per_kpu_update_Set() const;
    bool is_parallelism_per_kpu_update_Valid() const;

    bool getAutoScalingEnabledUpdate() const;
    void setAutoScalingEnabledUpdate(const bool &auto_scaling_enabled_update);
    bool is_auto_scaling_enabled_update_Set() const;
    bool is_auto_scaling_enabled_update_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConfigurationType m_configuration_type_update;
    bool m_configuration_type_update_isSet;
    bool m_configuration_type_update_isValid;

    qint32 m_parallelism_update;
    bool m_parallelism_update_isSet;
    bool m_parallelism_update_isValid;

    qint32 m_parallelism_per_kpu_update;
    bool m_parallelism_per_kpu_update_isSet;
    bool m_parallelism_per_kpu_update_isValid;

    bool m_auto_scaling_enabled_update;
    bool m_auto_scaling_enabled_update_isSet;
    bool m_auto_scaling_enabled_update_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate)

#endif // OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate_H
