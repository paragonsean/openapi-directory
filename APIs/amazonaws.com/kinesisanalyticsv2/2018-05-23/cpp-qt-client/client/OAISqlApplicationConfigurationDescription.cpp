/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlApplicationConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlApplicationConfigurationDescription::OAISqlApplicationConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlApplicationConfigurationDescription::OAISqlApplicationConfigurationDescription() {
    this->initializeModel();
}

OAISqlApplicationConfigurationDescription::~OAISqlApplicationConfigurationDescription() {}

void OAISqlApplicationConfigurationDescription::initializeModel() {

    m_input_descriptions_isSet = false;
    m_input_descriptions_isValid = false;

    m_output_descriptions_isSet = false;
    m_output_descriptions_isValid = false;

    m_reference_data_source_descriptions_isSet = false;
    m_reference_data_source_descriptions_isValid = false;
}

void OAISqlApplicationConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlApplicationConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_input_descriptions_isValid = ::OpenAPI::fromJsonValue(m_input_descriptions, json[QString("InputDescriptions")]);
    m_input_descriptions_isSet = !json[QString("InputDescriptions")].isNull() && m_input_descriptions_isValid;

    m_output_descriptions_isValid = ::OpenAPI::fromJsonValue(m_output_descriptions, json[QString("OutputDescriptions")]);
    m_output_descriptions_isSet = !json[QString("OutputDescriptions")].isNull() && m_output_descriptions_isValid;

    m_reference_data_source_descriptions_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source_descriptions, json[QString("ReferenceDataSourceDescriptions")]);
    m_reference_data_source_descriptions_isSet = !json[QString("ReferenceDataSourceDescriptions")].isNull() && m_reference_data_source_descriptions_isValid;
}

QString OAISqlApplicationConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlApplicationConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_input_descriptions.isSet()) {
        obj.insert(QString("InputDescriptions"), ::OpenAPI::toJsonValue(m_input_descriptions));
    }
    if (m_output_descriptions.isSet()) {
        obj.insert(QString("OutputDescriptions"), ::OpenAPI::toJsonValue(m_output_descriptions));
    }
    if (m_reference_data_source_descriptions.isSet()) {
        obj.insert(QString("ReferenceDataSourceDescriptions"), ::OpenAPI::toJsonValue(m_reference_data_source_descriptions));
    }
    return obj;
}

QList OAISqlApplicationConfigurationDescription::getInputDescriptions() const {
    return m_input_descriptions;
}
void OAISqlApplicationConfigurationDescription::setInputDescriptions(const QList &input_descriptions) {
    m_input_descriptions = input_descriptions;
    m_input_descriptions_isSet = true;
}

bool OAISqlApplicationConfigurationDescription::is_input_descriptions_Set() const{
    return m_input_descriptions_isSet;
}

bool OAISqlApplicationConfigurationDescription::is_input_descriptions_Valid() const{
    return m_input_descriptions_isValid;
}

QList OAISqlApplicationConfigurationDescription::getOutputDescriptions() const {
    return m_output_descriptions;
}
void OAISqlApplicationConfigurationDescription::setOutputDescriptions(const QList &output_descriptions) {
    m_output_descriptions = output_descriptions;
    m_output_descriptions_isSet = true;
}

bool OAISqlApplicationConfigurationDescription::is_output_descriptions_Set() const{
    return m_output_descriptions_isSet;
}

bool OAISqlApplicationConfigurationDescription::is_output_descriptions_Valid() const{
    return m_output_descriptions_isValid;
}

QList OAISqlApplicationConfigurationDescription::getReferenceDataSourceDescriptions() const {
    return m_reference_data_source_descriptions;
}
void OAISqlApplicationConfigurationDescription::setReferenceDataSourceDescriptions(const QList &reference_data_source_descriptions) {
    m_reference_data_source_descriptions = reference_data_source_descriptions;
    m_reference_data_source_descriptions_isSet = true;
}

bool OAISqlApplicationConfigurationDescription::is_reference_data_source_descriptions_Set() const{
    return m_reference_data_source_descriptions_isSet;
}

bool OAISqlApplicationConfigurationDescription::is_reference_data_source_descriptions_Valid() const{
    return m_reference_data_source_descriptions_isValid;
}

bool OAISqlApplicationConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlApplicationConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
