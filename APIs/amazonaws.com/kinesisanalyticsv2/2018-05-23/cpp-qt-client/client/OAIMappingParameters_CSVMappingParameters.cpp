/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingParameters_CSVMappingParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingParameters_CSVMappingParameters::OAIMappingParameters_CSVMappingParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingParameters_CSVMappingParameters::OAIMappingParameters_CSVMappingParameters() {
    this->initializeModel();
}

OAIMappingParameters_CSVMappingParameters::~OAIMappingParameters_CSVMappingParameters() {}

void OAIMappingParameters_CSVMappingParameters::initializeModel() {

    m_record_row_delimiter_isSet = false;
    m_record_row_delimiter_isValid = false;

    m_record_column_delimiter_isSet = false;
    m_record_column_delimiter_isValid = false;
}

void OAIMappingParameters_CSVMappingParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingParameters_CSVMappingParameters::fromJsonObject(QJsonObject json) {

    m_record_row_delimiter_isValid = ::OpenAPI::fromJsonValue(m_record_row_delimiter, json[QString("RecordRowDelimiter")]);
    m_record_row_delimiter_isSet = !json[QString("RecordRowDelimiter")].isNull() && m_record_row_delimiter_isValid;

    m_record_column_delimiter_isValid = ::OpenAPI::fromJsonValue(m_record_column_delimiter, json[QString("RecordColumnDelimiter")]);
    m_record_column_delimiter_isSet = !json[QString("RecordColumnDelimiter")].isNull() && m_record_column_delimiter_isValid;
}

QString OAIMappingParameters_CSVMappingParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingParameters_CSVMappingParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_record_row_delimiter_isSet) {
        obj.insert(QString("RecordRowDelimiter"), ::OpenAPI::toJsonValue(m_record_row_delimiter));
    }
    if (m_record_column_delimiter_isSet) {
        obj.insert(QString("RecordColumnDelimiter"), ::OpenAPI::toJsonValue(m_record_column_delimiter));
    }
    return obj;
}

QString OAIMappingParameters_CSVMappingParameters::getRecordRowDelimiter() const {
    return m_record_row_delimiter;
}
void OAIMappingParameters_CSVMappingParameters::setRecordRowDelimiter(const QString &record_row_delimiter) {
    m_record_row_delimiter = record_row_delimiter;
    m_record_row_delimiter_isSet = true;
}

bool OAIMappingParameters_CSVMappingParameters::is_record_row_delimiter_Set() const{
    return m_record_row_delimiter_isSet;
}

bool OAIMappingParameters_CSVMappingParameters::is_record_row_delimiter_Valid() const{
    return m_record_row_delimiter_isValid;
}

QString OAIMappingParameters_CSVMappingParameters::getRecordColumnDelimiter() const {
    return m_record_column_delimiter;
}
void OAIMappingParameters_CSVMappingParameters::setRecordColumnDelimiter(const QString &record_column_delimiter) {
    m_record_column_delimiter = record_column_delimiter;
    m_record_column_delimiter_isSet = true;
}

bool OAIMappingParameters_CSVMappingParameters::is_record_column_delimiter_Set() const{
    return m_record_column_delimiter_isSet;
}

bool OAIMappingParameters_CSVMappingParameters::is_record_column_delimiter_Valid() const{
    return m_record_column_delimiter_isValid;
}

bool OAIMappingParameters_CSVMappingParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_row_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_column_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingParameters_CSVMappingParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_row_delimiter_isValid && m_record_column_delimiter_isValid && true;
}

} // namespace OpenAPI
