/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZeppelinApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZeppelinApplicationConfigurationUpdate::OAIZeppelinApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZeppelinApplicationConfigurationUpdate::OAIZeppelinApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIZeppelinApplicationConfigurationUpdate::~OAIZeppelinApplicationConfigurationUpdate() {}

void OAIZeppelinApplicationConfigurationUpdate::initializeModel() {

    m_monitoring_configuration_update_isSet = false;
    m_monitoring_configuration_update_isValid = false;

    m_catalog_configuration_update_isSet = false;
    m_catalog_configuration_update_isValid = false;

    m_deploy_as_application_configuration_update_isSet = false;
    m_deploy_as_application_configuration_update_isValid = false;

    m_custom_artifacts_configuration_update_isSet = false;
    m_custom_artifacts_configuration_update_isValid = false;
}

void OAIZeppelinApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZeppelinApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_monitoring_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration_update, json[QString("MonitoringConfigurationUpdate")]);
    m_monitoring_configuration_update_isSet = !json[QString("MonitoringConfigurationUpdate")].isNull() && m_monitoring_configuration_update_isValid;

    m_catalog_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_catalog_configuration_update, json[QString("CatalogConfigurationUpdate")]);
    m_catalog_configuration_update_isSet = !json[QString("CatalogConfigurationUpdate")].isNull() && m_catalog_configuration_update_isValid;

    m_deploy_as_application_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_deploy_as_application_configuration_update, json[QString("DeployAsApplicationConfigurationUpdate")]);
    m_deploy_as_application_configuration_update_isSet = !json[QString("DeployAsApplicationConfigurationUpdate")].isNull() && m_deploy_as_application_configuration_update_isValid;

    m_custom_artifacts_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_custom_artifacts_configuration_update, json[QString("CustomArtifactsConfigurationUpdate")]);
    m_custom_artifacts_configuration_update_isSet = !json[QString("CustomArtifactsConfigurationUpdate")].isNull() && m_custom_artifacts_configuration_update_isValid;
}

QString OAIZeppelinApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZeppelinApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_monitoring_configuration_update.isSet()) {
        obj.insert(QString("MonitoringConfigurationUpdate"), ::OpenAPI::toJsonValue(m_monitoring_configuration_update));
    }
    if (m_catalog_configuration_update.isSet()) {
        obj.insert(QString("CatalogConfigurationUpdate"), ::OpenAPI::toJsonValue(m_catalog_configuration_update));
    }
    if (m_deploy_as_application_configuration_update.isSet()) {
        obj.insert(QString("DeployAsApplicationConfigurationUpdate"), ::OpenAPI::toJsonValue(m_deploy_as_application_configuration_update));
    }
    if (m_custom_artifacts_configuration_update.isSet()) {
        obj.insert(QString("CustomArtifactsConfigurationUpdate"), ::OpenAPI::toJsonValue(m_custom_artifacts_configuration_update));
    }
    return obj;
}

OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate OAIZeppelinApplicationConfigurationUpdate::getMonitoringConfigurationUpdate() const {
    return m_monitoring_configuration_update;
}
void OAIZeppelinApplicationConfigurationUpdate::setMonitoringConfigurationUpdate(const OAIZeppelinApplicationConfigurationUpdate_MonitoringConfigurationUpdate &monitoring_configuration_update) {
    m_monitoring_configuration_update = monitoring_configuration_update;
    m_monitoring_configuration_update_isSet = true;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_monitoring_configuration_update_Set() const{
    return m_monitoring_configuration_update_isSet;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_monitoring_configuration_update_Valid() const{
    return m_monitoring_configuration_update_isValid;
}

OAIZeppelinApplicationConfigurationUpdate_CatalogConfigurationUpdate OAIZeppelinApplicationConfigurationUpdate::getCatalogConfigurationUpdate() const {
    return m_catalog_configuration_update;
}
void OAIZeppelinApplicationConfigurationUpdate::setCatalogConfigurationUpdate(const OAIZeppelinApplicationConfigurationUpdate_CatalogConfigurationUpdate &catalog_configuration_update) {
    m_catalog_configuration_update = catalog_configuration_update;
    m_catalog_configuration_update_isSet = true;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_catalog_configuration_update_Set() const{
    return m_catalog_configuration_update_isSet;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_catalog_configuration_update_Valid() const{
    return m_catalog_configuration_update_isValid;
}

OAIDeployAsApplicationConfigurationUpdate OAIZeppelinApplicationConfigurationUpdate::getDeployAsApplicationConfigurationUpdate() const {
    return m_deploy_as_application_configuration_update;
}
void OAIZeppelinApplicationConfigurationUpdate::setDeployAsApplicationConfigurationUpdate(const OAIDeployAsApplicationConfigurationUpdate &deploy_as_application_configuration_update) {
    m_deploy_as_application_configuration_update = deploy_as_application_configuration_update;
    m_deploy_as_application_configuration_update_isSet = true;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_deploy_as_application_configuration_update_Set() const{
    return m_deploy_as_application_configuration_update_isSet;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_deploy_as_application_configuration_update_Valid() const{
    return m_deploy_as_application_configuration_update_isValid;
}

QList OAIZeppelinApplicationConfigurationUpdate::getCustomArtifactsConfigurationUpdate() const {
    return m_custom_artifacts_configuration_update;
}
void OAIZeppelinApplicationConfigurationUpdate::setCustomArtifactsConfigurationUpdate(const QList &custom_artifacts_configuration_update) {
    m_custom_artifacts_configuration_update = custom_artifacts_configuration_update;
    m_custom_artifacts_configuration_update_isSet = true;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_custom_artifacts_configuration_update_Set() const{
    return m_custom_artifacts_configuration_update_isSet;
}

bool OAIZeppelinApplicationConfigurationUpdate::is_custom_artifacts_configuration_update_Valid() const{
    return m_custom_artifacts_configuration_update_isValid;
}

bool OAIZeppelinApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitoring_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_as_application_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_artifacts_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZeppelinApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
