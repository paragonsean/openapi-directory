/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ContentLocationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ContentLocationUpdate::OAIS3ContentLocationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ContentLocationUpdate::OAIS3ContentLocationUpdate() {
    this->initializeModel();
}

OAIS3ContentLocationUpdate::~OAIS3ContentLocationUpdate() {}

void OAIS3ContentLocationUpdate::initializeModel() {

    m_bucket_arn_update_isSet = false;
    m_bucket_arn_update_isValid = false;

    m_file_key_update_isSet = false;
    m_file_key_update_isValid = false;

    m_object_version_update_isSet = false;
    m_object_version_update_isValid = false;
}

void OAIS3ContentLocationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ContentLocationUpdate::fromJsonObject(QJsonObject json) {

    m_bucket_arn_update_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn_update, json[QString("BucketARNUpdate")]);
    m_bucket_arn_update_isSet = !json[QString("BucketARNUpdate")].isNull() && m_bucket_arn_update_isValid;

    m_file_key_update_isValid = ::OpenAPI::fromJsonValue(m_file_key_update, json[QString("FileKeyUpdate")]);
    m_file_key_update_isSet = !json[QString("FileKeyUpdate")].isNull() && m_file_key_update_isValid;

    m_object_version_update_isValid = ::OpenAPI::fromJsonValue(m_object_version_update, json[QString("ObjectVersionUpdate")]);
    m_object_version_update_isSet = !json[QString("ObjectVersionUpdate")].isNull() && m_object_version_update_isValid;
}

QString OAIS3ContentLocationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ContentLocationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_update_isSet) {
        obj.insert(QString("BucketARNUpdate"), ::OpenAPI::toJsonValue(m_bucket_arn_update));
    }
    if (m_file_key_update_isSet) {
        obj.insert(QString("FileKeyUpdate"), ::OpenAPI::toJsonValue(m_file_key_update));
    }
    if (m_object_version_update_isSet) {
        obj.insert(QString("ObjectVersionUpdate"), ::OpenAPI::toJsonValue(m_object_version_update));
    }
    return obj;
}

QString OAIS3ContentLocationUpdate::getBucketArnUpdate() const {
    return m_bucket_arn_update;
}
void OAIS3ContentLocationUpdate::setBucketArnUpdate(const QString &bucket_arn_update) {
    m_bucket_arn_update = bucket_arn_update;
    m_bucket_arn_update_isSet = true;
}

bool OAIS3ContentLocationUpdate::is_bucket_arn_update_Set() const{
    return m_bucket_arn_update_isSet;
}

bool OAIS3ContentLocationUpdate::is_bucket_arn_update_Valid() const{
    return m_bucket_arn_update_isValid;
}

QString OAIS3ContentLocationUpdate::getFileKeyUpdate() const {
    return m_file_key_update;
}
void OAIS3ContentLocationUpdate::setFileKeyUpdate(const QString &file_key_update) {
    m_file_key_update = file_key_update;
    m_file_key_update_isSet = true;
}

bool OAIS3ContentLocationUpdate::is_file_key_update_Set() const{
    return m_file_key_update_isSet;
}

bool OAIS3ContentLocationUpdate::is_file_key_update_Valid() const{
    return m_file_key_update_isValid;
}

QString OAIS3ContentLocationUpdate::getObjectVersionUpdate() const {
    return m_object_version_update;
}
void OAIS3ContentLocationUpdate::setObjectVersionUpdate(const QString &object_version_update) {
    m_object_version_update = object_version_update;
    m_object_version_update_isSet = true;
}

bool OAIS3ContentLocationUpdate::is_object_version_update_Set() const{
    return m_object_version_update_isSet;
}

bool OAIS3ContentLocationUpdate::is_object_version_update_Valid() const{
    return m_object_version_update_isValid;
}

bool OAIS3ContentLocationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_key_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_version_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ContentLocationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
