/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfiguration::OAIApplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfiguration::OAIApplicationConfiguration() {
    this->initializeModel();
}

OAIApplicationConfiguration::~OAIApplicationConfiguration() {}

void OAIApplicationConfiguration::initializeModel() {

    m_sql_application_configuration_isSet = false;
    m_sql_application_configuration_isValid = false;

    m_flink_application_configuration_isSet = false;
    m_flink_application_configuration_isValid = false;

    m_environment_properties_isSet = false;
    m_environment_properties_isValid = false;

    m_application_code_configuration_isSet = false;
    m_application_code_configuration_isValid = false;

    m_application_snapshot_configuration_isSet = false;
    m_application_snapshot_configuration_isValid = false;

    m_vpc_configurations_isSet = false;
    m_vpc_configurations_isValid = false;

    m_zeppelin_application_configuration_isSet = false;
    m_zeppelin_application_configuration_isValid = false;
}

void OAIApplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_sql_application_configuration_isValid = ::OpenAPI::fromJsonValue(m_sql_application_configuration, json[QString("SqlApplicationConfiguration")]);
    m_sql_application_configuration_isSet = !json[QString("SqlApplicationConfiguration")].isNull() && m_sql_application_configuration_isValid;

    m_flink_application_configuration_isValid = ::OpenAPI::fromJsonValue(m_flink_application_configuration, json[QString("FlinkApplicationConfiguration")]);
    m_flink_application_configuration_isSet = !json[QString("FlinkApplicationConfiguration")].isNull() && m_flink_application_configuration_isValid;

    m_environment_properties_isValid = ::OpenAPI::fromJsonValue(m_environment_properties, json[QString("EnvironmentProperties")]);
    m_environment_properties_isSet = !json[QString("EnvironmentProperties")].isNull() && m_environment_properties_isValid;

    m_application_code_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_code_configuration, json[QString("ApplicationCodeConfiguration")]);
    m_application_code_configuration_isSet = !json[QString("ApplicationCodeConfiguration")].isNull() && m_application_code_configuration_isValid;

    m_application_snapshot_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_snapshot_configuration, json[QString("ApplicationSnapshotConfiguration")]);
    m_application_snapshot_configuration_isSet = !json[QString("ApplicationSnapshotConfiguration")].isNull() && m_application_snapshot_configuration_isValid;

    m_vpc_configurations_isValid = ::OpenAPI::fromJsonValue(m_vpc_configurations, json[QString("VpcConfigurations")]);
    m_vpc_configurations_isSet = !json[QString("VpcConfigurations")].isNull() && m_vpc_configurations_isValid;

    m_zeppelin_application_configuration_isValid = ::OpenAPI::fromJsonValue(m_zeppelin_application_configuration, json[QString("ZeppelinApplicationConfiguration")]);
    m_zeppelin_application_configuration_isSet = !json[QString("ZeppelinApplicationConfiguration")].isNull() && m_zeppelin_application_configuration_isValid;
}

QString OAIApplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_sql_application_configuration.isSet()) {
        obj.insert(QString("SqlApplicationConfiguration"), ::OpenAPI::toJsonValue(m_sql_application_configuration));
    }
    if (m_flink_application_configuration.isSet()) {
        obj.insert(QString("FlinkApplicationConfiguration"), ::OpenAPI::toJsonValue(m_flink_application_configuration));
    }
    if (m_environment_properties.isSet()) {
        obj.insert(QString("EnvironmentProperties"), ::OpenAPI::toJsonValue(m_environment_properties));
    }
    if (m_application_code_configuration.isSet()) {
        obj.insert(QString("ApplicationCodeConfiguration"), ::OpenAPI::toJsonValue(m_application_code_configuration));
    }
    if (m_application_snapshot_configuration.isSet()) {
        obj.insert(QString("ApplicationSnapshotConfiguration"), ::OpenAPI::toJsonValue(m_application_snapshot_configuration));
    }
    if (m_vpc_configurations.isSet()) {
        obj.insert(QString("VpcConfigurations"), ::OpenAPI::toJsonValue(m_vpc_configurations));
    }
    if (m_zeppelin_application_configuration.isSet()) {
        obj.insert(QString("ZeppelinApplicationConfiguration"), ::OpenAPI::toJsonValue(m_zeppelin_application_configuration));
    }
    return obj;
}

OAIApplicationConfiguration_SqlApplicationConfiguration OAIApplicationConfiguration::getSqlApplicationConfiguration() const {
    return m_sql_application_configuration;
}
void OAIApplicationConfiguration::setSqlApplicationConfiguration(const OAIApplicationConfiguration_SqlApplicationConfiguration &sql_application_configuration) {
    m_sql_application_configuration = sql_application_configuration;
    m_sql_application_configuration_isSet = true;
}

bool OAIApplicationConfiguration::is_sql_application_configuration_Set() const{
    return m_sql_application_configuration_isSet;
}

bool OAIApplicationConfiguration::is_sql_application_configuration_Valid() const{
    return m_sql_application_configuration_isValid;
}

OAIApplicationConfiguration_FlinkApplicationConfiguration OAIApplicationConfiguration::getFlinkApplicationConfiguration() const {
    return m_flink_application_configuration;
}
void OAIApplicationConfiguration::setFlinkApplicationConfiguration(const OAIApplicationConfiguration_FlinkApplicationConfiguration &flink_application_configuration) {
    m_flink_application_configuration = flink_application_configuration;
    m_flink_application_configuration_isSet = true;
}

bool OAIApplicationConfiguration::is_flink_application_configuration_Set() const{
    return m_flink_application_configuration_isSet;
}

bool OAIApplicationConfiguration::is_flink_application_configuration_Valid() const{
    return m_flink_application_configuration_isValid;
}

OAIApplicationConfiguration_EnvironmentProperties OAIApplicationConfiguration::getEnvironmentProperties() const {
    return m_environment_properties;
}
void OAIApplicationConfiguration::setEnvironmentProperties(const OAIApplicationConfiguration_EnvironmentProperties &environment_properties) {
    m_environment_properties = environment_properties;
    m_environment_properties_isSet = true;
}

bool OAIApplicationConfiguration::is_environment_properties_Set() const{
    return m_environment_properties_isSet;
}

bool OAIApplicationConfiguration::is_environment_properties_Valid() const{
    return m_environment_properties_isValid;
}

OAIApplicationConfiguration_ApplicationCodeConfiguration OAIApplicationConfiguration::getApplicationCodeConfiguration() const {
    return m_application_code_configuration;
}
void OAIApplicationConfiguration::setApplicationCodeConfiguration(const OAIApplicationConfiguration_ApplicationCodeConfiguration &application_code_configuration) {
    m_application_code_configuration = application_code_configuration;
    m_application_code_configuration_isSet = true;
}

bool OAIApplicationConfiguration::is_application_code_configuration_Set() const{
    return m_application_code_configuration_isSet;
}

bool OAIApplicationConfiguration::is_application_code_configuration_Valid() const{
    return m_application_code_configuration_isValid;
}

OAIApplicationConfiguration_ApplicationSnapshotConfiguration OAIApplicationConfiguration::getApplicationSnapshotConfiguration() const {
    return m_application_snapshot_configuration;
}
void OAIApplicationConfiguration::setApplicationSnapshotConfiguration(const OAIApplicationConfiguration_ApplicationSnapshotConfiguration &application_snapshot_configuration) {
    m_application_snapshot_configuration = application_snapshot_configuration;
    m_application_snapshot_configuration_isSet = true;
}

bool OAIApplicationConfiguration::is_application_snapshot_configuration_Set() const{
    return m_application_snapshot_configuration_isSet;
}

bool OAIApplicationConfiguration::is_application_snapshot_configuration_Valid() const{
    return m_application_snapshot_configuration_isValid;
}

QList OAIApplicationConfiguration::getVpcConfigurations() const {
    return m_vpc_configurations;
}
void OAIApplicationConfiguration::setVpcConfigurations(const QList &vpc_configurations) {
    m_vpc_configurations = vpc_configurations;
    m_vpc_configurations_isSet = true;
}

bool OAIApplicationConfiguration::is_vpc_configurations_Set() const{
    return m_vpc_configurations_isSet;
}

bool OAIApplicationConfiguration::is_vpc_configurations_Valid() const{
    return m_vpc_configurations_isValid;
}

OAIApplicationConfiguration_ZeppelinApplicationConfiguration OAIApplicationConfiguration::getZeppelinApplicationConfiguration() const {
    return m_zeppelin_application_configuration;
}
void OAIApplicationConfiguration::setZeppelinApplicationConfiguration(const OAIApplicationConfiguration_ZeppelinApplicationConfiguration &zeppelin_application_configuration) {
    m_zeppelin_application_configuration = zeppelin_application_configuration;
    m_zeppelin_application_configuration_isSet = true;
}

bool OAIApplicationConfiguration::is_zeppelin_application_configuration_Set() const{
    return m_zeppelin_application_configuration_isSet;
}

bool OAIApplicationConfiguration::is_zeppelin_application_configuration_Valid() const{
    return m_zeppelin_application_configuration_isValid;
}

bool OAIApplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sql_application_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flink_application_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_code_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_snapshot_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zeppelin_application_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
