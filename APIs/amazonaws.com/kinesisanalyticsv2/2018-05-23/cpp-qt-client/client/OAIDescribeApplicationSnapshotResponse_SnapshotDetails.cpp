/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeApplicationSnapshotResponse_SnapshotDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeApplicationSnapshotResponse_SnapshotDetails::OAIDescribeApplicationSnapshotResponse_SnapshotDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeApplicationSnapshotResponse_SnapshotDetails::OAIDescribeApplicationSnapshotResponse_SnapshotDetails() {
    this->initializeModel();
}

OAIDescribeApplicationSnapshotResponse_SnapshotDetails::~OAIDescribeApplicationSnapshotResponse_SnapshotDetails() {}

void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::initializeModel() {

    m_snapshot_name_isSet = false;
    m_snapshot_name_isValid = false;

    m_snapshot_status_isSet = false;
    m_snapshot_status_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_snapshot_creation_timestamp_isSet = false;
    m_snapshot_creation_timestamp_isValid = false;
}

void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::fromJsonObject(QJsonObject json) {

    m_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_snapshot_name, json[QString("SnapshotName")]);
    m_snapshot_name_isSet = !json[QString("SnapshotName")].isNull() && m_snapshot_name_isValid;

    m_snapshot_status_isValid = ::OpenAPI::fromJsonValue(m_snapshot_status, json[QString("SnapshotStatus")]);
    m_snapshot_status_isSet = !json[QString("SnapshotStatus")].isNull() && m_snapshot_status_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_snapshot_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_snapshot_creation_timestamp, json[QString("SnapshotCreationTimestamp")]);
    m_snapshot_creation_timestamp_isSet = !json[QString("SnapshotCreationTimestamp")].isNull() && m_snapshot_creation_timestamp_isValid;
}

QString OAIDescribeApplicationSnapshotResponse_SnapshotDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeApplicationSnapshotResponse_SnapshotDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_name_isSet) {
        obj.insert(QString("SnapshotName"), ::OpenAPI::toJsonValue(m_snapshot_name));
    }
    if (m_snapshot_status.isSet()) {
        obj.insert(QString("SnapshotStatus"), ::OpenAPI::toJsonValue(m_snapshot_status));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_snapshot_creation_timestamp_isSet) {
        obj.insert(QString("SnapshotCreationTimestamp"), ::OpenAPI::toJsonValue(m_snapshot_creation_timestamp));
    }
    return obj;
}

QString OAIDescribeApplicationSnapshotResponse_SnapshotDetails::getSnapshotName() const {
    return m_snapshot_name;
}
void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::setSnapshotName(const QString &snapshot_name) {
    m_snapshot_name = snapshot_name;
    m_snapshot_name_isSet = true;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_snapshot_name_Set() const{
    return m_snapshot_name_isSet;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_snapshot_name_Valid() const{
    return m_snapshot_name_isValid;
}

OAISnapshotStatus OAIDescribeApplicationSnapshotResponse_SnapshotDetails::getSnapshotStatus() const {
    return m_snapshot_status;
}
void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::setSnapshotStatus(const OAISnapshotStatus &snapshot_status) {
    m_snapshot_status = snapshot_status;
    m_snapshot_status_isSet = true;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_snapshot_status_Set() const{
    return m_snapshot_status_isSet;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_snapshot_status_Valid() const{
    return m_snapshot_status_isValid;
}

qint32 OAIDescribeApplicationSnapshotResponse_SnapshotDetails::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

QDateTime OAIDescribeApplicationSnapshotResponse_SnapshotDetails::getSnapshotCreationTimestamp() const {
    return m_snapshot_creation_timestamp;
}
void OAIDescribeApplicationSnapshotResponse_SnapshotDetails::setSnapshotCreationTimestamp(const QDateTime &snapshot_creation_timestamp) {
    m_snapshot_creation_timestamp = snapshot_creation_timestamp;
    m_snapshot_creation_timestamp_isSet = true;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_snapshot_creation_timestamp_Set() const{
    return m_snapshot_creation_timestamp_isSet;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::is_snapshot_creation_timestamp_Valid() const{
    return m_snapshot_creation_timestamp_isValid;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeApplicationSnapshotResponse_SnapshotDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snapshot_name_isValid && m_snapshot_status_isValid && m_application_version_id_isValid && true;
}

} // namespace OpenAPI
