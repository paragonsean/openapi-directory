/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationVpcConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationVpcConfigurationRequest::OAIAddApplicationVpcConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationVpcConfigurationRequest::OAIAddApplicationVpcConfigurationRequest() {
    this->initializeModel();
}

OAIAddApplicationVpcConfigurationRequest::~OAIAddApplicationVpcConfigurationRequest() {}

void OAIAddApplicationVpcConfigurationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_conditional_token_isSet = false;
    m_conditional_token_isValid = false;
}

void OAIAddApplicationVpcConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationVpcConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_conditional_token_isValid = ::OpenAPI::fromJsonValue(m_conditional_token, json[QString("ConditionalToken")]);
    m_conditional_token_isSet = !json[QString("ConditionalToken")].isNull() && m_conditional_token_isValid;
}

QString OAIAddApplicationVpcConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationVpcConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_conditional_token_isSet) {
        obj.insert(QString("ConditionalToken"), ::OpenAPI::toJsonValue(m_conditional_token));
    }
    return obj;
}

QString OAIAddApplicationVpcConfigurationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIAddApplicationVpcConfigurationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIAddApplicationVpcConfigurationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIAddApplicationVpcConfigurationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIAddApplicationVpcConfigurationRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIAddApplicationVpcConfigurationRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIAddApplicationVpcConfigurationRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIAddApplicationVpcConfigurationRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

OAIAddApplicationVpcConfigurationRequest_VpcConfiguration OAIAddApplicationVpcConfigurationRequest::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIAddApplicationVpcConfigurationRequest::setVpcConfiguration(const OAIAddApplicationVpcConfigurationRequest_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIAddApplicationVpcConfigurationRequest::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIAddApplicationVpcConfigurationRequest::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QString OAIAddApplicationVpcConfigurationRequest::getConditionalToken() const {
    return m_conditional_token;
}
void OAIAddApplicationVpcConfigurationRequest::setConditionalToken(const QString &conditional_token) {
    m_conditional_token = conditional_token;
    m_conditional_token_isSet = true;
}

bool OAIAddApplicationVpcConfigurationRequest::is_conditional_token_Set() const{
    return m_conditional_token_isSet;
}

bool OAIAddApplicationVpcConfigurationRequest::is_conditional_token_Valid() const{
    return m_conditional_token_isValid;
}

bool OAIAddApplicationVpcConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationVpcConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_vpc_configuration_isValid && true;
}

} // namespace OpenAPI
