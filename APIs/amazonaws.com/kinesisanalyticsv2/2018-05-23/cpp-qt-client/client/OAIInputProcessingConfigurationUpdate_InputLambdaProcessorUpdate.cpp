/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate() {
    this->initializeModel();
}

OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::~OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate() {}

void OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::initializeModel() {

    m_resource_arn_update_isSet = false;
    m_resource_arn_update_isValid = false;
}

void OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::fromJsonObject(QJsonObject json) {

    m_resource_arn_update_isValid = ::OpenAPI::fromJsonValue(m_resource_arn_update, json[QString("ResourceARNUpdate")]);
    m_resource_arn_update_isSet = !json[QString("ResourceARNUpdate")].isNull() && m_resource_arn_update_isValid;
}

QString OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_update_isSet) {
        obj.insert(QString("ResourceARNUpdate"), ::OpenAPI::toJsonValue(m_resource_arn_update));
    }
    return obj;
}

QString OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::getResourceArnUpdate() const {
    return m_resource_arn_update;
}
void OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::setResourceArnUpdate(const QString &resource_arn_update) {
    m_resource_arn_update = resource_arn_update;
    m_resource_arn_update_isSet = true;
}

bool OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::is_resource_arn_update_Set() const{
    return m_resource_arn_update_isSet;
}

bool OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::is_resource_arn_update_Valid() const{
    return m_resource_arn_update_isValid;
}

bool OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_update_isValid && true;
}

} // namespace OpenAPI
