/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputSchemaUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputSchemaUpdate::OAIInputSchemaUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputSchemaUpdate::OAIInputSchemaUpdate() {
    this->initializeModel();
}

OAIInputSchemaUpdate::~OAIInputSchemaUpdate() {}

void OAIInputSchemaUpdate::initializeModel() {

    m_record_format_update_isSet = false;
    m_record_format_update_isValid = false;

    m_record_encoding_update_isSet = false;
    m_record_encoding_update_isValid = false;

    m_record_column_updates_isSet = false;
    m_record_column_updates_isValid = false;
}

void OAIInputSchemaUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputSchemaUpdate::fromJsonObject(QJsonObject json) {

    m_record_format_update_isValid = ::OpenAPI::fromJsonValue(m_record_format_update, json[QString("RecordFormatUpdate")]);
    m_record_format_update_isSet = !json[QString("RecordFormatUpdate")].isNull() && m_record_format_update_isValid;

    m_record_encoding_update_isValid = ::OpenAPI::fromJsonValue(m_record_encoding_update, json[QString("RecordEncodingUpdate")]);
    m_record_encoding_update_isSet = !json[QString("RecordEncodingUpdate")].isNull() && m_record_encoding_update_isValid;

    m_record_column_updates_isValid = ::OpenAPI::fromJsonValue(m_record_column_updates, json[QString("RecordColumnUpdates")]);
    m_record_column_updates_isSet = !json[QString("RecordColumnUpdates")].isNull() && m_record_column_updates_isValid;
}

QString OAIInputSchemaUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputSchemaUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_record_format_update.isSet()) {
        obj.insert(QString("RecordFormatUpdate"), ::OpenAPI::toJsonValue(m_record_format_update));
    }
    if (m_record_encoding_update_isSet) {
        obj.insert(QString("RecordEncodingUpdate"), ::OpenAPI::toJsonValue(m_record_encoding_update));
    }
    if (m_record_column_updates.isSet()) {
        obj.insert(QString("RecordColumnUpdates"), ::OpenAPI::toJsonValue(m_record_column_updates));
    }
    return obj;
}

OAISourceSchema_RecordFormat OAIInputSchemaUpdate::getRecordFormatUpdate() const {
    return m_record_format_update;
}
void OAIInputSchemaUpdate::setRecordFormatUpdate(const OAISourceSchema_RecordFormat &record_format_update) {
    m_record_format_update = record_format_update;
    m_record_format_update_isSet = true;
}

bool OAIInputSchemaUpdate::is_record_format_update_Set() const{
    return m_record_format_update_isSet;
}

bool OAIInputSchemaUpdate::is_record_format_update_Valid() const{
    return m_record_format_update_isValid;
}

QString OAIInputSchemaUpdate::getRecordEncodingUpdate() const {
    return m_record_encoding_update;
}
void OAIInputSchemaUpdate::setRecordEncodingUpdate(const QString &record_encoding_update) {
    m_record_encoding_update = record_encoding_update;
    m_record_encoding_update_isSet = true;
}

bool OAIInputSchemaUpdate::is_record_encoding_update_Set() const{
    return m_record_encoding_update_isSet;
}

bool OAIInputSchemaUpdate::is_record_encoding_update_Valid() const{
    return m_record_encoding_update_isValid;
}

QList OAIInputSchemaUpdate::getRecordColumnUpdates() const {
    return m_record_column_updates;
}
void OAIInputSchemaUpdate::setRecordColumnUpdates(const QList &record_column_updates) {
    m_record_column_updates = record_column_updates;
    m_record_column_updates_isSet = true;
}

bool OAIInputSchemaUpdate::is_record_column_updates_Set() const{
    return m_record_column_updates_isSet;
}

bool OAIInputSchemaUpdate::is_record_column_updates_Valid() const{
    return m_record_column_updates_isValid;
}

bool OAIInputSchemaUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_format_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_encoding_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_column_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputSchemaUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
