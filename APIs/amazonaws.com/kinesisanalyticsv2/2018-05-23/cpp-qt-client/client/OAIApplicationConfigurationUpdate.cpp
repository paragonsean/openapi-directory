/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIApplicationConfigurationUpdate::~OAIApplicationConfigurationUpdate() {}

void OAIApplicationConfigurationUpdate::initializeModel() {

    m_sql_application_configuration_update_isSet = false;
    m_sql_application_configuration_update_isValid = false;

    m_application_code_configuration_update_isSet = false;
    m_application_code_configuration_update_isValid = false;

    m_flink_application_configuration_update_isSet = false;
    m_flink_application_configuration_update_isValid = false;

    m_environment_property_updates_isSet = false;
    m_environment_property_updates_isValid = false;

    m_application_snapshot_configuration_update_isSet = false;
    m_application_snapshot_configuration_update_isValid = false;

    m_vpc_configuration_updates_isSet = false;
    m_vpc_configuration_updates_isValid = false;

    m_zeppelin_application_configuration_update_isSet = false;
    m_zeppelin_application_configuration_update_isValid = false;
}

void OAIApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_sql_application_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_sql_application_configuration_update, json[QString("SqlApplicationConfigurationUpdate")]);
    m_sql_application_configuration_update_isSet = !json[QString("SqlApplicationConfigurationUpdate")].isNull() && m_sql_application_configuration_update_isValid;

    m_application_code_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_application_code_configuration_update, json[QString("ApplicationCodeConfigurationUpdate")]);
    m_application_code_configuration_update_isSet = !json[QString("ApplicationCodeConfigurationUpdate")].isNull() && m_application_code_configuration_update_isValid;

    m_flink_application_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_flink_application_configuration_update, json[QString("FlinkApplicationConfigurationUpdate")]);
    m_flink_application_configuration_update_isSet = !json[QString("FlinkApplicationConfigurationUpdate")].isNull() && m_flink_application_configuration_update_isValid;

    m_environment_property_updates_isValid = ::OpenAPI::fromJsonValue(m_environment_property_updates, json[QString("EnvironmentPropertyUpdates")]);
    m_environment_property_updates_isSet = !json[QString("EnvironmentPropertyUpdates")].isNull() && m_environment_property_updates_isValid;

    m_application_snapshot_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_application_snapshot_configuration_update, json[QString("ApplicationSnapshotConfigurationUpdate")]);
    m_application_snapshot_configuration_update_isSet = !json[QString("ApplicationSnapshotConfigurationUpdate")].isNull() && m_application_snapshot_configuration_update_isValid;

    m_vpc_configuration_updates_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration_updates, json[QString("VpcConfigurationUpdates")]);
    m_vpc_configuration_updates_isSet = !json[QString("VpcConfigurationUpdates")].isNull() && m_vpc_configuration_updates_isValid;

    m_zeppelin_application_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_zeppelin_application_configuration_update, json[QString("ZeppelinApplicationConfigurationUpdate")]);
    m_zeppelin_application_configuration_update_isSet = !json[QString("ZeppelinApplicationConfigurationUpdate")].isNull() && m_zeppelin_application_configuration_update_isValid;
}

QString OAIApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_sql_application_configuration_update.isSet()) {
        obj.insert(QString("SqlApplicationConfigurationUpdate"), ::OpenAPI::toJsonValue(m_sql_application_configuration_update));
    }
    if (m_application_code_configuration_update.isSet()) {
        obj.insert(QString("ApplicationCodeConfigurationUpdate"), ::OpenAPI::toJsonValue(m_application_code_configuration_update));
    }
    if (m_flink_application_configuration_update.isSet()) {
        obj.insert(QString("FlinkApplicationConfigurationUpdate"), ::OpenAPI::toJsonValue(m_flink_application_configuration_update));
    }
    if (m_environment_property_updates.isSet()) {
        obj.insert(QString("EnvironmentPropertyUpdates"), ::OpenAPI::toJsonValue(m_environment_property_updates));
    }
    if (m_application_snapshot_configuration_update.isSet()) {
        obj.insert(QString("ApplicationSnapshotConfigurationUpdate"), ::OpenAPI::toJsonValue(m_application_snapshot_configuration_update));
    }
    if (m_vpc_configuration_updates.isSet()) {
        obj.insert(QString("VpcConfigurationUpdates"), ::OpenAPI::toJsonValue(m_vpc_configuration_updates));
    }
    if (m_zeppelin_application_configuration_update.isSet()) {
        obj.insert(QString("ZeppelinApplicationConfigurationUpdate"), ::OpenAPI::toJsonValue(m_zeppelin_application_configuration_update));
    }
    return obj;
}

OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate OAIApplicationConfigurationUpdate::getSqlApplicationConfigurationUpdate() const {
    return m_sql_application_configuration_update;
}
void OAIApplicationConfigurationUpdate::setSqlApplicationConfigurationUpdate(const OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate &sql_application_configuration_update) {
    m_sql_application_configuration_update = sql_application_configuration_update;
    m_sql_application_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_sql_application_configuration_update_Set() const{
    return m_sql_application_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate::is_sql_application_configuration_update_Valid() const{
    return m_sql_application_configuration_update_isValid;
}

OAIApplicationConfigurationUpdate_ApplicationCodeConfigurationUpdate OAIApplicationConfigurationUpdate::getApplicationCodeConfigurationUpdate() const {
    return m_application_code_configuration_update;
}
void OAIApplicationConfigurationUpdate::setApplicationCodeConfigurationUpdate(const OAIApplicationConfigurationUpdate_ApplicationCodeConfigurationUpdate &application_code_configuration_update) {
    m_application_code_configuration_update = application_code_configuration_update;
    m_application_code_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_application_code_configuration_update_Set() const{
    return m_application_code_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate::is_application_code_configuration_update_Valid() const{
    return m_application_code_configuration_update_isValid;
}

OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate OAIApplicationConfigurationUpdate::getFlinkApplicationConfigurationUpdate() const {
    return m_flink_application_configuration_update;
}
void OAIApplicationConfigurationUpdate::setFlinkApplicationConfigurationUpdate(const OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate &flink_application_configuration_update) {
    m_flink_application_configuration_update = flink_application_configuration_update;
    m_flink_application_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_flink_application_configuration_update_Set() const{
    return m_flink_application_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate::is_flink_application_configuration_update_Valid() const{
    return m_flink_application_configuration_update_isValid;
}

OAIApplicationConfigurationUpdate_EnvironmentPropertyUpdates OAIApplicationConfigurationUpdate::getEnvironmentPropertyUpdates() const {
    return m_environment_property_updates;
}
void OAIApplicationConfigurationUpdate::setEnvironmentPropertyUpdates(const OAIApplicationConfigurationUpdate_EnvironmentPropertyUpdates &environment_property_updates) {
    m_environment_property_updates = environment_property_updates;
    m_environment_property_updates_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_environment_property_updates_Set() const{
    return m_environment_property_updates_isSet;
}

bool OAIApplicationConfigurationUpdate::is_environment_property_updates_Valid() const{
    return m_environment_property_updates_isValid;
}

OAIApplicationConfigurationUpdate_ApplicationSnapshotConfigurationUpdate OAIApplicationConfigurationUpdate::getApplicationSnapshotConfigurationUpdate() const {
    return m_application_snapshot_configuration_update;
}
void OAIApplicationConfigurationUpdate::setApplicationSnapshotConfigurationUpdate(const OAIApplicationConfigurationUpdate_ApplicationSnapshotConfigurationUpdate &application_snapshot_configuration_update) {
    m_application_snapshot_configuration_update = application_snapshot_configuration_update;
    m_application_snapshot_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_application_snapshot_configuration_update_Set() const{
    return m_application_snapshot_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate::is_application_snapshot_configuration_update_Valid() const{
    return m_application_snapshot_configuration_update_isValid;
}

QList OAIApplicationConfigurationUpdate::getVpcConfigurationUpdates() const {
    return m_vpc_configuration_updates;
}
void OAIApplicationConfigurationUpdate::setVpcConfigurationUpdates(const QList &vpc_configuration_updates) {
    m_vpc_configuration_updates = vpc_configuration_updates;
    m_vpc_configuration_updates_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_vpc_configuration_updates_Set() const{
    return m_vpc_configuration_updates_isSet;
}

bool OAIApplicationConfigurationUpdate::is_vpc_configuration_updates_Valid() const{
    return m_vpc_configuration_updates_isValid;
}

OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate OAIApplicationConfigurationUpdate::getZeppelinApplicationConfigurationUpdate() const {
    return m_zeppelin_application_configuration_update;
}
void OAIApplicationConfigurationUpdate::setZeppelinApplicationConfigurationUpdate(const OAIApplicationConfigurationUpdate_ZeppelinApplicationConfigurationUpdate &zeppelin_application_configuration_update) {
    m_zeppelin_application_configuration_update = zeppelin_application_configuration_update;
    m_zeppelin_application_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate::is_zeppelin_application_configuration_update_Set() const{
    return m_zeppelin_application_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate::is_zeppelin_application_configuration_update_Valid() const{
    return m_zeppelin_application_configuration_update_isValid;
}

bool OAIApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sql_application_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_code_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flink_application_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_property_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_snapshot_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zeppelin_application_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
