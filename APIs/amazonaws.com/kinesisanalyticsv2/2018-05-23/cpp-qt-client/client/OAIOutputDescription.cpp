/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDescription::OAIOutputDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDescription::OAIOutputDescription() {
    this->initializeModel();
}

OAIOutputDescription::~OAIOutputDescription() {}

void OAIOutputDescription::initializeModel() {

    m_output_id_isSet = false;
    m_output_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_kinesis_streams_output_description_isSet = false;
    m_kinesis_streams_output_description_isValid = false;

    m_kinesis_firehose_output_description_isSet = false;
    m_kinesis_firehose_output_description_isValid = false;

    m_lambda_output_description_isSet = false;
    m_lambda_output_description_isValid = false;

    m_destination_schema_isSet = false;
    m_destination_schema_isValid = false;
}

void OAIOutputDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDescription::fromJsonObject(QJsonObject json) {

    m_output_id_isValid = ::OpenAPI::fromJsonValue(m_output_id, json[QString("OutputId")]);
    m_output_id_isSet = !json[QString("OutputId")].isNull() && m_output_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_kinesis_streams_output_description_isValid = ::OpenAPI::fromJsonValue(m_kinesis_streams_output_description, json[QString("KinesisStreamsOutputDescription")]);
    m_kinesis_streams_output_description_isSet = !json[QString("KinesisStreamsOutputDescription")].isNull() && m_kinesis_streams_output_description_isValid;

    m_kinesis_firehose_output_description_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_output_description, json[QString("KinesisFirehoseOutputDescription")]);
    m_kinesis_firehose_output_description_isSet = !json[QString("KinesisFirehoseOutputDescription")].isNull() && m_kinesis_firehose_output_description_isValid;

    m_lambda_output_description_isValid = ::OpenAPI::fromJsonValue(m_lambda_output_description, json[QString("LambdaOutputDescription")]);
    m_lambda_output_description_isSet = !json[QString("LambdaOutputDescription")].isNull() && m_lambda_output_description_isValid;

    m_destination_schema_isValid = ::OpenAPI::fromJsonValue(m_destination_schema, json[QString("DestinationSchema")]);
    m_destination_schema_isSet = !json[QString("DestinationSchema")].isNull() && m_destination_schema_isValid;
}

QString OAIOutputDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_output_id_isSet) {
        obj.insert(QString("OutputId"), ::OpenAPI::toJsonValue(m_output_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_kinesis_streams_output_description.isSet()) {
        obj.insert(QString("KinesisStreamsOutputDescription"), ::OpenAPI::toJsonValue(m_kinesis_streams_output_description));
    }
    if (m_kinesis_firehose_output_description.isSet()) {
        obj.insert(QString("KinesisFirehoseOutputDescription"), ::OpenAPI::toJsonValue(m_kinesis_firehose_output_description));
    }
    if (m_lambda_output_description.isSet()) {
        obj.insert(QString("LambdaOutputDescription"), ::OpenAPI::toJsonValue(m_lambda_output_description));
    }
    if (m_destination_schema.isSet()) {
        obj.insert(QString("DestinationSchema"), ::OpenAPI::toJsonValue(m_destination_schema));
    }
    return obj;
}

QString OAIOutputDescription::getOutputId() const {
    return m_output_id;
}
void OAIOutputDescription::setOutputId(const QString &output_id) {
    m_output_id = output_id;
    m_output_id_isSet = true;
}

bool OAIOutputDescription::is_output_id_Set() const{
    return m_output_id_isSet;
}

bool OAIOutputDescription::is_output_id_Valid() const{
    return m_output_id_isValid;
}

QString OAIOutputDescription::getName() const {
    return m_name;
}
void OAIOutputDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOutputDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOutputDescription::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutputDescription_KinesisStreamsOutputDescription OAIOutputDescription::getKinesisStreamsOutputDescription() const {
    return m_kinesis_streams_output_description;
}
void OAIOutputDescription::setKinesisStreamsOutputDescription(const OAIOutputDescription_KinesisStreamsOutputDescription &kinesis_streams_output_description) {
    m_kinesis_streams_output_description = kinesis_streams_output_description;
    m_kinesis_streams_output_description_isSet = true;
}

bool OAIOutputDescription::is_kinesis_streams_output_description_Set() const{
    return m_kinesis_streams_output_description_isSet;
}

bool OAIOutputDescription::is_kinesis_streams_output_description_Valid() const{
    return m_kinesis_streams_output_description_isValid;
}

OAIOutputDescription_KinesisFirehoseOutputDescription OAIOutputDescription::getKinesisFirehoseOutputDescription() const {
    return m_kinesis_firehose_output_description;
}
void OAIOutputDescription::setKinesisFirehoseOutputDescription(const OAIOutputDescription_KinesisFirehoseOutputDescription &kinesis_firehose_output_description) {
    m_kinesis_firehose_output_description = kinesis_firehose_output_description;
    m_kinesis_firehose_output_description_isSet = true;
}

bool OAIOutputDescription::is_kinesis_firehose_output_description_Set() const{
    return m_kinesis_firehose_output_description_isSet;
}

bool OAIOutputDescription::is_kinesis_firehose_output_description_Valid() const{
    return m_kinesis_firehose_output_description_isValid;
}

OAIOutputDescription_LambdaOutputDescription OAIOutputDescription::getLambdaOutputDescription() const {
    return m_lambda_output_description;
}
void OAIOutputDescription::setLambdaOutputDescription(const OAIOutputDescription_LambdaOutputDescription &lambda_output_description) {
    m_lambda_output_description = lambda_output_description;
    m_lambda_output_description_isSet = true;
}

bool OAIOutputDescription::is_lambda_output_description_Set() const{
    return m_lambda_output_description_isSet;
}

bool OAIOutputDescription::is_lambda_output_description_Valid() const{
    return m_lambda_output_description_isValid;
}

OAIOutputDescription_DestinationSchema OAIOutputDescription::getDestinationSchema() const {
    return m_destination_schema;
}
void OAIOutputDescription::setDestinationSchema(const OAIOutputDescription_DestinationSchema &destination_schema) {
    m_destination_schema = destination_schema;
    m_destination_schema_isSet = true;
}

bool OAIOutputDescription::is_destination_schema_Set() const{
    return m_destination_schema_isSet;
}

bool OAIOutputDescription::is_destination_schema_Valid() const{
    return m_destination_schema_isValid;
}

bool OAIOutputDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_streams_output_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_output_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_output_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
