/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollbackApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollbackApplicationRequest::OAIRollbackApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollbackApplicationRequest::OAIRollbackApplicationRequest() {
    this->initializeModel();
}

OAIRollbackApplicationRequest::~OAIRollbackApplicationRequest() {}

void OAIRollbackApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;
}

void OAIRollbackApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollbackApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;
}

QString OAIRollbackApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollbackApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    return obj;
}

QString OAIRollbackApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIRollbackApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIRollbackApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIRollbackApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIRollbackApplicationRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIRollbackApplicationRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIRollbackApplicationRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIRollbackApplicationRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

bool OAIRollbackApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollbackApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_current_application_version_id_isValid && true;
}

} // namespace OpenAPI
