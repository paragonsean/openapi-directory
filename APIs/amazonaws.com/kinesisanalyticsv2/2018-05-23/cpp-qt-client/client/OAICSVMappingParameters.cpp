/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICSVMappingParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICSVMappingParameters::OAICSVMappingParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICSVMappingParameters::OAICSVMappingParameters() {
    this->initializeModel();
}

OAICSVMappingParameters::~OAICSVMappingParameters() {}

void OAICSVMappingParameters::initializeModel() {

    m_record_row_delimiter_isSet = false;
    m_record_row_delimiter_isValid = false;

    m_record_column_delimiter_isSet = false;
    m_record_column_delimiter_isValid = false;
}

void OAICSVMappingParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICSVMappingParameters::fromJsonObject(QJsonObject json) {

    m_record_row_delimiter_isValid = ::OpenAPI::fromJsonValue(m_record_row_delimiter, json[QString("RecordRowDelimiter")]);
    m_record_row_delimiter_isSet = !json[QString("RecordRowDelimiter")].isNull() && m_record_row_delimiter_isValid;

    m_record_column_delimiter_isValid = ::OpenAPI::fromJsonValue(m_record_column_delimiter, json[QString("RecordColumnDelimiter")]);
    m_record_column_delimiter_isSet = !json[QString("RecordColumnDelimiter")].isNull() && m_record_column_delimiter_isValid;
}

QString OAICSVMappingParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICSVMappingParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_record_row_delimiter_isSet) {
        obj.insert(QString("RecordRowDelimiter"), ::OpenAPI::toJsonValue(m_record_row_delimiter));
    }
    if (m_record_column_delimiter_isSet) {
        obj.insert(QString("RecordColumnDelimiter"), ::OpenAPI::toJsonValue(m_record_column_delimiter));
    }
    return obj;
}

QString OAICSVMappingParameters::getRecordRowDelimiter() const {
    return m_record_row_delimiter;
}
void OAICSVMappingParameters::setRecordRowDelimiter(const QString &record_row_delimiter) {
    m_record_row_delimiter = record_row_delimiter;
    m_record_row_delimiter_isSet = true;
}

bool OAICSVMappingParameters::is_record_row_delimiter_Set() const{
    return m_record_row_delimiter_isSet;
}

bool OAICSVMappingParameters::is_record_row_delimiter_Valid() const{
    return m_record_row_delimiter_isValid;
}

QString OAICSVMappingParameters::getRecordColumnDelimiter() const {
    return m_record_column_delimiter;
}
void OAICSVMappingParameters::setRecordColumnDelimiter(const QString &record_column_delimiter) {
    m_record_column_delimiter = record_column_delimiter;
    m_record_column_delimiter_isSet = true;
}

bool OAICSVMappingParameters::is_record_column_delimiter_Set() const{
    return m_record_column_delimiter_isSet;
}

bool OAICSVMappingParameters::is_record_column_delimiter_Valid() const{
    return m_record_column_delimiter_isValid;
}

bool OAICSVMappingParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_row_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_column_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICSVMappingParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_row_delimiter_isValid && m_record_column_delimiter_isValid && true;
}

} // namespace OpenAPI
