/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCodeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCodeConfiguration::OAIApplicationCodeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCodeConfiguration::OAIApplicationCodeConfiguration() {
    this->initializeModel();
}

OAIApplicationCodeConfiguration::~OAIApplicationCodeConfiguration() {}

void OAIApplicationCodeConfiguration::initializeModel() {

    m_code_content_isSet = false;
    m_code_content_isValid = false;

    m_code_content_type_isSet = false;
    m_code_content_type_isValid = false;
}

void OAIApplicationCodeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCodeConfiguration::fromJsonObject(QJsonObject json) {

    m_code_content_isValid = ::OpenAPI::fromJsonValue(m_code_content, json[QString("CodeContent")]);
    m_code_content_isSet = !json[QString("CodeContent")].isNull() && m_code_content_isValid;

    m_code_content_type_isValid = ::OpenAPI::fromJsonValue(m_code_content_type, json[QString("CodeContentType")]);
    m_code_content_type_isSet = !json[QString("CodeContentType")].isNull() && m_code_content_type_isValid;
}

QString OAIApplicationCodeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCodeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_code_content.isSet()) {
        obj.insert(QString("CodeContent"), ::OpenAPI::toJsonValue(m_code_content));
    }
    if (m_code_content_type.isSet()) {
        obj.insert(QString("CodeContentType"), ::OpenAPI::toJsonValue(m_code_content_type));
    }
    return obj;
}

OAIApplicationCodeConfiguration_CodeContent OAIApplicationCodeConfiguration::getCodeContent() const {
    return m_code_content;
}
void OAIApplicationCodeConfiguration::setCodeContent(const OAIApplicationCodeConfiguration_CodeContent &code_content) {
    m_code_content = code_content;
    m_code_content_isSet = true;
}

bool OAIApplicationCodeConfiguration::is_code_content_Set() const{
    return m_code_content_isSet;
}

bool OAIApplicationCodeConfiguration::is_code_content_Valid() const{
    return m_code_content_isValid;
}

OAICodeContentType OAIApplicationCodeConfiguration::getCodeContentType() const {
    return m_code_content_type;
}
void OAIApplicationCodeConfiguration::setCodeContentType(const OAICodeContentType &code_content_type) {
    m_code_content_type = code_content_type;
    m_code_content_type_isSet = true;
}

bool OAIApplicationCodeConfiguration::is_code_content_type_Set() const{
    return m_code_content_type_isSet;
}

bool OAIApplicationCodeConfiguration::is_code_content_type_Valid() const{
    return m_code_content_type_isValid;
}

bool OAIApplicationCodeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCodeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_content_type_isValid && true;
}

} // namespace OpenAPI
