/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteApplicationReferenceDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteApplicationReferenceDataSourceRequest::OAIDeleteApplicationReferenceDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteApplicationReferenceDataSourceRequest::OAIDeleteApplicationReferenceDataSourceRequest() {
    this->initializeModel();
}

OAIDeleteApplicationReferenceDataSourceRequest::~OAIDeleteApplicationReferenceDataSourceRequest() {}

void OAIDeleteApplicationReferenceDataSourceRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;
}

void OAIDeleteApplicationReferenceDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteApplicationReferenceDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;
}

QString OAIDeleteApplicationReferenceDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteApplicationReferenceDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    return obj;
}

QString OAIDeleteApplicationReferenceDataSourceRequest::getApplicationName() const {
    return m_application_name;
}
void OAIDeleteApplicationReferenceDataSourceRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIDeleteApplicationReferenceDataSourceRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIDeleteApplicationReferenceDataSourceRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

QString OAIDeleteApplicationReferenceDataSourceRequest::getReferenceId() const {
    return m_reference_id;
}
void OAIDeleteApplicationReferenceDataSourceRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteApplicationReferenceDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_current_application_version_id_isValid && m_reference_id_isValid && true;
}

} // namespace OpenAPI
