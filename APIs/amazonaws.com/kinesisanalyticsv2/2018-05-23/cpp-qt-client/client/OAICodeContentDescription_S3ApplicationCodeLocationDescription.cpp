/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeContentDescription_S3ApplicationCodeLocationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeContentDescription_S3ApplicationCodeLocationDescription::OAICodeContentDescription_S3ApplicationCodeLocationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeContentDescription_S3ApplicationCodeLocationDescription::OAICodeContentDescription_S3ApplicationCodeLocationDescription() {
    this->initializeModel();
}

OAICodeContentDescription_S3ApplicationCodeLocationDescription::~OAICodeContentDescription_S3ApplicationCodeLocationDescription() {}

void OAICodeContentDescription_S3ApplicationCodeLocationDescription::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_file_key_isSet = false;
    m_file_key_isValid = false;

    m_object_version_isSet = false;
    m_object_version_isValid = false;
}

void OAICodeContentDescription_S3ApplicationCodeLocationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeContentDescription_S3ApplicationCodeLocationDescription::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketARN")]);
    m_bucket_arn_isSet = !json[QString("BucketARN")].isNull() && m_bucket_arn_isValid;

    m_file_key_isValid = ::OpenAPI::fromJsonValue(m_file_key, json[QString("FileKey")]);
    m_file_key_isSet = !json[QString("FileKey")].isNull() && m_file_key_isValid;

    m_object_version_isValid = ::OpenAPI::fromJsonValue(m_object_version, json[QString("ObjectVersion")]);
    m_object_version_isSet = !json[QString("ObjectVersion")].isNull() && m_object_version_isValid;
}

QString OAICodeContentDescription_S3ApplicationCodeLocationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeContentDescription_S3ApplicationCodeLocationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketARN"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_file_key_isSet) {
        obj.insert(QString("FileKey"), ::OpenAPI::toJsonValue(m_file_key));
    }
    if (m_object_version_isSet) {
        obj.insert(QString("ObjectVersion"), ::OpenAPI::toJsonValue(m_object_version));
    }
    return obj;
}

QString OAICodeContentDescription_S3ApplicationCodeLocationDescription::getBucketArn() const {
    return m_bucket_arn;
}
void OAICodeContentDescription_S3ApplicationCodeLocationDescription::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAICodeContentDescription_S3ApplicationCodeLocationDescription::getFileKey() const {
    return m_file_key;
}
void OAICodeContentDescription_S3ApplicationCodeLocationDescription::setFileKey(const QString &file_key) {
    m_file_key = file_key;
    m_file_key_isSet = true;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::is_file_key_Set() const{
    return m_file_key_isSet;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::is_file_key_Valid() const{
    return m_file_key_isValid;
}

QString OAICodeContentDescription_S3ApplicationCodeLocationDescription::getObjectVersion() const {
    return m_object_version;
}
void OAICodeContentDescription_S3ApplicationCodeLocationDescription::setObjectVersion(const QString &object_version) {
    m_object_version = object_version;
    m_object_version_isSet = true;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::is_object_version_Set() const{
    return m_object_version_isSet;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::is_object_version_Valid() const{
    return m_object_version_isValid;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeContentDescription_S3ApplicationCodeLocationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_arn_isValid && m_file_key_isValid && true;
}

} // namespace OpenAPI
