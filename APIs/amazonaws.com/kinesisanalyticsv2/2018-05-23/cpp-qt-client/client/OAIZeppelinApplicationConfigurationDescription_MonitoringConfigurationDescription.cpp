/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription() {
    this->initializeModel();
}

OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::~OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription() {}

void OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::initializeModel() {

    m_log_level_isSet = false;
    m_log_level_isValid = false;
}

void OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;
}

QString OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    return obj;
}

OAILogLevel OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::getLogLevel() const {
    return m_log_level;
}
void OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::is_log_level_Valid() const{
    return m_log_level_isValid;
}

bool OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZeppelinApplicationConfigurationDescription_MonitoringConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
