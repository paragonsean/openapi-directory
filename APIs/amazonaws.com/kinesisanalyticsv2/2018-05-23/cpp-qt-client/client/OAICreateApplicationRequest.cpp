/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationRequest::OAICreateApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationRequest::OAICreateApplicationRequest() {
    this->initializeModel();
}

OAICreateApplicationRequest::~OAICreateApplicationRequest() {}

void OAICreateApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_description_isSet = false;
    m_application_description_isValid = false;

    m_runtime_environment_isSet = false;
    m_runtime_environment_isValid = false;

    m_service_execution_role_isSet = false;
    m_service_execution_role_isValid = false;

    m_application_configuration_isSet = false;
    m_application_configuration_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_application_mode_isSet = false;
    m_application_mode_isValid = false;
}

void OAICreateApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_description_isValid = ::OpenAPI::fromJsonValue(m_application_description, json[QString("ApplicationDescription")]);
    m_application_description_isSet = !json[QString("ApplicationDescription")].isNull() && m_application_description_isValid;

    m_runtime_environment_isValid = ::OpenAPI::fromJsonValue(m_runtime_environment, json[QString("RuntimeEnvironment")]);
    m_runtime_environment_isSet = !json[QString("RuntimeEnvironment")].isNull() && m_runtime_environment_isValid;

    m_service_execution_role_isValid = ::OpenAPI::fromJsonValue(m_service_execution_role, json[QString("ServiceExecutionRole")]);
    m_service_execution_role_isSet = !json[QString("ServiceExecutionRole")].isNull() && m_service_execution_role_isValid;

    m_application_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_configuration, json[QString("ApplicationConfiguration")]);
    m_application_configuration_isSet = !json[QString("ApplicationConfiguration")].isNull() && m_application_configuration_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_application_mode_isValid = ::OpenAPI::fromJsonValue(m_application_mode, json[QString("ApplicationMode")]);
    m_application_mode_isSet = !json[QString("ApplicationMode")].isNull() && m_application_mode_isValid;
}

QString OAICreateApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_description_isSet) {
        obj.insert(QString("ApplicationDescription"), ::OpenAPI::toJsonValue(m_application_description));
    }
    if (m_runtime_environment.isSet()) {
        obj.insert(QString("RuntimeEnvironment"), ::OpenAPI::toJsonValue(m_runtime_environment));
    }
    if (m_service_execution_role_isSet) {
        obj.insert(QString("ServiceExecutionRole"), ::OpenAPI::toJsonValue(m_service_execution_role));
    }
    if (m_application_configuration.isSet()) {
        obj.insert(QString("ApplicationConfiguration"), ::OpenAPI::toJsonValue(m_application_configuration));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_application_mode.isSet()) {
        obj.insert(QString("ApplicationMode"), ::OpenAPI::toJsonValue(m_application_mode));
    }
    return obj;
}

QString OAICreateApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAICreateApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICreateApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICreateApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAICreateApplicationRequest::getApplicationDescription() const {
    return m_application_description;
}
void OAICreateApplicationRequest::setApplicationDescription(const QString &application_description) {
    m_application_description = application_description;
    m_application_description_isSet = true;
}

bool OAICreateApplicationRequest::is_application_description_Set() const{
    return m_application_description_isSet;
}

bool OAICreateApplicationRequest::is_application_description_Valid() const{
    return m_application_description_isValid;
}

OAIRuntimeEnvironment OAICreateApplicationRequest::getRuntimeEnvironment() const {
    return m_runtime_environment;
}
void OAICreateApplicationRequest::setRuntimeEnvironment(const OAIRuntimeEnvironment &runtime_environment) {
    m_runtime_environment = runtime_environment;
    m_runtime_environment_isSet = true;
}

bool OAICreateApplicationRequest::is_runtime_environment_Set() const{
    return m_runtime_environment_isSet;
}

bool OAICreateApplicationRequest::is_runtime_environment_Valid() const{
    return m_runtime_environment_isValid;
}

QString OAICreateApplicationRequest::getServiceExecutionRole() const {
    return m_service_execution_role;
}
void OAICreateApplicationRequest::setServiceExecutionRole(const QString &service_execution_role) {
    m_service_execution_role = service_execution_role;
    m_service_execution_role_isSet = true;
}

bool OAICreateApplicationRequest::is_service_execution_role_Set() const{
    return m_service_execution_role_isSet;
}

bool OAICreateApplicationRequest::is_service_execution_role_Valid() const{
    return m_service_execution_role_isValid;
}

OAICreateApplicationRequest_ApplicationConfiguration OAICreateApplicationRequest::getApplicationConfiguration() const {
    return m_application_configuration;
}
void OAICreateApplicationRequest::setApplicationConfiguration(const OAICreateApplicationRequest_ApplicationConfiguration &application_configuration) {
    m_application_configuration = application_configuration;
    m_application_configuration_isSet = true;
}

bool OAICreateApplicationRequest::is_application_configuration_Set() const{
    return m_application_configuration_isSet;
}

bool OAICreateApplicationRequest::is_application_configuration_Valid() const{
    return m_application_configuration_isValid;
}

QList OAICreateApplicationRequest::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAICreateApplicationRequest::setCloudWatchLoggingOptions(const QList &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAICreateApplicationRequest::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAICreateApplicationRequest::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

QList OAICreateApplicationRequest::getTags() const {
    return m_tags;
}
void OAICreateApplicationRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIApplicationMode OAICreateApplicationRequest::getApplicationMode() const {
    return m_application_mode;
}
void OAICreateApplicationRequest::setApplicationMode(const OAIApplicationMode &application_mode) {
    m_application_mode = application_mode;
    m_application_mode_isSet = true;
}

bool OAICreateApplicationRequest::is_application_mode_Set() const{
    return m_application_mode_isSet;
}

bool OAICreateApplicationRequest::is_application_mode_Valid() const{
    return m_application_mode_isValid;
}

bool OAICreateApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_execution_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_runtime_environment_isValid && m_service_execution_role_isValid && true;
}

} // namespace OpenAPI
