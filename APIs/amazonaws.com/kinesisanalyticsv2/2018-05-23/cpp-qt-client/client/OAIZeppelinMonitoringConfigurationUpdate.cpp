/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZeppelinMonitoringConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZeppelinMonitoringConfigurationUpdate::OAIZeppelinMonitoringConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZeppelinMonitoringConfigurationUpdate::OAIZeppelinMonitoringConfigurationUpdate() {
    this->initializeModel();
}

OAIZeppelinMonitoringConfigurationUpdate::~OAIZeppelinMonitoringConfigurationUpdate() {}

void OAIZeppelinMonitoringConfigurationUpdate::initializeModel() {

    m_log_level_update_isSet = false;
    m_log_level_update_isValid = false;
}

void OAIZeppelinMonitoringConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZeppelinMonitoringConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_log_level_update_isValid = ::OpenAPI::fromJsonValue(m_log_level_update, json[QString("LogLevelUpdate")]);
    m_log_level_update_isSet = !json[QString("LogLevelUpdate")].isNull() && m_log_level_update_isValid;
}

QString OAIZeppelinMonitoringConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZeppelinMonitoringConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_log_level_update.isSet()) {
        obj.insert(QString("LogLevelUpdate"), ::OpenAPI::toJsonValue(m_log_level_update));
    }
    return obj;
}

OAILogLevel OAIZeppelinMonitoringConfigurationUpdate::getLogLevelUpdate() const {
    return m_log_level_update;
}
void OAIZeppelinMonitoringConfigurationUpdate::setLogLevelUpdate(const OAILogLevel &log_level_update) {
    m_log_level_update = log_level_update;
    m_log_level_update_isSet = true;
}

bool OAIZeppelinMonitoringConfigurationUpdate::is_log_level_update_Set() const{
    return m_log_level_update_isSet;
}

bool OAIZeppelinMonitoringConfigurationUpdate::is_log_level_update_Valid() const{
    return m_log_level_update_isValid;
}

bool OAIZeppelinMonitoringConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_level_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZeppelinMonitoringConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_level_update_isValid && true;
}

} // namespace OpenAPI
