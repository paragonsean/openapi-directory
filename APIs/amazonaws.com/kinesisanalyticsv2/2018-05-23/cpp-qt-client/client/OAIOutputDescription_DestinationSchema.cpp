/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDescription_DestinationSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDescription_DestinationSchema::OAIOutputDescription_DestinationSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDescription_DestinationSchema::OAIOutputDescription_DestinationSchema() {
    this->initializeModel();
}

OAIOutputDescription_DestinationSchema::~OAIOutputDescription_DestinationSchema() {}

void OAIOutputDescription_DestinationSchema::initializeModel() {

    m_record_format_type_isSet = false;
    m_record_format_type_isValid = false;
}

void OAIOutputDescription_DestinationSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDescription_DestinationSchema::fromJsonObject(QJsonObject json) {

    m_record_format_type_isValid = ::OpenAPI::fromJsonValue(m_record_format_type, json[QString("RecordFormatType")]);
    m_record_format_type_isSet = !json[QString("RecordFormatType")].isNull() && m_record_format_type_isValid;
}

QString OAIOutputDescription_DestinationSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDescription_DestinationSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_record_format_type.isSet()) {
        obj.insert(QString("RecordFormatType"), ::OpenAPI::toJsonValue(m_record_format_type));
    }
    return obj;
}

OAIRecordFormatType OAIOutputDescription_DestinationSchema::getRecordFormatType() const {
    return m_record_format_type;
}
void OAIOutputDescription_DestinationSchema::setRecordFormatType(const OAIRecordFormatType &record_format_type) {
    m_record_format_type = record_format_type;
    m_record_format_type_isSet = true;
}

bool OAIOutputDescription_DestinationSchema::is_record_format_type_Set() const{
    return m_record_format_type_isSet;
}

bool OAIOutputDescription_DestinationSchema::is_record_format_type_Valid() const{
    return m_record_format_type_isValid;
}

bool OAIOutputDescription_DestinationSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_format_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDescription_DestinationSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_format_type_isValid && true;
}

} // namespace OpenAPI
