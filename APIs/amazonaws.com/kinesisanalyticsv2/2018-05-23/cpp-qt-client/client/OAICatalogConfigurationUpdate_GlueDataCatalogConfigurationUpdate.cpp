/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate() {
    this->initializeModel();
}

OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::~OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate() {}

void OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::initializeModel() {

    m_database_arn_update_isSet = false;
    m_database_arn_update_isValid = false;
}

void OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_database_arn_update_isValid = ::OpenAPI::fromJsonValue(m_database_arn_update, json[QString("DatabaseARNUpdate")]);
    m_database_arn_update_isSet = !json[QString("DatabaseARNUpdate")].isNull() && m_database_arn_update_isValid;
}

QString OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_database_arn_update_isSet) {
        obj.insert(QString("DatabaseARNUpdate"), ::OpenAPI::toJsonValue(m_database_arn_update));
    }
    return obj;
}

QString OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::getDatabaseArnUpdate() const {
    return m_database_arn_update;
}
void OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::setDatabaseArnUpdate(const QString &database_arn_update) {
    m_database_arn_update = database_arn_update;
    m_database_arn_update_isSet = true;
}

bool OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::is_database_arn_update_Set() const{
    return m_database_arn_update_isSet;
}

bool OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::is_database_arn_update_Valid() const{
    return m_database_arn_update_isValid;
}

bool OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_arn_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogConfigurationUpdate_GlueDataCatalogConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_arn_update_isValid && true;
}

} // namespace OpenAPI
