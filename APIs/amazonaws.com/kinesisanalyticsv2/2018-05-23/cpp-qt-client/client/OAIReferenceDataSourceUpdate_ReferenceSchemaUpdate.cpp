/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate() {
    this->initializeModel();
}

OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::~OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate() {}

void OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::initializeModel() {

    m_record_format_isSet = false;
    m_record_format_isValid = false;

    m_record_encoding_isSet = false;
    m_record_encoding_isValid = false;

    m_record_columns_isSet = false;
    m_record_columns_isValid = false;
}

void OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::fromJsonObject(QJsonObject json) {

    m_record_format_isValid = ::OpenAPI::fromJsonValue(m_record_format, json[QString("RecordFormat")]);
    m_record_format_isSet = !json[QString("RecordFormat")].isNull() && m_record_format_isValid;

    m_record_encoding_isValid = ::OpenAPI::fromJsonValue(m_record_encoding, json[QString("RecordEncoding")]);
    m_record_encoding_isSet = !json[QString("RecordEncoding")].isNull() && m_record_encoding_isValid;

    m_record_columns_isValid = ::OpenAPI::fromJsonValue(m_record_columns, json[QString("RecordColumns")]);
    m_record_columns_isSet = !json[QString("RecordColumns")].isNull() && m_record_columns_isValid;
}

QString OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_record_format.isSet()) {
        obj.insert(QString("RecordFormat"), ::OpenAPI::toJsonValue(m_record_format));
    }
    if (m_record_encoding_isSet) {
        obj.insert(QString("RecordEncoding"), ::OpenAPI::toJsonValue(m_record_encoding));
    }
    if (m_record_columns.isSet()) {
        obj.insert(QString("RecordColumns"), ::OpenAPI::toJsonValue(m_record_columns));
    }
    return obj;
}

OAISourceSchema_RecordFormat OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::getRecordFormat() const {
    return m_record_format;
}
void OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::setRecordFormat(const OAISourceSchema_RecordFormat &record_format) {
    m_record_format = record_format;
    m_record_format_isSet = true;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::is_record_format_Set() const{
    return m_record_format_isSet;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::is_record_format_Valid() const{
    return m_record_format_isValid;
}

QString OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::getRecordEncoding() const {
    return m_record_encoding;
}
void OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::setRecordEncoding(const QString &record_encoding) {
    m_record_encoding = record_encoding;
    m_record_encoding_isSet = true;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::is_record_encoding_Set() const{
    return m_record_encoding_isSet;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::is_record_encoding_Valid() const{
    return m_record_encoding_isValid;
}

QList OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::getRecordColumns() const {
    return m_record_columns;
}
void OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::setRecordColumns(const QList &record_columns) {
    m_record_columns = record_columns;
    m_record_columns_isSet = true;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::is_record_columns_Set() const{
    return m_record_columns_isSet;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::is_record_columns_Valid() const{
    return m_record_columns_isValid;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_format_isValid && m_record_columns_isValid && true;
}

} // namespace OpenAPI
