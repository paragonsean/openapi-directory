/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutput_KinesisStreamsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutput_KinesisStreamsOutput::OAIOutput_KinesisStreamsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutput_KinesisStreamsOutput::OAIOutput_KinesisStreamsOutput() {
    this->initializeModel();
}

OAIOutput_KinesisStreamsOutput::~OAIOutput_KinesisStreamsOutput() {}

void OAIOutput_KinesisStreamsOutput::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIOutput_KinesisStreamsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutput_KinesisStreamsOutput::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;
}

QString OAIOutput_KinesisStreamsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutput_KinesisStreamsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIOutput_KinesisStreamsOutput::getResourceArn() const {
    return m_resource_arn;
}
void OAIOutput_KinesisStreamsOutput::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIOutput_KinesisStreamsOutput::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIOutput_KinesisStreamsOutput::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIOutput_KinesisStreamsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutput_KinesisStreamsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
