/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParallelismConfigurationDescription.h
 *
 * Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously.
 */

#ifndef OAIParallelismConfigurationDescription_H
#define OAIParallelismConfigurationDescription_H

#include <QJsonObject>

#include "OAIConfigurationType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIParallelismConfigurationDescription : public OAIObject {
public:
    OAIParallelismConfigurationDescription();
    OAIParallelismConfigurationDescription(QString json);
    ~OAIParallelismConfigurationDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigurationType getConfigurationType() const;
    void setConfigurationType(const OAIConfigurationType &configuration_type);
    bool is_configuration_type_Set() const;
    bool is_configuration_type_Valid() const;

    qint32 getParallelism() const;
    void setParallelism(const qint32 &parallelism);
    bool is_parallelism_Set() const;
    bool is_parallelism_Valid() const;

    qint32 getParallelismPerKpu() const;
    void setParallelismPerKpu(const qint32 &parallelism_per_kpu);
    bool is_parallelism_per_kpu_Set() const;
    bool is_parallelism_per_kpu_Valid() const;

    qint32 getCurrentParallelism() const;
    void setCurrentParallelism(const qint32 &current_parallelism);
    bool is_current_parallelism_Set() const;
    bool is_current_parallelism_Valid() const;

    bool getAutoScalingEnabled() const;
    void setAutoScalingEnabled(const bool &auto_scaling_enabled);
    bool is_auto_scaling_enabled_Set() const;
    bool is_auto_scaling_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConfigurationType m_configuration_type;
    bool m_configuration_type_isSet;
    bool m_configuration_type_isValid;

    qint32 m_parallelism;
    bool m_parallelism_isSet;
    bool m_parallelism_isValid;

    qint32 m_parallelism_per_kpu;
    bool m_parallelism_per_kpu_isSet;
    bool m_parallelism_per_kpu_isValid;

    qint32 m_current_parallelism;
    bool m_current_parallelism_isSet;
    bool m_current_parallelism_isValid;

    bool m_auto_scaling_enabled;
    bool m_auto_scaling_enabled_isSet;
    bool m_auto_scaling_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParallelismConfigurationDescription)

#endif // OAIParallelismConfigurationDescription_H
