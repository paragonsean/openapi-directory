/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription() {
    this->initializeModel();
}

OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::~OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription() {}

void OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_base_path_isSet = false;
    m_base_path_isValid = false;
}

void OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketARN")]);
    m_bucket_arn_isSet = !json[QString("BucketARN")].isNull() && m_bucket_arn_isValid;

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("BasePath")]);
    m_base_path_isSet = !json[QString("BasePath")].isNull() && m_base_path_isValid;
}

QString OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketARN"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_base_path_isSet) {
        obj.insert(QString("BasePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    return obj;
}

QString OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::getBucketArn() const {
    return m_bucket_arn;
}
void OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::getBasePath() const {
    return m_base_path;
}
void OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::is_base_path_Valid() const{
    return m_base_path_isValid;
}

bool OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployAsApplicationConfigurationDescription_S3ContentLocationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_arn_isValid && true;
}

} // namespace OpenAPI
