/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopApplicationRequest::OAIStopApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopApplicationRequest::OAIStopApplicationRequest() {
    this->initializeModel();
}

OAIStopApplicationRequest::~OAIStopApplicationRequest() {}

void OAIStopApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;
}

void OAIStopApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("Force")]);
    m_force_isSet = !json[QString("Force")].isNull() && m_force_isValid;
}

QString OAIStopApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_force_isSet) {
        obj.insert(QString("Force"), ::OpenAPI::toJsonValue(m_force));
    }
    return obj;
}

QString OAIStopApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIStopApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIStopApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIStopApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

bool OAIStopApplicationRequest::getForce() const {
    return m_force;
}
void OAIStopApplicationRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIStopApplicationRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIStopApplicationRequest::is_force_Valid() const{
    return m_force_isValid;
}

bool OAIStopApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && true;
}

} // namespace OpenAPI
