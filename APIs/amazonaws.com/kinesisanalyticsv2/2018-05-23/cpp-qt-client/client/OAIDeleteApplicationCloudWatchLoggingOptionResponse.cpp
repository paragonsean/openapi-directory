/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteApplicationCloudWatchLoggingOptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteApplicationCloudWatchLoggingOptionResponse::OAIDeleteApplicationCloudWatchLoggingOptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteApplicationCloudWatchLoggingOptionResponse::OAIDeleteApplicationCloudWatchLoggingOptionResponse() {
    this->initializeModel();
}

OAIDeleteApplicationCloudWatchLoggingOptionResponse::~OAIDeleteApplicationCloudWatchLoggingOptionResponse() {}

void OAIDeleteApplicationCloudWatchLoggingOptionResponse::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_cloud_watch_logging_option_descriptions_isSet = false;
    m_cloud_watch_logging_option_descriptions_isValid = false;
}

void OAIDeleteApplicationCloudWatchLoggingOptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteApplicationCloudWatchLoggingOptionResponse::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_cloud_watch_logging_option_descriptions_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_descriptions, json[QString("CloudWatchLoggingOptionDescriptions")]);
    m_cloud_watch_logging_option_descriptions_isSet = !json[QString("CloudWatchLoggingOptionDescriptions")].isNull() && m_cloud_watch_logging_option_descriptions_isValid;
}

QString OAIDeleteApplicationCloudWatchLoggingOptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteApplicationCloudWatchLoggingOptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_cloud_watch_logging_option_descriptions.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptionDescriptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_descriptions));
    }
    return obj;
}

QString OAIDeleteApplicationCloudWatchLoggingOptionResponse::getApplicationArn() const {
    return m_application_arn;
}
void OAIDeleteApplicationCloudWatchLoggingOptionResponse::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

qint32 OAIDeleteApplicationCloudWatchLoggingOptionResponse::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIDeleteApplicationCloudWatchLoggingOptionResponse::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

QList OAIDeleteApplicationCloudWatchLoggingOptionResponse::getCloudWatchLoggingOptionDescriptions() const {
    return m_cloud_watch_logging_option_descriptions;
}
void OAIDeleteApplicationCloudWatchLoggingOptionResponse::setCloudWatchLoggingOptionDescriptions(const QList &cloud_watch_logging_option_descriptions) {
    m_cloud_watch_logging_option_descriptions = cloud_watch_logging_option_descriptions;
    m_cloud_watch_logging_option_descriptions_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::is_cloud_watch_logging_option_descriptions_Set() const{
    return m_cloud_watch_logging_option_descriptions_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::is_cloud_watch_logging_option_descriptions_Valid() const{
    return m_cloud_watch_logging_option_descriptions_isValid;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_option_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
