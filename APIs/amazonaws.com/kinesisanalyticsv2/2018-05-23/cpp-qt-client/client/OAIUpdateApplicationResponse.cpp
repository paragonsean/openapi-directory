/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationResponse::OAIUpdateApplicationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationResponse::OAIUpdateApplicationResponse() {
    this->initializeModel();
}

OAIUpdateApplicationResponse::~OAIUpdateApplicationResponse() {}

void OAIUpdateApplicationResponse::initializeModel() {

    m_application_detail_isSet = false;
    m_application_detail_isValid = false;
}

void OAIUpdateApplicationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationResponse::fromJsonObject(QJsonObject json) {

    m_application_detail_isValid = ::OpenAPI::fromJsonValue(m_application_detail, json[QString("ApplicationDetail")]);
    m_application_detail_isSet = !json[QString("ApplicationDetail")].isNull() && m_application_detail_isValid;
}

QString OAIUpdateApplicationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_detail.isSet()) {
        obj.insert(QString("ApplicationDetail"), ::OpenAPI::toJsonValue(m_application_detail));
    }
    return obj;
}

OAIUpdateApplicationResponse_ApplicationDetail OAIUpdateApplicationResponse::getApplicationDetail() const {
    return m_application_detail;
}
void OAIUpdateApplicationResponse::setApplicationDetail(const OAIUpdateApplicationResponse_ApplicationDetail &application_detail) {
    m_application_detail = application_detail;
    m_application_detail_isSet = true;
}

bool OAIUpdateApplicationResponse::is_application_detail_Set() const{
    return m_application_detail_isSet;
}

bool OAIUpdateApplicationResponse::is_application_detail_Valid() const{
    return m_application_detail_isValid;
}

bool OAIUpdateApplicationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_detail_isValid && true;
}

} // namespace OpenAPI
