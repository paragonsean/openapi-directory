/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyGroup::OAIPropertyGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyGroup::OAIPropertyGroup() {
    this->initializeModel();
}

OAIPropertyGroup::~OAIPropertyGroup() {}

void OAIPropertyGroup::initializeModel() {

    m_property_group_id_isSet = false;
    m_property_group_id_isValid = false;

    m_property_map_isSet = false;
    m_property_map_isValid = false;
}

void OAIPropertyGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyGroup::fromJsonObject(QJsonObject json) {

    m_property_group_id_isValid = ::OpenAPI::fromJsonValue(m_property_group_id, json[QString("PropertyGroupId")]);
    m_property_group_id_isSet = !json[QString("PropertyGroupId")].isNull() && m_property_group_id_isValid;

    m_property_map_isValid = ::OpenAPI::fromJsonValue(m_property_map, json[QString("PropertyMap")]);
    m_property_map_isSet = !json[QString("PropertyMap")].isNull() && m_property_map_isValid;
}

QString OAIPropertyGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_property_group_id_isSet) {
        obj.insert(QString("PropertyGroupId"), ::OpenAPI::toJsonValue(m_property_group_id));
    }
    if (m_property_map.isSet()) {
        obj.insert(QString("PropertyMap"), ::OpenAPI::toJsonValue(m_property_map));
    }
    return obj;
}

QString OAIPropertyGroup::getPropertyGroupId() const {
    return m_property_group_id;
}
void OAIPropertyGroup::setPropertyGroupId(const QString &property_group_id) {
    m_property_group_id = property_group_id;
    m_property_group_id_isSet = true;
}

bool OAIPropertyGroup::is_property_group_id_Set() const{
    return m_property_group_id_isSet;
}

bool OAIPropertyGroup::is_property_group_id_Valid() const{
    return m_property_group_id_isValid;
}

QMap OAIPropertyGroup::getPropertyMap() const {
    return m_property_map;
}
void OAIPropertyGroup::setPropertyMap(const QMap &property_map) {
    m_property_map = property_map;
    m_property_map_isSet = true;
}

bool OAIPropertyGroup::is_property_map_Set() const{
    return m_property_map_isSet;
}

bool OAIPropertyGroup::is_property_map_Valid() const{
    return m_property_map_isValid;
}

bool OAIPropertyGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_property_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_map.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_property_group_id_isValid && m_property_map_isValid && true;
}

} // namespace OpenAPI
