/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogConfiguration::OAICatalogConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogConfiguration::OAICatalogConfiguration() {
    this->initializeModel();
}

OAICatalogConfiguration::~OAICatalogConfiguration() {}

void OAICatalogConfiguration::initializeModel() {

    m_glue_data_catalog_configuration_isSet = false;
    m_glue_data_catalog_configuration_isValid = false;
}

void OAICatalogConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogConfiguration::fromJsonObject(QJsonObject json) {

    m_glue_data_catalog_configuration_isValid = ::OpenAPI::fromJsonValue(m_glue_data_catalog_configuration, json[QString("GlueDataCatalogConfiguration")]);
    m_glue_data_catalog_configuration_isSet = !json[QString("GlueDataCatalogConfiguration")].isNull() && m_glue_data_catalog_configuration_isValid;
}

QString OAICatalogConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_glue_data_catalog_configuration.isSet()) {
        obj.insert(QString("GlueDataCatalogConfiguration"), ::OpenAPI::toJsonValue(m_glue_data_catalog_configuration));
    }
    return obj;
}

OAICatalogConfiguration_GlueDataCatalogConfiguration OAICatalogConfiguration::getGlueDataCatalogConfiguration() const {
    return m_glue_data_catalog_configuration;
}
void OAICatalogConfiguration::setGlueDataCatalogConfiguration(const OAICatalogConfiguration_GlueDataCatalogConfiguration &glue_data_catalog_configuration) {
    m_glue_data_catalog_configuration = glue_data_catalog_configuration;
    m_glue_data_catalog_configuration_isSet = true;
}

bool OAICatalogConfiguration::is_glue_data_catalog_configuration_Set() const{
    return m_glue_data_catalog_configuration_isSet;
}

bool OAICatalogConfiguration::is_glue_data_catalog_configuration_Valid() const{
    return m_glue_data_catalog_configuration_isValid;
}

bool OAICatalogConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_glue_data_catalog_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_glue_data_catalog_configuration_isValid && true;
}

} // namespace OpenAPI
