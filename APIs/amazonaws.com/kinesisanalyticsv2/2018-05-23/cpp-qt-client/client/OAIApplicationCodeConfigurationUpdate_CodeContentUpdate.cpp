/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCodeConfigurationUpdate_CodeContentUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::OAIApplicationCodeConfigurationUpdate_CodeContentUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::OAIApplicationCodeConfigurationUpdate_CodeContentUpdate() {
    this->initializeModel();
}

OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::~OAIApplicationCodeConfigurationUpdate_CodeContentUpdate() {}

void OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::initializeModel() {

    m_text_content_update_isSet = false;
    m_text_content_update_isValid = false;

    m_zip_file_content_update_isSet = false;
    m_zip_file_content_update_isValid = false;

    m_s3_content_location_update_isSet = false;
    m_s3_content_location_update_isValid = false;
}

void OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::fromJsonObject(QJsonObject json) {

    m_text_content_update_isValid = ::OpenAPI::fromJsonValue(m_text_content_update, json[QString("TextContentUpdate")]);
    m_text_content_update_isSet = !json[QString("TextContentUpdate")].isNull() && m_text_content_update_isValid;

    m_zip_file_content_update_isValid = ::OpenAPI::fromJsonValue(m_zip_file_content_update, json[QString("ZipFileContentUpdate")]);
    m_zip_file_content_update_isSet = !json[QString("ZipFileContentUpdate")].isNull() && m_zip_file_content_update_isValid;

    m_s3_content_location_update_isValid = ::OpenAPI::fromJsonValue(m_s3_content_location_update, json[QString("S3ContentLocationUpdate")]);
    m_s3_content_location_update_isSet = !json[QString("S3ContentLocationUpdate")].isNull() && m_s3_content_location_update_isValid;
}

QString OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_text_content_update_isSet) {
        obj.insert(QString("TextContentUpdate"), ::OpenAPI::toJsonValue(m_text_content_update));
    }
    if (m_zip_file_content_update_isSet) {
        obj.insert(QString("ZipFileContentUpdate"), ::OpenAPI::toJsonValue(m_zip_file_content_update));
    }
    if (m_s3_content_location_update.isSet()) {
        obj.insert(QString("S3ContentLocationUpdate"), ::OpenAPI::toJsonValue(m_s3_content_location_update));
    }
    return obj;
}

QString OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::getTextContentUpdate() const {
    return m_text_content_update;
}
void OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::setTextContentUpdate(const QString &text_content_update) {
    m_text_content_update = text_content_update;
    m_text_content_update_isSet = true;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::is_text_content_update_Set() const{
    return m_text_content_update_isSet;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::is_text_content_update_Valid() const{
    return m_text_content_update_isValid;
}

QString OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::getZipFileContentUpdate() const {
    return m_zip_file_content_update;
}
void OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::setZipFileContentUpdate(const QString &zip_file_content_update) {
    m_zip_file_content_update = zip_file_content_update;
    m_zip_file_content_update_isSet = true;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::is_zip_file_content_update_Set() const{
    return m_zip_file_content_update_isSet;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::is_zip_file_content_update_Valid() const{
    return m_zip_file_content_update_isValid;
}

OAICodeContentUpdate_S3ContentLocationUpdate OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::getS3ContentLocationUpdate() const {
    return m_s3_content_location_update;
}
void OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::setS3ContentLocationUpdate(const OAICodeContentUpdate_S3ContentLocationUpdate &s3_content_location_update) {
    m_s3_content_location_update = s3_content_location_update;
    m_s3_content_location_update_isSet = true;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::is_s3_content_location_update_Set() const{
    return m_s3_content_location_update_isSet;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::is_s3_content_location_update_Valid() const{
    return m_s3_content_location_update_isValid;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_content_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_file_content_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_content_location_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCodeConfigurationUpdate_CodeContentUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
