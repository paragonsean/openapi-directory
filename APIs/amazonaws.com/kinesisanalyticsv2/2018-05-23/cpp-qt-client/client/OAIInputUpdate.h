/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInputUpdate.h
 *
 * For a SQL-based Kinesis Data Analytics application, describes updates to a specific input configuration (identified by the &lt;code&gt;InputId&lt;/code&gt; of an application). 
 */

#ifndef OAIInputUpdate_H
#define OAIInputUpdate_H

#include <QJsonObject>

#include "OAIInputUpdate_InputParallelismUpdate.h"
#include "OAIInputUpdate_InputProcessingConfigurationUpdate.h"
#include "OAIInputUpdate_InputSchemaUpdate.h"
#include "OAIInputUpdate_KinesisFirehoseInputUpdate.h"
#include "OAIInputUpdate_KinesisStreamsInputUpdate.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputUpdate_InputProcessingConfigurationUpdate;
class OAIInputUpdate_KinesisStreamsInputUpdate;
class OAIInputUpdate_KinesisFirehoseInputUpdate;
class OAIInputUpdate_InputSchemaUpdate;
class OAIInputUpdate_InputParallelismUpdate;

class OAIInputUpdate : public OAIObject {
public:
    OAIInputUpdate();
    OAIInputUpdate(QString json);
    ~OAIInputUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInputId() const;
    void setInputId(const QString &input_id);
    bool is_input_id_Set() const;
    bool is_input_id_Valid() const;

    QString getNamePrefixUpdate() const;
    void setNamePrefixUpdate(const QString &name_prefix_update);
    bool is_name_prefix_update_Set() const;
    bool is_name_prefix_update_Valid() const;

    OAIInputUpdate_InputProcessingConfigurationUpdate getInputProcessingConfigurationUpdate() const;
    void setInputProcessingConfigurationUpdate(const OAIInputUpdate_InputProcessingConfigurationUpdate &input_processing_configuration_update);
    bool is_input_processing_configuration_update_Set() const;
    bool is_input_processing_configuration_update_Valid() const;

    OAIInputUpdate_KinesisStreamsInputUpdate getKinesisStreamsInputUpdate() const;
    void setKinesisStreamsInputUpdate(const OAIInputUpdate_KinesisStreamsInputUpdate &kinesis_streams_input_update);
    bool is_kinesis_streams_input_update_Set() const;
    bool is_kinesis_streams_input_update_Valid() const;

    OAIInputUpdate_KinesisFirehoseInputUpdate getKinesisFirehoseInputUpdate() const;
    void setKinesisFirehoseInputUpdate(const OAIInputUpdate_KinesisFirehoseInputUpdate &kinesis_firehose_input_update);
    bool is_kinesis_firehose_input_update_Set() const;
    bool is_kinesis_firehose_input_update_Valid() const;

    OAIInputUpdate_InputSchemaUpdate getInputSchemaUpdate() const;
    void setInputSchemaUpdate(const OAIInputUpdate_InputSchemaUpdate &input_schema_update);
    bool is_input_schema_update_Set() const;
    bool is_input_schema_update_Valid() const;

    OAIInputUpdate_InputParallelismUpdate getInputParallelismUpdate() const;
    void setInputParallelismUpdate(const OAIInputUpdate_InputParallelismUpdate &input_parallelism_update);
    bool is_input_parallelism_update_Set() const;
    bool is_input_parallelism_update_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_input_id;
    bool m_input_id_isSet;
    bool m_input_id_isValid;

    QString m_name_prefix_update;
    bool m_name_prefix_update_isSet;
    bool m_name_prefix_update_isValid;

    OAIInputUpdate_InputProcessingConfigurationUpdate m_input_processing_configuration_update;
    bool m_input_processing_configuration_update_isSet;
    bool m_input_processing_configuration_update_isValid;

    OAIInputUpdate_KinesisStreamsInputUpdate m_kinesis_streams_input_update;
    bool m_kinesis_streams_input_update_isSet;
    bool m_kinesis_streams_input_update_isValid;

    OAIInputUpdate_KinesisFirehoseInputUpdate m_kinesis_firehose_input_update;
    bool m_kinesis_firehose_input_update_isSet;
    bool m_kinesis_firehose_input_update_isValid;

    OAIInputUpdate_InputSchemaUpdate m_input_schema_update;
    bool m_input_schema_update_isSet;
    bool m_input_schema_update_isValid;

    OAIInputUpdate_InputParallelismUpdate m_input_parallelism_update;
    bool m_input_parallelism_update_isSet;
    bool m_input_parallelism_update_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInputUpdate)

#endif // OAIInputUpdate_H
