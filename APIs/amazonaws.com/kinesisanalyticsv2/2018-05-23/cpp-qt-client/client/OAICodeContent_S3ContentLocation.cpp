/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeContent_S3ContentLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeContent_S3ContentLocation::OAICodeContent_S3ContentLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeContent_S3ContentLocation::OAICodeContent_S3ContentLocation() {
    this->initializeModel();
}

OAICodeContent_S3ContentLocation::~OAICodeContent_S3ContentLocation() {}

void OAICodeContent_S3ContentLocation::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_file_key_isSet = false;
    m_file_key_isValid = false;

    m_object_version_isSet = false;
    m_object_version_isValid = false;
}

void OAICodeContent_S3ContentLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeContent_S3ContentLocation::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketARN")]);
    m_bucket_arn_isSet = !json[QString("BucketARN")].isNull() && m_bucket_arn_isValid;

    m_file_key_isValid = ::OpenAPI::fromJsonValue(m_file_key, json[QString("FileKey")]);
    m_file_key_isSet = !json[QString("FileKey")].isNull() && m_file_key_isValid;

    m_object_version_isValid = ::OpenAPI::fromJsonValue(m_object_version, json[QString("ObjectVersion")]);
    m_object_version_isSet = !json[QString("ObjectVersion")].isNull() && m_object_version_isValid;
}

QString OAICodeContent_S3ContentLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeContent_S3ContentLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketARN"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_file_key_isSet) {
        obj.insert(QString("FileKey"), ::OpenAPI::toJsonValue(m_file_key));
    }
    if (m_object_version_isSet) {
        obj.insert(QString("ObjectVersion"), ::OpenAPI::toJsonValue(m_object_version));
    }
    return obj;
}

QString OAICodeContent_S3ContentLocation::getBucketArn() const {
    return m_bucket_arn;
}
void OAICodeContent_S3ContentLocation::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAICodeContent_S3ContentLocation::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAICodeContent_S3ContentLocation::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAICodeContent_S3ContentLocation::getFileKey() const {
    return m_file_key;
}
void OAICodeContent_S3ContentLocation::setFileKey(const QString &file_key) {
    m_file_key = file_key;
    m_file_key_isSet = true;
}

bool OAICodeContent_S3ContentLocation::is_file_key_Set() const{
    return m_file_key_isSet;
}

bool OAICodeContent_S3ContentLocation::is_file_key_Valid() const{
    return m_file_key_isValid;
}

QString OAICodeContent_S3ContentLocation::getObjectVersion() const {
    return m_object_version;
}
void OAICodeContent_S3ContentLocation::setObjectVersion(const QString &object_version) {
    m_object_version = object_version;
    m_object_version_isSet = true;
}

bool OAICodeContent_S3ContentLocation::is_object_version_Set() const{
    return m_object_version_isSet;
}

bool OAICodeContent_S3ContentLocation::is_object_version_Valid() const{
    return m_object_version_isValid;
}

bool OAICodeContent_S3ContentLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeContent_S3ContentLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_arn_isValid && m_file_key_isValid && true;
}

} // namespace OpenAPI
