/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceDataSourceUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceDataSourceUpdate::OAIReferenceDataSourceUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceDataSourceUpdate::OAIReferenceDataSourceUpdate() {
    this->initializeModel();
}

OAIReferenceDataSourceUpdate::~OAIReferenceDataSourceUpdate() {}

void OAIReferenceDataSourceUpdate::initializeModel() {

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_table_name_update_isSet = false;
    m_table_name_update_isValid = false;

    m_s3_reference_data_source_update_isSet = false;
    m_s3_reference_data_source_update_isValid = false;

    m_reference_schema_update_isSet = false;
    m_reference_schema_update_isValid = false;
}

void OAIReferenceDataSourceUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceDataSourceUpdate::fromJsonObject(QJsonObject json) {

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_table_name_update_isValid = ::OpenAPI::fromJsonValue(m_table_name_update, json[QString("TableNameUpdate")]);
    m_table_name_update_isSet = !json[QString("TableNameUpdate")].isNull() && m_table_name_update_isValid;

    m_s3_reference_data_source_update_isValid = ::OpenAPI::fromJsonValue(m_s3_reference_data_source_update, json[QString("S3ReferenceDataSourceUpdate")]);
    m_s3_reference_data_source_update_isSet = !json[QString("S3ReferenceDataSourceUpdate")].isNull() && m_s3_reference_data_source_update_isValid;

    m_reference_schema_update_isValid = ::OpenAPI::fromJsonValue(m_reference_schema_update, json[QString("ReferenceSchemaUpdate")]);
    m_reference_schema_update_isSet = !json[QString("ReferenceSchemaUpdate")].isNull() && m_reference_schema_update_isValid;
}

QString OAIReferenceDataSourceUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceDataSourceUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_table_name_update_isSet) {
        obj.insert(QString("TableNameUpdate"), ::OpenAPI::toJsonValue(m_table_name_update));
    }
    if (m_s3_reference_data_source_update.isSet()) {
        obj.insert(QString("S3ReferenceDataSourceUpdate"), ::OpenAPI::toJsonValue(m_s3_reference_data_source_update));
    }
    if (m_reference_schema_update.isSet()) {
        obj.insert(QString("ReferenceSchemaUpdate"), ::OpenAPI::toJsonValue(m_reference_schema_update));
    }
    return obj;
}

QString OAIReferenceDataSourceUpdate::getReferenceId() const {
    return m_reference_id;
}
void OAIReferenceDataSourceUpdate::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIReferenceDataSourceUpdate::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIReferenceDataSourceUpdate::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIReferenceDataSourceUpdate::getTableNameUpdate() const {
    return m_table_name_update;
}
void OAIReferenceDataSourceUpdate::setTableNameUpdate(const QString &table_name_update) {
    m_table_name_update = table_name_update;
    m_table_name_update_isSet = true;
}

bool OAIReferenceDataSourceUpdate::is_table_name_update_Set() const{
    return m_table_name_update_isSet;
}

bool OAIReferenceDataSourceUpdate::is_table_name_update_Valid() const{
    return m_table_name_update_isValid;
}

OAIReferenceDataSourceUpdate_S3ReferenceDataSourceUpdate OAIReferenceDataSourceUpdate::getS3ReferenceDataSourceUpdate() const {
    return m_s3_reference_data_source_update;
}
void OAIReferenceDataSourceUpdate::setS3ReferenceDataSourceUpdate(const OAIReferenceDataSourceUpdate_S3ReferenceDataSourceUpdate &s3_reference_data_source_update) {
    m_s3_reference_data_source_update = s3_reference_data_source_update;
    m_s3_reference_data_source_update_isSet = true;
}

bool OAIReferenceDataSourceUpdate::is_s3_reference_data_source_update_Set() const{
    return m_s3_reference_data_source_update_isSet;
}

bool OAIReferenceDataSourceUpdate::is_s3_reference_data_source_update_Valid() const{
    return m_s3_reference_data_source_update_isValid;
}

OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate OAIReferenceDataSourceUpdate::getReferenceSchemaUpdate() const {
    return m_reference_schema_update;
}
void OAIReferenceDataSourceUpdate::setReferenceSchemaUpdate(const OAIReferenceDataSourceUpdate_ReferenceSchemaUpdate &reference_schema_update) {
    m_reference_schema_update = reference_schema_update;
    m_reference_schema_update_isSet = true;
}

bool OAIReferenceDataSourceUpdate::is_reference_schema_update_Set() const{
    return m_reference_schema_update_isSet;
}

bool OAIReferenceDataSourceUpdate::is_reference_schema_update_Valid() const{
    return m_reference_schema_update_isValid;
}

bool OAIReferenceDataSourceUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_reference_data_source_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_schema_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceDataSourceUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_id_isValid && true;
}

} // namespace OpenAPI
