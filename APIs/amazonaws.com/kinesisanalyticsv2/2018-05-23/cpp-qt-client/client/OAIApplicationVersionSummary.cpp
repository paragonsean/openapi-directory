/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationVersionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationVersionSummary::OAIApplicationVersionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationVersionSummary::OAIApplicationVersionSummary() {
    this->initializeModel();
}

OAIApplicationVersionSummary::~OAIApplicationVersionSummary() {}

void OAIApplicationVersionSummary::initializeModel() {

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_application_status_isSet = false;
    m_application_status_isValid = false;
}

void OAIApplicationVersionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationVersionSummary::fromJsonObject(QJsonObject json) {

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_application_status_isValid = ::OpenAPI::fromJsonValue(m_application_status, json[QString("ApplicationStatus")]);
    m_application_status_isSet = !json[QString("ApplicationStatus")].isNull() && m_application_status_isValid;
}

QString OAIApplicationVersionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationVersionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_application_status.isSet()) {
        obj.insert(QString("ApplicationStatus"), ::OpenAPI::toJsonValue(m_application_status));
    }
    return obj;
}

qint32 OAIApplicationVersionSummary::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIApplicationVersionSummary::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIApplicationVersionSummary::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIApplicationVersionSummary::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

OAIApplicationStatus OAIApplicationVersionSummary::getApplicationStatus() const {
    return m_application_status;
}
void OAIApplicationVersionSummary::setApplicationStatus(const OAIApplicationStatus &application_status) {
    m_application_status = application_status;
    m_application_status_isSet = true;
}

bool OAIApplicationVersionSummary::is_application_status_Set() const{
    return m_application_status_isSet;
}

bool OAIApplicationVersionSummary::is_application_status_Valid() const{
    return m_application_status_isValid;
}

bool OAIApplicationVersionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationVersionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_version_id_isValid && m_application_status_isValid && true;
}

} // namespace OpenAPI
