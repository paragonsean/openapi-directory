/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationOutputRequest_Output.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationOutputRequest_Output::OAIAddApplicationOutputRequest_Output(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationOutputRequest_Output::OAIAddApplicationOutputRequest_Output() {
    this->initializeModel();
}

OAIAddApplicationOutputRequest_Output::~OAIAddApplicationOutputRequest_Output() {}

void OAIAddApplicationOutputRequest_Output::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_kinesis_streams_output_isSet = false;
    m_kinesis_streams_output_isValid = false;

    m_kinesis_firehose_output_isSet = false;
    m_kinesis_firehose_output_isValid = false;

    m_lambda_output_isSet = false;
    m_lambda_output_isValid = false;

    m_destination_schema_isSet = false;
    m_destination_schema_isValid = false;
}

void OAIAddApplicationOutputRequest_Output::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationOutputRequest_Output::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_kinesis_streams_output_isValid = ::OpenAPI::fromJsonValue(m_kinesis_streams_output, json[QString("KinesisStreamsOutput")]);
    m_kinesis_streams_output_isSet = !json[QString("KinesisStreamsOutput")].isNull() && m_kinesis_streams_output_isValid;

    m_kinesis_firehose_output_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_output, json[QString("KinesisFirehoseOutput")]);
    m_kinesis_firehose_output_isSet = !json[QString("KinesisFirehoseOutput")].isNull() && m_kinesis_firehose_output_isValid;

    m_lambda_output_isValid = ::OpenAPI::fromJsonValue(m_lambda_output, json[QString("LambdaOutput")]);
    m_lambda_output_isSet = !json[QString("LambdaOutput")].isNull() && m_lambda_output_isValid;

    m_destination_schema_isValid = ::OpenAPI::fromJsonValue(m_destination_schema, json[QString("DestinationSchema")]);
    m_destination_schema_isSet = !json[QString("DestinationSchema")].isNull() && m_destination_schema_isValid;
}

QString OAIAddApplicationOutputRequest_Output::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationOutputRequest_Output::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_kinesis_streams_output.isSet()) {
        obj.insert(QString("KinesisStreamsOutput"), ::OpenAPI::toJsonValue(m_kinesis_streams_output));
    }
    if (m_kinesis_firehose_output.isSet()) {
        obj.insert(QString("KinesisFirehoseOutput"), ::OpenAPI::toJsonValue(m_kinesis_firehose_output));
    }
    if (m_lambda_output.isSet()) {
        obj.insert(QString("LambdaOutput"), ::OpenAPI::toJsonValue(m_lambda_output));
    }
    if (m_destination_schema.isSet()) {
        obj.insert(QString("DestinationSchema"), ::OpenAPI::toJsonValue(m_destination_schema));
    }
    return obj;
}

QString OAIAddApplicationOutputRequest_Output::getName() const {
    return m_name;
}
void OAIAddApplicationOutputRequest_Output::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddApplicationOutputRequest_Output::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddApplicationOutputRequest_Output::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutput_KinesisStreamsOutput OAIAddApplicationOutputRequest_Output::getKinesisStreamsOutput() const {
    return m_kinesis_streams_output;
}
void OAIAddApplicationOutputRequest_Output::setKinesisStreamsOutput(const OAIOutput_KinesisStreamsOutput &kinesis_streams_output) {
    m_kinesis_streams_output = kinesis_streams_output;
    m_kinesis_streams_output_isSet = true;
}

bool OAIAddApplicationOutputRequest_Output::is_kinesis_streams_output_Set() const{
    return m_kinesis_streams_output_isSet;
}

bool OAIAddApplicationOutputRequest_Output::is_kinesis_streams_output_Valid() const{
    return m_kinesis_streams_output_isValid;
}

OAIOutput_KinesisFirehoseOutput OAIAddApplicationOutputRequest_Output::getKinesisFirehoseOutput() const {
    return m_kinesis_firehose_output;
}
void OAIAddApplicationOutputRequest_Output::setKinesisFirehoseOutput(const OAIOutput_KinesisFirehoseOutput &kinesis_firehose_output) {
    m_kinesis_firehose_output = kinesis_firehose_output;
    m_kinesis_firehose_output_isSet = true;
}

bool OAIAddApplicationOutputRequest_Output::is_kinesis_firehose_output_Set() const{
    return m_kinesis_firehose_output_isSet;
}

bool OAIAddApplicationOutputRequest_Output::is_kinesis_firehose_output_Valid() const{
    return m_kinesis_firehose_output_isValid;
}

OAIOutput_LambdaOutput OAIAddApplicationOutputRequest_Output::getLambdaOutput() const {
    return m_lambda_output;
}
void OAIAddApplicationOutputRequest_Output::setLambdaOutput(const OAIOutput_LambdaOutput &lambda_output) {
    m_lambda_output = lambda_output;
    m_lambda_output_isSet = true;
}

bool OAIAddApplicationOutputRequest_Output::is_lambda_output_Set() const{
    return m_lambda_output_isSet;
}

bool OAIAddApplicationOutputRequest_Output::is_lambda_output_Valid() const{
    return m_lambda_output_isValid;
}

OAIOutput_DestinationSchema OAIAddApplicationOutputRequest_Output::getDestinationSchema() const {
    return m_destination_schema;
}
void OAIAddApplicationOutputRequest_Output::setDestinationSchema(const OAIOutput_DestinationSchema &destination_schema) {
    m_destination_schema = destination_schema;
    m_destination_schema_isSet = true;
}

bool OAIAddApplicationOutputRequest_Output::is_destination_schema_Set() const{
    return m_destination_schema_isSet;
}

bool OAIAddApplicationOutputRequest_Output::is_destination_schema_Valid() const{
    return m_destination_schema_isValid;
}

bool OAIAddApplicationOutputRequest_Output::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_streams_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationOutputRequest_Output::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_destination_schema_isValid && true;
}

} // namespace OpenAPI
