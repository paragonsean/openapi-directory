/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationReferenceDataSourceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationReferenceDataSourceResponse::OAIAddApplicationReferenceDataSourceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationReferenceDataSourceResponse::OAIAddApplicationReferenceDataSourceResponse() {
    this->initializeModel();
}

OAIAddApplicationReferenceDataSourceResponse::~OAIAddApplicationReferenceDataSourceResponse() {}

void OAIAddApplicationReferenceDataSourceResponse::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_reference_data_source_descriptions_isSet = false;
    m_reference_data_source_descriptions_isValid = false;
}

void OAIAddApplicationReferenceDataSourceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationReferenceDataSourceResponse::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_reference_data_source_descriptions_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source_descriptions, json[QString("ReferenceDataSourceDescriptions")]);
    m_reference_data_source_descriptions_isSet = !json[QString("ReferenceDataSourceDescriptions")].isNull() && m_reference_data_source_descriptions_isValid;
}

QString OAIAddApplicationReferenceDataSourceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationReferenceDataSourceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_reference_data_source_descriptions.isSet()) {
        obj.insert(QString("ReferenceDataSourceDescriptions"), ::OpenAPI::toJsonValue(m_reference_data_source_descriptions));
    }
    return obj;
}

QString OAIAddApplicationReferenceDataSourceResponse::getApplicationArn() const {
    return m_application_arn;
}
void OAIAddApplicationReferenceDataSourceResponse::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIAddApplicationReferenceDataSourceResponse::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIAddApplicationReferenceDataSourceResponse::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

qint32 OAIAddApplicationReferenceDataSourceResponse::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIAddApplicationReferenceDataSourceResponse::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIAddApplicationReferenceDataSourceResponse::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIAddApplicationReferenceDataSourceResponse::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

QList OAIAddApplicationReferenceDataSourceResponse::getReferenceDataSourceDescriptions() const {
    return m_reference_data_source_descriptions;
}
void OAIAddApplicationReferenceDataSourceResponse::setReferenceDataSourceDescriptions(const QList &reference_data_source_descriptions) {
    m_reference_data_source_descriptions = reference_data_source_descriptions;
    m_reference_data_source_descriptions_isSet = true;
}

bool OAIAddApplicationReferenceDataSourceResponse::is_reference_data_source_descriptions_Set() const{
    return m_reference_data_source_descriptions_isSet;
}

bool OAIAddApplicationReferenceDataSourceResponse::is_reference_data_source_descriptions_Valid() const{
    return m_reference_data_source_descriptions_isValid;
}

bool OAIAddApplicationReferenceDataSourceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationReferenceDataSourceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
