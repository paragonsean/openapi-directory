/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput_InputProcessingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput_InputProcessingConfiguration::OAIInput_InputProcessingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput_InputProcessingConfiguration::OAIInput_InputProcessingConfiguration() {
    this->initializeModel();
}

OAIInput_InputProcessingConfiguration::~OAIInput_InputProcessingConfiguration() {}

void OAIInput_InputProcessingConfiguration::initializeModel() {

    m_input_lambda_processor_isSet = false;
    m_input_lambda_processor_isValid = false;
}

void OAIInput_InputProcessingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput_InputProcessingConfiguration::fromJsonObject(QJsonObject json) {

    m_input_lambda_processor_isValid = ::OpenAPI::fromJsonValue(m_input_lambda_processor, json[QString("InputLambdaProcessor")]);
    m_input_lambda_processor_isSet = !json[QString("InputLambdaProcessor")].isNull() && m_input_lambda_processor_isValid;
}

QString OAIInput_InputProcessingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput_InputProcessingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_input_lambda_processor.isSet()) {
        obj.insert(QString("InputLambdaProcessor"), ::OpenAPI::toJsonValue(m_input_lambda_processor));
    }
    return obj;
}

OAIInputProcessingConfiguration_InputLambdaProcessor OAIInput_InputProcessingConfiguration::getInputLambdaProcessor() const {
    return m_input_lambda_processor;
}
void OAIInput_InputProcessingConfiguration::setInputLambdaProcessor(const OAIInputProcessingConfiguration_InputLambdaProcessor &input_lambda_processor) {
    m_input_lambda_processor = input_lambda_processor;
    m_input_lambda_processor_isSet = true;
}

bool OAIInput_InputProcessingConfiguration::is_input_lambda_processor_Set() const{
    return m_input_lambda_processor_isSet;
}

bool OAIInput_InputProcessingConfiguration::is_input_lambda_processor_Valid() const{
    return m_input_lambda_processor_isValid;
}

bool OAIInput_InputProcessingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_lambda_processor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput_InputProcessingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_lambda_processor_isValid && true;
}

} // namespace OpenAPI
