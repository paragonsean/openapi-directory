/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::~OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate() {}

void OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::initializeModel() {

    m_checkpoint_configuration_update_isSet = false;
    m_checkpoint_configuration_update_isValid = false;

    m_monitoring_configuration_update_isSet = false;
    m_monitoring_configuration_update_isValid = false;

    m_parallelism_configuration_update_isSet = false;
    m_parallelism_configuration_update_isValid = false;
}

void OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_checkpoint_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_configuration_update, json[QString("CheckpointConfigurationUpdate")]);
    m_checkpoint_configuration_update_isSet = !json[QString("CheckpointConfigurationUpdate")].isNull() && m_checkpoint_configuration_update_isValid;

    m_monitoring_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration_update, json[QString("MonitoringConfigurationUpdate")]);
    m_monitoring_configuration_update_isSet = !json[QString("MonitoringConfigurationUpdate")].isNull() && m_monitoring_configuration_update_isValid;

    m_parallelism_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration_update, json[QString("ParallelismConfigurationUpdate")]);
    m_parallelism_configuration_update_isSet = !json[QString("ParallelismConfigurationUpdate")].isNull() && m_parallelism_configuration_update_isValid;
}

QString OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_checkpoint_configuration_update.isSet()) {
        obj.insert(QString("CheckpointConfigurationUpdate"), ::OpenAPI::toJsonValue(m_checkpoint_configuration_update));
    }
    if (m_monitoring_configuration_update.isSet()) {
        obj.insert(QString("MonitoringConfigurationUpdate"), ::OpenAPI::toJsonValue(m_monitoring_configuration_update));
    }
    if (m_parallelism_configuration_update.isSet()) {
        obj.insert(QString("ParallelismConfigurationUpdate"), ::OpenAPI::toJsonValue(m_parallelism_configuration_update));
    }
    return obj;
}

OAIFlinkApplicationConfigurationUpdate_CheckpointConfigurationUpdate OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::getCheckpointConfigurationUpdate() const {
    return m_checkpoint_configuration_update;
}
void OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::setCheckpointConfigurationUpdate(const OAIFlinkApplicationConfigurationUpdate_CheckpointConfigurationUpdate &checkpoint_configuration_update) {
    m_checkpoint_configuration_update = checkpoint_configuration_update;
    m_checkpoint_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::is_checkpoint_configuration_update_Set() const{
    return m_checkpoint_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::is_checkpoint_configuration_update_Valid() const{
    return m_checkpoint_configuration_update_isValid;
}

OAIFlinkApplicationConfigurationUpdate_MonitoringConfigurationUpdate OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::getMonitoringConfigurationUpdate() const {
    return m_monitoring_configuration_update;
}
void OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::setMonitoringConfigurationUpdate(const OAIFlinkApplicationConfigurationUpdate_MonitoringConfigurationUpdate &monitoring_configuration_update) {
    m_monitoring_configuration_update = monitoring_configuration_update;
    m_monitoring_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::is_monitoring_configuration_update_Set() const{
    return m_monitoring_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::is_monitoring_configuration_update_Valid() const{
    return m_monitoring_configuration_update_isValid;
}

OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::getParallelismConfigurationUpdate() const {
    return m_parallelism_configuration_update;
}
void OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::setParallelismConfigurationUpdate(const OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate &parallelism_configuration_update) {
    m_parallelism_configuration_update = parallelism_configuration_update;
    m_parallelism_configuration_update_isSet = true;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::is_parallelism_configuration_update_Set() const{
    return m_parallelism_configuration_update_isSet;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::is_parallelism_configuration_update_Valid() const{
    return m_parallelism_configuration_update_isValid;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkpoint_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfigurationUpdate_FlinkApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
