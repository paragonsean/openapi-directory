/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption() {
    this->initializeModel();
}

OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::~OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption() {}

void OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::initializeModel() {

    m_log_stream_arn_isSet = false;
    m_log_stream_arn_isValid = false;
}

void OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::fromJsonObject(QJsonObject json) {

    m_log_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_log_stream_arn, json[QString("LogStreamARN")]);
    m_log_stream_arn_isSet = !json[QString("LogStreamARN")].isNull() && m_log_stream_arn_isValid;
}

QString OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_log_stream_arn_isSet) {
        obj.insert(QString("LogStreamARN"), ::OpenAPI::toJsonValue(m_log_stream_arn));
    }
    return obj;
}

QString OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::getLogStreamArn() const {
    return m_log_stream_arn;
}
void OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::setLogStreamArn(const QString &log_stream_arn) {
    m_log_stream_arn = log_stream_arn;
    m_log_stream_arn_isSet = true;
}

bool OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::is_log_stream_arn_Set() const{
    return m_log_stream_arn_isSet;
}

bool OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::is_log_stream_arn_Valid() const{
    return m_log_stream_arn_isValid;
}

bool OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationCloudWatchLoggingOptionRequest_CloudWatchLoggingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_stream_arn_isValid && true;
}

} // namespace OpenAPI
