/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfiguration_ZeppelinApplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfiguration_ZeppelinApplicationConfiguration::OAIApplicationConfiguration_ZeppelinApplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfiguration_ZeppelinApplicationConfiguration::OAIApplicationConfiguration_ZeppelinApplicationConfiguration() {
    this->initializeModel();
}

OAIApplicationConfiguration_ZeppelinApplicationConfiguration::~OAIApplicationConfiguration_ZeppelinApplicationConfiguration() {}

void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::initializeModel() {

    m_monitoring_configuration_isSet = false;
    m_monitoring_configuration_isValid = false;

    m_catalog_configuration_isSet = false;
    m_catalog_configuration_isValid = false;

    m_deploy_as_application_configuration_isSet = false;
    m_deploy_as_application_configuration_isValid = false;

    m_custom_artifacts_configuration_isSet = false;
    m_custom_artifacts_configuration_isValid = false;
}

void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_monitoring_configuration_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configuration, json[QString("MonitoringConfiguration")]);
    m_monitoring_configuration_isSet = !json[QString("MonitoringConfiguration")].isNull() && m_monitoring_configuration_isValid;

    m_catalog_configuration_isValid = ::OpenAPI::fromJsonValue(m_catalog_configuration, json[QString("CatalogConfiguration")]);
    m_catalog_configuration_isSet = !json[QString("CatalogConfiguration")].isNull() && m_catalog_configuration_isValid;

    m_deploy_as_application_configuration_isValid = ::OpenAPI::fromJsonValue(m_deploy_as_application_configuration, json[QString("DeployAsApplicationConfiguration")]);
    m_deploy_as_application_configuration_isSet = !json[QString("DeployAsApplicationConfiguration")].isNull() && m_deploy_as_application_configuration_isValid;

    m_custom_artifacts_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_artifacts_configuration, json[QString("CustomArtifactsConfiguration")]);
    m_custom_artifacts_configuration_isSet = !json[QString("CustomArtifactsConfiguration")].isNull() && m_custom_artifacts_configuration_isValid;
}

QString OAIApplicationConfiguration_ZeppelinApplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfiguration_ZeppelinApplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_monitoring_configuration.isSet()) {
        obj.insert(QString("MonitoringConfiguration"), ::OpenAPI::toJsonValue(m_monitoring_configuration));
    }
    if (m_catalog_configuration.isSet()) {
        obj.insert(QString("CatalogConfiguration"), ::OpenAPI::toJsonValue(m_catalog_configuration));
    }
    if (m_deploy_as_application_configuration.isSet()) {
        obj.insert(QString("DeployAsApplicationConfiguration"), ::OpenAPI::toJsonValue(m_deploy_as_application_configuration));
    }
    if (m_custom_artifacts_configuration.isSet()) {
        obj.insert(QString("CustomArtifactsConfiguration"), ::OpenAPI::toJsonValue(m_custom_artifacts_configuration));
    }
    return obj;
}

OAIZeppelinApplicationConfiguration_MonitoringConfiguration OAIApplicationConfiguration_ZeppelinApplicationConfiguration::getMonitoringConfiguration() const {
    return m_monitoring_configuration;
}
void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::setMonitoringConfiguration(const OAIZeppelinApplicationConfiguration_MonitoringConfiguration &monitoring_configuration) {
    m_monitoring_configuration = monitoring_configuration;
    m_monitoring_configuration_isSet = true;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_monitoring_configuration_Set() const{
    return m_monitoring_configuration_isSet;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_monitoring_configuration_Valid() const{
    return m_monitoring_configuration_isValid;
}

OAIZeppelinApplicationConfiguration_CatalogConfiguration OAIApplicationConfiguration_ZeppelinApplicationConfiguration::getCatalogConfiguration() const {
    return m_catalog_configuration;
}
void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::setCatalogConfiguration(const OAIZeppelinApplicationConfiguration_CatalogConfiguration &catalog_configuration) {
    m_catalog_configuration = catalog_configuration;
    m_catalog_configuration_isSet = true;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_catalog_configuration_Set() const{
    return m_catalog_configuration_isSet;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_catalog_configuration_Valid() const{
    return m_catalog_configuration_isValid;
}

OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration OAIApplicationConfiguration_ZeppelinApplicationConfiguration::getDeployAsApplicationConfiguration() const {
    return m_deploy_as_application_configuration;
}
void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::setDeployAsApplicationConfiguration(const OAIZeppelinApplicationConfiguration_DeployAsApplicationConfiguration &deploy_as_application_configuration) {
    m_deploy_as_application_configuration = deploy_as_application_configuration;
    m_deploy_as_application_configuration_isSet = true;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_deploy_as_application_configuration_Set() const{
    return m_deploy_as_application_configuration_isSet;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_deploy_as_application_configuration_Valid() const{
    return m_deploy_as_application_configuration_isValid;
}

QList OAIApplicationConfiguration_ZeppelinApplicationConfiguration::getCustomArtifactsConfiguration() const {
    return m_custom_artifacts_configuration;
}
void OAIApplicationConfiguration_ZeppelinApplicationConfiguration::setCustomArtifactsConfiguration(const QList &custom_artifacts_configuration) {
    m_custom_artifacts_configuration = custom_artifacts_configuration;
    m_custom_artifacts_configuration_isSet = true;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_custom_artifacts_configuration_Set() const{
    return m_custom_artifacts_configuration_isSet;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::is_custom_artifacts_configuration_Valid() const{
    return m_custom_artifacts_configuration_isValid;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitoring_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_as_application_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_artifacts_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfiguration_ZeppelinApplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
