/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationOutputRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationOutputRequest::OAIAddApplicationOutputRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationOutputRequest::OAIAddApplicationOutputRequest() {
    this->initializeModel();
}

OAIAddApplicationOutputRequest::~OAIAddApplicationOutputRequest() {}

void OAIAddApplicationOutputRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;
}

void OAIAddApplicationOutputRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationOutputRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("Output")]);
    m_output_isSet = !json[QString("Output")].isNull() && m_output_isValid;
}

QString OAIAddApplicationOutputRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationOutputRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_output.isSet()) {
        obj.insert(QString("Output"), ::OpenAPI::toJsonValue(m_output));
    }
    return obj;
}

QString OAIAddApplicationOutputRequest::getApplicationName() const {
    return m_application_name;
}
void OAIAddApplicationOutputRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIAddApplicationOutputRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIAddApplicationOutputRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIAddApplicationOutputRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIAddApplicationOutputRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIAddApplicationOutputRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIAddApplicationOutputRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

OAIAddApplicationOutputRequest_Output OAIAddApplicationOutputRequest::getOutput() const {
    return m_output;
}
void OAIAddApplicationOutputRequest::setOutput(const OAIAddApplicationOutputRequest_Output &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIAddApplicationOutputRequest::is_output_Set() const{
    return m_output_isSet;
}

bool OAIAddApplicationOutputRequest::is_output_Valid() const{
    return m_output_isValid;
}

bool OAIAddApplicationOutputRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationOutputRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_current_application_version_id_isValid && m_output_isValid && true;
}

} // namespace OpenAPI
