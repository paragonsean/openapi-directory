/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordColumn::OAIRecordColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordColumn::OAIRecordColumn() {
    this->initializeModel();
}

OAIRecordColumn::~OAIRecordColumn() {}

void OAIRecordColumn::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_sql_type_isSet = false;
    m_sql_type_isValid = false;
}

void OAIRecordColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordColumn::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("Mapping")]);
    m_mapping_isSet = !json[QString("Mapping")].isNull() && m_mapping_isValid;

    m_sql_type_isValid = ::OpenAPI::fromJsonValue(m_sql_type, json[QString("SqlType")]);
    m_sql_type_isSet = !json[QString("SqlType")].isNull() && m_sql_type_isValid;
}

QString OAIRecordColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_mapping_isSet) {
        obj.insert(QString("Mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    if (m_sql_type_isSet) {
        obj.insert(QString("SqlType"), ::OpenAPI::toJsonValue(m_sql_type));
    }
    return obj;
}

QString OAIRecordColumn::getName() const {
    return m_name;
}
void OAIRecordColumn::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecordColumn::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecordColumn::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecordColumn::getMapping() const {
    return m_mapping;
}
void OAIRecordColumn::setMapping(const QString &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAIRecordColumn::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIRecordColumn::is_mapping_Valid() const{
    return m_mapping_isValid;
}

QString OAIRecordColumn::getSqlType() const {
    return m_sql_type;
}
void OAIRecordColumn::setSqlType(const QString &sql_type) {
    m_sql_type = sql_type;
    m_sql_type_isSet = true;
}

bool OAIRecordColumn::is_sql_type_Set() const{
    return m_sql_type_isSet;
}

bool OAIRecordColumn::is_sql_type_Valid() const{
    return m_sql_type_isValid;
}

bool OAIRecordColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_sql_type_isValid && true;
}

} // namespace OpenAPI
