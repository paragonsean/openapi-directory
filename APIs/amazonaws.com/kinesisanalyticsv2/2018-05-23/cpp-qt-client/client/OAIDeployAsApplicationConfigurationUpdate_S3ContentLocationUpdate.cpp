/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate() {
    this->initializeModel();
}

OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::~OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate() {}

void OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::initializeModel() {

    m_bucket_arn_update_isSet = false;
    m_bucket_arn_update_isValid = false;

    m_base_path_update_isSet = false;
    m_base_path_update_isValid = false;
}

void OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::fromJsonObject(QJsonObject json) {

    m_bucket_arn_update_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn_update, json[QString("BucketARNUpdate")]);
    m_bucket_arn_update_isSet = !json[QString("BucketARNUpdate")].isNull() && m_bucket_arn_update_isValid;

    m_base_path_update_isValid = ::OpenAPI::fromJsonValue(m_base_path_update, json[QString("BasePathUpdate")]);
    m_base_path_update_isSet = !json[QString("BasePathUpdate")].isNull() && m_base_path_update_isValid;
}

QString OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_update_isSet) {
        obj.insert(QString("BucketARNUpdate"), ::OpenAPI::toJsonValue(m_bucket_arn_update));
    }
    if (m_base_path_update_isSet) {
        obj.insert(QString("BasePathUpdate"), ::OpenAPI::toJsonValue(m_base_path_update));
    }
    return obj;
}

QString OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::getBucketArnUpdate() const {
    return m_bucket_arn_update;
}
void OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::setBucketArnUpdate(const QString &bucket_arn_update) {
    m_bucket_arn_update = bucket_arn_update;
    m_bucket_arn_update_isSet = true;
}

bool OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::is_bucket_arn_update_Set() const{
    return m_bucket_arn_update_isSet;
}

bool OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::is_bucket_arn_update_Valid() const{
    return m_bucket_arn_update_isValid;
}

QString OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::getBasePathUpdate() const {
    return m_base_path_update;
}
void OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::setBasePathUpdate(const QString &base_path_update) {
    m_base_path_update = base_path_update;
    m_base_path_update_isSet = true;
}

bool OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::is_base_path_update_Set() const{
    return m_base_path_update_isSet;
}

bool OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::is_base_path_update_Valid() const{
    return m_base_path_update_isValid;
}

bool OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_path_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployAsApplicationConfigurationUpdate_S3ContentLocationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
