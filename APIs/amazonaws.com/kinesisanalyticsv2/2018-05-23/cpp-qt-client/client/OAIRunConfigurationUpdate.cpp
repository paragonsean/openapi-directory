/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunConfigurationUpdate::OAIRunConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunConfigurationUpdate::OAIRunConfigurationUpdate() {
    this->initializeModel();
}

OAIRunConfigurationUpdate::~OAIRunConfigurationUpdate() {}

void OAIRunConfigurationUpdate::initializeModel() {

    m_flink_run_configuration_isSet = false;
    m_flink_run_configuration_isValid = false;

    m_application_restore_configuration_isSet = false;
    m_application_restore_configuration_isValid = false;
}

void OAIRunConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_flink_run_configuration_isValid = ::OpenAPI::fromJsonValue(m_flink_run_configuration, json[QString("FlinkRunConfiguration")]);
    m_flink_run_configuration_isSet = !json[QString("FlinkRunConfiguration")].isNull() && m_flink_run_configuration_isValid;

    m_application_restore_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_restore_configuration, json[QString("ApplicationRestoreConfiguration")]);
    m_application_restore_configuration_isSet = !json[QString("ApplicationRestoreConfiguration")].isNull() && m_application_restore_configuration_isValid;
}

QString OAIRunConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_flink_run_configuration.isSet()) {
        obj.insert(QString("FlinkRunConfiguration"), ::OpenAPI::toJsonValue(m_flink_run_configuration));
    }
    if (m_application_restore_configuration.isSet()) {
        obj.insert(QString("ApplicationRestoreConfiguration"), ::OpenAPI::toJsonValue(m_application_restore_configuration));
    }
    return obj;
}

OAIRunConfiguration_FlinkRunConfiguration OAIRunConfigurationUpdate::getFlinkRunConfiguration() const {
    return m_flink_run_configuration;
}
void OAIRunConfigurationUpdate::setFlinkRunConfiguration(const OAIRunConfiguration_FlinkRunConfiguration &flink_run_configuration) {
    m_flink_run_configuration = flink_run_configuration;
    m_flink_run_configuration_isSet = true;
}

bool OAIRunConfigurationUpdate::is_flink_run_configuration_Set() const{
    return m_flink_run_configuration_isSet;
}

bool OAIRunConfigurationUpdate::is_flink_run_configuration_Valid() const{
    return m_flink_run_configuration_isValid;
}

OAIRunConfigurationUpdate_ApplicationRestoreConfiguration OAIRunConfigurationUpdate::getApplicationRestoreConfiguration() const {
    return m_application_restore_configuration;
}
void OAIRunConfigurationUpdate::setApplicationRestoreConfiguration(const OAIRunConfigurationUpdate_ApplicationRestoreConfiguration &application_restore_configuration) {
    m_application_restore_configuration = application_restore_configuration;
    m_application_restore_configuration_isSet = true;
}

bool OAIRunConfigurationUpdate::is_application_restore_configuration_Set() const{
    return m_application_restore_configuration_isSet;
}

bool OAIRunConfigurationUpdate::is_application_restore_configuration_Valid() const{
    return m_application_restore_configuration_isValid;
}

bool OAIRunConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flink_run_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_restore_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
