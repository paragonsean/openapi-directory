/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeApplicationSnapshotResponse_SnapshotDetails.h
 *
 * 
 */

#ifndef OAIDescribeApplicationSnapshotResponse_SnapshotDetails_H
#define OAIDescribeApplicationSnapshotResponse_SnapshotDetails_H

#include <QJsonObject>

#include "OAISnapshotStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeApplicationSnapshotResponse_SnapshotDetails : public OAIObject {
public:
    OAIDescribeApplicationSnapshotResponse_SnapshotDetails();
    OAIDescribeApplicationSnapshotResponse_SnapshotDetails(QString json);
    ~OAIDescribeApplicationSnapshotResponse_SnapshotDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSnapshotName() const;
    void setSnapshotName(const QString &snapshot_name);
    bool is_snapshot_name_Set() const;
    bool is_snapshot_name_Valid() const;

    OAISnapshotStatus getSnapshotStatus() const;
    void setSnapshotStatus(const OAISnapshotStatus &snapshot_status);
    bool is_snapshot_status_Set() const;
    bool is_snapshot_status_Valid() const;

    qint32 getApplicationVersionId() const;
    void setApplicationVersionId(const qint32 &application_version_id);
    bool is_application_version_id_Set() const;
    bool is_application_version_id_Valid() const;

    QDateTime getSnapshotCreationTimestamp() const;
    void setSnapshotCreationTimestamp(const QDateTime &snapshot_creation_timestamp);
    bool is_snapshot_creation_timestamp_Set() const;
    bool is_snapshot_creation_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_snapshot_name;
    bool m_snapshot_name_isSet;
    bool m_snapshot_name_isValid;

    OAISnapshotStatus m_snapshot_status;
    bool m_snapshot_status_isSet;
    bool m_snapshot_status_isValid;

    qint32 m_application_version_id;
    bool m_application_version_id_isSet;
    bool m_application_version_id_isValid;

    QDateTime m_snapshot_creation_timestamp;
    bool m_snapshot_creation_timestamp_isSet;
    bool m_snapshot_creation_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeApplicationSnapshotResponse_SnapshotDetails)

#endif // OAIDescribeApplicationSnapshotResponse_SnapshotDetails_H
