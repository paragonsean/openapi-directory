/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription() {
    this->initializeModel();
}

OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::~OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription() {}

void OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::initializeModel() {

    m_configuration_type_isSet = false;
    m_configuration_type_isValid = false;

    m_metrics_level_isSet = false;
    m_metrics_level_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;
}

void OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_configuration_type_isValid = ::OpenAPI::fromJsonValue(m_configuration_type, json[QString("ConfigurationType")]);
    m_configuration_type_isSet = !json[QString("ConfigurationType")].isNull() && m_configuration_type_isValid;

    m_metrics_level_isValid = ::OpenAPI::fromJsonValue(m_metrics_level, json[QString("MetricsLevel")]);
    m_metrics_level_isSet = !json[QString("MetricsLevel")].isNull() && m_metrics_level_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;
}

QString OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_type.isSet()) {
        obj.insert(QString("ConfigurationType"), ::OpenAPI::toJsonValue(m_configuration_type));
    }
    if (m_metrics_level.isSet()) {
        obj.insert(QString("MetricsLevel"), ::OpenAPI::toJsonValue(m_metrics_level));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    return obj;
}

OAIConfigurationType OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::getConfigurationType() const {
    return m_configuration_type;
}
void OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::setConfigurationType(const OAIConfigurationType &configuration_type) {
    m_configuration_type = configuration_type;
    m_configuration_type_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::is_configuration_type_Set() const{
    return m_configuration_type_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::is_configuration_type_Valid() const{
    return m_configuration_type_isValid;
}

OAIMetricsLevel OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::getMetricsLevel() const {
    return m_metrics_level;
}
void OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::setMetricsLevel(const OAIMetricsLevel &metrics_level) {
    m_metrics_level = metrics_level;
    m_metrics_level_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::is_metrics_level_Set() const{
    return m_metrics_level_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::is_metrics_level_Valid() const{
    return m_metrics_level_isValid;
}

OAILogLevel OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::getLogLevel() const {
    return m_log_level;
}
void OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::is_log_level_Valid() const{
    return m_log_level_isValid;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlinkApplicationConfigurationDescription_MonitoringConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
