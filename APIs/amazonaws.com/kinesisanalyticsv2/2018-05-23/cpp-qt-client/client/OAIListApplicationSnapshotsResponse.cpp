/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListApplicationSnapshotsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListApplicationSnapshotsResponse::OAIListApplicationSnapshotsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListApplicationSnapshotsResponse::OAIListApplicationSnapshotsResponse() {
    this->initializeModel();
}

OAIListApplicationSnapshotsResponse::~OAIListApplicationSnapshotsResponse() {}

void OAIListApplicationSnapshotsResponse::initializeModel() {

    m_snapshot_summaries_isSet = false;
    m_snapshot_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListApplicationSnapshotsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListApplicationSnapshotsResponse::fromJsonObject(QJsonObject json) {

    m_snapshot_summaries_isValid = ::OpenAPI::fromJsonValue(m_snapshot_summaries, json[QString("SnapshotSummaries")]);
    m_snapshot_summaries_isSet = !json[QString("SnapshotSummaries")].isNull() && m_snapshot_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListApplicationSnapshotsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListApplicationSnapshotsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_snapshot_summaries.isSet()) {
        obj.insert(QString("SnapshotSummaries"), ::OpenAPI::toJsonValue(m_snapshot_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListApplicationSnapshotsResponse::getSnapshotSummaries() const {
    return m_snapshot_summaries;
}
void OAIListApplicationSnapshotsResponse::setSnapshotSummaries(const QList &snapshot_summaries) {
    m_snapshot_summaries = snapshot_summaries;
    m_snapshot_summaries_isSet = true;
}

bool OAIListApplicationSnapshotsResponse::is_snapshot_summaries_Set() const{
    return m_snapshot_summaries_isSet;
}

bool OAIListApplicationSnapshotsResponse::is_snapshot_summaries_Valid() const{
    return m_snapshot_summaries_isValid;
}

QString OAIListApplicationSnapshotsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListApplicationSnapshotsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListApplicationSnapshotsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListApplicationSnapshotsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListApplicationSnapshotsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snapshot_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListApplicationSnapshotsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
