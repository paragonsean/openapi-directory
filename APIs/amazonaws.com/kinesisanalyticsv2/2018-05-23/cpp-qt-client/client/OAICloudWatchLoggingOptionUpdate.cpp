/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudWatchLoggingOptionUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudWatchLoggingOptionUpdate::OAICloudWatchLoggingOptionUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudWatchLoggingOptionUpdate::OAICloudWatchLoggingOptionUpdate() {
    this->initializeModel();
}

OAICloudWatchLoggingOptionUpdate::~OAICloudWatchLoggingOptionUpdate() {}

void OAICloudWatchLoggingOptionUpdate::initializeModel() {

    m_cloud_watch_logging_option_id_isSet = false;
    m_cloud_watch_logging_option_id_isValid = false;

    m_log_stream_arn_update_isSet = false;
    m_log_stream_arn_update_isValid = false;
}

void OAICloudWatchLoggingOptionUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudWatchLoggingOptionUpdate::fromJsonObject(QJsonObject json) {

    m_cloud_watch_logging_option_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_id, json[QString("CloudWatchLoggingOptionId")]);
    m_cloud_watch_logging_option_id_isSet = !json[QString("CloudWatchLoggingOptionId")].isNull() && m_cloud_watch_logging_option_id_isValid;

    m_log_stream_arn_update_isValid = ::OpenAPI::fromJsonValue(m_log_stream_arn_update, json[QString("LogStreamARNUpdate")]);
    m_log_stream_arn_update_isSet = !json[QString("LogStreamARNUpdate")].isNull() && m_log_stream_arn_update_isValid;
}

QString OAICloudWatchLoggingOptionUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudWatchLoggingOptionUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_logging_option_id_isSet) {
        obj.insert(QString("CloudWatchLoggingOptionId"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_id));
    }
    if (m_log_stream_arn_update_isSet) {
        obj.insert(QString("LogStreamARNUpdate"), ::OpenAPI::toJsonValue(m_log_stream_arn_update));
    }
    return obj;
}

QString OAICloudWatchLoggingOptionUpdate::getCloudWatchLoggingOptionId() const {
    return m_cloud_watch_logging_option_id;
}
void OAICloudWatchLoggingOptionUpdate::setCloudWatchLoggingOptionId(const QString &cloud_watch_logging_option_id) {
    m_cloud_watch_logging_option_id = cloud_watch_logging_option_id;
    m_cloud_watch_logging_option_id_isSet = true;
}

bool OAICloudWatchLoggingOptionUpdate::is_cloud_watch_logging_option_id_Set() const{
    return m_cloud_watch_logging_option_id_isSet;
}

bool OAICloudWatchLoggingOptionUpdate::is_cloud_watch_logging_option_id_Valid() const{
    return m_cloud_watch_logging_option_id_isValid;
}

QString OAICloudWatchLoggingOptionUpdate::getLogStreamArnUpdate() const {
    return m_log_stream_arn_update;
}
void OAICloudWatchLoggingOptionUpdate::setLogStreamArnUpdate(const QString &log_stream_arn_update) {
    m_log_stream_arn_update = log_stream_arn_update;
    m_log_stream_arn_update_isSet = true;
}

bool OAICloudWatchLoggingOptionUpdate::is_log_stream_arn_update_Set() const{
    return m_log_stream_arn_update_isSet;
}

bool OAICloudWatchLoggingOptionUpdate::is_log_stream_arn_update_Valid() const{
    return m_log_stream_arn_update_isValid;
}

bool OAICloudWatchLoggingOptionUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_logging_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_stream_arn_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudWatchLoggingOptionUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cloud_watch_logging_option_id_isValid && true;
}

} // namespace OpenAPI
