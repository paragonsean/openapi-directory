/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationSummary::OAIApplicationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationSummary::OAIApplicationSummary() {
    this->initializeModel();
}

OAIApplicationSummary::~OAIApplicationSummary() {}

void OAIApplicationSummary::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_status_isSet = false;
    m_application_status_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_runtime_environment_isSet = false;
    m_runtime_environment_isValid = false;

    m_application_mode_isSet = false;
    m_application_mode_isValid = false;
}

void OAIApplicationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationSummary::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_status_isValid = ::OpenAPI::fromJsonValue(m_application_status, json[QString("ApplicationStatus")]);
    m_application_status_isSet = !json[QString("ApplicationStatus")].isNull() && m_application_status_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_runtime_environment_isValid = ::OpenAPI::fromJsonValue(m_runtime_environment, json[QString("RuntimeEnvironment")]);
    m_runtime_environment_isSet = !json[QString("RuntimeEnvironment")].isNull() && m_runtime_environment_isValid;

    m_application_mode_isValid = ::OpenAPI::fromJsonValue(m_application_mode, json[QString("ApplicationMode")]);
    m_application_mode_isSet = !json[QString("ApplicationMode")].isNull() && m_application_mode_isValid;
}

QString OAIApplicationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_status.isSet()) {
        obj.insert(QString("ApplicationStatus"), ::OpenAPI::toJsonValue(m_application_status));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_runtime_environment.isSet()) {
        obj.insert(QString("RuntimeEnvironment"), ::OpenAPI::toJsonValue(m_runtime_environment));
    }
    if (m_application_mode.isSet()) {
        obj.insert(QString("ApplicationMode"), ::OpenAPI::toJsonValue(m_application_mode));
    }
    return obj;
}

QString OAIApplicationSummary::getApplicationName() const {
    return m_application_name;
}
void OAIApplicationSummary::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIApplicationSummary::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIApplicationSummary::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIApplicationSummary::getApplicationArn() const {
    return m_application_arn;
}
void OAIApplicationSummary::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIApplicationSummary::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIApplicationSummary::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

OAIApplicationStatus OAIApplicationSummary::getApplicationStatus() const {
    return m_application_status;
}
void OAIApplicationSummary::setApplicationStatus(const OAIApplicationStatus &application_status) {
    m_application_status = application_status;
    m_application_status_isSet = true;
}

bool OAIApplicationSummary::is_application_status_Set() const{
    return m_application_status_isSet;
}

bool OAIApplicationSummary::is_application_status_Valid() const{
    return m_application_status_isValid;
}

qint32 OAIApplicationSummary::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIApplicationSummary::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIApplicationSummary::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIApplicationSummary::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

OAIRuntimeEnvironment OAIApplicationSummary::getRuntimeEnvironment() const {
    return m_runtime_environment;
}
void OAIApplicationSummary::setRuntimeEnvironment(const OAIRuntimeEnvironment &runtime_environment) {
    m_runtime_environment = runtime_environment;
    m_runtime_environment_isSet = true;
}

bool OAIApplicationSummary::is_runtime_environment_Set() const{
    return m_runtime_environment_isSet;
}

bool OAIApplicationSummary::is_runtime_environment_Valid() const{
    return m_runtime_environment_isValid;
}

OAIApplicationMode OAIApplicationSummary::getApplicationMode() const {
    return m_application_mode;
}
void OAIApplicationSummary::setApplicationMode(const OAIApplicationMode &application_mode) {
    m_application_mode = application_mode;
    m_application_mode_isSet = true;
}

bool OAIApplicationSummary::is_application_mode_Set() const{
    return m_application_mode_isSet;
}

bool OAIApplicationSummary::is_application_mode_Valid() const{
    return m_application_mode_isValid;
}

bool OAIApplicationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_application_arn_isValid && m_application_status_isValid && m_application_version_id_isValid && m_runtime_environment_isValid && true;
}

} // namespace OpenAPI
