/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteApplicationInputProcessingConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteApplicationInputProcessingConfigurationRequest::OAIDeleteApplicationInputProcessingConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteApplicationInputProcessingConfigurationRequest::OAIDeleteApplicationInputProcessingConfigurationRequest() {
    this->initializeModel();
}

OAIDeleteApplicationInputProcessingConfigurationRequest::~OAIDeleteApplicationInputProcessingConfigurationRequest() {}

void OAIDeleteApplicationInputProcessingConfigurationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_input_id_isSet = false;
    m_input_id_isValid = false;
}

void OAIDeleteApplicationInputProcessingConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteApplicationInputProcessingConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_input_id_isValid = ::OpenAPI::fromJsonValue(m_input_id, json[QString("InputId")]);
    m_input_id_isSet = !json[QString("InputId")].isNull() && m_input_id_isValid;
}

QString OAIDeleteApplicationInputProcessingConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteApplicationInputProcessingConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_input_id_isSet) {
        obj.insert(QString("InputId"), ::OpenAPI::toJsonValue(m_input_id));
    }
    return obj;
}

QString OAIDeleteApplicationInputProcessingConfigurationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIDeleteApplicationInputProcessingConfigurationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIDeleteApplicationInputProcessingConfigurationRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIDeleteApplicationInputProcessingConfigurationRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

QString OAIDeleteApplicationInputProcessingConfigurationRequest::getInputId() const {
    return m_input_id;
}
void OAIDeleteApplicationInputProcessingConfigurationRequest::setInputId(const QString &input_id) {
    m_input_id = input_id;
    m_input_id_isSet = true;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::is_input_id_Set() const{
    return m_input_id_isSet;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::is_input_id_Valid() const{
    return m_input_id_isValid;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteApplicationInputProcessingConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_current_application_version_id_isValid && m_input_id_isValid && true;
}

} // namespace OpenAPI
