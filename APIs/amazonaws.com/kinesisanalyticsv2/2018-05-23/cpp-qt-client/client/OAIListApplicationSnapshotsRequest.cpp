/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListApplicationSnapshotsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListApplicationSnapshotsRequest::OAIListApplicationSnapshotsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListApplicationSnapshotsRequest::OAIListApplicationSnapshotsRequest() {
    this->initializeModel();
}

OAIListApplicationSnapshotsRequest::~OAIListApplicationSnapshotsRequest() {}

void OAIListApplicationSnapshotsRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListApplicationSnapshotsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListApplicationSnapshotsRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListApplicationSnapshotsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListApplicationSnapshotsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListApplicationSnapshotsRequest::getApplicationName() const {
    return m_application_name;
}
void OAIListApplicationSnapshotsRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIListApplicationSnapshotsRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIListApplicationSnapshotsRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIListApplicationSnapshotsRequest::getLimit() const {
    return m_limit;
}
void OAIListApplicationSnapshotsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListApplicationSnapshotsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListApplicationSnapshotsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIListApplicationSnapshotsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListApplicationSnapshotsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListApplicationSnapshotsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListApplicationSnapshotsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListApplicationSnapshotsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListApplicationSnapshotsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && true;
}

} // namespace OpenAPI
