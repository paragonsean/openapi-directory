/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationConfiguration_FlinkApplicationConfiguration.h
 *
 * 
 */

#ifndef OAIApplicationConfiguration_FlinkApplicationConfiguration_H
#define OAIApplicationConfiguration_FlinkApplicationConfiguration_H

#include <QJsonObject>

#include "OAIFlinkApplicationConfiguration_CheckpointConfiguration.h"
#include "OAIFlinkApplicationConfiguration_MonitoringConfiguration.h"
#include "OAIFlinkApplicationConfiguration_ParallelismConfiguration.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFlinkApplicationConfiguration_CheckpointConfiguration;
class OAIFlinkApplicationConfiguration_MonitoringConfiguration;
class OAIFlinkApplicationConfiguration_ParallelismConfiguration;

class OAIApplicationConfiguration_FlinkApplicationConfiguration : public OAIObject {
public:
    OAIApplicationConfiguration_FlinkApplicationConfiguration();
    OAIApplicationConfiguration_FlinkApplicationConfiguration(QString json);
    ~OAIApplicationConfiguration_FlinkApplicationConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFlinkApplicationConfiguration_CheckpointConfiguration getCheckpointConfiguration() const;
    void setCheckpointConfiguration(const OAIFlinkApplicationConfiguration_CheckpointConfiguration &checkpoint_configuration);
    bool is_checkpoint_configuration_Set() const;
    bool is_checkpoint_configuration_Valid() const;

    OAIFlinkApplicationConfiguration_MonitoringConfiguration getMonitoringConfiguration() const;
    void setMonitoringConfiguration(const OAIFlinkApplicationConfiguration_MonitoringConfiguration &monitoring_configuration);
    bool is_monitoring_configuration_Set() const;
    bool is_monitoring_configuration_Valid() const;

    OAIFlinkApplicationConfiguration_ParallelismConfiguration getParallelismConfiguration() const;
    void setParallelismConfiguration(const OAIFlinkApplicationConfiguration_ParallelismConfiguration &parallelism_configuration);
    bool is_parallelism_configuration_Set() const;
    bool is_parallelism_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFlinkApplicationConfiguration_CheckpointConfiguration m_checkpoint_configuration;
    bool m_checkpoint_configuration_isSet;
    bool m_checkpoint_configuration_isValid;

    OAIFlinkApplicationConfiguration_MonitoringConfiguration m_monitoring_configuration;
    bool m_monitoring_configuration_isSet;
    bool m_monitoring_configuration_isValid;

    OAIFlinkApplicationConfiguration_ParallelismConfiguration m_parallelism_configuration;
    bool m_parallelism_configuration_isSet;
    bool m_parallelism_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationConfiguration_FlinkApplicationConfiguration)

#endif // OAIApplicationConfiguration_FlinkApplicationConfiguration_H
