/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartApplicationRequest::OAIStartApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartApplicationRequest::OAIStartApplicationRequest() {
    this->initializeModel();
}

OAIStartApplicationRequest::~OAIStartApplicationRequest() {}

void OAIStartApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_run_configuration_isSet = false;
    m_run_configuration_isValid = false;
}

void OAIStartApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_run_configuration_isValid = ::OpenAPI::fromJsonValue(m_run_configuration, json[QString("RunConfiguration")]);
    m_run_configuration_isSet = !json[QString("RunConfiguration")].isNull() && m_run_configuration_isValid;
}

QString OAIStartApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_run_configuration.isSet()) {
        obj.insert(QString("RunConfiguration"), ::OpenAPI::toJsonValue(m_run_configuration));
    }
    return obj;
}

QString OAIStartApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAIStartApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIStartApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIStartApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

OAIStartApplicationRequest_RunConfiguration OAIStartApplicationRequest::getRunConfiguration() const {
    return m_run_configuration;
}
void OAIStartApplicationRequest::setRunConfiguration(const OAIStartApplicationRequest_RunConfiguration &run_configuration) {
    m_run_configuration = run_configuration;
    m_run_configuration_isSet = true;
}

bool OAIStartApplicationRequest::is_run_configuration_Set() const{
    return m_run_configuration_isSet;
}

bool OAIStartApplicationRequest::is_run_configuration_Valid() const{
    return m_run_configuration_isValid;
}

bool OAIStartApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && true;
}

} // namespace OpenAPI
