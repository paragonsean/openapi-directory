/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate() {
    this->initializeModel();
}

OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::~OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate() {}

void OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::initializeModel() {

    m_input_updates_isSet = false;
    m_input_updates_isValid = false;

    m_output_updates_isSet = false;
    m_output_updates_isValid = false;

    m_reference_data_source_updates_isSet = false;
    m_reference_data_source_updates_isValid = false;
}

void OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_input_updates_isValid = ::OpenAPI::fromJsonValue(m_input_updates, json[QString("InputUpdates")]);
    m_input_updates_isSet = !json[QString("InputUpdates")].isNull() && m_input_updates_isValid;

    m_output_updates_isValid = ::OpenAPI::fromJsonValue(m_output_updates, json[QString("OutputUpdates")]);
    m_output_updates_isSet = !json[QString("OutputUpdates")].isNull() && m_output_updates_isValid;

    m_reference_data_source_updates_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source_updates, json[QString("ReferenceDataSourceUpdates")]);
    m_reference_data_source_updates_isSet = !json[QString("ReferenceDataSourceUpdates")].isNull() && m_reference_data_source_updates_isValid;
}

QString OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_input_updates.isSet()) {
        obj.insert(QString("InputUpdates"), ::OpenAPI::toJsonValue(m_input_updates));
    }
    if (m_output_updates.isSet()) {
        obj.insert(QString("OutputUpdates"), ::OpenAPI::toJsonValue(m_output_updates));
    }
    if (m_reference_data_source_updates.isSet()) {
        obj.insert(QString("ReferenceDataSourceUpdates"), ::OpenAPI::toJsonValue(m_reference_data_source_updates));
    }
    return obj;
}

QList OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::getInputUpdates() const {
    return m_input_updates;
}
void OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::setInputUpdates(const QList &input_updates) {
    m_input_updates = input_updates;
    m_input_updates_isSet = true;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::is_input_updates_Set() const{
    return m_input_updates_isSet;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::is_input_updates_Valid() const{
    return m_input_updates_isValid;
}

QList OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::getOutputUpdates() const {
    return m_output_updates;
}
void OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::setOutputUpdates(const QList &output_updates) {
    m_output_updates = output_updates;
    m_output_updates_isSet = true;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::is_output_updates_Set() const{
    return m_output_updates_isSet;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::is_output_updates_Valid() const{
    return m_output_updates_isValid;
}

QList OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::getReferenceDataSourceUpdates() const {
    return m_reference_data_source_updates;
}
void OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::setReferenceDataSourceUpdates(const QList &reference_data_source_updates) {
    m_reference_data_source_updates = reference_data_source_updates;
    m_reference_data_source_updates_isSet = true;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::is_reference_data_source_updates_Set() const{
    return m_reference_data_source_updates_isSet;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::is_reference_data_source_updates_Valid() const{
    return m_reference_data_source_updates_isValid;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfigurationUpdate_SqlApplicationConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
