/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputProcessingConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputProcessingConfigurationUpdate::OAIInputProcessingConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputProcessingConfigurationUpdate::OAIInputProcessingConfigurationUpdate() {
    this->initializeModel();
}

OAIInputProcessingConfigurationUpdate::~OAIInputProcessingConfigurationUpdate() {}

void OAIInputProcessingConfigurationUpdate::initializeModel() {

    m_input_lambda_processor_update_isSet = false;
    m_input_lambda_processor_update_isValid = false;
}

void OAIInputProcessingConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputProcessingConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_input_lambda_processor_update_isValid = ::OpenAPI::fromJsonValue(m_input_lambda_processor_update, json[QString("InputLambdaProcessorUpdate")]);
    m_input_lambda_processor_update_isSet = !json[QString("InputLambdaProcessorUpdate")].isNull() && m_input_lambda_processor_update_isValid;
}

QString OAIInputProcessingConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputProcessingConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_input_lambda_processor_update.isSet()) {
        obj.insert(QString("InputLambdaProcessorUpdate"), ::OpenAPI::toJsonValue(m_input_lambda_processor_update));
    }
    return obj;
}

OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate OAIInputProcessingConfigurationUpdate::getInputLambdaProcessorUpdate() const {
    return m_input_lambda_processor_update;
}
void OAIInputProcessingConfigurationUpdate::setInputLambdaProcessorUpdate(const OAIInputProcessingConfigurationUpdate_InputLambdaProcessorUpdate &input_lambda_processor_update) {
    m_input_lambda_processor_update = input_lambda_processor_update;
    m_input_lambda_processor_update_isSet = true;
}

bool OAIInputProcessingConfigurationUpdate::is_input_lambda_processor_update_Set() const{
    return m_input_lambda_processor_update_isSet;
}

bool OAIInputProcessingConfigurationUpdate::is_input_lambda_processor_update_Valid() const{
    return m_input_lambda_processor_update_isValid;
}

bool OAIInputProcessingConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_lambda_processor_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputProcessingConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_lambda_processor_update_isValid && true;
}

} // namespace OpenAPI
