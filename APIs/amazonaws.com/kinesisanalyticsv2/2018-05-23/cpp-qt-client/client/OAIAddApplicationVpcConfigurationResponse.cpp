/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationVpcConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationVpcConfigurationResponse::OAIAddApplicationVpcConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationVpcConfigurationResponse::OAIAddApplicationVpcConfigurationResponse() {
    this->initializeModel();
}

OAIAddApplicationVpcConfigurationResponse::~OAIAddApplicationVpcConfigurationResponse() {}

void OAIAddApplicationVpcConfigurationResponse::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;

    m_vpc_configuration_description_isSet = false;
    m_vpc_configuration_description_isValid = false;
}

void OAIAddApplicationVpcConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationVpcConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;

    m_vpc_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration_description, json[QString("VpcConfigurationDescription")]);
    m_vpc_configuration_description_isSet = !json[QString("VpcConfigurationDescription")].isNull() && m_vpc_configuration_description_isValid;
}

QString OAIAddApplicationVpcConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationVpcConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    if (m_vpc_configuration_description.isSet()) {
        obj.insert(QString("VpcConfigurationDescription"), ::OpenAPI::toJsonValue(m_vpc_configuration_description));
    }
    return obj;
}

QString OAIAddApplicationVpcConfigurationResponse::getApplicationArn() const {
    return m_application_arn;
}
void OAIAddApplicationVpcConfigurationResponse::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIAddApplicationVpcConfigurationResponse::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIAddApplicationVpcConfigurationResponse::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

qint32 OAIAddApplicationVpcConfigurationResponse::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIAddApplicationVpcConfigurationResponse::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIAddApplicationVpcConfigurationResponse::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIAddApplicationVpcConfigurationResponse::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

OAIAddApplicationVpcConfigurationResponse_VpcConfigurationDescription OAIAddApplicationVpcConfigurationResponse::getVpcConfigurationDescription() const {
    return m_vpc_configuration_description;
}
void OAIAddApplicationVpcConfigurationResponse::setVpcConfigurationDescription(const OAIAddApplicationVpcConfigurationResponse_VpcConfigurationDescription &vpc_configuration_description) {
    m_vpc_configuration_description = vpc_configuration_description;
    m_vpc_configuration_description_isSet = true;
}

bool OAIAddApplicationVpcConfigurationResponse::is_vpc_configuration_description_Set() const{
    return m_vpc_configuration_description_isSet;
}

bool OAIAddApplicationVpcConfigurationResponse::is_vpc_configuration_description_Valid() const{
    return m_vpc_configuration_description_isValid;
}

bool OAIAddApplicationVpcConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationVpcConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
