/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationSummary.h
 *
 * Provides application summary information, including the application Amazon Resource Name (ARN), name, and status.
 */

#ifndef OAIApplicationSummary_H
#define OAIApplicationSummary_H

#include <QJsonObject>

#include "OAIApplicationMode.h"
#include "OAIApplicationStatus.h"
#include "OAIRuntimeEnvironment.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApplicationSummary : public OAIObject {
public:
    OAIApplicationSummary();
    OAIApplicationSummary(QString json);
    ~OAIApplicationSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationName() const;
    void setApplicationName(const QString &application_name);
    bool is_application_name_Set() const;
    bool is_application_name_Valid() const;

    QString getApplicationArn() const;
    void setApplicationArn(const QString &application_arn);
    bool is_application_arn_Set() const;
    bool is_application_arn_Valid() const;

    OAIApplicationStatus getApplicationStatus() const;
    void setApplicationStatus(const OAIApplicationStatus &application_status);
    bool is_application_status_Set() const;
    bool is_application_status_Valid() const;

    qint32 getApplicationVersionId() const;
    void setApplicationVersionId(const qint32 &application_version_id);
    bool is_application_version_id_Set() const;
    bool is_application_version_id_Valid() const;

    OAIRuntimeEnvironment getRuntimeEnvironment() const;
    void setRuntimeEnvironment(const OAIRuntimeEnvironment &runtime_environment);
    bool is_runtime_environment_Set() const;
    bool is_runtime_environment_Valid() const;

    OAIApplicationMode getApplicationMode() const;
    void setApplicationMode(const OAIApplicationMode &application_mode);
    bool is_application_mode_Set() const;
    bool is_application_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_name;
    bool m_application_name_isSet;
    bool m_application_name_isValid;

    QString m_application_arn;
    bool m_application_arn_isSet;
    bool m_application_arn_isValid;

    OAIApplicationStatus m_application_status;
    bool m_application_status_isSet;
    bool m_application_status_isValid;

    qint32 m_application_version_id;
    bool m_application_version_id_isSet;
    bool m_application_version_id_isValid;

    OAIRuntimeEnvironment m_runtime_environment;
    bool m_runtime_environment_isSet;
    bool m_runtime_environment_isValid;

    OAIApplicationMode m_application_mode;
    bool m_application_mode_isSet;
    bool m_application_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationSummary)

#endif // OAIApplicationSummary_H
