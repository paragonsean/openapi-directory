/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ContentBaseLocationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ContentBaseLocationDescription::OAIS3ContentBaseLocationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ContentBaseLocationDescription::OAIS3ContentBaseLocationDescription() {
    this->initializeModel();
}

OAIS3ContentBaseLocationDescription::~OAIS3ContentBaseLocationDescription() {}

void OAIS3ContentBaseLocationDescription::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_base_path_isSet = false;
    m_base_path_isValid = false;
}

void OAIS3ContentBaseLocationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ContentBaseLocationDescription::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketARN")]);
    m_bucket_arn_isSet = !json[QString("BucketARN")].isNull() && m_bucket_arn_isValid;

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("BasePath")]);
    m_base_path_isSet = !json[QString("BasePath")].isNull() && m_base_path_isValid;
}

QString OAIS3ContentBaseLocationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ContentBaseLocationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketARN"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_base_path_isSet) {
        obj.insert(QString("BasePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    return obj;
}

QString OAIS3ContentBaseLocationDescription::getBucketArn() const {
    return m_bucket_arn;
}
void OAIS3ContentBaseLocationDescription::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIS3ContentBaseLocationDescription::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIS3ContentBaseLocationDescription::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAIS3ContentBaseLocationDescription::getBasePath() const {
    return m_base_path;
}
void OAIS3ContentBaseLocationDescription::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAIS3ContentBaseLocationDescription::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAIS3ContentBaseLocationDescription::is_base_path_Valid() const{
    return m_base_path_isValid;
}

bool OAIS3ContentBaseLocationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ContentBaseLocationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_arn_isValid && true;
}

} // namespace OpenAPI
