/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCodeConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCodeConfigurationDescription::OAIApplicationCodeConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCodeConfigurationDescription::OAIApplicationCodeConfigurationDescription() {
    this->initializeModel();
}

OAIApplicationCodeConfigurationDescription::~OAIApplicationCodeConfigurationDescription() {}

void OAIApplicationCodeConfigurationDescription::initializeModel() {

    m_code_content_type_isSet = false;
    m_code_content_type_isValid = false;

    m_code_content_description_isSet = false;
    m_code_content_description_isValid = false;
}

void OAIApplicationCodeConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCodeConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_code_content_type_isValid = ::OpenAPI::fromJsonValue(m_code_content_type, json[QString("CodeContentType")]);
    m_code_content_type_isSet = !json[QString("CodeContentType")].isNull() && m_code_content_type_isValid;

    m_code_content_description_isValid = ::OpenAPI::fromJsonValue(m_code_content_description, json[QString("CodeContentDescription")]);
    m_code_content_description_isSet = !json[QString("CodeContentDescription")].isNull() && m_code_content_description_isValid;
}

QString OAIApplicationCodeConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCodeConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_code_content_type.isSet()) {
        obj.insert(QString("CodeContentType"), ::OpenAPI::toJsonValue(m_code_content_type));
    }
    if (m_code_content_description.isSet()) {
        obj.insert(QString("CodeContentDescription"), ::OpenAPI::toJsonValue(m_code_content_description));
    }
    return obj;
}

OAICodeContentType OAIApplicationCodeConfigurationDescription::getCodeContentType() const {
    return m_code_content_type;
}
void OAIApplicationCodeConfigurationDescription::setCodeContentType(const OAICodeContentType &code_content_type) {
    m_code_content_type = code_content_type;
    m_code_content_type_isSet = true;
}

bool OAIApplicationCodeConfigurationDescription::is_code_content_type_Set() const{
    return m_code_content_type_isSet;
}

bool OAIApplicationCodeConfigurationDescription::is_code_content_type_Valid() const{
    return m_code_content_type_isValid;
}

OAIApplicationCodeConfigurationDescription_CodeContentDescription OAIApplicationCodeConfigurationDescription::getCodeContentDescription() const {
    return m_code_content_description;
}
void OAIApplicationCodeConfigurationDescription::setCodeContentDescription(const OAIApplicationCodeConfigurationDescription_CodeContentDescription &code_content_description) {
    m_code_content_description = code_content_description;
    m_code_content_description_isSet = true;
}

bool OAIApplicationCodeConfigurationDescription::is_code_content_description_Set() const{
    return m_code_content_description_isSet;
}

bool OAIApplicationCodeConfigurationDescription::is_code_content_description_Valid() const{
    return m_code_content_description_isValid;
}

bool OAIApplicationCodeConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_content_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCodeConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_content_type_isValid && true;
}

} // namespace OpenAPI
