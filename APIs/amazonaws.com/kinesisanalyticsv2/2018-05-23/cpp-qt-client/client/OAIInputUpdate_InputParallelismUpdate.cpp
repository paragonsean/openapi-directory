/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputUpdate_InputParallelismUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputUpdate_InputParallelismUpdate::OAIInputUpdate_InputParallelismUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputUpdate_InputParallelismUpdate::OAIInputUpdate_InputParallelismUpdate() {
    this->initializeModel();
}

OAIInputUpdate_InputParallelismUpdate::~OAIInputUpdate_InputParallelismUpdate() {}

void OAIInputUpdate_InputParallelismUpdate::initializeModel() {

    m_count_update_isSet = false;
    m_count_update_isValid = false;
}

void OAIInputUpdate_InputParallelismUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputUpdate_InputParallelismUpdate::fromJsonObject(QJsonObject json) {

    m_count_update_isValid = ::OpenAPI::fromJsonValue(m_count_update, json[QString("CountUpdate")]);
    m_count_update_isSet = !json[QString("CountUpdate")].isNull() && m_count_update_isValid;
}

QString OAIInputUpdate_InputParallelismUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputUpdate_InputParallelismUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_count_update_isSet) {
        obj.insert(QString("CountUpdate"), ::OpenAPI::toJsonValue(m_count_update));
    }
    return obj;
}

qint32 OAIInputUpdate_InputParallelismUpdate::getCountUpdate() const {
    return m_count_update;
}
void OAIInputUpdate_InputParallelismUpdate::setCountUpdate(const qint32 &count_update) {
    m_count_update = count_update;
    m_count_update_isSet = true;
}

bool OAIInputUpdate_InputParallelismUpdate::is_count_update_Set() const{
    return m_count_update_isSet;
}

bool OAIInputUpdate_InputParallelismUpdate::is_count_update_Valid() const{
    return m_count_update_isValid;
}

bool OAIInputUpdate_InputParallelismUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputUpdate_InputParallelismUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_update_isValid && true;
}

} // namespace OpenAPI
