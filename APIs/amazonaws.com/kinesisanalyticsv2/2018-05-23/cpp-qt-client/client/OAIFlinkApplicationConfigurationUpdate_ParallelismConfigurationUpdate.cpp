/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate() {
    this->initializeModel();
}

OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::~OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate() {}

void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::initializeModel() {

    m_configuration_type_update_isSet = false;
    m_configuration_type_update_isValid = false;

    m_parallelism_update_isSet = false;
    m_parallelism_update_isValid = false;

    m_parallelism_per_kpu_update_isSet = false;
    m_parallelism_per_kpu_update_isValid = false;

    m_auto_scaling_enabled_update_isSet = false;
    m_auto_scaling_enabled_update_isValid = false;
}

void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::fromJsonObject(QJsonObject json) {

    m_configuration_type_update_isValid = ::OpenAPI::fromJsonValue(m_configuration_type_update, json[QString("ConfigurationTypeUpdate")]);
    m_configuration_type_update_isSet = !json[QString("ConfigurationTypeUpdate")].isNull() && m_configuration_type_update_isValid;

    m_parallelism_update_isValid = ::OpenAPI::fromJsonValue(m_parallelism_update, json[QString("ParallelismUpdate")]);
    m_parallelism_update_isSet = !json[QString("ParallelismUpdate")].isNull() && m_parallelism_update_isValid;

    m_parallelism_per_kpu_update_isValid = ::OpenAPI::fromJsonValue(m_parallelism_per_kpu_update, json[QString("ParallelismPerKPUUpdate")]);
    m_parallelism_per_kpu_update_isSet = !json[QString("ParallelismPerKPUUpdate")].isNull() && m_parallelism_per_kpu_update_isValid;

    m_auto_scaling_enabled_update_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_enabled_update, json[QString("AutoScalingEnabledUpdate")]);
    m_auto_scaling_enabled_update_isSet = !json[QString("AutoScalingEnabledUpdate")].isNull() && m_auto_scaling_enabled_update_isValid;
}

QString OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_type_update.isSet()) {
        obj.insert(QString("ConfigurationTypeUpdate"), ::OpenAPI::toJsonValue(m_configuration_type_update));
    }
    if (m_parallelism_update_isSet) {
        obj.insert(QString("ParallelismUpdate"), ::OpenAPI::toJsonValue(m_parallelism_update));
    }
    if (m_parallelism_per_kpu_update_isSet) {
        obj.insert(QString("ParallelismPerKPUUpdate"), ::OpenAPI::toJsonValue(m_parallelism_per_kpu_update));
    }
    if (m_auto_scaling_enabled_update_isSet) {
        obj.insert(QString("AutoScalingEnabledUpdate"), ::OpenAPI::toJsonValue(m_auto_scaling_enabled_update));
    }
    return obj;
}

OAIConfigurationType OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::getConfigurationTypeUpdate() const {
    return m_configuration_type_update;
}
void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::setConfigurationTypeUpdate(const OAIConfigurationType &configuration_type_update) {
    m_configuration_type_update = configuration_type_update;
    m_configuration_type_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_configuration_type_update_Set() const{
    return m_configuration_type_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_configuration_type_update_Valid() const{
    return m_configuration_type_update_isValid;
}

qint32 OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::getParallelismUpdate() const {
    return m_parallelism_update;
}
void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::setParallelismUpdate(const qint32 &parallelism_update) {
    m_parallelism_update = parallelism_update;
    m_parallelism_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_parallelism_update_Set() const{
    return m_parallelism_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_parallelism_update_Valid() const{
    return m_parallelism_update_isValid;
}

qint32 OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::getParallelismPerKpuUpdate() const {
    return m_parallelism_per_kpu_update;
}
void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::setParallelismPerKpuUpdate(const qint32 &parallelism_per_kpu_update) {
    m_parallelism_per_kpu_update = parallelism_per_kpu_update;
    m_parallelism_per_kpu_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_parallelism_per_kpu_update_Set() const{
    return m_parallelism_per_kpu_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_parallelism_per_kpu_update_Valid() const{
    return m_parallelism_per_kpu_update_isValid;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::getAutoScalingEnabledUpdate() const {
    return m_auto_scaling_enabled_update;
}
void OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::setAutoScalingEnabledUpdate(const bool &auto_scaling_enabled_update) {
    m_auto_scaling_enabled_update = auto_scaling_enabled_update;
    m_auto_scaling_enabled_update_isSet = true;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_auto_scaling_enabled_update_Set() const{
    return m_auto_scaling_enabled_update_isSet;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::is_auto_scaling_enabled_update_Valid() const{
    return m_auto_scaling_enabled_update_isValid;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_type_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_per_kpu_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_enabled_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlinkApplicationConfigurationUpdate_ParallelismConfigurationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
