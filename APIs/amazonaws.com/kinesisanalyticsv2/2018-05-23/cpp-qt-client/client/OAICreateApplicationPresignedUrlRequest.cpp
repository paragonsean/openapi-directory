/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationPresignedUrlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationPresignedUrlRequest::OAICreateApplicationPresignedUrlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationPresignedUrlRequest::OAICreateApplicationPresignedUrlRequest() {
    this->initializeModel();
}

OAICreateApplicationPresignedUrlRequest::~OAICreateApplicationPresignedUrlRequest() {}

void OAICreateApplicationPresignedUrlRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_url_type_isSet = false;
    m_url_type_isValid = false;

    m_session_expiration_duration_in_seconds_isSet = false;
    m_session_expiration_duration_in_seconds_isValid = false;
}

void OAICreateApplicationPresignedUrlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationPresignedUrlRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_url_type_isValid = ::OpenAPI::fromJsonValue(m_url_type, json[QString("UrlType")]);
    m_url_type_isSet = !json[QString("UrlType")].isNull() && m_url_type_isValid;

    m_session_expiration_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_session_expiration_duration_in_seconds, json[QString("SessionExpirationDurationInSeconds")]);
    m_session_expiration_duration_in_seconds_isSet = !json[QString("SessionExpirationDurationInSeconds")].isNull() && m_session_expiration_duration_in_seconds_isValid;
}

QString OAICreateApplicationPresignedUrlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationPresignedUrlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_url_type.isSet()) {
        obj.insert(QString("UrlType"), ::OpenAPI::toJsonValue(m_url_type));
    }
    if (m_session_expiration_duration_in_seconds_isSet) {
        obj.insert(QString("SessionExpirationDurationInSeconds"), ::OpenAPI::toJsonValue(m_session_expiration_duration_in_seconds));
    }
    return obj;
}

QString OAICreateApplicationPresignedUrlRequest::getApplicationName() const {
    return m_application_name;
}
void OAICreateApplicationPresignedUrlRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICreateApplicationPresignedUrlRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICreateApplicationPresignedUrlRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

OAIUrlType OAICreateApplicationPresignedUrlRequest::getUrlType() const {
    return m_url_type;
}
void OAICreateApplicationPresignedUrlRequest::setUrlType(const OAIUrlType &url_type) {
    m_url_type = url_type;
    m_url_type_isSet = true;
}

bool OAICreateApplicationPresignedUrlRequest::is_url_type_Set() const{
    return m_url_type_isSet;
}

bool OAICreateApplicationPresignedUrlRequest::is_url_type_Valid() const{
    return m_url_type_isValid;
}

qint32 OAICreateApplicationPresignedUrlRequest::getSessionExpirationDurationInSeconds() const {
    return m_session_expiration_duration_in_seconds;
}
void OAICreateApplicationPresignedUrlRequest::setSessionExpirationDurationInSeconds(const qint32 &session_expiration_duration_in_seconds) {
    m_session_expiration_duration_in_seconds = session_expiration_duration_in_seconds;
    m_session_expiration_duration_in_seconds_isSet = true;
}

bool OAICreateApplicationPresignedUrlRequest::is_session_expiration_duration_in_seconds_Set() const{
    return m_session_expiration_duration_in_seconds_isSet;
}

bool OAICreateApplicationPresignedUrlRequest::is_session_expiration_duration_in_seconds_Valid() const{
    return m_session_expiration_duration_in_seconds_isValid;
}

bool OAICreateApplicationPresignedUrlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_expiration_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationPresignedUrlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_url_type_isValid && true;
}

} // namespace OpenAPI
