/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteApplicationCloudWatchLoggingOptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteApplicationCloudWatchLoggingOptionRequest::OAIDeleteApplicationCloudWatchLoggingOptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteApplicationCloudWatchLoggingOptionRequest::OAIDeleteApplicationCloudWatchLoggingOptionRequest() {
    this->initializeModel();
}

OAIDeleteApplicationCloudWatchLoggingOptionRequest::~OAIDeleteApplicationCloudWatchLoggingOptionRequest() {}

void OAIDeleteApplicationCloudWatchLoggingOptionRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_cloud_watch_logging_option_id_isSet = false;
    m_cloud_watch_logging_option_id_isValid = false;

    m_conditional_token_isSet = false;
    m_conditional_token_isValid = false;
}

void OAIDeleteApplicationCloudWatchLoggingOptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteApplicationCloudWatchLoggingOptionRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_cloud_watch_logging_option_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_id, json[QString("CloudWatchLoggingOptionId")]);
    m_cloud_watch_logging_option_id_isSet = !json[QString("CloudWatchLoggingOptionId")].isNull() && m_cloud_watch_logging_option_id_isValid;

    m_conditional_token_isValid = ::OpenAPI::fromJsonValue(m_conditional_token, json[QString("ConditionalToken")]);
    m_conditional_token_isSet = !json[QString("ConditionalToken")].isNull() && m_conditional_token_isValid;
}

QString OAIDeleteApplicationCloudWatchLoggingOptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteApplicationCloudWatchLoggingOptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_cloud_watch_logging_option_id_isSet) {
        obj.insert(QString("CloudWatchLoggingOptionId"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_id));
    }
    if (m_conditional_token_isSet) {
        obj.insert(QString("ConditionalToken"), ::OpenAPI::toJsonValue(m_conditional_token));
    }
    return obj;
}

QString OAIDeleteApplicationCloudWatchLoggingOptionRequest::getApplicationName() const {
    return m_application_name;
}
void OAIDeleteApplicationCloudWatchLoggingOptionRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIDeleteApplicationCloudWatchLoggingOptionRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIDeleteApplicationCloudWatchLoggingOptionRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

QString OAIDeleteApplicationCloudWatchLoggingOptionRequest::getCloudWatchLoggingOptionId() const {
    return m_cloud_watch_logging_option_id;
}
void OAIDeleteApplicationCloudWatchLoggingOptionRequest::setCloudWatchLoggingOptionId(const QString &cloud_watch_logging_option_id) {
    m_cloud_watch_logging_option_id = cloud_watch_logging_option_id;
    m_cloud_watch_logging_option_id_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_cloud_watch_logging_option_id_Set() const{
    return m_cloud_watch_logging_option_id_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_cloud_watch_logging_option_id_Valid() const{
    return m_cloud_watch_logging_option_id_isValid;
}

QString OAIDeleteApplicationCloudWatchLoggingOptionRequest::getConditionalToken() const {
    return m_conditional_token;
}
void OAIDeleteApplicationCloudWatchLoggingOptionRequest::setConditionalToken(const QString &conditional_token) {
    m_conditional_token = conditional_token;
    m_conditional_token_isSet = true;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_conditional_token_Set() const{
    return m_conditional_token_isSet;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::is_conditional_token_Valid() const{
    return m_conditional_token_isValid;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteApplicationCloudWatchLoggingOptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_cloud_watch_logging_option_id_isValid && true;
}

} // namespace OpenAPI
