/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription() {
    this->initializeModel();
}

OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::~OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription() {}

void OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::initializeModel() {

    m_database_arn_isSet = false;
    m_database_arn_isValid = false;
}

void OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_database_arn_isValid = ::OpenAPI::fromJsonValue(m_database_arn, json[QString("DatabaseARN")]);
    m_database_arn_isSet = !json[QString("DatabaseARN")].isNull() && m_database_arn_isValid;
}

QString OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_database_arn_isSet) {
        obj.insert(QString("DatabaseARN"), ::OpenAPI::toJsonValue(m_database_arn));
    }
    return obj;
}

QString OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::getDatabaseArn() const {
    return m_database_arn;
}
void OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::setDatabaseArn(const QString &database_arn) {
    m_database_arn = database_arn;
    m_database_arn_isSet = true;
}

bool OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::is_database_arn_Set() const{
    return m_database_arn_isSet;
}

bool OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::is_database_arn_Valid() const{
    return m_database_arn_isValid;
}

bool OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogConfigurationDescription_GlueDataCatalogConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_arn_isValid && true;
}

} // namespace OpenAPI
