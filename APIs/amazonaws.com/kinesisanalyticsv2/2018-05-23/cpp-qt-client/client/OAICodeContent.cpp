/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeContent::OAICodeContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeContent::OAICodeContent() {
    this->initializeModel();
}

OAICodeContent::~OAICodeContent() {}

void OAICodeContent::initializeModel() {

    m_text_content_isSet = false;
    m_text_content_isValid = false;

    m_zip_file_content_isSet = false;
    m_zip_file_content_isValid = false;

    m_s3_content_location_isSet = false;
    m_s3_content_location_isValid = false;
}

void OAICodeContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeContent::fromJsonObject(QJsonObject json) {

    m_text_content_isValid = ::OpenAPI::fromJsonValue(m_text_content, json[QString("TextContent")]);
    m_text_content_isSet = !json[QString("TextContent")].isNull() && m_text_content_isValid;

    m_zip_file_content_isValid = ::OpenAPI::fromJsonValue(m_zip_file_content, json[QString("ZipFileContent")]);
    m_zip_file_content_isSet = !json[QString("ZipFileContent")].isNull() && m_zip_file_content_isValid;

    m_s3_content_location_isValid = ::OpenAPI::fromJsonValue(m_s3_content_location, json[QString("S3ContentLocation")]);
    m_s3_content_location_isSet = !json[QString("S3ContentLocation")].isNull() && m_s3_content_location_isValid;
}

QString OAICodeContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeContent::asJsonObject() const {
    QJsonObject obj;
    if (m_text_content_isSet) {
        obj.insert(QString("TextContent"), ::OpenAPI::toJsonValue(m_text_content));
    }
    if (m_zip_file_content_isSet) {
        obj.insert(QString("ZipFileContent"), ::OpenAPI::toJsonValue(m_zip_file_content));
    }
    if (m_s3_content_location.isSet()) {
        obj.insert(QString("S3ContentLocation"), ::OpenAPI::toJsonValue(m_s3_content_location));
    }
    return obj;
}

QString OAICodeContent::getTextContent() const {
    return m_text_content;
}
void OAICodeContent::setTextContent(const QString &text_content) {
    m_text_content = text_content;
    m_text_content_isSet = true;
}

bool OAICodeContent::is_text_content_Set() const{
    return m_text_content_isSet;
}

bool OAICodeContent::is_text_content_Valid() const{
    return m_text_content_isValid;
}

QString OAICodeContent::getZipFileContent() const {
    return m_zip_file_content;
}
void OAICodeContent::setZipFileContent(const QString &zip_file_content) {
    m_zip_file_content = zip_file_content;
    m_zip_file_content_isSet = true;
}

bool OAICodeContent::is_zip_file_content_Set() const{
    return m_zip_file_content_isSet;
}

bool OAICodeContent::is_zip_file_content_Valid() const{
    return m_zip_file_content_isValid;
}

OAICodeContent_S3ContentLocation OAICodeContent::getS3ContentLocation() const {
    return m_s3_content_location;
}
void OAICodeContent::setS3ContentLocation(const OAICodeContent_S3ContentLocation &s3_content_location) {
    m_s3_content_location = s3_content_location;
    m_s3_content_location_isSet = true;
}

bool OAICodeContent::is_s3_content_location_Set() const{
    return m_s3_content_location_isSet;
}

bool OAICodeContent::is_s3_content_location_Valid() const{
    return m_s3_content_location_isValid;
}

bool OAICodeContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_file_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_content_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
