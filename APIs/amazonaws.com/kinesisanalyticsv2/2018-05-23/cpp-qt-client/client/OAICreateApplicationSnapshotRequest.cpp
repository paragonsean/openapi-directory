/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationSnapshotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationSnapshotRequest::OAICreateApplicationSnapshotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationSnapshotRequest::OAICreateApplicationSnapshotRequest() {
    this->initializeModel();
}

OAICreateApplicationSnapshotRequest::~OAICreateApplicationSnapshotRequest() {}

void OAICreateApplicationSnapshotRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_snapshot_name_isSet = false;
    m_snapshot_name_isValid = false;
}

void OAICreateApplicationSnapshotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationSnapshotRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_snapshot_name_isValid = ::OpenAPI::fromJsonValue(m_snapshot_name, json[QString("SnapshotName")]);
    m_snapshot_name_isSet = !json[QString("SnapshotName")].isNull() && m_snapshot_name_isValid;
}

QString OAICreateApplicationSnapshotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationSnapshotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_snapshot_name_isSet) {
        obj.insert(QString("SnapshotName"), ::OpenAPI::toJsonValue(m_snapshot_name));
    }
    return obj;
}

QString OAICreateApplicationSnapshotRequest::getApplicationName() const {
    return m_application_name;
}
void OAICreateApplicationSnapshotRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICreateApplicationSnapshotRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICreateApplicationSnapshotRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAICreateApplicationSnapshotRequest::getSnapshotName() const {
    return m_snapshot_name;
}
void OAICreateApplicationSnapshotRequest::setSnapshotName(const QString &snapshot_name) {
    m_snapshot_name = snapshot_name;
    m_snapshot_name_isSet = true;
}

bool OAICreateApplicationSnapshotRequest::is_snapshot_name_Set() const{
    return m_snapshot_name_isSet;
}

bool OAICreateApplicationSnapshotRequest::is_snapshot_name_Valid() const{
    return m_snapshot_name_isValid;
}

bool OAICreateApplicationSnapshotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationSnapshotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_snapshot_name_isValid && true;
}

} // namespace OpenAPI
