/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceSchema_RecordFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceSchema_RecordFormat::OAISourceSchema_RecordFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceSchema_RecordFormat::OAISourceSchema_RecordFormat() {
    this->initializeModel();
}

OAISourceSchema_RecordFormat::~OAISourceSchema_RecordFormat() {}

void OAISourceSchema_RecordFormat::initializeModel() {

    m_record_format_type_isSet = false;
    m_record_format_type_isValid = false;

    m_mapping_parameters_isSet = false;
    m_mapping_parameters_isValid = false;
}

void OAISourceSchema_RecordFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceSchema_RecordFormat::fromJsonObject(QJsonObject json) {

    m_record_format_type_isValid = ::OpenAPI::fromJsonValue(m_record_format_type, json[QString("RecordFormatType")]);
    m_record_format_type_isSet = !json[QString("RecordFormatType")].isNull() && m_record_format_type_isValid;

    m_mapping_parameters_isValid = ::OpenAPI::fromJsonValue(m_mapping_parameters, json[QString("MappingParameters")]);
    m_mapping_parameters_isSet = !json[QString("MappingParameters")].isNull() && m_mapping_parameters_isValid;
}

QString OAISourceSchema_RecordFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceSchema_RecordFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_record_format_type.isSet()) {
        obj.insert(QString("RecordFormatType"), ::OpenAPI::toJsonValue(m_record_format_type));
    }
    if (m_mapping_parameters.isSet()) {
        obj.insert(QString("MappingParameters"), ::OpenAPI::toJsonValue(m_mapping_parameters));
    }
    return obj;
}

OAIRecordFormatType OAISourceSchema_RecordFormat::getRecordFormatType() const {
    return m_record_format_type;
}
void OAISourceSchema_RecordFormat::setRecordFormatType(const OAIRecordFormatType &record_format_type) {
    m_record_format_type = record_format_type;
    m_record_format_type_isSet = true;
}

bool OAISourceSchema_RecordFormat::is_record_format_type_Set() const{
    return m_record_format_type_isSet;
}

bool OAISourceSchema_RecordFormat::is_record_format_type_Valid() const{
    return m_record_format_type_isValid;
}

OAIRecordFormat_MappingParameters OAISourceSchema_RecordFormat::getMappingParameters() const {
    return m_mapping_parameters;
}
void OAISourceSchema_RecordFormat::setMappingParameters(const OAIRecordFormat_MappingParameters &mapping_parameters) {
    m_mapping_parameters = mapping_parameters;
    m_mapping_parameters_isSet = true;
}

bool OAISourceSchema_RecordFormat::is_mapping_parameters_Set() const{
    return m_mapping_parameters_isSet;
}

bool OAISourceSchema_RecordFormat::is_mapping_parameters_Valid() const{
    return m_mapping_parameters_isValid;
}

bool OAISourceSchema_RecordFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_format_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceSchema_RecordFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_format_type_isValid && true;
}

} // namespace OpenAPI
