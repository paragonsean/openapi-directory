/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutput_KinesisFirehoseOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutput_KinesisFirehoseOutput::OAIOutput_KinesisFirehoseOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutput_KinesisFirehoseOutput::OAIOutput_KinesisFirehoseOutput() {
    this->initializeModel();
}

OAIOutput_KinesisFirehoseOutput::~OAIOutput_KinesisFirehoseOutput() {}

void OAIOutput_KinesisFirehoseOutput::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIOutput_KinesisFirehoseOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutput_KinesisFirehoseOutput::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceARN")]);
    m_resource_arn_isSet = !json[QString("ResourceARN")].isNull() && m_resource_arn_isValid;
}

QString OAIOutput_KinesisFirehoseOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutput_KinesisFirehoseOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceARN"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIOutput_KinesisFirehoseOutput::getResourceArn() const {
    return m_resource_arn;
}
void OAIOutput_KinesisFirehoseOutput::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIOutput_KinesisFirehoseOutput::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIOutput_KinesisFirehoseOutput::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIOutput_KinesisFirehoseOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutput_KinesisFirehoseOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
