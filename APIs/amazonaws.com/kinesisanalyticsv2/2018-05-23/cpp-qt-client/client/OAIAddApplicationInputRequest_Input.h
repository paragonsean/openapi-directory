/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddApplicationInputRequest_Input.h
 *
 * 
 */

#ifndef OAIAddApplicationInputRequest_Input_H
#define OAIAddApplicationInputRequest_Input_H

#include <QJsonObject>

#include "OAIInput_InputParallelism.h"
#include "OAIInput_InputProcessingConfiguration.h"
#include "OAIInput_InputSchema.h"
#include "OAIInput_KinesisFirehoseInput.h"
#include "OAIInput_KinesisStreamsInput.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInput_InputProcessingConfiguration;
class OAIInput_KinesisStreamsInput;
class OAIInput_KinesisFirehoseInput;
class OAIInput_InputParallelism;
class OAIInput_InputSchema;

class OAIAddApplicationInputRequest_Input : public OAIObject {
public:
    OAIAddApplicationInputRequest_Input();
    OAIAddApplicationInputRequest_Input(QString json);
    ~OAIAddApplicationInputRequest_Input() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNamePrefix() const;
    void setNamePrefix(const QString &name_prefix);
    bool is_name_prefix_Set() const;
    bool is_name_prefix_Valid() const;

    OAIInput_InputProcessingConfiguration getInputProcessingConfiguration() const;
    void setInputProcessingConfiguration(const OAIInput_InputProcessingConfiguration &input_processing_configuration);
    bool is_input_processing_configuration_Set() const;
    bool is_input_processing_configuration_Valid() const;

    OAIInput_KinesisStreamsInput getKinesisStreamsInput() const;
    void setKinesisStreamsInput(const OAIInput_KinesisStreamsInput &kinesis_streams_input);
    bool is_kinesis_streams_input_Set() const;
    bool is_kinesis_streams_input_Valid() const;

    OAIInput_KinesisFirehoseInput getKinesisFirehoseInput() const;
    void setKinesisFirehoseInput(const OAIInput_KinesisFirehoseInput &kinesis_firehose_input);
    bool is_kinesis_firehose_input_Set() const;
    bool is_kinesis_firehose_input_Valid() const;

    OAIInput_InputParallelism getInputParallelism() const;
    void setInputParallelism(const OAIInput_InputParallelism &input_parallelism);
    bool is_input_parallelism_Set() const;
    bool is_input_parallelism_Valid() const;

    OAIInput_InputSchema getInputSchema() const;
    void setInputSchema(const OAIInput_InputSchema &input_schema);
    bool is_input_schema_Set() const;
    bool is_input_schema_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name_prefix;
    bool m_name_prefix_isSet;
    bool m_name_prefix_isValid;

    OAIInput_InputProcessingConfiguration m_input_processing_configuration;
    bool m_input_processing_configuration_isSet;
    bool m_input_processing_configuration_isValid;

    OAIInput_KinesisStreamsInput m_kinesis_streams_input;
    bool m_kinesis_streams_input_isSet;
    bool m_kinesis_streams_input_isValid;

    OAIInput_KinesisFirehoseInput m_kinesis_firehose_input;
    bool m_kinesis_firehose_input_isSet;
    bool m_kinesis_firehose_input_isValid;

    OAIInput_InputParallelism m_input_parallelism;
    bool m_input_parallelism_isSet;
    bool m_input_parallelism_isValid;

    OAIInput_InputSchema m_input_schema;
    bool m_input_schema_isSet;
    bool m_input_schema_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddApplicationInputRequest_Input)

#endif // OAIAddApplicationInputRequest_Input_H
