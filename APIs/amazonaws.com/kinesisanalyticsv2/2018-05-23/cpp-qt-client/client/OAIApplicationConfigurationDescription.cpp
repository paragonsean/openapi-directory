/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfigurationDescription::OAIApplicationConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfigurationDescription::OAIApplicationConfigurationDescription() {
    this->initializeModel();
}

OAIApplicationConfigurationDescription::~OAIApplicationConfigurationDescription() {}

void OAIApplicationConfigurationDescription::initializeModel() {

    m_sql_application_configuration_description_isSet = false;
    m_sql_application_configuration_description_isValid = false;

    m_application_code_configuration_description_isSet = false;
    m_application_code_configuration_description_isValid = false;

    m_run_configuration_description_isSet = false;
    m_run_configuration_description_isValid = false;

    m_flink_application_configuration_description_isSet = false;
    m_flink_application_configuration_description_isValid = false;

    m_environment_property_descriptions_isSet = false;
    m_environment_property_descriptions_isValid = false;

    m_application_snapshot_configuration_description_isSet = false;
    m_application_snapshot_configuration_description_isValid = false;

    m_vpc_configuration_descriptions_isSet = false;
    m_vpc_configuration_descriptions_isValid = false;

    m_zeppelin_application_configuration_description_isSet = false;
    m_zeppelin_application_configuration_description_isValid = false;
}

void OAIApplicationConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_sql_application_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_sql_application_configuration_description, json[QString("SqlApplicationConfigurationDescription")]);
    m_sql_application_configuration_description_isSet = !json[QString("SqlApplicationConfigurationDescription")].isNull() && m_sql_application_configuration_description_isValid;

    m_application_code_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_application_code_configuration_description, json[QString("ApplicationCodeConfigurationDescription")]);
    m_application_code_configuration_description_isSet = !json[QString("ApplicationCodeConfigurationDescription")].isNull() && m_application_code_configuration_description_isValid;

    m_run_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_run_configuration_description, json[QString("RunConfigurationDescription")]);
    m_run_configuration_description_isSet = !json[QString("RunConfigurationDescription")].isNull() && m_run_configuration_description_isValid;

    m_flink_application_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_flink_application_configuration_description, json[QString("FlinkApplicationConfigurationDescription")]);
    m_flink_application_configuration_description_isSet = !json[QString("FlinkApplicationConfigurationDescription")].isNull() && m_flink_application_configuration_description_isValid;

    m_environment_property_descriptions_isValid = ::OpenAPI::fromJsonValue(m_environment_property_descriptions, json[QString("EnvironmentPropertyDescriptions")]);
    m_environment_property_descriptions_isSet = !json[QString("EnvironmentPropertyDescriptions")].isNull() && m_environment_property_descriptions_isValid;

    m_application_snapshot_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_application_snapshot_configuration_description, json[QString("ApplicationSnapshotConfigurationDescription")]);
    m_application_snapshot_configuration_description_isSet = !json[QString("ApplicationSnapshotConfigurationDescription")].isNull() && m_application_snapshot_configuration_description_isValid;

    m_vpc_configuration_descriptions_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration_descriptions, json[QString("VpcConfigurationDescriptions")]);
    m_vpc_configuration_descriptions_isSet = !json[QString("VpcConfigurationDescriptions")].isNull() && m_vpc_configuration_descriptions_isValid;

    m_zeppelin_application_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_zeppelin_application_configuration_description, json[QString("ZeppelinApplicationConfigurationDescription")]);
    m_zeppelin_application_configuration_description_isSet = !json[QString("ZeppelinApplicationConfigurationDescription")].isNull() && m_zeppelin_application_configuration_description_isValid;
}

QString OAIApplicationConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_sql_application_configuration_description.isSet()) {
        obj.insert(QString("SqlApplicationConfigurationDescription"), ::OpenAPI::toJsonValue(m_sql_application_configuration_description));
    }
    if (m_application_code_configuration_description.isSet()) {
        obj.insert(QString("ApplicationCodeConfigurationDescription"), ::OpenAPI::toJsonValue(m_application_code_configuration_description));
    }
    if (m_run_configuration_description.isSet()) {
        obj.insert(QString("RunConfigurationDescription"), ::OpenAPI::toJsonValue(m_run_configuration_description));
    }
    if (m_flink_application_configuration_description.isSet()) {
        obj.insert(QString("FlinkApplicationConfigurationDescription"), ::OpenAPI::toJsonValue(m_flink_application_configuration_description));
    }
    if (m_environment_property_descriptions.isSet()) {
        obj.insert(QString("EnvironmentPropertyDescriptions"), ::OpenAPI::toJsonValue(m_environment_property_descriptions));
    }
    if (m_application_snapshot_configuration_description.isSet()) {
        obj.insert(QString("ApplicationSnapshotConfigurationDescription"), ::OpenAPI::toJsonValue(m_application_snapshot_configuration_description));
    }
    if (m_vpc_configuration_descriptions.isSet()) {
        obj.insert(QString("VpcConfigurationDescriptions"), ::OpenAPI::toJsonValue(m_vpc_configuration_descriptions));
    }
    if (m_zeppelin_application_configuration_description.isSet()) {
        obj.insert(QString("ZeppelinApplicationConfigurationDescription"), ::OpenAPI::toJsonValue(m_zeppelin_application_configuration_description));
    }
    return obj;
}

OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription OAIApplicationConfigurationDescription::getSqlApplicationConfigurationDescription() const {
    return m_sql_application_configuration_description;
}
void OAIApplicationConfigurationDescription::setSqlApplicationConfigurationDescription(const OAIApplicationConfigurationDescription_SqlApplicationConfigurationDescription &sql_application_configuration_description) {
    m_sql_application_configuration_description = sql_application_configuration_description;
    m_sql_application_configuration_description_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_sql_application_configuration_description_Set() const{
    return m_sql_application_configuration_description_isSet;
}

bool OAIApplicationConfigurationDescription::is_sql_application_configuration_description_Valid() const{
    return m_sql_application_configuration_description_isValid;
}

OAIApplicationConfigurationDescription_ApplicationCodeConfigurationDescription OAIApplicationConfigurationDescription::getApplicationCodeConfigurationDescription() const {
    return m_application_code_configuration_description;
}
void OAIApplicationConfigurationDescription::setApplicationCodeConfigurationDescription(const OAIApplicationConfigurationDescription_ApplicationCodeConfigurationDescription &application_code_configuration_description) {
    m_application_code_configuration_description = application_code_configuration_description;
    m_application_code_configuration_description_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_application_code_configuration_description_Set() const{
    return m_application_code_configuration_description_isSet;
}

bool OAIApplicationConfigurationDescription::is_application_code_configuration_description_Valid() const{
    return m_application_code_configuration_description_isValid;
}

OAIApplicationConfigurationDescription_RunConfigurationDescription OAIApplicationConfigurationDescription::getRunConfigurationDescription() const {
    return m_run_configuration_description;
}
void OAIApplicationConfigurationDescription::setRunConfigurationDescription(const OAIApplicationConfigurationDescription_RunConfigurationDescription &run_configuration_description) {
    m_run_configuration_description = run_configuration_description;
    m_run_configuration_description_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_run_configuration_description_Set() const{
    return m_run_configuration_description_isSet;
}

bool OAIApplicationConfigurationDescription::is_run_configuration_description_Valid() const{
    return m_run_configuration_description_isValid;
}

OAIApplicationConfigurationDescription_FlinkApplicationConfigurationDescription OAIApplicationConfigurationDescription::getFlinkApplicationConfigurationDescription() const {
    return m_flink_application_configuration_description;
}
void OAIApplicationConfigurationDescription::setFlinkApplicationConfigurationDescription(const OAIApplicationConfigurationDescription_FlinkApplicationConfigurationDescription &flink_application_configuration_description) {
    m_flink_application_configuration_description = flink_application_configuration_description;
    m_flink_application_configuration_description_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_flink_application_configuration_description_Set() const{
    return m_flink_application_configuration_description_isSet;
}

bool OAIApplicationConfigurationDescription::is_flink_application_configuration_description_Valid() const{
    return m_flink_application_configuration_description_isValid;
}

OAIApplicationConfigurationDescription_EnvironmentPropertyDescriptions OAIApplicationConfigurationDescription::getEnvironmentPropertyDescriptions() const {
    return m_environment_property_descriptions;
}
void OAIApplicationConfigurationDescription::setEnvironmentPropertyDescriptions(const OAIApplicationConfigurationDescription_EnvironmentPropertyDescriptions &environment_property_descriptions) {
    m_environment_property_descriptions = environment_property_descriptions;
    m_environment_property_descriptions_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_environment_property_descriptions_Set() const{
    return m_environment_property_descriptions_isSet;
}

bool OAIApplicationConfigurationDescription::is_environment_property_descriptions_Valid() const{
    return m_environment_property_descriptions_isValid;
}

OAIApplicationConfigurationDescription_ApplicationSnapshotConfigurationDescription OAIApplicationConfigurationDescription::getApplicationSnapshotConfigurationDescription() const {
    return m_application_snapshot_configuration_description;
}
void OAIApplicationConfigurationDescription::setApplicationSnapshotConfigurationDescription(const OAIApplicationConfigurationDescription_ApplicationSnapshotConfigurationDescription &application_snapshot_configuration_description) {
    m_application_snapshot_configuration_description = application_snapshot_configuration_description;
    m_application_snapshot_configuration_description_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_application_snapshot_configuration_description_Set() const{
    return m_application_snapshot_configuration_description_isSet;
}

bool OAIApplicationConfigurationDescription::is_application_snapshot_configuration_description_Valid() const{
    return m_application_snapshot_configuration_description_isValid;
}

QList OAIApplicationConfigurationDescription::getVpcConfigurationDescriptions() const {
    return m_vpc_configuration_descriptions;
}
void OAIApplicationConfigurationDescription::setVpcConfigurationDescriptions(const QList &vpc_configuration_descriptions) {
    m_vpc_configuration_descriptions = vpc_configuration_descriptions;
    m_vpc_configuration_descriptions_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_vpc_configuration_descriptions_Set() const{
    return m_vpc_configuration_descriptions_isSet;
}

bool OAIApplicationConfigurationDescription::is_vpc_configuration_descriptions_Valid() const{
    return m_vpc_configuration_descriptions_isValid;
}

OAIApplicationConfigurationDescription_ZeppelinApplicationConfigurationDescription OAIApplicationConfigurationDescription::getZeppelinApplicationConfigurationDescription() const {
    return m_zeppelin_application_configuration_description;
}
void OAIApplicationConfigurationDescription::setZeppelinApplicationConfigurationDescription(const OAIApplicationConfigurationDescription_ZeppelinApplicationConfigurationDescription &zeppelin_application_configuration_description) {
    m_zeppelin_application_configuration_description = zeppelin_application_configuration_description;
    m_zeppelin_application_configuration_description_isSet = true;
}

bool OAIApplicationConfigurationDescription::is_zeppelin_application_configuration_description_Set() const{
    return m_zeppelin_application_configuration_description_isSet;
}

bool OAIApplicationConfigurationDescription::is_zeppelin_application_configuration_description_Valid() const{
    return m_zeppelin_application_configuration_description_isValid;
}

bool OAIApplicationConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sql_application_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_code_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flink_application_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_property_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_snapshot_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zeppelin_application_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
