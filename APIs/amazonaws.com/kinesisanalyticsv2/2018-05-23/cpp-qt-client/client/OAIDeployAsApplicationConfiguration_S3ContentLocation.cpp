/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployAsApplicationConfiguration_S3ContentLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployAsApplicationConfiguration_S3ContentLocation::OAIDeployAsApplicationConfiguration_S3ContentLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployAsApplicationConfiguration_S3ContentLocation::OAIDeployAsApplicationConfiguration_S3ContentLocation() {
    this->initializeModel();
}

OAIDeployAsApplicationConfiguration_S3ContentLocation::~OAIDeployAsApplicationConfiguration_S3ContentLocation() {}

void OAIDeployAsApplicationConfiguration_S3ContentLocation::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_base_path_isSet = false;
    m_base_path_isValid = false;
}

void OAIDeployAsApplicationConfiguration_S3ContentLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployAsApplicationConfiguration_S3ContentLocation::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketARN")]);
    m_bucket_arn_isSet = !json[QString("BucketARN")].isNull() && m_bucket_arn_isValid;

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("BasePath")]);
    m_base_path_isSet = !json[QString("BasePath")].isNull() && m_base_path_isValid;
}

QString OAIDeployAsApplicationConfiguration_S3ContentLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployAsApplicationConfiguration_S3ContentLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketARN"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_base_path_isSet) {
        obj.insert(QString("BasePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    return obj;
}

QString OAIDeployAsApplicationConfiguration_S3ContentLocation::getBucketArn() const {
    return m_bucket_arn;
}
void OAIDeployAsApplicationConfiguration_S3ContentLocation::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIDeployAsApplicationConfiguration_S3ContentLocation::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIDeployAsApplicationConfiguration_S3ContentLocation::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAIDeployAsApplicationConfiguration_S3ContentLocation::getBasePath() const {
    return m_base_path;
}
void OAIDeployAsApplicationConfiguration_S3ContentLocation::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAIDeployAsApplicationConfiguration_S3ContentLocation::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAIDeployAsApplicationConfiguration_S3ContentLocation::is_base_path_Valid() const{
    return m_base_path_isValid;
}

bool OAIDeployAsApplicationConfiguration_S3ContentLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployAsApplicationConfiguration_S3ContentLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_arn_isValid && true;
}

} // namespace OpenAPI
