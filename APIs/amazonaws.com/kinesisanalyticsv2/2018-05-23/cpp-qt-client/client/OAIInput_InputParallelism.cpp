/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput_InputParallelism.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput_InputParallelism::OAIInput_InputParallelism(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput_InputParallelism::OAIInput_InputParallelism() {
    this->initializeModel();
}

OAIInput_InputParallelism::~OAIInput_InputParallelism() {}

void OAIInput_InputParallelism::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;
}

void OAIInput_InputParallelism::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput_InputParallelism::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;
}

QString OAIInput_InputParallelism::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput_InputParallelism::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    return obj;
}

qint32 OAIInput_InputParallelism::getCount() const {
    return m_count;
}
void OAIInput_InputParallelism::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIInput_InputParallelism::is_count_Set() const{
    return m_count_isSet;
}

bool OAIInput_InputParallelism::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIInput_InputParallelism::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput_InputParallelism::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
