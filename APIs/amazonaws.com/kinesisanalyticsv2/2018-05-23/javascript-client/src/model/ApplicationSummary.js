/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationMode from './ApplicationMode';
import ApplicationStatus from './ApplicationStatus';
import RuntimeEnvironment from './RuntimeEnvironment';

/**
 * The ApplicationSummary model module.
 * @module model/ApplicationSummary
 * @version 2018-05-23
 */
class ApplicationSummary {
    /**
     * Constructs a new <code>ApplicationSummary</code>.
     * Provides application summary information, including the application Amazon Resource Name (ARN), name, and status.
     * @alias module:model/ApplicationSummary
     * @param applicationName {String} 
     * @param applicationARN {String} 
     * @param applicationStatus {module:model/ApplicationStatus} 
     * @param applicationVersionId {Number} 
     * @param runtimeEnvironment {module:model/RuntimeEnvironment} 
     */
    constructor(applicationName, applicationARN, applicationStatus, applicationVersionId, runtimeEnvironment) { 
        
        ApplicationSummary.initialize(this, applicationName, applicationARN, applicationStatus, applicationVersionId, runtimeEnvironment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationName, applicationARN, applicationStatus, applicationVersionId, runtimeEnvironment) { 
        obj['ApplicationName'] = applicationName;
        obj['ApplicationARN'] = applicationARN;
        obj['ApplicationStatus'] = applicationStatus;
        obj['ApplicationVersionId'] = applicationVersionId;
        obj['RuntimeEnvironment'] = runtimeEnvironment;
    }

    /**
     * Constructs a <code>ApplicationSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationSummary} obj Optional instance to populate.
     * @return {module:model/ApplicationSummary} The populated <code>ApplicationSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationSummary();

            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('ApplicationARN')) {
                obj['ApplicationARN'] = ApiClient.convertToType(data['ApplicationARN'], 'String');
            }
            if (data.hasOwnProperty('ApplicationStatus')) {
                obj['ApplicationStatus'] = ApiClient.convertToType(data['ApplicationStatus'], ApplicationStatus);
            }
            if (data.hasOwnProperty('ApplicationVersionId')) {
                obj['ApplicationVersionId'] = ApiClient.convertToType(data['ApplicationVersionId'], 'Number');
            }
            if (data.hasOwnProperty('RuntimeEnvironment')) {
                obj['RuntimeEnvironment'] = ApiClient.convertToType(data['RuntimeEnvironment'], RuntimeEnvironment);
            }
            if (data.hasOwnProperty('ApplicationMode')) {
                obj['ApplicationMode'] = ApiClient.convertToType(data['ApplicationMode'], ApplicationMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ApplicationName`
        if (data['ApplicationName']) { // data not null
          String.validateJSON(data['ApplicationName']);
        }
        // validate the optional field `ApplicationARN`
        if (data['ApplicationARN']) { // data not null
          String.validateJSON(data['ApplicationARN']);
        }
        // validate the optional field `ApplicationStatus`
        if (data['ApplicationStatus']) { // data not null
          ApplicationStatus.validateJSON(data['ApplicationStatus']);
        }
        // validate the optional field `ApplicationVersionId`
        if (data['ApplicationVersionId']) { // data not null
          Number.validateJSON(data['ApplicationVersionId']);
        }
        // validate the optional field `RuntimeEnvironment`
        if (data['RuntimeEnvironment']) { // data not null
          RuntimeEnvironment.validateJSON(data['RuntimeEnvironment']);
        }
        // validate the optional field `ApplicationMode`
        if (data['ApplicationMode']) { // data not null
          ApplicationMode.validateJSON(data['ApplicationMode']);
        }

        return true;
    }


}

ApplicationSummary.RequiredProperties = ["ApplicationName", "ApplicationARN", "ApplicationStatus", "ApplicationVersionId", "RuntimeEnvironment"];

/**
 * @member {String} ApplicationName
 */
ApplicationSummary.prototype['ApplicationName'] = undefined;

/**
 * @member {String} ApplicationARN
 */
ApplicationSummary.prototype['ApplicationARN'] = undefined;

/**
 * @member {module:model/ApplicationStatus} ApplicationStatus
 */
ApplicationSummary.prototype['ApplicationStatus'] = undefined;

/**
 * @member {Number} ApplicationVersionId
 */
ApplicationSummary.prototype['ApplicationVersionId'] = undefined;

/**
 * @member {module:model/RuntimeEnvironment} RuntimeEnvironment
 */
ApplicationSummary.prototype['RuntimeEnvironment'] = undefined;

/**
 * @member {module:model/ApplicationMode} ApplicationMode
 */
ApplicationSummary.prototype['ApplicationMode'] = undefined;






export default ApplicationSummary;

