/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddApplicationCloudWatchLoggingOptionRequest from '../model/AddApplicationCloudWatchLoggingOptionRequest';
import AddApplicationCloudWatchLoggingOptionResponse from '../model/AddApplicationCloudWatchLoggingOptionResponse';
import AddApplicationInputProcessingConfigurationRequest from '../model/AddApplicationInputProcessingConfigurationRequest';
import AddApplicationInputProcessingConfigurationResponse from '../model/AddApplicationInputProcessingConfigurationResponse';
import AddApplicationInputRequest from '../model/AddApplicationInputRequest';
import AddApplicationInputResponse from '../model/AddApplicationInputResponse';
import AddApplicationOutputRequest from '../model/AddApplicationOutputRequest';
import AddApplicationOutputResponse from '../model/AddApplicationOutputResponse';
import AddApplicationReferenceDataSourceRequest from '../model/AddApplicationReferenceDataSourceRequest';
import AddApplicationReferenceDataSourceResponse from '../model/AddApplicationReferenceDataSourceResponse';
import AddApplicationVpcConfigurationRequest from '../model/AddApplicationVpcConfigurationRequest';
import AddApplicationVpcConfigurationResponse from '../model/AddApplicationVpcConfigurationResponse';
import CreateApplicationPresignedUrlRequest from '../model/CreateApplicationPresignedUrlRequest';
import CreateApplicationPresignedUrlResponse from '../model/CreateApplicationPresignedUrlResponse';
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import CreateApplicationResponse from '../model/CreateApplicationResponse';
import CreateApplicationSnapshotRequest from '../model/CreateApplicationSnapshotRequest';
import DeleteApplicationCloudWatchLoggingOptionRequest from '../model/DeleteApplicationCloudWatchLoggingOptionRequest';
import DeleteApplicationCloudWatchLoggingOptionResponse from '../model/DeleteApplicationCloudWatchLoggingOptionResponse';
import DeleteApplicationInputProcessingConfigurationRequest from '../model/DeleteApplicationInputProcessingConfigurationRequest';
import DeleteApplicationInputProcessingConfigurationResponse from '../model/DeleteApplicationInputProcessingConfigurationResponse';
import DeleteApplicationOutputRequest from '../model/DeleteApplicationOutputRequest';
import DeleteApplicationOutputResponse from '../model/DeleteApplicationOutputResponse';
import DeleteApplicationReferenceDataSourceRequest from '../model/DeleteApplicationReferenceDataSourceRequest';
import DeleteApplicationReferenceDataSourceResponse from '../model/DeleteApplicationReferenceDataSourceResponse';
import DeleteApplicationRequest from '../model/DeleteApplicationRequest';
import DeleteApplicationSnapshotRequest from '../model/DeleteApplicationSnapshotRequest';
import DeleteApplicationVpcConfigurationRequest from '../model/DeleteApplicationVpcConfigurationRequest';
import DeleteApplicationVpcConfigurationResponse from '../model/DeleteApplicationVpcConfigurationResponse';
import DescribeApplicationRequest from '../model/DescribeApplicationRequest';
import DescribeApplicationResponse from '../model/DescribeApplicationResponse';
import DescribeApplicationSnapshotRequest from '../model/DescribeApplicationSnapshotRequest';
import DescribeApplicationSnapshotResponse from '../model/DescribeApplicationSnapshotResponse';
import DescribeApplicationVersionRequest from '../model/DescribeApplicationVersionRequest';
import DescribeApplicationVersionResponse from '../model/DescribeApplicationVersionResponse';
import DiscoverInputSchemaRequest from '../model/DiscoverInputSchemaRequest';
import DiscoverInputSchemaResponse from '../model/DiscoverInputSchemaResponse';
import ListApplicationSnapshotsRequest from '../model/ListApplicationSnapshotsRequest';
import ListApplicationSnapshotsResponse from '../model/ListApplicationSnapshotsResponse';
import ListApplicationVersionsRequest from '../model/ListApplicationVersionsRequest';
import ListApplicationVersionsResponse from '../model/ListApplicationVersionsResponse';
import ListApplicationsRequest from '../model/ListApplicationsRequest';
import ListApplicationsResponse from '../model/ListApplicationsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import RollbackApplicationRequest from '../model/RollbackApplicationRequest';
import RollbackApplicationResponse from '../model/RollbackApplicationResponse';
import StartApplicationRequest from '../model/StartApplicationRequest';
import StopApplicationRequest from '../model/StopApplicationRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateApplicationMaintenanceConfigurationRequest from '../model/UpdateApplicationMaintenanceConfigurationRequest';
import UpdateApplicationMaintenanceConfigurationResponse from '../model/UpdateApplicationMaintenanceConfigurationResponse';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';
import UpdateApplicationResponse from '../model/UpdateApplicationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-05-23
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addApplicationCloudWatchLoggingOption operation.
     * @callback module:api/DefaultApi~addApplicationCloudWatchLoggingOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApplicationCloudWatchLoggingOptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an Amazon CloudWatch log stream to monitor application configuration errors.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddApplicationCloudWatchLoggingOptionRequest} addApplicationCloudWatchLoggingOptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addApplicationCloudWatchLoggingOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApplicationCloudWatchLoggingOptionResponse}
     */
    addApplicationCloudWatchLoggingOption(xAmzTarget, addApplicationCloudWatchLoggingOptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = addApplicationCloudWatchLoggingOptionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addApplicationCloudWatchLoggingOption");
      }
      // verify the required parameter 'addApplicationCloudWatchLoggingOptionRequest' is set
      if (addApplicationCloudWatchLoggingOptionRequest === undefined || addApplicationCloudWatchLoggingOptionRequest === null) {
        throw new Error("Missing the required parameter 'addApplicationCloudWatchLoggingOptionRequest' when calling addApplicationCloudWatchLoggingOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApplicationCloudWatchLoggingOptionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.AddApplicationCloudWatchLoggingOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApplicationInput operation.
     * @callback module:api/DefaultApi~addApplicationInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApplicationInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Adds a streaming source to your SQL-based Kinesis Data Analytics application. </p> <p>You can add a streaming source when you create an application, or you can use this operation to add a streaming source after you create an application. For more information, see <a>CreateApplication</a>.</p> <p>Any configuration update, including adding a streaming source using this operation, results in a new version of the application. You can use the <a>DescribeApplication</a> operation to find the current application version. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddApplicationInputRequest} addApplicationInputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addApplicationInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApplicationInputResponse}
     */
    addApplicationInput(xAmzTarget, addApplicationInputRequest, opts, callback) {
      opts = opts || {};
      let postBody = addApplicationInputRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addApplicationInput");
      }
      // verify the required parameter 'addApplicationInputRequest' is set
      if (addApplicationInputRequest === undefined || addApplicationInputRequest === null) {
        throw new Error("Missing the required parameter 'addApplicationInputRequest' when calling addApplicationInput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApplicationInputResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.AddApplicationInput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApplicationInputProcessingConfiguration operation.
     * @callback module:api/DefaultApi~addApplicationInputProcessingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApplicationInputProcessingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an <a>InputProcessingConfiguration</a> to a SQL-based Kinesis Data Analytics application. An input processor pre-processes records on the input stream before the application's SQL code executes. Currently, the only input processor available is <a href=\"https://docs.aws.amazon.com/lambda/\">Amazon Lambda</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddApplicationInputProcessingConfigurationRequest} addApplicationInputProcessingConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addApplicationInputProcessingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApplicationInputProcessingConfigurationResponse}
     */
    addApplicationInputProcessingConfiguration(xAmzTarget, addApplicationInputProcessingConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = addApplicationInputProcessingConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addApplicationInputProcessingConfiguration");
      }
      // verify the required parameter 'addApplicationInputProcessingConfigurationRequest' is set
      if (addApplicationInputProcessingConfigurationRequest === undefined || addApplicationInputProcessingConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'addApplicationInputProcessingConfigurationRequest' when calling addApplicationInputProcessingConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApplicationInputProcessingConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.AddApplicationInputProcessingConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApplicationOutput operation.
     * @callback module:api/DefaultApi~addApplicationOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApplicationOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an external destination to your SQL-based Kinesis Data Analytics application.</p> <p>If you want Kinesis Data Analytics to deliver data from an in-application stream within your application to an external destination (such as an Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), you add the relevant configuration to your application using this operation. You can configure one or more outputs for your application. Each output configuration maps an in-application stream and an external destination.</p> <p> You can use one of the output configurations to deliver data from your in-application error stream to an external destination so that you can analyze the errors. </p> <p> Any configuration update, including adding a streaming source using this operation, results in a new version of the application. You can use the <a>DescribeApplication</a> operation to find the current application version.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddApplicationOutputRequest} addApplicationOutputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addApplicationOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApplicationOutputResponse}
     */
    addApplicationOutput(xAmzTarget, addApplicationOutputRequest, opts, callback) {
      opts = opts || {};
      let postBody = addApplicationOutputRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addApplicationOutput");
      }
      // verify the required parameter 'addApplicationOutputRequest' is set
      if (addApplicationOutputRequest === undefined || addApplicationOutputRequest === null) {
        throw new Error("Missing the required parameter 'addApplicationOutputRequest' when calling addApplicationOutput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApplicationOutputResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.AddApplicationOutput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApplicationReferenceDataSource operation.
     * @callback module:api/DefaultApi~addApplicationReferenceDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApplicationReferenceDataSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds a reference data source to an existing SQL-based Kinesis Data Analytics application.</p> <p>Kinesis Data Analytics reads reference data (that is, an Amazon S3 object) and creates an in-application table within your application. In the request, you provide the source (S3 bucket name and object key name), name of the in-application table to create, and the necessary mapping information that describes how data in an Amazon S3 object maps to columns in the resulting in-application table.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddApplicationReferenceDataSourceRequest} addApplicationReferenceDataSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addApplicationReferenceDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApplicationReferenceDataSourceResponse}
     */
    addApplicationReferenceDataSource(xAmzTarget, addApplicationReferenceDataSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = addApplicationReferenceDataSourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addApplicationReferenceDataSource");
      }
      // verify the required parameter 'addApplicationReferenceDataSourceRequest' is set
      if (addApplicationReferenceDataSourceRequest === undefined || addApplicationReferenceDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'addApplicationReferenceDataSourceRequest' when calling addApplicationReferenceDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApplicationReferenceDataSourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.AddApplicationReferenceDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApplicationVpcConfiguration operation.
     * @callback module:api/DefaultApi~addApplicationVpcConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddApplicationVpcConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds a Virtual Private Cloud (VPC) configuration to the application. Applications can use VPCs to store and access resources securely.</p> <p>Note the following about VPC configurations for Kinesis Data Analytics applications:</p> <ul> <li> <p>VPC configurations are not supported for SQL applications.</p> </li> <li> <p>When a VPC is added to a Kinesis Data Analytics application, the application can no longer be accessed from the Internet directly. To enable Internet access to the application, add an Internet gateway to your VPC.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddApplicationVpcConfigurationRequest} addApplicationVpcConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addApplicationVpcConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddApplicationVpcConfigurationResponse}
     */
    addApplicationVpcConfiguration(xAmzTarget, addApplicationVpcConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = addApplicationVpcConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addApplicationVpcConfiguration");
      }
      // verify the required parameter 'addApplicationVpcConfigurationRequest' is set
      if (addApplicationVpcConfigurationRequest === undefined || addApplicationVpcConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'addApplicationVpcConfigurationRequest' when calling addApplicationVpcConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddApplicationVpcConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.AddApplicationVpcConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/DefaultApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Kinesis Data Analytics application. For information about creating a Kinesis Data Analytics application, see <a href=\"https://docs.aws.amazon.com/kinesisanalytics/latest/java/getting-started.html\">Creating an Application</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateApplicationRequest} createApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationResponse}
     */
    createApplication(xAmzTarget, createApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createApplication");
      }
      // verify the required parameter 'createApplicationRequest' is set
      if (createApplicationRequest === undefined || createApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationRequest' when calling createApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.CreateApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplicationPresignedUrl operation.
     * @callback module:api/DefaultApi~createApplicationPresignedUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationPresignedUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates and returns a URL that you can use to connect to an application's extension.</p> <p>The IAM role or user used to call this API defines the permissions to access the extension. After the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request that attempts to connect to the extension. </p> <p>You control the amount of time that the URL will be valid using the <code>SessionExpirationDurationInSeconds</code> parameter. If you do not provide this parameter, the returned URL is valid for twelve hours.</p> <note> <p>The URL that you get from a call to CreateApplicationPresignedUrl must be used within 3 minutes to be valid. If you first try to use the URL after the 3-minute limit expires, the service returns an HTTP 403 Forbidden error.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateApplicationPresignedUrlRequest} createApplicationPresignedUrlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationPresignedUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationPresignedUrlResponse}
     */
    createApplicationPresignedUrl(xAmzTarget, createApplicationPresignedUrlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationPresignedUrlRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createApplicationPresignedUrl");
      }
      // verify the required parameter 'createApplicationPresignedUrlRequest' is set
      if (createApplicationPresignedUrlRequest === undefined || createApplicationPresignedUrlRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationPresignedUrlRequest' when calling createApplicationPresignedUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationPresignedUrlResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.CreateApplicationPresignedUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplicationSnapshot operation.
     * @callback module:api/DefaultApi~createApplicationSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a snapshot of the application's state data.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateApplicationSnapshotRequest} createApplicationSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createApplicationSnapshot(xAmzTarget, createApplicationSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationSnapshotRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createApplicationSnapshot");
      }
      // verify the required parameter 'createApplicationSnapshotRequest' is set
      if (createApplicationSnapshotRequest === undefined || createApplicationSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationSnapshotRequest' when calling createApplicationSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.CreateApplicationSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified application. Kinesis Data Analytics halts application execution and deletes the application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationRequest} deleteApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApplication(xAmzTarget, deleteApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplication");
      }
      // verify the required parameter 'deleteApplicationRequest' is set
      if (deleteApplicationRequest === undefined || deleteApplicationRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationRequest' when calling deleteApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationCloudWatchLoggingOption operation.
     * @callback module:api/DefaultApi~deleteApplicationCloudWatchLoggingOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApplicationCloudWatchLoggingOptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon CloudWatch log stream from an Kinesis Data Analytics application. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationCloudWatchLoggingOptionRequest} deleteApplicationCloudWatchLoggingOptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationCloudWatchLoggingOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApplicationCloudWatchLoggingOptionResponse}
     */
    deleteApplicationCloudWatchLoggingOption(xAmzTarget, deleteApplicationCloudWatchLoggingOptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationCloudWatchLoggingOptionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplicationCloudWatchLoggingOption");
      }
      // verify the required parameter 'deleteApplicationCloudWatchLoggingOptionRequest' is set
      if (deleteApplicationCloudWatchLoggingOptionRequest === undefined || deleteApplicationCloudWatchLoggingOptionRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationCloudWatchLoggingOptionRequest' when calling deleteApplicationCloudWatchLoggingOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteApplicationCloudWatchLoggingOptionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplicationCloudWatchLoggingOption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationInputProcessingConfiguration operation.
     * @callback module:api/DefaultApi~deleteApplicationInputProcessingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApplicationInputProcessingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an <a>InputProcessingConfiguration</a> from an input.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationInputProcessingConfigurationRequest} deleteApplicationInputProcessingConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationInputProcessingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApplicationInputProcessingConfigurationResponse}
     */
    deleteApplicationInputProcessingConfiguration(xAmzTarget, deleteApplicationInputProcessingConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationInputProcessingConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplicationInputProcessingConfiguration");
      }
      // verify the required parameter 'deleteApplicationInputProcessingConfigurationRequest' is set
      if (deleteApplicationInputProcessingConfigurationRequest === undefined || deleteApplicationInputProcessingConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationInputProcessingConfigurationRequest' when calling deleteApplicationInputProcessingConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteApplicationInputProcessingConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplicationInputProcessingConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationOutput operation.
     * @callback module:api/DefaultApi~deleteApplicationOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApplicationOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the output destination configuration from your SQL-based Kinesis Data Analytics application's configuration. Kinesis Data Analytics will no longer write data from the corresponding in-application stream to the external output destination.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationOutputRequest} deleteApplicationOutputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApplicationOutputResponse}
     */
    deleteApplicationOutput(xAmzTarget, deleteApplicationOutputRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationOutputRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplicationOutput");
      }
      // verify the required parameter 'deleteApplicationOutputRequest' is set
      if (deleteApplicationOutputRequest === undefined || deleteApplicationOutputRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationOutputRequest' when calling deleteApplicationOutput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteApplicationOutputResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplicationOutput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationReferenceDataSource operation.
     * @callback module:api/DefaultApi~deleteApplicationReferenceDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApplicationReferenceDataSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a reference data source configuration from the specified SQL-based Kinesis Data Analytics application's configuration.</p> <p>If the application is running, Kinesis Data Analytics immediately removes the in-application table that you created using the <a>AddApplicationReferenceDataSource</a> operation. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationReferenceDataSourceRequest} deleteApplicationReferenceDataSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationReferenceDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApplicationReferenceDataSourceResponse}
     */
    deleteApplicationReferenceDataSource(xAmzTarget, deleteApplicationReferenceDataSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationReferenceDataSourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplicationReferenceDataSource");
      }
      // verify the required parameter 'deleteApplicationReferenceDataSourceRequest' is set
      if (deleteApplicationReferenceDataSourceRequest === undefined || deleteApplicationReferenceDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationReferenceDataSourceRequest' when calling deleteApplicationReferenceDataSource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteApplicationReferenceDataSourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplicationReferenceDataSource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationSnapshot operation.
     * @callback module:api/DefaultApi~deleteApplicationSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a snapshot of application state.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationSnapshotRequest} deleteApplicationSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApplicationSnapshot(xAmzTarget, deleteApplicationSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationSnapshotRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplicationSnapshot");
      }
      // verify the required parameter 'deleteApplicationSnapshotRequest' is set
      if (deleteApplicationSnapshotRequest === undefined || deleteApplicationSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationSnapshotRequest' when calling deleteApplicationSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplicationSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationVpcConfiguration operation.
     * @callback module:api/DefaultApi~deleteApplicationVpcConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApplicationVpcConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a VPC configuration from a Kinesis Data Analytics application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationVpcConfigurationRequest} deleteApplicationVpcConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationVpcConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApplicationVpcConfigurationResponse}
     */
    deleteApplicationVpcConfiguration(xAmzTarget, deleteApplicationVpcConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationVpcConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplicationVpcConfiguration");
      }
      // verify the required parameter 'deleteApplicationVpcConfigurationRequest' is set
      if (deleteApplicationVpcConfigurationRequest === undefined || deleteApplicationVpcConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationVpcConfigurationRequest' when calling deleteApplicationVpcConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteApplicationVpcConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DeleteApplicationVpcConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplication operation.
     * @callback module:api/DefaultApi~describeApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about a specific Kinesis Data Analytics application.</p> <p>If you want to retrieve a list of all applications in your account, use the <a>ListApplications</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeApplicationRequest} describeApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationResponse}
     */
    describeApplication(xAmzTarget, describeApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeApplication");
      }
      // verify the required parameter 'describeApplicationRequest' is set
      if (describeApplicationRequest === undefined || describeApplicationRequest === null) {
        throw new Error("Missing the required parameter 'describeApplicationRequest' when calling describeApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DescribeApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplicationSnapshot operation.
     * @callback module:api/DefaultApi~describeApplicationSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationSnapshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a snapshot of application state data.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeApplicationSnapshotRequest} describeApplicationSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationSnapshotResponse}
     */
    describeApplicationSnapshot(xAmzTarget, describeApplicationSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeApplicationSnapshotRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeApplicationSnapshot");
      }
      // verify the required parameter 'describeApplicationSnapshotRequest' is set
      if (describeApplicationSnapshotRequest === undefined || describeApplicationSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'describeApplicationSnapshotRequest' when calling describeApplicationSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationSnapshotResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DescribeApplicationSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplicationVersion operation.
     * @callback module:api/DefaultApi~describeApplicationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a detailed description of a specified version of the application. To see a list of all the versions of an application, invoke the <a>ListApplicationVersions</a> operation.</p> <note> <p>This operation is supported only for Amazon Kinesis Data Analytics for Apache Flink.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeApplicationVersionRequest} describeApplicationVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationVersionResponse}
     */
    describeApplicationVersion(xAmzTarget, describeApplicationVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeApplicationVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeApplicationVersion");
      }
      // verify the required parameter 'describeApplicationVersionRequest' is set
      if (describeApplicationVersionRequest === undefined || describeApplicationVersionRequest === null) {
        throw new Error("Missing the required parameter 'describeApplicationVersionRequest' when calling describeApplicationVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DescribeApplicationVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoverInputSchema operation.
     * @callback module:api/DefaultApi~discoverInputSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoverInputSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Infers a schema for a SQL-based Kinesis Data Analytics application by evaluating sample records on the specified streaming source (Kinesis data stream or Kinesis Data Firehose delivery stream) or Amazon S3 object. In the response, the operation returns the inferred schema and also the sample records that the operation used to infer the schema.</p> <p> You can use the inferred schema when configuring a streaming source for your application. When you create an application using the Kinesis Data Analytics console, the console uses this operation to infer a schema and show it in the console user interface. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DiscoverInputSchemaRequest} discoverInputSchemaRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~discoverInputSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoverInputSchemaResponse}
     */
    discoverInputSchema(xAmzTarget, discoverInputSchemaRequest, opts, callback) {
      opts = opts || {};
      let postBody = discoverInputSchemaRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling discoverInputSchema");
      }
      // verify the required parameter 'discoverInputSchemaRequest' is set
      if (discoverInputSchemaRequest === undefined || discoverInputSchemaRequest === null) {
        throw new Error("Missing the required parameter 'discoverInputSchemaRequest' when calling discoverInputSchema");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiscoverInputSchemaResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.DiscoverInputSchema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationSnapshots operation.
     * @callback module:api/DefaultApi~listApplicationSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationSnapshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about the current application snapshots.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListApplicationSnapshotsRequest} listApplicationSnapshotsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listApplicationSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationSnapshotsResponse}
     */
    listApplicationSnapshots(xAmzTarget, listApplicationSnapshotsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listApplicationSnapshotsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listApplicationSnapshots");
      }
      // verify the required parameter 'listApplicationSnapshotsRequest' is set
      if (listApplicationSnapshotsRequest === undefined || listApplicationSnapshotsRequest === null) {
        throw new Error("Missing the required parameter 'listApplicationSnapshotsRequest' when calling listApplicationSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListApplicationSnapshotsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.ListApplicationSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationVersions operation.
     * @callback module:api/DefaultApi~listApplicationVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all the versions for the specified application, including versions that were rolled back. The response also includes a summary of the configuration associated with each version.</p> <p>To get the complete description of a specific application version, invoke the <a>DescribeApplicationVersion</a> operation.</p> <note> <p>This operation is supported only for Amazon Kinesis Data Analytics for Apache Flink.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListApplicationVersionsRequest} listApplicationVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listApplicationVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationVersionsResponse}
     */
    listApplicationVersions(xAmzTarget, listApplicationVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listApplicationVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listApplicationVersions");
      }
      // verify the required parameter 'listApplicationVersionsRequest' is set
      if (listApplicationVersionsRequest === undefined || listApplicationVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listApplicationVersionsRequest' when calling listApplicationVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListApplicationVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.ListApplicationVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/DefaultApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of Kinesis Data Analytics applications in your account. For each application, the response includes the application name, Amazon Resource Name (ARN), and status. </p> <p>If you want detailed information about a specific application, use <a>DescribeApplication</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListApplicationsRequest} listApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationsResponse}
     */
    listApplications(xAmzTarget, listApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listApplicationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listApplications");
      }
      // verify the required parameter 'listApplicationsRequest' is set
      if (listApplicationsRequest === undefined || listApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'listApplicationsRequest' when calling listApplications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListApplicationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.ListApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of key-value tags assigned to the application. For more information, see <a href=\"https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html\">Using Tagging</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbackApplication operation.
     * @callback module:api/DefaultApi~rollbackApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RollbackApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Reverts the application to the previous running version. You can roll back an application if you suspect it is stuck in a transient status. </p> <p>You can roll back an application only if it is in the <code>UPDATING</code> or <code>AUTOSCALING</code> status.</p> <p>When you rollback an application, it loads state data from the last successful snapshot. If the application has no snapshots, Kinesis Data Analytics rejects the rollback request.</p> <p>This action is not supported for Kinesis Data Analytics for SQL applications.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RollbackApplicationRequest} rollbackApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rollbackApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RollbackApplicationResponse}
     */
    rollbackApplication(xAmzTarget, rollbackApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = rollbackApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling rollbackApplication");
      }
      // verify the required parameter 'rollbackApplicationRequest' is set
      if (rollbackApplicationRequest === undefined || rollbackApplicationRequest === null) {
        throw new Error("Missing the required parameter 'rollbackApplicationRequest' when calling rollbackApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RollbackApplicationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.RollbackApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startApplication operation.
     * @callback module:api/DefaultApi~startApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the specified Kinesis Data Analytics application. After creating an application, you must exclusively call this operation to start your application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartApplicationRequest} startApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startApplication(xAmzTarget, startApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startApplication");
      }
      // verify the required parameter 'startApplicationRequest' is set
      if (startApplicationRequest === undefined || startApplicationRequest === null) {
        throw new Error("Missing the required parameter 'startApplicationRequest' when calling startApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.StartApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopApplication operation.
     * @callback module:api/DefaultApi~stopApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops the application from processing data. You can stop an application only if it is in the running status, unless you set the <code>Force</code> parameter to <code>true</code>.</p> <p>You can use the <a>DescribeApplication</a> operation to find the application status. </p> <p>Kinesis Data Analytics takes a snapshot when the application is stopped, unless <code>Force</code> is set to <code>true</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopApplicationRequest} stopApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopApplication(xAmzTarget, stopApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopApplication");
      }
      // verify the required parameter 'stopApplicationRequest' is set
      if (stopApplicationRequest === undefined || stopApplicationRequest === null) {
        throw new Error("Missing the required parameter 'stopApplicationRequest' when calling stopApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.StopApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more key-value tags to a Kinesis Data Analytics application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href=\"https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html\">Using Tagging</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from a Kinesis Data Analytics application. For more information, see <a href=\"https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html\">Using Tagging</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an existing Kinesis Data Analytics application. Using this operation, you can update application code, input configuration, and output configuration. </p> <p>Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you update your application. </p> <note> <p>You cannot update the <code>RuntimeEnvironment</code> of an existing application. If you need to update an application's <code>RuntimeEnvironment</code>, you must delete the application and create it again.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateApplicationRequest} updateApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationResponse}
     */
    updateApplication(xAmzTarget, updateApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateApplication");
      }
      // verify the required parameter 'updateApplicationRequest' is set
      if (updateApplicationRequest === undefined || updateApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationRequest' when calling updateApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.UpdateApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationMaintenanceConfiguration operation.
     * @callback module:api/DefaultApi~updateApplicationMaintenanceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationMaintenanceConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the maintenance configuration of the Kinesis Data Analytics application. </p> <p>You can invoke this operation on an application that is in one of the two following states: <code>READY</code> or <code>RUNNING</code>. If you invoke it when the application is in a state other than these two states, it throws a <code>ResourceInUseException</code>. The service makes use of the updated configuration the next time it schedules maintenance for the application. If you invoke this operation after the service schedules maintenance, the service will apply the configuration update the next time it schedules maintenance for the application. This means that you might not see the maintenance configuration update applied to the maintenance process that follows a successful invocation of this operation, but to the following maintenance process instead.</p> <p>To see the current maintenance configuration of your application, invoke the <a>DescribeApplication</a> operation.</p> <p>For information about application maintenance, see <a href=\"https://docs.aws.amazon.com/kinesisanalytics/latest/java/maintenance.html\">Kinesis Data Analytics for Apache Flink Maintenance</a>.</p> <note> <p>This operation is supported only for Amazon Kinesis Data Analytics for Apache Flink.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateApplicationMaintenanceConfigurationRequest} updateApplicationMaintenanceConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationMaintenanceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationMaintenanceConfigurationResponse}
     */
    updateApplicationMaintenanceConfiguration(xAmzTarget, updateApplicationMaintenanceConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationMaintenanceConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateApplicationMaintenanceConfiguration");
      }
      // verify the required parameter 'updateApplicationMaintenanceConfigurationRequest' is set
      if (updateApplicationMaintenanceConfigurationRequest === undefined || updateApplicationMaintenanceConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationMaintenanceConfigurationRequest' when calling updateApplicationMaintenanceConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationMaintenanceConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=KinesisAnalytics_20180523.UpdateApplicationMaintenanceConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
