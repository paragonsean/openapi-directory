/**
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonKinesisAnalytics);
  }
}(this, function(expect, AmazonKinesisAnalytics) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonKinesisAnalytics.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addApplicationCloudWatchLoggingOption', function() {
      it('should call addApplicationCloudWatchLoggingOption successfully', function(done) {
        //uncomment below and update the code to test addApplicationCloudWatchLoggingOption
        //instance.addApplicationCloudWatchLoggingOption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addApplicationInput', function() {
      it('should call addApplicationInput successfully', function(done) {
        //uncomment below and update the code to test addApplicationInput
        //instance.addApplicationInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addApplicationInputProcessingConfiguration', function() {
      it('should call addApplicationInputProcessingConfiguration successfully', function(done) {
        //uncomment below and update the code to test addApplicationInputProcessingConfiguration
        //instance.addApplicationInputProcessingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addApplicationOutput', function() {
      it('should call addApplicationOutput successfully', function(done) {
        //uncomment below and update the code to test addApplicationOutput
        //instance.addApplicationOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addApplicationReferenceDataSource', function() {
      it('should call addApplicationReferenceDataSource successfully', function(done) {
        //uncomment below and update the code to test addApplicationReferenceDataSource
        //instance.addApplicationReferenceDataSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addApplicationVpcConfiguration', function() {
      it('should call addApplicationVpcConfiguration successfully', function(done) {
        //uncomment below and update the code to test addApplicationVpcConfiguration
        //instance.addApplicationVpcConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApplication', function() {
      it('should call createApplication successfully', function(done) {
        //uncomment below and update the code to test createApplication
        //instance.createApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApplicationPresignedUrl', function() {
      it('should call createApplicationPresignedUrl successfully', function(done) {
        //uncomment below and update the code to test createApplicationPresignedUrl
        //instance.createApplicationPresignedUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApplicationSnapshot', function() {
      it('should call createApplicationSnapshot successfully', function(done) {
        //uncomment below and update the code to test createApplicationSnapshot
        //instance.createApplicationSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplication', function() {
      it('should call deleteApplication successfully', function(done) {
        //uncomment below and update the code to test deleteApplication
        //instance.deleteApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationCloudWatchLoggingOption', function() {
      it('should call deleteApplicationCloudWatchLoggingOption successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationCloudWatchLoggingOption
        //instance.deleteApplicationCloudWatchLoggingOption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationInputProcessingConfiguration', function() {
      it('should call deleteApplicationInputProcessingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationInputProcessingConfiguration
        //instance.deleteApplicationInputProcessingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationOutput', function() {
      it('should call deleteApplicationOutput successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationOutput
        //instance.deleteApplicationOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationReferenceDataSource', function() {
      it('should call deleteApplicationReferenceDataSource successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationReferenceDataSource
        //instance.deleteApplicationReferenceDataSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationSnapshot', function() {
      it('should call deleteApplicationSnapshot successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationSnapshot
        //instance.deleteApplicationSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationVpcConfiguration', function() {
      it('should call deleteApplicationVpcConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationVpcConfiguration
        //instance.deleteApplicationVpcConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeApplication', function() {
      it('should call describeApplication successfully', function(done) {
        //uncomment below and update the code to test describeApplication
        //instance.describeApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeApplicationSnapshot', function() {
      it('should call describeApplicationSnapshot successfully', function(done) {
        //uncomment below and update the code to test describeApplicationSnapshot
        //instance.describeApplicationSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeApplicationVersion', function() {
      it('should call describeApplicationVersion successfully', function(done) {
        //uncomment below and update the code to test describeApplicationVersion
        //instance.describeApplicationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('discoverInputSchema', function() {
      it('should call discoverInputSchema successfully', function(done) {
        //uncomment below and update the code to test discoverInputSchema
        //instance.discoverInputSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationSnapshots', function() {
      it('should call listApplicationSnapshots successfully', function(done) {
        //uncomment below and update the code to test listApplicationSnapshots
        //instance.listApplicationSnapshots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationVersions', function() {
      it('should call listApplicationVersions successfully', function(done) {
        //uncomment below and update the code to test listApplicationVersions
        //instance.listApplicationVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplications', function() {
      it('should call listApplications successfully', function(done) {
        //uncomment below and update the code to test listApplications
        //instance.listApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rollbackApplication', function() {
      it('should call rollbackApplication successfully', function(done) {
        //uncomment below and update the code to test rollbackApplication
        //instance.rollbackApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startApplication', function() {
      it('should call startApplication successfully', function(done) {
        //uncomment below and update the code to test startApplication
        //instance.startApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopApplication', function() {
      it('should call stopApplication successfully', function(done) {
        //uncomment below and update the code to test stopApplication
        //instance.stopApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplication', function() {
      it('should call updateApplication successfully', function(done) {
        //uncomment below and update the code to test updateApplication
        //instance.updateApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplicationMaintenanceConfiguration', function() {
      it('should call updateApplicationMaintenanceConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateApplicationMaintenanceConfiguration
        //instance.updateApplicationMaintenanceConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
