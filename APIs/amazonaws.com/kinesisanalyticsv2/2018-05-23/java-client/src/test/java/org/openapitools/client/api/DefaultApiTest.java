/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddApplicationCloudWatchLoggingOptionRequest;
import org.openapitools.client.model.AddApplicationCloudWatchLoggingOptionResponse;
import org.openapitools.client.model.AddApplicationInputProcessingConfigurationRequest;
import org.openapitools.client.model.AddApplicationInputProcessingConfigurationResponse;
import org.openapitools.client.model.AddApplicationInputRequest;
import org.openapitools.client.model.AddApplicationInputResponse;
import org.openapitools.client.model.AddApplicationOutputRequest;
import org.openapitools.client.model.AddApplicationOutputResponse;
import org.openapitools.client.model.AddApplicationReferenceDataSourceRequest;
import org.openapitools.client.model.AddApplicationReferenceDataSourceResponse;
import org.openapitools.client.model.AddApplicationVpcConfigurationRequest;
import org.openapitools.client.model.AddApplicationVpcConfigurationResponse;
import org.openapitools.client.model.CreateApplicationPresignedUrlRequest;
import org.openapitools.client.model.CreateApplicationPresignedUrlResponse;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateApplicationResponse;
import org.openapitools.client.model.CreateApplicationSnapshotRequest;
import org.openapitools.client.model.DeleteApplicationCloudWatchLoggingOptionRequest;
import org.openapitools.client.model.DeleteApplicationCloudWatchLoggingOptionResponse;
import org.openapitools.client.model.DeleteApplicationInputProcessingConfigurationRequest;
import org.openapitools.client.model.DeleteApplicationInputProcessingConfigurationResponse;
import org.openapitools.client.model.DeleteApplicationOutputRequest;
import org.openapitools.client.model.DeleteApplicationOutputResponse;
import org.openapitools.client.model.DeleteApplicationReferenceDataSourceRequest;
import org.openapitools.client.model.DeleteApplicationReferenceDataSourceResponse;
import org.openapitools.client.model.DeleteApplicationRequest;
import org.openapitools.client.model.DeleteApplicationSnapshotRequest;
import org.openapitools.client.model.DeleteApplicationVpcConfigurationRequest;
import org.openapitools.client.model.DeleteApplicationVpcConfigurationResponse;
import org.openapitools.client.model.DescribeApplicationRequest;
import org.openapitools.client.model.DescribeApplicationResponse;
import org.openapitools.client.model.DescribeApplicationSnapshotRequest;
import org.openapitools.client.model.DescribeApplicationSnapshotResponse;
import org.openapitools.client.model.DescribeApplicationVersionRequest;
import org.openapitools.client.model.DescribeApplicationVersionResponse;
import org.openapitools.client.model.DiscoverInputSchemaRequest;
import org.openapitools.client.model.DiscoverInputSchemaResponse;
import org.openapitools.client.model.ListApplicationSnapshotsRequest;
import org.openapitools.client.model.ListApplicationSnapshotsResponse;
import org.openapitools.client.model.ListApplicationVersionsRequest;
import org.openapitools.client.model.ListApplicationVersionsResponse;
import org.openapitools.client.model.ListApplicationsRequest;
import org.openapitools.client.model.ListApplicationsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RollbackApplicationRequest;
import org.openapitools.client.model.RollbackApplicationResponse;
import org.openapitools.client.model.StartApplicationRequest;
import org.openapitools.client.model.StopApplicationRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateApplicationMaintenanceConfigurationRequest;
import org.openapitools.client.model.UpdateApplicationMaintenanceConfigurationResponse;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.openapitools.client.model.UpdateApplicationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds an Amazon CloudWatch log stream to monitor application configuration errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationCloudWatchLoggingOptionTest() throws ApiException {
        String xAmzTarget = null;
        AddApplicationCloudWatchLoggingOptionRequest addApplicationCloudWatchLoggingOptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddApplicationCloudWatchLoggingOptionResponse response = api.addApplicationCloudWatchLoggingOption(xAmzTarget, addApplicationCloudWatchLoggingOptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Adds a streaming source to your SQL-based Kinesis Data Analytics application. &lt;/p&gt; &lt;p&gt;You can add a streaming source when you create an application, or you can use this operation to add a streaming source after you create an application. For more information, see &lt;a&gt;CreateApplication&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Any configuration update, including adding a streaming source using this operation, results in a new version of the application. You can use the &lt;a&gt;DescribeApplication&lt;/a&gt; operation to find the current application version. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationInputTest() throws ApiException {
        String xAmzTarget = null;
        AddApplicationInputRequest addApplicationInputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddApplicationInputResponse response = api.addApplicationInput(xAmzTarget, addApplicationInputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds an &lt;a&gt;InputProcessingConfiguration&lt;/a&gt; to a SQL-based Kinesis Data Analytics application. An input processor pre-processes records on the input stream before the application&#39;s SQL code executes. Currently, the only input processor available is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lambda/\&quot;&gt;Amazon Lambda&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationInputProcessingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        AddApplicationInputProcessingConfigurationRequest addApplicationInputProcessingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddApplicationInputProcessingConfigurationResponse response = api.addApplicationInputProcessingConfiguration(xAmzTarget, addApplicationInputProcessingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an external destination to your SQL-based Kinesis Data Analytics application.&lt;/p&gt; &lt;p&gt;If you want Kinesis Data Analytics to deliver data from an in-application stream within your application to an external destination (such as an Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), you add the relevant configuration to your application using this operation. You can configure one or more outputs for your application. Each output configuration maps an in-application stream and an external destination.&lt;/p&gt; &lt;p&gt; You can use one of the output configurations to deliver data from your in-application error stream to an external destination so that you can analyze the errors. &lt;/p&gt; &lt;p&gt; Any configuration update, including adding a streaming source using this operation, results in a new version of the application. You can use the &lt;a&gt;DescribeApplication&lt;/a&gt; operation to find the current application version.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationOutputTest() throws ApiException {
        String xAmzTarget = null;
        AddApplicationOutputRequest addApplicationOutputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddApplicationOutputResponse response = api.addApplicationOutput(xAmzTarget, addApplicationOutputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a reference data source to an existing SQL-based Kinesis Data Analytics application.&lt;/p&gt; &lt;p&gt;Kinesis Data Analytics reads reference data (that is, an Amazon S3 object) and creates an in-application table within your application. In the request, you provide the source (S3 bucket name and object key name), name of the in-application table to create, and the necessary mapping information that describes how data in an Amazon S3 object maps to columns in the resulting in-application table.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationReferenceDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        AddApplicationReferenceDataSourceRequest addApplicationReferenceDataSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddApplicationReferenceDataSourceResponse response = api.addApplicationReferenceDataSource(xAmzTarget, addApplicationReferenceDataSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a Virtual Private Cloud (VPC) configuration to the application. Applications can use VPCs to store and access resources securely.&lt;/p&gt; &lt;p&gt;Note the following about VPC configurations for Kinesis Data Analytics applications:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;VPC configurations are not supported for SQL applications.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When a VPC is added to a Kinesis Data Analytics application, the application can no longer be accessed from the Internet directly. To enable Internet access to the application, add an Internet gateway to your VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationVpcConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        AddApplicationVpcConfigurationRequest addApplicationVpcConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddApplicationVpcConfigurationResponse response = api.addApplicationVpcConfiguration(xAmzTarget, addApplicationVpcConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Kinesis Data Analytics application. For information about creating a Kinesis Data Analytics application, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/java/getting-started.html\&quot;&gt;Creating an Application&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        String xAmzTarget = null;
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationResponse response = api.createApplication(xAmzTarget, createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates and returns a URL that you can use to connect to an application&#39;s extension.&lt;/p&gt; &lt;p&gt;The IAM role or user used to call this API defines the permissions to access the extension. After the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request that attempts to connect to the extension. &lt;/p&gt; &lt;p&gt;You control the amount of time that the URL will be valid using the &lt;code&gt;SessionExpirationDurationInSeconds&lt;/code&gt; parameter. If you do not provide this parameter, the returned URL is valid for twelve hours.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The URL that you get from a call to CreateApplicationPresignedUrl must be used within 3 minutes to be valid. If you first try to use the URL after the 3-minute limit expires, the service returns an HTTP 403 Forbidden error.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationPresignedUrlTest() throws ApiException {
        String xAmzTarget = null;
        CreateApplicationPresignedUrlRequest createApplicationPresignedUrlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationPresignedUrlResponse response = api.createApplicationPresignedUrl(xAmzTarget, createApplicationPresignedUrlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a snapshot of the application&#39;s state data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateApplicationSnapshotRequest createApplicationSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createApplicationSnapshot(xAmzTarget, createApplicationSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified application. Kinesis Data Analytics halts application execution and deletes the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationRequest deleteApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplication(xAmzTarget, deleteApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon CloudWatch log stream from an Kinesis Data Analytics application. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationCloudWatchLoggingOptionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationCloudWatchLoggingOptionRequest deleteApplicationCloudWatchLoggingOptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApplicationCloudWatchLoggingOptionResponse response = api.deleteApplicationCloudWatchLoggingOption(xAmzTarget, deleteApplicationCloudWatchLoggingOptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an &lt;a&gt;InputProcessingConfiguration&lt;/a&gt; from an input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationInputProcessingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationInputProcessingConfigurationRequest deleteApplicationInputProcessingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApplicationInputProcessingConfigurationResponse response = api.deleteApplicationInputProcessingConfiguration(xAmzTarget, deleteApplicationInputProcessingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the output destination configuration from your SQL-based Kinesis Data Analytics application&#39;s configuration. Kinesis Data Analytics will no longer write data from the corresponding in-application stream to the external output destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationOutputTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationOutputRequest deleteApplicationOutputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApplicationOutputResponse response = api.deleteApplicationOutput(xAmzTarget, deleteApplicationOutputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a reference data source configuration from the specified SQL-based Kinesis Data Analytics application&#39;s configuration.&lt;/p&gt; &lt;p&gt;If the application is running, Kinesis Data Analytics immediately removes the in-application table that you created using the &lt;a&gt;AddApplicationReferenceDataSource&lt;/a&gt; operation. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationReferenceDataSourceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationReferenceDataSourceRequest deleteApplicationReferenceDataSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApplicationReferenceDataSourceResponse response = api.deleteApplicationReferenceDataSource(xAmzTarget, deleteApplicationReferenceDataSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a snapshot of application state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationSnapshotRequest deleteApplicationSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplicationSnapshot(xAmzTarget, deleteApplicationSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a VPC configuration from a Kinesis Data Analytics application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationVpcConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationVpcConfigurationRequest deleteApplicationVpcConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApplicationVpcConfigurationResponse response = api.deleteApplicationVpcConfiguration(xAmzTarget, deleteApplicationVpcConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about a specific Kinesis Data Analytics application.&lt;/p&gt; &lt;p&gt;If you want to retrieve a list of all applications in your account, use the &lt;a&gt;ListApplications&lt;/a&gt; operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeApplicationRequest describeApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationResponse response = api.describeApplication(xAmzTarget, describeApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a snapshot of application state data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DescribeApplicationSnapshotRequest describeApplicationSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationSnapshotResponse response = api.describeApplicationSnapshot(xAmzTarget, describeApplicationSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides a detailed description of a specified version of the application. To see a list of all the versions of an application, invoke the &lt;a&gt;ListApplicationVersions&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is supported only for Amazon Kinesis Data Analytics for Apache Flink.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationVersionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeApplicationVersionRequest describeApplicationVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationVersionResponse response = api.describeApplicationVersion(xAmzTarget, describeApplicationVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Infers a schema for a SQL-based Kinesis Data Analytics application by evaluating sample records on the specified streaming source (Kinesis data stream or Kinesis Data Firehose delivery stream) or Amazon S3 object. In the response, the operation returns the inferred schema and also the sample records that the operation used to infer the schema.&lt;/p&gt; &lt;p&gt; You can use the inferred schema when configuring a streaming source for your application. When you create an application using the Kinesis Data Analytics console, the console uses this operation to infer a schema and show it in the console user interface. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoverInputSchemaTest() throws ApiException {
        String xAmzTarget = null;
        DiscoverInputSchemaRequest discoverInputSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DiscoverInputSchemaResponse response = api.discoverInputSchema(xAmzTarget, discoverInputSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists information about the current application snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        ListApplicationSnapshotsRequest listApplicationSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListApplicationSnapshotsResponse response = api.listApplicationSnapshots(xAmzTarget, listApplicationSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the versions for the specified application, including versions that were rolled back. The response also includes a summary of the configuration associated with each version.&lt;/p&gt; &lt;p&gt;To get the complete description of a specific application version, invoke the &lt;a&gt;DescribeApplicationVersion&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is supported only for Amazon Kinesis Data Analytics for Apache Flink.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListApplicationVersionsRequest listApplicationVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListApplicationVersionsResponse response = api.listApplicationVersions(xAmzTarget, listApplicationVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of Kinesis Data Analytics applications in your account. For each application, the response includes the application name, Amazon Resource Name (ARN), and status. &lt;/p&gt; &lt;p&gt;If you want detailed information about a specific application, use &lt;a&gt;DescribeApplication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        String xAmzTarget = null;
        ListApplicationsRequest listApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListApplicationsResponse response = api.listApplications(xAmzTarget, listApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the list of key-value tags assigned to the application. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html\&quot;&gt;Using Tagging&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Reverts the application to the previous running version. You can roll back an application if you suspect it is stuck in a transient status. &lt;/p&gt; &lt;p&gt;You can roll back an application only if it is in the &lt;code&gt;UPDATING&lt;/code&gt; or &lt;code&gt;AUTOSCALING&lt;/code&gt; status.&lt;/p&gt; &lt;p&gt;When you rollback an application, it loads state data from the last successful snapshot. If the application has no snapshots, Kinesis Data Analytics rejects the rollback request.&lt;/p&gt; &lt;p&gt;This action is not supported for Kinesis Data Analytics for SQL applications.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackApplicationTest() throws ApiException {
        String xAmzTarget = null;
        RollbackApplicationRequest rollbackApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RollbackApplicationResponse response = api.rollbackApplication(xAmzTarget, rollbackApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the specified Kinesis Data Analytics application. After creating an application, you must exclusively call this operation to start your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startApplicationTest() throws ApiException {
        String xAmzTarget = null;
        StartApplicationRequest startApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startApplication(xAmzTarget, startApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops the application from processing data. You can stop an application only if it is in the running status, unless you set the &lt;code&gt;Force&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can use the &lt;a&gt;DescribeApplication&lt;/a&gt; operation to find the application status. &lt;/p&gt; &lt;p&gt;Kinesis Data Analytics takes a snapshot when the application is stopped, unless &lt;code&gt;Force&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopApplicationTest() throws ApiException {
        String xAmzTarget = null;
        StopApplicationRequest stopApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopApplication(xAmzTarget, stopApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more key-value tags to a Kinesis Data Analytics application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html\&quot;&gt;Using Tagging&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a Kinesis Data Analytics application. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html\&quot;&gt;Using Tagging&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing Kinesis Data Analytics application. Using this operation, you can update application code, input configuration, and output configuration. &lt;/p&gt; &lt;p&gt;Kinesis Data Analytics updates the &lt;code&gt;ApplicationVersionId&lt;/code&gt; each time you update your application. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot update the &lt;code&gt;RuntimeEnvironment&lt;/code&gt; of an existing application. If you need to update an application&#39;s &lt;code&gt;RuntimeEnvironment&lt;/code&gt;, you must delete the application and create it again.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationResponse response = api.updateApplication(xAmzTarget, updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the maintenance configuration of the Kinesis Data Analytics application. &lt;/p&gt; &lt;p&gt;You can invoke this operation on an application that is in one of the two following states: &lt;code&gt;READY&lt;/code&gt; or &lt;code&gt;RUNNING&lt;/code&gt;. If you invoke it when the application is in a state other than these two states, it throws a &lt;code&gt;ResourceInUseException&lt;/code&gt;. The service makes use of the updated configuration the next time it schedules maintenance for the application. If you invoke this operation after the service schedules maintenance, the service will apply the configuration update the next time it schedules maintenance for the application. This means that you might not see the maintenance configuration update applied to the maintenance process that follows a successful invocation of this operation, but to the following maintenance process instead.&lt;/p&gt; &lt;p&gt;To see the current maintenance configuration of your application, invoke the &lt;a&gt;DescribeApplication&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For information about application maintenance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/java/maintenance.html\&quot;&gt;Kinesis Data Analytics for Apache Flink Maintenance&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is supported only for Amazon Kinesis Data Analytics for Apache Flink.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationMaintenanceConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateApplicationMaintenanceConfigurationRequest updateApplicationMaintenanceConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationMaintenanceConfigurationResponse response = api.updateApplicationMaintenanceConfiguration(xAmzTarget, updateApplicationMaintenanceConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
