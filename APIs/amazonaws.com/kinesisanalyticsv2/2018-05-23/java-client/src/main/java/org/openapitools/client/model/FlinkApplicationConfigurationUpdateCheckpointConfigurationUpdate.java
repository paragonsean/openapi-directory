/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE = "ConfigurationTypeUpdate";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE)
  private ConfigurationType configurationTypeUpdate;

  public static final String SERIALIZED_NAME_CHECKPOINTING_ENABLED_UPDATE = "CheckpointingEnabledUpdate";
  @SerializedName(SERIALIZED_NAME_CHECKPOINTING_ENABLED_UPDATE)
  private Boolean checkpointingEnabledUpdate;

  public static final String SERIALIZED_NAME_CHECKPOINT_INTERVAL_UPDATE = "CheckpointIntervalUpdate";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_INTERVAL_UPDATE)
  private Integer checkpointIntervalUpdate;

  public static final String SERIALIZED_NAME_MIN_PAUSE_BETWEEN_CHECKPOINTS_UPDATE = "MinPauseBetweenCheckpointsUpdate";
  @SerializedName(SERIALIZED_NAME_MIN_PAUSE_BETWEEN_CHECKPOINTS_UPDATE)
  private Integer minPauseBetweenCheckpointsUpdate;

  public FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate() {
  }

  public FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate configurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
    return this;
  }

  /**
   * Get configurationTypeUpdate
   * @return configurationTypeUpdate
   */
  @javax.annotation.Nullable
  public ConfigurationType getConfigurationTypeUpdate() {
    return configurationTypeUpdate;
  }

  public void setConfigurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
  }


  public FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate checkpointingEnabledUpdate(Boolean checkpointingEnabledUpdate) {
    this.checkpointingEnabledUpdate = checkpointingEnabledUpdate;
    return this;
  }

  /**
   * Get checkpointingEnabledUpdate
   * @return checkpointingEnabledUpdate
   */
  @javax.annotation.Nullable
  public Boolean getCheckpointingEnabledUpdate() {
    return checkpointingEnabledUpdate;
  }

  public void setCheckpointingEnabledUpdate(Boolean checkpointingEnabledUpdate) {
    this.checkpointingEnabledUpdate = checkpointingEnabledUpdate;
  }


  public FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate checkpointIntervalUpdate(Integer checkpointIntervalUpdate) {
    this.checkpointIntervalUpdate = checkpointIntervalUpdate;
    return this;
  }

  /**
   * Get checkpointIntervalUpdate
   * @return checkpointIntervalUpdate
   */
  @javax.annotation.Nullable
  public Integer getCheckpointIntervalUpdate() {
    return checkpointIntervalUpdate;
  }

  public void setCheckpointIntervalUpdate(Integer checkpointIntervalUpdate) {
    this.checkpointIntervalUpdate = checkpointIntervalUpdate;
  }


  public FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate minPauseBetweenCheckpointsUpdate(Integer minPauseBetweenCheckpointsUpdate) {
    this.minPauseBetweenCheckpointsUpdate = minPauseBetweenCheckpointsUpdate;
    return this;
  }

  /**
   * Get minPauseBetweenCheckpointsUpdate
   * @return minPauseBetweenCheckpointsUpdate
   */
  @javax.annotation.Nullable
  public Integer getMinPauseBetweenCheckpointsUpdate() {
    return minPauseBetweenCheckpointsUpdate;
  }

  public void setMinPauseBetweenCheckpointsUpdate(Integer minPauseBetweenCheckpointsUpdate) {
    this.minPauseBetweenCheckpointsUpdate = minPauseBetweenCheckpointsUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate flinkApplicationConfigurationUpdateCheckpointConfigurationUpdate = (FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate) o;
    return Objects.equals(this.configurationTypeUpdate, flinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.configurationTypeUpdate) &&
        Objects.equals(this.checkpointingEnabledUpdate, flinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.checkpointingEnabledUpdate) &&
        Objects.equals(this.checkpointIntervalUpdate, flinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.checkpointIntervalUpdate) &&
        Objects.equals(this.minPauseBetweenCheckpointsUpdate, flinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.minPauseBetweenCheckpointsUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationTypeUpdate, checkpointingEnabledUpdate, checkpointIntervalUpdate, minPauseBetweenCheckpointsUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate {\n");
    sb.append("    configurationTypeUpdate: ").append(toIndentedString(configurationTypeUpdate)).append("\n");
    sb.append("    checkpointingEnabledUpdate: ").append(toIndentedString(checkpointingEnabledUpdate)).append("\n");
    sb.append("    checkpointIntervalUpdate: ").append(toIndentedString(checkpointIntervalUpdate)).append("\n");
    sb.append("    minPauseBetweenCheckpointsUpdate: ").append(toIndentedString(minPauseBetweenCheckpointsUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationTypeUpdate");
    openapiFields.add("CheckpointingEnabledUpdate");
    openapiFields.add("CheckpointIntervalUpdate");
    openapiFields.add("MinPauseBetweenCheckpointsUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate is not found in the empty JSON string", FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationTypeUpdate`
      if (jsonObj.get("ConfigurationTypeUpdate") != null && !jsonObj.get("ConfigurationTypeUpdate").isJsonNull()) {
        ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationTypeUpdate"));
      }
      // validate the optional field `CheckpointingEnabledUpdate`
      if (jsonObj.get("CheckpointingEnabledUpdate") != null && !jsonObj.get("CheckpointingEnabledUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CheckpointingEnabledUpdate"));
      }
      // validate the optional field `CheckpointIntervalUpdate`
      if (jsonObj.get("CheckpointIntervalUpdate") != null && !jsonObj.get("CheckpointIntervalUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CheckpointIntervalUpdate"));
      }
      // validate the optional field `MinPauseBetweenCheckpointsUpdate`
      if (jsonObj.get("MinPauseBetweenCheckpointsUpdate") != null && !jsonObj.get("MinPauseBetweenCheckpointsUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinPauseBetweenCheckpointsUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate
   */
  public static FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate.class);
  }

  /**
   * Convert an instance of FlinkApplicationConfigurationUpdateCheckpointConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

