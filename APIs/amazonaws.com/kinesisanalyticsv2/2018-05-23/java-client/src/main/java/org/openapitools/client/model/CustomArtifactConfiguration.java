/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArtifactType;
import org.openapitools.client.model.CustomArtifactConfigurationMavenReference;
import org.openapitools.client.model.S3ContentLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies dependency JARs, as well as JAR files that contain user-defined functions (UDF).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomArtifactConfiguration {
  public static final String SERIALIZED_NAME_ARTIFACT_TYPE = "ArtifactType";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_TYPE)
  private ArtifactType artifactType;

  public static final String SERIALIZED_NAME_S3_CONTENT_LOCATION = "S3ContentLocation";
  @SerializedName(SERIALIZED_NAME_S3_CONTENT_LOCATION)
  private S3ContentLocation s3ContentLocation;

  public static final String SERIALIZED_NAME_MAVEN_REFERENCE = "MavenReference";
  @SerializedName(SERIALIZED_NAME_MAVEN_REFERENCE)
  private CustomArtifactConfigurationMavenReference mavenReference;

  public CustomArtifactConfiguration() {
  }

  public CustomArtifactConfiguration artifactType(ArtifactType artifactType) {
    this.artifactType = artifactType;
    return this;
  }

  /**
   * Get artifactType
   * @return artifactType
   */
  @javax.annotation.Nonnull
  public ArtifactType getArtifactType() {
    return artifactType;
  }

  public void setArtifactType(ArtifactType artifactType) {
    this.artifactType = artifactType;
  }


  public CustomArtifactConfiguration s3ContentLocation(S3ContentLocation s3ContentLocation) {
    this.s3ContentLocation = s3ContentLocation;
    return this;
  }

  /**
   * Get s3ContentLocation
   * @return s3ContentLocation
   */
  @javax.annotation.Nullable
  public S3ContentLocation getS3ContentLocation() {
    return s3ContentLocation;
  }

  public void setS3ContentLocation(S3ContentLocation s3ContentLocation) {
    this.s3ContentLocation = s3ContentLocation;
  }


  public CustomArtifactConfiguration mavenReference(CustomArtifactConfigurationMavenReference mavenReference) {
    this.mavenReference = mavenReference;
    return this;
  }

  /**
   * Get mavenReference
   * @return mavenReference
   */
  @javax.annotation.Nullable
  public CustomArtifactConfigurationMavenReference getMavenReference() {
    return mavenReference;
  }

  public void setMavenReference(CustomArtifactConfigurationMavenReference mavenReference) {
    this.mavenReference = mavenReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomArtifactConfiguration customArtifactConfiguration = (CustomArtifactConfiguration) o;
    return Objects.equals(this.artifactType, customArtifactConfiguration.artifactType) &&
        Objects.equals(this.s3ContentLocation, customArtifactConfiguration.s3ContentLocation) &&
        Objects.equals(this.mavenReference, customArtifactConfiguration.mavenReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactType, s3ContentLocation, mavenReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomArtifactConfiguration {\n");
    sb.append("    artifactType: ").append(toIndentedString(artifactType)).append("\n");
    sb.append("    s3ContentLocation: ").append(toIndentedString(s3ContentLocation)).append("\n");
    sb.append("    mavenReference: ").append(toIndentedString(mavenReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ArtifactType");
    openapiFields.add("S3ContentLocation");
    openapiFields.add("MavenReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ArtifactType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomArtifactConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomArtifactConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomArtifactConfiguration is not found in the empty JSON string", CustomArtifactConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomArtifactConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomArtifactConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomArtifactConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ArtifactType`
      ArtifactType.validateJsonElement(jsonObj.get("ArtifactType"));
      // validate the optional field `S3ContentLocation`
      if (jsonObj.get("S3ContentLocation") != null && !jsonObj.get("S3ContentLocation").isJsonNull()) {
        S3ContentLocation.validateJsonElement(jsonObj.get("S3ContentLocation"));
      }
      // validate the optional field `MavenReference`
      if (jsonObj.get("MavenReference") != null && !jsonObj.get("MavenReference").isJsonNull()) {
        CustomArtifactConfigurationMavenReference.validateJsonElement(jsonObj.get("MavenReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomArtifactConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomArtifactConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomArtifactConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomArtifactConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomArtifactConfiguration>() {
           @Override
           public void write(JsonWriter out, CustomArtifactConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomArtifactConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomArtifactConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomArtifactConfiguration
   * @throws IOException if the JSON string is invalid with respect to CustomArtifactConfiguration
   */
  public static CustomArtifactConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomArtifactConfiguration.class);
  }

  /**
   * Convert an instance of CustomArtifactConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

