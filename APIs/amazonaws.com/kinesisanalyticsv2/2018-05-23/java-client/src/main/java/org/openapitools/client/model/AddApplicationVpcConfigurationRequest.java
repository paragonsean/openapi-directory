/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddApplicationVpcConfigurationRequestVpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddApplicationVpcConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddApplicationVpcConfigurationRequest {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_CURRENT_APPLICATION_VERSION_ID = "CurrentApplicationVersionId";
  @SerializedName(SERIALIZED_NAME_CURRENT_APPLICATION_VERSION_ID)
  private Integer currentApplicationVersionId;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "VpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private AddApplicationVpcConfigurationRequestVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_CONDITIONAL_TOKEN = "ConditionalToken";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_TOKEN)
  private String conditionalToken;

  public AddApplicationVpcConfigurationRequest() {
  }

  public AddApplicationVpcConfigurationRequest applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public AddApplicationVpcConfigurationRequest currentApplicationVersionId(Integer currentApplicationVersionId) {
    this.currentApplicationVersionId = currentApplicationVersionId;
    return this;
  }

  /**
   * Get currentApplicationVersionId
   * @return currentApplicationVersionId
   */
  @javax.annotation.Nullable
  public Integer getCurrentApplicationVersionId() {
    return currentApplicationVersionId;
  }

  public void setCurrentApplicationVersionId(Integer currentApplicationVersionId) {
    this.currentApplicationVersionId = currentApplicationVersionId;
  }


  public AddApplicationVpcConfigurationRequest vpcConfiguration(AddApplicationVpcConfigurationRequestVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nonnull
  public AddApplicationVpcConfigurationRequestVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(AddApplicationVpcConfigurationRequestVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public AddApplicationVpcConfigurationRequest conditionalToken(String conditionalToken) {
    this.conditionalToken = conditionalToken;
    return this;
  }

  /**
   * Get conditionalToken
   * @return conditionalToken
   */
  @javax.annotation.Nullable
  public String getConditionalToken() {
    return conditionalToken;
  }

  public void setConditionalToken(String conditionalToken) {
    this.conditionalToken = conditionalToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApplicationVpcConfigurationRequest addApplicationVpcConfigurationRequest = (AddApplicationVpcConfigurationRequest) o;
    return Objects.equals(this.applicationName, addApplicationVpcConfigurationRequest.applicationName) &&
        Objects.equals(this.currentApplicationVersionId, addApplicationVpcConfigurationRequest.currentApplicationVersionId) &&
        Objects.equals(this.vpcConfiguration, addApplicationVpcConfigurationRequest.vpcConfiguration) &&
        Objects.equals(this.conditionalToken, addApplicationVpcConfigurationRequest.conditionalToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, currentApplicationVersionId, vpcConfiguration, conditionalToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApplicationVpcConfigurationRequest {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    currentApplicationVersionId: ").append(toIndentedString(currentApplicationVersionId)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    conditionalToken: ").append(toIndentedString(conditionalToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("CurrentApplicationVersionId");
    openapiFields.add("VpcConfiguration");
    openapiFields.add("ConditionalToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("VpcConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddApplicationVpcConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddApplicationVpcConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddApplicationVpcConfigurationRequest is not found in the empty JSON string", AddApplicationVpcConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddApplicationVpcConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddApplicationVpcConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddApplicationVpcConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the optional field `CurrentApplicationVersionId`
      if (jsonObj.get("CurrentApplicationVersionId") != null && !jsonObj.get("CurrentApplicationVersionId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CurrentApplicationVersionId"));
      }
      // validate the required field `VpcConfiguration`
      AddApplicationVpcConfigurationRequestVpcConfiguration.validateJsonElement(jsonObj.get("VpcConfiguration"));
      // validate the optional field `ConditionalToken`
      if (jsonObj.get("ConditionalToken") != null && !jsonObj.get("ConditionalToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConditionalToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddApplicationVpcConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddApplicationVpcConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddApplicationVpcConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddApplicationVpcConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddApplicationVpcConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, AddApplicationVpcConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddApplicationVpcConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddApplicationVpcConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddApplicationVpcConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to AddApplicationVpcConfigurationRequest
   */
  public static AddApplicationVpcConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddApplicationVpcConfigurationRequest.class);
  }

  /**
   * Convert an instance of AddApplicationVpcConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

