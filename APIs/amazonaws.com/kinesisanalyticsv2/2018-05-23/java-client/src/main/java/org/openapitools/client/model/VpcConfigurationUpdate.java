/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes updates to the VPC configuration used by the application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpcConfigurationUpdate {
  public static final String SERIALIZED_NAME_VPC_CONFIGURATION_ID = "VpcConfigurationId";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION_ID)
  private String vpcConfigurationId;

  public static final String SERIALIZED_NAME_SUBNET_ID_UPDATES = "SubnetIdUpdates";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID_UPDATES)
  private List subnetIdUpdates;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_ID_UPDATES = "SecurityGroupIdUpdates";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ID_UPDATES)
  private List securityGroupIdUpdates;

  public VpcConfigurationUpdate() {
  }

  public VpcConfigurationUpdate vpcConfigurationId(String vpcConfigurationId) {
    this.vpcConfigurationId = vpcConfigurationId;
    return this;
  }

  /**
   * Get vpcConfigurationId
   * @return vpcConfigurationId
   */
  @javax.annotation.Nonnull
  public String getVpcConfigurationId() {
    return vpcConfigurationId;
  }

  public void setVpcConfigurationId(String vpcConfigurationId) {
    this.vpcConfigurationId = vpcConfigurationId;
  }


  public VpcConfigurationUpdate subnetIdUpdates(List subnetIdUpdates) {
    this.subnetIdUpdates = subnetIdUpdates;
    return this;
  }

  /**
   * Get subnetIdUpdates
   * @return subnetIdUpdates
   */
  @javax.annotation.Nullable
  public List getSubnetIdUpdates() {
    return subnetIdUpdates;
  }

  public void setSubnetIdUpdates(List subnetIdUpdates) {
    this.subnetIdUpdates = subnetIdUpdates;
  }


  public VpcConfigurationUpdate securityGroupIdUpdates(List securityGroupIdUpdates) {
    this.securityGroupIdUpdates = securityGroupIdUpdates;
    return this;
  }

  /**
   * Get securityGroupIdUpdates
   * @return securityGroupIdUpdates
   */
  @javax.annotation.Nullable
  public List getSecurityGroupIdUpdates() {
    return securityGroupIdUpdates;
  }

  public void setSecurityGroupIdUpdates(List securityGroupIdUpdates) {
    this.securityGroupIdUpdates = securityGroupIdUpdates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpcConfigurationUpdate vpcConfigurationUpdate = (VpcConfigurationUpdate) o;
    return Objects.equals(this.vpcConfigurationId, vpcConfigurationUpdate.vpcConfigurationId) &&
        Objects.equals(this.subnetIdUpdates, vpcConfigurationUpdate.subnetIdUpdates) &&
        Objects.equals(this.securityGroupIdUpdates, vpcConfigurationUpdate.securityGroupIdUpdates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcConfigurationId, subnetIdUpdates, securityGroupIdUpdates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpcConfigurationUpdate {\n");
    sb.append("    vpcConfigurationId: ").append(toIndentedString(vpcConfigurationId)).append("\n");
    sb.append("    subnetIdUpdates: ").append(toIndentedString(subnetIdUpdates)).append("\n");
    sb.append("    securityGroupIdUpdates: ").append(toIndentedString(securityGroupIdUpdates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcConfigurationId");
    openapiFields.add("SubnetIdUpdates");
    openapiFields.add("SecurityGroupIdUpdates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("VpcConfigurationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpcConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpcConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpcConfigurationUpdate is not found in the empty JSON string", VpcConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpcConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpcConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VpcConfigurationUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VpcConfigurationId`
      String.validateJsonElement(jsonObj.get("VpcConfigurationId"));
      // validate the optional field `SubnetIdUpdates`
      if (jsonObj.get("SubnetIdUpdates") != null && !jsonObj.get("SubnetIdUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubnetIdUpdates"));
      }
      // validate the optional field `SecurityGroupIdUpdates`
      if (jsonObj.get("SecurityGroupIdUpdates") != null && !jsonObj.get("SecurityGroupIdUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupIdUpdates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpcConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpcConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpcConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpcConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<VpcConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, VpcConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpcConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpcConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpcConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to VpcConfigurationUpdate
   */
  public static VpcConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpcConfigurationUpdate.class);
  }

  /**
   * Convert an instance of VpcConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

