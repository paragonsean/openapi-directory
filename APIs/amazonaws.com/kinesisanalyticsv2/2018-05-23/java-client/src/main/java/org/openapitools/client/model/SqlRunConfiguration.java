/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SqlRunConfigurationInputStartingPositionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the starting parameters for a SQL-based Kinesis Data Analytics application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlRunConfiguration {
  public static final String SERIALIZED_NAME_INPUT_ID = "InputId";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private String inputId;

  public static final String SERIALIZED_NAME_INPUT_STARTING_POSITION_CONFIGURATION = "InputStartingPositionConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_STARTING_POSITION_CONFIGURATION)
  private SqlRunConfigurationInputStartingPositionConfiguration inputStartingPositionConfiguration;

  public SqlRunConfiguration() {
  }

  public SqlRunConfiguration inputId(String inputId) {
    this.inputId = inputId;
    return this;
  }

  /**
   * Get inputId
   * @return inputId
   */
  @javax.annotation.Nonnull
  public String getInputId() {
    return inputId;
  }

  public void setInputId(String inputId) {
    this.inputId = inputId;
  }


  public SqlRunConfiguration inputStartingPositionConfiguration(SqlRunConfigurationInputStartingPositionConfiguration inputStartingPositionConfiguration) {
    this.inputStartingPositionConfiguration = inputStartingPositionConfiguration;
    return this;
  }

  /**
   * Get inputStartingPositionConfiguration
   * @return inputStartingPositionConfiguration
   */
  @javax.annotation.Nonnull
  public SqlRunConfigurationInputStartingPositionConfiguration getInputStartingPositionConfiguration() {
    return inputStartingPositionConfiguration;
  }

  public void setInputStartingPositionConfiguration(SqlRunConfigurationInputStartingPositionConfiguration inputStartingPositionConfiguration) {
    this.inputStartingPositionConfiguration = inputStartingPositionConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlRunConfiguration sqlRunConfiguration = (SqlRunConfiguration) o;
    return Objects.equals(this.inputId, sqlRunConfiguration.inputId) &&
        Objects.equals(this.inputStartingPositionConfiguration, sqlRunConfiguration.inputStartingPositionConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputId, inputStartingPositionConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlRunConfiguration {\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    inputStartingPositionConfiguration: ").append(toIndentedString(inputStartingPositionConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputId");
    openapiFields.add("InputStartingPositionConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InputId");
    openapiRequiredFields.add("InputStartingPositionConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlRunConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlRunConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlRunConfiguration is not found in the empty JSON string", SqlRunConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlRunConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlRunConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SqlRunConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InputId`
      String.validateJsonElement(jsonObj.get("InputId"));
      // validate the required field `InputStartingPositionConfiguration`
      SqlRunConfigurationInputStartingPositionConfiguration.validateJsonElement(jsonObj.get("InputStartingPositionConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlRunConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlRunConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlRunConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlRunConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlRunConfiguration>() {
           @Override
           public void write(JsonWriter out, SqlRunConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlRunConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlRunConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlRunConfiguration
   * @throws IOException if the JSON string is invalid with respect to SqlRunConfiguration
   */
  public static SqlRunConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlRunConfiguration.class);
  }

  /**
   * Convert an instance of SqlRunConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

