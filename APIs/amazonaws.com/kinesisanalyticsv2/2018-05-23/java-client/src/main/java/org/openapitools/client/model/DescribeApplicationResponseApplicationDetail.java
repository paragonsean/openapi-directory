/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationDetailApplicationConfigurationDescription;
import org.openapitools.client.model.ApplicationDetailApplicationMaintenanceConfigurationDescription;
import org.openapitools.client.model.ApplicationMode;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.RuntimeEnvironment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeApplicationResponseApplicationDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeApplicationResponseApplicationDetail {
  public static final String SERIALIZED_NAME_APPLICATION_A_R_N = "ApplicationARN";
  @SerializedName(SERIALIZED_NAME_APPLICATION_A_R_N)
  private String applicationARN;

  public static final String SERIALIZED_NAME_APPLICATION_DESCRIPTION = "ApplicationDescription";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DESCRIPTION)
  private String applicationDescription;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_RUNTIME_ENVIRONMENT = "RuntimeEnvironment";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ENVIRONMENT)
  private RuntimeEnvironment runtimeEnvironment;

  public static final String SERIALIZED_NAME_SERVICE_EXECUTION_ROLE = "ServiceExecutionRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_EXECUTION_ROLE)
  private String serviceExecutionRole;

  public static final String SERIALIZED_NAME_APPLICATION_STATUS = "ApplicationStatus";
  @SerializedName(SERIALIZED_NAME_APPLICATION_STATUS)
  private ApplicationStatus applicationStatus;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ID = "ApplicationVersionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ID)
  private Integer applicationVersionId;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "CreateTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private OffsetDateTime createTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP = "LastUpdateTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP)
  private OffsetDateTime lastUpdateTimestamp;

  public static final String SERIALIZED_NAME_APPLICATION_CONFIGURATION_DESCRIPTION = "ApplicationConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CONFIGURATION_DESCRIPTION)
  private ApplicationDetailApplicationConfigurationDescription applicationConfigurationDescription;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTION_DESCRIPTIONS = "CloudWatchLoggingOptionDescriptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTION_DESCRIPTIONS)
  private List cloudWatchLoggingOptionDescriptions;

  public static final String SERIALIZED_NAME_APPLICATION_MAINTENANCE_CONFIGURATION_DESCRIPTION = "ApplicationMaintenanceConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MAINTENANCE_CONFIGURATION_DESCRIPTION)
  private ApplicationDetailApplicationMaintenanceConfigurationDescription applicationMaintenanceConfigurationDescription;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_UPDATED_FROM = "ApplicationVersionUpdatedFrom";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_UPDATED_FROM)
  private Integer applicationVersionUpdatedFrom;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ROLLED_BACK_FROM = "ApplicationVersionRolledBackFrom";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ROLLED_BACK_FROM)
  private Integer applicationVersionRolledBackFrom;

  public static final String SERIALIZED_NAME_CONDITIONAL_TOKEN = "ConditionalToken";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_TOKEN)
  private String conditionalToken;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ROLLED_BACK_TO = "ApplicationVersionRolledBackTo";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ROLLED_BACK_TO)
  private Integer applicationVersionRolledBackTo;

  public static final String SERIALIZED_NAME_APPLICATION_MODE = "ApplicationMode";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MODE)
  private ApplicationMode applicationMode;

  public DescribeApplicationResponseApplicationDetail() {
  }

  public DescribeApplicationResponseApplicationDetail applicationARN(String applicationARN) {
    this.applicationARN = applicationARN;
    return this;
  }

  /**
   * Get applicationARN
   * @return applicationARN
   */
  @javax.annotation.Nonnull
  public String getApplicationARN() {
    return applicationARN;
  }

  public void setApplicationARN(String applicationARN) {
    this.applicationARN = applicationARN;
  }


  public DescribeApplicationResponseApplicationDetail applicationDescription(String applicationDescription) {
    this.applicationDescription = applicationDescription;
    return this;
  }

  /**
   * Get applicationDescription
   * @return applicationDescription
   */
  @javax.annotation.Nullable
  public String getApplicationDescription() {
    return applicationDescription;
  }

  public void setApplicationDescription(String applicationDescription) {
    this.applicationDescription = applicationDescription;
  }


  public DescribeApplicationResponseApplicationDetail applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public DescribeApplicationResponseApplicationDetail runtimeEnvironment(RuntimeEnvironment runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
    return this;
  }

  /**
   * Get runtimeEnvironment
   * @return runtimeEnvironment
   */
  @javax.annotation.Nonnull
  public RuntimeEnvironment getRuntimeEnvironment() {
    return runtimeEnvironment;
  }

  public void setRuntimeEnvironment(RuntimeEnvironment runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
  }


  public DescribeApplicationResponseApplicationDetail serviceExecutionRole(String serviceExecutionRole) {
    this.serviceExecutionRole = serviceExecutionRole;
    return this;
  }

  /**
   * Get serviceExecutionRole
   * @return serviceExecutionRole
   */
  @javax.annotation.Nullable
  public String getServiceExecutionRole() {
    return serviceExecutionRole;
  }

  public void setServiceExecutionRole(String serviceExecutionRole) {
    this.serviceExecutionRole = serviceExecutionRole;
  }


  public DescribeApplicationResponseApplicationDetail applicationStatus(ApplicationStatus applicationStatus) {
    this.applicationStatus = applicationStatus;
    return this;
  }

  /**
   * Get applicationStatus
   * @return applicationStatus
   */
  @javax.annotation.Nonnull
  public ApplicationStatus getApplicationStatus() {
    return applicationStatus;
  }

  public void setApplicationStatus(ApplicationStatus applicationStatus) {
    this.applicationStatus = applicationStatus;
  }


  public DescribeApplicationResponseApplicationDetail applicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
    return this;
  }

  /**
   * Get applicationVersionId
   * @return applicationVersionId
   */
  @javax.annotation.Nonnull
  public Integer getApplicationVersionId() {
    return applicationVersionId;
  }

  public void setApplicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
  }


  public DescribeApplicationResponseApplicationDetail createTimestamp(OffsetDateTime createTimestamp) {
    this.createTimestamp = createTimestamp;
    return this;
  }

  /**
   * Get createTimestamp
   * @return createTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTimestamp() {
    return createTimestamp;
  }

  public void setCreateTimestamp(OffsetDateTime createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public DescribeApplicationResponseApplicationDetail lastUpdateTimestamp(OffsetDateTime lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
    return this;
  }

  /**
   * Get lastUpdateTimestamp
   * @return lastUpdateTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

  public void setLastUpdateTimestamp(OffsetDateTime lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
  }


  public DescribeApplicationResponseApplicationDetail applicationConfigurationDescription(ApplicationDetailApplicationConfigurationDescription applicationConfigurationDescription) {
    this.applicationConfigurationDescription = applicationConfigurationDescription;
    return this;
  }

  /**
   * Get applicationConfigurationDescription
   * @return applicationConfigurationDescription
   */
  @javax.annotation.Nullable
  public ApplicationDetailApplicationConfigurationDescription getApplicationConfigurationDescription() {
    return applicationConfigurationDescription;
  }

  public void setApplicationConfigurationDescription(ApplicationDetailApplicationConfigurationDescription applicationConfigurationDescription) {
    this.applicationConfigurationDescription = applicationConfigurationDescription;
  }


  public DescribeApplicationResponseApplicationDetail cloudWatchLoggingOptionDescriptions(List cloudWatchLoggingOptionDescriptions) {
    this.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptionDescriptions
   * @return cloudWatchLoggingOptionDescriptions
   */
  @javax.annotation.Nullable
  public List getCloudWatchLoggingOptionDescriptions() {
    return cloudWatchLoggingOptionDescriptions;
  }

  public void setCloudWatchLoggingOptionDescriptions(List cloudWatchLoggingOptionDescriptions) {
    this.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions;
  }


  public DescribeApplicationResponseApplicationDetail applicationMaintenanceConfigurationDescription(ApplicationDetailApplicationMaintenanceConfigurationDescription applicationMaintenanceConfigurationDescription) {
    this.applicationMaintenanceConfigurationDescription = applicationMaintenanceConfigurationDescription;
    return this;
  }

  /**
   * Get applicationMaintenanceConfigurationDescription
   * @return applicationMaintenanceConfigurationDescription
   */
  @javax.annotation.Nullable
  public ApplicationDetailApplicationMaintenanceConfigurationDescription getApplicationMaintenanceConfigurationDescription() {
    return applicationMaintenanceConfigurationDescription;
  }

  public void setApplicationMaintenanceConfigurationDescription(ApplicationDetailApplicationMaintenanceConfigurationDescription applicationMaintenanceConfigurationDescription) {
    this.applicationMaintenanceConfigurationDescription = applicationMaintenanceConfigurationDescription;
  }


  public DescribeApplicationResponseApplicationDetail applicationVersionUpdatedFrom(Integer applicationVersionUpdatedFrom) {
    this.applicationVersionUpdatedFrom = applicationVersionUpdatedFrom;
    return this;
  }

  /**
   * Get applicationVersionUpdatedFrom
   * @return applicationVersionUpdatedFrom
   */
  @javax.annotation.Nullable
  public Integer getApplicationVersionUpdatedFrom() {
    return applicationVersionUpdatedFrom;
  }

  public void setApplicationVersionUpdatedFrom(Integer applicationVersionUpdatedFrom) {
    this.applicationVersionUpdatedFrom = applicationVersionUpdatedFrom;
  }


  public DescribeApplicationResponseApplicationDetail applicationVersionRolledBackFrom(Integer applicationVersionRolledBackFrom) {
    this.applicationVersionRolledBackFrom = applicationVersionRolledBackFrom;
    return this;
  }

  /**
   * Get applicationVersionRolledBackFrom
   * @return applicationVersionRolledBackFrom
   */
  @javax.annotation.Nullable
  public Integer getApplicationVersionRolledBackFrom() {
    return applicationVersionRolledBackFrom;
  }

  public void setApplicationVersionRolledBackFrom(Integer applicationVersionRolledBackFrom) {
    this.applicationVersionRolledBackFrom = applicationVersionRolledBackFrom;
  }


  public DescribeApplicationResponseApplicationDetail conditionalToken(String conditionalToken) {
    this.conditionalToken = conditionalToken;
    return this;
  }

  /**
   * Get conditionalToken
   * @return conditionalToken
   */
  @javax.annotation.Nullable
  public String getConditionalToken() {
    return conditionalToken;
  }

  public void setConditionalToken(String conditionalToken) {
    this.conditionalToken = conditionalToken;
  }


  public DescribeApplicationResponseApplicationDetail applicationVersionRolledBackTo(Integer applicationVersionRolledBackTo) {
    this.applicationVersionRolledBackTo = applicationVersionRolledBackTo;
    return this;
  }

  /**
   * Get applicationVersionRolledBackTo
   * @return applicationVersionRolledBackTo
   */
  @javax.annotation.Nullable
  public Integer getApplicationVersionRolledBackTo() {
    return applicationVersionRolledBackTo;
  }

  public void setApplicationVersionRolledBackTo(Integer applicationVersionRolledBackTo) {
    this.applicationVersionRolledBackTo = applicationVersionRolledBackTo;
  }


  public DescribeApplicationResponseApplicationDetail applicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
    return this;
  }

  /**
   * Get applicationMode
   * @return applicationMode
   */
  @javax.annotation.Nullable
  public ApplicationMode getApplicationMode() {
    return applicationMode;
  }

  public void setApplicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeApplicationResponseApplicationDetail describeApplicationResponseApplicationDetail = (DescribeApplicationResponseApplicationDetail) o;
    return Objects.equals(this.applicationARN, describeApplicationResponseApplicationDetail.applicationARN) &&
        Objects.equals(this.applicationDescription, describeApplicationResponseApplicationDetail.applicationDescription) &&
        Objects.equals(this.applicationName, describeApplicationResponseApplicationDetail.applicationName) &&
        Objects.equals(this.runtimeEnvironment, describeApplicationResponseApplicationDetail.runtimeEnvironment) &&
        Objects.equals(this.serviceExecutionRole, describeApplicationResponseApplicationDetail.serviceExecutionRole) &&
        Objects.equals(this.applicationStatus, describeApplicationResponseApplicationDetail.applicationStatus) &&
        Objects.equals(this.applicationVersionId, describeApplicationResponseApplicationDetail.applicationVersionId) &&
        Objects.equals(this.createTimestamp, describeApplicationResponseApplicationDetail.createTimestamp) &&
        Objects.equals(this.lastUpdateTimestamp, describeApplicationResponseApplicationDetail.lastUpdateTimestamp) &&
        Objects.equals(this.applicationConfigurationDescription, describeApplicationResponseApplicationDetail.applicationConfigurationDescription) &&
        Objects.equals(this.cloudWatchLoggingOptionDescriptions, describeApplicationResponseApplicationDetail.cloudWatchLoggingOptionDescriptions) &&
        Objects.equals(this.applicationMaintenanceConfigurationDescription, describeApplicationResponseApplicationDetail.applicationMaintenanceConfigurationDescription) &&
        Objects.equals(this.applicationVersionUpdatedFrom, describeApplicationResponseApplicationDetail.applicationVersionUpdatedFrom) &&
        Objects.equals(this.applicationVersionRolledBackFrom, describeApplicationResponseApplicationDetail.applicationVersionRolledBackFrom) &&
        Objects.equals(this.conditionalToken, describeApplicationResponseApplicationDetail.conditionalToken) &&
        Objects.equals(this.applicationVersionRolledBackTo, describeApplicationResponseApplicationDetail.applicationVersionRolledBackTo) &&
        Objects.equals(this.applicationMode, describeApplicationResponseApplicationDetail.applicationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationARN, applicationDescription, applicationName, runtimeEnvironment, serviceExecutionRole, applicationStatus, applicationVersionId, createTimestamp, lastUpdateTimestamp, applicationConfigurationDescription, cloudWatchLoggingOptionDescriptions, applicationMaintenanceConfigurationDescription, applicationVersionUpdatedFrom, applicationVersionRolledBackFrom, conditionalToken, applicationVersionRolledBackTo, applicationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeApplicationResponseApplicationDetail {\n");
    sb.append("    applicationARN: ").append(toIndentedString(applicationARN)).append("\n");
    sb.append("    applicationDescription: ").append(toIndentedString(applicationDescription)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    runtimeEnvironment: ").append(toIndentedString(runtimeEnvironment)).append("\n");
    sb.append("    serviceExecutionRole: ").append(toIndentedString(serviceExecutionRole)).append("\n");
    sb.append("    applicationStatus: ").append(toIndentedString(applicationStatus)).append("\n");
    sb.append("    applicationVersionId: ").append(toIndentedString(applicationVersionId)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    lastUpdateTimestamp: ").append(toIndentedString(lastUpdateTimestamp)).append("\n");
    sb.append("    applicationConfigurationDescription: ").append(toIndentedString(applicationConfigurationDescription)).append("\n");
    sb.append("    cloudWatchLoggingOptionDescriptions: ").append(toIndentedString(cloudWatchLoggingOptionDescriptions)).append("\n");
    sb.append("    applicationMaintenanceConfigurationDescription: ").append(toIndentedString(applicationMaintenanceConfigurationDescription)).append("\n");
    sb.append("    applicationVersionUpdatedFrom: ").append(toIndentedString(applicationVersionUpdatedFrom)).append("\n");
    sb.append("    applicationVersionRolledBackFrom: ").append(toIndentedString(applicationVersionRolledBackFrom)).append("\n");
    sb.append("    conditionalToken: ").append(toIndentedString(conditionalToken)).append("\n");
    sb.append("    applicationVersionRolledBackTo: ").append(toIndentedString(applicationVersionRolledBackTo)).append("\n");
    sb.append("    applicationMode: ").append(toIndentedString(applicationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationARN");
    openapiFields.add("ApplicationDescription");
    openapiFields.add("ApplicationName");
    openapiFields.add("RuntimeEnvironment");
    openapiFields.add("ServiceExecutionRole");
    openapiFields.add("ApplicationStatus");
    openapiFields.add("ApplicationVersionId");
    openapiFields.add("CreateTimestamp");
    openapiFields.add("LastUpdateTimestamp");
    openapiFields.add("ApplicationConfigurationDescription");
    openapiFields.add("CloudWatchLoggingOptionDescriptions");
    openapiFields.add("ApplicationMaintenanceConfigurationDescription");
    openapiFields.add("ApplicationVersionUpdatedFrom");
    openapiFields.add("ApplicationVersionRolledBackFrom");
    openapiFields.add("ConditionalToken");
    openapiFields.add("ApplicationVersionRolledBackTo");
    openapiFields.add("ApplicationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationARN");
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("RuntimeEnvironment");
    openapiRequiredFields.add("ApplicationStatus");
    openapiRequiredFields.add("ApplicationVersionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeApplicationResponseApplicationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeApplicationResponseApplicationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeApplicationResponseApplicationDetail is not found in the empty JSON string", DescribeApplicationResponseApplicationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeApplicationResponseApplicationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeApplicationResponseApplicationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeApplicationResponseApplicationDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationARN`
      String.validateJsonElement(jsonObj.get("ApplicationARN"));
      // validate the optional field `ApplicationDescription`
      if (jsonObj.get("ApplicationDescription") != null && !jsonObj.get("ApplicationDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationDescription"));
      }
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the required field `RuntimeEnvironment`
      RuntimeEnvironment.validateJsonElement(jsonObj.get("RuntimeEnvironment"));
      // validate the optional field `ServiceExecutionRole`
      if (jsonObj.get("ServiceExecutionRole") != null && !jsonObj.get("ServiceExecutionRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceExecutionRole"));
      }
      // validate the required field `ApplicationStatus`
      ApplicationStatus.validateJsonElement(jsonObj.get("ApplicationStatus"));
      // validate the required field `ApplicationVersionId`
      Integer.validateJsonElement(jsonObj.get("ApplicationVersionId"));
      // validate the optional field `CreateTimestamp`
      if (jsonObj.get("CreateTimestamp") != null && !jsonObj.get("CreateTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateTimestamp"));
      }
      // validate the optional field `LastUpdateTimestamp`
      if (jsonObj.get("LastUpdateTimestamp") != null && !jsonObj.get("LastUpdateTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdateTimestamp"));
      }
      // validate the optional field `ApplicationConfigurationDescription`
      if (jsonObj.get("ApplicationConfigurationDescription") != null && !jsonObj.get("ApplicationConfigurationDescription").isJsonNull()) {
        ApplicationDetailApplicationConfigurationDescription.validateJsonElement(jsonObj.get("ApplicationConfigurationDescription"));
      }
      // validate the optional field `CloudWatchLoggingOptionDescriptions`
      if (jsonObj.get("CloudWatchLoggingOptionDescriptions") != null && !jsonObj.get("CloudWatchLoggingOptionDescriptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CloudWatchLoggingOptionDescriptions"));
      }
      // validate the optional field `ApplicationMaintenanceConfigurationDescription`
      if (jsonObj.get("ApplicationMaintenanceConfigurationDescription") != null && !jsonObj.get("ApplicationMaintenanceConfigurationDescription").isJsonNull()) {
        ApplicationDetailApplicationMaintenanceConfigurationDescription.validateJsonElement(jsonObj.get("ApplicationMaintenanceConfigurationDescription"));
      }
      // validate the optional field `ApplicationVersionUpdatedFrom`
      if (jsonObj.get("ApplicationVersionUpdatedFrom") != null && !jsonObj.get("ApplicationVersionUpdatedFrom").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ApplicationVersionUpdatedFrom"));
      }
      // validate the optional field `ApplicationVersionRolledBackFrom`
      if (jsonObj.get("ApplicationVersionRolledBackFrom") != null && !jsonObj.get("ApplicationVersionRolledBackFrom").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ApplicationVersionRolledBackFrom"));
      }
      // validate the optional field `ConditionalToken`
      if (jsonObj.get("ConditionalToken") != null && !jsonObj.get("ConditionalToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConditionalToken"));
      }
      // validate the optional field `ApplicationVersionRolledBackTo`
      if (jsonObj.get("ApplicationVersionRolledBackTo") != null && !jsonObj.get("ApplicationVersionRolledBackTo").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ApplicationVersionRolledBackTo"));
      }
      // validate the optional field `ApplicationMode`
      if (jsonObj.get("ApplicationMode") != null && !jsonObj.get("ApplicationMode").isJsonNull()) {
        ApplicationMode.validateJsonElement(jsonObj.get("ApplicationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeApplicationResponseApplicationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeApplicationResponseApplicationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeApplicationResponseApplicationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeApplicationResponseApplicationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeApplicationResponseApplicationDetail>() {
           @Override
           public void write(JsonWriter out, DescribeApplicationResponseApplicationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeApplicationResponseApplicationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeApplicationResponseApplicationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeApplicationResponseApplicationDetail
   * @throws IOException if the JSON string is invalid with respect to DescribeApplicationResponseApplicationDetail
   */
  public static DescribeApplicationResponseApplicationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeApplicationResponseApplicationDetail.class);
  }

  /**
   * Convert an instance of DescribeApplicationResponseApplicationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

