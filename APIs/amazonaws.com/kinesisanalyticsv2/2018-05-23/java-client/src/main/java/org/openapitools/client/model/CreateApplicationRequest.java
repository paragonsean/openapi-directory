/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationMode;
import org.openapitools.client.model.CreateApplicationRequestApplicationConfiguration;
import org.openapitools.client.model.RuntimeEnvironment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationRequest {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_APPLICATION_DESCRIPTION = "ApplicationDescription";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DESCRIPTION)
  private String applicationDescription;

  public static final String SERIALIZED_NAME_RUNTIME_ENVIRONMENT = "RuntimeEnvironment";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ENVIRONMENT)
  private RuntimeEnvironment runtimeEnvironment;

  public static final String SERIALIZED_NAME_SERVICE_EXECUTION_ROLE = "ServiceExecutionRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_EXECUTION_ROLE)
  private String serviceExecutionRole;

  public static final String SERIALIZED_NAME_APPLICATION_CONFIGURATION = "ApplicationConfiguration";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CONFIGURATION)
  private CreateApplicationRequestApplicationConfiguration applicationConfiguration;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS = "CloudWatchLoggingOptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS)
  private List cloudWatchLoggingOptions;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_APPLICATION_MODE = "ApplicationMode";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MODE)
  private ApplicationMode applicationMode;

  public CreateApplicationRequest() {
  }

  public CreateApplicationRequest applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public CreateApplicationRequest applicationDescription(String applicationDescription) {
    this.applicationDescription = applicationDescription;
    return this;
  }

  /**
   * Get applicationDescription
   * @return applicationDescription
   */
  @javax.annotation.Nullable
  public String getApplicationDescription() {
    return applicationDescription;
  }

  public void setApplicationDescription(String applicationDescription) {
    this.applicationDescription = applicationDescription;
  }


  public CreateApplicationRequest runtimeEnvironment(RuntimeEnvironment runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
    return this;
  }

  /**
   * Get runtimeEnvironment
   * @return runtimeEnvironment
   */
  @javax.annotation.Nonnull
  public RuntimeEnvironment getRuntimeEnvironment() {
    return runtimeEnvironment;
  }

  public void setRuntimeEnvironment(RuntimeEnvironment runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
  }


  public CreateApplicationRequest serviceExecutionRole(String serviceExecutionRole) {
    this.serviceExecutionRole = serviceExecutionRole;
    return this;
  }

  /**
   * Get serviceExecutionRole
   * @return serviceExecutionRole
   */
  @javax.annotation.Nonnull
  public String getServiceExecutionRole() {
    return serviceExecutionRole;
  }

  public void setServiceExecutionRole(String serviceExecutionRole) {
    this.serviceExecutionRole = serviceExecutionRole;
  }


  public CreateApplicationRequest applicationConfiguration(CreateApplicationRequestApplicationConfiguration applicationConfiguration) {
    this.applicationConfiguration = applicationConfiguration;
    return this;
  }

  /**
   * Get applicationConfiguration
   * @return applicationConfiguration
   */
  @javax.annotation.Nullable
  public CreateApplicationRequestApplicationConfiguration getApplicationConfiguration() {
    return applicationConfiguration;
  }

  public void setApplicationConfiguration(CreateApplicationRequestApplicationConfiguration applicationConfiguration) {
    this.applicationConfiguration = applicationConfiguration;
  }


  public CreateApplicationRequest cloudWatchLoggingOptions(List cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptions
   * @return cloudWatchLoggingOptions
   */
  @javax.annotation.Nullable
  public List getCloudWatchLoggingOptions() {
    return cloudWatchLoggingOptions;
  }

  public void setCloudWatchLoggingOptions(List cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
  }


  public CreateApplicationRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateApplicationRequest applicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
    return this;
  }

  /**
   * Get applicationMode
   * @return applicationMode
   */
  @javax.annotation.Nullable
  public ApplicationMode getApplicationMode() {
    return applicationMode;
  }

  public void setApplicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationRequest createApplicationRequest = (CreateApplicationRequest) o;
    return Objects.equals(this.applicationName, createApplicationRequest.applicationName) &&
        Objects.equals(this.applicationDescription, createApplicationRequest.applicationDescription) &&
        Objects.equals(this.runtimeEnvironment, createApplicationRequest.runtimeEnvironment) &&
        Objects.equals(this.serviceExecutionRole, createApplicationRequest.serviceExecutionRole) &&
        Objects.equals(this.applicationConfiguration, createApplicationRequest.applicationConfiguration) &&
        Objects.equals(this.cloudWatchLoggingOptions, createApplicationRequest.cloudWatchLoggingOptions) &&
        Objects.equals(this.tags, createApplicationRequest.tags) &&
        Objects.equals(this.applicationMode, createApplicationRequest.applicationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, applicationDescription, runtimeEnvironment, serviceExecutionRole, applicationConfiguration, cloudWatchLoggingOptions, tags, applicationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationRequest {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationDescription: ").append(toIndentedString(applicationDescription)).append("\n");
    sb.append("    runtimeEnvironment: ").append(toIndentedString(runtimeEnvironment)).append("\n");
    sb.append("    serviceExecutionRole: ").append(toIndentedString(serviceExecutionRole)).append("\n");
    sb.append("    applicationConfiguration: ").append(toIndentedString(applicationConfiguration)).append("\n");
    sb.append("    cloudWatchLoggingOptions: ").append(toIndentedString(cloudWatchLoggingOptions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    applicationMode: ").append(toIndentedString(applicationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("ApplicationDescription");
    openapiFields.add("RuntimeEnvironment");
    openapiFields.add("ServiceExecutionRole");
    openapiFields.add("ApplicationConfiguration");
    openapiFields.add("CloudWatchLoggingOptions");
    openapiFields.add("Tags");
    openapiFields.add("ApplicationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("RuntimeEnvironment");
    openapiRequiredFields.add("ServiceExecutionRole");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationRequest is not found in the empty JSON string", CreateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the optional field `ApplicationDescription`
      if (jsonObj.get("ApplicationDescription") != null && !jsonObj.get("ApplicationDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationDescription"));
      }
      // validate the required field `RuntimeEnvironment`
      RuntimeEnvironment.validateJsonElement(jsonObj.get("RuntimeEnvironment"));
      // validate the required field `ServiceExecutionRole`
      String.validateJsonElement(jsonObj.get("ServiceExecutionRole"));
      // validate the optional field `ApplicationConfiguration`
      if (jsonObj.get("ApplicationConfiguration") != null && !jsonObj.get("ApplicationConfiguration").isJsonNull()) {
        CreateApplicationRequestApplicationConfiguration.validateJsonElement(jsonObj.get("ApplicationConfiguration"));
      }
      // validate the optional field `CloudWatchLoggingOptions`
      if (jsonObj.get("CloudWatchLoggingOptions") != null && !jsonObj.get("CloudWatchLoggingOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CloudWatchLoggingOptions"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `ApplicationMode`
      if (jsonObj.get("ApplicationMode") != null && !jsonObj.get("ApplicationMode").isJsonNull()) {
        ApplicationMode.validateJsonElement(jsonObj.get("ApplicationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, CreateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationRequest
   */
  public static CreateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationRequest.class);
  }

  /**
   * Convert an instance of CreateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

