/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes updates to parameters for how an application executes multiple tasks simultaneously.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParallelismConfigurationUpdate {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE = "ConfigurationTypeUpdate";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE)
  private ConfigurationType configurationTypeUpdate;

  public static final String SERIALIZED_NAME_PARALLELISM_UPDATE = "ParallelismUpdate";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_UPDATE)
  private Integer parallelismUpdate;

  public static final String SERIALIZED_NAME_PARALLELISM_PER_K_P_U_UPDATE = "ParallelismPerKPUUpdate";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_PER_K_P_U_UPDATE)
  private Integer parallelismPerKPUUpdate;

  public static final String SERIALIZED_NAME_AUTO_SCALING_ENABLED_UPDATE = "AutoScalingEnabledUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_ENABLED_UPDATE)
  private Boolean autoScalingEnabledUpdate;

  public ParallelismConfigurationUpdate() {
  }

  public ParallelismConfigurationUpdate configurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
    return this;
  }

  /**
   * Get configurationTypeUpdate
   * @return configurationTypeUpdate
   */
  @javax.annotation.Nullable
  public ConfigurationType getConfigurationTypeUpdate() {
    return configurationTypeUpdate;
  }

  public void setConfigurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
  }


  public ParallelismConfigurationUpdate parallelismUpdate(Integer parallelismUpdate) {
    this.parallelismUpdate = parallelismUpdate;
    return this;
  }

  /**
   * Get parallelismUpdate
   * @return parallelismUpdate
   */
  @javax.annotation.Nullable
  public Integer getParallelismUpdate() {
    return parallelismUpdate;
  }

  public void setParallelismUpdate(Integer parallelismUpdate) {
    this.parallelismUpdate = parallelismUpdate;
  }


  public ParallelismConfigurationUpdate parallelismPerKPUUpdate(Integer parallelismPerKPUUpdate) {
    this.parallelismPerKPUUpdate = parallelismPerKPUUpdate;
    return this;
  }

  /**
   * Get parallelismPerKPUUpdate
   * @return parallelismPerKPUUpdate
   */
  @javax.annotation.Nullable
  public Integer getParallelismPerKPUUpdate() {
    return parallelismPerKPUUpdate;
  }

  public void setParallelismPerKPUUpdate(Integer parallelismPerKPUUpdate) {
    this.parallelismPerKPUUpdate = parallelismPerKPUUpdate;
  }


  public ParallelismConfigurationUpdate autoScalingEnabledUpdate(Boolean autoScalingEnabledUpdate) {
    this.autoScalingEnabledUpdate = autoScalingEnabledUpdate;
    return this;
  }

  /**
   * Get autoScalingEnabledUpdate
   * @return autoScalingEnabledUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAutoScalingEnabledUpdate() {
    return autoScalingEnabledUpdate;
  }

  public void setAutoScalingEnabledUpdate(Boolean autoScalingEnabledUpdate) {
    this.autoScalingEnabledUpdate = autoScalingEnabledUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParallelismConfigurationUpdate parallelismConfigurationUpdate = (ParallelismConfigurationUpdate) o;
    return Objects.equals(this.configurationTypeUpdate, parallelismConfigurationUpdate.configurationTypeUpdate) &&
        Objects.equals(this.parallelismUpdate, parallelismConfigurationUpdate.parallelismUpdate) &&
        Objects.equals(this.parallelismPerKPUUpdate, parallelismConfigurationUpdate.parallelismPerKPUUpdate) &&
        Objects.equals(this.autoScalingEnabledUpdate, parallelismConfigurationUpdate.autoScalingEnabledUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationTypeUpdate, parallelismUpdate, parallelismPerKPUUpdate, autoScalingEnabledUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParallelismConfigurationUpdate {\n");
    sb.append("    configurationTypeUpdate: ").append(toIndentedString(configurationTypeUpdate)).append("\n");
    sb.append("    parallelismUpdate: ").append(toIndentedString(parallelismUpdate)).append("\n");
    sb.append("    parallelismPerKPUUpdate: ").append(toIndentedString(parallelismPerKPUUpdate)).append("\n");
    sb.append("    autoScalingEnabledUpdate: ").append(toIndentedString(autoScalingEnabledUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationTypeUpdate");
    openapiFields.add("ParallelismUpdate");
    openapiFields.add("ParallelismPerKPUUpdate");
    openapiFields.add("AutoScalingEnabledUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParallelismConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParallelismConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParallelismConfigurationUpdate is not found in the empty JSON string", ParallelismConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParallelismConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParallelismConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationTypeUpdate`
      if (jsonObj.get("ConfigurationTypeUpdate") != null && !jsonObj.get("ConfigurationTypeUpdate").isJsonNull()) {
        ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationTypeUpdate"));
      }
      // validate the optional field `ParallelismUpdate`
      if (jsonObj.get("ParallelismUpdate") != null && !jsonObj.get("ParallelismUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelismUpdate"));
      }
      // validate the optional field `ParallelismPerKPUUpdate`
      if (jsonObj.get("ParallelismPerKPUUpdate") != null && !jsonObj.get("ParallelismPerKPUUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelismPerKPUUpdate"));
      }
      // validate the optional field `AutoScalingEnabledUpdate`
      if (jsonObj.get("AutoScalingEnabledUpdate") != null && !jsonObj.get("AutoScalingEnabledUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoScalingEnabledUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParallelismConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParallelismConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParallelismConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParallelismConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ParallelismConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, ParallelismConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParallelismConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParallelismConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParallelismConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to ParallelismConfigurationUpdate
   */
  public static ParallelismConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParallelismConfigurationUpdate.class);
  }

  /**
   * Convert an instance of ParallelismConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

