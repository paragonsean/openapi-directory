/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate {
  public static final String SERIALIZED_NAME_BUCKET_A_R_N_UPDATE = "BucketARNUpdate";
  @SerializedName(SERIALIZED_NAME_BUCKET_A_R_N_UPDATE)
  private String bucketARNUpdate;

  public static final String SERIALIZED_NAME_BASE_PATH_UPDATE = "BasePathUpdate";
  @SerializedName(SERIALIZED_NAME_BASE_PATH_UPDATE)
  private String basePathUpdate;

  public DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate() {
  }

  public DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate bucketARNUpdate(String bucketARNUpdate) {
    this.bucketARNUpdate = bucketARNUpdate;
    return this;
  }

  /**
   * Get bucketARNUpdate
   * @return bucketARNUpdate
   */
  @javax.annotation.Nullable
  public String getBucketARNUpdate() {
    return bucketARNUpdate;
  }

  public void setBucketARNUpdate(String bucketARNUpdate) {
    this.bucketARNUpdate = bucketARNUpdate;
  }


  public DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate basePathUpdate(String basePathUpdate) {
    this.basePathUpdate = basePathUpdate;
    return this;
  }

  /**
   * Get basePathUpdate
   * @return basePathUpdate
   */
  @javax.annotation.Nullable
  public String getBasePathUpdate() {
    return basePathUpdate;
  }

  public void setBasePathUpdate(String basePathUpdate) {
    this.basePathUpdate = basePathUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate deployAsApplicationConfigurationUpdateS3ContentLocationUpdate = (DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate) o;
    return Objects.equals(this.bucketARNUpdate, deployAsApplicationConfigurationUpdateS3ContentLocationUpdate.bucketARNUpdate) &&
        Objects.equals(this.basePathUpdate, deployAsApplicationConfigurationUpdateS3ContentLocationUpdate.basePathUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketARNUpdate, basePathUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate {\n");
    sb.append("    bucketARNUpdate: ").append(toIndentedString(bucketARNUpdate)).append("\n");
    sb.append("    basePathUpdate: ").append(toIndentedString(basePathUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BucketARNUpdate");
    openapiFields.add("BasePathUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate is not found in the empty JSON string", DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BucketARNUpdate`
      if (jsonObj.get("BucketARNUpdate") != null && !jsonObj.get("BucketARNUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketARNUpdate"));
      }
      // validate the optional field `BasePathUpdate`
      if (jsonObj.get("BasePathUpdate") != null && !jsonObj.get("BasePathUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BasePathUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate>() {
           @Override
           public void write(JsonWriter out, DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate
   * @throws IOException if the JSON string is invalid with respect to DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate
   */
  public static DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate.class);
  }

  /**
   * Convert an instance of DeployAsApplicationConfigurationUpdateS3ContentLocationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

