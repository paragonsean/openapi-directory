/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE = "ConfigurationType";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE)
  private ConfigurationType configurationType;

  public static final String SERIALIZED_NAME_PARALLELISM = "Parallelism";
  @SerializedName(SERIALIZED_NAME_PARALLELISM)
  private Integer parallelism;

  public static final String SERIALIZED_NAME_PARALLELISM_PER_K_P_U = "ParallelismPerKPU";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_PER_K_P_U)
  private Integer parallelismPerKPU;

  public static final String SERIALIZED_NAME_CURRENT_PARALLELISM = "CurrentParallelism";
  @SerializedName(SERIALIZED_NAME_CURRENT_PARALLELISM)
  private Integer currentParallelism;

  public static final String SERIALIZED_NAME_AUTO_SCALING_ENABLED = "AutoScalingEnabled";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_ENABLED)
  private Boolean autoScalingEnabled;

  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription() {
  }

  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription configurationType(ConfigurationType configurationType) {
    this.configurationType = configurationType;
    return this;
  }

  /**
   * Get configurationType
   * @return configurationType
   */
  @javax.annotation.Nullable
  public ConfigurationType getConfigurationType() {
    return configurationType;
  }

  public void setConfigurationType(ConfigurationType configurationType) {
    this.configurationType = configurationType;
  }


  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription parallelism(Integer parallelism) {
    this.parallelism = parallelism;
    return this;
  }

  /**
   * Get parallelism
   * @return parallelism
   */
  @javax.annotation.Nullable
  public Integer getParallelism() {
    return parallelism;
  }

  public void setParallelism(Integer parallelism) {
    this.parallelism = parallelism;
  }


  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription parallelismPerKPU(Integer parallelismPerKPU) {
    this.parallelismPerKPU = parallelismPerKPU;
    return this;
  }

  /**
   * Get parallelismPerKPU
   * @return parallelismPerKPU
   */
  @javax.annotation.Nullable
  public Integer getParallelismPerKPU() {
    return parallelismPerKPU;
  }

  public void setParallelismPerKPU(Integer parallelismPerKPU) {
    this.parallelismPerKPU = parallelismPerKPU;
  }


  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription currentParallelism(Integer currentParallelism) {
    this.currentParallelism = currentParallelism;
    return this;
  }

  /**
   * Get currentParallelism
   * @return currentParallelism
   */
  @javax.annotation.Nullable
  public Integer getCurrentParallelism() {
    return currentParallelism;
  }

  public void setCurrentParallelism(Integer currentParallelism) {
    this.currentParallelism = currentParallelism;
  }


  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription autoScalingEnabled(Boolean autoScalingEnabled) {
    this.autoScalingEnabled = autoScalingEnabled;
    return this;
  }

  /**
   * Get autoScalingEnabled
   * @return autoScalingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoScalingEnabled() {
    return autoScalingEnabled;
  }

  public void setAutoScalingEnabled(Boolean autoScalingEnabled) {
    this.autoScalingEnabled = autoScalingEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription flinkApplicationConfigurationDescriptionParallelismConfigurationDescription = (FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription) o;
    return Objects.equals(this.configurationType, flinkApplicationConfigurationDescriptionParallelismConfigurationDescription.configurationType) &&
        Objects.equals(this.parallelism, flinkApplicationConfigurationDescriptionParallelismConfigurationDescription.parallelism) &&
        Objects.equals(this.parallelismPerKPU, flinkApplicationConfigurationDescriptionParallelismConfigurationDescription.parallelismPerKPU) &&
        Objects.equals(this.currentParallelism, flinkApplicationConfigurationDescriptionParallelismConfigurationDescription.currentParallelism) &&
        Objects.equals(this.autoScalingEnabled, flinkApplicationConfigurationDescriptionParallelismConfigurationDescription.autoScalingEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationType, parallelism, parallelismPerKPU, currentParallelism, autoScalingEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription {\n");
    sb.append("    configurationType: ").append(toIndentedString(configurationType)).append("\n");
    sb.append("    parallelism: ").append(toIndentedString(parallelism)).append("\n");
    sb.append("    parallelismPerKPU: ").append(toIndentedString(parallelismPerKPU)).append("\n");
    sb.append("    currentParallelism: ").append(toIndentedString(currentParallelism)).append("\n");
    sb.append("    autoScalingEnabled: ").append(toIndentedString(autoScalingEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationType");
    openapiFields.add("Parallelism");
    openapiFields.add("ParallelismPerKPU");
    openapiFields.add("CurrentParallelism");
    openapiFields.add("AutoScalingEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription is not found in the empty JSON string", FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationType`
      if (jsonObj.get("ConfigurationType") != null && !jsonObj.get("ConfigurationType").isJsonNull()) {
        ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationType"));
      }
      // validate the optional field `Parallelism`
      if (jsonObj.get("Parallelism") != null && !jsonObj.get("Parallelism").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Parallelism"));
      }
      // validate the optional field `ParallelismPerKPU`
      if (jsonObj.get("ParallelismPerKPU") != null && !jsonObj.get("ParallelismPerKPU").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelismPerKPU"));
      }
      // validate the optional field `CurrentParallelism`
      if (jsonObj.get("CurrentParallelism") != null && !jsonObj.get("CurrentParallelism").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CurrentParallelism"));
      }
      // validate the optional field `AutoScalingEnabled`
      if (jsonObj.get("AutoScalingEnabled") != null && !jsonObj.get("AutoScalingEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoScalingEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription
   */
  public static FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.class);
  }

  /**
   * Convert an instance of FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

