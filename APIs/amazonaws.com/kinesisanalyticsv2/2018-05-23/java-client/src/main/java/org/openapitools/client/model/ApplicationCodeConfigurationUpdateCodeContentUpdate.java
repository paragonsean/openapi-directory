/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodeContentUpdateS3ContentLocationUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationCodeConfigurationUpdateCodeContentUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationCodeConfigurationUpdateCodeContentUpdate {
  public static final String SERIALIZED_NAME_TEXT_CONTENT_UPDATE = "TextContentUpdate";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTENT_UPDATE)
  private String textContentUpdate;

  public static final String SERIALIZED_NAME_ZIP_FILE_CONTENT_UPDATE = "ZipFileContentUpdate";
  @SerializedName(SERIALIZED_NAME_ZIP_FILE_CONTENT_UPDATE)
  private String zipFileContentUpdate;

  public static final String SERIALIZED_NAME_S3_CONTENT_LOCATION_UPDATE = "S3ContentLocationUpdate";
  @SerializedName(SERIALIZED_NAME_S3_CONTENT_LOCATION_UPDATE)
  private CodeContentUpdateS3ContentLocationUpdate s3ContentLocationUpdate;

  public ApplicationCodeConfigurationUpdateCodeContentUpdate() {
  }

  public ApplicationCodeConfigurationUpdateCodeContentUpdate textContentUpdate(String textContentUpdate) {
    this.textContentUpdate = textContentUpdate;
    return this;
  }

  /**
   * Get textContentUpdate
   * @return textContentUpdate
   */
  @javax.annotation.Nullable
  public String getTextContentUpdate() {
    return textContentUpdate;
  }

  public void setTextContentUpdate(String textContentUpdate) {
    this.textContentUpdate = textContentUpdate;
  }


  public ApplicationCodeConfigurationUpdateCodeContentUpdate zipFileContentUpdate(String zipFileContentUpdate) {
    this.zipFileContentUpdate = zipFileContentUpdate;
    return this;
  }

  /**
   * Get zipFileContentUpdate
   * @return zipFileContentUpdate
   */
  @javax.annotation.Nullable
  public String getZipFileContentUpdate() {
    return zipFileContentUpdate;
  }

  public void setZipFileContentUpdate(String zipFileContentUpdate) {
    this.zipFileContentUpdate = zipFileContentUpdate;
  }


  public ApplicationCodeConfigurationUpdateCodeContentUpdate s3ContentLocationUpdate(CodeContentUpdateS3ContentLocationUpdate s3ContentLocationUpdate) {
    this.s3ContentLocationUpdate = s3ContentLocationUpdate;
    return this;
  }

  /**
   * Get s3ContentLocationUpdate
   * @return s3ContentLocationUpdate
   */
  @javax.annotation.Nullable
  public CodeContentUpdateS3ContentLocationUpdate getS3ContentLocationUpdate() {
    return s3ContentLocationUpdate;
  }

  public void setS3ContentLocationUpdate(CodeContentUpdateS3ContentLocationUpdate s3ContentLocationUpdate) {
    this.s3ContentLocationUpdate = s3ContentLocationUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationCodeConfigurationUpdateCodeContentUpdate applicationCodeConfigurationUpdateCodeContentUpdate = (ApplicationCodeConfigurationUpdateCodeContentUpdate) o;
    return Objects.equals(this.textContentUpdate, applicationCodeConfigurationUpdateCodeContentUpdate.textContentUpdate) &&
        Objects.equals(this.zipFileContentUpdate, applicationCodeConfigurationUpdateCodeContentUpdate.zipFileContentUpdate) &&
        Objects.equals(this.s3ContentLocationUpdate, applicationCodeConfigurationUpdateCodeContentUpdate.s3ContentLocationUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(textContentUpdate, zipFileContentUpdate, s3ContentLocationUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationCodeConfigurationUpdateCodeContentUpdate {\n");
    sb.append("    textContentUpdate: ").append(toIndentedString(textContentUpdate)).append("\n");
    sb.append("    zipFileContentUpdate: ").append(toIndentedString(zipFileContentUpdate)).append("\n");
    sb.append("    s3ContentLocationUpdate: ").append(toIndentedString(s3ContentLocationUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TextContentUpdate");
    openapiFields.add("ZipFileContentUpdate");
    openapiFields.add("S3ContentLocationUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationCodeConfigurationUpdateCodeContentUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationCodeConfigurationUpdateCodeContentUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationCodeConfigurationUpdateCodeContentUpdate is not found in the empty JSON string", ApplicationCodeConfigurationUpdateCodeContentUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationCodeConfigurationUpdateCodeContentUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationCodeConfigurationUpdateCodeContentUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TextContentUpdate`
      if (jsonObj.get("TextContentUpdate") != null && !jsonObj.get("TextContentUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TextContentUpdate"));
      }
      // validate the optional field `ZipFileContentUpdate`
      if (jsonObj.get("ZipFileContentUpdate") != null && !jsonObj.get("ZipFileContentUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZipFileContentUpdate"));
      }
      // validate the optional field `S3ContentLocationUpdate`
      if (jsonObj.get("S3ContentLocationUpdate") != null && !jsonObj.get("S3ContentLocationUpdate").isJsonNull()) {
        CodeContentUpdateS3ContentLocationUpdate.validateJsonElement(jsonObj.get("S3ContentLocationUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationCodeConfigurationUpdateCodeContentUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationCodeConfigurationUpdateCodeContentUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationCodeConfigurationUpdateCodeContentUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationCodeConfigurationUpdateCodeContentUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationCodeConfigurationUpdateCodeContentUpdate>() {
           @Override
           public void write(JsonWriter out, ApplicationCodeConfigurationUpdateCodeContentUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationCodeConfigurationUpdateCodeContentUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationCodeConfigurationUpdateCodeContentUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationCodeConfigurationUpdateCodeContentUpdate
   * @throws IOException if the JSON string is invalid with respect to ApplicationCodeConfigurationUpdateCodeContentUpdate
   */
  public static ApplicationCodeConfigurationUpdateCodeContentUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationCodeConfigurationUpdateCodeContentUpdate.class);
  }

  /**
   * Convert an instance of ApplicationCodeConfigurationUpdateCodeContentUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

