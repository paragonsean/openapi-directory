/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;For a SQL-based Kinesis Data Analytics application, identifies the Amazon S3 bucket and object that contains the reference data.&lt;/p&gt; &lt;p&gt;A Kinesis Data Analytics application loads reference data only once. If the data changes, you call the &lt;a&gt;UpdateApplication&lt;/a&gt; operation to trigger reloading of data into your application. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3ReferenceDataSource {
  public static final String SERIALIZED_NAME_BUCKET_A_R_N = "BucketARN";
  @SerializedName(SERIALIZED_NAME_BUCKET_A_R_N)
  private String bucketARN;

  public static final String SERIALIZED_NAME_FILE_KEY = "FileKey";
  @SerializedName(SERIALIZED_NAME_FILE_KEY)
  private String fileKey;

  public S3ReferenceDataSource() {
  }

  public S3ReferenceDataSource bucketARN(String bucketARN) {
    this.bucketARN = bucketARN;
    return this;
  }

  /**
   * Get bucketARN
   * @return bucketARN
   */
  @javax.annotation.Nullable
  public String getBucketARN() {
    return bucketARN;
  }

  public void setBucketARN(String bucketARN) {
    this.bucketARN = bucketARN;
  }


  public S3ReferenceDataSource fileKey(String fileKey) {
    this.fileKey = fileKey;
    return this;
  }

  /**
   * Get fileKey
   * @return fileKey
   */
  @javax.annotation.Nullable
  public String getFileKey() {
    return fileKey;
  }

  public void setFileKey(String fileKey) {
    this.fileKey = fileKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3ReferenceDataSource s3ReferenceDataSource = (S3ReferenceDataSource) o;
    return Objects.equals(this.bucketARN, s3ReferenceDataSource.bucketARN) &&
        Objects.equals(this.fileKey, s3ReferenceDataSource.fileKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketARN, fileKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3ReferenceDataSource {\n");
    sb.append("    bucketARN: ").append(toIndentedString(bucketARN)).append("\n");
    sb.append("    fileKey: ").append(toIndentedString(fileKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BucketARN");
    openapiFields.add("FileKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3ReferenceDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3ReferenceDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3ReferenceDataSource is not found in the empty JSON string", S3ReferenceDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3ReferenceDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3ReferenceDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BucketARN`
      if (jsonObj.get("BucketARN") != null && !jsonObj.get("BucketARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketARN"));
      }
      // validate the optional field `FileKey`
      if (jsonObj.get("FileKey") != null && !jsonObj.get("FileKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3ReferenceDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3ReferenceDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3ReferenceDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3ReferenceDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<S3ReferenceDataSource>() {
           @Override
           public void write(JsonWriter out, S3ReferenceDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3ReferenceDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3ReferenceDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3ReferenceDataSource
   * @throws IOException if the JSON string is invalid with respect to S3ReferenceDataSource
   */
  public static S3ReferenceDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3ReferenceDataSource.class);
  }

  /**
   * Convert an instance of S3ReferenceDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

