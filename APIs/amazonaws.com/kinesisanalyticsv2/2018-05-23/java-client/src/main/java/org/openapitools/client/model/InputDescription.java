/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputDescriptionInputParallelism;
import org.openapitools.client.model.InputDescriptionInputProcessingConfigurationDescription;
import org.openapitools.client.model.InputDescriptionInputSchema;
import org.openapitools.client.model.InputDescriptionInputStartingPositionConfiguration;
import org.openapitools.client.model.InputDescriptionKinesisFirehoseInputDescription;
import org.openapitools.client.model.InputDescriptionKinesisStreamsInputDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the application input configuration for a SQL-based Kinesis Data Analytics application. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputDescription {
  public static final String SERIALIZED_NAME_INPUT_ID = "InputId";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private String inputId;

  public static final String SERIALIZED_NAME_NAME_PREFIX = "NamePrefix";
  @SerializedName(SERIALIZED_NAME_NAME_PREFIX)
  private String namePrefix;

  public static final String SERIALIZED_NAME_IN_APP_STREAM_NAMES = "InAppStreamNames";
  @SerializedName(SERIALIZED_NAME_IN_APP_STREAM_NAMES)
  private List inAppStreamNames;

  public static final String SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION_DESCRIPTION = "InputProcessingConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION_DESCRIPTION)
  private InputDescriptionInputProcessingConfigurationDescription inputProcessingConfigurationDescription;

  public static final String SERIALIZED_NAME_KINESIS_STREAMS_INPUT_DESCRIPTION = "KinesisStreamsInputDescription";
  @SerializedName(SERIALIZED_NAME_KINESIS_STREAMS_INPUT_DESCRIPTION)
  private InputDescriptionKinesisStreamsInputDescription kinesisStreamsInputDescription;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_INPUT_DESCRIPTION = "KinesisFirehoseInputDescription";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_INPUT_DESCRIPTION)
  private InputDescriptionKinesisFirehoseInputDescription kinesisFirehoseInputDescription;

  public static final String SERIALIZED_NAME_INPUT_SCHEMA = "InputSchema";
  @SerializedName(SERIALIZED_NAME_INPUT_SCHEMA)
  private InputDescriptionInputSchema inputSchema;

  public static final String SERIALIZED_NAME_INPUT_PARALLELISM = "InputParallelism";
  @SerializedName(SERIALIZED_NAME_INPUT_PARALLELISM)
  private InputDescriptionInputParallelism inputParallelism;

  public static final String SERIALIZED_NAME_INPUT_STARTING_POSITION_CONFIGURATION = "InputStartingPositionConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_STARTING_POSITION_CONFIGURATION)
  private InputDescriptionInputStartingPositionConfiguration inputStartingPositionConfiguration;

  public InputDescription() {
  }

  public InputDescription inputId(String inputId) {
    this.inputId = inputId;
    return this;
  }

  /**
   * Get inputId
   * @return inputId
   */
  @javax.annotation.Nullable
  public String getInputId() {
    return inputId;
  }

  public void setInputId(String inputId) {
    this.inputId = inputId;
  }


  public InputDescription namePrefix(String namePrefix) {
    this.namePrefix = namePrefix;
    return this;
  }

  /**
   * Get namePrefix
   * @return namePrefix
   */
  @javax.annotation.Nullable
  public String getNamePrefix() {
    return namePrefix;
  }

  public void setNamePrefix(String namePrefix) {
    this.namePrefix = namePrefix;
  }


  public InputDescription inAppStreamNames(List inAppStreamNames) {
    this.inAppStreamNames = inAppStreamNames;
    return this;
  }

  /**
   * Get inAppStreamNames
   * @return inAppStreamNames
   */
  @javax.annotation.Nullable
  public List getInAppStreamNames() {
    return inAppStreamNames;
  }

  public void setInAppStreamNames(List inAppStreamNames) {
    this.inAppStreamNames = inAppStreamNames;
  }


  public InputDescription inputProcessingConfigurationDescription(InputDescriptionInputProcessingConfigurationDescription inputProcessingConfigurationDescription) {
    this.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription;
    return this;
  }

  /**
   * Get inputProcessingConfigurationDescription
   * @return inputProcessingConfigurationDescription
   */
  @javax.annotation.Nullable
  public InputDescriptionInputProcessingConfigurationDescription getInputProcessingConfigurationDescription() {
    return inputProcessingConfigurationDescription;
  }

  public void setInputProcessingConfigurationDescription(InputDescriptionInputProcessingConfigurationDescription inputProcessingConfigurationDescription) {
    this.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription;
  }


  public InputDescription kinesisStreamsInputDescription(InputDescriptionKinesisStreamsInputDescription kinesisStreamsInputDescription) {
    this.kinesisStreamsInputDescription = kinesisStreamsInputDescription;
    return this;
  }

  /**
   * Get kinesisStreamsInputDescription
   * @return kinesisStreamsInputDescription
   */
  @javax.annotation.Nullable
  public InputDescriptionKinesisStreamsInputDescription getKinesisStreamsInputDescription() {
    return kinesisStreamsInputDescription;
  }

  public void setKinesisStreamsInputDescription(InputDescriptionKinesisStreamsInputDescription kinesisStreamsInputDescription) {
    this.kinesisStreamsInputDescription = kinesisStreamsInputDescription;
  }


  public InputDescription kinesisFirehoseInputDescription(InputDescriptionKinesisFirehoseInputDescription kinesisFirehoseInputDescription) {
    this.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription;
    return this;
  }

  /**
   * Get kinesisFirehoseInputDescription
   * @return kinesisFirehoseInputDescription
   */
  @javax.annotation.Nullable
  public InputDescriptionKinesisFirehoseInputDescription getKinesisFirehoseInputDescription() {
    return kinesisFirehoseInputDescription;
  }

  public void setKinesisFirehoseInputDescription(InputDescriptionKinesisFirehoseInputDescription kinesisFirehoseInputDescription) {
    this.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription;
  }


  public InputDescription inputSchema(InputDescriptionInputSchema inputSchema) {
    this.inputSchema = inputSchema;
    return this;
  }

  /**
   * Get inputSchema
   * @return inputSchema
   */
  @javax.annotation.Nullable
  public InputDescriptionInputSchema getInputSchema() {
    return inputSchema;
  }

  public void setInputSchema(InputDescriptionInputSchema inputSchema) {
    this.inputSchema = inputSchema;
  }


  public InputDescription inputParallelism(InputDescriptionInputParallelism inputParallelism) {
    this.inputParallelism = inputParallelism;
    return this;
  }

  /**
   * Get inputParallelism
   * @return inputParallelism
   */
  @javax.annotation.Nullable
  public InputDescriptionInputParallelism getInputParallelism() {
    return inputParallelism;
  }

  public void setInputParallelism(InputDescriptionInputParallelism inputParallelism) {
    this.inputParallelism = inputParallelism;
  }


  public InputDescription inputStartingPositionConfiguration(InputDescriptionInputStartingPositionConfiguration inputStartingPositionConfiguration) {
    this.inputStartingPositionConfiguration = inputStartingPositionConfiguration;
    return this;
  }

  /**
   * Get inputStartingPositionConfiguration
   * @return inputStartingPositionConfiguration
   */
  @javax.annotation.Nullable
  public InputDescriptionInputStartingPositionConfiguration getInputStartingPositionConfiguration() {
    return inputStartingPositionConfiguration;
  }

  public void setInputStartingPositionConfiguration(InputDescriptionInputStartingPositionConfiguration inputStartingPositionConfiguration) {
    this.inputStartingPositionConfiguration = inputStartingPositionConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputDescription inputDescription = (InputDescription) o;
    return Objects.equals(this.inputId, inputDescription.inputId) &&
        Objects.equals(this.namePrefix, inputDescription.namePrefix) &&
        Objects.equals(this.inAppStreamNames, inputDescription.inAppStreamNames) &&
        Objects.equals(this.inputProcessingConfigurationDescription, inputDescription.inputProcessingConfigurationDescription) &&
        Objects.equals(this.kinesisStreamsInputDescription, inputDescription.kinesisStreamsInputDescription) &&
        Objects.equals(this.kinesisFirehoseInputDescription, inputDescription.kinesisFirehoseInputDescription) &&
        Objects.equals(this.inputSchema, inputDescription.inputSchema) &&
        Objects.equals(this.inputParallelism, inputDescription.inputParallelism) &&
        Objects.equals(this.inputStartingPositionConfiguration, inputDescription.inputStartingPositionConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputId, namePrefix, inAppStreamNames, inputProcessingConfigurationDescription, kinesisStreamsInputDescription, kinesisFirehoseInputDescription, inputSchema, inputParallelism, inputStartingPositionConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputDescription {\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    namePrefix: ").append(toIndentedString(namePrefix)).append("\n");
    sb.append("    inAppStreamNames: ").append(toIndentedString(inAppStreamNames)).append("\n");
    sb.append("    inputProcessingConfigurationDescription: ").append(toIndentedString(inputProcessingConfigurationDescription)).append("\n");
    sb.append("    kinesisStreamsInputDescription: ").append(toIndentedString(kinesisStreamsInputDescription)).append("\n");
    sb.append("    kinesisFirehoseInputDescription: ").append(toIndentedString(kinesisFirehoseInputDescription)).append("\n");
    sb.append("    inputSchema: ").append(toIndentedString(inputSchema)).append("\n");
    sb.append("    inputParallelism: ").append(toIndentedString(inputParallelism)).append("\n");
    sb.append("    inputStartingPositionConfiguration: ").append(toIndentedString(inputStartingPositionConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputId");
    openapiFields.add("NamePrefix");
    openapiFields.add("InAppStreamNames");
    openapiFields.add("InputProcessingConfigurationDescription");
    openapiFields.add("KinesisStreamsInputDescription");
    openapiFields.add("KinesisFirehoseInputDescription");
    openapiFields.add("InputSchema");
    openapiFields.add("InputParallelism");
    openapiFields.add("InputStartingPositionConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputDescription is not found in the empty JSON string", InputDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InputId`
      if (jsonObj.get("InputId") != null && !jsonObj.get("InputId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputId"));
      }
      // validate the optional field `NamePrefix`
      if (jsonObj.get("NamePrefix") != null && !jsonObj.get("NamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NamePrefix"));
      }
      // validate the optional field `InAppStreamNames`
      if (jsonObj.get("InAppStreamNames") != null && !jsonObj.get("InAppStreamNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InAppStreamNames"));
      }
      // validate the optional field `InputProcessingConfigurationDescription`
      if (jsonObj.get("InputProcessingConfigurationDescription") != null && !jsonObj.get("InputProcessingConfigurationDescription").isJsonNull()) {
        InputDescriptionInputProcessingConfigurationDescription.validateJsonElement(jsonObj.get("InputProcessingConfigurationDescription"));
      }
      // validate the optional field `KinesisStreamsInputDescription`
      if (jsonObj.get("KinesisStreamsInputDescription") != null && !jsonObj.get("KinesisStreamsInputDescription").isJsonNull()) {
        InputDescriptionKinesisStreamsInputDescription.validateJsonElement(jsonObj.get("KinesisStreamsInputDescription"));
      }
      // validate the optional field `KinesisFirehoseInputDescription`
      if (jsonObj.get("KinesisFirehoseInputDescription") != null && !jsonObj.get("KinesisFirehoseInputDescription").isJsonNull()) {
        InputDescriptionKinesisFirehoseInputDescription.validateJsonElement(jsonObj.get("KinesisFirehoseInputDescription"));
      }
      // validate the optional field `InputSchema`
      if (jsonObj.get("InputSchema") != null && !jsonObj.get("InputSchema").isJsonNull()) {
        InputDescriptionInputSchema.validateJsonElement(jsonObj.get("InputSchema"));
      }
      // validate the optional field `InputParallelism`
      if (jsonObj.get("InputParallelism") != null && !jsonObj.get("InputParallelism").isJsonNull()) {
        InputDescriptionInputParallelism.validateJsonElement(jsonObj.get("InputParallelism"));
      }
      // validate the optional field `InputStartingPositionConfiguration`
      if (jsonObj.get("InputStartingPositionConfiguration") != null && !jsonObj.get("InputStartingPositionConfiguration").isJsonNull()) {
        InputDescriptionInputStartingPositionConfiguration.validateJsonElement(jsonObj.get("InputStartingPositionConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<InputDescription>() {
           @Override
           public void write(JsonWriter out, InputDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputDescription
   * @throws IOException if the JSON string is invalid with respect to InputDescription
   */
  public static InputDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputDescription.class);
  }

  /**
   * Convert an instance of InputDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

