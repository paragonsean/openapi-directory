/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlinkRunConfiguration;
import org.openapitools.client.model.RunConfigurationDescriptionApplicationRestoreConfigurationDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationDescriptionRunConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationDescriptionRunConfigurationDescription {
  public static final String SERIALIZED_NAME_APPLICATION_RESTORE_CONFIGURATION_DESCRIPTION = "ApplicationRestoreConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_APPLICATION_RESTORE_CONFIGURATION_DESCRIPTION)
  private RunConfigurationDescriptionApplicationRestoreConfigurationDescription applicationRestoreConfigurationDescription;

  public static final String SERIALIZED_NAME_FLINK_RUN_CONFIGURATION_DESCRIPTION = "FlinkRunConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_FLINK_RUN_CONFIGURATION_DESCRIPTION)
  private FlinkRunConfiguration flinkRunConfigurationDescription;

  public ApplicationConfigurationDescriptionRunConfigurationDescription() {
  }

  public ApplicationConfigurationDescriptionRunConfigurationDescription applicationRestoreConfigurationDescription(RunConfigurationDescriptionApplicationRestoreConfigurationDescription applicationRestoreConfigurationDescription) {
    this.applicationRestoreConfigurationDescription = applicationRestoreConfigurationDescription;
    return this;
  }

  /**
   * Get applicationRestoreConfigurationDescription
   * @return applicationRestoreConfigurationDescription
   */
  @javax.annotation.Nullable
  public RunConfigurationDescriptionApplicationRestoreConfigurationDescription getApplicationRestoreConfigurationDescription() {
    return applicationRestoreConfigurationDescription;
  }

  public void setApplicationRestoreConfigurationDescription(RunConfigurationDescriptionApplicationRestoreConfigurationDescription applicationRestoreConfigurationDescription) {
    this.applicationRestoreConfigurationDescription = applicationRestoreConfigurationDescription;
  }


  public ApplicationConfigurationDescriptionRunConfigurationDescription flinkRunConfigurationDescription(FlinkRunConfiguration flinkRunConfigurationDescription) {
    this.flinkRunConfigurationDescription = flinkRunConfigurationDescription;
    return this;
  }

  /**
   * Get flinkRunConfigurationDescription
   * @return flinkRunConfigurationDescription
   */
  @javax.annotation.Nullable
  public FlinkRunConfiguration getFlinkRunConfigurationDescription() {
    return flinkRunConfigurationDescription;
  }

  public void setFlinkRunConfigurationDescription(FlinkRunConfiguration flinkRunConfigurationDescription) {
    this.flinkRunConfigurationDescription = flinkRunConfigurationDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationDescriptionRunConfigurationDescription applicationConfigurationDescriptionRunConfigurationDescription = (ApplicationConfigurationDescriptionRunConfigurationDescription) o;
    return Objects.equals(this.applicationRestoreConfigurationDescription, applicationConfigurationDescriptionRunConfigurationDescription.applicationRestoreConfigurationDescription) &&
        Objects.equals(this.flinkRunConfigurationDescription, applicationConfigurationDescriptionRunConfigurationDescription.flinkRunConfigurationDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationRestoreConfigurationDescription, flinkRunConfigurationDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationDescriptionRunConfigurationDescription {\n");
    sb.append("    applicationRestoreConfigurationDescription: ").append(toIndentedString(applicationRestoreConfigurationDescription)).append("\n");
    sb.append("    flinkRunConfigurationDescription: ").append(toIndentedString(flinkRunConfigurationDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationRestoreConfigurationDescription");
    openapiFields.add("FlinkRunConfigurationDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationDescriptionRunConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationDescriptionRunConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationDescriptionRunConfigurationDescription is not found in the empty JSON string", ApplicationConfigurationDescriptionRunConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationDescriptionRunConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationDescriptionRunConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationRestoreConfigurationDescription`
      if (jsonObj.get("ApplicationRestoreConfigurationDescription") != null && !jsonObj.get("ApplicationRestoreConfigurationDescription").isJsonNull()) {
        RunConfigurationDescriptionApplicationRestoreConfigurationDescription.validateJsonElement(jsonObj.get("ApplicationRestoreConfigurationDescription"));
      }
      // validate the optional field `FlinkRunConfigurationDescription`
      if (jsonObj.get("FlinkRunConfigurationDescription") != null && !jsonObj.get("FlinkRunConfigurationDescription").isJsonNull()) {
        FlinkRunConfiguration.validateJsonElement(jsonObj.get("FlinkRunConfigurationDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationDescriptionRunConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationDescriptionRunConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationDescriptionRunConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationDescriptionRunConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationDescriptionRunConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationDescriptionRunConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationDescriptionRunConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationDescriptionRunConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationDescriptionRunConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationDescriptionRunConfigurationDescription
   */
  public static ApplicationConfigurationDescriptionRunConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationDescriptionRunConfigurationDescription.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationDescriptionRunConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

