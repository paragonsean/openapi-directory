/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodeContentS3ContentLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies either the application code, or the location of the application code, for a Flink-based Kinesis Data Analytics application. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeContent {
  public static final String SERIALIZED_NAME_TEXT_CONTENT = "TextContent";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTENT)
  private String textContent;

  public static final String SERIALIZED_NAME_ZIP_FILE_CONTENT = "ZipFileContent";
  @SerializedName(SERIALIZED_NAME_ZIP_FILE_CONTENT)
  private String zipFileContent;

  public static final String SERIALIZED_NAME_S3_CONTENT_LOCATION = "S3ContentLocation";
  @SerializedName(SERIALIZED_NAME_S3_CONTENT_LOCATION)
  private CodeContentS3ContentLocation s3ContentLocation;

  public CodeContent() {
  }

  public CodeContent textContent(String textContent) {
    this.textContent = textContent;
    return this;
  }

  /**
   * Get textContent
   * @return textContent
   */
  @javax.annotation.Nullable
  public String getTextContent() {
    return textContent;
  }

  public void setTextContent(String textContent) {
    this.textContent = textContent;
  }


  public CodeContent zipFileContent(String zipFileContent) {
    this.zipFileContent = zipFileContent;
    return this;
  }

  /**
   * Get zipFileContent
   * @return zipFileContent
   */
  @javax.annotation.Nullable
  public String getZipFileContent() {
    return zipFileContent;
  }

  public void setZipFileContent(String zipFileContent) {
    this.zipFileContent = zipFileContent;
  }


  public CodeContent s3ContentLocation(CodeContentS3ContentLocation s3ContentLocation) {
    this.s3ContentLocation = s3ContentLocation;
    return this;
  }

  /**
   * Get s3ContentLocation
   * @return s3ContentLocation
   */
  @javax.annotation.Nullable
  public CodeContentS3ContentLocation getS3ContentLocation() {
    return s3ContentLocation;
  }

  public void setS3ContentLocation(CodeContentS3ContentLocation s3ContentLocation) {
    this.s3ContentLocation = s3ContentLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeContent codeContent = (CodeContent) o;
    return Objects.equals(this.textContent, codeContent.textContent) &&
        Objects.equals(this.zipFileContent, codeContent.zipFileContent) &&
        Objects.equals(this.s3ContentLocation, codeContent.s3ContentLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(textContent, zipFileContent, s3ContentLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeContent {\n");
    sb.append("    textContent: ").append(toIndentedString(textContent)).append("\n");
    sb.append("    zipFileContent: ").append(toIndentedString(zipFileContent)).append("\n");
    sb.append("    s3ContentLocation: ").append(toIndentedString(s3ContentLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TextContent");
    openapiFields.add("ZipFileContent");
    openapiFields.add("S3ContentLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeContent is not found in the empty JSON string", CodeContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TextContent`
      if (jsonObj.get("TextContent") != null && !jsonObj.get("TextContent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TextContent"));
      }
      // validate the optional field `ZipFileContent`
      if (jsonObj.get("ZipFileContent") != null && !jsonObj.get("ZipFileContent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZipFileContent"));
      }
      // validate the optional field `S3ContentLocation`
      if (jsonObj.get("S3ContentLocation") != null && !jsonObj.get("S3ContentLocation").isJsonNull()) {
        CodeContentS3ContentLocation.validateJsonElement(jsonObj.get("S3ContentLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeContent.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeContent>() {
           @Override
           public void write(JsonWriter out, CodeContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeContent
   * @throws IOException if the JSON string is invalid with respect to CodeContent
   */
  public static CodeContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeContent.class);
  }

  /**
   * Convert an instance of CodeContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

