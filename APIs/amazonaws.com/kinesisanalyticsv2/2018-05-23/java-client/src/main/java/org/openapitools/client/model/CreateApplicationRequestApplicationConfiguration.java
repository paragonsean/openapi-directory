/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationConfigurationApplicationCodeConfiguration;
import org.openapitools.client.model.ApplicationConfigurationApplicationSnapshotConfiguration;
import org.openapitools.client.model.ApplicationConfigurationEnvironmentProperties;
import org.openapitools.client.model.ApplicationConfigurationFlinkApplicationConfiguration;
import org.openapitools.client.model.ApplicationConfigurationSqlApplicationConfiguration;
import org.openapitools.client.model.ApplicationConfigurationZeppelinApplicationConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApplicationRequestApplicationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationRequestApplicationConfiguration {
  public static final String SERIALIZED_NAME_SQL_APPLICATION_CONFIGURATION = "SqlApplicationConfiguration";
  @SerializedName(SERIALIZED_NAME_SQL_APPLICATION_CONFIGURATION)
  private ApplicationConfigurationSqlApplicationConfiguration sqlApplicationConfiguration;

  public static final String SERIALIZED_NAME_FLINK_APPLICATION_CONFIGURATION = "FlinkApplicationConfiguration";
  @SerializedName(SERIALIZED_NAME_FLINK_APPLICATION_CONFIGURATION)
  private ApplicationConfigurationFlinkApplicationConfiguration flinkApplicationConfiguration;

  public static final String SERIALIZED_NAME_ENVIRONMENT_PROPERTIES = "EnvironmentProperties";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_PROPERTIES)
  private ApplicationConfigurationEnvironmentProperties environmentProperties;

  public static final String SERIALIZED_NAME_APPLICATION_CODE_CONFIGURATION = "ApplicationCodeConfiguration";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CODE_CONFIGURATION)
  private ApplicationConfigurationApplicationCodeConfiguration applicationCodeConfiguration;

  public static final String SERIALIZED_NAME_APPLICATION_SNAPSHOT_CONFIGURATION = "ApplicationSnapshotConfiguration";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SNAPSHOT_CONFIGURATION)
  private ApplicationConfigurationApplicationSnapshotConfiguration applicationSnapshotConfiguration;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATIONS = "VpcConfigurations";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATIONS)
  private List vpcConfigurations;

  public static final String SERIALIZED_NAME_ZEPPELIN_APPLICATION_CONFIGURATION = "ZeppelinApplicationConfiguration";
  @SerializedName(SERIALIZED_NAME_ZEPPELIN_APPLICATION_CONFIGURATION)
  private ApplicationConfigurationZeppelinApplicationConfiguration zeppelinApplicationConfiguration;

  public CreateApplicationRequestApplicationConfiguration() {
  }

  public CreateApplicationRequestApplicationConfiguration sqlApplicationConfiguration(ApplicationConfigurationSqlApplicationConfiguration sqlApplicationConfiguration) {
    this.sqlApplicationConfiguration = sqlApplicationConfiguration;
    return this;
  }

  /**
   * Get sqlApplicationConfiguration
   * @return sqlApplicationConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationSqlApplicationConfiguration getSqlApplicationConfiguration() {
    return sqlApplicationConfiguration;
  }

  public void setSqlApplicationConfiguration(ApplicationConfigurationSqlApplicationConfiguration sqlApplicationConfiguration) {
    this.sqlApplicationConfiguration = sqlApplicationConfiguration;
  }


  public CreateApplicationRequestApplicationConfiguration flinkApplicationConfiguration(ApplicationConfigurationFlinkApplicationConfiguration flinkApplicationConfiguration) {
    this.flinkApplicationConfiguration = flinkApplicationConfiguration;
    return this;
  }

  /**
   * Get flinkApplicationConfiguration
   * @return flinkApplicationConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationFlinkApplicationConfiguration getFlinkApplicationConfiguration() {
    return flinkApplicationConfiguration;
  }

  public void setFlinkApplicationConfiguration(ApplicationConfigurationFlinkApplicationConfiguration flinkApplicationConfiguration) {
    this.flinkApplicationConfiguration = flinkApplicationConfiguration;
  }


  public CreateApplicationRequestApplicationConfiguration environmentProperties(ApplicationConfigurationEnvironmentProperties environmentProperties) {
    this.environmentProperties = environmentProperties;
    return this;
  }

  /**
   * Get environmentProperties
   * @return environmentProperties
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationEnvironmentProperties getEnvironmentProperties() {
    return environmentProperties;
  }

  public void setEnvironmentProperties(ApplicationConfigurationEnvironmentProperties environmentProperties) {
    this.environmentProperties = environmentProperties;
  }


  public CreateApplicationRequestApplicationConfiguration applicationCodeConfiguration(ApplicationConfigurationApplicationCodeConfiguration applicationCodeConfiguration) {
    this.applicationCodeConfiguration = applicationCodeConfiguration;
    return this;
  }

  /**
   * Get applicationCodeConfiguration
   * @return applicationCodeConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationApplicationCodeConfiguration getApplicationCodeConfiguration() {
    return applicationCodeConfiguration;
  }

  public void setApplicationCodeConfiguration(ApplicationConfigurationApplicationCodeConfiguration applicationCodeConfiguration) {
    this.applicationCodeConfiguration = applicationCodeConfiguration;
  }


  public CreateApplicationRequestApplicationConfiguration applicationSnapshotConfiguration(ApplicationConfigurationApplicationSnapshotConfiguration applicationSnapshotConfiguration) {
    this.applicationSnapshotConfiguration = applicationSnapshotConfiguration;
    return this;
  }

  /**
   * Get applicationSnapshotConfiguration
   * @return applicationSnapshotConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationApplicationSnapshotConfiguration getApplicationSnapshotConfiguration() {
    return applicationSnapshotConfiguration;
  }

  public void setApplicationSnapshotConfiguration(ApplicationConfigurationApplicationSnapshotConfiguration applicationSnapshotConfiguration) {
    this.applicationSnapshotConfiguration = applicationSnapshotConfiguration;
  }


  public CreateApplicationRequestApplicationConfiguration vpcConfigurations(List vpcConfigurations) {
    this.vpcConfigurations = vpcConfigurations;
    return this;
  }

  /**
   * Get vpcConfigurations
   * @return vpcConfigurations
   */
  @javax.annotation.Nullable
  public List getVpcConfigurations() {
    return vpcConfigurations;
  }

  public void setVpcConfigurations(List vpcConfigurations) {
    this.vpcConfigurations = vpcConfigurations;
  }


  public CreateApplicationRequestApplicationConfiguration zeppelinApplicationConfiguration(ApplicationConfigurationZeppelinApplicationConfiguration zeppelinApplicationConfiguration) {
    this.zeppelinApplicationConfiguration = zeppelinApplicationConfiguration;
    return this;
  }

  /**
   * Get zeppelinApplicationConfiguration
   * @return zeppelinApplicationConfiguration
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationZeppelinApplicationConfiguration getZeppelinApplicationConfiguration() {
    return zeppelinApplicationConfiguration;
  }

  public void setZeppelinApplicationConfiguration(ApplicationConfigurationZeppelinApplicationConfiguration zeppelinApplicationConfiguration) {
    this.zeppelinApplicationConfiguration = zeppelinApplicationConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationRequestApplicationConfiguration createApplicationRequestApplicationConfiguration = (CreateApplicationRequestApplicationConfiguration) o;
    return Objects.equals(this.sqlApplicationConfiguration, createApplicationRequestApplicationConfiguration.sqlApplicationConfiguration) &&
        Objects.equals(this.flinkApplicationConfiguration, createApplicationRequestApplicationConfiguration.flinkApplicationConfiguration) &&
        Objects.equals(this.environmentProperties, createApplicationRequestApplicationConfiguration.environmentProperties) &&
        Objects.equals(this.applicationCodeConfiguration, createApplicationRequestApplicationConfiguration.applicationCodeConfiguration) &&
        Objects.equals(this.applicationSnapshotConfiguration, createApplicationRequestApplicationConfiguration.applicationSnapshotConfiguration) &&
        Objects.equals(this.vpcConfigurations, createApplicationRequestApplicationConfiguration.vpcConfigurations) &&
        Objects.equals(this.zeppelinApplicationConfiguration, createApplicationRequestApplicationConfiguration.zeppelinApplicationConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sqlApplicationConfiguration, flinkApplicationConfiguration, environmentProperties, applicationCodeConfiguration, applicationSnapshotConfiguration, vpcConfigurations, zeppelinApplicationConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationRequestApplicationConfiguration {\n");
    sb.append("    sqlApplicationConfiguration: ").append(toIndentedString(sqlApplicationConfiguration)).append("\n");
    sb.append("    flinkApplicationConfiguration: ").append(toIndentedString(flinkApplicationConfiguration)).append("\n");
    sb.append("    environmentProperties: ").append(toIndentedString(environmentProperties)).append("\n");
    sb.append("    applicationCodeConfiguration: ").append(toIndentedString(applicationCodeConfiguration)).append("\n");
    sb.append("    applicationSnapshotConfiguration: ").append(toIndentedString(applicationSnapshotConfiguration)).append("\n");
    sb.append("    vpcConfigurations: ").append(toIndentedString(vpcConfigurations)).append("\n");
    sb.append("    zeppelinApplicationConfiguration: ").append(toIndentedString(zeppelinApplicationConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SqlApplicationConfiguration");
    openapiFields.add("FlinkApplicationConfiguration");
    openapiFields.add("EnvironmentProperties");
    openapiFields.add("ApplicationCodeConfiguration");
    openapiFields.add("ApplicationSnapshotConfiguration");
    openapiFields.add("VpcConfigurations");
    openapiFields.add("ZeppelinApplicationConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationRequestApplicationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationRequestApplicationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationRequestApplicationConfiguration is not found in the empty JSON string", CreateApplicationRequestApplicationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationRequestApplicationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationRequestApplicationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SqlApplicationConfiguration`
      if (jsonObj.get("SqlApplicationConfiguration") != null && !jsonObj.get("SqlApplicationConfiguration").isJsonNull()) {
        ApplicationConfigurationSqlApplicationConfiguration.validateJsonElement(jsonObj.get("SqlApplicationConfiguration"));
      }
      // validate the optional field `FlinkApplicationConfiguration`
      if (jsonObj.get("FlinkApplicationConfiguration") != null && !jsonObj.get("FlinkApplicationConfiguration").isJsonNull()) {
        ApplicationConfigurationFlinkApplicationConfiguration.validateJsonElement(jsonObj.get("FlinkApplicationConfiguration"));
      }
      // validate the optional field `EnvironmentProperties`
      if (jsonObj.get("EnvironmentProperties") != null && !jsonObj.get("EnvironmentProperties").isJsonNull()) {
        ApplicationConfigurationEnvironmentProperties.validateJsonElement(jsonObj.get("EnvironmentProperties"));
      }
      // validate the optional field `ApplicationCodeConfiguration`
      if (jsonObj.get("ApplicationCodeConfiguration") != null && !jsonObj.get("ApplicationCodeConfiguration").isJsonNull()) {
        ApplicationConfigurationApplicationCodeConfiguration.validateJsonElement(jsonObj.get("ApplicationCodeConfiguration"));
      }
      // validate the optional field `ApplicationSnapshotConfiguration`
      if (jsonObj.get("ApplicationSnapshotConfiguration") != null && !jsonObj.get("ApplicationSnapshotConfiguration").isJsonNull()) {
        ApplicationConfigurationApplicationSnapshotConfiguration.validateJsonElement(jsonObj.get("ApplicationSnapshotConfiguration"));
      }
      // validate the optional field `VpcConfigurations`
      if (jsonObj.get("VpcConfigurations") != null && !jsonObj.get("VpcConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcConfigurations"));
      }
      // validate the optional field `ZeppelinApplicationConfiguration`
      if (jsonObj.get("ZeppelinApplicationConfiguration") != null && !jsonObj.get("ZeppelinApplicationConfiguration").isJsonNull()) {
        ApplicationConfigurationZeppelinApplicationConfiguration.validateJsonElement(jsonObj.get("ZeppelinApplicationConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationRequestApplicationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationRequestApplicationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationRequestApplicationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationRequestApplicationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationRequestApplicationConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateApplicationRequestApplicationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationRequestApplicationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationRequestApplicationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationRequestApplicationConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationRequestApplicationConfiguration
   */
  public static CreateApplicationRequestApplicationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationRequestApplicationConfiguration.class);
  }

  /**
   * Convert an instance of CreateApplicationRequestApplicationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

