/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationMode;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.RuntimeEnvironment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides application summary information, including the application Amazon Resource Name (ARN), name, and status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationSummary {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_APPLICATION_A_R_N = "ApplicationARN";
  @SerializedName(SERIALIZED_NAME_APPLICATION_A_R_N)
  private String applicationARN;

  public static final String SERIALIZED_NAME_APPLICATION_STATUS = "ApplicationStatus";
  @SerializedName(SERIALIZED_NAME_APPLICATION_STATUS)
  private ApplicationStatus applicationStatus;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ID = "ApplicationVersionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ID)
  private Integer applicationVersionId;

  public static final String SERIALIZED_NAME_RUNTIME_ENVIRONMENT = "RuntimeEnvironment";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ENVIRONMENT)
  private RuntimeEnvironment runtimeEnvironment;

  public static final String SERIALIZED_NAME_APPLICATION_MODE = "ApplicationMode";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MODE)
  private ApplicationMode applicationMode;

  public ApplicationSummary() {
  }

  public ApplicationSummary applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ApplicationSummary applicationARN(String applicationARN) {
    this.applicationARN = applicationARN;
    return this;
  }

  /**
   * Get applicationARN
   * @return applicationARN
   */
  @javax.annotation.Nonnull
  public String getApplicationARN() {
    return applicationARN;
  }

  public void setApplicationARN(String applicationARN) {
    this.applicationARN = applicationARN;
  }


  public ApplicationSummary applicationStatus(ApplicationStatus applicationStatus) {
    this.applicationStatus = applicationStatus;
    return this;
  }

  /**
   * Get applicationStatus
   * @return applicationStatus
   */
  @javax.annotation.Nonnull
  public ApplicationStatus getApplicationStatus() {
    return applicationStatus;
  }

  public void setApplicationStatus(ApplicationStatus applicationStatus) {
    this.applicationStatus = applicationStatus;
  }


  public ApplicationSummary applicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
    return this;
  }

  /**
   * Get applicationVersionId
   * @return applicationVersionId
   */
  @javax.annotation.Nonnull
  public Integer getApplicationVersionId() {
    return applicationVersionId;
  }

  public void setApplicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
  }


  public ApplicationSummary runtimeEnvironment(RuntimeEnvironment runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
    return this;
  }

  /**
   * Get runtimeEnvironment
   * @return runtimeEnvironment
   */
  @javax.annotation.Nonnull
  public RuntimeEnvironment getRuntimeEnvironment() {
    return runtimeEnvironment;
  }

  public void setRuntimeEnvironment(RuntimeEnvironment runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
  }


  public ApplicationSummary applicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
    return this;
  }

  /**
   * Get applicationMode
   * @return applicationMode
   */
  @javax.annotation.Nullable
  public ApplicationMode getApplicationMode() {
    return applicationMode;
  }

  public void setApplicationMode(ApplicationMode applicationMode) {
    this.applicationMode = applicationMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationSummary applicationSummary = (ApplicationSummary) o;
    return Objects.equals(this.applicationName, applicationSummary.applicationName) &&
        Objects.equals(this.applicationARN, applicationSummary.applicationARN) &&
        Objects.equals(this.applicationStatus, applicationSummary.applicationStatus) &&
        Objects.equals(this.applicationVersionId, applicationSummary.applicationVersionId) &&
        Objects.equals(this.runtimeEnvironment, applicationSummary.runtimeEnvironment) &&
        Objects.equals(this.applicationMode, applicationSummary.applicationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, applicationARN, applicationStatus, applicationVersionId, runtimeEnvironment, applicationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationSummary {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationARN: ").append(toIndentedString(applicationARN)).append("\n");
    sb.append("    applicationStatus: ").append(toIndentedString(applicationStatus)).append("\n");
    sb.append("    applicationVersionId: ").append(toIndentedString(applicationVersionId)).append("\n");
    sb.append("    runtimeEnvironment: ").append(toIndentedString(runtimeEnvironment)).append("\n");
    sb.append("    applicationMode: ").append(toIndentedString(applicationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("ApplicationARN");
    openapiFields.add("ApplicationStatus");
    openapiFields.add("ApplicationVersionId");
    openapiFields.add("RuntimeEnvironment");
    openapiFields.add("ApplicationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("ApplicationARN");
    openapiRequiredFields.add("ApplicationStatus");
    openapiRequiredFields.add("ApplicationVersionId");
    openapiRequiredFields.add("RuntimeEnvironment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationSummary is not found in the empty JSON string", ApplicationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the required field `ApplicationARN`
      String.validateJsonElement(jsonObj.get("ApplicationARN"));
      // validate the required field `ApplicationStatus`
      ApplicationStatus.validateJsonElement(jsonObj.get("ApplicationStatus"));
      // validate the required field `ApplicationVersionId`
      Integer.validateJsonElement(jsonObj.get("ApplicationVersionId"));
      // validate the required field `RuntimeEnvironment`
      RuntimeEnvironment.validateJsonElement(jsonObj.get("RuntimeEnvironment"));
      // validate the optional field `ApplicationMode`
      if (jsonObj.get("ApplicationMode") != null && !jsonObj.get("ApplicationMode").isJsonNull()) {
        ApplicationMode.validateJsonElement(jsonObj.get("ApplicationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationSummary>() {
           @Override
           public void write(JsonWriter out, ApplicationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationSummary
   * @throws IOException if the JSON string is invalid with respect to ApplicationSummary
   */
  public static ApplicationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationSummary.class);
  }

  /**
   * Convert an instance of ApplicationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

