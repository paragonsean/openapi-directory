/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OutputDestinationSchema;
import org.openapitools.client.model.OutputKinesisFirehoseOutput;
import org.openapitools.client.model.OutputKinesisStreamsOutput;
import org.openapitools.client.model.OutputLambdaOutput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddApplicationOutputRequestOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddApplicationOutputRequestOutput {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_KINESIS_STREAMS_OUTPUT = "KinesisStreamsOutput";
  @SerializedName(SERIALIZED_NAME_KINESIS_STREAMS_OUTPUT)
  private OutputKinesisStreamsOutput kinesisStreamsOutput;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_OUTPUT = "KinesisFirehoseOutput";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_OUTPUT)
  private OutputKinesisFirehoseOutput kinesisFirehoseOutput;

  public static final String SERIALIZED_NAME_LAMBDA_OUTPUT = "LambdaOutput";
  @SerializedName(SERIALIZED_NAME_LAMBDA_OUTPUT)
  private OutputLambdaOutput lambdaOutput;

  public static final String SERIALIZED_NAME_DESTINATION_SCHEMA = "DestinationSchema";
  @SerializedName(SERIALIZED_NAME_DESTINATION_SCHEMA)
  private OutputDestinationSchema destinationSchema;

  public AddApplicationOutputRequestOutput() {
  }

  public AddApplicationOutputRequestOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AddApplicationOutputRequestOutput kinesisStreamsOutput(OutputKinesisStreamsOutput kinesisStreamsOutput) {
    this.kinesisStreamsOutput = kinesisStreamsOutput;
    return this;
  }

  /**
   * Get kinesisStreamsOutput
   * @return kinesisStreamsOutput
   */
  @javax.annotation.Nullable
  public OutputKinesisStreamsOutput getKinesisStreamsOutput() {
    return kinesisStreamsOutput;
  }

  public void setKinesisStreamsOutput(OutputKinesisStreamsOutput kinesisStreamsOutput) {
    this.kinesisStreamsOutput = kinesisStreamsOutput;
  }


  public AddApplicationOutputRequestOutput kinesisFirehoseOutput(OutputKinesisFirehoseOutput kinesisFirehoseOutput) {
    this.kinesisFirehoseOutput = kinesisFirehoseOutput;
    return this;
  }

  /**
   * Get kinesisFirehoseOutput
   * @return kinesisFirehoseOutput
   */
  @javax.annotation.Nullable
  public OutputKinesisFirehoseOutput getKinesisFirehoseOutput() {
    return kinesisFirehoseOutput;
  }

  public void setKinesisFirehoseOutput(OutputKinesisFirehoseOutput kinesisFirehoseOutput) {
    this.kinesisFirehoseOutput = kinesisFirehoseOutput;
  }


  public AddApplicationOutputRequestOutput lambdaOutput(OutputLambdaOutput lambdaOutput) {
    this.lambdaOutput = lambdaOutput;
    return this;
  }

  /**
   * Get lambdaOutput
   * @return lambdaOutput
   */
  @javax.annotation.Nullable
  public OutputLambdaOutput getLambdaOutput() {
    return lambdaOutput;
  }

  public void setLambdaOutput(OutputLambdaOutput lambdaOutput) {
    this.lambdaOutput = lambdaOutput;
  }


  public AddApplicationOutputRequestOutput destinationSchema(OutputDestinationSchema destinationSchema) {
    this.destinationSchema = destinationSchema;
    return this;
  }

  /**
   * Get destinationSchema
   * @return destinationSchema
   */
  @javax.annotation.Nonnull
  public OutputDestinationSchema getDestinationSchema() {
    return destinationSchema;
  }

  public void setDestinationSchema(OutputDestinationSchema destinationSchema) {
    this.destinationSchema = destinationSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApplicationOutputRequestOutput addApplicationOutputRequestOutput = (AddApplicationOutputRequestOutput) o;
    return Objects.equals(this.name, addApplicationOutputRequestOutput.name) &&
        Objects.equals(this.kinesisStreamsOutput, addApplicationOutputRequestOutput.kinesisStreamsOutput) &&
        Objects.equals(this.kinesisFirehoseOutput, addApplicationOutputRequestOutput.kinesisFirehoseOutput) &&
        Objects.equals(this.lambdaOutput, addApplicationOutputRequestOutput.lambdaOutput) &&
        Objects.equals(this.destinationSchema, addApplicationOutputRequestOutput.destinationSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, kinesisStreamsOutput, kinesisFirehoseOutput, lambdaOutput, destinationSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApplicationOutputRequestOutput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    kinesisStreamsOutput: ").append(toIndentedString(kinesisStreamsOutput)).append("\n");
    sb.append("    kinesisFirehoseOutput: ").append(toIndentedString(kinesisFirehoseOutput)).append("\n");
    sb.append("    lambdaOutput: ").append(toIndentedString(lambdaOutput)).append("\n");
    sb.append("    destinationSchema: ").append(toIndentedString(destinationSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("KinesisStreamsOutput");
    openapiFields.add("KinesisFirehoseOutput");
    openapiFields.add("LambdaOutput");
    openapiFields.add("DestinationSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("DestinationSchema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddApplicationOutputRequestOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddApplicationOutputRequestOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddApplicationOutputRequestOutput is not found in the empty JSON string", AddApplicationOutputRequestOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddApplicationOutputRequestOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddApplicationOutputRequestOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddApplicationOutputRequestOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `KinesisStreamsOutput`
      if (jsonObj.get("KinesisStreamsOutput") != null && !jsonObj.get("KinesisStreamsOutput").isJsonNull()) {
        OutputKinesisStreamsOutput.validateJsonElement(jsonObj.get("KinesisStreamsOutput"));
      }
      // validate the optional field `KinesisFirehoseOutput`
      if (jsonObj.get("KinesisFirehoseOutput") != null && !jsonObj.get("KinesisFirehoseOutput").isJsonNull()) {
        OutputKinesisFirehoseOutput.validateJsonElement(jsonObj.get("KinesisFirehoseOutput"));
      }
      // validate the optional field `LambdaOutput`
      if (jsonObj.get("LambdaOutput") != null && !jsonObj.get("LambdaOutput").isJsonNull()) {
        OutputLambdaOutput.validateJsonElement(jsonObj.get("LambdaOutput"));
      }
      // validate the required field `DestinationSchema`
      OutputDestinationSchema.validateJsonElement(jsonObj.get("DestinationSchema"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddApplicationOutputRequestOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddApplicationOutputRequestOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddApplicationOutputRequestOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddApplicationOutputRequestOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<AddApplicationOutputRequestOutput>() {
           @Override
           public void write(JsonWriter out, AddApplicationOutputRequestOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddApplicationOutputRequestOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddApplicationOutputRequestOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddApplicationOutputRequestOutput
   * @throws IOException if the JSON string is invalid with respect to AddApplicationOutputRequestOutput
   */
  public static AddApplicationOutputRequestOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddApplicationOutputRequestOutput.class);
  }

  /**
   * Convert an instance of AddApplicationOutputRequestOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

