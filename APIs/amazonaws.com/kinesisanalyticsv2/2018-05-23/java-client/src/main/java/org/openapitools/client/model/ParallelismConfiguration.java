/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously. For more information about parallelism, see &lt;a href&#x3D;\&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/dev/parallel.html\&quot;&gt;Parallel Execution&lt;/a&gt; in the &lt;a href&#x3D;\&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/\&quot;&gt;Apache Flink Documentation&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParallelismConfiguration {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE = "ConfigurationType";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE)
  private ConfigurationType configurationType;

  public static final String SERIALIZED_NAME_PARALLELISM = "Parallelism";
  @SerializedName(SERIALIZED_NAME_PARALLELISM)
  private Integer parallelism;

  public static final String SERIALIZED_NAME_PARALLELISM_PER_K_P_U = "ParallelismPerKPU";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_PER_K_P_U)
  private Integer parallelismPerKPU;

  public static final String SERIALIZED_NAME_AUTO_SCALING_ENABLED = "AutoScalingEnabled";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_ENABLED)
  private Boolean autoScalingEnabled;

  public ParallelismConfiguration() {
  }

  public ParallelismConfiguration configurationType(ConfigurationType configurationType) {
    this.configurationType = configurationType;
    return this;
  }

  /**
   * Get configurationType
   * @return configurationType
   */
  @javax.annotation.Nonnull
  public ConfigurationType getConfigurationType() {
    return configurationType;
  }

  public void setConfigurationType(ConfigurationType configurationType) {
    this.configurationType = configurationType;
  }


  public ParallelismConfiguration parallelism(Integer parallelism) {
    this.parallelism = parallelism;
    return this;
  }

  /**
   * Get parallelism
   * @return parallelism
   */
  @javax.annotation.Nullable
  public Integer getParallelism() {
    return parallelism;
  }

  public void setParallelism(Integer parallelism) {
    this.parallelism = parallelism;
  }


  public ParallelismConfiguration parallelismPerKPU(Integer parallelismPerKPU) {
    this.parallelismPerKPU = parallelismPerKPU;
    return this;
  }

  /**
   * Get parallelismPerKPU
   * @return parallelismPerKPU
   */
  @javax.annotation.Nullable
  public Integer getParallelismPerKPU() {
    return parallelismPerKPU;
  }

  public void setParallelismPerKPU(Integer parallelismPerKPU) {
    this.parallelismPerKPU = parallelismPerKPU;
  }


  public ParallelismConfiguration autoScalingEnabled(Boolean autoScalingEnabled) {
    this.autoScalingEnabled = autoScalingEnabled;
    return this;
  }

  /**
   * Get autoScalingEnabled
   * @return autoScalingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoScalingEnabled() {
    return autoScalingEnabled;
  }

  public void setAutoScalingEnabled(Boolean autoScalingEnabled) {
    this.autoScalingEnabled = autoScalingEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParallelismConfiguration parallelismConfiguration = (ParallelismConfiguration) o;
    return Objects.equals(this.configurationType, parallelismConfiguration.configurationType) &&
        Objects.equals(this.parallelism, parallelismConfiguration.parallelism) &&
        Objects.equals(this.parallelismPerKPU, parallelismConfiguration.parallelismPerKPU) &&
        Objects.equals(this.autoScalingEnabled, parallelismConfiguration.autoScalingEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationType, parallelism, parallelismPerKPU, autoScalingEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParallelismConfiguration {\n");
    sb.append("    configurationType: ").append(toIndentedString(configurationType)).append("\n");
    sb.append("    parallelism: ").append(toIndentedString(parallelism)).append("\n");
    sb.append("    parallelismPerKPU: ").append(toIndentedString(parallelismPerKPU)).append("\n");
    sb.append("    autoScalingEnabled: ").append(toIndentedString(autoScalingEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationType");
    openapiFields.add("Parallelism");
    openapiFields.add("ParallelismPerKPU");
    openapiFields.add("AutoScalingEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ConfigurationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParallelismConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParallelismConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParallelismConfiguration is not found in the empty JSON string", ParallelismConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParallelismConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParallelismConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParallelismConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ConfigurationType`
      ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationType"));
      // validate the optional field `Parallelism`
      if (jsonObj.get("Parallelism") != null && !jsonObj.get("Parallelism").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Parallelism"));
      }
      // validate the optional field `ParallelismPerKPU`
      if (jsonObj.get("ParallelismPerKPU") != null && !jsonObj.get("ParallelismPerKPU").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelismPerKPU"));
      }
      // validate the optional field `AutoScalingEnabled`
      if (jsonObj.get("AutoScalingEnabled") != null && !jsonObj.get("AutoScalingEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoScalingEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParallelismConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParallelismConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParallelismConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParallelismConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ParallelismConfiguration>() {
           @Override
           public void write(JsonWriter out, ParallelismConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParallelismConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParallelismConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParallelismConfiguration
   * @throws IOException if the JSON string is invalid with respect to ParallelismConfiguration
   */
  public static ParallelismConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParallelismConfiguration.class);
  }

  /**
   * Convert an instance of ParallelismConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

