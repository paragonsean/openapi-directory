/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes updates to the input streams, destination streams, and reference data sources for a SQL-based Kinesis Data Analytics application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlApplicationConfigurationUpdate {
  public static final String SERIALIZED_NAME_INPUT_UPDATES = "InputUpdates";
  @SerializedName(SERIALIZED_NAME_INPUT_UPDATES)
  private List inputUpdates;

  public static final String SERIALIZED_NAME_OUTPUT_UPDATES = "OutputUpdates";
  @SerializedName(SERIALIZED_NAME_OUTPUT_UPDATES)
  private List outputUpdates;

  public static final String SERIALIZED_NAME_REFERENCE_DATA_SOURCE_UPDATES = "ReferenceDataSourceUpdates";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DATA_SOURCE_UPDATES)
  private List referenceDataSourceUpdates;

  public SqlApplicationConfigurationUpdate() {
  }

  public SqlApplicationConfigurationUpdate inputUpdates(List inputUpdates) {
    this.inputUpdates = inputUpdates;
    return this;
  }

  /**
   * Get inputUpdates
   * @return inputUpdates
   */
  @javax.annotation.Nullable
  public List getInputUpdates() {
    return inputUpdates;
  }

  public void setInputUpdates(List inputUpdates) {
    this.inputUpdates = inputUpdates;
  }


  public SqlApplicationConfigurationUpdate outputUpdates(List outputUpdates) {
    this.outputUpdates = outputUpdates;
    return this;
  }

  /**
   * Get outputUpdates
   * @return outputUpdates
   */
  @javax.annotation.Nullable
  public List getOutputUpdates() {
    return outputUpdates;
  }

  public void setOutputUpdates(List outputUpdates) {
    this.outputUpdates = outputUpdates;
  }


  public SqlApplicationConfigurationUpdate referenceDataSourceUpdates(List referenceDataSourceUpdates) {
    this.referenceDataSourceUpdates = referenceDataSourceUpdates;
    return this;
  }

  /**
   * Get referenceDataSourceUpdates
   * @return referenceDataSourceUpdates
   */
  @javax.annotation.Nullable
  public List getReferenceDataSourceUpdates() {
    return referenceDataSourceUpdates;
  }

  public void setReferenceDataSourceUpdates(List referenceDataSourceUpdates) {
    this.referenceDataSourceUpdates = referenceDataSourceUpdates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlApplicationConfigurationUpdate sqlApplicationConfigurationUpdate = (SqlApplicationConfigurationUpdate) o;
    return Objects.equals(this.inputUpdates, sqlApplicationConfigurationUpdate.inputUpdates) &&
        Objects.equals(this.outputUpdates, sqlApplicationConfigurationUpdate.outputUpdates) &&
        Objects.equals(this.referenceDataSourceUpdates, sqlApplicationConfigurationUpdate.referenceDataSourceUpdates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputUpdates, outputUpdates, referenceDataSourceUpdates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlApplicationConfigurationUpdate {\n");
    sb.append("    inputUpdates: ").append(toIndentedString(inputUpdates)).append("\n");
    sb.append("    outputUpdates: ").append(toIndentedString(outputUpdates)).append("\n");
    sb.append("    referenceDataSourceUpdates: ").append(toIndentedString(referenceDataSourceUpdates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputUpdates");
    openapiFields.add("OutputUpdates");
    openapiFields.add("ReferenceDataSourceUpdates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlApplicationConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlApplicationConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlApplicationConfigurationUpdate is not found in the empty JSON string", SqlApplicationConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlApplicationConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlApplicationConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InputUpdates`
      if (jsonObj.get("InputUpdates") != null && !jsonObj.get("InputUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputUpdates"));
      }
      // validate the optional field `OutputUpdates`
      if (jsonObj.get("OutputUpdates") != null && !jsonObj.get("OutputUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputUpdates"));
      }
      // validate the optional field `ReferenceDataSourceUpdates`
      if (jsonObj.get("ReferenceDataSourceUpdates") != null && !jsonObj.get("ReferenceDataSourceUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReferenceDataSourceUpdates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlApplicationConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlApplicationConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlApplicationConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlApplicationConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlApplicationConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, SqlApplicationConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlApplicationConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlApplicationConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlApplicationConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to SqlApplicationConfigurationUpdate
   */
  public static SqlApplicationConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlApplicationConfigurationUpdate.class);
  }

  /**
   * Convert an instance of SqlApplicationConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

