/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ZeppelinApplicationConfigurationCatalogConfiguration;
import org.openapitools.client.model.ZeppelinApplicationConfigurationDeployAsApplicationConfiguration;
import org.openapitools.client.model.ZeppelinApplicationConfigurationMonitoringConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationZeppelinApplicationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationZeppelinApplicationConfiguration {
  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATION = "MonitoringConfiguration";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATION)
  private ZeppelinApplicationConfigurationMonitoringConfiguration monitoringConfiguration;

  public static final String SERIALIZED_NAME_CATALOG_CONFIGURATION = "CatalogConfiguration";
  @SerializedName(SERIALIZED_NAME_CATALOG_CONFIGURATION)
  private ZeppelinApplicationConfigurationCatalogConfiguration catalogConfiguration;

  public static final String SERIALIZED_NAME_DEPLOY_AS_APPLICATION_CONFIGURATION = "DeployAsApplicationConfiguration";
  @SerializedName(SERIALIZED_NAME_DEPLOY_AS_APPLICATION_CONFIGURATION)
  private ZeppelinApplicationConfigurationDeployAsApplicationConfiguration deployAsApplicationConfiguration;

  public static final String SERIALIZED_NAME_CUSTOM_ARTIFACTS_CONFIGURATION = "CustomArtifactsConfiguration";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ARTIFACTS_CONFIGURATION)
  private List customArtifactsConfiguration;

  public ApplicationConfigurationZeppelinApplicationConfiguration() {
  }

  public ApplicationConfigurationZeppelinApplicationConfiguration monitoringConfiguration(ZeppelinApplicationConfigurationMonitoringConfiguration monitoringConfiguration) {
    this.monitoringConfiguration = monitoringConfiguration;
    return this;
  }

  /**
   * Get monitoringConfiguration
   * @return monitoringConfiguration
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationMonitoringConfiguration getMonitoringConfiguration() {
    return monitoringConfiguration;
  }

  public void setMonitoringConfiguration(ZeppelinApplicationConfigurationMonitoringConfiguration monitoringConfiguration) {
    this.monitoringConfiguration = monitoringConfiguration;
  }


  public ApplicationConfigurationZeppelinApplicationConfiguration catalogConfiguration(ZeppelinApplicationConfigurationCatalogConfiguration catalogConfiguration) {
    this.catalogConfiguration = catalogConfiguration;
    return this;
  }

  /**
   * Get catalogConfiguration
   * @return catalogConfiguration
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationCatalogConfiguration getCatalogConfiguration() {
    return catalogConfiguration;
  }

  public void setCatalogConfiguration(ZeppelinApplicationConfigurationCatalogConfiguration catalogConfiguration) {
    this.catalogConfiguration = catalogConfiguration;
  }


  public ApplicationConfigurationZeppelinApplicationConfiguration deployAsApplicationConfiguration(ZeppelinApplicationConfigurationDeployAsApplicationConfiguration deployAsApplicationConfiguration) {
    this.deployAsApplicationConfiguration = deployAsApplicationConfiguration;
    return this;
  }

  /**
   * Get deployAsApplicationConfiguration
   * @return deployAsApplicationConfiguration
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationDeployAsApplicationConfiguration getDeployAsApplicationConfiguration() {
    return deployAsApplicationConfiguration;
  }

  public void setDeployAsApplicationConfiguration(ZeppelinApplicationConfigurationDeployAsApplicationConfiguration deployAsApplicationConfiguration) {
    this.deployAsApplicationConfiguration = deployAsApplicationConfiguration;
  }


  public ApplicationConfigurationZeppelinApplicationConfiguration customArtifactsConfiguration(List customArtifactsConfiguration) {
    this.customArtifactsConfiguration = customArtifactsConfiguration;
    return this;
  }

  /**
   * Get customArtifactsConfiguration
   * @return customArtifactsConfiguration
   */
  @javax.annotation.Nullable
  public List getCustomArtifactsConfiguration() {
    return customArtifactsConfiguration;
  }

  public void setCustomArtifactsConfiguration(List customArtifactsConfiguration) {
    this.customArtifactsConfiguration = customArtifactsConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationZeppelinApplicationConfiguration applicationConfigurationZeppelinApplicationConfiguration = (ApplicationConfigurationZeppelinApplicationConfiguration) o;
    return Objects.equals(this.monitoringConfiguration, applicationConfigurationZeppelinApplicationConfiguration.monitoringConfiguration) &&
        Objects.equals(this.catalogConfiguration, applicationConfigurationZeppelinApplicationConfiguration.catalogConfiguration) &&
        Objects.equals(this.deployAsApplicationConfiguration, applicationConfigurationZeppelinApplicationConfiguration.deployAsApplicationConfiguration) &&
        Objects.equals(this.customArtifactsConfiguration, applicationConfigurationZeppelinApplicationConfiguration.customArtifactsConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitoringConfiguration, catalogConfiguration, deployAsApplicationConfiguration, customArtifactsConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationZeppelinApplicationConfiguration {\n");
    sb.append("    monitoringConfiguration: ").append(toIndentedString(monitoringConfiguration)).append("\n");
    sb.append("    catalogConfiguration: ").append(toIndentedString(catalogConfiguration)).append("\n");
    sb.append("    deployAsApplicationConfiguration: ").append(toIndentedString(deployAsApplicationConfiguration)).append("\n");
    sb.append("    customArtifactsConfiguration: ").append(toIndentedString(customArtifactsConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitoringConfiguration");
    openapiFields.add("CatalogConfiguration");
    openapiFields.add("DeployAsApplicationConfiguration");
    openapiFields.add("CustomArtifactsConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationZeppelinApplicationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationZeppelinApplicationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationZeppelinApplicationConfiguration is not found in the empty JSON string", ApplicationConfigurationZeppelinApplicationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationZeppelinApplicationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationZeppelinApplicationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MonitoringConfiguration`
      if (jsonObj.get("MonitoringConfiguration") != null && !jsonObj.get("MonitoringConfiguration").isJsonNull()) {
        ZeppelinApplicationConfigurationMonitoringConfiguration.validateJsonElement(jsonObj.get("MonitoringConfiguration"));
      }
      // validate the optional field `CatalogConfiguration`
      if (jsonObj.get("CatalogConfiguration") != null && !jsonObj.get("CatalogConfiguration").isJsonNull()) {
        ZeppelinApplicationConfigurationCatalogConfiguration.validateJsonElement(jsonObj.get("CatalogConfiguration"));
      }
      // validate the optional field `DeployAsApplicationConfiguration`
      if (jsonObj.get("DeployAsApplicationConfiguration") != null && !jsonObj.get("DeployAsApplicationConfiguration").isJsonNull()) {
        ZeppelinApplicationConfigurationDeployAsApplicationConfiguration.validateJsonElement(jsonObj.get("DeployAsApplicationConfiguration"));
      }
      // validate the optional field `CustomArtifactsConfiguration`
      if (jsonObj.get("CustomArtifactsConfiguration") != null && !jsonObj.get("CustomArtifactsConfiguration").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomArtifactsConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationZeppelinApplicationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationZeppelinApplicationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationZeppelinApplicationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationZeppelinApplicationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationZeppelinApplicationConfiguration>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationZeppelinApplicationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationZeppelinApplicationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationZeppelinApplicationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationZeppelinApplicationConfiguration
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationZeppelinApplicationConfiguration
   */
  public static ApplicationConfigurationZeppelinApplicationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationZeppelinApplicationConfiguration.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationZeppelinApplicationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

