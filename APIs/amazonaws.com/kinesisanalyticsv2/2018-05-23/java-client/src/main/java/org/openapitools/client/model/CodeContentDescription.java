/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodeContentDescriptionS3ApplicationCodeLocationDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes details about the code of a Kinesis Data Analytics application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeContentDescription {
  public static final String SERIALIZED_NAME_TEXT_CONTENT = "TextContent";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTENT)
  private String textContent;

  public static final String SERIALIZED_NAME_CODE_M_D5 = "CodeMD5";
  @SerializedName(SERIALIZED_NAME_CODE_M_D5)
  private String codeMD5;

  public static final String SERIALIZED_NAME_CODE_SIZE = "CodeSize";
  @SerializedName(SERIALIZED_NAME_CODE_SIZE)
  private Integer codeSize;

  public static final String SERIALIZED_NAME_S3_APPLICATION_CODE_LOCATION_DESCRIPTION = "S3ApplicationCodeLocationDescription";
  @SerializedName(SERIALIZED_NAME_S3_APPLICATION_CODE_LOCATION_DESCRIPTION)
  private CodeContentDescriptionS3ApplicationCodeLocationDescription s3ApplicationCodeLocationDescription;

  public CodeContentDescription() {
  }

  public CodeContentDescription textContent(String textContent) {
    this.textContent = textContent;
    return this;
  }

  /**
   * Get textContent
   * @return textContent
   */
  @javax.annotation.Nullable
  public String getTextContent() {
    return textContent;
  }

  public void setTextContent(String textContent) {
    this.textContent = textContent;
  }


  public CodeContentDescription codeMD5(String codeMD5) {
    this.codeMD5 = codeMD5;
    return this;
  }

  /**
   * Get codeMD5
   * @return codeMD5
   */
  @javax.annotation.Nullable
  public String getCodeMD5() {
    return codeMD5;
  }

  public void setCodeMD5(String codeMD5) {
    this.codeMD5 = codeMD5;
  }


  public CodeContentDescription codeSize(Integer codeSize) {
    this.codeSize = codeSize;
    return this;
  }

  /**
   * Get codeSize
   * @return codeSize
   */
  @javax.annotation.Nullable
  public Integer getCodeSize() {
    return codeSize;
  }

  public void setCodeSize(Integer codeSize) {
    this.codeSize = codeSize;
  }


  public CodeContentDescription s3ApplicationCodeLocationDescription(CodeContentDescriptionS3ApplicationCodeLocationDescription s3ApplicationCodeLocationDescription) {
    this.s3ApplicationCodeLocationDescription = s3ApplicationCodeLocationDescription;
    return this;
  }

  /**
   * Get s3ApplicationCodeLocationDescription
   * @return s3ApplicationCodeLocationDescription
   */
  @javax.annotation.Nullable
  public CodeContentDescriptionS3ApplicationCodeLocationDescription getS3ApplicationCodeLocationDescription() {
    return s3ApplicationCodeLocationDescription;
  }

  public void setS3ApplicationCodeLocationDescription(CodeContentDescriptionS3ApplicationCodeLocationDescription s3ApplicationCodeLocationDescription) {
    this.s3ApplicationCodeLocationDescription = s3ApplicationCodeLocationDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeContentDescription codeContentDescription = (CodeContentDescription) o;
    return Objects.equals(this.textContent, codeContentDescription.textContent) &&
        Objects.equals(this.codeMD5, codeContentDescription.codeMD5) &&
        Objects.equals(this.codeSize, codeContentDescription.codeSize) &&
        Objects.equals(this.s3ApplicationCodeLocationDescription, codeContentDescription.s3ApplicationCodeLocationDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(textContent, codeMD5, codeSize, s3ApplicationCodeLocationDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeContentDescription {\n");
    sb.append("    textContent: ").append(toIndentedString(textContent)).append("\n");
    sb.append("    codeMD5: ").append(toIndentedString(codeMD5)).append("\n");
    sb.append("    codeSize: ").append(toIndentedString(codeSize)).append("\n");
    sb.append("    s3ApplicationCodeLocationDescription: ").append(toIndentedString(s3ApplicationCodeLocationDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TextContent");
    openapiFields.add("CodeMD5");
    openapiFields.add("CodeSize");
    openapiFields.add("S3ApplicationCodeLocationDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeContentDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeContentDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeContentDescription is not found in the empty JSON string", CodeContentDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeContentDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeContentDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TextContent`
      if (jsonObj.get("TextContent") != null && !jsonObj.get("TextContent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TextContent"));
      }
      // validate the optional field `CodeMD5`
      if (jsonObj.get("CodeMD5") != null && !jsonObj.get("CodeMD5").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CodeMD5"));
      }
      // validate the optional field `CodeSize`
      if (jsonObj.get("CodeSize") != null && !jsonObj.get("CodeSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CodeSize"));
      }
      // validate the optional field `S3ApplicationCodeLocationDescription`
      if (jsonObj.get("S3ApplicationCodeLocationDescription") != null && !jsonObj.get("S3ApplicationCodeLocationDescription").isJsonNull()) {
        CodeContentDescriptionS3ApplicationCodeLocationDescription.validateJsonElement(jsonObj.get("S3ApplicationCodeLocationDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeContentDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeContentDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeContentDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeContentDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeContentDescription>() {
           @Override
           public void write(JsonWriter out, CodeContentDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeContentDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeContentDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeContentDescription
   * @throws IOException if the JSON string is invalid with respect to CodeContentDescription
   */
  public static CodeContentDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeContentDescription.class);
  }

  /**
   * Convert an instance of CodeContentDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

