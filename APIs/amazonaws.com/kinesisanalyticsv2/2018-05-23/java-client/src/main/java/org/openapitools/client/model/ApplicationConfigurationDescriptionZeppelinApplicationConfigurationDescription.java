/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ZeppelinApplicationConfigurationDescriptionCatalogConfigurationDescription;
import org.openapitools.client.model.ZeppelinApplicationConfigurationDescriptionDeployAsApplicationConfigurationDescription;
import org.openapitools.client.model.ZeppelinApplicationConfigurationDescriptionMonitoringConfigurationDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription {
  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATION_DESCRIPTION = "MonitoringConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATION_DESCRIPTION)
  private ZeppelinApplicationConfigurationDescriptionMonitoringConfigurationDescription monitoringConfigurationDescription;

  public static final String SERIALIZED_NAME_CATALOG_CONFIGURATION_DESCRIPTION = "CatalogConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_CATALOG_CONFIGURATION_DESCRIPTION)
  private ZeppelinApplicationConfigurationDescriptionCatalogConfigurationDescription catalogConfigurationDescription;

  public static final String SERIALIZED_NAME_DEPLOY_AS_APPLICATION_CONFIGURATION_DESCRIPTION = "DeployAsApplicationConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_DEPLOY_AS_APPLICATION_CONFIGURATION_DESCRIPTION)
  private ZeppelinApplicationConfigurationDescriptionDeployAsApplicationConfigurationDescription deployAsApplicationConfigurationDescription;

  public static final String SERIALIZED_NAME_CUSTOM_ARTIFACTS_CONFIGURATION_DESCRIPTION = "CustomArtifactsConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ARTIFACTS_CONFIGURATION_DESCRIPTION)
  private List customArtifactsConfigurationDescription;

  public ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription() {
  }

  public ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription monitoringConfigurationDescription(ZeppelinApplicationConfigurationDescriptionMonitoringConfigurationDescription monitoringConfigurationDescription) {
    this.monitoringConfigurationDescription = monitoringConfigurationDescription;
    return this;
  }

  /**
   * Get monitoringConfigurationDescription
   * @return monitoringConfigurationDescription
   */
  @javax.annotation.Nonnull
  public ZeppelinApplicationConfigurationDescriptionMonitoringConfigurationDescription getMonitoringConfigurationDescription() {
    return monitoringConfigurationDescription;
  }

  public void setMonitoringConfigurationDescription(ZeppelinApplicationConfigurationDescriptionMonitoringConfigurationDescription monitoringConfigurationDescription) {
    this.monitoringConfigurationDescription = monitoringConfigurationDescription;
  }


  public ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription catalogConfigurationDescription(ZeppelinApplicationConfigurationDescriptionCatalogConfigurationDescription catalogConfigurationDescription) {
    this.catalogConfigurationDescription = catalogConfigurationDescription;
    return this;
  }

  /**
   * Get catalogConfigurationDescription
   * @return catalogConfigurationDescription
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationDescriptionCatalogConfigurationDescription getCatalogConfigurationDescription() {
    return catalogConfigurationDescription;
  }

  public void setCatalogConfigurationDescription(ZeppelinApplicationConfigurationDescriptionCatalogConfigurationDescription catalogConfigurationDescription) {
    this.catalogConfigurationDescription = catalogConfigurationDescription;
  }


  public ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription deployAsApplicationConfigurationDescription(ZeppelinApplicationConfigurationDescriptionDeployAsApplicationConfigurationDescription deployAsApplicationConfigurationDescription) {
    this.deployAsApplicationConfigurationDescription = deployAsApplicationConfigurationDescription;
    return this;
  }

  /**
   * Get deployAsApplicationConfigurationDescription
   * @return deployAsApplicationConfigurationDescription
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationDescriptionDeployAsApplicationConfigurationDescription getDeployAsApplicationConfigurationDescription() {
    return deployAsApplicationConfigurationDescription;
  }

  public void setDeployAsApplicationConfigurationDescription(ZeppelinApplicationConfigurationDescriptionDeployAsApplicationConfigurationDescription deployAsApplicationConfigurationDescription) {
    this.deployAsApplicationConfigurationDescription = deployAsApplicationConfigurationDescription;
  }


  public ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription customArtifactsConfigurationDescription(List customArtifactsConfigurationDescription) {
    this.customArtifactsConfigurationDescription = customArtifactsConfigurationDescription;
    return this;
  }

  /**
   * Get customArtifactsConfigurationDescription
   * @return customArtifactsConfigurationDescription
   */
  @javax.annotation.Nullable
  public List getCustomArtifactsConfigurationDescription() {
    return customArtifactsConfigurationDescription;
  }

  public void setCustomArtifactsConfigurationDescription(List customArtifactsConfigurationDescription) {
    this.customArtifactsConfigurationDescription = customArtifactsConfigurationDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription applicationConfigurationDescriptionZeppelinApplicationConfigurationDescription = (ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription) o;
    return Objects.equals(this.monitoringConfigurationDescription, applicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.monitoringConfigurationDescription) &&
        Objects.equals(this.catalogConfigurationDescription, applicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.catalogConfigurationDescription) &&
        Objects.equals(this.deployAsApplicationConfigurationDescription, applicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.deployAsApplicationConfigurationDescription) &&
        Objects.equals(this.customArtifactsConfigurationDescription, applicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.customArtifactsConfigurationDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitoringConfigurationDescription, catalogConfigurationDescription, deployAsApplicationConfigurationDescription, customArtifactsConfigurationDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription {\n");
    sb.append("    monitoringConfigurationDescription: ").append(toIndentedString(monitoringConfigurationDescription)).append("\n");
    sb.append("    catalogConfigurationDescription: ").append(toIndentedString(catalogConfigurationDescription)).append("\n");
    sb.append("    deployAsApplicationConfigurationDescription: ").append(toIndentedString(deployAsApplicationConfigurationDescription)).append("\n");
    sb.append("    customArtifactsConfigurationDescription: ").append(toIndentedString(customArtifactsConfigurationDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitoringConfigurationDescription");
    openapiFields.add("CatalogConfigurationDescription");
    openapiFields.add("DeployAsApplicationConfigurationDescription");
    openapiFields.add("CustomArtifactsConfigurationDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MonitoringConfigurationDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription is not found in the empty JSON string", ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MonitoringConfigurationDescription`
      ZeppelinApplicationConfigurationDescriptionMonitoringConfigurationDescription.validateJsonElement(jsonObj.get("MonitoringConfigurationDescription"));
      // validate the optional field `CatalogConfigurationDescription`
      if (jsonObj.get("CatalogConfigurationDescription") != null && !jsonObj.get("CatalogConfigurationDescription").isJsonNull()) {
        ZeppelinApplicationConfigurationDescriptionCatalogConfigurationDescription.validateJsonElement(jsonObj.get("CatalogConfigurationDescription"));
      }
      // validate the optional field `DeployAsApplicationConfigurationDescription`
      if (jsonObj.get("DeployAsApplicationConfigurationDescription") != null && !jsonObj.get("DeployAsApplicationConfigurationDescription").isJsonNull()) {
        ZeppelinApplicationConfigurationDescriptionDeployAsApplicationConfigurationDescription.validateJsonElement(jsonObj.get("DeployAsApplicationConfigurationDescription"));
      }
      // validate the optional field `CustomArtifactsConfigurationDescription`
      if (jsonObj.get("CustomArtifactsConfigurationDescription") != null && !jsonObj.get("CustomArtifactsConfigurationDescription").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomArtifactsConfigurationDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription
   */
  public static ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationDescriptionZeppelinApplicationConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

