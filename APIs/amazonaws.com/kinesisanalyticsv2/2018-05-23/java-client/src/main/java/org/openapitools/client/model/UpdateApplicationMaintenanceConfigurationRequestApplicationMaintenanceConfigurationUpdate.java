/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate {
  public static final String SERIALIZED_NAME_APPLICATION_MAINTENANCE_WINDOW_START_TIME_UPDATE = "ApplicationMaintenanceWindowStartTimeUpdate";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MAINTENANCE_WINDOW_START_TIME_UPDATE)
  private String applicationMaintenanceWindowStartTimeUpdate;

  public UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate() {
  }

  public UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate applicationMaintenanceWindowStartTimeUpdate(String applicationMaintenanceWindowStartTimeUpdate) {
    this.applicationMaintenanceWindowStartTimeUpdate = applicationMaintenanceWindowStartTimeUpdate;
    return this;
  }

  /**
   * Get applicationMaintenanceWindowStartTimeUpdate
   * @return applicationMaintenanceWindowStartTimeUpdate
   */
  @javax.annotation.Nonnull
  public String getApplicationMaintenanceWindowStartTimeUpdate() {
    return applicationMaintenanceWindowStartTimeUpdate;
  }

  public void setApplicationMaintenanceWindowStartTimeUpdate(String applicationMaintenanceWindowStartTimeUpdate) {
    this.applicationMaintenanceWindowStartTimeUpdate = applicationMaintenanceWindowStartTimeUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate updateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate = (UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate) o;
    return Objects.equals(this.applicationMaintenanceWindowStartTimeUpdate, updateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.applicationMaintenanceWindowStartTimeUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationMaintenanceWindowStartTimeUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate {\n");
    sb.append("    applicationMaintenanceWindowStartTimeUpdate: ").append(toIndentedString(applicationMaintenanceWindowStartTimeUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationMaintenanceWindowStartTimeUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationMaintenanceWindowStartTimeUpdate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate is not found in the empty JSON string", UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationMaintenanceWindowStartTimeUpdate`
      String.validateJsonElement(jsonObj.get("ApplicationMaintenanceWindowStartTimeUpdate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate
   */
  public static UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate.class);
  }

  /**
   * Convert an instance of UpdateApplicationMaintenanceConfigurationRequestApplicationMaintenanceConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

