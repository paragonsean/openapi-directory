/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SourceSchemaRecordFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceSchema {
  public static final String SERIALIZED_NAME_RECORD_FORMAT = "RecordFormat";
  @SerializedName(SERIALIZED_NAME_RECORD_FORMAT)
  private SourceSchemaRecordFormat recordFormat;

  public static final String SERIALIZED_NAME_RECORD_ENCODING = "RecordEncoding";
  @SerializedName(SERIALIZED_NAME_RECORD_ENCODING)
  private String recordEncoding;

  public static final String SERIALIZED_NAME_RECORD_COLUMNS = "RecordColumns";
  @SerializedName(SERIALIZED_NAME_RECORD_COLUMNS)
  private List recordColumns;

  public SourceSchema() {
  }

  public SourceSchema recordFormat(SourceSchemaRecordFormat recordFormat) {
    this.recordFormat = recordFormat;
    return this;
  }

  /**
   * Get recordFormat
   * @return recordFormat
   */
  @javax.annotation.Nonnull
  public SourceSchemaRecordFormat getRecordFormat() {
    return recordFormat;
  }

  public void setRecordFormat(SourceSchemaRecordFormat recordFormat) {
    this.recordFormat = recordFormat;
  }


  public SourceSchema recordEncoding(String recordEncoding) {
    this.recordEncoding = recordEncoding;
    return this;
  }

  /**
   * Get recordEncoding
   * @return recordEncoding
   */
  @javax.annotation.Nullable
  public String getRecordEncoding() {
    return recordEncoding;
  }

  public void setRecordEncoding(String recordEncoding) {
    this.recordEncoding = recordEncoding;
  }


  public SourceSchema recordColumns(List recordColumns) {
    this.recordColumns = recordColumns;
    return this;
  }

  /**
   * Get recordColumns
   * @return recordColumns
   */
  @javax.annotation.Nonnull
  public List getRecordColumns() {
    return recordColumns;
  }

  public void setRecordColumns(List recordColumns) {
    this.recordColumns = recordColumns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceSchema sourceSchema = (SourceSchema) o;
    return Objects.equals(this.recordFormat, sourceSchema.recordFormat) &&
        Objects.equals(this.recordEncoding, sourceSchema.recordEncoding) &&
        Objects.equals(this.recordColumns, sourceSchema.recordColumns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordFormat, recordEncoding, recordColumns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceSchema {\n");
    sb.append("    recordFormat: ").append(toIndentedString(recordFormat)).append("\n");
    sb.append("    recordEncoding: ").append(toIndentedString(recordEncoding)).append("\n");
    sb.append("    recordColumns: ").append(toIndentedString(recordColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RecordFormat");
    openapiFields.add("RecordEncoding");
    openapiFields.add("RecordColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RecordFormat");
    openapiRequiredFields.add("RecordColumns");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceSchema is not found in the empty JSON string", SourceSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RecordFormat`
      SourceSchemaRecordFormat.validateJsonElement(jsonObj.get("RecordFormat"));
      // validate the optional field `RecordEncoding`
      if (jsonObj.get("RecordEncoding") != null && !jsonObj.get("RecordEncoding").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecordEncoding"));
      }
      // validate the required field `RecordColumns`
      List.validateJsonElement(jsonObj.get("RecordColumns"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceSchema>() {
           @Override
           public void write(JsonWriter out, SourceSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceSchema
   * @throws IOException if the JSON string is invalid with respect to SourceSchema
   */
  public static SourceSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceSchema.class);
  }

  /**
   * Convert an instance of SourceSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

