/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationCodeConfigurationUpdateCodeContentUpdate;
import org.openapitools.client.model.CodeContentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate {
  public static final String SERIALIZED_NAME_CODE_CONTENT_TYPE_UPDATE = "CodeContentTypeUpdate";
  @SerializedName(SERIALIZED_NAME_CODE_CONTENT_TYPE_UPDATE)
  private CodeContentType codeContentTypeUpdate;

  public static final String SERIALIZED_NAME_CODE_CONTENT_UPDATE = "CodeContentUpdate";
  @SerializedName(SERIALIZED_NAME_CODE_CONTENT_UPDATE)
  private ApplicationCodeConfigurationUpdateCodeContentUpdate codeContentUpdate;

  public ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate() {
  }

  public ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate codeContentTypeUpdate(CodeContentType codeContentTypeUpdate) {
    this.codeContentTypeUpdate = codeContentTypeUpdate;
    return this;
  }

  /**
   * Get codeContentTypeUpdate
   * @return codeContentTypeUpdate
   */
  @javax.annotation.Nullable
  public CodeContentType getCodeContentTypeUpdate() {
    return codeContentTypeUpdate;
  }

  public void setCodeContentTypeUpdate(CodeContentType codeContentTypeUpdate) {
    this.codeContentTypeUpdate = codeContentTypeUpdate;
  }


  public ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate codeContentUpdate(ApplicationCodeConfigurationUpdateCodeContentUpdate codeContentUpdate) {
    this.codeContentUpdate = codeContentUpdate;
    return this;
  }

  /**
   * Get codeContentUpdate
   * @return codeContentUpdate
   */
  @javax.annotation.Nullable
  public ApplicationCodeConfigurationUpdateCodeContentUpdate getCodeContentUpdate() {
    return codeContentUpdate;
  }

  public void setCodeContentUpdate(ApplicationCodeConfigurationUpdateCodeContentUpdate codeContentUpdate) {
    this.codeContentUpdate = codeContentUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate applicationConfigurationUpdateApplicationCodeConfigurationUpdate = (ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate) o;
    return Objects.equals(this.codeContentTypeUpdate, applicationConfigurationUpdateApplicationCodeConfigurationUpdate.codeContentTypeUpdate) &&
        Objects.equals(this.codeContentUpdate, applicationConfigurationUpdateApplicationCodeConfigurationUpdate.codeContentUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeContentTypeUpdate, codeContentUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate {\n");
    sb.append("    codeContentTypeUpdate: ").append(toIndentedString(codeContentTypeUpdate)).append("\n");
    sb.append("    codeContentUpdate: ").append(toIndentedString(codeContentUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeContentTypeUpdate");
    openapiFields.add("CodeContentUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate is not found in the empty JSON string", ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodeContentTypeUpdate`
      if (jsonObj.get("CodeContentTypeUpdate") != null && !jsonObj.get("CodeContentTypeUpdate").isJsonNull()) {
        CodeContentType.validateJsonElement(jsonObj.get("CodeContentTypeUpdate"));
      }
      // validate the optional field `CodeContentUpdate`
      if (jsonObj.get("CodeContentUpdate") != null && !jsonObj.get("CodeContentUpdate").isJsonNull()) {
        ApplicationCodeConfigurationUpdateCodeContentUpdate.validateJsonElement(jsonObj.get("CodeContentUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate
   */
  public static ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

