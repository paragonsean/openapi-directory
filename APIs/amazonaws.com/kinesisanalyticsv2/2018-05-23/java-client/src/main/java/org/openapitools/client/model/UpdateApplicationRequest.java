/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateApplicationRequestApplicationConfigurationUpdate;
import org.openapitools.client.model.UpdateApplicationRequestRunConfigurationUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationRequest {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_CURRENT_APPLICATION_VERSION_ID = "CurrentApplicationVersionId";
  @SerializedName(SERIALIZED_NAME_CURRENT_APPLICATION_VERSION_ID)
  private Integer currentApplicationVersionId;

  public static final String SERIALIZED_NAME_APPLICATION_CONFIGURATION_UPDATE = "ApplicationConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CONFIGURATION_UPDATE)
  private UpdateApplicationRequestApplicationConfigurationUpdate applicationConfigurationUpdate;

  public static final String SERIALIZED_NAME_SERVICE_EXECUTION_ROLE_UPDATE = "ServiceExecutionRoleUpdate";
  @SerializedName(SERIALIZED_NAME_SERVICE_EXECUTION_ROLE_UPDATE)
  private String serviceExecutionRoleUpdate;

  public static final String SERIALIZED_NAME_RUN_CONFIGURATION_UPDATE = "RunConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_RUN_CONFIGURATION_UPDATE)
  private UpdateApplicationRequestRunConfigurationUpdate runConfigurationUpdate;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTION_UPDATES = "CloudWatchLoggingOptionUpdates";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTION_UPDATES)
  private List cloudWatchLoggingOptionUpdates;

  public static final String SERIALIZED_NAME_CONDITIONAL_TOKEN = "ConditionalToken";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_TOKEN)
  private String conditionalToken;

  public UpdateApplicationRequest() {
  }

  public UpdateApplicationRequest applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public UpdateApplicationRequest currentApplicationVersionId(Integer currentApplicationVersionId) {
    this.currentApplicationVersionId = currentApplicationVersionId;
    return this;
  }

  /**
   * Get currentApplicationVersionId
   * @return currentApplicationVersionId
   */
  @javax.annotation.Nullable
  public Integer getCurrentApplicationVersionId() {
    return currentApplicationVersionId;
  }

  public void setCurrentApplicationVersionId(Integer currentApplicationVersionId) {
    this.currentApplicationVersionId = currentApplicationVersionId;
  }


  public UpdateApplicationRequest applicationConfigurationUpdate(UpdateApplicationRequestApplicationConfigurationUpdate applicationConfigurationUpdate) {
    this.applicationConfigurationUpdate = applicationConfigurationUpdate;
    return this;
  }

  /**
   * Get applicationConfigurationUpdate
   * @return applicationConfigurationUpdate
   */
  @javax.annotation.Nullable
  public UpdateApplicationRequestApplicationConfigurationUpdate getApplicationConfigurationUpdate() {
    return applicationConfigurationUpdate;
  }

  public void setApplicationConfigurationUpdate(UpdateApplicationRequestApplicationConfigurationUpdate applicationConfigurationUpdate) {
    this.applicationConfigurationUpdate = applicationConfigurationUpdate;
  }


  public UpdateApplicationRequest serviceExecutionRoleUpdate(String serviceExecutionRoleUpdate) {
    this.serviceExecutionRoleUpdate = serviceExecutionRoleUpdate;
    return this;
  }

  /**
   * Get serviceExecutionRoleUpdate
   * @return serviceExecutionRoleUpdate
   */
  @javax.annotation.Nullable
  public String getServiceExecutionRoleUpdate() {
    return serviceExecutionRoleUpdate;
  }

  public void setServiceExecutionRoleUpdate(String serviceExecutionRoleUpdate) {
    this.serviceExecutionRoleUpdate = serviceExecutionRoleUpdate;
  }


  public UpdateApplicationRequest runConfigurationUpdate(UpdateApplicationRequestRunConfigurationUpdate runConfigurationUpdate) {
    this.runConfigurationUpdate = runConfigurationUpdate;
    return this;
  }

  /**
   * Get runConfigurationUpdate
   * @return runConfigurationUpdate
   */
  @javax.annotation.Nullable
  public UpdateApplicationRequestRunConfigurationUpdate getRunConfigurationUpdate() {
    return runConfigurationUpdate;
  }

  public void setRunConfigurationUpdate(UpdateApplicationRequestRunConfigurationUpdate runConfigurationUpdate) {
    this.runConfigurationUpdate = runConfigurationUpdate;
  }


  public UpdateApplicationRequest cloudWatchLoggingOptionUpdates(List cloudWatchLoggingOptionUpdates) {
    this.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptionUpdates
   * @return cloudWatchLoggingOptionUpdates
   */
  @javax.annotation.Nullable
  public List getCloudWatchLoggingOptionUpdates() {
    return cloudWatchLoggingOptionUpdates;
  }

  public void setCloudWatchLoggingOptionUpdates(List cloudWatchLoggingOptionUpdates) {
    this.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates;
  }


  public UpdateApplicationRequest conditionalToken(String conditionalToken) {
    this.conditionalToken = conditionalToken;
    return this;
  }

  /**
   * Get conditionalToken
   * @return conditionalToken
   */
  @javax.annotation.Nullable
  public String getConditionalToken() {
    return conditionalToken;
  }

  public void setConditionalToken(String conditionalToken) {
    this.conditionalToken = conditionalToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationRequest updateApplicationRequest = (UpdateApplicationRequest) o;
    return Objects.equals(this.applicationName, updateApplicationRequest.applicationName) &&
        Objects.equals(this.currentApplicationVersionId, updateApplicationRequest.currentApplicationVersionId) &&
        Objects.equals(this.applicationConfigurationUpdate, updateApplicationRequest.applicationConfigurationUpdate) &&
        Objects.equals(this.serviceExecutionRoleUpdate, updateApplicationRequest.serviceExecutionRoleUpdate) &&
        Objects.equals(this.runConfigurationUpdate, updateApplicationRequest.runConfigurationUpdate) &&
        Objects.equals(this.cloudWatchLoggingOptionUpdates, updateApplicationRequest.cloudWatchLoggingOptionUpdates) &&
        Objects.equals(this.conditionalToken, updateApplicationRequest.conditionalToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, currentApplicationVersionId, applicationConfigurationUpdate, serviceExecutionRoleUpdate, runConfigurationUpdate, cloudWatchLoggingOptionUpdates, conditionalToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationRequest {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    currentApplicationVersionId: ").append(toIndentedString(currentApplicationVersionId)).append("\n");
    sb.append("    applicationConfigurationUpdate: ").append(toIndentedString(applicationConfigurationUpdate)).append("\n");
    sb.append("    serviceExecutionRoleUpdate: ").append(toIndentedString(serviceExecutionRoleUpdate)).append("\n");
    sb.append("    runConfigurationUpdate: ").append(toIndentedString(runConfigurationUpdate)).append("\n");
    sb.append("    cloudWatchLoggingOptionUpdates: ").append(toIndentedString(cloudWatchLoggingOptionUpdates)).append("\n");
    sb.append("    conditionalToken: ").append(toIndentedString(conditionalToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("CurrentApplicationVersionId");
    openapiFields.add("ApplicationConfigurationUpdate");
    openapiFields.add("ServiceExecutionRoleUpdate");
    openapiFields.add("RunConfigurationUpdate");
    openapiFields.add("CloudWatchLoggingOptionUpdates");
    openapiFields.add("ConditionalToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationRequest is not found in the empty JSON string", UpdateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the optional field `CurrentApplicationVersionId`
      if (jsonObj.get("CurrentApplicationVersionId") != null && !jsonObj.get("CurrentApplicationVersionId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CurrentApplicationVersionId"));
      }
      // validate the optional field `ApplicationConfigurationUpdate`
      if (jsonObj.get("ApplicationConfigurationUpdate") != null && !jsonObj.get("ApplicationConfigurationUpdate").isJsonNull()) {
        UpdateApplicationRequestApplicationConfigurationUpdate.validateJsonElement(jsonObj.get("ApplicationConfigurationUpdate"));
      }
      // validate the optional field `ServiceExecutionRoleUpdate`
      if (jsonObj.get("ServiceExecutionRoleUpdate") != null && !jsonObj.get("ServiceExecutionRoleUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceExecutionRoleUpdate"));
      }
      // validate the optional field `RunConfigurationUpdate`
      if (jsonObj.get("RunConfigurationUpdate") != null && !jsonObj.get("RunConfigurationUpdate").isJsonNull()) {
        UpdateApplicationRequestRunConfigurationUpdate.validateJsonElement(jsonObj.get("RunConfigurationUpdate"));
      }
      // validate the optional field `CloudWatchLoggingOptionUpdates`
      if (jsonObj.get("CloudWatchLoggingOptionUpdates") != null && !jsonObj.get("CloudWatchLoggingOptionUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CloudWatchLoggingOptionUpdates"));
      }
      // validate the optional field `ConditionalToken`
      if (jsonObj.get("ConditionalToken") != null && !jsonObj.get("ConditionalToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConditionalToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationRequest
   */
  public static UpdateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationRequest.class);
  }

  /**
   * Convert an instance of UpdateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

