/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate;
import org.openapitools.client.model.ApplicationConfigurationUpdateApplicationSnapshotConfigurationUpdate;
import org.openapitools.client.model.ApplicationConfigurationUpdateEnvironmentPropertyUpdates;
import org.openapitools.client.model.ApplicationConfigurationUpdateFlinkApplicationConfigurationUpdate;
import org.openapitools.client.model.ApplicationConfigurationUpdateSqlApplicationConfigurationUpdate;
import org.openapitools.client.model.ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationRequestApplicationConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationRequestApplicationConfigurationUpdate {
  public static final String SERIALIZED_NAME_SQL_APPLICATION_CONFIGURATION_UPDATE = "SqlApplicationConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_SQL_APPLICATION_CONFIGURATION_UPDATE)
  private ApplicationConfigurationUpdateSqlApplicationConfigurationUpdate sqlApplicationConfigurationUpdate;

  public static final String SERIALIZED_NAME_APPLICATION_CODE_CONFIGURATION_UPDATE = "ApplicationCodeConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CODE_CONFIGURATION_UPDATE)
  private ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate applicationCodeConfigurationUpdate;

  public static final String SERIALIZED_NAME_FLINK_APPLICATION_CONFIGURATION_UPDATE = "FlinkApplicationConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_FLINK_APPLICATION_CONFIGURATION_UPDATE)
  private ApplicationConfigurationUpdateFlinkApplicationConfigurationUpdate flinkApplicationConfigurationUpdate;

  public static final String SERIALIZED_NAME_ENVIRONMENT_PROPERTY_UPDATES = "EnvironmentPropertyUpdates";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_PROPERTY_UPDATES)
  private ApplicationConfigurationUpdateEnvironmentPropertyUpdates environmentPropertyUpdates;

  public static final String SERIALIZED_NAME_APPLICATION_SNAPSHOT_CONFIGURATION_UPDATE = "ApplicationSnapshotConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SNAPSHOT_CONFIGURATION_UPDATE)
  private ApplicationConfigurationUpdateApplicationSnapshotConfigurationUpdate applicationSnapshotConfigurationUpdate;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION_UPDATES = "VpcConfigurationUpdates";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION_UPDATES)
  private List vpcConfigurationUpdates;

  public static final String SERIALIZED_NAME_ZEPPELIN_APPLICATION_CONFIGURATION_UPDATE = "ZeppelinApplicationConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_ZEPPELIN_APPLICATION_CONFIGURATION_UPDATE)
  private ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate zeppelinApplicationConfigurationUpdate;

  public UpdateApplicationRequestApplicationConfigurationUpdate() {
  }

  public UpdateApplicationRequestApplicationConfigurationUpdate sqlApplicationConfigurationUpdate(ApplicationConfigurationUpdateSqlApplicationConfigurationUpdate sqlApplicationConfigurationUpdate) {
    this.sqlApplicationConfigurationUpdate = sqlApplicationConfigurationUpdate;
    return this;
  }

  /**
   * Get sqlApplicationConfigurationUpdate
   * @return sqlApplicationConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationUpdateSqlApplicationConfigurationUpdate getSqlApplicationConfigurationUpdate() {
    return sqlApplicationConfigurationUpdate;
  }

  public void setSqlApplicationConfigurationUpdate(ApplicationConfigurationUpdateSqlApplicationConfigurationUpdate sqlApplicationConfigurationUpdate) {
    this.sqlApplicationConfigurationUpdate = sqlApplicationConfigurationUpdate;
  }


  public UpdateApplicationRequestApplicationConfigurationUpdate applicationCodeConfigurationUpdate(ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate applicationCodeConfigurationUpdate) {
    this.applicationCodeConfigurationUpdate = applicationCodeConfigurationUpdate;
    return this;
  }

  /**
   * Get applicationCodeConfigurationUpdate
   * @return applicationCodeConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate getApplicationCodeConfigurationUpdate() {
    return applicationCodeConfigurationUpdate;
  }

  public void setApplicationCodeConfigurationUpdate(ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate applicationCodeConfigurationUpdate) {
    this.applicationCodeConfigurationUpdate = applicationCodeConfigurationUpdate;
  }


  public UpdateApplicationRequestApplicationConfigurationUpdate flinkApplicationConfigurationUpdate(ApplicationConfigurationUpdateFlinkApplicationConfigurationUpdate flinkApplicationConfigurationUpdate) {
    this.flinkApplicationConfigurationUpdate = flinkApplicationConfigurationUpdate;
    return this;
  }

  /**
   * Get flinkApplicationConfigurationUpdate
   * @return flinkApplicationConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationUpdateFlinkApplicationConfigurationUpdate getFlinkApplicationConfigurationUpdate() {
    return flinkApplicationConfigurationUpdate;
  }

  public void setFlinkApplicationConfigurationUpdate(ApplicationConfigurationUpdateFlinkApplicationConfigurationUpdate flinkApplicationConfigurationUpdate) {
    this.flinkApplicationConfigurationUpdate = flinkApplicationConfigurationUpdate;
  }


  public UpdateApplicationRequestApplicationConfigurationUpdate environmentPropertyUpdates(ApplicationConfigurationUpdateEnvironmentPropertyUpdates environmentPropertyUpdates) {
    this.environmentPropertyUpdates = environmentPropertyUpdates;
    return this;
  }

  /**
   * Get environmentPropertyUpdates
   * @return environmentPropertyUpdates
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationUpdateEnvironmentPropertyUpdates getEnvironmentPropertyUpdates() {
    return environmentPropertyUpdates;
  }

  public void setEnvironmentPropertyUpdates(ApplicationConfigurationUpdateEnvironmentPropertyUpdates environmentPropertyUpdates) {
    this.environmentPropertyUpdates = environmentPropertyUpdates;
  }


  public UpdateApplicationRequestApplicationConfigurationUpdate applicationSnapshotConfigurationUpdate(ApplicationConfigurationUpdateApplicationSnapshotConfigurationUpdate applicationSnapshotConfigurationUpdate) {
    this.applicationSnapshotConfigurationUpdate = applicationSnapshotConfigurationUpdate;
    return this;
  }

  /**
   * Get applicationSnapshotConfigurationUpdate
   * @return applicationSnapshotConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationUpdateApplicationSnapshotConfigurationUpdate getApplicationSnapshotConfigurationUpdate() {
    return applicationSnapshotConfigurationUpdate;
  }

  public void setApplicationSnapshotConfigurationUpdate(ApplicationConfigurationUpdateApplicationSnapshotConfigurationUpdate applicationSnapshotConfigurationUpdate) {
    this.applicationSnapshotConfigurationUpdate = applicationSnapshotConfigurationUpdate;
  }


  public UpdateApplicationRequestApplicationConfigurationUpdate vpcConfigurationUpdates(List vpcConfigurationUpdates) {
    this.vpcConfigurationUpdates = vpcConfigurationUpdates;
    return this;
  }

  /**
   * Get vpcConfigurationUpdates
   * @return vpcConfigurationUpdates
   */
  @javax.annotation.Nullable
  public List getVpcConfigurationUpdates() {
    return vpcConfigurationUpdates;
  }

  public void setVpcConfigurationUpdates(List vpcConfigurationUpdates) {
    this.vpcConfigurationUpdates = vpcConfigurationUpdates;
  }


  public UpdateApplicationRequestApplicationConfigurationUpdate zeppelinApplicationConfigurationUpdate(ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate zeppelinApplicationConfigurationUpdate) {
    this.zeppelinApplicationConfigurationUpdate = zeppelinApplicationConfigurationUpdate;
    return this;
  }

  /**
   * Get zeppelinApplicationConfigurationUpdate
   * @return zeppelinApplicationConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate getZeppelinApplicationConfigurationUpdate() {
    return zeppelinApplicationConfigurationUpdate;
  }

  public void setZeppelinApplicationConfigurationUpdate(ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate zeppelinApplicationConfigurationUpdate) {
    this.zeppelinApplicationConfigurationUpdate = zeppelinApplicationConfigurationUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationRequestApplicationConfigurationUpdate updateApplicationRequestApplicationConfigurationUpdate = (UpdateApplicationRequestApplicationConfigurationUpdate) o;
    return Objects.equals(this.sqlApplicationConfigurationUpdate, updateApplicationRequestApplicationConfigurationUpdate.sqlApplicationConfigurationUpdate) &&
        Objects.equals(this.applicationCodeConfigurationUpdate, updateApplicationRequestApplicationConfigurationUpdate.applicationCodeConfigurationUpdate) &&
        Objects.equals(this.flinkApplicationConfigurationUpdate, updateApplicationRequestApplicationConfigurationUpdate.flinkApplicationConfigurationUpdate) &&
        Objects.equals(this.environmentPropertyUpdates, updateApplicationRequestApplicationConfigurationUpdate.environmentPropertyUpdates) &&
        Objects.equals(this.applicationSnapshotConfigurationUpdate, updateApplicationRequestApplicationConfigurationUpdate.applicationSnapshotConfigurationUpdate) &&
        Objects.equals(this.vpcConfigurationUpdates, updateApplicationRequestApplicationConfigurationUpdate.vpcConfigurationUpdates) &&
        Objects.equals(this.zeppelinApplicationConfigurationUpdate, updateApplicationRequestApplicationConfigurationUpdate.zeppelinApplicationConfigurationUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sqlApplicationConfigurationUpdate, applicationCodeConfigurationUpdate, flinkApplicationConfigurationUpdate, environmentPropertyUpdates, applicationSnapshotConfigurationUpdate, vpcConfigurationUpdates, zeppelinApplicationConfigurationUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationRequestApplicationConfigurationUpdate {\n");
    sb.append("    sqlApplicationConfigurationUpdate: ").append(toIndentedString(sqlApplicationConfigurationUpdate)).append("\n");
    sb.append("    applicationCodeConfigurationUpdate: ").append(toIndentedString(applicationCodeConfigurationUpdate)).append("\n");
    sb.append("    flinkApplicationConfigurationUpdate: ").append(toIndentedString(flinkApplicationConfigurationUpdate)).append("\n");
    sb.append("    environmentPropertyUpdates: ").append(toIndentedString(environmentPropertyUpdates)).append("\n");
    sb.append("    applicationSnapshotConfigurationUpdate: ").append(toIndentedString(applicationSnapshotConfigurationUpdate)).append("\n");
    sb.append("    vpcConfigurationUpdates: ").append(toIndentedString(vpcConfigurationUpdates)).append("\n");
    sb.append("    zeppelinApplicationConfigurationUpdate: ").append(toIndentedString(zeppelinApplicationConfigurationUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SqlApplicationConfigurationUpdate");
    openapiFields.add("ApplicationCodeConfigurationUpdate");
    openapiFields.add("FlinkApplicationConfigurationUpdate");
    openapiFields.add("EnvironmentPropertyUpdates");
    openapiFields.add("ApplicationSnapshotConfigurationUpdate");
    openapiFields.add("VpcConfigurationUpdates");
    openapiFields.add("ZeppelinApplicationConfigurationUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationRequestApplicationConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationRequestApplicationConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationRequestApplicationConfigurationUpdate is not found in the empty JSON string", UpdateApplicationRequestApplicationConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationRequestApplicationConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationRequestApplicationConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SqlApplicationConfigurationUpdate`
      if (jsonObj.get("SqlApplicationConfigurationUpdate") != null && !jsonObj.get("SqlApplicationConfigurationUpdate").isJsonNull()) {
        ApplicationConfigurationUpdateSqlApplicationConfigurationUpdate.validateJsonElement(jsonObj.get("SqlApplicationConfigurationUpdate"));
      }
      // validate the optional field `ApplicationCodeConfigurationUpdate`
      if (jsonObj.get("ApplicationCodeConfigurationUpdate") != null && !jsonObj.get("ApplicationCodeConfigurationUpdate").isJsonNull()) {
        ApplicationConfigurationUpdateApplicationCodeConfigurationUpdate.validateJsonElement(jsonObj.get("ApplicationCodeConfigurationUpdate"));
      }
      // validate the optional field `FlinkApplicationConfigurationUpdate`
      if (jsonObj.get("FlinkApplicationConfigurationUpdate") != null && !jsonObj.get("FlinkApplicationConfigurationUpdate").isJsonNull()) {
        ApplicationConfigurationUpdateFlinkApplicationConfigurationUpdate.validateJsonElement(jsonObj.get("FlinkApplicationConfigurationUpdate"));
      }
      // validate the optional field `EnvironmentPropertyUpdates`
      if (jsonObj.get("EnvironmentPropertyUpdates") != null && !jsonObj.get("EnvironmentPropertyUpdates").isJsonNull()) {
        ApplicationConfigurationUpdateEnvironmentPropertyUpdates.validateJsonElement(jsonObj.get("EnvironmentPropertyUpdates"));
      }
      // validate the optional field `ApplicationSnapshotConfigurationUpdate`
      if (jsonObj.get("ApplicationSnapshotConfigurationUpdate") != null && !jsonObj.get("ApplicationSnapshotConfigurationUpdate").isJsonNull()) {
        ApplicationConfigurationUpdateApplicationSnapshotConfigurationUpdate.validateJsonElement(jsonObj.get("ApplicationSnapshotConfigurationUpdate"));
      }
      // validate the optional field `VpcConfigurationUpdates`
      if (jsonObj.get("VpcConfigurationUpdates") != null && !jsonObj.get("VpcConfigurationUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcConfigurationUpdates"));
      }
      // validate the optional field `ZeppelinApplicationConfigurationUpdate`
      if (jsonObj.get("ZeppelinApplicationConfigurationUpdate") != null && !jsonObj.get("ZeppelinApplicationConfigurationUpdate").isJsonNull()) {
        ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.validateJsonElement(jsonObj.get("ZeppelinApplicationConfigurationUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationRequestApplicationConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationRequestApplicationConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationRequestApplicationConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationRequestApplicationConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationRequestApplicationConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationRequestApplicationConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationRequestApplicationConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationRequestApplicationConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationRequestApplicationConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationRequestApplicationConfigurationUpdate
   */
  public static UpdateApplicationRequestApplicationConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationRequestApplicationConfigurationUpdate.class);
  }

  /**
   * Convert an instance of UpdateApplicationRequestApplicationConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

