/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;
import org.openapitools.client.model.LogLevel;
import org.openapitools.client.model.MetricsLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE = "ConfigurationTypeUpdate";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE)
  private ConfigurationType configurationTypeUpdate;

  public static final String SERIALIZED_NAME_METRICS_LEVEL_UPDATE = "MetricsLevelUpdate";
  @SerializedName(SERIALIZED_NAME_METRICS_LEVEL_UPDATE)
  private MetricsLevel metricsLevelUpdate;

  public static final String SERIALIZED_NAME_LOG_LEVEL_UPDATE = "LogLevelUpdate";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL_UPDATE)
  private LogLevel logLevelUpdate;

  public FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate() {
  }

  public FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate configurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
    return this;
  }

  /**
   * Get configurationTypeUpdate
   * @return configurationTypeUpdate
   */
  @javax.annotation.Nullable
  public ConfigurationType getConfigurationTypeUpdate() {
    return configurationTypeUpdate;
  }

  public void setConfigurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
  }


  public FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate metricsLevelUpdate(MetricsLevel metricsLevelUpdate) {
    this.metricsLevelUpdate = metricsLevelUpdate;
    return this;
  }

  /**
   * Get metricsLevelUpdate
   * @return metricsLevelUpdate
   */
  @javax.annotation.Nullable
  public MetricsLevel getMetricsLevelUpdate() {
    return metricsLevelUpdate;
  }

  public void setMetricsLevelUpdate(MetricsLevel metricsLevelUpdate) {
    this.metricsLevelUpdate = metricsLevelUpdate;
  }


  public FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate logLevelUpdate(LogLevel logLevelUpdate) {
    this.logLevelUpdate = logLevelUpdate;
    return this;
  }

  /**
   * Get logLevelUpdate
   * @return logLevelUpdate
   */
  @javax.annotation.Nullable
  public LogLevel getLogLevelUpdate() {
    return logLevelUpdate;
  }

  public void setLogLevelUpdate(LogLevel logLevelUpdate) {
    this.logLevelUpdate = logLevelUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate flinkApplicationConfigurationUpdateMonitoringConfigurationUpdate = (FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate) o;
    return Objects.equals(this.configurationTypeUpdate, flinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.configurationTypeUpdate) &&
        Objects.equals(this.metricsLevelUpdate, flinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.metricsLevelUpdate) &&
        Objects.equals(this.logLevelUpdate, flinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.logLevelUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationTypeUpdate, metricsLevelUpdate, logLevelUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate {\n");
    sb.append("    configurationTypeUpdate: ").append(toIndentedString(configurationTypeUpdate)).append("\n");
    sb.append("    metricsLevelUpdate: ").append(toIndentedString(metricsLevelUpdate)).append("\n");
    sb.append("    logLevelUpdate: ").append(toIndentedString(logLevelUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationTypeUpdate");
    openapiFields.add("MetricsLevelUpdate");
    openapiFields.add("LogLevelUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate is not found in the empty JSON string", FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationTypeUpdate`
      if (jsonObj.get("ConfigurationTypeUpdate") != null && !jsonObj.get("ConfigurationTypeUpdate").isJsonNull()) {
        ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationTypeUpdate"));
      }
      // validate the optional field `MetricsLevelUpdate`
      if (jsonObj.get("MetricsLevelUpdate") != null && !jsonObj.get("MetricsLevelUpdate").isJsonNull()) {
        MetricsLevel.validateJsonElement(jsonObj.get("MetricsLevelUpdate"));
      }
      // validate the optional field `LogLevelUpdate`
      if (jsonObj.get("LogLevelUpdate") != null && !jsonObj.get("LogLevelUpdate").isJsonNull()) {
        LogLevel.validateJsonElement(jsonObj.get("LogLevelUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate
   */
  public static FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate.class);
  }

  /**
   * Convert an instance of FlinkApplicationConfigurationUpdateMonitoringConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

