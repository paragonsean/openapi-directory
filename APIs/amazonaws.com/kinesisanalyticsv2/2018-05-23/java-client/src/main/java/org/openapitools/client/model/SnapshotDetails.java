/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SnapshotStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides details about a snapshot of application state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnapshotDetails {
  public static final String SERIALIZED_NAME_SNAPSHOT_NAME = "SnapshotName";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_NAME)
  private String snapshotName;

  public static final String SERIALIZED_NAME_SNAPSHOT_STATUS = "SnapshotStatus";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_STATUS)
  private SnapshotStatus snapshotStatus;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ID = "ApplicationVersionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ID)
  private Integer applicationVersionId;

  public static final String SERIALIZED_NAME_SNAPSHOT_CREATION_TIMESTAMP = "SnapshotCreationTimestamp";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_CREATION_TIMESTAMP)
  private OffsetDateTime snapshotCreationTimestamp;

  public SnapshotDetails() {
  }

  public SnapshotDetails snapshotName(String snapshotName) {
    this.snapshotName = snapshotName;
    return this;
  }

  /**
   * Get snapshotName
   * @return snapshotName
   */
  @javax.annotation.Nonnull
  public String getSnapshotName() {
    return snapshotName;
  }

  public void setSnapshotName(String snapshotName) {
    this.snapshotName = snapshotName;
  }


  public SnapshotDetails snapshotStatus(SnapshotStatus snapshotStatus) {
    this.snapshotStatus = snapshotStatus;
    return this;
  }

  /**
   * Get snapshotStatus
   * @return snapshotStatus
   */
  @javax.annotation.Nonnull
  public SnapshotStatus getSnapshotStatus() {
    return snapshotStatus;
  }

  public void setSnapshotStatus(SnapshotStatus snapshotStatus) {
    this.snapshotStatus = snapshotStatus;
  }


  public SnapshotDetails applicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
    return this;
  }

  /**
   * Get applicationVersionId
   * @return applicationVersionId
   */
  @javax.annotation.Nonnull
  public Integer getApplicationVersionId() {
    return applicationVersionId;
  }

  public void setApplicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
  }


  public SnapshotDetails snapshotCreationTimestamp(OffsetDateTime snapshotCreationTimestamp) {
    this.snapshotCreationTimestamp = snapshotCreationTimestamp;
    return this;
  }

  /**
   * Get snapshotCreationTimestamp
   * @return snapshotCreationTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSnapshotCreationTimestamp() {
    return snapshotCreationTimestamp;
  }

  public void setSnapshotCreationTimestamp(OffsetDateTime snapshotCreationTimestamp) {
    this.snapshotCreationTimestamp = snapshotCreationTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotDetails snapshotDetails = (SnapshotDetails) o;
    return Objects.equals(this.snapshotName, snapshotDetails.snapshotName) &&
        Objects.equals(this.snapshotStatus, snapshotDetails.snapshotStatus) &&
        Objects.equals(this.applicationVersionId, snapshotDetails.applicationVersionId) &&
        Objects.equals(this.snapshotCreationTimestamp, snapshotDetails.snapshotCreationTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotName, snapshotStatus, applicationVersionId, snapshotCreationTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotDetails {\n");
    sb.append("    snapshotName: ").append(toIndentedString(snapshotName)).append("\n");
    sb.append("    snapshotStatus: ").append(toIndentedString(snapshotStatus)).append("\n");
    sb.append("    applicationVersionId: ").append(toIndentedString(applicationVersionId)).append("\n");
    sb.append("    snapshotCreationTimestamp: ").append(toIndentedString(snapshotCreationTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SnapshotName");
    openapiFields.add("SnapshotStatus");
    openapiFields.add("ApplicationVersionId");
    openapiFields.add("SnapshotCreationTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SnapshotName");
    openapiRequiredFields.add("SnapshotStatus");
    openapiRequiredFields.add("ApplicationVersionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnapshotDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnapshotDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotDetails is not found in the empty JSON string", SnapshotDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnapshotDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SnapshotDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SnapshotName`
      String.validateJsonElement(jsonObj.get("SnapshotName"));
      // validate the required field `SnapshotStatus`
      SnapshotStatus.validateJsonElement(jsonObj.get("SnapshotStatus"));
      // validate the required field `ApplicationVersionId`
      Integer.validateJsonElement(jsonObj.get("ApplicationVersionId"));
      // validate the optional field `SnapshotCreationTimestamp`
      if (jsonObj.get("SnapshotCreationTimestamp") != null && !jsonObj.get("SnapshotCreationTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SnapshotCreationTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotDetails>() {
           @Override
           public void write(JsonWriter out, SnapshotDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnapshotDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnapshotDetails
   * @throws IOException if the JSON string is invalid with respect to SnapshotDetails
   */
  public static SnapshotDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotDetails.class);
  }

  /**
   * Convert an instance of SnapshotDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

