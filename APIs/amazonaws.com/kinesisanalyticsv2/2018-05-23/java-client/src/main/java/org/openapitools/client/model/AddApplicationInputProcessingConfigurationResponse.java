/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddApplicationInputProcessingConfigurationResponseInputProcessingConfigurationDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddApplicationInputProcessingConfigurationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddApplicationInputProcessingConfigurationResponse {
  public static final String SERIALIZED_NAME_APPLICATION_A_R_N = "ApplicationARN";
  @SerializedName(SERIALIZED_NAME_APPLICATION_A_R_N)
  private String applicationARN;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ID = "ApplicationVersionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ID)
  private Integer applicationVersionId;

  public static final String SERIALIZED_NAME_INPUT_ID = "InputId";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private String inputId;

  public static final String SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION_DESCRIPTION = "InputProcessingConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION_DESCRIPTION)
  private AddApplicationInputProcessingConfigurationResponseInputProcessingConfigurationDescription inputProcessingConfigurationDescription;

  public AddApplicationInputProcessingConfigurationResponse() {
  }

  public AddApplicationInputProcessingConfigurationResponse applicationARN(String applicationARN) {
    this.applicationARN = applicationARN;
    return this;
  }

  /**
   * Get applicationARN
   * @return applicationARN
   */
  @javax.annotation.Nullable
  public String getApplicationARN() {
    return applicationARN;
  }

  public void setApplicationARN(String applicationARN) {
    this.applicationARN = applicationARN;
  }


  public AddApplicationInputProcessingConfigurationResponse applicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
    return this;
  }

  /**
   * Get applicationVersionId
   * @return applicationVersionId
   */
  @javax.annotation.Nullable
  public Integer getApplicationVersionId() {
    return applicationVersionId;
  }

  public void setApplicationVersionId(Integer applicationVersionId) {
    this.applicationVersionId = applicationVersionId;
  }


  public AddApplicationInputProcessingConfigurationResponse inputId(String inputId) {
    this.inputId = inputId;
    return this;
  }

  /**
   * Get inputId
   * @return inputId
   */
  @javax.annotation.Nullable
  public String getInputId() {
    return inputId;
  }

  public void setInputId(String inputId) {
    this.inputId = inputId;
  }


  public AddApplicationInputProcessingConfigurationResponse inputProcessingConfigurationDescription(AddApplicationInputProcessingConfigurationResponseInputProcessingConfigurationDescription inputProcessingConfigurationDescription) {
    this.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription;
    return this;
  }

  /**
   * Get inputProcessingConfigurationDescription
   * @return inputProcessingConfigurationDescription
   */
  @javax.annotation.Nullable
  public AddApplicationInputProcessingConfigurationResponseInputProcessingConfigurationDescription getInputProcessingConfigurationDescription() {
    return inputProcessingConfigurationDescription;
  }

  public void setInputProcessingConfigurationDescription(AddApplicationInputProcessingConfigurationResponseInputProcessingConfigurationDescription inputProcessingConfigurationDescription) {
    this.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApplicationInputProcessingConfigurationResponse addApplicationInputProcessingConfigurationResponse = (AddApplicationInputProcessingConfigurationResponse) o;
    return Objects.equals(this.applicationARN, addApplicationInputProcessingConfigurationResponse.applicationARN) &&
        Objects.equals(this.applicationVersionId, addApplicationInputProcessingConfigurationResponse.applicationVersionId) &&
        Objects.equals(this.inputId, addApplicationInputProcessingConfigurationResponse.inputId) &&
        Objects.equals(this.inputProcessingConfigurationDescription, addApplicationInputProcessingConfigurationResponse.inputProcessingConfigurationDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationARN, applicationVersionId, inputId, inputProcessingConfigurationDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApplicationInputProcessingConfigurationResponse {\n");
    sb.append("    applicationARN: ").append(toIndentedString(applicationARN)).append("\n");
    sb.append("    applicationVersionId: ").append(toIndentedString(applicationVersionId)).append("\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    inputProcessingConfigurationDescription: ").append(toIndentedString(inputProcessingConfigurationDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationARN");
    openapiFields.add("ApplicationVersionId");
    openapiFields.add("InputId");
    openapiFields.add("InputProcessingConfigurationDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddApplicationInputProcessingConfigurationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddApplicationInputProcessingConfigurationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddApplicationInputProcessingConfigurationResponse is not found in the empty JSON string", AddApplicationInputProcessingConfigurationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddApplicationInputProcessingConfigurationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddApplicationInputProcessingConfigurationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationARN`
      if (jsonObj.get("ApplicationARN") != null && !jsonObj.get("ApplicationARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationARN"));
      }
      // validate the optional field `ApplicationVersionId`
      if (jsonObj.get("ApplicationVersionId") != null && !jsonObj.get("ApplicationVersionId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ApplicationVersionId"));
      }
      // validate the optional field `InputId`
      if (jsonObj.get("InputId") != null && !jsonObj.get("InputId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputId"));
      }
      // validate the optional field `InputProcessingConfigurationDescription`
      if (jsonObj.get("InputProcessingConfigurationDescription") != null && !jsonObj.get("InputProcessingConfigurationDescription").isJsonNull()) {
        AddApplicationInputProcessingConfigurationResponseInputProcessingConfigurationDescription.validateJsonElement(jsonObj.get("InputProcessingConfigurationDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddApplicationInputProcessingConfigurationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddApplicationInputProcessingConfigurationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddApplicationInputProcessingConfigurationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddApplicationInputProcessingConfigurationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AddApplicationInputProcessingConfigurationResponse>() {
           @Override
           public void write(JsonWriter out, AddApplicationInputProcessingConfigurationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddApplicationInputProcessingConfigurationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddApplicationInputProcessingConfigurationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddApplicationInputProcessingConfigurationResponse
   * @throws IOException if the JSON string is invalid with respect to AddApplicationInputProcessingConfigurationResponse
   */
  public static AddApplicationInputProcessingConfigurationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddApplicationInputProcessingConfigurationResponse.class);
  }

  /**
   * Convert an instance of AddApplicationInputProcessingConfigurationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

