/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationCodeConfigurationDescriptionCodeContentDescription;
import org.openapitools.client.model.CodeContentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription {
  public static final String SERIALIZED_NAME_CODE_CONTENT_TYPE = "CodeContentType";
  @SerializedName(SERIALIZED_NAME_CODE_CONTENT_TYPE)
  private CodeContentType codeContentType;

  public static final String SERIALIZED_NAME_CODE_CONTENT_DESCRIPTION = "CodeContentDescription";
  @SerializedName(SERIALIZED_NAME_CODE_CONTENT_DESCRIPTION)
  private ApplicationCodeConfigurationDescriptionCodeContentDescription codeContentDescription;

  public ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription() {
  }

  public ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription codeContentType(CodeContentType codeContentType) {
    this.codeContentType = codeContentType;
    return this;
  }

  /**
   * Get codeContentType
   * @return codeContentType
   */
  @javax.annotation.Nonnull
  public CodeContentType getCodeContentType() {
    return codeContentType;
  }

  public void setCodeContentType(CodeContentType codeContentType) {
    this.codeContentType = codeContentType;
  }


  public ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription codeContentDescription(ApplicationCodeConfigurationDescriptionCodeContentDescription codeContentDescription) {
    this.codeContentDescription = codeContentDescription;
    return this;
  }

  /**
   * Get codeContentDescription
   * @return codeContentDescription
   */
  @javax.annotation.Nullable
  public ApplicationCodeConfigurationDescriptionCodeContentDescription getCodeContentDescription() {
    return codeContentDescription;
  }

  public void setCodeContentDescription(ApplicationCodeConfigurationDescriptionCodeContentDescription codeContentDescription) {
    this.codeContentDescription = codeContentDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription applicationConfigurationDescriptionApplicationCodeConfigurationDescription = (ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription) o;
    return Objects.equals(this.codeContentType, applicationConfigurationDescriptionApplicationCodeConfigurationDescription.codeContentType) &&
        Objects.equals(this.codeContentDescription, applicationConfigurationDescriptionApplicationCodeConfigurationDescription.codeContentDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeContentType, codeContentDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription {\n");
    sb.append("    codeContentType: ").append(toIndentedString(codeContentType)).append("\n");
    sb.append("    codeContentDescription: ").append(toIndentedString(codeContentDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeContentType");
    openapiFields.add("CodeContentDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CodeContentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription is not found in the empty JSON string", ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CodeContentType`
      CodeContentType.validateJsonElement(jsonObj.get("CodeContentType"));
      // validate the optional field `CodeContentDescription`
      if (jsonObj.get("CodeContentDescription") != null && !jsonObj.get("CodeContentDescription").isJsonNull()) {
        ApplicationCodeConfigurationDescriptionCodeContentDescription.validateJsonElement(jsonObj.get("CodeContentDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription
   */
  public static ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationDescriptionApplicationCodeConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

