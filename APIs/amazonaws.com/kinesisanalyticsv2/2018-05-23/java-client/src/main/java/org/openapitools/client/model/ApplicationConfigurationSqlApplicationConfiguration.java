/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationSqlApplicationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationSqlApplicationConfiguration {
  public static final String SERIALIZED_NAME_INPUTS = "Inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List inputs;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List outputs;

  public static final String SERIALIZED_NAME_REFERENCE_DATA_SOURCES = "ReferenceDataSources";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DATA_SOURCES)
  private List referenceDataSources;

  public ApplicationConfigurationSqlApplicationConfiguration() {
  }

  public ApplicationConfigurationSqlApplicationConfiguration inputs(List inputs) {
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable
  public List getInputs() {
    return inputs;
  }

  public void setInputs(List inputs) {
    this.inputs = inputs;
  }


  public ApplicationConfigurationSqlApplicationConfiguration outputs(List outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable
  public List getOutputs() {
    return outputs;
  }

  public void setOutputs(List outputs) {
    this.outputs = outputs;
  }


  public ApplicationConfigurationSqlApplicationConfiguration referenceDataSources(List referenceDataSources) {
    this.referenceDataSources = referenceDataSources;
    return this;
  }

  /**
   * Get referenceDataSources
   * @return referenceDataSources
   */
  @javax.annotation.Nullable
  public List getReferenceDataSources() {
    return referenceDataSources;
  }

  public void setReferenceDataSources(List referenceDataSources) {
    this.referenceDataSources = referenceDataSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationSqlApplicationConfiguration applicationConfigurationSqlApplicationConfiguration = (ApplicationConfigurationSqlApplicationConfiguration) o;
    return Objects.equals(this.inputs, applicationConfigurationSqlApplicationConfiguration.inputs) &&
        Objects.equals(this.outputs, applicationConfigurationSqlApplicationConfiguration.outputs) &&
        Objects.equals(this.referenceDataSources, applicationConfigurationSqlApplicationConfiguration.referenceDataSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputs, outputs, referenceDataSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationSqlApplicationConfiguration {\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    referenceDataSources: ").append(toIndentedString(referenceDataSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Inputs");
    openapiFields.add("Outputs");
    openapiFields.add("ReferenceDataSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationSqlApplicationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationSqlApplicationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationSqlApplicationConfiguration is not found in the empty JSON string", ApplicationConfigurationSqlApplicationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationSqlApplicationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationSqlApplicationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Inputs`
      if (jsonObj.get("Inputs") != null && !jsonObj.get("Inputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Inputs"));
      }
      // validate the optional field `Outputs`
      if (jsonObj.get("Outputs") != null && !jsonObj.get("Outputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Outputs"));
      }
      // validate the optional field `ReferenceDataSources`
      if (jsonObj.get("ReferenceDataSources") != null && !jsonObj.get("ReferenceDataSources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReferenceDataSources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationSqlApplicationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationSqlApplicationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationSqlApplicationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationSqlApplicationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationSqlApplicationConfiguration>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationSqlApplicationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationSqlApplicationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationSqlApplicationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationSqlApplicationConfiguration
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationSqlApplicationConfiguration
   */
  public static ApplicationConfigurationSqlApplicationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationSqlApplicationConfiguration.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationSqlApplicationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

