/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationCodeConfigurationCodeContent;
import org.openapitools.client.model.CodeContentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes code configuration for an application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationCodeConfiguration {
  public static final String SERIALIZED_NAME_CODE_CONTENT = "CodeContent";
  @SerializedName(SERIALIZED_NAME_CODE_CONTENT)
  private ApplicationCodeConfigurationCodeContent codeContent;

  public static final String SERIALIZED_NAME_CODE_CONTENT_TYPE = "CodeContentType";
  @SerializedName(SERIALIZED_NAME_CODE_CONTENT_TYPE)
  private CodeContentType codeContentType;

  public ApplicationCodeConfiguration() {
  }

  public ApplicationCodeConfiguration codeContent(ApplicationCodeConfigurationCodeContent codeContent) {
    this.codeContent = codeContent;
    return this;
  }

  /**
   * Get codeContent
   * @return codeContent
   */
  @javax.annotation.Nullable
  public ApplicationCodeConfigurationCodeContent getCodeContent() {
    return codeContent;
  }

  public void setCodeContent(ApplicationCodeConfigurationCodeContent codeContent) {
    this.codeContent = codeContent;
  }


  public ApplicationCodeConfiguration codeContentType(CodeContentType codeContentType) {
    this.codeContentType = codeContentType;
    return this;
  }

  /**
   * Get codeContentType
   * @return codeContentType
   */
  @javax.annotation.Nonnull
  public CodeContentType getCodeContentType() {
    return codeContentType;
  }

  public void setCodeContentType(CodeContentType codeContentType) {
    this.codeContentType = codeContentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationCodeConfiguration applicationCodeConfiguration = (ApplicationCodeConfiguration) o;
    return Objects.equals(this.codeContent, applicationCodeConfiguration.codeContent) &&
        Objects.equals(this.codeContentType, applicationCodeConfiguration.codeContentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeContent, codeContentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationCodeConfiguration {\n");
    sb.append("    codeContent: ").append(toIndentedString(codeContent)).append("\n");
    sb.append("    codeContentType: ").append(toIndentedString(codeContentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeContent");
    openapiFields.add("CodeContentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CodeContentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationCodeConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationCodeConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationCodeConfiguration is not found in the empty JSON string", ApplicationCodeConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationCodeConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationCodeConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationCodeConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodeContent`
      if (jsonObj.get("CodeContent") != null && !jsonObj.get("CodeContent").isJsonNull()) {
        ApplicationCodeConfigurationCodeContent.validateJsonElement(jsonObj.get("CodeContent"));
      }
      // validate the required field `CodeContentType`
      CodeContentType.validateJsonElement(jsonObj.get("CodeContentType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationCodeConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationCodeConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationCodeConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationCodeConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationCodeConfiguration>() {
           @Override
           public void write(JsonWriter out, ApplicationCodeConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationCodeConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationCodeConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationCodeConfiguration
   * @throws IOException if the JSON string is invalid with respect to ApplicationCodeConfiguration
   */
  public static ApplicationCodeConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationCodeConfiguration.class);
  }

  /**
   * Convert an instance of ApplicationCodeConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

