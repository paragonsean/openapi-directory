/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription;
import org.openapitools.client.model.ReferenceDataSourceReferenceSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For a SQL-based Kinesis Data Analytics application, describes the reference data source configured for an application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceDataSourceDescription {
  public static final String SERIALIZED_NAME_REFERENCE_ID = "ReferenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_S3_REFERENCE_DATA_SOURCE_DESCRIPTION = "S3ReferenceDataSourceDescription";
  @SerializedName(SERIALIZED_NAME_S3_REFERENCE_DATA_SOURCE_DESCRIPTION)
  private ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription s3ReferenceDataSourceDescription;

  public static final String SERIALIZED_NAME_REFERENCE_SCHEMA = "ReferenceSchema";
  @SerializedName(SERIALIZED_NAME_REFERENCE_SCHEMA)
  private ReferenceDataSourceReferenceSchema referenceSchema;

  public ReferenceDataSourceDescription() {
  }

  public ReferenceDataSourceDescription referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public ReferenceDataSourceDescription tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public ReferenceDataSourceDescription s3ReferenceDataSourceDescription(ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription s3ReferenceDataSourceDescription) {
    this.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription;
    return this;
  }

  /**
   * Get s3ReferenceDataSourceDescription
   * @return s3ReferenceDataSourceDescription
   */
  @javax.annotation.Nonnull
  public ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription getS3ReferenceDataSourceDescription() {
    return s3ReferenceDataSourceDescription;
  }

  public void setS3ReferenceDataSourceDescription(ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription s3ReferenceDataSourceDescription) {
    this.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription;
  }


  public ReferenceDataSourceDescription referenceSchema(ReferenceDataSourceReferenceSchema referenceSchema) {
    this.referenceSchema = referenceSchema;
    return this;
  }

  /**
   * Get referenceSchema
   * @return referenceSchema
   */
  @javax.annotation.Nullable
  public ReferenceDataSourceReferenceSchema getReferenceSchema() {
    return referenceSchema;
  }

  public void setReferenceSchema(ReferenceDataSourceReferenceSchema referenceSchema) {
    this.referenceSchema = referenceSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceDataSourceDescription referenceDataSourceDescription = (ReferenceDataSourceDescription) o;
    return Objects.equals(this.referenceId, referenceDataSourceDescription.referenceId) &&
        Objects.equals(this.tableName, referenceDataSourceDescription.tableName) &&
        Objects.equals(this.s3ReferenceDataSourceDescription, referenceDataSourceDescription.s3ReferenceDataSourceDescription) &&
        Objects.equals(this.referenceSchema, referenceDataSourceDescription.referenceSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, tableName, s3ReferenceDataSourceDescription, referenceSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceDataSourceDescription {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    s3ReferenceDataSourceDescription: ").append(toIndentedString(s3ReferenceDataSourceDescription)).append("\n");
    sb.append("    referenceSchema: ").append(toIndentedString(referenceSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReferenceId");
    openapiFields.add("TableName");
    openapiFields.add("S3ReferenceDataSourceDescription");
    openapiFields.add("ReferenceSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReferenceId");
    openapiRequiredFields.add("TableName");
    openapiRequiredFields.add("S3ReferenceDataSourceDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceDataSourceDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceDataSourceDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceDataSourceDescription is not found in the empty JSON string", ReferenceDataSourceDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceDataSourceDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceDataSourceDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReferenceDataSourceDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReferenceId`
      String.validateJsonElement(jsonObj.get("ReferenceId"));
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the required field `S3ReferenceDataSourceDescription`
      ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.validateJsonElement(jsonObj.get("S3ReferenceDataSourceDescription"));
      // validate the optional field `ReferenceSchema`
      if (jsonObj.get("ReferenceSchema") != null && !jsonObj.get("ReferenceSchema").isJsonNull()) {
        ReferenceDataSourceReferenceSchema.validateJsonElement(jsonObj.get("ReferenceSchema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceDataSourceDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceDataSourceDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceDataSourceDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceDataSourceDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceDataSourceDescription>() {
           @Override
           public void write(JsonWriter out, ReferenceDataSourceDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceDataSourceDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceDataSourceDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceDataSourceDescription
   * @throws IOException if the JSON string is invalid with respect to ReferenceDataSourceDescription
   */
  public static ReferenceDataSourceDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceDataSourceDescription.class);
  }

  /**
   * Convert an instance of ReferenceDataSourceDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

