/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE = "ConfigurationTypeUpdate";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE_UPDATE)
  private ConfigurationType configurationTypeUpdate;

  public static final String SERIALIZED_NAME_PARALLELISM_UPDATE = "ParallelismUpdate";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_UPDATE)
  private Integer parallelismUpdate;

  public static final String SERIALIZED_NAME_PARALLELISM_PER_K_P_U_UPDATE = "ParallelismPerKPUUpdate";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_PER_K_P_U_UPDATE)
  private Integer parallelismPerKPUUpdate;

  public static final String SERIALIZED_NAME_AUTO_SCALING_ENABLED_UPDATE = "AutoScalingEnabledUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_ENABLED_UPDATE)
  private Boolean autoScalingEnabledUpdate;

  public FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate() {
  }

  public FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate configurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
    return this;
  }

  /**
   * Get configurationTypeUpdate
   * @return configurationTypeUpdate
   */
  @javax.annotation.Nullable
  public ConfigurationType getConfigurationTypeUpdate() {
    return configurationTypeUpdate;
  }

  public void setConfigurationTypeUpdate(ConfigurationType configurationTypeUpdate) {
    this.configurationTypeUpdate = configurationTypeUpdate;
  }


  public FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate parallelismUpdate(Integer parallelismUpdate) {
    this.parallelismUpdate = parallelismUpdate;
    return this;
  }

  /**
   * Get parallelismUpdate
   * @return parallelismUpdate
   */
  @javax.annotation.Nullable
  public Integer getParallelismUpdate() {
    return parallelismUpdate;
  }

  public void setParallelismUpdate(Integer parallelismUpdate) {
    this.parallelismUpdate = parallelismUpdate;
  }


  public FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate parallelismPerKPUUpdate(Integer parallelismPerKPUUpdate) {
    this.parallelismPerKPUUpdate = parallelismPerKPUUpdate;
    return this;
  }

  /**
   * Get parallelismPerKPUUpdate
   * @return parallelismPerKPUUpdate
   */
  @javax.annotation.Nullable
  public Integer getParallelismPerKPUUpdate() {
    return parallelismPerKPUUpdate;
  }

  public void setParallelismPerKPUUpdate(Integer parallelismPerKPUUpdate) {
    this.parallelismPerKPUUpdate = parallelismPerKPUUpdate;
  }


  public FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate autoScalingEnabledUpdate(Boolean autoScalingEnabledUpdate) {
    this.autoScalingEnabledUpdate = autoScalingEnabledUpdate;
    return this;
  }

  /**
   * Get autoScalingEnabledUpdate
   * @return autoScalingEnabledUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAutoScalingEnabledUpdate() {
    return autoScalingEnabledUpdate;
  }

  public void setAutoScalingEnabledUpdate(Boolean autoScalingEnabledUpdate) {
    this.autoScalingEnabledUpdate = autoScalingEnabledUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate flinkApplicationConfigurationUpdateParallelismConfigurationUpdate = (FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate) o;
    return Objects.equals(this.configurationTypeUpdate, flinkApplicationConfigurationUpdateParallelismConfigurationUpdate.configurationTypeUpdate) &&
        Objects.equals(this.parallelismUpdate, flinkApplicationConfigurationUpdateParallelismConfigurationUpdate.parallelismUpdate) &&
        Objects.equals(this.parallelismPerKPUUpdate, flinkApplicationConfigurationUpdateParallelismConfigurationUpdate.parallelismPerKPUUpdate) &&
        Objects.equals(this.autoScalingEnabledUpdate, flinkApplicationConfigurationUpdateParallelismConfigurationUpdate.autoScalingEnabledUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationTypeUpdate, parallelismUpdate, parallelismPerKPUUpdate, autoScalingEnabledUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate {\n");
    sb.append("    configurationTypeUpdate: ").append(toIndentedString(configurationTypeUpdate)).append("\n");
    sb.append("    parallelismUpdate: ").append(toIndentedString(parallelismUpdate)).append("\n");
    sb.append("    parallelismPerKPUUpdate: ").append(toIndentedString(parallelismPerKPUUpdate)).append("\n");
    sb.append("    autoScalingEnabledUpdate: ").append(toIndentedString(autoScalingEnabledUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationTypeUpdate");
    openapiFields.add("ParallelismUpdate");
    openapiFields.add("ParallelismPerKPUUpdate");
    openapiFields.add("AutoScalingEnabledUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate is not found in the empty JSON string", FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationTypeUpdate`
      if (jsonObj.get("ConfigurationTypeUpdate") != null && !jsonObj.get("ConfigurationTypeUpdate").isJsonNull()) {
        ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationTypeUpdate"));
      }
      // validate the optional field `ParallelismUpdate`
      if (jsonObj.get("ParallelismUpdate") != null && !jsonObj.get("ParallelismUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelismUpdate"));
      }
      // validate the optional field `ParallelismPerKPUUpdate`
      if (jsonObj.get("ParallelismPerKPUUpdate") != null && !jsonObj.get("ParallelismPerKPUUpdate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelismPerKPUUpdate"));
      }
      // validate the optional field `AutoScalingEnabledUpdate`
      if (jsonObj.get("AutoScalingEnabledUpdate") != null && !jsonObj.get("AutoScalingEnabledUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoScalingEnabledUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate
   */
  public static FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate.class);
  }

  /**
   * Convert an instance of FlinkApplicationConfigurationUpdateParallelismConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

