/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArtifactType;
import org.openapitools.client.model.CustomArtifactConfigurationDescriptionMavenReferenceDescription;
import org.openapitools.client.model.S3ContentLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a dependency JAR or a JAR of user-defined functions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomArtifactConfigurationDescription {
  public static final String SERIALIZED_NAME_ARTIFACT_TYPE = "ArtifactType";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_TYPE)
  private ArtifactType artifactType;

  public static final String SERIALIZED_NAME_S3_CONTENT_LOCATION_DESCRIPTION = "S3ContentLocationDescription";
  @SerializedName(SERIALIZED_NAME_S3_CONTENT_LOCATION_DESCRIPTION)
  private S3ContentLocation s3ContentLocationDescription;

  public static final String SERIALIZED_NAME_MAVEN_REFERENCE_DESCRIPTION = "MavenReferenceDescription";
  @SerializedName(SERIALIZED_NAME_MAVEN_REFERENCE_DESCRIPTION)
  private CustomArtifactConfigurationDescriptionMavenReferenceDescription mavenReferenceDescription;

  public CustomArtifactConfigurationDescription() {
  }

  public CustomArtifactConfigurationDescription artifactType(ArtifactType artifactType) {
    this.artifactType = artifactType;
    return this;
  }

  /**
   * Get artifactType
   * @return artifactType
   */
  @javax.annotation.Nullable
  public ArtifactType getArtifactType() {
    return artifactType;
  }

  public void setArtifactType(ArtifactType artifactType) {
    this.artifactType = artifactType;
  }


  public CustomArtifactConfigurationDescription s3ContentLocationDescription(S3ContentLocation s3ContentLocationDescription) {
    this.s3ContentLocationDescription = s3ContentLocationDescription;
    return this;
  }

  /**
   * Get s3ContentLocationDescription
   * @return s3ContentLocationDescription
   */
  @javax.annotation.Nullable
  public S3ContentLocation getS3ContentLocationDescription() {
    return s3ContentLocationDescription;
  }

  public void setS3ContentLocationDescription(S3ContentLocation s3ContentLocationDescription) {
    this.s3ContentLocationDescription = s3ContentLocationDescription;
  }


  public CustomArtifactConfigurationDescription mavenReferenceDescription(CustomArtifactConfigurationDescriptionMavenReferenceDescription mavenReferenceDescription) {
    this.mavenReferenceDescription = mavenReferenceDescription;
    return this;
  }

  /**
   * Get mavenReferenceDescription
   * @return mavenReferenceDescription
   */
  @javax.annotation.Nullable
  public CustomArtifactConfigurationDescriptionMavenReferenceDescription getMavenReferenceDescription() {
    return mavenReferenceDescription;
  }

  public void setMavenReferenceDescription(CustomArtifactConfigurationDescriptionMavenReferenceDescription mavenReferenceDescription) {
    this.mavenReferenceDescription = mavenReferenceDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomArtifactConfigurationDescription customArtifactConfigurationDescription = (CustomArtifactConfigurationDescription) o;
    return Objects.equals(this.artifactType, customArtifactConfigurationDescription.artifactType) &&
        Objects.equals(this.s3ContentLocationDescription, customArtifactConfigurationDescription.s3ContentLocationDescription) &&
        Objects.equals(this.mavenReferenceDescription, customArtifactConfigurationDescription.mavenReferenceDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactType, s3ContentLocationDescription, mavenReferenceDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomArtifactConfigurationDescription {\n");
    sb.append("    artifactType: ").append(toIndentedString(artifactType)).append("\n");
    sb.append("    s3ContentLocationDescription: ").append(toIndentedString(s3ContentLocationDescription)).append("\n");
    sb.append("    mavenReferenceDescription: ").append(toIndentedString(mavenReferenceDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ArtifactType");
    openapiFields.add("S3ContentLocationDescription");
    openapiFields.add("MavenReferenceDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomArtifactConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomArtifactConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomArtifactConfigurationDescription is not found in the empty JSON string", CustomArtifactConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomArtifactConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomArtifactConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ArtifactType`
      if (jsonObj.get("ArtifactType") != null && !jsonObj.get("ArtifactType").isJsonNull()) {
        ArtifactType.validateJsonElement(jsonObj.get("ArtifactType"));
      }
      // validate the optional field `S3ContentLocationDescription`
      if (jsonObj.get("S3ContentLocationDescription") != null && !jsonObj.get("S3ContentLocationDescription").isJsonNull()) {
        S3ContentLocation.validateJsonElement(jsonObj.get("S3ContentLocationDescription"));
      }
      // validate the optional field `MavenReferenceDescription`
      if (jsonObj.get("MavenReferenceDescription") != null && !jsonObj.get("MavenReferenceDescription").isJsonNull()) {
        CustomArtifactConfigurationDescriptionMavenReferenceDescription.validateJsonElement(jsonObj.get("MavenReferenceDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomArtifactConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomArtifactConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomArtifactConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomArtifactConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomArtifactConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, CustomArtifactConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomArtifactConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomArtifactConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomArtifactConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to CustomArtifactConfigurationDescription
   */
  public static CustomArtifactConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomArtifactConfigurationDescription.class);
  }

  /**
   * Convert an instance of CustomArtifactConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

