/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReferenceDataSourceReferenceSchema;
import org.openapitools.client.model.ReferenceDataSourceS3ReferenceDataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddApplicationReferenceDataSourceRequestReferenceDataSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddApplicationReferenceDataSourceRequestReferenceDataSource {
  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_S3_REFERENCE_DATA_SOURCE = "S3ReferenceDataSource";
  @SerializedName(SERIALIZED_NAME_S3_REFERENCE_DATA_SOURCE)
  private ReferenceDataSourceS3ReferenceDataSource s3ReferenceDataSource;

  public static final String SERIALIZED_NAME_REFERENCE_SCHEMA = "ReferenceSchema";
  @SerializedName(SERIALIZED_NAME_REFERENCE_SCHEMA)
  private ReferenceDataSourceReferenceSchema referenceSchema;

  public AddApplicationReferenceDataSourceRequestReferenceDataSource() {
  }

  public AddApplicationReferenceDataSourceRequestReferenceDataSource tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public AddApplicationReferenceDataSourceRequestReferenceDataSource s3ReferenceDataSource(ReferenceDataSourceS3ReferenceDataSource s3ReferenceDataSource) {
    this.s3ReferenceDataSource = s3ReferenceDataSource;
    return this;
  }

  /**
   * Get s3ReferenceDataSource
   * @return s3ReferenceDataSource
   */
  @javax.annotation.Nullable
  public ReferenceDataSourceS3ReferenceDataSource getS3ReferenceDataSource() {
    return s3ReferenceDataSource;
  }

  public void setS3ReferenceDataSource(ReferenceDataSourceS3ReferenceDataSource s3ReferenceDataSource) {
    this.s3ReferenceDataSource = s3ReferenceDataSource;
  }


  public AddApplicationReferenceDataSourceRequestReferenceDataSource referenceSchema(ReferenceDataSourceReferenceSchema referenceSchema) {
    this.referenceSchema = referenceSchema;
    return this;
  }

  /**
   * Get referenceSchema
   * @return referenceSchema
   */
  @javax.annotation.Nonnull
  public ReferenceDataSourceReferenceSchema getReferenceSchema() {
    return referenceSchema;
  }

  public void setReferenceSchema(ReferenceDataSourceReferenceSchema referenceSchema) {
    this.referenceSchema = referenceSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApplicationReferenceDataSourceRequestReferenceDataSource addApplicationReferenceDataSourceRequestReferenceDataSource = (AddApplicationReferenceDataSourceRequestReferenceDataSource) o;
    return Objects.equals(this.tableName, addApplicationReferenceDataSourceRequestReferenceDataSource.tableName) &&
        Objects.equals(this.s3ReferenceDataSource, addApplicationReferenceDataSourceRequestReferenceDataSource.s3ReferenceDataSource) &&
        Objects.equals(this.referenceSchema, addApplicationReferenceDataSourceRequestReferenceDataSource.referenceSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, s3ReferenceDataSource, referenceSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApplicationReferenceDataSourceRequestReferenceDataSource {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    s3ReferenceDataSource: ").append(toIndentedString(s3ReferenceDataSource)).append("\n");
    sb.append("    referenceSchema: ").append(toIndentedString(referenceSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableName");
    openapiFields.add("S3ReferenceDataSource");
    openapiFields.add("ReferenceSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TableName");
    openapiRequiredFields.add("ReferenceSchema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddApplicationReferenceDataSourceRequestReferenceDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddApplicationReferenceDataSourceRequestReferenceDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddApplicationReferenceDataSourceRequestReferenceDataSource is not found in the empty JSON string", AddApplicationReferenceDataSourceRequestReferenceDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddApplicationReferenceDataSourceRequestReferenceDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddApplicationReferenceDataSourceRequestReferenceDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddApplicationReferenceDataSourceRequestReferenceDataSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TableName`
      String.validateJsonElement(jsonObj.get("TableName"));
      // validate the optional field `S3ReferenceDataSource`
      if (jsonObj.get("S3ReferenceDataSource") != null && !jsonObj.get("S3ReferenceDataSource").isJsonNull()) {
        ReferenceDataSourceS3ReferenceDataSource.validateJsonElement(jsonObj.get("S3ReferenceDataSource"));
      }
      // validate the required field `ReferenceSchema`
      ReferenceDataSourceReferenceSchema.validateJsonElement(jsonObj.get("ReferenceSchema"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddApplicationReferenceDataSourceRequestReferenceDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddApplicationReferenceDataSourceRequestReferenceDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddApplicationReferenceDataSourceRequestReferenceDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddApplicationReferenceDataSourceRequestReferenceDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<AddApplicationReferenceDataSourceRequestReferenceDataSource>() {
           @Override
           public void write(JsonWriter out, AddApplicationReferenceDataSourceRequestReferenceDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddApplicationReferenceDataSourceRequestReferenceDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddApplicationReferenceDataSourceRequestReferenceDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddApplicationReferenceDataSourceRequestReferenceDataSource
   * @throws IOException if the JSON string is invalid with respect to AddApplicationReferenceDataSourceRequestReferenceDataSource
   */
  public static AddApplicationReferenceDataSourceRequestReferenceDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddApplicationReferenceDataSourceRequestReferenceDataSource.class);
  }

  /**
   * Convert an instance of AddApplicationReferenceDataSourceRequestReferenceDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

