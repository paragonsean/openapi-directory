/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddApplicationVpcConfigurationResponseVpcConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddApplicationVpcConfigurationResponseVpcConfigurationDescription {
  public static final String SERIALIZED_NAME_VPC_CONFIGURATION_ID = "VpcConfigurationId";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION_ID)
  private String vpcConfigurationId;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SUBNET_IDS = "SubnetIds";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
  private List subnetIds;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
  private List securityGroupIds;

  public AddApplicationVpcConfigurationResponseVpcConfigurationDescription() {
  }

  public AddApplicationVpcConfigurationResponseVpcConfigurationDescription vpcConfigurationId(String vpcConfigurationId) {
    this.vpcConfigurationId = vpcConfigurationId;
    return this;
  }

  /**
   * Get vpcConfigurationId
   * @return vpcConfigurationId
   */
  @javax.annotation.Nonnull
  public String getVpcConfigurationId() {
    return vpcConfigurationId;
  }

  public void setVpcConfigurationId(String vpcConfigurationId) {
    this.vpcConfigurationId = vpcConfigurationId;
  }


  public AddApplicationVpcConfigurationResponseVpcConfigurationDescription vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nonnull
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public AddApplicationVpcConfigurationResponseVpcConfigurationDescription subnetIds(List subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  /**
   * Get subnetIds
   * @return subnetIds
   */
  @javax.annotation.Nonnull
  public List getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List subnetIds) {
    this.subnetIds = subnetIds;
  }


  public AddApplicationVpcConfigurationResponseVpcConfigurationDescription securityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
    return this;
  }

  /**
   * Get securityGroupIds
   * @return securityGroupIds
   */
  @javax.annotation.Nonnull
  public List getSecurityGroupIds() {
    return securityGroupIds;
  }

  public void setSecurityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApplicationVpcConfigurationResponseVpcConfigurationDescription addApplicationVpcConfigurationResponseVpcConfigurationDescription = (AddApplicationVpcConfigurationResponseVpcConfigurationDescription) o;
    return Objects.equals(this.vpcConfigurationId, addApplicationVpcConfigurationResponseVpcConfigurationDescription.vpcConfigurationId) &&
        Objects.equals(this.vpcId, addApplicationVpcConfigurationResponseVpcConfigurationDescription.vpcId) &&
        Objects.equals(this.subnetIds, addApplicationVpcConfigurationResponseVpcConfigurationDescription.subnetIds) &&
        Objects.equals(this.securityGroupIds, addApplicationVpcConfigurationResponseVpcConfigurationDescription.securityGroupIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcConfigurationId, vpcId, subnetIds, securityGroupIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApplicationVpcConfigurationResponseVpcConfigurationDescription {\n");
    sb.append("    vpcConfigurationId: ").append(toIndentedString(vpcConfigurationId)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcConfigurationId");
    openapiFields.add("VpcId");
    openapiFields.add("SubnetIds");
    openapiFields.add("SecurityGroupIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("VpcConfigurationId");
    openapiRequiredFields.add("VpcId");
    openapiRequiredFields.add("SubnetIds");
    openapiRequiredFields.add("SecurityGroupIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddApplicationVpcConfigurationResponseVpcConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddApplicationVpcConfigurationResponseVpcConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddApplicationVpcConfigurationResponseVpcConfigurationDescription is not found in the empty JSON string", AddApplicationVpcConfigurationResponseVpcConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddApplicationVpcConfigurationResponseVpcConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddApplicationVpcConfigurationResponseVpcConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddApplicationVpcConfigurationResponseVpcConfigurationDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VpcConfigurationId`
      String.validateJsonElement(jsonObj.get("VpcConfigurationId"));
      // validate the required field `VpcId`
      String.validateJsonElement(jsonObj.get("VpcId"));
      // validate the required field `SubnetIds`
      List.validateJsonElement(jsonObj.get("SubnetIds"));
      // validate the required field `SecurityGroupIds`
      List.validateJsonElement(jsonObj.get("SecurityGroupIds"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddApplicationVpcConfigurationResponseVpcConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddApplicationVpcConfigurationResponseVpcConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddApplicationVpcConfigurationResponseVpcConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddApplicationVpcConfigurationResponseVpcConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<AddApplicationVpcConfigurationResponseVpcConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, AddApplicationVpcConfigurationResponseVpcConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddApplicationVpcConfigurationResponseVpcConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddApplicationVpcConfigurationResponseVpcConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddApplicationVpcConfigurationResponseVpcConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to AddApplicationVpcConfigurationResponseVpcConfigurationDescription
   */
  public static AddApplicationVpcConfigurationResponseVpcConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddApplicationVpcConfigurationResponseVpcConfigurationDescription.class);
  }

  /**
   * Convert an instance of AddApplicationVpcConfigurationResponseVpcConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

