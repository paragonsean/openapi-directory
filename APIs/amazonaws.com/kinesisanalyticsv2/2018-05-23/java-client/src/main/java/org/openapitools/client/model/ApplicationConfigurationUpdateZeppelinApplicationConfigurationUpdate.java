/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeployAsApplicationConfigurationUpdate;
import org.openapitools.client.model.ZeppelinApplicationConfigurationUpdateCatalogConfigurationUpdate;
import org.openapitools.client.model.ZeppelinApplicationConfigurationUpdateMonitoringConfigurationUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate {
  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATION_UPDATE = "MonitoringConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATION_UPDATE)
  private ZeppelinApplicationConfigurationUpdateMonitoringConfigurationUpdate monitoringConfigurationUpdate;

  public static final String SERIALIZED_NAME_CATALOG_CONFIGURATION_UPDATE = "CatalogConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_CATALOG_CONFIGURATION_UPDATE)
  private ZeppelinApplicationConfigurationUpdateCatalogConfigurationUpdate catalogConfigurationUpdate;

  public static final String SERIALIZED_NAME_DEPLOY_AS_APPLICATION_CONFIGURATION_UPDATE = "DeployAsApplicationConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_DEPLOY_AS_APPLICATION_CONFIGURATION_UPDATE)
  private DeployAsApplicationConfigurationUpdate deployAsApplicationConfigurationUpdate;

  public static final String SERIALIZED_NAME_CUSTOM_ARTIFACTS_CONFIGURATION_UPDATE = "CustomArtifactsConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ARTIFACTS_CONFIGURATION_UPDATE)
  private List customArtifactsConfigurationUpdate;

  public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate() {
  }

  public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate monitoringConfigurationUpdate(ZeppelinApplicationConfigurationUpdateMonitoringConfigurationUpdate monitoringConfigurationUpdate) {
    this.monitoringConfigurationUpdate = monitoringConfigurationUpdate;
    return this;
  }

  /**
   * Get monitoringConfigurationUpdate
   * @return monitoringConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationUpdateMonitoringConfigurationUpdate getMonitoringConfigurationUpdate() {
    return monitoringConfigurationUpdate;
  }

  public void setMonitoringConfigurationUpdate(ZeppelinApplicationConfigurationUpdateMonitoringConfigurationUpdate monitoringConfigurationUpdate) {
    this.monitoringConfigurationUpdate = monitoringConfigurationUpdate;
  }


  public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate catalogConfigurationUpdate(ZeppelinApplicationConfigurationUpdateCatalogConfigurationUpdate catalogConfigurationUpdate) {
    this.catalogConfigurationUpdate = catalogConfigurationUpdate;
    return this;
  }

  /**
   * Get catalogConfigurationUpdate
   * @return catalogConfigurationUpdate
   */
  @javax.annotation.Nullable
  public ZeppelinApplicationConfigurationUpdateCatalogConfigurationUpdate getCatalogConfigurationUpdate() {
    return catalogConfigurationUpdate;
  }

  public void setCatalogConfigurationUpdate(ZeppelinApplicationConfigurationUpdateCatalogConfigurationUpdate catalogConfigurationUpdate) {
    this.catalogConfigurationUpdate = catalogConfigurationUpdate;
  }


  public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate deployAsApplicationConfigurationUpdate(DeployAsApplicationConfigurationUpdate deployAsApplicationConfigurationUpdate) {
    this.deployAsApplicationConfigurationUpdate = deployAsApplicationConfigurationUpdate;
    return this;
  }

  /**
   * Get deployAsApplicationConfigurationUpdate
   * @return deployAsApplicationConfigurationUpdate
   */
  @javax.annotation.Nullable
  public DeployAsApplicationConfigurationUpdate getDeployAsApplicationConfigurationUpdate() {
    return deployAsApplicationConfigurationUpdate;
  }

  public void setDeployAsApplicationConfigurationUpdate(DeployAsApplicationConfigurationUpdate deployAsApplicationConfigurationUpdate) {
    this.deployAsApplicationConfigurationUpdate = deployAsApplicationConfigurationUpdate;
  }


  public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate customArtifactsConfigurationUpdate(List customArtifactsConfigurationUpdate) {
    this.customArtifactsConfigurationUpdate = customArtifactsConfigurationUpdate;
    return this;
  }

  /**
   * Get customArtifactsConfigurationUpdate
   * @return customArtifactsConfigurationUpdate
   */
  @javax.annotation.Nullable
  public List getCustomArtifactsConfigurationUpdate() {
    return customArtifactsConfigurationUpdate;
  }

  public void setCustomArtifactsConfigurationUpdate(List customArtifactsConfigurationUpdate) {
    this.customArtifactsConfigurationUpdate = customArtifactsConfigurationUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate applicationConfigurationUpdateZeppelinApplicationConfigurationUpdate = (ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate) o;
    return Objects.equals(this.monitoringConfigurationUpdate, applicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.monitoringConfigurationUpdate) &&
        Objects.equals(this.catalogConfigurationUpdate, applicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.catalogConfigurationUpdate) &&
        Objects.equals(this.deployAsApplicationConfigurationUpdate, applicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.deployAsApplicationConfigurationUpdate) &&
        Objects.equals(this.customArtifactsConfigurationUpdate, applicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.customArtifactsConfigurationUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitoringConfigurationUpdate, catalogConfigurationUpdate, deployAsApplicationConfigurationUpdate, customArtifactsConfigurationUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate {\n");
    sb.append("    monitoringConfigurationUpdate: ").append(toIndentedString(monitoringConfigurationUpdate)).append("\n");
    sb.append("    catalogConfigurationUpdate: ").append(toIndentedString(catalogConfigurationUpdate)).append("\n");
    sb.append("    deployAsApplicationConfigurationUpdate: ").append(toIndentedString(deployAsApplicationConfigurationUpdate)).append("\n");
    sb.append("    customArtifactsConfigurationUpdate: ").append(toIndentedString(customArtifactsConfigurationUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitoringConfigurationUpdate");
    openapiFields.add("CatalogConfigurationUpdate");
    openapiFields.add("DeployAsApplicationConfigurationUpdate");
    openapiFields.add("CustomArtifactsConfigurationUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate is not found in the empty JSON string", ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MonitoringConfigurationUpdate`
      if (jsonObj.get("MonitoringConfigurationUpdate") != null && !jsonObj.get("MonitoringConfigurationUpdate").isJsonNull()) {
        ZeppelinApplicationConfigurationUpdateMonitoringConfigurationUpdate.validateJsonElement(jsonObj.get("MonitoringConfigurationUpdate"));
      }
      // validate the optional field `CatalogConfigurationUpdate`
      if (jsonObj.get("CatalogConfigurationUpdate") != null && !jsonObj.get("CatalogConfigurationUpdate").isJsonNull()) {
        ZeppelinApplicationConfigurationUpdateCatalogConfigurationUpdate.validateJsonElement(jsonObj.get("CatalogConfigurationUpdate"));
      }
      // validate the optional field `DeployAsApplicationConfigurationUpdate`
      if (jsonObj.get("DeployAsApplicationConfigurationUpdate") != null && !jsonObj.get("DeployAsApplicationConfigurationUpdate").isJsonNull()) {
        DeployAsApplicationConfigurationUpdate.validateJsonElement(jsonObj.get("DeployAsApplicationConfigurationUpdate"));
      }
      // validate the optional field `CustomArtifactsConfigurationUpdate`
      if (jsonObj.get("CustomArtifactsConfigurationUpdate") != null && !jsonObj.get("CustomArtifactsConfigurationUpdate").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomArtifactsConfigurationUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate
   */
  public static ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationUpdateZeppelinApplicationConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

