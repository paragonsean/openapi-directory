/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an application&#39;s checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see &lt;a href&#x3D;\&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/concepts/programming-model.html#checkpoints-for-fault-tolerance\&quot;&gt; Checkpoints for Fault Tolerance&lt;/a&gt; in the &lt;a href&#x3D;\&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/\&quot;&gt;Apache Flink Documentation&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckpointConfiguration {
  public static final String SERIALIZED_NAME_CONFIGURATION_TYPE = "ConfigurationType";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TYPE)
  private ConfigurationType configurationType;

  public static final String SERIALIZED_NAME_CHECKPOINTING_ENABLED = "CheckpointingEnabled";
  @SerializedName(SERIALIZED_NAME_CHECKPOINTING_ENABLED)
  private Boolean checkpointingEnabled;

  public static final String SERIALIZED_NAME_CHECKPOINT_INTERVAL = "CheckpointInterval";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_INTERVAL)
  private Integer checkpointInterval;

  public static final String SERIALIZED_NAME_MIN_PAUSE_BETWEEN_CHECKPOINTS = "MinPauseBetweenCheckpoints";
  @SerializedName(SERIALIZED_NAME_MIN_PAUSE_BETWEEN_CHECKPOINTS)
  private Integer minPauseBetweenCheckpoints;

  public CheckpointConfiguration() {
  }

  public CheckpointConfiguration configurationType(ConfigurationType configurationType) {
    this.configurationType = configurationType;
    return this;
  }

  /**
   * Get configurationType
   * @return configurationType
   */
  @javax.annotation.Nonnull
  public ConfigurationType getConfigurationType() {
    return configurationType;
  }

  public void setConfigurationType(ConfigurationType configurationType) {
    this.configurationType = configurationType;
  }


  public CheckpointConfiguration checkpointingEnabled(Boolean checkpointingEnabled) {
    this.checkpointingEnabled = checkpointingEnabled;
    return this;
  }

  /**
   * Get checkpointingEnabled
   * @return checkpointingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCheckpointingEnabled() {
    return checkpointingEnabled;
  }

  public void setCheckpointingEnabled(Boolean checkpointingEnabled) {
    this.checkpointingEnabled = checkpointingEnabled;
  }


  public CheckpointConfiguration checkpointInterval(Integer checkpointInterval) {
    this.checkpointInterval = checkpointInterval;
    return this;
  }

  /**
   * Get checkpointInterval
   * @return checkpointInterval
   */
  @javax.annotation.Nullable
  public Integer getCheckpointInterval() {
    return checkpointInterval;
  }

  public void setCheckpointInterval(Integer checkpointInterval) {
    this.checkpointInterval = checkpointInterval;
  }


  public CheckpointConfiguration minPauseBetweenCheckpoints(Integer minPauseBetweenCheckpoints) {
    this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints;
    return this;
  }

  /**
   * Get minPauseBetweenCheckpoints
   * @return minPauseBetweenCheckpoints
   */
  @javax.annotation.Nullable
  public Integer getMinPauseBetweenCheckpoints() {
    return minPauseBetweenCheckpoints;
  }

  public void setMinPauseBetweenCheckpoints(Integer minPauseBetweenCheckpoints) {
    this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckpointConfiguration checkpointConfiguration = (CheckpointConfiguration) o;
    return Objects.equals(this.configurationType, checkpointConfiguration.configurationType) &&
        Objects.equals(this.checkpointingEnabled, checkpointConfiguration.checkpointingEnabled) &&
        Objects.equals(this.checkpointInterval, checkpointConfiguration.checkpointInterval) &&
        Objects.equals(this.minPauseBetweenCheckpoints, checkpointConfiguration.minPauseBetweenCheckpoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationType, checkpointingEnabled, checkpointInterval, minPauseBetweenCheckpoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckpointConfiguration {\n");
    sb.append("    configurationType: ").append(toIndentedString(configurationType)).append("\n");
    sb.append("    checkpointingEnabled: ").append(toIndentedString(checkpointingEnabled)).append("\n");
    sb.append("    checkpointInterval: ").append(toIndentedString(checkpointInterval)).append("\n");
    sb.append("    minPauseBetweenCheckpoints: ").append(toIndentedString(minPauseBetweenCheckpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationType");
    openapiFields.add("CheckpointingEnabled");
    openapiFields.add("CheckpointInterval");
    openapiFields.add("MinPauseBetweenCheckpoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ConfigurationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckpointConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckpointConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckpointConfiguration is not found in the empty JSON string", CheckpointConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckpointConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckpointConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckpointConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ConfigurationType`
      ConfigurationType.validateJsonElement(jsonObj.get("ConfigurationType"));
      // validate the optional field `CheckpointingEnabled`
      if (jsonObj.get("CheckpointingEnabled") != null && !jsonObj.get("CheckpointingEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CheckpointingEnabled"));
      }
      // validate the optional field `CheckpointInterval`
      if (jsonObj.get("CheckpointInterval") != null && !jsonObj.get("CheckpointInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CheckpointInterval"));
      }
      // validate the optional field `MinPauseBetweenCheckpoints`
      if (jsonObj.get("MinPauseBetweenCheckpoints") != null && !jsonObj.get("MinPauseBetweenCheckpoints").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinPauseBetweenCheckpoints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckpointConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckpointConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckpointConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckpointConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckpointConfiguration>() {
           @Override
           public void write(JsonWriter out, CheckpointConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckpointConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckpointConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckpointConfiguration
   * @throws IOException if the JSON string is invalid with respect to CheckpointConfiguration
   */
  public static CheckpointConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckpointConfiguration.class);
  }

  /**
   * Convert an instance of CheckpointConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

