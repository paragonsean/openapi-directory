/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlinkApplicationConfigurationDescriptionCheckpointConfigurationDescription;
import org.openapitools.client.model.FlinkApplicationConfigurationDescriptionMonitoringConfigurationDescription;
import org.openapitools.client.model.FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes configuration parameters for a Flink-based Kinesis Data Analytics application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlinkApplicationConfigurationDescription {
  public static final String SERIALIZED_NAME_CHECKPOINT_CONFIGURATION_DESCRIPTION = "CheckpointConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_CONFIGURATION_DESCRIPTION)
  private FlinkApplicationConfigurationDescriptionCheckpointConfigurationDescription checkpointConfigurationDescription;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATION_DESCRIPTION = "MonitoringConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATION_DESCRIPTION)
  private FlinkApplicationConfigurationDescriptionMonitoringConfigurationDescription monitoringConfigurationDescription;

  public static final String SERIALIZED_NAME_PARALLELISM_CONFIGURATION_DESCRIPTION = "ParallelismConfigurationDescription";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_CONFIGURATION_DESCRIPTION)
  private FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription parallelismConfigurationDescription;

  public static final String SERIALIZED_NAME_JOB_PLAN_DESCRIPTION = "JobPlanDescription";
  @SerializedName(SERIALIZED_NAME_JOB_PLAN_DESCRIPTION)
  private String jobPlanDescription;

  public FlinkApplicationConfigurationDescription() {
  }

  public FlinkApplicationConfigurationDescription checkpointConfigurationDescription(FlinkApplicationConfigurationDescriptionCheckpointConfigurationDescription checkpointConfigurationDescription) {
    this.checkpointConfigurationDescription = checkpointConfigurationDescription;
    return this;
  }

  /**
   * Get checkpointConfigurationDescription
   * @return checkpointConfigurationDescription
   */
  @javax.annotation.Nullable
  public FlinkApplicationConfigurationDescriptionCheckpointConfigurationDescription getCheckpointConfigurationDescription() {
    return checkpointConfigurationDescription;
  }

  public void setCheckpointConfigurationDescription(FlinkApplicationConfigurationDescriptionCheckpointConfigurationDescription checkpointConfigurationDescription) {
    this.checkpointConfigurationDescription = checkpointConfigurationDescription;
  }


  public FlinkApplicationConfigurationDescription monitoringConfigurationDescription(FlinkApplicationConfigurationDescriptionMonitoringConfigurationDescription monitoringConfigurationDescription) {
    this.monitoringConfigurationDescription = monitoringConfigurationDescription;
    return this;
  }

  /**
   * Get monitoringConfigurationDescription
   * @return monitoringConfigurationDescription
   */
  @javax.annotation.Nullable
  public FlinkApplicationConfigurationDescriptionMonitoringConfigurationDescription getMonitoringConfigurationDescription() {
    return monitoringConfigurationDescription;
  }

  public void setMonitoringConfigurationDescription(FlinkApplicationConfigurationDescriptionMonitoringConfigurationDescription monitoringConfigurationDescription) {
    this.monitoringConfigurationDescription = monitoringConfigurationDescription;
  }


  public FlinkApplicationConfigurationDescription parallelismConfigurationDescription(FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription parallelismConfigurationDescription) {
    this.parallelismConfigurationDescription = parallelismConfigurationDescription;
    return this;
  }

  /**
   * Get parallelismConfigurationDescription
   * @return parallelismConfigurationDescription
   */
  @javax.annotation.Nullable
  public FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription getParallelismConfigurationDescription() {
    return parallelismConfigurationDescription;
  }

  public void setParallelismConfigurationDescription(FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription parallelismConfigurationDescription) {
    this.parallelismConfigurationDescription = parallelismConfigurationDescription;
  }


  public FlinkApplicationConfigurationDescription jobPlanDescription(String jobPlanDescription) {
    this.jobPlanDescription = jobPlanDescription;
    return this;
  }

  /**
   * Get jobPlanDescription
   * @return jobPlanDescription
   */
  @javax.annotation.Nullable
  public String getJobPlanDescription() {
    return jobPlanDescription;
  }

  public void setJobPlanDescription(String jobPlanDescription) {
    this.jobPlanDescription = jobPlanDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlinkApplicationConfigurationDescription flinkApplicationConfigurationDescription = (FlinkApplicationConfigurationDescription) o;
    return Objects.equals(this.checkpointConfigurationDescription, flinkApplicationConfigurationDescription.checkpointConfigurationDescription) &&
        Objects.equals(this.monitoringConfigurationDescription, flinkApplicationConfigurationDescription.monitoringConfigurationDescription) &&
        Objects.equals(this.parallelismConfigurationDescription, flinkApplicationConfigurationDescription.parallelismConfigurationDescription) &&
        Objects.equals(this.jobPlanDescription, flinkApplicationConfigurationDescription.jobPlanDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkpointConfigurationDescription, monitoringConfigurationDescription, parallelismConfigurationDescription, jobPlanDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlinkApplicationConfigurationDescription {\n");
    sb.append("    checkpointConfigurationDescription: ").append(toIndentedString(checkpointConfigurationDescription)).append("\n");
    sb.append("    monitoringConfigurationDescription: ").append(toIndentedString(monitoringConfigurationDescription)).append("\n");
    sb.append("    parallelismConfigurationDescription: ").append(toIndentedString(parallelismConfigurationDescription)).append("\n");
    sb.append("    jobPlanDescription: ").append(toIndentedString(jobPlanDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CheckpointConfigurationDescription");
    openapiFields.add("MonitoringConfigurationDescription");
    openapiFields.add("ParallelismConfigurationDescription");
    openapiFields.add("JobPlanDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlinkApplicationConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlinkApplicationConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlinkApplicationConfigurationDescription is not found in the empty JSON string", FlinkApplicationConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlinkApplicationConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlinkApplicationConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CheckpointConfigurationDescription`
      if (jsonObj.get("CheckpointConfigurationDescription") != null && !jsonObj.get("CheckpointConfigurationDescription").isJsonNull()) {
        FlinkApplicationConfigurationDescriptionCheckpointConfigurationDescription.validateJsonElement(jsonObj.get("CheckpointConfigurationDescription"));
      }
      // validate the optional field `MonitoringConfigurationDescription`
      if (jsonObj.get("MonitoringConfigurationDescription") != null && !jsonObj.get("MonitoringConfigurationDescription").isJsonNull()) {
        FlinkApplicationConfigurationDescriptionMonitoringConfigurationDescription.validateJsonElement(jsonObj.get("MonitoringConfigurationDescription"));
      }
      // validate the optional field `ParallelismConfigurationDescription`
      if (jsonObj.get("ParallelismConfigurationDescription") != null && !jsonObj.get("ParallelismConfigurationDescription").isJsonNull()) {
        FlinkApplicationConfigurationDescriptionParallelismConfigurationDescription.validateJsonElement(jsonObj.get("ParallelismConfigurationDescription"));
      }
      // validate the optional field `JobPlanDescription`
      if (jsonObj.get("JobPlanDescription") != null && !jsonObj.get("JobPlanDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobPlanDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlinkApplicationConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlinkApplicationConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlinkApplicationConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlinkApplicationConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<FlinkApplicationConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, FlinkApplicationConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlinkApplicationConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlinkApplicationConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlinkApplicationConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to FlinkApplicationConfigurationDescription
   */
  public static FlinkApplicationConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlinkApplicationConfigurationDescription.class);
  }

  /**
   * Convert an instance of FlinkApplicationConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

