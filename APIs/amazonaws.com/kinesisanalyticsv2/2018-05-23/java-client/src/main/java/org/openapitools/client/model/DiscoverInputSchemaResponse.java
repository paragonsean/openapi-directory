/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiscoverInputSchemaResponseInputSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DiscoverInputSchemaResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoverInputSchemaResponse {
  public static final String SERIALIZED_NAME_INPUT_SCHEMA = "InputSchema";
  @SerializedName(SERIALIZED_NAME_INPUT_SCHEMA)
  private DiscoverInputSchemaResponseInputSchema inputSchema;

  public static final String SERIALIZED_NAME_PARSED_INPUT_RECORDS = "ParsedInputRecords";
  @SerializedName(SERIALIZED_NAME_PARSED_INPUT_RECORDS)
  private List parsedInputRecords;

  public static final String SERIALIZED_NAME_PROCESSED_INPUT_RECORDS = "ProcessedInputRecords";
  @SerializedName(SERIALIZED_NAME_PROCESSED_INPUT_RECORDS)
  private List processedInputRecords;

  public static final String SERIALIZED_NAME_RAW_INPUT_RECORDS = "RawInputRecords";
  @SerializedName(SERIALIZED_NAME_RAW_INPUT_RECORDS)
  private List rawInputRecords;

  public DiscoverInputSchemaResponse() {
  }

  public DiscoverInputSchemaResponse inputSchema(DiscoverInputSchemaResponseInputSchema inputSchema) {
    this.inputSchema = inputSchema;
    return this;
  }

  /**
   * Get inputSchema
   * @return inputSchema
   */
  @javax.annotation.Nullable
  public DiscoverInputSchemaResponseInputSchema getInputSchema() {
    return inputSchema;
  }

  public void setInputSchema(DiscoverInputSchemaResponseInputSchema inputSchema) {
    this.inputSchema = inputSchema;
  }


  public DiscoverInputSchemaResponse parsedInputRecords(List parsedInputRecords) {
    this.parsedInputRecords = parsedInputRecords;
    return this;
  }

  /**
   * Get parsedInputRecords
   * @return parsedInputRecords
   */
  @javax.annotation.Nullable
  public List getParsedInputRecords() {
    return parsedInputRecords;
  }

  public void setParsedInputRecords(List parsedInputRecords) {
    this.parsedInputRecords = parsedInputRecords;
  }


  public DiscoverInputSchemaResponse processedInputRecords(List processedInputRecords) {
    this.processedInputRecords = processedInputRecords;
    return this;
  }

  /**
   * Get processedInputRecords
   * @return processedInputRecords
   */
  @javax.annotation.Nullable
  public List getProcessedInputRecords() {
    return processedInputRecords;
  }

  public void setProcessedInputRecords(List processedInputRecords) {
    this.processedInputRecords = processedInputRecords;
  }


  public DiscoverInputSchemaResponse rawInputRecords(List rawInputRecords) {
    this.rawInputRecords = rawInputRecords;
    return this;
  }

  /**
   * Get rawInputRecords
   * @return rawInputRecords
   */
  @javax.annotation.Nullable
  public List getRawInputRecords() {
    return rawInputRecords;
  }

  public void setRawInputRecords(List rawInputRecords) {
    this.rawInputRecords = rawInputRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoverInputSchemaResponse discoverInputSchemaResponse = (DiscoverInputSchemaResponse) o;
    return Objects.equals(this.inputSchema, discoverInputSchemaResponse.inputSchema) &&
        Objects.equals(this.parsedInputRecords, discoverInputSchemaResponse.parsedInputRecords) &&
        Objects.equals(this.processedInputRecords, discoverInputSchemaResponse.processedInputRecords) &&
        Objects.equals(this.rawInputRecords, discoverInputSchemaResponse.rawInputRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputSchema, parsedInputRecords, processedInputRecords, rawInputRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoverInputSchemaResponse {\n");
    sb.append("    inputSchema: ").append(toIndentedString(inputSchema)).append("\n");
    sb.append("    parsedInputRecords: ").append(toIndentedString(parsedInputRecords)).append("\n");
    sb.append("    processedInputRecords: ").append(toIndentedString(processedInputRecords)).append("\n");
    sb.append("    rawInputRecords: ").append(toIndentedString(rawInputRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputSchema");
    openapiFields.add("ParsedInputRecords");
    openapiFields.add("ProcessedInputRecords");
    openapiFields.add("RawInputRecords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoverInputSchemaResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoverInputSchemaResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoverInputSchemaResponse is not found in the empty JSON string", DiscoverInputSchemaResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoverInputSchemaResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoverInputSchemaResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InputSchema`
      if (jsonObj.get("InputSchema") != null && !jsonObj.get("InputSchema").isJsonNull()) {
        DiscoverInputSchemaResponseInputSchema.validateJsonElement(jsonObj.get("InputSchema"));
      }
      // validate the optional field `ParsedInputRecords`
      if (jsonObj.get("ParsedInputRecords") != null && !jsonObj.get("ParsedInputRecords").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ParsedInputRecords"));
      }
      // validate the optional field `ProcessedInputRecords`
      if (jsonObj.get("ProcessedInputRecords") != null && !jsonObj.get("ProcessedInputRecords").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProcessedInputRecords"));
      }
      // validate the optional field `RawInputRecords`
      if (jsonObj.get("RawInputRecords") != null && !jsonObj.get("RawInputRecords").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RawInputRecords"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoverInputSchemaResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoverInputSchemaResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoverInputSchemaResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoverInputSchemaResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoverInputSchemaResponse>() {
           @Override
           public void write(JsonWriter out, DiscoverInputSchemaResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoverInputSchemaResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoverInputSchemaResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoverInputSchemaResponse
   * @throws IOException if the JSON string is invalid with respect to DiscoverInputSchemaResponse
   */
  public static DiscoverInputSchemaResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoverInputSchemaResponse.class);
  }

  /**
   * Convert an instance of DiscoverInputSchemaResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

