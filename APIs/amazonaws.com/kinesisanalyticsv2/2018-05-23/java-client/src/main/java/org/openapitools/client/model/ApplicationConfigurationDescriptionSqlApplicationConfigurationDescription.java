/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription {
  public static final String SERIALIZED_NAME_INPUT_DESCRIPTIONS = "InputDescriptions";
  @SerializedName(SERIALIZED_NAME_INPUT_DESCRIPTIONS)
  private List inputDescriptions;

  public static final String SERIALIZED_NAME_OUTPUT_DESCRIPTIONS = "OutputDescriptions";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DESCRIPTIONS)
  private List outputDescriptions;

  public static final String SERIALIZED_NAME_REFERENCE_DATA_SOURCE_DESCRIPTIONS = "ReferenceDataSourceDescriptions";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DATA_SOURCE_DESCRIPTIONS)
  private List referenceDataSourceDescriptions;

  public ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription() {
  }

  public ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription inputDescriptions(List inputDescriptions) {
    this.inputDescriptions = inputDescriptions;
    return this;
  }

  /**
   * Get inputDescriptions
   * @return inputDescriptions
   */
  @javax.annotation.Nullable
  public List getInputDescriptions() {
    return inputDescriptions;
  }

  public void setInputDescriptions(List inputDescriptions) {
    this.inputDescriptions = inputDescriptions;
  }


  public ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription outputDescriptions(List outputDescriptions) {
    this.outputDescriptions = outputDescriptions;
    return this;
  }

  /**
   * Get outputDescriptions
   * @return outputDescriptions
   */
  @javax.annotation.Nullable
  public List getOutputDescriptions() {
    return outputDescriptions;
  }

  public void setOutputDescriptions(List outputDescriptions) {
    this.outputDescriptions = outputDescriptions;
  }


  public ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription referenceDataSourceDescriptions(List referenceDataSourceDescriptions) {
    this.referenceDataSourceDescriptions = referenceDataSourceDescriptions;
    return this;
  }

  /**
   * Get referenceDataSourceDescriptions
   * @return referenceDataSourceDescriptions
   */
  @javax.annotation.Nullable
  public List getReferenceDataSourceDescriptions() {
    return referenceDataSourceDescriptions;
  }

  public void setReferenceDataSourceDescriptions(List referenceDataSourceDescriptions) {
    this.referenceDataSourceDescriptions = referenceDataSourceDescriptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription applicationConfigurationDescriptionSqlApplicationConfigurationDescription = (ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription) o;
    return Objects.equals(this.inputDescriptions, applicationConfigurationDescriptionSqlApplicationConfigurationDescription.inputDescriptions) &&
        Objects.equals(this.outputDescriptions, applicationConfigurationDescriptionSqlApplicationConfigurationDescription.outputDescriptions) &&
        Objects.equals(this.referenceDataSourceDescriptions, applicationConfigurationDescriptionSqlApplicationConfigurationDescription.referenceDataSourceDescriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputDescriptions, outputDescriptions, referenceDataSourceDescriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription {\n");
    sb.append("    inputDescriptions: ").append(toIndentedString(inputDescriptions)).append("\n");
    sb.append("    outputDescriptions: ").append(toIndentedString(outputDescriptions)).append("\n");
    sb.append("    referenceDataSourceDescriptions: ").append(toIndentedString(referenceDataSourceDescriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputDescriptions");
    openapiFields.add("OutputDescriptions");
    openapiFields.add("ReferenceDataSourceDescriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription is not found in the empty JSON string", ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InputDescriptions`
      if (jsonObj.get("InputDescriptions") != null && !jsonObj.get("InputDescriptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputDescriptions"));
      }
      // validate the optional field `OutputDescriptions`
      if (jsonObj.get("OutputDescriptions") != null && !jsonObj.get("OutputDescriptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputDescriptions"));
      }
      // validate the optional field `ReferenceDataSourceDescriptions`
      if (jsonObj.get("ReferenceDataSourceDescriptions") != null && !jsonObj.get("ReferenceDataSourceDescriptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReferenceDataSourceDescriptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription
   */
  public static ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationDescriptionSqlApplicationConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

