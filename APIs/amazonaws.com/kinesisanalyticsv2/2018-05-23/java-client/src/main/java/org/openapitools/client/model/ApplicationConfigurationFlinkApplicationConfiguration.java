/*
 * Amazon Kinesis Analytics
 * Amazon Kinesis Data Analytics is a fully managed service that you can use to process and analyze streaming data using Java, SQL, or Scala. The service enables you to quickly author and run Java, SQL, or Scala code against streaming sources to perform time series analytics, feed real-time dashboards, and create real-time metrics.
 *
 * The version of the OpenAPI document: 2018-05-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlinkApplicationConfigurationCheckpointConfiguration;
import org.openapitools.client.model.FlinkApplicationConfigurationMonitoringConfiguration;
import org.openapitools.client.model.FlinkApplicationConfigurationParallelismConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationConfigurationFlinkApplicationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:08.997491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationConfigurationFlinkApplicationConfiguration {
  public static final String SERIALIZED_NAME_CHECKPOINT_CONFIGURATION = "CheckpointConfiguration";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_CONFIGURATION)
  private FlinkApplicationConfigurationCheckpointConfiguration checkpointConfiguration;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATION = "MonitoringConfiguration";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATION)
  private FlinkApplicationConfigurationMonitoringConfiguration monitoringConfiguration;

  public static final String SERIALIZED_NAME_PARALLELISM_CONFIGURATION = "ParallelismConfiguration";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_CONFIGURATION)
  private FlinkApplicationConfigurationParallelismConfiguration parallelismConfiguration;

  public ApplicationConfigurationFlinkApplicationConfiguration() {
  }

  public ApplicationConfigurationFlinkApplicationConfiguration checkpointConfiguration(FlinkApplicationConfigurationCheckpointConfiguration checkpointConfiguration) {
    this.checkpointConfiguration = checkpointConfiguration;
    return this;
  }

  /**
   * Get checkpointConfiguration
   * @return checkpointConfiguration
   */
  @javax.annotation.Nullable
  public FlinkApplicationConfigurationCheckpointConfiguration getCheckpointConfiguration() {
    return checkpointConfiguration;
  }

  public void setCheckpointConfiguration(FlinkApplicationConfigurationCheckpointConfiguration checkpointConfiguration) {
    this.checkpointConfiguration = checkpointConfiguration;
  }


  public ApplicationConfigurationFlinkApplicationConfiguration monitoringConfiguration(FlinkApplicationConfigurationMonitoringConfiguration monitoringConfiguration) {
    this.monitoringConfiguration = monitoringConfiguration;
    return this;
  }

  /**
   * Get monitoringConfiguration
   * @return monitoringConfiguration
   */
  @javax.annotation.Nullable
  public FlinkApplicationConfigurationMonitoringConfiguration getMonitoringConfiguration() {
    return monitoringConfiguration;
  }

  public void setMonitoringConfiguration(FlinkApplicationConfigurationMonitoringConfiguration monitoringConfiguration) {
    this.monitoringConfiguration = monitoringConfiguration;
  }


  public ApplicationConfigurationFlinkApplicationConfiguration parallelismConfiguration(FlinkApplicationConfigurationParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
    return this;
  }

  /**
   * Get parallelismConfiguration
   * @return parallelismConfiguration
   */
  @javax.annotation.Nullable
  public FlinkApplicationConfigurationParallelismConfiguration getParallelismConfiguration() {
    return parallelismConfiguration;
  }

  public void setParallelismConfiguration(FlinkApplicationConfigurationParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationConfigurationFlinkApplicationConfiguration applicationConfigurationFlinkApplicationConfiguration = (ApplicationConfigurationFlinkApplicationConfiguration) o;
    return Objects.equals(this.checkpointConfiguration, applicationConfigurationFlinkApplicationConfiguration.checkpointConfiguration) &&
        Objects.equals(this.monitoringConfiguration, applicationConfigurationFlinkApplicationConfiguration.monitoringConfiguration) &&
        Objects.equals(this.parallelismConfiguration, applicationConfigurationFlinkApplicationConfiguration.parallelismConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkpointConfiguration, monitoringConfiguration, parallelismConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationConfigurationFlinkApplicationConfiguration {\n");
    sb.append("    checkpointConfiguration: ").append(toIndentedString(checkpointConfiguration)).append("\n");
    sb.append("    monitoringConfiguration: ").append(toIndentedString(monitoringConfiguration)).append("\n");
    sb.append("    parallelismConfiguration: ").append(toIndentedString(parallelismConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CheckpointConfiguration");
    openapiFields.add("MonitoringConfiguration");
    openapiFields.add("ParallelismConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationConfigurationFlinkApplicationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationConfigurationFlinkApplicationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationConfigurationFlinkApplicationConfiguration is not found in the empty JSON string", ApplicationConfigurationFlinkApplicationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationConfigurationFlinkApplicationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationConfigurationFlinkApplicationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CheckpointConfiguration`
      if (jsonObj.get("CheckpointConfiguration") != null && !jsonObj.get("CheckpointConfiguration").isJsonNull()) {
        FlinkApplicationConfigurationCheckpointConfiguration.validateJsonElement(jsonObj.get("CheckpointConfiguration"));
      }
      // validate the optional field `MonitoringConfiguration`
      if (jsonObj.get("MonitoringConfiguration") != null && !jsonObj.get("MonitoringConfiguration").isJsonNull()) {
        FlinkApplicationConfigurationMonitoringConfiguration.validateJsonElement(jsonObj.get("MonitoringConfiguration"));
      }
      // validate the optional field `ParallelismConfiguration`
      if (jsonObj.get("ParallelismConfiguration") != null && !jsonObj.get("ParallelismConfiguration").isJsonNull()) {
        FlinkApplicationConfigurationParallelismConfiguration.validateJsonElement(jsonObj.get("ParallelismConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationConfigurationFlinkApplicationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationConfigurationFlinkApplicationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationConfigurationFlinkApplicationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationConfigurationFlinkApplicationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationConfigurationFlinkApplicationConfiguration>() {
           @Override
           public void write(JsonWriter out, ApplicationConfigurationFlinkApplicationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationConfigurationFlinkApplicationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationConfigurationFlinkApplicationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationConfigurationFlinkApplicationConfiguration
   * @throws IOException if the JSON string is invalid with respect to ApplicationConfigurationFlinkApplicationConfiguration
   */
  public static ApplicationConfigurationFlinkApplicationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationConfigurationFlinkApplicationConfiguration.class);
  }

  /**
   * Convert an instance of ApplicationConfigurationFlinkApplicationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

