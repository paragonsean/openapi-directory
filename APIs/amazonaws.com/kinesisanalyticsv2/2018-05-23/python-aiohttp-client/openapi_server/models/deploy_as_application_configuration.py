# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deploy_as_application_configuration_s3_content_location import DeployAsApplicationConfigurationS3ContentLocation
from openapi_server import util


class DeployAsApplicationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_content_location: DeployAsApplicationConfigurationS3ContentLocation=None):
        """DeployAsApplicationConfiguration - a model defined in OpenAPI

        :param s3_content_location: The s3_content_location of this DeployAsApplicationConfiguration.
        """
        self.openapi_types = {
            's3_content_location': DeployAsApplicationConfigurationS3ContentLocation
        }

        self.attribute_map = {
            's3_content_location': 'S3ContentLocation'
        }

        self._s3_content_location = s3_content_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployAsApplicationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployAsApplicationConfiguration of this DeployAsApplicationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_content_location(self):
        """Gets the s3_content_location of this DeployAsApplicationConfiguration.


        :return: The s3_content_location of this DeployAsApplicationConfiguration.
        :rtype: DeployAsApplicationConfigurationS3ContentLocation
        """
        return self._s3_content_location

    @s3_content_location.setter
    def s3_content_location(self, s3_content_location):
        """Sets the s3_content_location of this DeployAsApplicationConfiguration.


        :param s3_content_location: The s3_content_location of this DeployAsApplicationConfiguration.
        :type s3_content_location: DeployAsApplicationConfigurationS3ContentLocation
        """
        if s3_content_location is None:
            raise ValueError("Invalid value for `s3_content_location`, must not be `None`")

        self._s3_content_location = s3_content_location
