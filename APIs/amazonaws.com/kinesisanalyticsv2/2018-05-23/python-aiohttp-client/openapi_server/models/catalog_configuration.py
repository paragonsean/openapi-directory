# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_configuration_glue_data_catalog_configuration import CatalogConfigurationGlueDataCatalogConfiguration
from openapi_server import util


class CatalogConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, glue_data_catalog_configuration: CatalogConfigurationGlueDataCatalogConfiguration=None):
        """CatalogConfiguration - a model defined in OpenAPI

        :param glue_data_catalog_configuration: The glue_data_catalog_configuration of this CatalogConfiguration.
        """
        self.openapi_types = {
            'glue_data_catalog_configuration': CatalogConfigurationGlueDataCatalogConfiguration
        }

        self.attribute_map = {
            'glue_data_catalog_configuration': 'GlueDataCatalogConfiguration'
        }

        self._glue_data_catalog_configuration = glue_data_catalog_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogConfiguration of this CatalogConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def glue_data_catalog_configuration(self):
        """Gets the glue_data_catalog_configuration of this CatalogConfiguration.


        :return: The glue_data_catalog_configuration of this CatalogConfiguration.
        :rtype: CatalogConfigurationGlueDataCatalogConfiguration
        """
        return self._glue_data_catalog_configuration

    @glue_data_catalog_configuration.setter
    def glue_data_catalog_configuration(self, glue_data_catalog_configuration):
        """Sets the glue_data_catalog_configuration of this CatalogConfiguration.


        :param glue_data_catalog_configuration: The glue_data_catalog_configuration of this CatalogConfiguration.
        :type glue_data_catalog_configuration: CatalogConfigurationGlueDataCatalogConfiguration
        """
        if glue_data_catalog_configuration is None:
            raise ValueError("Invalid value for `glue_data_catalog_configuration`, must not be `None`")

        self._glue_data_catalog_configuration = glue_data_catalog_configuration
