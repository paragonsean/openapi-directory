# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MavenReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, artifact_id: str=None, version: str=None):
        """MavenReference - a model defined in OpenAPI

        :param group_id: The group_id of this MavenReference.
        :param artifact_id: The artifact_id of this MavenReference.
        :param version: The version of this MavenReference.
        """
        self.openapi_types = {
            'group_id': str,
            'artifact_id': str,
            'version': str
        }

        self.attribute_map = {
            'group_id': 'GroupId',
            'artifact_id': 'ArtifactId',
            'version': 'Version'
        }

        self._group_id = group_id
        self._artifact_id = artifact_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MavenReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MavenReference of this MavenReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this MavenReference.


        :return: The group_id of this MavenReference.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this MavenReference.


        :param group_id: The group_id of this MavenReference.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def artifact_id(self):
        """Gets the artifact_id of this MavenReference.


        :return: The artifact_id of this MavenReference.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this MavenReference.


        :param artifact_id: The artifact_id of this MavenReference.
        :type artifact_id: str
        """
        if artifact_id is None:
            raise ValueError("Invalid value for `artifact_id`, must not be `None`")

        self._artifact_id = artifact_id

    @property
    def version(self):
        """Gets the version of this MavenReference.


        :return: The version of this MavenReference.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MavenReference.


        :param version: The version of this MavenReference.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
