# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputParallelismUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count_update: int=None):
        """InputParallelismUpdate - a model defined in OpenAPI

        :param count_update: The count_update of this InputParallelismUpdate.
        """
        self.openapi_types = {
            'count_update': int
        }

        self.attribute_map = {
            'count_update': 'CountUpdate'
        }

        self._count_update = count_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputParallelismUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputParallelismUpdate of this InputParallelismUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count_update(self):
        """Gets the count_update of this InputParallelismUpdate.


        :return: The count_update of this InputParallelismUpdate.
        :rtype: int
        """
        return self._count_update

    @count_update.setter
    def count_update(self, count_update):
        """Sets the count_update of this InputParallelismUpdate.


        :param count_update: The count_update of this InputParallelismUpdate.
        :type count_update: int
        """
        if count_update is None:
            raise ValueError("Invalid value for `count_update`, must not be `None`")

        self._count_update = count_update
