# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudWatchLoggingOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_stream_arn: str=None):
        """CloudWatchLoggingOption - a model defined in OpenAPI

        :param log_stream_arn: The log_stream_arn of this CloudWatchLoggingOption.
        """
        self.openapi_types = {
            'log_stream_arn': str
        }

        self.attribute_map = {
            'log_stream_arn': 'LogStreamARN'
        }

        self._log_stream_arn = log_stream_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchLoggingOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchLoggingOption of this CloudWatchLoggingOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_stream_arn(self):
        """Gets the log_stream_arn of this CloudWatchLoggingOption.


        :return: The log_stream_arn of this CloudWatchLoggingOption.
        :rtype: str
        """
        return self._log_stream_arn

    @log_stream_arn.setter
    def log_stream_arn(self, log_stream_arn):
        """Sets the log_stream_arn of this CloudWatchLoggingOption.


        :param log_stream_arn: The log_stream_arn of this CloudWatchLoggingOption.
        :type log_stream_arn: str
        """
        if log_stream_arn is None:
            raise ValueError("Invalid value for `log_stream_arn`, must not be `None`")

        self._log_stream_arn = log_stream_arn
