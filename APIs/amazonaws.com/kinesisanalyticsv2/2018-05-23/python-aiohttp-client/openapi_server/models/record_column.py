# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecordColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, mapping: str=None, sql_type: str=None):
        """RecordColumn - a model defined in OpenAPI

        :param name: The name of this RecordColumn.
        :param mapping: The mapping of this RecordColumn.
        :param sql_type: The sql_type of this RecordColumn.
        """
        self.openapi_types = {
            'name': str,
            'mapping': str,
            'sql_type': str
        }

        self.attribute_map = {
            'name': 'Name',
            'mapping': 'Mapping',
            'sql_type': 'SqlType'
        }

        self._name = name
        self._mapping = mapping
        self._sql_type = sql_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecordColumn of this RecordColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RecordColumn.


        :return: The name of this RecordColumn.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecordColumn.


        :param name: The name of this RecordColumn.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def mapping(self):
        """Gets the mapping of this RecordColumn.


        :return: The mapping of this RecordColumn.
        :rtype: str
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this RecordColumn.


        :param mapping: The mapping of this RecordColumn.
        :type mapping: str
        """

        self._mapping = mapping

    @property
    def sql_type(self):
        """Gets the sql_type of this RecordColumn.


        :return: The sql_type of this RecordColumn.
        :rtype: str
        """
        return self._sql_type

    @sql_type.setter
    def sql_type(self, sql_type):
        """Sets the sql_type of this RecordColumn.


        :param sql_type: The sql_type of this RecordColumn.
        :type sql_type: str
        """
        if sql_type is None:
            raise ValueError("Invalid value for `sql_type`, must not be `None`")

        self._sql_type = sql_type
