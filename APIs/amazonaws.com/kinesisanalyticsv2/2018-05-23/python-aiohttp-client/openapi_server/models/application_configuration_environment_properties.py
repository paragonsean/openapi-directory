# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationConfigurationEnvironmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, property_groups: List=None):
        """ApplicationConfigurationEnvironmentProperties - a model defined in OpenAPI

        :param property_groups: The property_groups of this ApplicationConfigurationEnvironmentProperties.
        """
        self.openapi_types = {
            'property_groups': List
        }

        self.attribute_map = {
            'property_groups': 'PropertyGroups'
        }

        self._property_groups = property_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationConfigurationEnvironmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationConfiguration_EnvironmentProperties of this ApplicationConfigurationEnvironmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_groups(self):
        """Gets the property_groups of this ApplicationConfigurationEnvironmentProperties.


        :return: The property_groups of this ApplicationConfigurationEnvironmentProperties.
        :rtype: List
        """
        return self._property_groups

    @property_groups.setter
    def property_groups(self, property_groups):
        """Sets the property_groups of this ApplicationConfigurationEnvironmentProperties.


        :param property_groups: The property_groups of this ApplicationConfigurationEnvironmentProperties.
        :type property_groups: List
        """
        if property_groups is None:
            raise ValueError("Invalid value for `property_groups`, must not be `None`")

        self._property_groups = property_groups
