# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_mode import ApplicationMode
from openapi_server.models.application_status import ApplicationStatus
from openapi_server.models.runtime_environment import RuntimeEnvironment
from openapi_server import util


class ApplicationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, application_arn: str=None, application_status: ApplicationStatus=None, application_version_id: int=None, runtime_environment: RuntimeEnvironment=None, application_mode: ApplicationMode=None):
        """ApplicationSummary - a model defined in OpenAPI

        :param application_name: The application_name of this ApplicationSummary.
        :param application_arn: The application_arn of this ApplicationSummary.
        :param application_status: The application_status of this ApplicationSummary.
        :param application_version_id: The application_version_id of this ApplicationSummary.
        :param runtime_environment: The runtime_environment of this ApplicationSummary.
        :param application_mode: The application_mode of this ApplicationSummary.
        """
        self.openapi_types = {
            'application_name': str,
            'application_arn': str,
            'application_status': ApplicationStatus,
            'application_version_id': int,
            'runtime_environment': RuntimeEnvironment,
            'application_mode': ApplicationMode
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'application_arn': 'ApplicationARN',
            'application_status': 'ApplicationStatus',
            'application_version_id': 'ApplicationVersionId',
            'runtime_environment': 'RuntimeEnvironment',
            'application_mode': 'ApplicationMode'
        }

        self._application_name = application_name
        self._application_arn = application_arn
        self._application_status = application_status
        self._application_version_id = application_version_id
        self._runtime_environment = runtime_environment
        self._application_mode = application_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationSummary of this ApplicationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationSummary.


        :return: The application_name of this ApplicationSummary.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationSummary.


        :param application_name: The application_name of this ApplicationSummary.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def application_arn(self):
        """Gets the application_arn of this ApplicationSummary.


        :return: The application_arn of this ApplicationSummary.
        :rtype: str
        """
        return self._application_arn

    @application_arn.setter
    def application_arn(self, application_arn):
        """Sets the application_arn of this ApplicationSummary.


        :param application_arn: The application_arn of this ApplicationSummary.
        :type application_arn: str
        """
        if application_arn is None:
            raise ValueError("Invalid value for `application_arn`, must not be `None`")

        self._application_arn = application_arn

    @property
    def application_status(self):
        """Gets the application_status of this ApplicationSummary.


        :return: The application_status of this ApplicationSummary.
        :rtype: ApplicationStatus
        """
        return self._application_status

    @application_status.setter
    def application_status(self, application_status):
        """Sets the application_status of this ApplicationSummary.


        :param application_status: The application_status of this ApplicationSummary.
        :type application_status: ApplicationStatus
        """
        if application_status is None:
            raise ValueError("Invalid value for `application_status`, must not be `None`")

        self._application_status = application_status

    @property
    def application_version_id(self):
        """Gets the application_version_id of this ApplicationSummary.


        :return: The application_version_id of this ApplicationSummary.
        :rtype: int
        """
        return self._application_version_id

    @application_version_id.setter
    def application_version_id(self, application_version_id):
        """Sets the application_version_id of this ApplicationSummary.


        :param application_version_id: The application_version_id of this ApplicationSummary.
        :type application_version_id: int
        """
        if application_version_id is None:
            raise ValueError("Invalid value for `application_version_id`, must not be `None`")

        self._application_version_id = application_version_id

    @property
    def runtime_environment(self):
        """Gets the runtime_environment of this ApplicationSummary.


        :return: The runtime_environment of this ApplicationSummary.
        :rtype: RuntimeEnvironment
        """
        return self._runtime_environment

    @runtime_environment.setter
    def runtime_environment(self, runtime_environment):
        """Sets the runtime_environment of this ApplicationSummary.


        :param runtime_environment: The runtime_environment of this ApplicationSummary.
        :type runtime_environment: RuntimeEnvironment
        """
        if runtime_environment is None:
            raise ValueError("Invalid value for `runtime_environment`, must not be `None`")

        self._runtime_environment = runtime_environment

    @property
    def application_mode(self):
        """Gets the application_mode of this ApplicationSummary.


        :return: The application_mode of this ApplicationSummary.
        :rtype: ApplicationMode
        """
        return self._application_mode

    @application_mode.setter
    def application_mode(self, application_mode):
        """Sets the application_mode of this ApplicationSummary.


        :param application_mode: The application_mode of this ApplicationSummary.
        :type application_mode: ApplicationMode
        """

        self._application_mode = application_mode
