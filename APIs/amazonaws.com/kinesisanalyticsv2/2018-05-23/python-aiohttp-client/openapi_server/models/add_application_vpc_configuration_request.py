# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_application_vpc_configuration_request_vpc_configuration import AddApplicationVpcConfigurationRequestVpcConfiguration
from openapi_server import util


class AddApplicationVpcConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, current_application_version_id: int=None, vpc_configuration: AddApplicationVpcConfigurationRequestVpcConfiguration=None, conditional_token: str=None):
        """AddApplicationVpcConfigurationRequest - a model defined in OpenAPI

        :param application_name: The application_name of this AddApplicationVpcConfigurationRequest.
        :param current_application_version_id: The current_application_version_id of this AddApplicationVpcConfigurationRequest.
        :param vpc_configuration: The vpc_configuration of this AddApplicationVpcConfigurationRequest.
        :param conditional_token: The conditional_token of this AddApplicationVpcConfigurationRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'current_application_version_id': int,
            'vpc_configuration': AddApplicationVpcConfigurationRequestVpcConfiguration,
            'conditional_token': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'current_application_version_id': 'CurrentApplicationVersionId',
            'vpc_configuration': 'VpcConfiguration',
            'conditional_token': 'ConditionalToken'
        }

        self._application_name = application_name
        self._current_application_version_id = current_application_version_id
        self._vpc_configuration = vpc_configuration
        self._conditional_token = conditional_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddApplicationVpcConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddApplicationVpcConfigurationRequest of this AddApplicationVpcConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this AddApplicationVpcConfigurationRequest.


        :return: The application_name of this AddApplicationVpcConfigurationRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this AddApplicationVpcConfigurationRequest.


        :param application_name: The application_name of this AddApplicationVpcConfigurationRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def current_application_version_id(self):
        """Gets the current_application_version_id of this AddApplicationVpcConfigurationRequest.


        :return: The current_application_version_id of this AddApplicationVpcConfigurationRequest.
        :rtype: int
        """
        return self._current_application_version_id

    @current_application_version_id.setter
    def current_application_version_id(self, current_application_version_id):
        """Sets the current_application_version_id of this AddApplicationVpcConfigurationRequest.


        :param current_application_version_id: The current_application_version_id of this AddApplicationVpcConfigurationRequest.
        :type current_application_version_id: int
        """

        self._current_application_version_id = current_application_version_id

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this AddApplicationVpcConfigurationRequest.


        :return: The vpc_configuration of this AddApplicationVpcConfigurationRequest.
        :rtype: AddApplicationVpcConfigurationRequestVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this AddApplicationVpcConfigurationRequest.


        :param vpc_configuration: The vpc_configuration of this AddApplicationVpcConfigurationRequest.
        :type vpc_configuration: AddApplicationVpcConfigurationRequestVpcConfiguration
        """
        if vpc_configuration is None:
            raise ValueError("Invalid value for `vpc_configuration`, must not be `None`")

        self._vpc_configuration = vpc_configuration

    @property
    def conditional_token(self):
        """Gets the conditional_token of this AddApplicationVpcConfigurationRequest.


        :return: The conditional_token of this AddApplicationVpcConfigurationRequest.
        :rtype: str
        """
        return self._conditional_token

    @conditional_token.setter
    def conditional_token(self, conditional_token):
        """Sets the conditional_token of this AddApplicationVpcConfigurationRequest.


        :param conditional_token: The conditional_token of this AddApplicationVpcConfigurationRequest.
        :type conditional_token: str
        """

        self._conditional_token = conditional_token
