# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_mode import ApplicationMode
from openapi_server.models.create_application_request_application_configuration import CreateApplicationRequestApplicationConfiguration
from openapi_server.models.runtime_environment import RuntimeEnvironment
from openapi_server import util


class CreateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, application_description: str=None, runtime_environment: RuntimeEnvironment=None, service_execution_role: str=None, application_configuration: CreateApplicationRequestApplicationConfiguration=None, cloud_watch_logging_options: List=None, tags: List=None, application_mode: ApplicationMode=None):
        """CreateApplicationRequest - a model defined in OpenAPI

        :param application_name: The application_name of this CreateApplicationRequest.
        :param application_description: The application_description of this CreateApplicationRequest.
        :param runtime_environment: The runtime_environment of this CreateApplicationRequest.
        :param service_execution_role: The service_execution_role of this CreateApplicationRequest.
        :param application_configuration: The application_configuration of this CreateApplicationRequest.
        :param cloud_watch_logging_options: The cloud_watch_logging_options of this CreateApplicationRequest.
        :param tags: The tags of this CreateApplicationRequest.
        :param application_mode: The application_mode of this CreateApplicationRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'application_description': str,
            'runtime_environment': RuntimeEnvironment,
            'service_execution_role': str,
            'application_configuration': CreateApplicationRequestApplicationConfiguration,
            'cloud_watch_logging_options': List,
            'tags': List,
            'application_mode': ApplicationMode
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'application_description': 'ApplicationDescription',
            'runtime_environment': 'RuntimeEnvironment',
            'service_execution_role': 'ServiceExecutionRole',
            'application_configuration': 'ApplicationConfiguration',
            'cloud_watch_logging_options': 'CloudWatchLoggingOptions',
            'tags': 'Tags',
            'application_mode': 'ApplicationMode'
        }

        self._application_name = application_name
        self._application_description = application_description
        self._runtime_environment = runtime_environment
        self._service_execution_role = service_execution_role
        self._application_configuration = application_configuration
        self._cloud_watch_logging_options = cloud_watch_logging_options
        self._tags = tags
        self._application_mode = application_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplicationRequest of this CreateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this CreateApplicationRequest.


        :return: The application_name of this CreateApplicationRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CreateApplicationRequest.


        :param application_name: The application_name of this CreateApplicationRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def application_description(self):
        """Gets the application_description of this CreateApplicationRequest.


        :return: The application_description of this CreateApplicationRequest.
        :rtype: str
        """
        return self._application_description

    @application_description.setter
    def application_description(self, application_description):
        """Sets the application_description of this CreateApplicationRequest.


        :param application_description: The application_description of this CreateApplicationRequest.
        :type application_description: str
        """

        self._application_description = application_description

    @property
    def runtime_environment(self):
        """Gets the runtime_environment of this CreateApplicationRequest.


        :return: The runtime_environment of this CreateApplicationRequest.
        :rtype: RuntimeEnvironment
        """
        return self._runtime_environment

    @runtime_environment.setter
    def runtime_environment(self, runtime_environment):
        """Sets the runtime_environment of this CreateApplicationRequest.


        :param runtime_environment: The runtime_environment of this CreateApplicationRequest.
        :type runtime_environment: RuntimeEnvironment
        """
        if runtime_environment is None:
            raise ValueError("Invalid value for `runtime_environment`, must not be `None`")

        self._runtime_environment = runtime_environment

    @property
    def service_execution_role(self):
        """Gets the service_execution_role of this CreateApplicationRequest.


        :return: The service_execution_role of this CreateApplicationRequest.
        :rtype: str
        """
        return self._service_execution_role

    @service_execution_role.setter
    def service_execution_role(self, service_execution_role):
        """Sets the service_execution_role of this CreateApplicationRequest.


        :param service_execution_role: The service_execution_role of this CreateApplicationRequest.
        :type service_execution_role: str
        """
        if service_execution_role is None:
            raise ValueError("Invalid value for `service_execution_role`, must not be `None`")

        self._service_execution_role = service_execution_role

    @property
    def application_configuration(self):
        """Gets the application_configuration of this CreateApplicationRequest.


        :return: The application_configuration of this CreateApplicationRequest.
        :rtype: CreateApplicationRequestApplicationConfiguration
        """
        return self._application_configuration

    @application_configuration.setter
    def application_configuration(self, application_configuration):
        """Sets the application_configuration of this CreateApplicationRequest.


        :param application_configuration: The application_configuration of this CreateApplicationRequest.
        :type application_configuration: CreateApplicationRequestApplicationConfiguration
        """

        self._application_configuration = application_configuration

    @property
    def cloud_watch_logging_options(self):
        """Gets the cloud_watch_logging_options of this CreateApplicationRequest.


        :return: The cloud_watch_logging_options of this CreateApplicationRequest.
        :rtype: List
        """
        return self._cloud_watch_logging_options

    @cloud_watch_logging_options.setter
    def cloud_watch_logging_options(self, cloud_watch_logging_options):
        """Sets the cloud_watch_logging_options of this CreateApplicationRequest.


        :param cloud_watch_logging_options: The cloud_watch_logging_options of this CreateApplicationRequest.
        :type cloud_watch_logging_options: List
        """

        self._cloud_watch_logging_options = cloud_watch_logging_options

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationRequest.


        :return: The tags of this CreateApplicationRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationRequest.


        :param tags: The tags of this CreateApplicationRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def application_mode(self):
        """Gets the application_mode of this CreateApplicationRequest.


        :return: The application_mode of this CreateApplicationRequest.
        :rtype: ApplicationMode
        """
        return self._application_mode

    @application_mode.setter
    def application_mode(self, application_mode):
        """Sets the application_mode of this CreateApplicationRequest.


        :param application_mode: The application_mode of this CreateApplicationRequest.
        :type application_mode: ApplicationMode
        """

        self._application_mode = application_mode
