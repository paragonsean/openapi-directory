# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_application_request_run_configuration import StartApplicationRequestRunConfiguration
from openapi_server import util


class StartApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, run_configuration: StartApplicationRequestRunConfiguration=None):
        """StartApplicationRequest - a model defined in OpenAPI

        :param application_name: The application_name of this StartApplicationRequest.
        :param run_configuration: The run_configuration of this StartApplicationRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'run_configuration': StartApplicationRequestRunConfiguration
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'run_configuration': 'RunConfiguration'
        }

        self._application_name = application_name
        self._run_configuration = run_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartApplicationRequest of this StartApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this StartApplicationRequest.


        :return: The application_name of this StartApplicationRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this StartApplicationRequest.


        :param application_name: The application_name of this StartApplicationRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def run_configuration(self):
        """Gets the run_configuration of this StartApplicationRequest.


        :return: The run_configuration of this StartApplicationRequest.
        :rtype: StartApplicationRequestRunConfiguration
        """
        return self._run_configuration

    @run_configuration.setter
    def run_configuration(self, run_configuration):
        """Sets the run_configuration of this StartApplicationRequest.


        :param run_configuration: The run_configuration of this StartApplicationRequest.
        :type run_configuration: StartApplicationRequestRunConfiguration
        """

        self._run_configuration = run_configuration
