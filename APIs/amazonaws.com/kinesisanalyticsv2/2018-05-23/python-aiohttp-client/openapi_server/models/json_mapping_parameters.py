# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JSONMappingParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_row_path: str=None):
        """JSONMappingParameters - a model defined in OpenAPI

        :param record_row_path: The record_row_path of this JSONMappingParameters.
        """
        self.openapi_types = {
            'record_row_path': str
        }

        self.attribute_map = {
            'record_row_path': 'RecordRowPath'
        }

        self._record_row_path = record_row_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JSONMappingParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JSONMappingParameters of this JSONMappingParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_row_path(self):
        """Gets the record_row_path of this JSONMappingParameters.


        :return: The record_row_path of this JSONMappingParameters.
        :rtype: str
        """
        return self._record_row_path

    @record_row_path.setter
    def record_row_path(self, record_row_path):
        """Sets the record_row_path of this JSONMappingParameters.


        :param record_row_path: The record_row_path of this JSONMappingParameters.
        :type record_row_path: str
        """
        if record_row_path is None:
            raise ValueError("Invalid value for `record_row_path`, must not be `None`")

        self._record_row_path = record_row_path
