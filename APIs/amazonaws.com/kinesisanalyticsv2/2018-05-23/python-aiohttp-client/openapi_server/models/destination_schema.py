# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.record_format_type import RecordFormatType
from openapi_server import util


class DestinationSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_format_type: RecordFormatType=None):
        """DestinationSchema - a model defined in OpenAPI

        :param record_format_type: The record_format_type of this DestinationSchema.
        """
        self.openapi_types = {
            'record_format_type': RecordFormatType
        }

        self.attribute_map = {
            'record_format_type': 'RecordFormatType'
        }

        self._record_format_type = record_format_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationSchema of this DestinationSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_format_type(self):
        """Gets the record_format_type of this DestinationSchema.


        :return: The record_format_type of this DestinationSchema.
        :rtype: RecordFormatType
        """
        return self._record_format_type

    @record_format_type.setter
    def record_format_type(self, record_format_type):
        """Sets the record_format_type of this DestinationSchema.


        :param record_format_type: The record_format_type of this DestinationSchema.
        :type record_format_type: RecordFormatType
        """
        if record_format_type is None:
            raise ValueError("Invalid value for `record_format_type`, must not be `None`")

        self._record_format_type = record_format_type
