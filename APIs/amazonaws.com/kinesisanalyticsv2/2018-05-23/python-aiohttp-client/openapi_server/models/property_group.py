# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PropertyGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, property_group_id: str=None, property_map: Dict=None):
        """PropertyGroup - a model defined in OpenAPI

        :param property_group_id: The property_group_id of this PropertyGroup.
        :param property_map: The property_map of this PropertyGroup.
        """
        self.openapi_types = {
            'property_group_id': str,
            'property_map': Dict
        }

        self.attribute_map = {
            'property_group_id': 'PropertyGroupId',
            'property_map': 'PropertyMap'
        }

        self._property_group_id = property_group_id
        self._property_map = property_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyGroup of this PropertyGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_group_id(self):
        """Gets the property_group_id of this PropertyGroup.


        :return: The property_group_id of this PropertyGroup.
        :rtype: str
        """
        return self._property_group_id

    @property_group_id.setter
    def property_group_id(self, property_group_id):
        """Sets the property_group_id of this PropertyGroup.


        :param property_group_id: The property_group_id of this PropertyGroup.
        :type property_group_id: str
        """
        if property_group_id is None:
            raise ValueError("Invalid value for `property_group_id`, must not be `None`")

        self._property_group_id = property_group_id

    @property
    def property_map(self):
        """Gets the property_map of this PropertyGroup.


        :return: The property_map of this PropertyGroup.
        :rtype: Dict
        """
        return self._property_map

    @property_map.setter
    def property_map(self, property_map):
        """Sets the property_map of this PropertyGroup.


        :param property_map: The property_map of this PropertyGroup.
        :type property_map: Dict
        """
        if property_map is None:
            raise ValueError("Invalid value for `property_map`, must not be `None`")

        self._property_map = property_map
