# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_type import ConfigurationType
from openapi_server import util


class FlinkApplicationConfigurationParallelismConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_type: ConfigurationType=None, parallelism: int=None, parallelism_per_kpu: int=None, auto_scaling_enabled: bool=None):
        """FlinkApplicationConfigurationParallelismConfiguration - a model defined in OpenAPI

        :param configuration_type: The configuration_type of this FlinkApplicationConfigurationParallelismConfiguration.
        :param parallelism: The parallelism of this FlinkApplicationConfigurationParallelismConfiguration.
        :param parallelism_per_kpu: The parallelism_per_kpu of this FlinkApplicationConfigurationParallelismConfiguration.
        :param auto_scaling_enabled: The auto_scaling_enabled of this FlinkApplicationConfigurationParallelismConfiguration.
        """
        self.openapi_types = {
            'configuration_type': ConfigurationType,
            'parallelism': int,
            'parallelism_per_kpu': int,
            'auto_scaling_enabled': bool
        }

        self.attribute_map = {
            'configuration_type': 'ConfigurationType',
            'parallelism': 'Parallelism',
            'parallelism_per_kpu': 'ParallelismPerKPU',
            'auto_scaling_enabled': 'AutoScalingEnabled'
        }

        self._configuration_type = configuration_type
        self._parallelism = parallelism
        self._parallelism_per_kpu = parallelism_per_kpu
        self._auto_scaling_enabled = auto_scaling_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlinkApplicationConfigurationParallelismConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlinkApplicationConfiguration_ParallelismConfiguration of this FlinkApplicationConfigurationParallelismConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_type(self):
        """Gets the configuration_type of this FlinkApplicationConfigurationParallelismConfiguration.


        :return: The configuration_type of this FlinkApplicationConfigurationParallelismConfiguration.
        :rtype: ConfigurationType
        """
        return self._configuration_type

    @configuration_type.setter
    def configuration_type(self, configuration_type):
        """Sets the configuration_type of this FlinkApplicationConfigurationParallelismConfiguration.


        :param configuration_type: The configuration_type of this FlinkApplicationConfigurationParallelismConfiguration.
        :type configuration_type: ConfigurationType
        """
        if configuration_type is None:
            raise ValueError("Invalid value for `configuration_type`, must not be `None`")

        self._configuration_type = configuration_type

    @property
    def parallelism(self):
        """Gets the parallelism of this FlinkApplicationConfigurationParallelismConfiguration.


        :return: The parallelism of this FlinkApplicationConfigurationParallelismConfiguration.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this FlinkApplicationConfigurationParallelismConfiguration.


        :param parallelism: The parallelism of this FlinkApplicationConfigurationParallelismConfiguration.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def parallelism_per_kpu(self):
        """Gets the parallelism_per_kpu of this FlinkApplicationConfigurationParallelismConfiguration.


        :return: The parallelism_per_kpu of this FlinkApplicationConfigurationParallelismConfiguration.
        :rtype: int
        """
        return self._parallelism_per_kpu

    @parallelism_per_kpu.setter
    def parallelism_per_kpu(self, parallelism_per_kpu):
        """Sets the parallelism_per_kpu of this FlinkApplicationConfigurationParallelismConfiguration.


        :param parallelism_per_kpu: The parallelism_per_kpu of this FlinkApplicationConfigurationParallelismConfiguration.
        :type parallelism_per_kpu: int
        """

        self._parallelism_per_kpu = parallelism_per_kpu

    @property
    def auto_scaling_enabled(self):
        """Gets the auto_scaling_enabled of this FlinkApplicationConfigurationParallelismConfiguration.


        :return: The auto_scaling_enabled of this FlinkApplicationConfigurationParallelismConfiguration.
        :rtype: bool
        """
        return self._auto_scaling_enabled

    @auto_scaling_enabled.setter
    def auto_scaling_enabled(self, auto_scaling_enabled):
        """Sets the auto_scaling_enabled of this FlinkApplicationConfigurationParallelismConfiguration.


        :param auto_scaling_enabled: The auto_scaling_enabled of this FlinkApplicationConfigurationParallelismConfiguration.
        :type auto_scaling_enabled: bool
        """

        self._auto_scaling_enabled = auto_scaling_enabled
