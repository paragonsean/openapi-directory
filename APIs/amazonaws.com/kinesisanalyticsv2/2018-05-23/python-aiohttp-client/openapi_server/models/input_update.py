# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_update_input_parallelism_update import InputUpdateInputParallelismUpdate
from openapi_server.models.input_update_input_processing_configuration_update import InputUpdateInputProcessingConfigurationUpdate
from openapi_server.models.input_update_input_schema_update import InputUpdateInputSchemaUpdate
from openapi_server.models.input_update_kinesis_firehose_input_update import InputUpdateKinesisFirehoseInputUpdate
from openapi_server.models.input_update_kinesis_streams_input_update import InputUpdateKinesisStreamsInputUpdate
from openapi_server import util


class InputUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_id: str=None, name_prefix_update: str=None, input_processing_configuration_update: InputUpdateInputProcessingConfigurationUpdate=None, kinesis_streams_input_update: InputUpdateKinesisStreamsInputUpdate=None, kinesis_firehose_input_update: InputUpdateKinesisFirehoseInputUpdate=None, input_schema_update: InputUpdateInputSchemaUpdate=None, input_parallelism_update: InputUpdateInputParallelismUpdate=None):
        """InputUpdate - a model defined in OpenAPI

        :param input_id: The input_id of this InputUpdate.
        :param name_prefix_update: The name_prefix_update of this InputUpdate.
        :param input_processing_configuration_update: The input_processing_configuration_update of this InputUpdate.
        :param kinesis_streams_input_update: The kinesis_streams_input_update of this InputUpdate.
        :param kinesis_firehose_input_update: The kinesis_firehose_input_update of this InputUpdate.
        :param input_schema_update: The input_schema_update of this InputUpdate.
        :param input_parallelism_update: The input_parallelism_update of this InputUpdate.
        """
        self.openapi_types = {
            'input_id': str,
            'name_prefix_update': str,
            'input_processing_configuration_update': InputUpdateInputProcessingConfigurationUpdate,
            'kinesis_streams_input_update': InputUpdateKinesisStreamsInputUpdate,
            'kinesis_firehose_input_update': InputUpdateKinesisFirehoseInputUpdate,
            'input_schema_update': InputUpdateInputSchemaUpdate,
            'input_parallelism_update': InputUpdateInputParallelismUpdate
        }

        self.attribute_map = {
            'input_id': 'InputId',
            'name_prefix_update': 'NamePrefixUpdate',
            'input_processing_configuration_update': 'InputProcessingConfigurationUpdate',
            'kinesis_streams_input_update': 'KinesisStreamsInputUpdate',
            'kinesis_firehose_input_update': 'KinesisFirehoseInputUpdate',
            'input_schema_update': 'InputSchemaUpdate',
            'input_parallelism_update': 'InputParallelismUpdate'
        }

        self._input_id = input_id
        self._name_prefix_update = name_prefix_update
        self._input_processing_configuration_update = input_processing_configuration_update
        self._kinesis_streams_input_update = kinesis_streams_input_update
        self._kinesis_firehose_input_update = kinesis_firehose_input_update
        self._input_schema_update = input_schema_update
        self._input_parallelism_update = input_parallelism_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputUpdate of this InputUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_id(self):
        """Gets the input_id of this InputUpdate.


        :return: The input_id of this InputUpdate.
        :rtype: str
        """
        return self._input_id

    @input_id.setter
    def input_id(self, input_id):
        """Sets the input_id of this InputUpdate.


        :param input_id: The input_id of this InputUpdate.
        :type input_id: str
        """
        if input_id is None:
            raise ValueError("Invalid value for `input_id`, must not be `None`")

        self._input_id = input_id

    @property
    def name_prefix_update(self):
        """Gets the name_prefix_update of this InputUpdate.


        :return: The name_prefix_update of this InputUpdate.
        :rtype: str
        """
        return self._name_prefix_update

    @name_prefix_update.setter
    def name_prefix_update(self, name_prefix_update):
        """Sets the name_prefix_update of this InputUpdate.


        :param name_prefix_update: The name_prefix_update of this InputUpdate.
        :type name_prefix_update: str
        """

        self._name_prefix_update = name_prefix_update

    @property
    def input_processing_configuration_update(self):
        """Gets the input_processing_configuration_update of this InputUpdate.


        :return: The input_processing_configuration_update of this InputUpdate.
        :rtype: InputUpdateInputProcessingConfigurationUpdate
        """
        return self._input_processing_configuration_update

    @input_processing_configuration_update.setter
    def input_processing_configuration_update(self, input_processing_configuration_update):
        """Sets the input_processing_configuration_update of this InputUpdate.


        :param input_processing_configuration_update: The input_processing_configuration_update of this InputUpdate.
        :type input_processing_configuration_update: InputUpdateInputProcessingConfigurationUpdate
        """

        self._input_processing_configuration_update = input_processing_configuration_update

    @property
    def kinesis_streams_input_update(self):
        """Gets the kinesis_streams_input_update of this InputUpdate.


        :return: The kinesis_streams_input_update of this InputUpdate.
        :rtype: InputUpdateKinesisStreamsInputUpdate
        """
        return self._kinesis_streams_input_update

    @kinesis_streams_input_update.setter
    def kinesis_streams_input_update(self, kinesis_streams_input_update):
        """Sets the kinesis_streams_input_update of this InputUpdate.


        :param kinesis_streams_input_update: The kinesis_streams_input_update of this InputUpdate.
        :type kinesis_streams_input_update: InputUpdateKinesisStreamsInputUpdate
        """

        self._kinesis_streams_input_update = kinesis_streams_input_update

    @property
    def kinesis_firehose_input_update(self):
        """Gets the kinesis_firehose_input_update of this InputUpdate.


        :return: The kinesis_firehose_input_update of this InputUpdate.
        :rtype: InputUpdateKinesisFirehoseInputUpdate
        """
        return self._kinesis_firehose_input_update

    @kinesis_firehose_input_update.setter
    def kinesis_firehose_input_update(self, kinesis_firehose_input_update):
        """Sets the kinesis_firehose_input_update of this InputUpdate.


        :param kinesis_firehose_input_update: The kinesis_firehose_input_update of this InputUpdate.
        :type kinesis_firehose_input_update: InputUpdateKinesisFirehoseInputUpdate
        """

        self._kinesis_firehose_input_update = kinesis_firehose_input_update

    @property
    def input_schema_update(self):
        """Gets the input_schema_update of this InputUpdate.


        :return: The input_schema_update of this InputUpdate.
        :rtype: InputUpdateInputSchemaUpdate
        """
        return self._input_schema_update

    @input_schema_update.setter
    def input_schema_update(self, input_schema_update):
        """Sets the input_schema_update of this InputUpdate.


        :param input_schema_update: The input_schema_update of this InputUpdate.
        :type input_schema_update: InputUpdateInputSchemaUpdate
        """

        self._input_schema_update = input_schema_update

    @property
    def input_parallelism_update(self):
        """Gets the input_parallelism_update of this InputUpdate.


        :return: The input_parallelism_update of this InputUpdate.
        :rtype: InputUpdateInputParallelismUpdate
        """
        return self._input_parallelism_update

    @input_parallelism_update.setter
    def input_parallelism_update(self, input_parallelism_update):
        """Sets the input_parallelism_update of this InputUpdate.


        :param input_parallelism_update: The input_parallelism_update of this InputUpdate.
        :type input_parallelism_update: InputUpdateInputParallelismUpdate
        """

        self._input_parallelism_update = input_parallelism_update
