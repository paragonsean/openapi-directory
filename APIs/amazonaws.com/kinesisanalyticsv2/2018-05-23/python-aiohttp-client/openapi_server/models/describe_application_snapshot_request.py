# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeApplicationSnapshotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, snapshot_name: str=None):
        """DescribeApplicationSnapshotRequest - a model defined in OpenAPI

        :param application_name: The application_name of this DescribeApplicationSnapshotRequest.
        :param snapshot_name: The snapshot_name of this DescribeApplicationSnapshotRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'snapshot_name': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'snapshot_name': 'SnapshotName'
        }

        self._application_name = application_name
        self._snapshot_name = snapshot_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeApplicationSnapshotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeApplicationSnapshotRequest of this DescribeApplicationSnapshotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this DescribeApplicationSnapshotRequest.


        :return: The application_name of this DescribeApplicationSnapshotRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this DescribeApplicationSnapshotRequest.


        :param application_name: The application_name of this DescribeApplicationSnapshotRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this DescribeApplicationSnapshotRequest.


        :return: The snapshot_name of this DescribeApplicationSnapshotRequest.
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this DescribeApplicationSnapshotRequest.


        :param snapshot_name: The snapshot_name of this DescribeApplicationSnapshotRequest.
        :type snapshot_name: str
        """
        if snapshot_name is None:
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")

        self._snapshot_name = snapshot_name
