# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_application_request_application_configuration_update import UpdateApplicationRequestApplicationConfigurationUpdate
from openapi_server.models.update_application_request_run_configuration_update import UpdateApplicationRequestRunConfigurationUpdate
from openapi_server import util


class UpdateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, current_application_version_id: int=None, application_configuration_update: UpdateApplicationRequestApplicationConfigurationUpdate=None, service_execution_role_update: str=None, run_configuration_update: UpdateApplicationRequestRunConfigurationUpdate=None, cloud_watch_logging_option_updates: List=None, conditional_token: str=None):
        """UpdateApplicationRequest - a model defined in OpenAPI

        :param application_name: The application_name of this UpdateApplicationRequest.
        :param current_application_version_id: The current_application_version_id of this UpdateApplicationRequest.
        :param application_configuration_update: The application_configuration_update of this UpdateApplicationRequest.
        :param service_execution_role_update: The service_execution_role_update of this UpdateApplicationRequest.
        :param run_configuration_update: The run_configuration_update of this UpdateApplicationRequest.
        :param cloud_watch_logging_option_updates: The cloud_watch_logging_option_updates of this UpdateApplicationRequest.
        :param conditional_token: The conditional_token of this UpdateApplicationRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'current_application_version_id': int,
            'application_configuration_update': UpdateApplicationRequestApplicationConfigurationUpdate,
            'service_execution_role_update': str,
            'run_configuration_update': UpdateApplicationRequestRunConfigurationUpdate,
            'cloud_watch_logging_option_updates': List,
            'conditional_token': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'current_application_version_id': 'CurrentApplicationVersionId',
            'application_configuration_update': 'ApplicationConfigurationUpdate',
            'service_execution_role_update': 'ServiceExecutionRoleUpdate',
            'run_configuration_update': 'RunConfigurationUpdate',
            'cloud_watch_logging_option_updates': 'CloudWatchLoggingOptionUpdates',
            'conditional_token': 'ConditionalToken'
        }

        self._application_name = application_name
        self._current_application_version_id = current_application_version_id
        self._application_configuration_update = application_configuration_update
        self._service_execution_role_update = service_execution_role_update
        self._run_configuration_update = run_configuration_update
        self._cloud_watch_logging_option_updates = cloud_watch_logging_option_updates
        self._conditional_token = conditional_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApplicationRequest of this UpdateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this UpdateApplicationRequest.


        :return: The application_name of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this UpdateApplicationRequest.


        :param application_name: The application_name of this UpdateApplicationRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def current_application_version_id(self):
        """Gets the current_application_version_id of this UpdateApplicationRequest.


        :return: The current_application_version_id of this UpdateApplicationRequest.
        :rtype: int
        """
        return self._current_application_version_id

    @current_application_version_id.setter
    def current_application_version_id(self, current_application_version_id):
        """Sets the current_application_version_id of this UpdateApplicationRequest.


        :param current_application_version_id: The current_application_version_id of this UpdateApplicationRequest.
        :type current_application_version_id: int
        """

        self._current_application_version_id = current_application_version_id

    @property
    def application_configuration_update(self):
        """Gets the application_configuration_update of this UpdateApplicationRequest.


        :return: The application_configuration_update of this UpdateApplicationRequest.
        :rtype: UpdateApplicationRequestApplicationConfigurationUpdate
        """
        return self._application_configuration_update

    @application_configuration_update.setter
    def application_configuration_update(self, application_configuration_update):
        """Sets the application_configuration_update of this UpdateApplicationRequest.


        :param application_configuration_update: The application_configuration_update of this UpdateApplicationRequest.
        :type application_configuration_update: UpdateApplicationRequestApplicationConfigurationUpdate
        """

        self._application_configuration_update = application_configuration_update

    @property
    def service_execution_role_update(self):
        """Gets the service_execution_role_update of this UpdateApplicationRequest.


        :return: The service_execution_role_update of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._service_execution_role_update

    @service_execution_role_update.setter
    def service_execution_role_update(self, service_execution_role_update):
        """Sets the service_execution_role_update of this UpdateApplicationRequest.


        :param service_execution_role_update: The service_execution_role_update of this UpdateApplicationRequest.
        :type service_execution_role_update: str
        """

        self._service_execution_role_update = service_execution_role_update

    @property
    def run_configuration_update(self):
        """Gets the run_configuration_update of this UpdateApplicationRequest.


        :return: The run_configuration_update of this UpdateApplicationRequest.
        :rtype: UpdateApplicationRequestRunConfigurationUpdate
        """
        return self._run_configuration_update

    @run_configuration_update.setter
    def run_configuration_update(self, run_configuration_update):
        """Sets the run_configuration_update of this UpdateApplicationRequest.


        :param run_configuration_update: The run_configuration_update of this UpdateApplicationRequest.
        :type run_configuration_update: UpdateApplicationRequestRunConfigurationUpdate
        """

        self._run_configuration_update = run_configuration_update

    @property
    def cloud_watch_logging_option_updates(self):
        """Gets the cloud_watch_logging_option_updates of this UpdateApplicationRequest.


        :return: The cloud_watch_logging_option_updates of this UpdateApplicationRequest.
        :rtype: List
        """
        return self._cloud_watch_logging_option_updates

    @cloud_watch_logging_option_updates.setter
    def cloud_watch_logging_option_updates(self, cloud_watch_logging_option_updates):
        """Sets the cloud_watch_logging_option_updates of this UpdateApplicationRequest.


        :param cloud_watch_logging_option_updates: The cloud_watch_logging_option_updates of this UpdateApplicationRequest.
        :type cloud_watch_logging_option_updates: List
        """

        self._cloud_watch_logging_option_updates = cloud_watch_logging_option_updates

    @property
    def conditional_token(self):
        """Gets the conditional_token of this UpdateApplicationRequest.


        :return: The conditional_token of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._conditional_token

    @conditional_token.setter
    def conditional_token(self, conditional_token):
        """Sets the conditional_token of this UpdateApplicationRequest.


        :param conditional_token: The conditional_token of this UpdateApplicationRequest.
        :type conditional_token: str
        """

        self._conditional_token = conditional_token
