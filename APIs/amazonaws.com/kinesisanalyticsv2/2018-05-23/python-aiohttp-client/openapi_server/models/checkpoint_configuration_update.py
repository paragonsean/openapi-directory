# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_type import ConfigurationType
from openapi_server import util


class CheckpointConfigurationUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_type_update: ConfigurationType=None, checkpointing_enabled_update: bool=None, checkpoint_interval_update: int=None, min_pause_between_checkpoints_update: int=None):
        """CheckpointConfigurationUpdate - a model defined in OpenAPI

        :param configuration_type_update: The configuration_type_update of this CheckpointConfigurationUpdate.
        :param checkpointing_enabled_update: The checkpointing_enabled_update of this CheckpointConfigurationUpdate.
        :param checkpoint_interval_update: The checkpoint_interval_update of this CheckpointConfigurationUpdate.
        :param min_pause_between_checkpoints_update: The min_pause_between_checkpoints_update of this CheckpointConfigurationUpdate.
        """
        self.openapi_types = {
            'configuration_type_update': ConfigurationType,
            'checkpointing_enabled_update': bool,
            'checkpoint_interval_update': int,
            'min_pause_between_checkpoints_update': int
        }

        self.attribute_map = {
            'configuration_type_update': 'ConfigurationTypeUpdate',
            'checkpointing_enabled_update': 'CheckpointingEnabledUpdate',
            'checkpoint_interval_update': 'CheckpointIntervalUpdate',
            'min_pause_between_checkpoints_update': 'MinPauseBetweenCheckpointsUpdate'
        }

        self._configuration_type_update = configuration_type_update
        self._checkpointing_enabled_update = checkpointing_enabled_update
        self._checkpoint_interval_update = checkpoint_interval_update
        self._min_pause_between_checkpoints_update = min_pause_between_checkpoints_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckpointConfigurationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckpointConfigurationUpdate of this CheckpointConfigurationUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_type_update(self):
        """Gets the configuration_type_update of this CheckpointConfigurationUpdate.


        :return: The configuration_type_update of this CheckpointConfigurationUpdate.
        :rtype: ConfigurationType
        """
        return self._configuration_type_update

    @configuration_type_update.setter
    def configuration_type_update(self, configuration_type_update):
        """Sets the configuration_type_update of this CheckpointConfigurationUpdate.


        :param configuration_type_update: The configuration_type_update of this CheckpointConfigurationUpdate.
        :type configuration_type_update: ConfigurationType
        """

        self._configuration_type_update = configuration_type_update

    @property
    def checkpointing_enabled_update(self):
        """Gets the checkpointing_enabled_update of this CheckpointConfigurationUpdate.


        :return: The checkpointing_enabled_update of this CheckpointConfigurationUpdate.
        :rtype: bool
        """
        return self._checkpointing_enabled_update

    @checkpointing_enabled_update.setter
    def checkpointing_enabled_update(self, checkpointing_enabled_update):
        """Sets the checkpointing_enabled_update of this CheckpointConfigurationUpdate.


        :param checkpointing_enabled_update: The checkpointing_enabled_update of this CheckpointConfigurationUpdate.
        :type checkpointing_enabled_update: bool
        """

        self._checkpointing_enabled_update = checkpointing_enabled_update

    @property
    def checkpoint_interval_update(self):
        """Gets the checkpoint_interval_update of this CheckpointConfigurationUpdate.


        :return: The checkpoint_interval_update of this CheckpointConfigurationUpdate.
        :rtype: int
        """
        return self._checkpoint_interval_update

    @checkpoint_interval_update.setter
    def checkpoint_interval_update(self, checkpoint_interval_update):
        """Sets the checkpoint_interval_update of this CheckpointConfigurationUpdate.


        :param checkpoint_interval_update: The checkpoint_interval_update of this CheckpointConfigurationUpdate.
        :type checkpoint_interval_update: int
        """

        self._checkpoint_interval_update = checkpoint_interval_update

    @property
    def min_pause_between_checkpoints_update(self):
        """Gets the min_pause_between_checkpoints_update of this CheckpointConfigurationUpdate.


        :return: The min_pause_between_checkpoints_update of this CheckpointConfigurationUpdate.
        :rtype: int
        """
        return self._min_pause_between_checkpoints_update

    @min_pause_between_checkpoints_update.setter
    def min_pause_between_checkpoints_update(self, min_pause_between_checkpoints_update):
        """Sets the min_pause_between_checkpoints_update of this CheckpointConfigurationUpdate.


        :param min_pause_between_checkpoints_update: The min_pause_between_checkpoints_update of this CheckpointConfigurationUpdate.
        :type min_pause_between_checkpoints_update: int
        """

        self._min_pause_between_checkpoints_update = min_pause_between_checkpoints_update
