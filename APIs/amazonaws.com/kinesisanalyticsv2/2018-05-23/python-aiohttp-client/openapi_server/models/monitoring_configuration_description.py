# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_type import ConfigurationType
from openapi_server.models.log_level import LogLevel
from openapi_server.models.metrics_level import MetricsLevel
from openapi_server import util


class MonitoringConfigurationDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_type: ConfigurationType=None, metrics_level: MetricsLevel=None, log_level: LogLevel=None):
        """MonitoringConfigurationDescription - a model defined in OpenAPI

        :param configuration_type: The configuration_type of this MonitoringConfigurationDescription.
        :param metrics_level: The metrics_level of this MonitoringConfigurationDescription.
        :param log_level: The log_level of this MonitoringConfigurationDescription.
        """
        self.openapi_types = {
            'configuration_type': ConfigurationType,
            'metrics_level': MetricsLevel,
            'log_level': LogLevel
        }

        self.attribute_map = {
            'configuration_type': 'ConfigurationType',
            'metrics_level': 'MetricsLevel',
            'log_level': 'LogLevel'
        }

        self._configuration_type = configuration_type
        self._metrics_level = metrics_level
        self._log_level = log_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringConfigurationDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringConfigurationDescription of this MonitoringConfigurationDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_type(self):
        """Gets the configuration_type of this MonitoringConfigurationDescription.


        :return: The configuration_type of this MonitoringConfigurationDescription.
        :rtype: ConfigurationType
        """
        return self._configuration_type

    @configuration_type.setter
    def configuration_type(self, configuration_type):
        """Sets the configuration_type of this MonitoringConfigurationDescription.


        :param configuration_type: The configuration_type of this MonitoringConfigurationDescription.
        :type configuration_type: ConfigurationType
        """

        self._configuration_type = configuration_type

    @property
    def metrics_level(self):
        """Gets the metrics_level of this MonitoringConfigurationDescription.


        :return: The metrics_level of this MonitoringConfigurationDescription.
        :rtype: MetricsLevel
        """
        return self._metrics_level

    @metrics_level.setter
    def metrics_level(self, metrics_level):
        """Sets the metrics_level of this MonitoringConfigurationDescription.


        :param metrics_level: The metrics_level of this MonitoringConfigurationDescription.
        :type metrics_level: MetricsLevel
        """

        self._metrics_level = metrics_level

    @property
    def log_level(self):
        """Gets the log_level of this MonitoringConfigurationDescription.


        :return: The log_level of this MonitoringConfigurationDescription.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this MonitoringConfigurationDescription.


        :param log_level: The log_level of this MonitoringConfigurationDescription.
        :type log_level: LogLevel
        """

        self._log_level = log_level
