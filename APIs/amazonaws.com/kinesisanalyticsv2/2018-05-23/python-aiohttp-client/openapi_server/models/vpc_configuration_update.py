# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpcConfigurationUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vpc_configuration_id: str=None, subnet_id_updates: List=None, security_group_id_updates: List=None):
        """VpcConfigurationUpdate - a model defined in OpenAPI

        :param vpc_configuration_id: The vpc_configuration_id of this VpcConfigurationUpdate.
        :param subnet_id_updates: The subnet_id_updates of this VpcConfigurationUpdate.
        :param security_group_id_updates: The security_group_id_updates of this VpcConfigurationUpdate.
        """
        self.openapi_types = {
            'vpc_configuration_id': str,
            'subnet_id_updates': List,
            'security_group_id_updates': List
        }

        self.attribute_map = {
            'vpc_configuration_id': 'VpcConfigurationId',
            'subnet_id_updates': 'SubnetIdUpdates',
            'security_group_id_updates': 'SecurityGroupIdUpdates'
        }

        self._vpc_configuration_id = vpc_configuration_id
        self._subnet_id_updates = subnet_id_updates
        self._security_group_id_updates = security_group_id_updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpcConfigurationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpcConfigurationUpdate of this VpcConfigurationUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vpc_configuration_id(self):
        """Gets the vpc_configuration_id of this VpcConfigurationUpdate.


        :return: The vpc_configuration_id of this VpcConfigurationUpdate.
        :rtype: str
        """
        return self._vpc_configuration_id

    @vpc_configuration_id.setter
    def vpc_configuration_id(self, vpc_configuration_id):
        """Sets the vpc_configuration_id of this VpcConfigurationUpdate.


        :param vpc_configuration_id: The vpc_configuration_id of this VpcConfigurationUpdate.
        :type vpc_configuration_id: str
        """
        if vpc_configuration_id is None:
            raise ValueError("Invalid value for `vpc_configuration_id`, must not be `None`")

        self._vpc_configuration_id = vpc_configuration_id

    @property
    def subnet_id_updates(self):
        """Gets the subnet_id_updates of this VpcConfigurationUpdate.


        :return: The subnet_id_updates of this VpcConfigurationUpdate.
        :rtype: List
        """
        return self._subnet_id_updates

    @subnet_id_updates.setter
    def subnet_id_updates(self, subnet_id_updates):
        """Sets the subnet_id_updates of this VpcConfigurationUpdate.


        :param subnet_id_updates: The subnet_id_updates of this VpcConfigurationUpdate.
        :type subnet_id_updates: List
        """

        self._subnet_id_updates = subnet_id_updates

    @property
    def security_group_id_updates(self):
        """Gets the security_group_id_updates of this VpcConfigurationUpdate.


        :return: The security_group_id_updates of this VpcConfigurationUpdate.
        :rtype: List
        """
        return self._security_group_id_updates

    @security_group_id_updates.setter
    def security_group_id_updates(self, security_group_id_updates):
        """Sets the security_group_id_updates of this VpcConfigurationUpdate.


        :param security_group_id_updates: The security_group_id_updates of this VpcConfigurationUpdate.
        :type security_group_id_updates: List
        """

        self._security_group_id_updates = security_group_id_updates
