# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_type import ConfigurationType
from openapi_server import util


class CheckpointConfigurationDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_type: ConfigurationType=None, checkpointing_enabled: bool=None, checkpoint_interval: int=None, min_pause_between_checkpoints: int=None):
        """CheckpointConfigurationDescription - a model defined in OpenAPI

        :param configuration_type: The configuration_type of this CheckpointConfigurationDescription.
        :param checkpointing_enabled: The checkpointing_enabled of this CheckpointConfigurationDescription.
        :param checkpoint_interval: The checkpoint_interval of this CheckpointConfigurationDescription.
        :param min_pause_between_checkpoints: The min_pause_between_checkpoints of this CheckpointConfigurationDescription.
        """
        self.openapi_types = {
            'configuration_type': ConfigurationType,
            'checkpointing_enabled': bool,
            'checkpoint_interval': int,
            'min_pause_between_checkpoints': int
        }

        self.attribute_map = {
            'configuration_type': 'ConfigurationType',
            'checkpointing_enabled': 'CheckpointingEnabled',
            'checkpoint_interval': 'CheckpointInterval',
            'min_pause_between_checkpoints': 'MinPauseBetweenCheckpoints'
        }

        self._configuration_type = configuration_type
        self._checkpointing_enabled = checkpointing_enabled
        self._checkpoint_interval = checkpoint_interval
        self._min_pause_between_checkpoints = min_pause_between_checkpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckpointConfigurationDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckpointConfigurationDescription of this CheckpointConfigurationDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_type(self):
        """Gets the configuration_type of this CheckpointConfigurationDescription.


        :return: The configuration_type of this CheckpointConfigurationDescription.
        :rtype: ConfigurationType
        """
        return self._configuration_type

    @configuration_type.setter
    def configuration_type(self, configuration_type):
        """Sets the configuration_type of this CheckpointConfigurationDescription.


        :param configuration_type: The configuration_type of this CheckpointConfigurationDescription.
        :type configuration_type: ConfigurationType
        """

        self._configuration_type = configuration_type

    @property
    def checkpointing_enabled(self):
        """Gets the checkpointing_enabled of this CheckpointConfigurationDescription.


        :return: The checkpointing_enabled of this CheckpointConfigurationDescription.
        :rtype: bool
        """
        return self._checkpointing_enabled

    @checkpointing_enabled.setter
    def checkpointing_enabled(self, checkpointing_enabled):
        """Sets the checkpointing_enabled of this CheckpointConfigurationDescription.


        :param checkpointing_enabled: The checkpointing_enabled of this CheckpointConfigurationDescription.
        :type checkpointing_enabled: bool
        """

        self._checkpointing_enabled = checkpointing_enabled

    @property
    def checkpoint_interval(self):
        """Gets the checkpoint_interval of this CheckpointConfigurationDescription.


        :return: The checkpoint_interval of this CheckpointConfigurationDescription.
        :rtype: int
        """
        return self._checkpoint_interval

    @checkpoint_interval.setter
    def checkpoint_interval(self, checkpoint_interval):
        """Sets the checkpoint_interval of this CheckpointConfigurationDescription.


        :param checkpoint_interval: The checkpoint_interval of this CheckpointConfigurationDescription.
        :type checkpoint_interval: int
        """

        self._checkpoint_interval = checkpoint_interval

    @property
    def min_pause_between_checkpoints(self):
        """Gets the min_pause_between_checkpoints of this CheckpointConfigurationDescription.


        :return: The min_pause_between_checkpoints of this CheckpointConfigurationDescription.
        :rtype: int
        """
        return self._min_pause_between_checkpoints

    @min_pause_between_checkpoints.setter
    def min_pause_between_checkpoints(self, min_pause_between_checkpoints):
        """Sets the min_pause_between_checkpoints of this CheckpointConfigurationDescription.


        :param min_pause_between_checkpoints: The min_pause_between_checkpoints of this CheckpointConfigurationDescription.
        :type min_pause_between_checkpoints: int
        """

        self._min_pause_between_checkpoints = min_pause_between_checkpoints
