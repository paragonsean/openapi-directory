# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_schema_record_format import SourceSchemaRecordFormat
from openapi_server import util


class ReferenceDataSourceReferenceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_format: SourceSchemaRecordFormat=None, record_encoding: str=None, record_columns: List=None):
        """ReferenceDataSourceReferenceSchema - a model defined in OpenAPI

        :param record_format: The record_format of this ReferenceDataSourceReferenceSchema.
        :param record_encoding: The record_encoding of this ReferenceDataSourceReferenceSchema.
        :param record_columns: The record_columns of this ReferenceDataSourceReferenceSchema.
        """
        self.openapi_types = {
            'record_format': SourceSchemaRecordFormat,
            'record_encoding': str,
            'record_columns': List
        }

        self.attribute_map = {
            'record_format': 'RecordFormat',
            'record_encoding': 'RecordEncoding',
            'record_columns': 'RecordColumns'
        }

        self._record_format = record_format
        self._record_encoding = record_encoding
        self._record_columns = record_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceDataSourceReferenceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceDataSource_ReferenceSchema of this ReferenceDataSourceReferenceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_format(self):
        """Gets the record_format of this ReferenceDataSourceReferenceSchema.


        :return: The record_format of this ReferenceDataSourceReferenceSchema.
        :rtype: SourceSchemaRecordFormat
        """
        return self._record_format

    @record_format.setter
    def record_format(self, record_format):
        """Sets the record_format of this ReferenceDataSourceReferenceSchema.


        :param record_format: The record_format of this ReferenceDataSourceReferenceSchema.
        :type record_format: SourceSchemaRecordFormat
        """
        if record_format is None:
            raise ValueError("Invalid value for `record_format`, must not be `None`")

        self._record_format = record_format

    @property
    def record_encoding(self):
        """Gets the record_encoding of this ReferenceDataSourceReferenceSchema.


        :return: The record_encoding of this ReferenceDataSourceReferenceSchema.
        :rtype: str
        """
        return self._record_encoding

    @record_encoding.setter
    def record_encoding(self, record_encoding):
        """Sets the record_encoding of this ReferenceDataSourceReferenceSchema.


        :param record_encoding: The record_encoding of this ReferenceDataSourceReferenceSchema.
        :type record_encoding: str
        """

        self._record_encoding = record_encoding

    @property
    def record_columns(self):
        """Gets the record_columns of this ReferenceDataSourceReferenceSchema.


        :return: The record_columns of this ReferenceDataSourceReferenceSchema.
        :rtype: List
        """
        return self._record_columns

    @record_columns.setter
    def record_columns(self, record_columns):
        """Sets the record_columns of this ReferenceDataSourceReferenceSchema.


        :param record_columns: The record_columns of this ReferenceDataSourceReferenceSchema.
        :type record_columns: List
        """
        if record_columns is None:
            raise ValueError("Invalid value for `record_columns`, must not be `None`")

        self._record_columns = record_columns
