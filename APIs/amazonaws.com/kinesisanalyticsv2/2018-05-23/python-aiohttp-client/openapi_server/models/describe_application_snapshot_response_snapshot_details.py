# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_status import SnapshotStatus
from openapi_server import util


class DescribeApplicationSnapshotResponseSnapshotDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot_name: str=None, snapshot_status: SnapshotStatus=None, application_version_id: int=None, snapshot_creation_timestamp: datetime=None):
        """DescribeApplicationSnapshotResponseSnapshotDetails - a model defined in OpenAPI

        :param snapshot_name: The snapshot_name of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :param snapshot_status: The snapshot_status of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :param application_version_id: The application_version_id of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :param snapshot_creation_timestamp: The snapshot_creation_timestamp of this DescribeApplicationSnapshotResponseSnapshotDetails.
        """
        self.openapi_types = {
            'snapshot_name': str,
            'snapshot_status': SnapshotStatus,
            'application_version_id': int,
            'snapshot_creation_timestamp': datetime
        }

        self.attribute_map = {
            'snapshot_name': 'SnapshotName',
            'snapshot_status': 'SnapshotStatus',
            'application_version_id': 'ApplicationVersionId',
            'snapshot_creation_timestamp': 'SnapshotCreationTimestamp'
        }

        self._snapshot_name = snapshot_name
        self._snapshot_status = snapshot_status
        self._application_version_id = application_version_id
        self._snapshot_creation_timestamp = snapshot_creation_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeApplicationSnapshotResponseSnapshotDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeApplicationSnapshotResponse_SnapshotDetails of this DescribeApplicationSnapshotResponseSnapshotDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :return: The snapshot_name of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :param snapshot_name: The snapshot_name of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :type snapshot_name: str
        """
        if snapshot_name is None:
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")

        self._snapshot_name = snapshot_name

    @property
    def snapshot_status(self):
        """Gets the snapshot_status of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :return: The snapshot_status of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :rtype: SnapshotStatus
        """
        return self._snapshot_status

    @snapshot_status.setter
    def snapshot_status(self, snapshot_status):
        """Sets the snapshot_status of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :param snapshot_status: The snapshot_status of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :type snapshot_status: SnapshotStatus
        """
        if snapshot_status is None:
            raise ValueError("Invalid value for `snapshot_status`, must not be `None`")

        self._snapshot_status = snapshot_status

    @property
    def application_version_id(self):
        """Gets the application_version_id of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :return: The application_version_id of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :rtype: int
        """
        return self._application_version_id

    @application_version_id.setter
    def application_version_id(self, application_version_id):
        """Sets the application_version_id of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :param application_version_id: The application_version_id of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :type application_version_id: int
        """
        if application_version_id is None:
            raise ValueError("Invalid value for `application_version_id`, must not be `None`")

        self._application_version_id = application_version_id

    @property
    def snapshot_creation_timestamp(self):
        """Gets the snapshot_creation_timestamp of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :return: The snapshot_creation_timestamp of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :rtype: datetime
        """
        return self._snapshot_creation_timestamp

    @snapshot_creation_timestamp.setter
    def snapshot_creation_timestamp(self, snapshot_creation_timestamp):
        """Sets the snapshot_creation_timestamp of this DescribeApplicationSnapshotResponseSnapshotDetails.


        :param snapshot_creation_timestamp: The snapshot_creation_timestamp of this DescribeApplicationSnapshotResponseSnapshotDetails.
        :type snapshot_creation_timestamp: datetime
        """

        self._snapshot_creation_timestamp = snapshot_creation_timestamp
