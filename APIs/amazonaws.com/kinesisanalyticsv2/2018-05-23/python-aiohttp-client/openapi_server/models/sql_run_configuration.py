# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_run_configuration_input_starting_position_configuration import SqlRunConfigurationInputStartingPositionConfiguration
from openapi_server import util


class SqlRunConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_id: str=None, input_starting_position_configuration: SqlRunConfigurationInputStartingPositionConfiguration=None):
        """SqlRunConfiguration - a model defined in OpenAPI

        :param input_id: The input_id of this SqlRunConfiguration.
        :param input_starting_position_configuration: The input_starting_position_configuration of this SqlRunConfiguration.
        """
        self.openapi_types = {
            'input_id': str,
            'input_starting_position_configuration': SqlRunConfigurationInputStartingPositionConfiguration
        }

        self.attribute_map = {
            'input_id': 'InputId',
            'input_starting_position_configuration': 'InputStartingPositionConfiguration'
        }

        self._input_id = input_id
        self._input_starting_position_configuration = input_starting_position_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlRunConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlRunConfiguration of this SqlRunConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_id(self):
        """Gets the input_id of this SqlRunConfiguration.


        :return: The input_id of this SqlRunConfiguration.
        :rtype: str
        """
        return self._input_id

    @input_id.setter
    def input_id(self, input_id):
        """Sets the input_id of this SqlRunConfiguration.


        :param input_id: The input_id of this SqlRunConfiguration.
        :type input_id: str
        """
        if input_id is None:
            raise ValueError("Invalid value for `input_id`, must not be `None`")

        self._input_id = input_id

    @property
    def input_starting_position_configuration(self):
        """Gets the input_starting_position_configuration of this SqlRunConfiguration.


        :return: The input_starting_position_configuration of this SqlRunConfiguration.
        :rtype: SqlRunConfigurationInputStartingPositionConfiguration
        """
        return self._input_starting_position_configuration

    @input_starting_position_configuration.setter
    def input_starting_position_configuration(self, input_starting_position_configuration):
        """Sets the input_starting_position_configuration of this SqlRunConfiguration.


        :param input_starting_position_configuration: The input_starting_position_configuration of this SqlRunConfiguration.
        :type input_starting_position_configuration: SqlRunConfigurationInputStartingPositionConfiguration
        """
        if input_starting_position_configuration is None:
            raise ValueError("Invalid value for `input_starting_position_configuration`, must not be `None`")

        self._input_starting_position_configuration = input_starting_position_configuration
