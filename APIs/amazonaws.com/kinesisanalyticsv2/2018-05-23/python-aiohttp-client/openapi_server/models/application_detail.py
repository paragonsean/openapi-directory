# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_detail_application_configuration_description import ApplicationDetailApplicationConfigurationDescription
from openapi_server.models.application_detail_application_maintenance_configuration_description import ApplicationDetailApplicationMaintenanceConfigurationDescription
from openapi_server.models.application_mode import ApplicationMode
from openapi_server.models.application_status import ApplicationStatus
from openapi_server.models.runtime_environment import RuntimeEnvironment
from openapi_server import util


class ApplicationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_arn: str=None, application_description: str=None, application_name: str=None, runtime_environment: RuntimeEnvironment=None, service_execution_role: str=None, application_status: ApplicationStatus=None, application_version_id: int=None, create_timestamp: datetime=None, last_update_timestamp: datetime=None, application_configuration_description: ApplicationDetailApplicationConfigurationDescription=None, cloud_watch_logging_option_descriptions: List=None, application_maintenance_configuration_description: ApplicationDetailApplicationMaintenanceConfigurationDescription=None, application_version_updated_from: int=None, application_version_rolled_back_from: int=None, conditional_token: str=None, application_version_rolled_back_to: int=None, application_mode: ApplicationMode=None):
        """ApplicationDetail - a model defined in OpenAPI

        :param application_arn: The application_arn of this ApplicationDetail.
        :param application_description: The application_description of this ApplicationDetail.
        :param application_name: The application_name of this ApplicationDetail.
        :param runtime_environment: The runtime_environment of this ApplicationDetail.
        :param service_execution_role: The service_execution_role of this ApplicationDetail.
        :param application_status: The application_status of this ApplicationDetail.
        :param application_version_id: The application_version_id of this ApplicationDetail.
        :param create_timestamp: The create_timestamp of this ApplicationDetail.
        :param last_update_timestamp: The last_update_timestamp of this ApplicationDetail.
        :param application_configuration_description: The application_configuration_description of this ApplicationDetail.
        :param cloud_watch_logging_option_descriptions: The cloud_watch_logging_option_descriptions of this ApplicationDetail.
        :param application_maintenance_configuration_description: The application_maintenance_configuration_description of this ApplicationDetail.
        :param application_version_updated_from: The application_version_updated_from of this ApplicationDetail.
        :param application_version_rolled_back_from: The application_version_rolled_back_from of this ApplicationDetail.
        :param conditional_token: The conditional_token of this ApplicationDetail.
        :param application_version_rolled_back_to: The application_version_rolled_back_to of this ApplicationDetail.
        :param application_mode: The application_mode of this ApplicationDetail.
        """
        self.openapi_types = {
            'application_arn': str,
            'application_description': str,
            'application_name': str,
            'runtime_environment': RuntimeEnvironment,
            'service_execution_role': str,
            'application_status': ApplicationStatus,
            'application_version_id': int,
            'create_timestamp': datetime,
            'last_update_timestamp': datetime,
            'application_configuration_description': ApplicationDetailApplicationConfigurationDescription,
            'cloud_watch_logging_option_descriptions': List,
            'application_maintenance_configuration_description': ApplicationDetailApplicationMaintenanceConfigurationDescription,
            'application_version_updated_from': int,
            'application_version_rolled_back_from': int,
            'conditional_token': str,
            'application_version_rolled_back_to': int,
            'application_mode': ApplicationMode
        }

        self.attribute_map = {
            'application_arn': 'ApplicationARN',
            'application_description': 'ApplicationDescription',
            'application_name': 'ApplicationName',
            'runtime_environment': 'RuntimeEnvironment',
            'service_execution_role': 'ServiceExecutionRole',
            'application_status': 'ApplicationStatus',
            'application_version_id': 'ApplicationVersionId',
            'create_timestamp': 'CreateTimestamp',
            'last_update_timestamp': 'LastUpdateTimestamp',
            'application_configuration_description': 'ApplicationConfigurationDescription',
            'cloud_watch_logging_option_descriptions': 'CloudWatchLoggingOptionDescriptions',
            'application_maintenance_configuration_description': 'ApplicationMaintenanceConfigurationDescription',
            'application_version_updated_from': 'ApplicationVersionUpdatedFrom',
            'application_version_rolled_back_from': 'ApplicationVersionRolledBackFrom',
            'conditional_token': 'ConditionalToken',
            'application_version_rolled_back_to': 'ApplicationVersionRolledBackTo',
            'application_mode': 'ApplicationMode'
        }

        self._application_arn = application_arn
        self._application_description = application_description
        self._application_name = application_name
        self._runtime_environment = runtime_environment
        self._service_execution_role = service_execution_role
        self._application_status = application_status
        self._application_version_id = application_version_id
        self._create_timestamp = create_timestamp
        self._last_update_timestamp = last_update_timestamp
        self._application_configuration_description = application_configuration_description
        self._cloud_watch_logging_option_descriptions = cloud_watch_logging_option_descriptions
        self._application_maintenance_configuration_description = application_maintenance_configuration_description
        self._application_version_updated_from = application_version_updated_from
        self._application_version_rolled_back_from = application_version_rolled_back_from
        self._conditional_token = conditional_token
        self._application_version_rolled_back_to = application_version_rolled_back_to
        self._application_mode = application_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationDetail of this ApplicationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_arn(self):
        """Gets the application_arn of this ApplicationDetail.


        :return: The application_arn of this ApplicationDetail.
        :rtype: str
        """
        return self._application_arn

    @application_arn.setter
    def application_arn(self, application_arn):
        """Sets the application_arn of this ApplicationDetail.


        :param application_arn: The application_arn of this ApplicationDetail.
        :type application_arn: str
        """
        if application_arn is None:
            raise ValueError("Invalid value for `application_arn`, must not be `None`")

        self._application_arn = application_arn

    @property
    def application_description(self):
        """Gets the application_description of this ApplicationDetail.


        :return: The application_description of this ApplicationDetail.
        :rtype: str
        """
        return self._application_description

    @application_description.setter
    def application_description(self, application_description):
        """Sets the application_description of this ApplicationDetail.


        :param application_description: The application_description of this ApplicationDetail.
        :type application_description: str
        """

        self._application_description = application_description

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationDetail.


        :return: The application_name of this ApplicationDetail.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationDetail.


        :param application_name: The application_name of this ApplicationDetail.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def runtime_environment(self):
        """Gets the runtime_environment of this ApplicationDetail.


        :return: The runtime_environment of this ApplicationDetail.
        :rtype: RuntimeEnvironment
        """
        return self._runtime_environment

    @runtime_environment.setter
    def runtime_environment(self, runtime_environment):
        """Sets the runtime_environment of this ApplicationDetail.


        :param runtime_environment: The runtime_environment of this ApplicationDetail.
        :type runtime_environment: RuntimeEnvironment
        """
        if runtime_environment is None:
            raise ValueError("Invalid value for `runtime_environment`, must not be `None`")

        self._runtime_environment = runtime_environment

    @property
    def service_execution_role(self):
        """Gets the service_execution_role of this ApplicationDetail.


        :return: The service_execution_role of this ApplicationDetail.
        :rtype: str
        """
        return self._service_execution_role

    @service_execution_role.setter
    def service_execution_role(self, service_execution_role):
        """Sets the service_execution_role of this ApplicationDetail.


        :param service_execution_role: The service_execution_role of this ApplicationDetail.
        :type service_execution_role: str
        """

        self._service_execution_role = service_execution_role

    @property
    def application_status(self):
        """Gets the application_status of this ApplicationDetail.


        :return: The application_status of this ApplicationDetail.
        :rtype: ApplicationStatus
        """
        return self._application_status

    @application_status.setter
    def application_status(self, application_status):
        """Sets the application_status of this ApplicationDetail.


        :param application_status: The application_status of this ApplicationDetail.
        :type application_status: ApplicationStatus
        """
        if application_status is None:
            raise ValueError("Invalid value for `application_status`, must not be `None`")

        self._application_status = application_status

    @property
    def application_version_id(self):
        """Gets the application_version_id of this ApplicationDetail.


        :return: The application_version_id of this ApplicationDetail.
        :rtype: int
        """
        return self._application_version_id

    @application_version_id.setter
    def application_version_id(self, application_version_id):
        """Sets the application_version_id of this ApplicationDetail.


        :param application_version_id: The application_version_id of this ApplicationDetail.
        :type application_version_id: int
        """
        if application_version_id is None:
            raise ValueError("Invalid value for `application_version_id`, must not be `None`")

        self._application_version_id = application_version_id

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ApplicationDetail.


        :return: The create_timestamp of this ApplicationDetail.
        :rtype: datetime
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ApplicationDetail.


        :param create_timestamp: The create_timestamp of this ApplicationDetail.
        :type create_timestamp: datetime
        """

        self._create_timestamp = create_timestamp

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this ApplicationDetail.


        :return: The last_update_timestamp of this ApplicationDetail.
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this ApplicationDetail.


        :param last_update_timestamp: The last_update_timestamp of this ApplicationDetail.
        :type last_update_timestamp: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def application_configuration_description(self):
        """Gets the application_configuration_description of this ApplicationDetail.


        :return: The application_configuration_description of this ApplicationDetail.
        :rtype: ApplicationDetailApplicationConfigurationDescription
        """
        return self._application_configuration_description

    @application_configuration_description.setter
    def application_configuration_description(self, application_configuration_description):
        """Sets the application_configuration_description of this ApplicationDetail.


        :param application_configuration_description: The application_configuration_description of this ApplicationDetail.
        :type application_configuration_description: ApplicationDetailApplicationConfigurationDescription
        """

        self._application_configuration_description = application_configuration_description

    @property
    def cloud_watch_logging_option_descriptions(self):
        """Gets the cloud_watch_logging_option_descriptions of this ApplicationDetail.


        :return: The cloud_watch_logging_option_descriptions of this ApplicationDetail.
        :rtype: List
        """
        return self._cloud_watch_logging_option_descriptions

    @cloud_watch_logging_option_descriptions.setter
    def cloud_watch_logging_option_descriptions(self, cloud_watch_logging_option_descriptions):
        """Sets the cloud_watch_logging_option_descriptions of this ApplicationDetail.


        :param cloud_watch_logging_option_descriptions: The cloud_watch_logging_option_descriptions of this ApplicationDetail.
        :type cloud_watch_logging_option_descriptions: List
        """

        self._cloud_watch_logging_option_descriptions = cloud_watch_logging_option_descriptions

    @property
    def application_maintenance_configuration_description(self):
        """Gets the application_maintenance_configuration_description of this ApplicationDetail.


        :return: The application_maintenance_configuration_description of this ApplicationDetail.
        :rtype: ApplicationDetailApplicationMaintenanceConfigurationDescription
        """
        return self._application_maintenance_configuration_description

    @application_maintenance_configuration_description.setter
    def application_maintenance_configuration_description(self, application_maintenance_configuration_description):
        """Sets the application_maintenance_configuration_description of this ApplicationDetail.


        :param application_maintenance_configuration_description: The application_maintenance_configuration_description of this ApplicationDetail.
        :type application_maintenance_configuration_description: ApplicationDetailApplicationMaintenanceConfigurationDescription
        """

        self._application_maintenance_configuration_description = application_maintenance_configuration_description

    @property
    def application_version_updated_from(self):
        """Gets the application_version_updated_from of this ApplicationDetail.


        :return: The application_version_updated_from of this ApplicationDetail.
        :rtype: int
        """
        return self._application_version_updated_from

    @application_version_updated_from.setter
    def application_version_updated_from(self, application_version_updated_from):
        """Sets the application_version_updated_from of this ApplicationDetail.


        :param application_version_updated_from: The application_version_updated_from of this ApplicationDetail.
        :type application_version_updated_from: int
        """

        self._application_version_updated_from = application_version_updated_from

    @property
    def application_version_rolled_back_from(self):
        """Gets the application_version_rolled_back_from of this ApplicationDetail.


        :return: The application_version_rolled_back_from of this ApplicationDetail.
        :rtype: int
        """
        return self._application_version_rolled_back_from

    @application_version_rolled_back_from.setter
    def application_version_rolled_back_from(self, application_version_rolled_back_from):
        """Sets the application_version_rolled_back_from of this ApplicationDetail.


        :param application_version_rolled_back_from: The application_version_rolled_back_from of this ApplicationDetail.
        :type application_version_rolled_back_from: int
        """

        self._application_version_rolled_back_from = application_version_rolled_back_from

    @property
    def conditional_token(self):
        """Gets the conditional_token of this ApplicationDetail.


        :return: The conditional_token of this ApplicationDetail.
        :rtype: str
        """
        return self._conditional_token

    @conditional_token.setter
    def conditional_token(self, conditional_token):
        """Sets the conditional_token of this ApplicationDetail.


        :param conditional_token: The conditional_token of this ApplicationDetail.
        :type conditional_token: str
        """

        self._conditional_token = conditional_token

    @property
    def application_version_rolled_back_to(self):
        """Gets the application_version_rolled_back_to of this ApplicationDetail.


        :return: The application_version_rolled_back_to of this ApplicationDetail.
        :rtype: int
        """
        return self._application_version_rolled_back_to

    @application_version_rolled_back_to.setter
    def application_version_rolled_back_to(self, application_version_rolled_back_to):
        """Sets the application_version_rolled_back_to of this ApplicationDetail.


        :param application_version_rolled_back_to: The application_version_rolled_back_to of this ApplicationDetail.
        :type application_version_rolled_back_to: int
        """

        self._application_version_rolled_back_to = application_version_rolled_back_to

    @property
    def application_mode(self):
        """Gets the application_mode of this ApplicationDetail.


        :return: The application_mode of this ApplicationDetail.
        :rtype: ApplicationMode
        """
        return self._application_mode

    @application_mode.setter
    def application_mode(self, application_mode):
        """Sets the application_mode of this ApplicationDetail.


        :param application_mode: The application_mode of this ApplicationDetail.
        :type application_mode: ApplicationMode
        """

        self._application_mode = application_mode
