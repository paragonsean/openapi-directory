# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateEnvironmentOperationsRoleMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_name: str=None, operations_role: str=None):
        """AssociateEnvironmentOperationsRoleMessage - a model defined in OpenAPI

        :param environment_name: The environment_name of this AssociateEnvironmentOperationsRoleMessage.
        :param operations_role: The operations_role of this AssociateEnvironmentOperationsRoleMessage.
        """
        self.openapi_types = {
            'environment_name': str,
            'operations_role': str
        }

        self.attribute_map = {
            'environment_name': 'EnvironmentName',
            'operations_role': 'OperationsRole'
        }

        self._environment_name = environment_name
        self._operations_role = operations_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateEnvironmentOperationsRoleMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateEnvironmentOperationsRoleMessage of this AssociateEnvironmentOperationsRoleMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_name(self):
        """Gets the environment_name of this AssociateEnvironmentOperationsRoleMessage.


        :return: The environment_name of this AssociateEnvironmentOperationsRoleMessage.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this AssociateEnvironmentOperationsRoleMessage.


        :param environment_name: The environment_name of this AssociateEnvironmentOperationsRoleMessage.
        :type environment_name: str
        """
        if environment_name is None:
            raise ValueError("Invalid value for `environment_name`, must not be `None`")

        self._environment_name = environment_name

    @property
    def operations_role(self):
        """Gets the operations_role of this AssociateEnvironmentOperationsRoleMessage.


        :return: The operations_role of this AssociateEnvironmentOperationsRoleMessage.
        :rtype: str
        """
        return self._operations_role

    @operations_role.setter
    def operations_role(self, operations_role):
        """Sets the operations_role of this AssociateEnvironmentOperationsRoleMessage.


        :param operations_role: The operations_role of this AssociateEnvironmentOperationsRoleMessage.
        :type operations_role: str
        """
        if operations_role is None:
            raise ValueError("Invalid value for `operations_role`, must not be `None`")

        self._operations_role = operations_role
