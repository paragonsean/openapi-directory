# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_configuration_template_message_source_configuration import CreateConfigurationTemplateMessageSourceConfiguration
from openapi_server import util


class CreateConfigurationTemplateMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, template_name: str=None, solution_stack_name: str=None, platform_arn: str=None, source_configuration: CreateConfigurationTemplateMessageSourceConfiguration=None, environment_id: str=None, description: str=None, option_settings: List=None, tags: List=None):
        """CreateConfigurationTemplateMessage - a model defined in OpenAPI

        :param application_name: The application_name of this CreateConfigurationTemplateMessage.
        :param template_name: The template_name of this CreateConfigurationTemplateMessage.
        :param solution_stack_name: The solution_stack_name of this CreateConfigurationTemplateMessage.
        :param platform_arn: The platform_arn of this CreateConfigurationTemplateMessage.
        :param source_configuration: The source_configuration of this CreateConfigurationTemplateMessage.
        :param environment_id: The environment_id of this CreateConfigurationTemplateMessage.
        :param description: The description of this CreateConfigurationTemplateMessage.
        :param option_settings: The option_settings of this CreateConfigurationTemplateMessage.
        :param tags: The tags of this CreateConfigurationTemplateMessage.
        """
        self.openapi_types = {
            'application_name': str,
            'template_name': str,
            'solution_stack_name': str,
            'platform_arn': str,
            'source_configuration': CreateConfigurationTemplateMessageSourceConfiguration,
            'environment_id': str,
            'description': str,
            'option_settings': List,
            'tags': List
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'template_name': 'TemplateName',
            'solution_stack_name': 'SolutionStackName',
            'platform_arn': 'PlatformArn',
            'source_configuration': 'SourceConfiguration',
            'environment_id': 'EnvironmentId',
            'description': 'Description',
            'option_settings': 'OptionSettings',
            'tags': 'Tags'
        }

        self._application_name = application_name
        self._template_name = template_name
        self._solution_stack_name = solution_stack_name
        self._platform_arn = platform_arn
        self._source_configuration = source_configuration
        self._environment_id = environment_id
        self._description = description
        self._option_settings = option_settings
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationTemplateMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfigurationTemplateMessage of this CreateConfigurationTemplateMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this CreateConfigurationTemplateMessage.


        :return: The application_name of this CreateConfigurationTemplateMessage.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CreateConfigurationTemplateMessage.


        :param application_name: The application_name of this CreateConfigurationTemplateMessage.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def template_name(self):
        """Gets the template_name of this CreateConfigurationTemplateMessage.


        :return: The template_name of this CreateConfigurationTemplateMessage.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateConfigurationTemplateMessage.


        :param template_name: The template_name of this CreateConfigurationTemplateMessage.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def solution_stack_name(self):
        """Gets the solution_stack_name of this CreateConfigurationTemplateMessage.


        :return: The solution_stack_name of this CreateConfigurationTemplateMessage.
        :rtype: str
        """
        return self._solution_stack_name

    @solution_stack_name.setter
    def solution_stack_name(self, solution_stack_name):
        """Sets the solution_stack_name of this CreateConfigurationTemplateMessage.


        :param solution_stack_name: The solution_stack_name of this CreateConfigurationTemplateMessage.
        :type solution_stack_name: str
        """

        self._solution_stack_name = solution_stack_name

    @property
    def platform_arn(self):
        """Gets the platform_arn of this CreateConfigurationTemplateMessage.


        :return: The platform_arn of this CreateConfigurationTemplateMessage.
        :rtype: str
        """
        return self._platform_arn

    @platform_arn.setter
    def platform_arn(self, platform_arn):
        """Sets the platform_arn of this CreateConfigurationTemplateMessage.


        :param platform_arn: The platform_arn of this CreateConfigurationTemplateMessage.
        :type platform_arn: str
        """

        self._platform_arn = platform_arn

    @property
    def source_configuration(self):
        """Gets the source_configuration of this CreateConfigurationTemplateMessage.


        :return: The source_configuration of this CreateConfigurationTemplateMessage.
        :rtype: CreateConfigurationTemplateMessageSourceConfiguration
        """
        return self._source_configuration

    @source_configuration.setter
    def source_configuration(self, source_configuration):
        """Sets the source_configuration of this CreateConfigurationTemplateMessage.


        :param source_configuration: The source_configuration of this CreateConfigurationTemplateMessage.
        :type source_configuration: CreateConfigurationTemplateMessageSourceConfiguration
        """

        self._source_configuration = source_configuration

    @property
    def environment_id(self):
        """Gets the environment_id of this CreateConfigurationTemplateMessage.


        :return: The environment_id of this CreateConfigurationTemplateMessage.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this CreateConfigurationTemplateMessage.


        :param environment_id: The environment_id of this CreateConfigurationTemplateMessage.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def description(self):
        """Gets the description of this CreateConfigurationTemplateMessage.


        :return: The description of this CreateConfigurationTemplateMessage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfigurationTemplateMessage.


        :param description: The description of this CreateConfigurationTemplateMessage.
        :type description: str
        """

        self._description = description

    @property
    def option_settings(self):
        """Gets the option_settings of this CreateConfigurationTemplateMessage.


        :return: The option_settings of this CreateConfigurationTemplateMessage.
        :rtype: List
        """
        return self._option_settings

    @option_settings.setter
    def option_settings(self, option_settings):
        """Sets the option_settings of this CreateConfigurationTemplateMessage.


        :param option_settings: The option_settings of this CreateConfigurationTemplateMessage.
        :type option_settings: List
        """

        self._option_settings = option_settings

    @property
    def tags(self):
        """Gets the tags of this CreateConfigurationTemplateMessage.


        :return: The tags of this CreateConfigurationTemplateMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfigurationTemplateMessage.


        :param tags: The tags of this CreateConfigurationTemplateMessage.
        :type tags: List
        """

        self._tags = tags
