# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaxAgeRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, max_age_in_days: int=None, delete_source_from_s3: bool=None):
        """MaxAgeRule - a model defined in OpenAPI

        :param enabled: The enabled of this MaxAgeRule.
        :param max_age_in_days: The max_age_in_days of this MaxAgeRule.
        :param delete_source_from_s3: The delete_source_from_s3 of this MaxAgeRule.
        """
        self.openapi_types = {
            'enabled': bool,
            'max_age_in_days': int,
            'delete_source_from_s3': bool
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'max_age_in_days': 'MaxAgeInDays',
            'delete_source_from_s3': 'DeleteSourceFromS3'
        }

        self._enabled = enabled
        self._max_age_in_days = max_age_in_days
        self._delete_source_from_s3 = delete_source_from_s3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaxAgeRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaxAgeRule of this MaxAgeRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this MaxAgeRule.


        :return: The enabled of this MaxAgeRule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MaxAgeRule.


        :param enabled: The enabled of this MaxAgeRule.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def max_age_in_days(self):
        """Gets the max_age_in_days of this MaxAgeRule.


        :return: The max_age_in_days of this MaxAgeRule.
        :rtype: int
        """
        return self._max_age_in_days

    @max_age_in_days.setter
    def max_age_in_days(self, max_age_in_days):
        """Sets the max_age_in_days of this MaxAgeRule.


        :param max_age_in_days: The max_age_in_days of this MaxAgeRule.
        :type max_age_in_days: int
        """

        self._max_age_in_days = max_age_in_days

    @property
    def delete_source_from_s3(self):
        """Gets the delete_source_from_s3 of this MaxAgeRule.


        :return: The delete_source_from_s3 of this MaxAgeRule.
        :rtype: bool
        """
        return self._delete_source_from_s3

    @delete_source_from_s3.setter
    def delete_source_from_s3(self, delete_source_from_s3):
        """Sets the delete_source_from_s3 of this MaxAgeRule.


        :param delete_source_from_s3: The delete_source_from_s3 of this MaxAgeRule.
        :type delete_source_from_s3: bool
        """

        self._delete_source_from_s3 = delete_source_from_s3
