# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OptionSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_name: str=None, namespace: str=None, option_name: str=None):
        """OptionSpecification - a model defined in OpenAPI

        :param resource_name: The resource_name of this OptionSpecification.
        :param namespace: The namespace of this OptionSpecification.
        :param option_name: The option_name of this OptionSpecification.
        """
        self.openapi_types = {
            'resource_name': str,
            'namespace': str,
            'option_name': str
        }

        self.attribute_map = {
            'resource_name': 'ResourceName',
            'namespace': 'Namespace',
            'option_name': 'OptionName'
        }

        self._resource_name = resource_name
        self._namespace = namespace
        self._option_name = option_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptionSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptionSpecification of this OptionSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_name(self):
        """Gets the resource_name of this OptionSpecification.


        :return: The resource_name of this OptionSpecification.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this OptionSpecification.


        :param resource_name: The resource_name of this OptionSpecification.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def namespace(self):
        """Gets the namespace of this OptionSpecification.


        :return: The namespace of this OptionSpecification.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this OptionSpecification.


        :param namespace: The namespace of this OptionSpecification.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def option_name(self):
        """Gets the option_name of this OptionSpecification.


        :return: The option_name of this OptionSpecification.
        :rtype: str
        """
        return self._option_name

    @option_name.setter
    def option_name(self, option_name):
        """Sets the option_name of this OptionSpecification.


        :param option_name: The option_name of this OptionSpecification.
        :type option_name: str
        """

        self._option_name = option_name
