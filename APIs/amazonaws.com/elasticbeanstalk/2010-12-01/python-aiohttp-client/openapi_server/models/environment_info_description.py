# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_info_type import EnvironmentInfoType
from openapi_server import util


class EnvironmentInfoDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info_type: EnvironmentInfoType=None, ec2_instance_id: str=None, sample_timestamp: datetime=None, message: str=None):
        """EnvironmentInfoDescription - a model defined in OpenAPI

        :param info_type: The info_type of this EnvironmentInfoDescription.
        :param ec2_instance_id: The ec2_instance_id of this EnvironmentInfoDescription.
        :param sample_timestamp: The sample_timestamp of this EnvironmentInfoDescription.
        :param message: The message of this EnvironmentInfoDescription.
        """
        self.openapi_types = {
            'info_type': EnvironmentInfoType,
            'ec2_instance_id': str,
            'sample_timestamp': datetime,
            'message': str
        }

        self.attribute_map = {
            'info_type': 'InfoType',
            'ec2_instance_id': 'Ec2InstanceId',
            'sample_timestamp': 'SampleTimestamp',
            'message': 'Message'
        }

        self._info_type = info_type
        self._ec2_instance_id = ec2_instance_id
        self._sample_timestamp = sample_timestamp
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentInfoDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentInfoDescription of this EnvironmentInfoDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info_type(self):
        """Gets the info_type of this EnvironmentInfoDescription.


        :return: The info_type of this EnvironmentInfoDescription.
        :rtype: EnvironmentInfoType
        """
        return self._info_type

    @info_type.setter
    def info_type(self, info_type):
        """Sets the info_type of this EnvironmentInfoDescription.


        :param info_type: The info_type of this EnvironmentInfoDescription.
        :type info_type: EnvironmentInfoType
        """

        self._info_type = info_type

    @property
    def ec2_instance_id(self):
        """Gets the ec2_instance_id of this EnvironmentInfoDescription.


        :return: The ec2_instance_id of this EnvironmentInfoDescription.
        :rtype: str
        """
        return self._ec2_instance_id

    @ec2_instance_id.setter
    def ec2_instance_id(self, ec2_instance_id):
        """Sets the ec2_instance_id of this EnvironmentInfoDescription.


        :param ec2_instance_id: The ec2_instance_id of this EnvironmentInfoDescription.
        :type ec2_instance_id: str
        """

        self._ec2_instance_id = ec2_instance_id

    @property
    def sample_timestamp(self):
        """Gets the sample_timestamp of this EnvironmentInfoDescription.


        :return: The sample_timestamp of this EnvironmentInfoDescription.
        :rtype: datetime
        """
        return self._sample_timestamp

    @sample_timestamp.setter
    def sample_timestamp(self, sample_timestamp):
        """Sets the sample_timestamp of this EnvironmentInfoDescription.


        :param sample_timestamp: The sample_timestamp of this EnvironmentInfoDescription.
        :type sample_timestamp: datetime
        """

        self._sample_timestamp = sample_timestamp

    @property
    def message(self):
        """Gets the message of this EnvironmentInfoDescription.


        :return: The message of this EnvironmentInfoDescription.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EnvironmentInfoDescription.


        :param message: The message of this EnvironmentInfoDescription.
        :type message: str
        """

        self._message = message
