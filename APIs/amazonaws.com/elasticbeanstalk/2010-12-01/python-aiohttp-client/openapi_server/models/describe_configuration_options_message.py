# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeConfigurationOptionsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, template_name: str=None, environment_name: str=None, solution_stack_name: str=None, platform_arn: str=None, options: List=None):
        """DescribeConfigurationOptionsMessage - a model defined in OpenAPI

        :param application_name: The application_name of this DescribeConfigurationOptionsMessage.
        :param template_name: The template_name of this DescribeConfigurationOptionsMessage.
        :param environment_name: The environment_name of this DescribeConfigurationOptionsMessage.
        :param solution_stack_name: The solution_stack_name of this DescribeConfigurationOptionsMessage.
        :param platform_arn: The platform_arn of this DescribeConfigurationOptionsMessage.
        :param options: The options of this DescribeConfigurationOptionsMessage.
        """
        self.openapi_types = {
            'application_name': str,
            'template_name': str,
            'environment_name': str,
            'solution_stack_name': str,
            'platform_arn': str,
            'options': List
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'template_name': 'TemplateName',
            'environment_name': 'EnvironmentName',
            'solution_stack_name': 'SolutionStackName',
            'platform_arn': 'PlatformArn',
            'options': 'Options'
        }

        self._application_name = application_name
        self._template_name = template_name
        self._environment_name = environment_name
        self._solution_stack_name = solution_stack_name
        self._platform_arn = platform_arn
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConfigurationOptionsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConfigurationOptionsMessage of this DescribeConfigurationOptionsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this DescribeConfigurationOptionsMessage.


        :return: The application_name of this DescribeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this DescribeConfigurationOptionsMessage.


        :param application_name: The application_name of this DescribeConfigurationOptionsMessage.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def template_name(self):
        """Gets the template_name of this DescribeConfigurationOptionsMessage.


        :return: The template_name of this DescribeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this DescribeConfigurationOptionsMessage.


        :param template_name: The template_name of this DescribeConfigurationOptionsMessage.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def environment_name(self):
        """Gets the environment_name of this DescribeConfigurationOptionsMessage.


        :return: The environment_name of this DescribeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this DescribeConfigurationOptionsMessage.


        :param environment_name: The environment_name of this DescribeConfigurationOptionsMessage.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def solution_stack_name(self):
        """Gets the solution_stack_name of this DescribeConfigurationOptionsMessage.


        :return: The solution_stack_name of this DescribeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._solution_stack_name

    @solution_stack_name.setter
    def solution_stack_name(self, solution_stack_name):
        """Sets the solution_stack_name of this DescribeConfigurationOptionsMessage.


        :param solution_stack_name: The solution_stack_name of this DescribeConfigurationOptionsMessage.
        :type solution_stack_name: str
        """

        self._solution_stack_name = solution_stack_name

    @property
    def platform_arn(self):
        """Gets the platform_arn of this DescribeConfigurationOptionsMessage.


        :return: The platform_arn of this DescribeConfigurationOptionsMessage.
        :rtype: str
        """
        return self._platform_arn

    @platform_arn.setter
    def platform_arn(self, platform_arn):
        """Sets the platform_arn of this DescribeConfigurationOptionsMessage.


        :param platform_arn: The platform_arn of this DescribeConfigurationOptionsMessage.
        :type platform_arn: str
        """

        self._platform_arn = platform_arn

    @property
    def options(self):
        """Gets the options of this DescribeConfigurationOptionsMessage.


        :return: The options of this DescribeConfigurationOptionsMessage.
        :rtype: List
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DescribeConfigurationOptionsMessage.


        :param options: The options of this DescribeConfigurationOptionsMessage.
        :type options: List
        """

        self._options = options
