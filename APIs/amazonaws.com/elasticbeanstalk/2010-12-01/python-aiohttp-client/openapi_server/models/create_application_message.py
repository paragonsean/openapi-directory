# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_application_message_resource_lifecycle_config import CreateApplicationMessageResourceLifecycleConfig
from openapi_server import util


class CreateApplicationMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, description: str=None, resource_lifecycle_config: CreateApplicationMessageResourceLifecycleConfig=None, tags: List=None):
        """CreateApplicationMessage - a model defined in OpenAPI

        :param application_name: The application_name of this CreateApplicationMessage.
        :param description: The description of this CreateApplicationMessage.
        :param resource_lifecycle_config: The resource_lifecycle_config of this CreateApplicationMessage.
        :param tags: The tags of this CreateApplicationMessage.
        """
        self.openapi_types = {
            'application_name': str,
            'description': str,
            'resource_lifecycle_config': CreateApplicationMessageResourceLifecycleConfig,
            'tags': List
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'description': 'Description',
            'resource_lifecycle_config': 'ResourceLifecycleConfig',
            'tags': 'Tags'
        }

        self._application_name = application_name
        self._description = description
        self._resource_lifecycle_config = resource_lifecycle_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplicationMessage of this CreateApplicationMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this CreateApplicationMessage.


        :return: The application_name of this CreateApplicationMessage.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CreateApplicationMessage.


        :param application_name: The application_name of this CreateApplicationMessage.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def description(self):
        """Gets the description of this CreateApplicationMessage.


        :return: The description of this CreateApplicationMessage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateApplicationMessage.


        :param description: The description of this CreateApplicationMessage.
        :type description: str
        """

        self._description = description

    @property
    def resource_lifecycle_config(self):
        """Gets the resource_lifecycle_config of this CreateApplicationMessage.


        :return: The resource_lifecycle_config of this CreateApplicationMessage.
        :rtype: CreateApplicationMessageResourceLifecycleConfig
        """
        return self._resource_lifecycle_config

    @resource_lifecycle_config.setter
    def resource_lifecycle_config(self, resource_lifecycle_config):
        """Sets the resource_lifecycle_config of this CreateApplicationMessage.


        :param resource_lifecycle_config: The resource_lifecycle_config of this CreateApplicationMessage.
        :type resource_lifecycle_config: CreateApplicationMessageResourceLifecycleConfig
        """

        self._resource_lifecycle_config = resource_lifecycle_config

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationMessage.


        :return: The tags of this CreateApplicationMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationMessage.


        :param tags: The tags of this CreateApplicationMessage.
        :type tags: List
        """

        self._tags = tags
