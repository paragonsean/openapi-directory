# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_metrics_latency import ApplicationMetricsLatency
from openapi_server.models.application_metrics_status_codes import ApplicationMetricsStatusCodes
from openapi_server import util


class DescribeEnvironmentHealthResultApplicationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, request_count: int=None, status_codes: ApplicationMetricsStatusCodes=None, latency: ApplicationMetricsLatency=None):
        """DescribeEnvironmentHealthResultApplicationMetrics - a model defined in OpenAPI

        :param duration: The duration of this DescribeEnvironmentHealthResultApplicationMetrics.
        :param request_count: The request_count of this DescribeEnvironmentHealthResultApplicationMetrics.
        :param status_codes: The status_codes of this DescribeEnvironmentHealthResultApplicationMetrics.
        :param latency: The latency of this DescribeEnvironmentHealthResultApplicationMetrics.
        """
        self.openapi_types = {
            'duration': int,
            'request_count': int,
            'status_codes': ApplicationMetricsStatusCodes,
            'latency': ApplicationMetricsLatency
        }

        self.attribute_map = {
            'duration': 'Duration',
            'request_count': 'RequestCount',
            'status_codes': 'StatusCodes',
            'latency': 'Latency'
        }

        self._duration = duration
        self._request_count = request_count
        self._status_codes = status_codes
        self._latency = latency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeEnvironmentHealthResultApplicationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeEnvironmentHealthResult_ApplicationMetrics of this DescribeEnvironmentHealthResultApplicationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this DescribeEnvironmentHealthResultApplicationMetrics.


        :return: The duration of this DescribeEnvironmentHealthResultApplicationMetrics.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DescribeEnvironmentHealthResultApplicationMetrics.


        :param duration: The duration of this DescribeEnvironmentHealthResultApplicationMetrics.
        :type duration: int
        """

        self._duration = duration

    @property
    def request_count(self):
        """Gets the request_count of this DescribeEnvironmentHealthResultApplicationMetrics.


        :return: The request_count of this DescribeEnvironmentHealthResultApplicationMetrics.
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this DescribeEnvironmentHealthResultApplicationMetrics.


        :param request_count: The request_count of this DescribeEnvironmentHealthResultApplicationMetrics.
        :type request_count: int
        """

        self._request_count = request_count

    @property
    def status_codes(self):
        """Gets the status_codes of this DescribeEnvironmentHealthResultApplicationMetrics.


        :return: The status_codes of this DescribeEnvironmentHealthResultApplicationMetrics.
        :rtype: ApplicationMetricsStatusCodes
        """
        return self._status_codes

    @status_codes.setter
    def status_codes(self, status_codes):
        """Sets the status_codes of this DescribeEnvironmentHealthResultApplicationMetrics.


        :param status_codes: The status_codes of this DescribeEnvironmentHealthResultApplicationMetrics.
        :type status_codes: ApplicationMetricsStatusCodes
        """

        self._status_codes = status_codes

    @property
    def latency(self):
        """Gets the latency of this DescribeEnvironmentHealthResultApplicationMetrics.


        :return: The latency of this DescribeEnvironmentHealthResultApplicationMetrics.
        :rtype: ApplicationMetricsLatency
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this DescribeEnvironmentHealthResultApplicationMetrics.


        :param latency: The latency of this DescribeEnvironmentHealthResultApplicationMetrics.
        :type latency: ApplicationMetricsLatency
        """

        self._latency = latency
