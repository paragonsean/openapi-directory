# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_environment_message_tier import CreateEnvironmentMessageTier
from openapi_server import util


class CreateEnvironmentMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, environment_name: str=None, group_name: str=None, description: str=None, cname_prefix: str=None, tier: CreateEnvironmentMessageTier=None, tags: List=None, version_label: str=None, template_name: str=None, solution_stack_name: str=None, platform_arn: str=None, option_settings: List=None, options_to_remove: List=None, operations_role: str=None):
        """CreateEnvironmentMessage - a model defined in OpenAPI

        :param application_name: The application_name of this CreateEnvironmentMessage.
        :param environment_name: The environment_name of this CreateEnvironmentMessage.
        :param group_name: The group_name of this CreateEnvironmentMessage.
        :param description: The description of this CreateEnvironmentMessage.
        :param cname_prefix: The cname_prefix of this CreateEnvironmentMessage.
        :param tier: The tier of this CreateEnvironmentMessage.
        :param tags: The tags of this CreateEnvironmentMessage.
        :param version_label: The version_label of this CreateEnvironmentMessage.
        :param template_name: The template_name of this CreateEnvironmentMessage.
        :param solution_stack_name: The solution_stack_name of this CreateEnvironmentMessage.
        :param platform_arn: The platform_arn of this CreateEnvironmentMessage.
        :param option_settings: The option_settings of this CreateEnvironmentMessage.
        :param options_to_remove: The options_to_remove of this CreateEnvironmentMessage.
        :param operations_role: The operations_role of this CreateEnvironmentMessage.
        """
        self.openapi_types = {
            'application_name': str,
            'environment_name': str,
            'group_name': str,
            'description': str,
            'cname_prefix': str,
            'tier': CreateEnvironmentMessageTier,
            'tags': List,
            'version_label': str,
            'template_name': str,
            'solution_stack_name': str,
            'platform_arn': str,
            'option_settings': List,
            'options_to_remove': List,
            'operations_role': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'environment_name': 'EnvironmentName',
            'group_name': 'GroupName',
            'description': 'Description',
            'cname_prefix': 'CNAMEPrefix',
            'tier': 'Tier',
            'tags': 'Tags',
            'version_label': 'VersionLabel',
            'template_name': 'TemplateName',
            'solution_stack_name': 'SolutionStackName',
            'platform_arn': 'PlatformArn',
            'option_settings': 'OptionSettings',
            'options_to_remove': 'OptionsToRemove',
            'operations_role': 'OperationsRole'
        }

        self._application_name = application_name
        self._environment_name = environment_name
        self._group_name = group_name
        self._description = description
        self._cname_prefix = cname_prefix
        self._tier = tier
        self._tags = tags
        self._version_label = version_label
        self._template_name = template_name
        self._solution_stack_name = solution_stack_name
        self._platform_arn = platform_arn
        self._option_settings = option_settings
        self._options_to_remove = options_to_remove
        self._operations_role = operations_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentMessage of this CreateEnvironmentMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this CreateEnvironmentMessage.


        :return: The application_name of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CreateEnvironmentMessage.


        :param application_name: The application_name of this CreateEnvironmentMessage.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def environment_name(self):
        """Gets the environment_name of this CreateEnvironmentMessage.


        :return: The environment_name of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CreateEnvironmentMessage.


        :param environment_name: The environment_name of this CreateEnvironmentMessage.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def group_name(self):
        """Gets the group_name of this CreateEnvironmentMessage.


        :return: The group_name of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CreateEnvironmentMessage.


        :param group_name: The group_name of this CreateEnvironmentMessage.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentMessage.


        :return: The description of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentMessage.


        :param description: The description of this CreateEnvironmentMessage.
        :type description: str
        """

        self._description = description

    @property
    def cname_prefix(self):
        """Gets the cname_prefix of this CreateEnvironmentMessage.


        :return: The cname_prefix of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._cname_prefix

    @cname_prefix.setter
    def cname_prefix(self, cname_prefix):
        """Sets the cname_prefix of this CreateEnvironmentMessage.


        :param cname_prefix: The cname_prefix of this CreateEnvironmentMessage.
        :type cname_prefix: str
        """

        self._cname_prefix = cname_prefix

    @property
    def tier(self):
        """Gets the tier of this CreateEnvironmentMessage.


        :return: The tier of this CreateEnvironmentMessage.
        :rtype: CreateEnvironmentMessageTier
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CreateEnvironmentMessage.


        :param tier: The tier of this CreateEnvironmentMessage.
        :type tier: CreateEnvironmentMessageTier
        """

        self._tier = tier

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentMessage.


        :return: The tags of this CreateEnvironmentMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentMessage.


        :param tags: The tags of this CreateEnvironmentMessage.
        :type tags: List
        """

        self._tags = tags

    @property
    def version_label(self):
        """Gets the version_label of this CreateEnvironmentMessage.


        :return: The version_label of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._version_label

    @version_label.setter
    def version_label(self, version_label):
        """Sets the version_label of this CreateEnvironmentMessage.


        :param version_label: The version_label of this CreateEnvironmentMessage.
        :type version_label: str
        """

        self._version_label = version_label

    @property
    def template_name(self):
        """Gets the template_name of this CreateEnvironmentMessage.


        :return: The template_name of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateEnvironmentMessage.


        :param template_name: The template_name of this CreateEnvironmentMessage.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def solution_stack_name(self):
        """Gets the solution_stack_name of this CreateEnvironmentMessage.


        :return: The solution_stack_name of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._solution_stack_name

    @solution_stack_name.setter
    def solution_stack_name(self, solution_stack_name):
        """Sets the solution_stack_name of this CreateEnvironmentMessage.


        :param solution_stack_name: The solution_stack_name of this CreateEnvironmentMessage.
        :type solution_stack_name: str
        """

        self._solution_stack_name = solution_stack_name

    @property
    def platform_arn(self):
        """Gets the platform_arn of this CreateEnvironmentMessage.


        :return: The platform_arn of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._platform_arn

    @platform_arn.setter
    def platform_arn(self, platform_arn):
        """Sets the platform_arn of this CreateEnvironmentMessage.


        :param platform_arn: The platform_arn of this CreateEnvironmentMessage.
        :type platform_arn: str
        """

        self._platform_arn = platform_arn

    @property
    def option_settings(self):
        """Gets the option_settings of this CreateEnvironmentMessage.


        :return: The option_settings of this CreateEnvironmentMessage.
        :rtype: List
        """
        return self._option_settings

    @option_settings.setter
    def option_settings(self, option_settings):
        """Sets the option_settings of this CreateEnvironmentMessage.


        :param option_settings: The option_settings of this CreateEnvironmentMessage.
        :type option_settings: List
        """

        self._option_settings = option_settings

    @property
    def options_to_remove(self):
        """Gets the options_to_remove of this CreateEnvironmentMessage.


        :return: The options_to_remove of this CreateEnvironmentMessage.
        :rtype: List
        """
        return self._options_to_remove

    @options_to_remove.setter
    def options_to_remove(self, options_to_remove):
        """Sets the options_to_remove of this CreateEnvironmentMessage.


        :param options_to_remove: The options_to_remove of this CreateEnvironmentMessage.
        :type options_to_remove: List
        """

        self._options_to_remove = options_to_remove

    @property
    def operations_role(self):
        """Gets the operations_role of this CreateEnvironmentMessage.


        :return: The operations_role of this CreateEnvironmentMessage.
        :rtype: str
        """
        return self._operations_role

    @operations_role.setter
    def operations_role(self, operations_role):
        """Sets the operations_role of this CreateEnvironmentMessage.


        :param operations_role: The operations_role of this CreateEnvironmentMessage.
        :type operations_role: str
        """

        self._operations_role = operations_role
