# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComposeEnvironmentsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, group_name: str=None, version_labels: List=None):
        """ComposeEnvironmentsMessage - a model defined in OpenAPI

        :param application_name: The application_name of this ComposeEnvironmentsMessage.
        :param group_name: The group_name of this ComposeEnvironmentsMessage.
        :param version_labels: The version_labels of this ComposeEnvironmentsMessage.
        """
        self.openapi_types = {
            'application_name': str,
            'group_name': str,
            'version_labels': List
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'group_name': 'GroupName',
            'version_labels': 'VersionLabels'
        }

        self._application_name = application_name
        self._group_name = group_name
        self._version_labels = version_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComposeEnvironmentsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComposeEnvironmentsMessage of this ComposeEnvironmentsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this ComposeEnvironmentsMessage.


        :return: The application_name of this ComposeEnvironmentsMessage.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ComposeEnvironmentsMessage.


        :param application_name: The application_name of this ComposeEnvironmentsMessage.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def group_name(self):
        """Gets the group_name of this ComposeEnvironmentsMessage.


        :return: The group_name of this ComposeEnvironmentsMessage.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ComposeEnvironmentsMessage.


        :param group_name: The group_name of this ComposeEnvironmentsMessage.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def version_labels(self):
        """Gets the version_labels of this ComposeEnvironmentsMessage.


        :return: The version_labels of this ComposeEnvironmentsMessage.
        :rtype: List
        """
        return self._version_labels

    @version_labels.setter
    def version_labels(self, version_labels):
        """Sets the version_labels of this ComposeEnvironmentsMessage.


        :param version_labels: The version_labels of this ComposeEnvironmentsMessage.
        :type version_labels: List
        """

        self._version_labels = version_labels
