# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.single_instance_health_application_metrics import SingleInstanceHealthApplicationMetrics
from openapi_server.models.single_instance_health_deployment import SingleInstanceHealthDeployment
from openapi_server.models.single_instance_health_system import SingleInstanceHealthSystem
from openapi_server import util


class SingleInstanceHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, health_status: str=None, color: str=None, causes: List=None, launched_at: datetime=None, application_metrics: SingleInstanceHealthApplicationMetrics=None, system: SingleInstanceHealthSystem=None, deployment: SingleInstanceHealthDeployment=None, availability_zone: str=None, instance_type: str=None):
        """SingleInstanceHealth - a model defined in OpenAPI

        :param instance_id: The instance_id of this SingleInstanceHealth.
        :param health_status: The health_status of this SingleInstanceHealth.
        :param color: The color of this SingleInstanceHealth.
        :param causes: The causes of this SingleInstanceHealth.
        :param launched_at: The launched_at of this SingleInstanceHealth.
        :param application_metrics: The application_metrics of this SingleInstanceHealth.
        :param system: The system of this SingleInstanceHealth.
        :param deployment: The deployment of this SingleInstanceHealth.
        :param availability_zone: The availability_zone of this SingleInstanceHealth.
        :param instance_type: The instance_type of this SingleInstanceHealth.
        """
        self.openapi_types = {
            'instance_id': str,
            'health_status': str,
            'color': str,
            'causes': List,
            'launched_at': datetime,
            'application_metrics': SingleInstanceHealthApplicationMetrics,
            'system': SingleInstanceHealthSystem,
            'deployment': SingleInstanceHealthDeployment,
            'availability_zone': str,
            'instance_type': str
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'health_status': 'HealthStatus',
            'color': 'Color',
            'causes': 'Causes',
            'launched_at': 'LaunchedAt',
            'application_metrics': 'ApplicationMetrics',
            'system': 'System',
            'deployment': 'Deployment',
            'availability_zone': 'AvailabilityZone',
            'instance_type': 'InstanceType'
        }

        self._instance_id = instance_id
        self._health_status = health_status
        self._color = color
        self._causes = causes
        self._launched_at = launched_at
        self._application_metrics = application_metrics
        self._system = system
        self._deployment = deployment
        self._availability_zone = availability_zone
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SingleInstanceHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SingleInstanceHealth of this SingleInstanceHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this SingleInstanceHealth.


        :return: The instance_id of this SingleInstanceHealth.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SingleInstanceHealth.


        :param instance_id: The instance_id of this SingleInstanceHealth.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def health_status(self):
        """Gets the health_status of this SingleInstanceHealth.


        :return: The health_status of this SingleInstanceHealth.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this SingleInstanceHealth.


        :param health_status: The health_status of this SingleInstanceHealth.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def color(self):
        """Gets the color of this SingleInstanceHealth.


        :return: The color of this SingleInstanceHealth.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SingleInstanceHealth.


        :param color: The color of this SingleInstanceHealth.
        :type color: str
        """

        self._color = color

    @property
    def causes(self):
        """Gets the causes of this SingleInstanceHealth.


        :return: The causes of this SingleInstanceHealth.
        :rtype: List
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this SingleInstanceHealth.


        :param causes: The causes of this SingleInstanceHealth.
        :type causes: List
        """

        self._causes = causes

    @property
    def launched_at(self):
        """Gets the launched_at of this SingleInstanceHealth.


        :return: The launched_at of this SingleInstanceHealth.
        :rtype: datetime
        """
        return self._launched_at

    @launched_at.setter
    def launched_at(self, launched_at):
        """Sets the launched_at of this SingleInstanceHealth.


        :param launched_at: The launched_at of this SingleInstanceHealth.
        :type launched_at: datetime
        """

        self._launched_at = launched_at

    @property
    def application_metrics(self):
        """Gets the application_metrics of this SingleInstanceHealth.


        :return: The application_metrics of this SingleInstanceHealth.
        :rtype: SingleInstanceHealthApplicationMetrics
        """
        return self._application_metrics

    @application_metrics.setter
    def application_metrics(self, application_metrics):
        """Sets the application_metrics of this SingleInstanceHealth.


        :param application_metrics: The application_metrics of this SingleInstanceHealth.
        :type application_metrics: SingleInstanceHealthApplicationMetrics
        """

        self._application_metrics = application_metrics

    @property
    def system(self):
        """Gets the system of this SingleInstanceHealth.


        :return: The system of this SingleInstanceHealth.
        :rtype: SingleInstanceHealthSystem
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this SingleInstanceHealth.


        :param system: The system of this SingleInstanceHealth.
        :type system: SingleInstanceHealthSystem
        """

        self._system = system

    @property
    def deployment(self):
        """Gets the deployment of this SingleInstanceHealth.


        :return: The deployment of this SingleInstanceHealth.
        :rtype: SingleInstanceHealthDeployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this SingleInstanceHealth.


        :param deployment: The deployment of this SingleInstanceHealth.
        :type deployment: SingleInstanceHealthDeployment
        """

        self._deployment = deployment

    @property
    def availability_zone(self):
        """Gets the availability_zone of this SingleInstanceHealth.


        :return: The availability_zone of this SingleInstanceHealth.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this SingleInstanceHealth.


        :param availability_zone: The availability_zone of this SingleInstanceHealth.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def instance_type(self):
        """Gets the instance_type of this SingleInstanceHealth.


        :return: The instance_type of this SingleInstanceHealth.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this SingleInstanceHealth.


        :param instance_type: The instance_type of this SingleInstanceHealth.
        :type instance_type: str
        """

        self._instance_type = instance_type
