# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckDNSAvailabilityMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cname_prefix: str=None):
        """CheckDNSAvailabilityMessage - a model defined in OpenAPI

        :param cname_prefix: The cname_prefix of this CheckDNSAvailabilityMessage.
        """
        self.openapi_types = {
            'cname_prefix': str
        }

        self.attribute_map = {
            'cname_prefix': 'CNAMEPrefix'
        }

        self._cname_prefix = cname_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDNSAvailabilityMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDNSAvailabilityMessage of this CheckDNSAvailabilityMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cname_prefix(self):
        """Gets the cname_prefix of this CheckDNSAvailabilityMessage.


        :return: The cname_prefix of this CheckDNSAvailabilityMessage.
        :rtype: str
        """
        return self._cname_prefix

    @cname_prefix.setter
    def cname_prefix(self, cname_prefix):
        """Sets the cname_prefix of this CheckDNSAvailabilityMessage.


        :param cname_prefix: The cname_prefix of this CheckDNSAvailabilityMessage.
        :type cname_prefix: str
        """
        if cname_prefix is None:
            raise ValueError("Invalid value for `cname_prefix`, must not be `None`")

        self._cname_prefix = cname_prefix
