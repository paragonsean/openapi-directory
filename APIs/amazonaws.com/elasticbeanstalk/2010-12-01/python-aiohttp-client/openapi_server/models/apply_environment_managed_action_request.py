# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplyEnvironmentManagedActionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_name: str=None, environment_id: str=None, action_id: str=None):
        """ApplyEnvironmentManagedActionRequest - a model defined in OpenAPI

        :param environment_name: The environment_name of this ApplyEnvironmentManagedActionRequest.
        :param environment_id: The environment_id of this ApplyEnvironmentManagedActionRequest.
        :param action_id: The action_id of this ApplyEnvironmentManagedActionRequest.
        """
        self.openapi_types = {
            'environment_name': str,
            'environment_id': str,
            'action_id': str
        }

        self.attribute_map = {
            'environment_name': 'EnvironmentName',
            'environment_id': 'EnvironmentId',
            'action_id': 'ActionId'
        }

        self._environment_name = environment_name
        self._environment_id = environment_id
        self._action_id = action_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyEnvironmentManagedActionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyEnvironmentManagedActionRequest of this ApplyEnvironmentManagedActionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_name(self):
        """Gets the environment_name of this ApplyEnvironmentManagedActionRequest.


        :return: The environment_name of this ApplyEnvironmentManagedActionRequest.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this ApplyEnvironmentManagedActionRequest.


        :param environment_name: The environment_name of this ApplyEnvironmentManagedActionRequest.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def environment_id(self):
        """Gets the environment_id of this ApplyEnvironmentManagedActionRequest.


        :return: The environment_id of this ApplyEnvironmentManagedActionRequest.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ApplyEnvironmentManagedActionRequest.


        :param environment_id: The environment_id of this ApplyEnvironmentManagedActionRequest.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def action_id(self):
        """Gets the action_id of this ApplyEnvironmentManagedActionRequest.


        :return: The action_id of this ApplyEnvironmentManagedActionRequest.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ApplyEnvironmentManagedActionRequest.


        :param action_id: The action_id of this ApplyEnvironmentManagedActionRequest.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")

        self._action_id = action_id
