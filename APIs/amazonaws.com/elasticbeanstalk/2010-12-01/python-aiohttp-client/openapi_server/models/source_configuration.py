# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, template_name: str=None):
        """SourceConfiguration - a model defined in OpenAPI

        :param application_name: The application_name of this SourceConfiguration.
        :param template_name: The template_name of this SourceConfiguration.
        """
        self.openapi_types = {
            'application_name': str,
            'template_name': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'template_name': 'TemplateName'
        }

        self._application_name = application_name
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceConfiguration of this SourceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this SourceConfiguration.


        :return: The application_name of this SourceConfiguration.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this SourceConfiguration.


        :param application_name: The application_name of this SourceConfiguration.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def template_name(self):
        """Gets the template_name of this SourceConfiguration.


        :return: The template_name of this SourceConfiguration.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this SourceConfiguration.


        :param template_name: The template_name of this SourceConfiguration.
        :type template_name: str
        """

        self._template_name = template_name
