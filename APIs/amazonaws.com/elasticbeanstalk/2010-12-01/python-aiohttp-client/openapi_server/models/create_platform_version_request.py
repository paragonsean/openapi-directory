# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_platform_version_request_platform_definition_bundle import CreatePlatformVersionRequestPlatformDefinitionBundle
from openapi_server import util


class CreatePlatformVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform_name: str=None, platform_version: str=None, platform_definition_bundle: CreatePlatformVersionRequestPlatformDefinitionBundle=None, environment_name: str=None, option_settings: List=None, tags: List=None):
        """CreatePlatformVersionRequest - a model defined in OpenAPI

        :param platform_name: The platform_name of this CreatePlatformVersionRequest.
        :param platform_version: The platform_version of this CreatePlatformVersionRequest.
        :param platform_definition_bundle: The platform_definition_bundle of this CreatePlatformVersionRequest.
        :param environment_name: The environment_name of this CreatePlatformVersionRequest.
        :param option_settings: The option_settings of this CreatePlatformVersionRequest.
        :param tags: The tags of this CreatePlatformVersionRequest.
        """
        self.openapi_types = {
            'platform_name': str,
            'platform_version': str,
            'platform_definition_bundle': CreatePlatformVersionRequestPlatformDefinitionBundle,
            'environment_name': str,
            'option_settings': List,
            'tags': List
        }

        self.attribute_map = {
            'platform_name': 'PlatformName',
            'platform_version': 'PlatformVersion',
            'platform_definition_bundle': 'PlatformDefinitionBundle',
            'environment_name': 'EnvironmentName',
            'option_settings': 'OptionSettings',
            'tags': 'Tags'
        }

        self._platform_name = platform_name
        self._platform_version = platform_version
        self._platform_definition_bundle = platform_definition_bundle
        self._environment_name = environment_name
        self._option_settings = option_settings
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePlatformVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePlatformVersionRequest of this CreatePlatformVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform_name(self):
        """Gets the platform_name of this CreatePlatformVersionRequest.


        :return: The platform_name of this CreatePlatformVersionRequest.
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this CreatePlatformVersionRequest.


        :param platform_name: The platform_name of this CreatePlatformVersionRequest.
        :type platform_name: str
        """
        if platform_name is None:
            raise ValueError("Invalid value for `platform_name`, must not be `None`")

        self._platform_name = platform_name

    @property
    def platform_version(self):
        """Gets the platform_version of this CreatePlatformVersionRequest.


        :return: The platform_version of this CreatePlatformVersionRequest.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this CreatePlatformVersionRequest.


        :param platform_version: The platform_version of this CreatePlatformVersionRequest.
        :type platform_version: str
        """
        if platform_version is None:
            raise ValueError("Invalid value for `platform_version`, must not be `None`")

        self._platform_version = platform_version

    @property
    def platform_definition_bundle(self):
        """Gets the platform_definition_bundle of this CreatePlatformVersionRequest.


        :return: The platform_definition_bundle of this CreatePlatformVersionRequest.
        :rtype: CreatePlatformVersionRequestPlatformDefinitionBundle
        """
        return self._platform_definition_bundle

    @platform_definition_bundle.setter
    def platform_definition_bundle(self, platform_definition_bundle):
        """Sets the platform_definition_bundle of this CreatePlatformVersionRequest.


        :param platform_definition_bundle: The platform_definition_bundle of this CreatePlatformVersionRequest.
        :type platform_definition_bundle: CreatePlatformVersionRequestPlatformDefinitionBundle
        """
        if platform_definition_bundle is None:
            raise ValueError("Invalid value for `platform_definition_bundle`, must not be `None`")

        self._platform_definition_bundle = platform_definition_bundle

    @property
    def environment_name(self):
        """Gets the environment_name of this CreatePlatformVersionRequest.


        :return: The environment_name of this CreatePlatformVersionRequest.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CreatePlatformVersionRequest.


        :param environment_name: The environment_name of this CreatePlatformVersionRequest.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def option_settings(self):
        """Gets the option_settings of this CreatePlatformVersionRequest.


        :return: The option_settings of this CreatePlatformVersionRequest.
        :rtype: List
        """
        return self._option_settings

    @option_settings.setter
    def option_settings(self, option_settings):
        """Sets the option_settings of this CreatePlatformVersionRequest.


        :param option_settings: The option_settings of this CreatePlatformVersionRequest.
        :type option_settings: List
        """

        self._option_settings = option_settings

    @property
    def tags(self):
        """Gets the tags of this CreatePlatformVersionRequest.


        :return: The tags of this CreatePlatformVersionRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePlatformVersionRequest.


        :param tags: The tags of this CreatePlatformVersionRequest.
        :type tags: List
        """

        self._tags = tags
