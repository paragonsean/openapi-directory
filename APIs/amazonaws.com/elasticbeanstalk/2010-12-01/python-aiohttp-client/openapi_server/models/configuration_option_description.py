# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_option_description_regex import ConfigurationOptionDescriptionRegex
from openapi_server.models.configuration_option_value_type import ConfigurationOptionValueType
from openapi_server import util


class ConfigurationOptionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, name: str=None, default_value: str=None, change_severity: str=None, user_defined: bool=None, value_type: ConfigurationOptionValueType=None, value_options: List=None, min_value: int=None, max_value: int=None, max_length: int=None, regex: ConfigurationOptionDescriptionRegex=None):
        """ConfigurationOptionDescription - a model defined in OpenAPI

        :param namespace: The namespace of this ConfigurationOptionDescription.
        :param name: The name of this ConfigurationOptionDescription.
        :param default_value: The default_value of this ConfigurationOptionDescription.
        :param change_severity: The change_severity of this ConfigurationOptionDescription.
        :param user_defined: The user_defined of this ConfigurationOptionDescription.
        :param value_type: The value_type of this ConfigurationOptionDescription.
        :param value_options: The value_options of this ConfigurationOptionDescription.
        :param min_value: The min_value of this ConfigurationOptionDescription.
        :param max_value: The max_value of this ConfigurationOptionDescription.
        :param max_length: The max_length of this ConfigurationOptionDescription.
        :param regex: The regex of this ConfigurationOptionDescription.
        """
        self.openapi_types = {
            'namespace': str,
            'name': str,
            'default_value': str,
            'change_severity': str,
            'user_defined': bool,
            'value_type': ConfigurationOptionValueType,
            'value_options': List,
            'min_value': int,
            'max_value': int,
            'max_length': int,
            'regex': ConfigurationOptionDescriptionRegex
        }

        self.attribute_map = {
            'namespace': 'Namespace',
            'name': 'Name',
            'default_value': 'DefaultValue',
            'change_severity': 'ChangeSeverity',
            'user_defined': 'UserDefined',
            'value_type': 'ValueType',
            'value_options': 'ValueOptions',
            'min_value': 'MinValue',
            'max_value': 'MaxValue',
            'max_length': 'MaxLength',
            'regex': 'Regex'
        }

        self._namespace = namespace
        self._name = name
        self._default_value = default_value
        self._change_severity = change_severity
        self._user_defined = user_defined
        self._value_type = value_type
        self._value_options = value_options
        self._min_value = min_value
        self._max_value = max_value
        self._max_length = max_length
        self._regex = regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationOptionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigurationOptionDescription of this ConfigurationOptionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this ConfigurationOptionDescription.


        :return: The namespace of this ConfigurationOptionDescription.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ConfigurationOptionDescription.


        :param namespace: The namespace of this ConfigurationOptionDescription.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this ConfigurationOptionDescription.


        :return: The name of this ConfigurationOptionDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigurationOptionDescription.


        :param name: The name of this ConfigurationOptionDescription.
        :type name: str
        """

        self._name = name

    @property
    def default_value(self):
        """Gets the default_value of this ConfigurationOptionDescription.


        :return: The default_value of this ConfigurationOptionDescription.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ConfigurationOptionDescription.


        :param default_value: The default_value of this ConfigurationOptionDescription.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def change_severity(self):
        """Gets the change_severity of this ConfigurationOptionDescription.


        :return: The change_severity of this ConfigurationOptionDescription.
        :rtype: str
        """
        return self._change_severity

    @change_severity.setter
    def change_severity(self, change_severity):
        """Sets the change_severity of this ConfigurationOptionDescription.


        :param change_severity: The change_severity of this ConfigurationOptionDescription.
        :type change_severity: str
        """

        self._change_severity = change_severity

    @property
    def user_defined(self):
        """Gets the user_defined of this ConfigurationOptionDescription.


        :return: The user_defined of this ConfigurationOptionDescription.
        :rtype: bool
        """
        return self._user_defined

    @user_defined.setter
    def user_defined(self, user_defined):
        """Sets the user_defined of this ConfigurationOptionDescription.


        :param user_defined: The user_defined of this ConfigurationOptionDescription.
        :type user_defined: bool
        """

        self._user_defined = user_defined

    @property
    def value_type(self):
        """Gets the value_type of this ConfigurationOptionDescription.


        :return: The value_type of this ConfigurationOptionDescription.
        :rtype: ConfigurationOptionValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ConfigurationOptionDescription.


        :param value_type: The value_type of this ConfigurationOptionDescription.
        :type value_type: ConfigurationOptionValueType
        """

        self._value_type = value_type

    @property
    def value_options(self):
        """Gets the value_options of this ConfigurationOptionDescription.


        :return: The value_options of this ConfigurationOptionDescription.
        :rtype: List
        """
        return self._value_options

    @value_options.setter
    def value_options(self, value_options):
        """Sets the value_options of this ConfigurationOptionDescription.


        :param value_options: The value_options of this ConfigurationOptionDescription.
        :type value_options: List
        """

        self._value_options = value_options

    @property
    def min_value(self):
        """Gets the min_value of this ConfigurationOptionDescription.


        :return: The min_value of this ConfigurationOptionDescription.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ConfigurationOptionDescription.


        :param min_value: The min_value of this ConfigurationOptionDescription.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this ConfigurationOptionDescription.


        :return: The max_value of this ConfigurationOptionDescription.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ConfigurationOptionDescription.


        :param max_value: The max_value of this ConfigurationOptionDescription.
        :type max_value: int
        """

        self._max_value = max_value

    @property
    def max_length(self):
        """Gets the max_length of this ConfigurationOptionDescription.


        :return: The max_length of this ConfigurationOptionDescription.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ConfigurationOptionDescription.


        :param max_length: The max_length of this ConfigurationOptionDescription.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def regex(self):
        """Gets the regex of this ConfigurationOptionDescription.


        :return: The regex of this ConfigurationOptionDescription.
        :rtype: ConfigurationOptionDescriptionRegex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this ConfigurationOptionDescription.


        :param regex: The regex of this ConfigurationOptionDescription.
        :type regex: ConfigurationOptionDescriptionRegex
        """

        self._regex = regex
