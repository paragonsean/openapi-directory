# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_severity import EventSeverity
from openapi_server import util


class EventDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_date: datetime=None, message: str=None, application_name: str=None, version_label: str=None, template_name: str=None, environment_name: str=None, platform_arn: str=None, request_id: str=None, severity: EventSeverity=None):
        """EventDescription - a model defined in OpenAPI

        :param event_date: The event_date of this EventDescription.
        :param message: The message of this EventDescription.
        :param application_name: The application_name of this EventDescription.
        :param version_label: The version_label of this EventDescription.
        :param template_name: The template_name of this EventDescription.
        :param environment_name: The environment_name of this EventDescription.
        :param platform_arn: The platform_arn of this EventDescription.
        :param request_id: The request_id of this EventDescription.
        :param severity: The severity of this EventDescription.
        """
        self.openapi_types = {
            'event_date': datetime,
            'message': str,
            'application_name': str,
            'version_label': str,
            'template_name': str,
            'environment_name': str,
            'platform_arn': str,
            'request_id': str,
            'severity': EventSeverity
        }

        self.attribute_map = {
            'event_date': 'EventDate',
            'message': 'Message',
            'application_name': 'ApplicationName',
            'version_label': 'VersionLabel',
            'template_name': 'TemplateName',
            'environment_name': 'EnvironmentName',
            'platform_arn': 'PlatformArn',
            'request_id': 'RequestId',
            'severity': 'Severity'
        }

        self._event_date = event_date
        self._message = message
        self._application_name = application_name
        self._version_label = version_label
        self._template_name = template_name
        self._environment_name = environment_name
        self._platform_arn = platform_arn
        self._request_id = request_id
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDescription of this EventDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_date(self):
        """Gets the event_date of this EventDescription.


        :return: The event_date of this EventDescription.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this EventDescription.


        :param event_date: The event_date of this EventDescription.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def message(self):
        """Gets the message of this EventDescription.


        :return: The message of this EventDescription.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventDescription.


        :param message: The message of this EventDescription.
        :type message: str
        """

        self._message = message

    @property
    def application_name(self):
        """Gets the application_name of this EventDescription.


        :return: The application_name of this EventDescription.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this EventDescription.


        :param application_name: The application_name of this EventDescription.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def version_label(self):
        """Gets the version_label of this EventDescription.


        :return: The version_label of this EventDescription.
        :rtype: str
        """
        return self._version_label

    @version_label.setter
    def version_label(self, version_label):
        """Sets the version_label of this EventDescription.


        :param version_label: The version_label of this EventDescription.
        :type version_label: str
        """

        self._version_label = version_label

    @property
    def template_name(self):
        """Gets the template_name of this EventDescription.


        :return: The template_name of this EventDescription.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this EventDescription.


        :param template_name: The template_name of this EventDescription.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def environment_name(self):
        """Gets the environment_name of this EventDescription.


        :return: The environment_name of this EventDescription.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this EventDescription.


        :param environment_name: The environment_name of this EventDescription.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def platform_arn(self):
        """Gets the platform_arn of this EventDescription.


        :return: The platform_arn of this EventDescription.
        :rtype: str
        """
        return self._platform_arn

    @platform_arn.setter
    def platform_arn(self, platform_arn):
        """Sets the platform_arn of this EventDescription.


        :param platform_arn: The platform_arn of this EventDescription.
        :type platform_arn: str
        """

        self._platform_arn = platform_arn

    @property
    def request_id(self):
        """Gets the request_id of this EventDescription.


        :return: The request_id of this EventDescription.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this EventDescription.


        :param request_id: The request_id of this EventDescription.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def severity(self):
        """Gets the severity of this EventDescription.


        :return: The severity of this EventDescription.
        :rtype: EventSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventDescription.


        :param severity: The severity of this EventDescription.
        :type severity: EventSeverity
        """

        self._severity = severity
