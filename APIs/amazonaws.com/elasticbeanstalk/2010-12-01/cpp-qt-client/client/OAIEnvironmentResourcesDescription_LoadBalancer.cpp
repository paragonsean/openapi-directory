/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentResourcesDescription_LoadBalancer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentResourcesDescription_LoadBalancer::OAIEnvironmentResourcesDescription_LoadBalancer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentResourcesDescription_LoadBalancer::OAIEnvironmentResourcesDescription_LoadBalancer() {
    this->initializeModel();
}

OAIEnvironmentResourcesDescription_LoadBalancer::~OAIEnvironmentResourcesDescription_LoadBalancer() {}

void OAIEnvironmentResourcesDescription_LoadBalancer::initializeModel() {

    m_load_balancer_name_isSet = false;
    m_load_balancer_name_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_listeners_isSet = false;
    m_listeners_isValid = false;
}

void OAIEnvironmentResourcesDescription_LoadBalancer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentResourcesDescription_LoadBalancer::fromJsonObject(QJsonObject json) {

    m_load_balancer_name_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_name, json[QString("LoadBalancerName")]);
    m_load_balancer_name_isSet = !json[QString("LoadBalancerName")].isNull() && m_load_balancer_name_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_listeners_isValid = ::OpenAPI::fromJsonValue(m_listeners, json[QString("Listeners")]);
    m_listeners_isSet = !json[QString("Listeners")].isNull() && m_listeners_isValid;
}

QString OAIEnvironmentResourcesDescription_LoadBalancer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentResourcesDescription_LoadBalancer::asJsonObject() const {
    QJsonObject obj;
    if (m_load_balancer_name_isSet) {
        obj.insert(QString("LoadBalancerName"), ::OpenAPI::toJsonValue(m_load_balancer_name));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_listeners.isSet()) {
        obj.insert(QString("Listeners"), ::OpenAPI::toJsonValue(m_listeners));
    }
    return obj;
}

QString OAIEnvironmentResourcesDescription_LoadBalancer::getLoadBalancerName() const {
    return m_load_balancer_name;
}
void OAIEnvironmentResourcesDescription_LoadBalancer::setLoadBalancerName(const QString &load_balancer_name) {
    m_load_balancer_name = load_balancer_name;
    m_load_balancer_name_isSet = true;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::is_load_balancer_name_Set() const{
    return m_load_balancer_name_isSet;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::is_load_balancer_name_Valid() const{
    return m_load_balancer_name_isValid;
}

QString OAIEnvironmentResourcesDescription_LoadBalancer::getDomain() const {
    return m_domain;
}
void OAIEnvironmentResourcesDescription_LoadBalancer::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::is_domain_Valid() const{
    return m_domain_isValid;
}

QList OAIEnvironmentResourcesDescription_LoadBalancer::getListeners() const {
    return m_listeners;
}
void OAIEnvironmentResourcesDescription_LoadBalancer::setListeners(const QList &listeners) {
    m_listeners = listeners;
    m_listeners_isSet = true;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::is_listeners_Set() const{
    return m_listeners_isSet;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::is_listeners_Valid() const{
    return m_listeners_isValid;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_balancer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listeners.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentResourcesDescription_LoadBalancer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
