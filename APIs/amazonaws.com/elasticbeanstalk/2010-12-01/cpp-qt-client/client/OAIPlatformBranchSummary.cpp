/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformBranchSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformBranchSummary::OAIPlatformBranchSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformBranchSummary::OAIPlatformBranchSummary() {
    this->initializeModel();
}

OAIPlatformBranchSummary::~OAIPlatformBranchSummary() {}

void OAIPlatformBranchSummary::initializeModel() {

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_lifecycle_state_isSet = false;
    m_lifecycle_state_isValid = false;

    m_branch_order_isSet = false;
    m_branch_order_isValid = false;

    m_supported_tier_list_isSet = false;
    m_supported_tier_list_isValid = false;
}

void OAIPlatformBranchSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformBranchSummary::fromJsonObject(QJsonObject json) {

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("PlatformName")]);
    m_platform_name_isSet = !json[QString("PlatformName")].isNull() && m_platform_name_isValid;

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("BranchName")]);
    m_branch_name_isSet = !json[QString("BranchName")].isNull() && m_branch_name_isValid;

    m_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_state, json[QString("LifecycleState")]);
    m_lifecycle_state_isSet = !json[QString("LifecycleState")].isNull() && m_lifecycle_state_isValid;

    m_branch_order_isValid = ::OpenAPI::fromJsonValue(m_branch_order, json[QString("BranchOrder")]);
    m_branch_order_isSet = !json[QString("BranchOrder")].isNull() && m_branch_order_isValid;

    m_supported_tier_list_isValid = ::OpenAPI::fromJsonValue(m_supported_tier_list, json[QString("SupportedTierList")]);
    m_supported_tier_list_isSet = !json[QString("SupportedTierList")].isNull() && m_supported_tier_list_isValid;
}

QString OAIPlatformBranchSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformBranchSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_name_isSet) {
        obj.insert(QString("PlatformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_branch_name_isSet) {
        obj.insert(QString("BranchName"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_lifecycle_state_isSet) {
        obj.insert(QString("LifecycleState"), ::OpenAPI::toJsonValue(m_lifecycle_state));
    }
    if (m_branch_order_isSet) {
        obj.insert(QString("BranchOrder"), ::OpenAPI::toJsonValue(m_branch_order));
    }
    if (m_supported_tier_list.isSet()) {
        obj.insert(QString("SupportedTierList"), ::OpenAPI::toJsonValue(m_supported_tier_list));
    }
    return obj;
}

QString OAIPlatformBranchSummary::getPlatformName() const {
    return m_platform_name;
}
void OAIPlatformBranchSummary::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAIPlatformBranchSummary::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAIPlatformBranchSummary::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAIPlatformBranchSummary::getBranchName() const {
    return m_branch_name;
}
void OAIPlatformBranchSummary::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIPlatformBranchSummary::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIPlatformBranchSummary::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QString OAIPlatformBranchSummary::getLifecycleState() const {
    return m_lifecycle_state;
}
void OAIPlatformBranchSummary::setLifecycleState(const QString &lifecycle_state) {
    m_lifecycle_state = lifecycle_state;
    m_lifecycle_state_isSet = true;
}

bool OAIPlatformBranchSummary::is_lifecycle_state_Set() const{
    return m_lifecycle_state_isSet;
}

bool OAIPlatformBranchSummary::is_lifecycle_state_Valid() const{
    return m_lifecycle_state_isValid;
}

qint32 OAIPlatformBranchSummary::getBranchOrder() const {
    return m_branch_order;
}
void OAIPlatformBranchSummary::setBranchOrder(const qint32 &branch_order) {
    m_branch_order = branch_order;
    m_branch_order_isSet = true;
}

bool OAIPlatformBranchSummary::is_branch_order_Set() const{
    return m_branch_order_isSet;
}

bool OAIPlatformBranchSummary::is_branch_order_Valid() const{
    return m_branch_order_isValid;
}

QList OAIPlatformBranchSummary::getSupportedTierList() const {
    return m_supported_tier_list;
}
void OAIPlatformBranchSummary::setSupportedTierList(const QList &supported_tier_list) {
    m_supported_tier_list = supported_tier_list;
    m_supported_tier_list_isSet = true;
}

bool OAIPlatformBranchSummary::is_supported_tier_list_Set() const{
    return m_supported_tier_list_isSet;
}

bool OAIPlatformBranchSummary::is_supported_tier_list_Valid() const{
    return m_supported_tier_list_isValid;
}

bool OAIPlatformBranchSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_tier_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformBranchSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
