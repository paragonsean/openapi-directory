/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingleInstanceHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingleInstanceHealth::OAISingleInstanceHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingleInstanceHealth::OAISingleInstanceHealth() {
    this->initializeModel();
}

OAISingleInstanceHealth::~OAISingleInstanceHealth() {}

void OAISingleInstanceHealth::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_causes_isSet = false;
    m_causes_isValid = false;

    m_launched_at_isSet = false;
    m_launched_at_isValid = false;

    m_application_metrics_isSet = false;
    m_application_metrics_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAISingleInstanceHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingleInstanceHealth::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_causes_isValid = ::OpenAPI::fromJsonValue(m_causes, json[QString("Causes")]);
    m_causes_isSet = !json[QString("Causes")].isNull() && m_causes_isValid;

    m_launched_at_isValid = ::OpenAPI::fromJsonValue(m_launched_at, json[QString("LaunchedAt")]);
    m_launched_at_isSet = !json[QString("LaunchedAt")].isNull() && m_launched_at_isValid;

    m_application_metrics_isValid = ::OpenAPI::fromJsonValue(m_application_metrics, json[QString("ApplicationMetrics")]);
    m_application_metrics_isSet = !json[QString("ApplicationMetrics")].isNull() && m_application_metrics_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("System")]);
    m_system_isSet = !json[QString("System")].isNull() && m_system_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("Deployment")]);
    m_deployment_isSet = !json[QString("Deployment")].isNull() && m_deployment_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;
}

QString OAISingleInstanceHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingleInstanceHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_causes.isSet()) {
        obj.insert(QString("Causes"), ::OpenAPI::toJsonValue(m_causes));
    }
    if (m_launched_at_isSet) {
        obj.insert(QString("LaunchedAt"), ::OpenAPI::toJsonValue(m_launched_at));
    }
    if (m_application_metrics.isSet()) {
        obj.insert(QString("ApplicationMetrics"), ::OpenAPI::toJsonValue(m_application_metrics));
    }
    if (m_system.isSet()) {
        obj.insert(QString("System"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_deployment.isSet()) {
        obj.insert(QString("Deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAISingleInstanceHealth::getInstanceId() const {
    return m_instance_id;
}
void OAISingleInstanceHealth::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAISingleInstanceHealth::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAISingleInstanceHealth::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAISingleInstanceHealth::getHealthStatus() const {
    return m_health_status;
}
void OAISingleInstanceHealth::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAISingleInstanceHealth::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAISingleInstanceHealth::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAISingleInstanceHealth::getColor() const {
    return m_color;
}
void OAISingleInstanceHealth::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAISingleInstanceHealth::is_color_Set() const{
    return m_color_isSet;
}

bool OAISingleInstanceHealth::is_color_Valid() const{
    return m_color_isValid;
}

QList OAISingleInstanceHealth::getCauses() const {
    return m_causes;
}
void OAISingleInstanceHealth::setCauses(const QList &causes) {
    m_causes = causes;
    m_causes_isSet = true;
}

bool OAISingleInstanceHealth::is_causes_Set() const{
    return m_causes_isSet;
}

bool OAISingleInstanceHealth::is_causes_Valid() const{
    return m_causes_isValid;
}

QDateTime OAISingleInstanceHealth::getLaunchedAt() const {
    return m_launched_at;
}
void OAISingleInstanceHealth::setLaunchedAt(const QDateTime &launched_at) {
    m_launched_at = launched_at;
    m_launched_at_isSet = true;
}

bool OAISingleInstanceHealth::is_launched_at_Set() const{
    return m_launched_at_isSet;
}

bool OAISingleInstanceHealth::is_launched_at_Valid() const{
    return m_launched_at_isValid;
}

OAISingleInstanceHealth_ApplicationMetrics OAISingleInstanceHealth::getApplicationMetrics() const {
    return m_application_metrics;
}
void OAISingleInstanceHealth::setApplicationMetrics(const OAISingleInstanceHealth_ApplicationMetrics &application_metrics) {
    m_application_metrics = application_metrics;
    m_application_metrics_isSet = true;
}

bool OAISingleInstanceHealth::is_application_metrics_Set() const{
    return m_application_metrics_isSet;
}

bool OAISingleInstanceHealth::is_application_metrics_Valid() const{
    return m_application_metrics_isValid;
}

OAISingleInstanceHealth_System OAISingleInstanceHealth::getSystem() const {
    return m_system;
}
void OAISingleInstanceHealth::setSystem(const OAISingleInstanceHealth_System &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAISingleInstanceHealth::is_system_Set() const{
    return m_system_isSet;
}

bool OAISingleInstanceHealth::is_system_Valid() const{
    return m_system_isValid;
}

OAISingleInstanceHealth_Deployment OAISingleInstanceHealth::getDeployment() const {
    return m_deployment;
}
void OAISingleInstanceHealth::setDeployment(const OAISingleInstanceHealth_Deployment &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAISingleInstanceHealth::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAISingleInstanceHealth::is_deployment_Valid() const{
    return m_deployment_isValid;
}

QString OAISingleInstanceHealth::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAISingleInstanceHealth::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAISingleInstanceHealth::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAISingleInstanceHealth::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAISingleInstanceHealth::getInstanceType() const {
    return m_instance_type;
}
void OAISingleInstanceHealth::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAISingleInstanceHealth::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAISingleInstanceHealth::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAISingleInstanceHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_causes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launched_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingleInstanceHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
