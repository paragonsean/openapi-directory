/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedActionHistoryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedActionHistoryItem::OAIManagedActionHistoryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedActionHistoryItem::OAIManagedActionHistoryItem() {
    this->initializeModel();
}

OAIManagedActionHistoryItem::~OAIManagedActionHistoryItem() {}

void OAIManagedActionHistoryItem::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_action_description_isSet = false;
    m_action_description_isValid = false;

    m_failure_type_isSet = false;
    m_failure_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_description_isSet = false;
    m_failure_description_isValid = false;

    m_executed_time_isSet = false;
    m_executed_time_isValid = false;

    m_finished_time_isSet = false;
    m_finished_time_isValid = false;
}

void OAIManagedActionHistoryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedActionHistoryItem::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("ActionId")]);
    m_action_id_isSet = !json[QString("ActionId")].isNull() && m_action_id_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("ActionType")]);
    m_action_type_isSet = !json[QString("ActionType")].isNull() && m_action_type_isValid;

    m_action_description_isValid = ::OpenAPI::fromJsonValue(m_action_description, json[QString("ActionDescription")]);
    m_action_description_isSet = !json[QString("ActionDescription")].isNull() && m_action_description_isValid;

    m_failure_type_isValid = ::OpenAPI::fromJsonValue(m_failure_type, json[QString("FailureType")]);
    m_failure_type_isSet = !json[QString("FailureType")].isNull() && m_failure_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failure_description_isValid = ::OpenAPI::fromJsonValue(m_failure_description, json[QString("FailureDescription")]);
    m_failure_description_isSet = !json[QString("FailureDescription")].isNull() && m_failure_description_isValid;

    m_executed_time_isValid = ::OpenAPI::fromJsonValue(m_executed_time, json[QString("ExecutedTime")]);
    m_executed_time_isSet = !json[QString("ExecutedTime")].isNull() && m_executed_time_isValid;

    m_finished_time_isValid = ::OpenAPI::fromJsonValue(m_finished_time, json[QString("FinishedTime")]);
    m_finished_time_isSet = !json[QString("FinishedTime")].isNull() && m_finished_time_isValid;
}

QString OAIManagedActionHistoryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedActionHistoryItem::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("ActionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_action_type.isSet()) {
        obj.insert(QString("ActionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_action_description_isSet) {
        obj.insert(QString("ActionDescription"), ::OpenAPI::toJsonValue(m_action_description));
    }
    if (m_failure_type.isSet()) {
        obj.insert(QString("FailureType"), ::OpenAPI::toJsonValue(m_failure_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_description_isSet) {
        obj.insert(QString("FailureDescription"), ::OpenAPI::toJsonValue(m_failure_description));
    }
    if (m_executed_time_isSet) {
        obj.insert(QString("ExecutedTime"), ::OpenAPI::toJsonValue(m_executed_time));
    }
    if (m_finished_time_isSet) {
        obj.insert(QString("FinishedTime"), ::OpenAPI::toJsonValue(m_finished_time));
    }
    return obj;
}

QString OAIManagedActionHistoryItem::getActionId() const {
    return m_action_id;
}
void OAIManagedActionHistoryItem::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIManagedActionHistoryItem::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIManagedActionHistoryItem::is_action_id_Valid() const{
    return m_action_id_isValid;
}

OAIActionType OAIManagedActionHistoryItem::getActionType() const {
    return m_action_type;
}
void OAIManagedActionHistoryItem::setActionType(const OAIActionType &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIManagedActionHistoryItem::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIManagedActionHistoryItem::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIManagedActionHistoryItem::getActionDescription() const {
    return m_action_description;
}
void OAIManagedActionHistoryItem::setActionDescription(const QString &action_description) {
    m_action_description = action_description;
    m_action_description_isSet = true;
}

bool OAIManagedActionHistoryItem::is_action_description_Set() const{
    return m_action_description_isSet;
}

bool OAIManagedActionHistoryItem::is_action_description_Valid() const{
    return m_action_description_isValid;
}

OAIFailureType OAIManagedActionHistoryItem::getFailureType() const {
    return m_failure_type;
}
void OAIManagedActionHistoryItem::setFailureType(const OAIFailureType &failure_type) {
    m_failure_type = failure_type;
    m_failure_type_isSet = true;
}

bool OAIManagedActionHistoryItem::is_failure_type_Set() const{
    return m_failure_type_isSet;
}

bool OAIManagedActionHistoryItem::is_failure_type_Valid() const{
    return m_failure_type_isValid;
}

OAIActionHistoryStatus OAIManagedActionHistoryItem::getStatus() const {
    return m_status;
}
void OAIManagedActionHistoryItem::setStatus(const OAIActionHistoryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIManagedActionHistoryItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIManagedActionHistoryItem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIManagedActionHistoryItem::getFailureDescription() const {
    return m_failure_description;
}
void OAIManagedActionHistoryItem::setFailureDescription(const QString &failure_description) {
    m_failure_description = failure_description;
    m_failure_description_isSet = true;
}

bool OAIManagedActionHistoryItem::is_failure_description_Set() const{
    return m_failure_description_isSet;
}

bool OAIManagedActionHistoryItem::is_failure_description_Valid() const{
    return m_failure_description_isValid;
}

QDateTime OAIManagedActionHistoryItem::getExecutedTime() const {
    return m_executed_time;
}
void OAIManagedActionHistoryItem::setExecutedTime(const QDateTime &executed_time) {
    m_executed_time = executed_time;
    m_executed_time_isSet = true;
}

bool OAIManagedActionHistoryItem::is_executed_time_Set() const{
    return m_executed_time_isSet;
}

bool OAIManagedActionHistoryItem::is_executed_time_Valid() const{
    return m_executed_time_isValid;
}

QDateTime OAIManagedActionHistoryItem::getFinishedTime() const {
    return m_finished_time;
}
void OAIManagedActionHistoryItem::setFinishedTime(const QDateTime &finished_time) {
    m_finished_time = finished_time;
    m_finished_time_isSet = true;
}

bool OAIManagedActionHistoryItem::is_finished_time_Set() const{
    return m_finished_time_isSet;
}

bool OAIManagedActionHistoryItem::is_finished_time_Valid() const{
    return m_finished_time_isValid;
}

bool OAIManagedActionHistoryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedActionHistoryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
