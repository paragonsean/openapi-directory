/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEnvironmentHealthResult_ApplicationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEnvironmentHealthResult_ApplicationMetrics::OAIDescribeEnvironmentHealthResult_ApplicationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEnvironmentHealthResult_ApplicationMetrics::OAIDescribeEnvironmentHealthResult_ApplicationMetrics() {
    this->initializeModel();
}

OAIDescribeEnvironmentHealthResult_ApplicationMetrics::~OAIDescribeEnvironmentHealthResult_ApplicationMetrics() {}

void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_request_count_isSet = false;
    m_request_count_isValid = false;

    m_status_codes_isSet = false;
    m_status_codes_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;
}

void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_request_count_isValid = ::OpenAPI::fromJsonValue(m_request_count, json[QString("RequestCount")]);
    m_request_count_isSet = !json[QString("RequestCount")].isNull() && m_request_count_isValid;

    m_status_codes_isValid = ::OpenAPI::fromJsonValue(m_status_codes, json[QString("StatusCodes")]);
    m_status_codes_isSet = !json[QString("StatusCodes")].isNull() && m_status_codes_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("Latency")]);
    m_latency_isSet = !json[QString("Latency")].isNull() && m_latency_isValid;
}

QString OAIDescribeEnvironmentHealthResult_ApplicationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEnvironmentHealthResult_ApplicationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_request_count_isSet) {
        obj.insert(QString("RequestCount"), ::OpenAPI::toJsonValue(m_request_count));
    }
    if (m_status_codes.isSet()) {
        obj.insert(QString("StatusCodes"), ::OpenAPI::toJsonValue(m_status_codes));
    }
    if (m_latency.isSet()) {
        obj.insert(QString("Latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    return obj;
}

qint32 OAIDescribeEnvironmentHealthResult_ApplicationMetrics::getDuration() const {
    return m_duration;
}
void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIDescribeEnvironmentHealthResult_ApplicationMetrics::getRequestCount() const {
    return m_request_count;
}
void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::setRequestCount(const qint32 &request_count) {
    m_request_count = request_count;
    m_request_count_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_request_count_Set() const{
    return m_request_count_isSet;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_request_count_Valid() const{
    return m_request_count_isValid;
}

OAIApplicationMetrics_StatusCodes OAIDescribeEnvironmentHealthResult_ApplicationMetrics::getStatusCodes() const {
    return m_status_codes;
}
void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::setStatusCodes(const OAIApplicationMetrics_StatusCodes &status_codes) {
    m_status_codes = status_codes;
    m_status_codes_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_status_codes_Set() const{
    return m_status_codes_isSet;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_status_codes_Valid() const{
    return m_status_codes_isValid;
}

OAIApplicationMetrics_Latency OAIDescribeEnvironmentHealthResult_ApplicationMetrics::getLatency() const {
    return m_latency;
}
void OAIDescribeEnvironmentHealthResult_ApplicationMetrics::setLatency(const OAIApplicationMetrics_Latency &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::is_latency_Valid() const{
    return m_latency_isValid;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEnvironmentHealthResult_ApplicationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
