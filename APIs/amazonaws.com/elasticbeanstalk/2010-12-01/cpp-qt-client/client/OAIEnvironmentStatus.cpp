/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentStatus::OAIEnvironmentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentStatus::OAIEnvironmentStatus() {
    this->initializeModel();
}

OAIEnvironmentStatus::~OAIEnvironmentStatus() {}

void OAIEnvironmentStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnvironmentStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnvironmentStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Aborting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::ABORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Launching", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::LAUNCHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LinkingFrom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::LINKINGFROM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LinkingTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::LINKINGTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::TERMINATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentStatus::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnvironmentStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnvironmentStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnvironmentStatus::ABORTING:
            val = "Aborting";
            break;
        case eOAIEnvironmentStatus::LAUNCHING:
            val = "Launching";
            break;
        case eOAIEnvironmentStatus::UPDATING:
            val = "Updating";
            break;
        case eOAIEnvironmentStatus::LINKINGFROM:
            val = "LinkingFrom";
            break;
        case eOAIEnvironmentStatus::LINKINGTO:
            val = "LinkingTo";
            break;
        case eOAIEnvironmentStatus::READY:
            val = "Ready";
            break;
        case eOAIEnvironmentStatus::TERMINATING:
            val = "Terminating";
            break;
        case eOAIEnvironmentStatus::TERMINATED:
            val = "Terminated";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnvironmentStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnvironmentStatus::eOAIEnvironmentStatus OAIEnvironmentStatus::getValue() const {
    return m_value;
}

void OAIEnvironmentStatus::setValue(const OAIEnvironmentStatus::eOAIEnvironmentStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnvironmentStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnvironmentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
