/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationVersionMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationVersionMessage::OAICreateApplicationVersionMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationVersionMessage::OAICreateApplicationVersionMessage() {
    this->initializeModel();
}

OAICreateApplicationVersionMessage::~OAICreateApplicationVersionMessage() {}

void OAICreateApplicationVersionMessage::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_version_label_isSet = false;
    m_version_label_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_source_build_information_isSet = false;
    m_source_build_information_isValid = false;

    m_source_bundle_isSet = false;
    m_source_bundle_isValid = false;

    m_build_configuration_isSet = false;
    m_build_configuration_isValid = false;

    m_auto_create_application_isSet = false;
    m_auto_create_application_isValid = false;

    m_process_isSet = false;
    m_process_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApplicationVersionMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationVersionMessage::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_version_label_isValid = ::OpenAPI::fromJsonValue(m_version_label, json[QString("VersionLabel")]);
    m_version_label_isSet = !json[QString("VersionLabel")].isNull() && m_version_label_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_source_build_information_isValid = ::OpenAPI::fromJsonValue(m_source_build_information, json[QString("SourceBuildInformation")]);
    m_source_build_information_isSet = !json[QString("SourceBuildInformation")].isNull() && m_source_build_information_isValid;

    m_source_bundle_isValid = ::OpenAPI::fromJsonValue(m_source_bundle, json[QString("SourceBundle")]);
    m_source_bundle_isSet = !json[QString("SourceBundle")].isNull() && m_source_bundle_isValid;

    m_build_configuration_isValid = ::OpenAPI::fromJsonValue(m_build_configuration, json[QString("BuildConfiguration")]);
    m_build_configuration_isSet = !json[QString("BuildConfiguration")].isNull() && m_build_configuration_isValid;

    m_auto_create_application_isValid = ::OpenAPI::fromJsonValue(m_auto_create_application, json[QString("AutoCreateApplication")]);
    m_auto_create_application_isSet = !json[QString("AutoCreateApplication")].isNull() && m_auto_create_application_isValid;

    m_process_isValid = ::OpenAPI::fromJsonValue(m_process, json[QString("Process")]);
    m_process_isSet = !json[QString("Process")].isNull() && m_process_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateApplicationVersionMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationVersionMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_version_label_isSet) {
        obj.insert(QString("VersionLabel"), ::OpenAPI::toJsonValue(m_version_label));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_source_build_information.isSet()) {
        obj.insert(QString("SourceBuildInformation"), ::OpenAPI::toJsonValue(m_source_build_information));
    }
    if (m_source_bundle.isSet()) {
        obj.insert(QString("SourceBundle"), ::OpenAPI::toJsonValue(m_source_bundle));
    }
    if (m_build_configuration.isSet()) {
        obj.insert(QString("BuildConfiguration"), ::OpenAPI::toJsonValue(m_build_configuration));
    }
    if (m_auto_create_application_isSet) {
        obj.insert(QString("AutoCreateApplication"), ::OpenAPI::toJsonValue(m_auto_create_application));
    }
    if (m_process_isSet) {
        obj.insert(QString("Process"), ::OpenAPI::toJsonValue(m_process));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApplicationVersionMessage::getApplicationName() const {
    return m_application_name;
}
void OAICreateApplicationVersionMessage::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICreateApplicationVersionMessage::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAICreateApplicationVersionMessage::getVersionLabel() const {
    return m_version_label;
}
void OAICreateApplicationVersionMessage::setVersionLabel(const QString &version_label) {
    m_version_label = version_label;
    m_version_label_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_version_label_Set() const{
    return m_version_label_isSet;
}

bool OAICreateApplicationVersionMessage::is_version_label_Valid() const{
    return m_version_label_isValid;
}

QString OAICreateApplicationVersionMessage::getDescription() const {
    return m_description;
}
void OAICreateApplicationVersionMessage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApplicationVersionMessage::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateApplicationVersionMessage_SourceBuildInformation OAICreateApplicationVersionMessage::getSourceBuildInformation() const {
    return m_source_build_information;
}
void OAICreateApplicationVersionMessage::setSourceBuildInformation(const OAICreateApplicationVersionMessage_SourceBuildInformation &source_build_information) {
    m_source_build_information = source_build_information;
    m_source_build_information_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_source_build_information_Set() const{
    return m_source_build_information_isSet;
}

bool OAICreateApplicationVersionMessage::is_source_build_information_Valid() const{
    return m_source_build_information_isValid;
}

OAICreateApplicationVersionMessage_SourceBundle OAICreateApplicationVersionMessage::getSourceBundle() const {
    return m_source_bundle;
}
void OAICreateApplicationVersionMessage::setSourceBundle(const OAICreateApplicationVersionMessage_SourceBundle &source_bundle) {
    m_source_bundle = source_bundle;
    m_source_bundle_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_source_bundle_Set() const{
    return m_source_bundle_isSet;
}

bool OAICreateApplicationVersionMessage::is_source_bundle_Valid() const{
    return m_source_bundle_isValid;
}

OAICreateApplicationVersionMessage_BuildConfiguration OAICreateApplicationVersionMessage::getBuildConfiguration() const {
    return m_build_configuration;
}
void OAICreateApplicationVersionMessage::setBuildConfiguration(const OAICreateApplicationVersionMessage_BuildConfiguration &build_configuration) {
    m_build_configuration = build_configuration;
    m_build_configuration_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_build_configuration_Set() const{
    return m_build_configuration_isSet;
}

bool OAICreateApplicationVersionMessage::is_build_configuration_Valid() const{
    return m_build_configuration_isValid;
}

bool OAICreateApplicationVersionMessage::getAutoCreateApplication() const {
    return m_auto_create_application;
}
void OAICreateApplicationVersionMessage::setAutoCreateApplication(const bool &auto_create_application) {
    m_auto_create_application = auto_create_application;
    m_auto_create_application_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_auto_create_application_Set() const{
    return m_auto_create_application_isSet;
}

bool OAICreateApplicationVersionMessage::is_auto_create_application_Valid() const{
    return m_auto_create_application_isValid;
}

bool OAICreateApplicationVersionMessage::getProcess() const {
    return m_process;
}
void OAICreateApplicationVersionMessage::setProcess(const bool &process) {
    m_process = process;
    m_process_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_process_Set() const{
    return m_process_isSet;
}

bool OAICreateApplicationVersionMessage::is_process_Valid() const{
    return m_process_isValid;
}

QList OAICreateApplicationVersionMessage::getTags() const {
    return m_tags;
}
void OAICreateApplicationVersionMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationVersionMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationVersionMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApplicationVersionMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_build_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_bundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_create_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationVersionMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_version_label_isValid && true;
}

} // namespace OpenAPI
