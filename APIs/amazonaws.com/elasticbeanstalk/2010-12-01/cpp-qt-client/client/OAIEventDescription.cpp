/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDescription::OAIEventDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDescription::OAIEventDescription() {
    this->initializeModel();
}

OAIEventDescription::~OAIEventDescription() {}

void OAIEventDescription::initializeModel() {

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_version_label_isSet = false;
    m_version_label_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_platform_arn_isSet = false;
    m_platform_arn_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIEventDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDescription::fromJsonObject(QJsonObject json) {

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("EventDate")]);
    m_event_date_isSet = !json[QString("EventDate")].isNull() && m_event_date_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_version_label_isValid = ::OpenAPI::fromJsonValue(m_version_label, json[QString("VersionLabel")]);
    m_version_label_isSet = !json[QString("VersionLabel")].isNull() && m_version_label_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_platform_arn_isValid = ::OpenAPI::fromJsonValue(m_platform_arn, json[QString("PlatformArn")]);
    m_platform_arn_isSet = !json[QString("PlatformArn")].isNull() && m_platform_arn_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;
}

QString OAIEventDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_event_date_isSet) {
        obj.insert(QString("EventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_version_label_isSet) {
        obj.insert(QString("VersionLabel"), ::OpenAPI::toJsonValue(m_version_label));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_platform_arn_isSet) {
        obj.insert(QString("PlatformArn"), ::OpenAPI::toJsonValue(m_platform_arn));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QDateTime OAIEventDescription::getEventDate() const {
    return m_event_date;
}
void OAIEventDescription::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIEventDescription::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIEventDescription::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIEventDescription::getMessage() const {
    return m_message;
}
void OAIEventDescription::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventDescription::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventDescription::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEventDescription::getApplicationName() const {
    return m_application_name;
}
void OAIEventDescription::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIEventDescription::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIEventDescription::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIEventDescription::getVersionLabel() const {
    return m_version_label;
}
void OAIEventDescription::setVersionLabel(const QString &version_label) {
    m_version_label = version_label;
    m_version_label_isSet = true;
}

bool OAIEventDescription::is_version_label_Set() const{
    return m_version_label_isSet;
}

bool OAIEventDescription::is_version_label_Valid() const{
    return m_version_label_isValid;
}

QString OAIEventDescription::getTemplateName() const {
    return m_template_name;
}
void OAIEventDescription::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIEventDescription::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIEventDescription::is_template_name_Valid() const{
    return m_template_name_isValid;
}

QString OAIEventDescription::getEnvironmentName() const {
    return m_environment_name;
}
void OAIEventDescription::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIEventDescription::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIEventDescription::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAIEventDescription::getPlatformArn() const {
    return m_platform_arn;
}
void OAIEventDescription::setPlatformArn(const QString &platform_arn) {
    m_platform_arn = platform_arn;
    m_platform_arn_isSet = true;
}

bool OAIEventDescription::is_platform_arn_Set() const{
    return m_platform_arn_isSet;
}

bool OAIEventDescription::is_platform_arn_Valid() const{
    return m_platform_arn_isValid;
}

QString OAIEventDescription::getRequestId() const {
    return m_request_id;
}
void OAIEventDescription::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIEventDescription::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIEventDescription::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIEventSeverity OAIEventDescription::getSeverity() const {
    return m_severity;
}
void OAIEventDescription::setSeverity(const OAIEventSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEventDescription::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEventDescription::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIEventDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
