/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationDescriptionMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationDescriptionMessage::OAIApplicationDescriptionMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationDescriptionMessage::OAIApplicationDescriptionMessage() {
    this->initializeModel();
}

OAIApplicationDescriptionMessage::~OAIApplicationDescriptionMessage() {}

void OAIApplicationDescriptionMessage::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;
}

void OAIApplicationDescriptionMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationDescriptionMessage::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("Application")]);
    m_application_isSet = !json[QString("Application")].isNull() && m_application_isValid;
}

QString OAIApplicationDescriptionMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationDescriptionMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_application.isSet()) {
        obj.insert(QString("Application"), ::OpenAPI::toJsonValue(m_application));
    }
    return obj;
}

OAIApplicationDescriptionMessage_Application OAIApplicationDescriptionMessage::getApplication() const {
    return m_application;
}
void OAIApplicationDescriptionMessage::setApplication(const OAIApplicationDescriptionMessage_Application &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIApplicationDescriptionMessage::is_application_Set() const{
    return m_application_isSet;
}

bool OAIApplicationDescriptionMessage::is_application_Valid() const{
    return m_application_isValid;
}

bool OAIApplicationDescriptionMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationDescriptionMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
