/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInstancesHealthResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInstancesHealthResult::OAIDescribeInstancesHealthResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInstancesHealthResult::OAIDescribeInstancesHealthResult() {
    this->initializeModel();
}

OAIDescribeInstancesHealthResult::~OAIDescribeInstancesHealthResult() {}

void OAIDescribeInstancesHealthResult::initializeModel() {

    m_instance_health_list_isSet = false;
    m_instance_health_list_isValid = false;

    m_refreshed_at_isSet = false;
    m_refreshed_at_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeInstancesHealthResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInstancesHealthResult::fromJsonObject(QJsonObject json) {

    m_instance_health_list_isValid = ::OpenAPI::fromJsonValue(m_instance_health_list, json[QString("InstanceHealthList")]);
    m_instance_health_list_isSet = !json[QString("InstanceHealthList")].isNull() && m_instance_health_list_isValid;

    m_refreshed_at_isValid = ::OpenAPI::fromJsonValue(m_refreshed_at, json[QString("RefreshedAt")]);
    m_refreshed_at_isSet = !json[QString("RefreshedAt")].isNull() && m_refreshed_at_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeInstancesHealthResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInstancesHealthResult::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_health_list.isSet()) {
        obj.insert(QString("InstanceHealthList"), ::OpenAPI::toJsonValue(m_instance_health_list));
    }
    if (m_refreshed_at_isSet) {
        obj.insert(QString("RefreshedAt"), ::OpenAPI::toJsonValue(m_refreshed_at));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeInstancesHealthResult::getInstanceHealthList() const {
    return m_instance_health_list;
}
void OAIDescribeInstancesHealthResult::setInstanceHealthList(const QList &instance_health_list) {
    m_instance_health_list = instance_health_list;
    m_instance_health_list_isSet = true;
}

bool OAIDescribeInstancesHealthResult::is_instance_health_list_Set() const{
    return m_instance_health_list_isSet;
}

bool OAIDescribeInstancesHealthResult::is_instance_health_list_Valid() const{
    return m_instance_health_list_isValid;
}

QDateTime OAIDescribeInstancesHealthResult::getRefreshedAt() const {
    return m_refreshed_at;
}
void OAIDescribeInstancesHealthResult::setRefreshedAt(const QDateTime &refreshed_at) {
    m_refreshed_at = refreshed_at;
    m_refreshed_at_isSet = true;
}

bool OAIDescribeInstancesHealthResult::is_refreshed_at_Set() const{
    return m_refreshed_at_isSet;
}

bool OAIDescribeInstancesHealthResult::is_refreshed_at_Valid() const{
    return m_refreshed_at_isValid;
}

QString OAIDescribeInstancesHealthResult::getNextToken() const {
    return m_next_token;
}
void OAIDescribeInstancesHealthResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeInstancesHealthResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeInstancesHealthResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeInstancesHealthResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_health_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refreshed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInstancesHealthResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
