/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICPUUtilization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICPUUtilization::OAICPUUtilization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICPUUtilization::OAICPUUtilization() {
    this->initializeModel();
}

OAICPUUtilization::~OAICPUUtilization() {}

void OAICPUUtilization::initializeModel() {

    m_user_isSet = false;
    m_user_isValid = false;

    m_nice_isSet = false;
    m_nice_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_idle_isSet = false;
    m_idle_isValid = false;

    m_io_wait_isSet = false;
    m_io_wait_isValid = false;

    m_irq_isSet = false;
    m_irq_isValid = false;

    m_soft_irq_isSet = false;
    m_soft_irq_isValid = false;

    m_privileged_isSet = false;
    m_privileged_isValid = false;
}

void OAICPUUtilization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICPUUtilization::fromJsonObject(QJsonObject json) {

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_nice_isValid = ::OpenAPI::fromJsonValue(m_nice, json[QString("Nice")]);
    m_nice_isSet = !json[QString("Nice")].isNull() && m_nice_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("System")]);
    m_system_isSet = !json[QString("System")].isNull() && m_system_isValid;

    m_idle_isValid = ::OpenAPI::fromJsonValue(m_idle, json[QString("Idle")]);
    m_idle_isSet = !json[QString("Idle")].isNull() && m_idle_isValid;

    m_io_wait_isValid = ::OpenAPI::fromJsonValue(m_io_wait, json[QString("IOWait")]);
    m_io_wait_isSet = !json[QString("IOWait")].isNull() && m_io_wait_isValid;

    m_irq_isValid = ::OpenAPI::fromJsonValue(m_irq, json[QString("IRQ")]);
    m_irq_isSet = !json[QString("IRQ")].isNull() && m_irq_isValid;

    m_soft_irq_isValid = ::OpenAPI::fromJsonValue(m_soft_irq, json[QString("SoftIRQ")]);
    m_soft_irq_isSet = !json[QString("SoftIRQ")].isNull() && m_soft_irq_isValid;

    m_privileged_isValid = ::OpenAPI::fromJsonValue(m_privileged, json[QString("Privileged")]);
    m_privileged_isSet = !json[QString("Privileged")].isNull() && m_privileged_isValid;
}

QString OAICPUUtilization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICPUUtilization::asJsonObject() const {
    QJsonObject obj;
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_nice_isSet) {
        obj.insert(QString("Nice"), ::OpenAPI::toJsonValue(m_nice));
    }
    if (m_system_isSet) {
        obj.insert(QString("System"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_idle_isSet) {
        obj.insert(QString("Idle"), ::OpenAPI::toJsonValue(m_idle));
    }
    if (m_io_wait_isSet) {
        obj.insert(QString("IOWait"), ::OpenAPI::toJsonValue(m_io_wait));
    }
    if (m_irq_isSet) {
        obj.insert(QString("IRQ"), ::OpenAPI::toJsonValue(m_irq));
    }
    if (m_soft_irq_isSet) {
        obj.insert(QString("SoftIRQ"), ::OpenAPI::toJsonValue(m_soft_irq));
    }
    if (m_privileged_isSet) {
        obj.insert(QString("Privileged"), ::OpenAPI::toJsonValue(m_privileged));
    }
    return obj;
}

double OAICPUUtilization::getUser() const {
    return m_user;
}
void OAICPUUtilization::setUser(const double &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICPUUtilization::is_user_Set() const{
    return m_user_isSet;
}

bool OAICPUUtilization::is_user_Valid() const{
    return m_user_isValid;
}

double OAICPUUtilization::getNice() const {
    return m_nice;
}
void OAICPUUtilization::setNice(const double &nice) {
    m_nice = nice;
    m_nice_isSet = true;
}

bool OAICPUUtilization::is_nice_Set() const{
    return m_nice_isSet;
}

bool OAICPUUtilization::is_nice_Valid() const{
    return m_nice_isValid;
}

double OAICPUUtilization::getSystem() const {
    return m_system;
}
void OAICPUUtilization::setSystem(const double &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAICPUUtilization::is_system_Set() const{
    return m_system_isSet;
}

bool OAICPUUtilization::is_system_Valid() const{
    return m_system_isValid;
}

double OAICPUUtilization::getIdle() const {
    return m_idle;
}
void OAICPUUtilization::setIdle(const double &idle) {
    m_idle = idle;
    m_idle_isSet = true;
}

bool OAICPUUtilization::is_idle_Set() const{
    return m_idle_isSet;
}

bool OAICPUUtilization::is_idle_Valid() const{
    return m_idle_isValid;
}

double OAICPUUtilization::getIoWait() const {
    return m_io_wait;
}
void OAICPUUtilization::setIoWait(const double &io_wait) {
    m_io_wait = io_wait;
    m_io_wait_isSet = true;
}

bool OAICPUUtilization::is_io_wait_Set() const{
    return m_io_wait_isSet;
}

bool OAICPUUtilization::is_io_wait_Valid() const{
    return m_io_wait_isValid;
}

double OAICPUUtilization::getIrq() const {
    return m_irq;
}
void OAICPUUtilization::setIrq(const double &irq) {
    m_irq = irq;
    m_irq_isSet = true;
}

bool OAICPUUtilization::is_irq_Set() const{
    return m_irq_isSet;
}

bool OAICPUUtilization::is_irq_Valid() const{
    return m_irq_isValid;
}

double OAICPUUtilization::getSoftIrq() const {
    return m_soft_irq;
}
void OAICPUUtilization::setSoftIrq(const double &soft_irq) {
    m_soft_irq = soft_irq;
    m_soft_irq_isSet = true;
}

bool OAICPUUtilization::is_soft_irq_Set() const{
    return m_soft_irq_isSet;
}

bool OAICPUUtilization::is_soft_irq_Valid() const{
    return m_soft_irq_isValid;
}

double OAICPUUtilization::getPrivileged() const {
    return m_privileged;
}
void OAICPUUtilization::setPrivileged(const double &privileged) {
    m_privileged = privileged;
    m_privileged_isSet = true;
}

bool OAICPUUtilization::is_privileged_Set() const{
    return m_privileged_isSet;
}

bool OAICPUUtilization::is_privileged_Valid() const{
    return m_privileged_isValid;
}

bool OAICPUUtilization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_io_wait_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_irq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privileged_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICPUUtilization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
