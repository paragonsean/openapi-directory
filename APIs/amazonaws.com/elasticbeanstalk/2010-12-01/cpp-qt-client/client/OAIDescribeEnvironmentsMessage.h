/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeEnvironmentsMessage.h
 *
 * Request to describe one or more environments.
 */

#ifndef OAIDescribeEnvironmentsMessage_H
#define OAIDescribeEnvironmentsMessage_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeEnvironmentsMessage : public OAIObject {
public:
    OAIDescribeEnvironmentsMessage();
    OAIDescribeEnvironmentsMessage(QString json);
    ~OAIDescribeEnvironmentsMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationName() const;
    void setApplicationName(const QString &application_name);
    bool is_application_name_Set() const;
    bool is_application_name_Valid() const;

    QString getVersionLabel() const;
    void setVersionLabel(const QString &version_label);
    bool is_version_label_Set() const;
    bool is_version_label_Valid() const;

    QList getEnvironmentIds() const;
    void setEnvironmentIds(const QList &environment_ids);
    bool is_environment_ids_Set() const;
    bool is_environment_ids_Valid() const;

    QList getEnvironmentNames() const;
    void setEnvironmentNames(const QList &environment_names);
    bool is_environment_names_Set() const;
    bool is_environment_names_Valid() const;

    bool getIncludeDeleted() const;
    void setIncludeDeleted(const bool &include_deleted);
    bool is_include_deleted_Set() const;
    bool is_include_deleted_Valid() const;

    QDateTime getIncludedDeletedBackTo() const;
    void setIncludedDeletedBackTo(const QDateTime &included_deleted_back_to);
    bool is_included_deleted_back_to_Set() const;
    bool is_included_deleted_back_to_Valid() const;

    qint32 getMaxRecords() const;
    void setMaxRecords(const qint32 &max_records);
    bool is_max_records_Set() const;
    bool is_max_records_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_name;
    bool m_application_name_isSet;
    bool m_application_name_isValid;

    QString m_version_label;
    bool m_version_label_isSet;
    bool m_version_label_isValid;

    QList m_environment_ids;
    bool m_environment_ids_isSet;
    bool m_environment_ids_isValid;

    QList m_environment_names;
    bool m_environment_names_isSet;
    bool m_environment_names_isValid;

    bool m_include_deleted;
    bool m_include_deleted_isSet;
    bool m_include_deleted_isValid;

    QDateTime m_included_deleted_back_to;
    bool m_included_deleted_back_to_isSet;
    bool m_included_deleted_back_to_isValid;

    qint32 m_max_records;
    bool m_max_records_isSet;
    bool m_max_records_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeEnvironmentsMessage)

#endif // OAIDescribeEnvironmentsMessage_H
