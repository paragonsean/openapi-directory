/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEnvironmentMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEnvironmentMessage::OAIUpdateEnvironmentMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEnvironmentMessage::OAIUpdateEnvironmentMessage() {
    this->initializeModel();
}

OAIUpdateEnvironmentMessage::~OAIUpdateEnvironmentMessage() {}

void OAIUpdateEnvironmentMessage::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_version_label_isSet = false;
    m_version_label_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_solution_stack_name_isSet = false;
    m_solution_stack_name_isValid = false;

    m_platform_arn_isSet = false;
    m_platform_arn_isValid = false;

    m_option_settings_isSet = false;
    m_option_settings_isValid = false;

    m_options_to_remove_isSet = false;
    m_options_to_remove_isValid = false;
}

void OAIUpdateEnvironmentMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEnvironmentMessage::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("Tier")]);
    m_tier_isSet = !json[QString("Tier")].isNull() && m_tier_isValid;

    m_version_label_isValid = ::OpenAPI::fromJsonValue(m_version_label, json[QString("VersionLabel")]);
    m_version_label_isSet = !json[QString("VersionLabel")].isNull() && m_version_label_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_solution_stack_name_isValid = ::OpenAPI::fromJsonValue(m_solution_stack_name, json[QString("SolutionStackName")]);
    m_solution_stack_name_isSet = !json[QString("SolutionStackName")].isNull() && m_solution_stack_name_isValid;

    m_platform_arn_isValid = ::OpenAPI::fromJsonValue(m_platform_arn, json[QString("PlatformArn")]);
    m_platform_arn_isSet = !json[QString("PlatformArn")].isNull() && m_platform_arn_isValid;

    m_option_settings_isValid = ::OpenAPI::fromJsonValue(m_option_settings, json[QString("OptionSettings")]);
    m_option_settings_isSet = !json[QString("OptionSettings")].isNull() && m_option_settings_isValid;

    m_options_to_remove_isValid = ::OpenAPI::fromJsonValue(m_options_to_remove, json[QString("OptionsToRemove")]);
    m_options_to_remove_isSet = !json[QString("OptionsToRemove")].isNull() && m_options_to_remove_isValid;
}

QString OAIUpdateEnvironmentMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEnvironmentMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tier.isSet()) {
        obj.insert(QString("Tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_version_label_isSet) {
        obj.insert(QString("VersionLabel"), ::OpenAPI::toJsonValue(m_version_label));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_solution_stack_name_isSet) {
        obj.insert(QString("SolutionStackName"), ::OpenAPI::toJsonValue(m_solution_stack_name));
    }
    if (m_platform_arn_isSet) {
        obj.insert(QString("PlatformArn"), ::OpenAPI::toJsonValue(m_platform_arn));
    }
    if (m_option_settings.isSet()) {
        obj.insert(QString("OptionSettings"), ::OpenAPI::toJsonValue(m_option_settings));
    }
    if (m_options_to_remove.isSet()) {
        obj.insert(QString("OptionsToRemove"), ::OpenAPI::toJsonValue(m_options_to_remove));
    }
    return obj;
}

QString OAIUpdateEnvironmentMessage::getApplicationName() const {
    return m_application_name;
}
void OAIUpdateEnvironmentMessage::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIUpdateEnvironmentMessage::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIUpdateEnvironmentMessage::getEnvironmentId() const {
    return m_environment_id;
}
void OAIUpdateEnvironmentMessage::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIUpdateEnvironmentMessage::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIUpdateEnvironmentMessage::getEnvironmentName() const {
    return m_environment_name;
}
void OAIUpdateEnvironmentMessage::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIUpdateEnvironmentMessage::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAIUpdateEnvironmentMessage::getGroupName() const {
    return m_group_name;
}
void OAIUpdateEnvironmentMessage::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIUpdateEnvironmentMessage::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIUpdateEnvironmentMessage::getDescription() const {
    return m_description;
}
void OAIUpdateEnvironmentMessage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateEnvironmentMessage::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateEnvironmentMessage_Tier OAIUpdateEnvironmentMessage::getTier() const {
    return m_tier;
}
void OAIUpdateEnvironmentMessage::setTier(const OAIUpdateEnvironmentMessage_Tier &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIUpdateEnvironmentMessage::is_tier_Valid() const{
    return m_tier_isValid;
}

QString OAIUpdateEnvironmentMessage::getVersionLabel() const {
    return m_version_label;
}
void OAIUpdateEnvironmentMessage::setVersionLabel(const QString &version_label) {
    m_version_label = version_label;
    m_version_label_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_version_label_Set() const{
    return m_version_label_isSet;
}

bool OAIUpdateEnvironmentMessage::is_version_label_Valid() const{
    return m_version_label_isValid;
}

QString OAIUpdateEnvironmentMessage::getTemplateName() const {
    return m_template_name;
}
void OAIUpdateEnvironmentMessage::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIUpdateEnvironmentMessage::is_template_name_Valid() const{
    return m_template_name_isValid;
}

QString OAIUpdateEnvironmentMessage::getSolutionStackName() const {
    return m_solution_stack_name;
}
void OAIUpdateEnvironmentMessage::setSolutionStackName(const QString &solution_stack_name) {
    m_solution_stack_name = solution_stack_name;
    m_solution_stack_name_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_solution_stack_name_Set() const{
    return m_solution_stack_name_isSet;
}

bool OAIUpdateEnvironmentMessage::is_solution_stack_name_Valid() const{
    return m_solution_stack_name_isValid;
}

QString OAIUpdateEnvironmentMessage::getPlatformArn() const {
    return m_platform_arn;
}
void OAIUpdateEnvironmentMessage::setPlatformArn(const QString &platform_arn) {
    m_platform_arn = platform_arn;
    m_platform_arn_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_platform_arn_Set() const{
    return m_platform_arn_isSet;
}

bool OAIUpdateEnvironmentMessage::is_platform_arn_Valid() const{
    return m_platform_arn_isValid;
}

QList OAIUpdateEnvironmentMessage::getOptionSettings() const {
    return m_option_settings;
}
void OAIUpdateEnvironmentMessage::setOptionSettings(const QList &option_settings) {
    m_option_settings = option_settings;
    m_option_settings_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_option_settings_Set() const{
    return m_option_settings_isSet;
}

bool OAIUpdateEnvironmentMessage::is_option_settings_Valid() const{
    return m_option_settings_isValid;
}

QList OAIUpdateEnvironmentMessage::getOptionsToRemove() const {
    return m_options_to_remove;
}
void OAIUpdateEnvironmentMessage::setOptionsToRemove(const QList &options_to_remove) {
    m_options_to_remove = options_to_remove;
    m_options_to_remove_isSet = true;
}

bool OAIUpdateEnvironmentMessage::is_options_to_remove_Set() const{
    return m_options_to_remove_isSet;
}

bool OAIUpdateEnvironmentMessage::is_options_to_remove_Valid() const{
    return m_options_to_remove_isValid;
}

bool OAIUpdateEnvironmentMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEnvironmentMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
