/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEnvironmentHealthResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEnvironmentHealthResult::OAIDescribeEnvironmentHealthResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEnvironmentHealthResult::OAIDescribeEnvironmentHealthResult() {
    this->initializeModel();
}

OAIDescribeEnvironmentHealthResult::~OAIDescribeEnvironmentHealthResult() {}

void OAIDescribeEnvironmentHealthResult::initializeModel() {

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_causes_isSet = false;
    m_causes_isValid = false;

    m_application_metrics_isSet = false;
    m_application_metrics_isValid = false;

    m_instances_health_isSet = false;
    m_instances_health_isValid = false;

    m_refreshed_at_isSet = false;
    m_refreshed_at_isValid = false;
}

void OAIDescribeEnvironmentHealthResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEnvironmentHealthResult::fromJsonObject(QJsonObject json) {

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_causes_isValid = ::OpenAPI::fromJsonValue(m_causes, json[QString("Causes")]);
    m_causes_isSet = !json[QString("Causes")].isNull() && m_causes_isValid;

    m_application_metrics_isValid = ::OpenAPI::fromJsonValue(m_application_metrics, json[QString("ApplicationMetrics")]);
    m_application_metrics_isSet = !json[QString("ApplicationMetrics")].isNull() && m_application_metrics_isValid;

    m_instances_health_isValid = ::OpenAPI::fromJsonValue(m_instances_health, json[QString("InstancesHealth")]);
    m_instances_health_isSet = !json[QString("InstancesHealth")].isNull() && m_instances_health_isValid;

    m_refreshed_at_isValid = ::OpenAPI::fromJsonValue(m_refreshed_at, json[QString("RefreshedAt")]);
    m_refreshed_at_isSet = !json[QString("RefreshedAt")].isNull() && m_refreshed_at_isValid;
}

QString OAIDescribeEnvironmentHealthResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEnvironmentHealthResult::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_causes.isSet()) {
        obj.insert(QString("Causes"), ::OpenAPI::toJsonValue(m_causes));
    }
    if (m_application_metrics.isSet()) {
        obj.insert(QString("ApplicationMetrics"), ::OpenAPI::toJsonValue(m_application_metrics));
    }
    if (m_instances_health.isSet()) {
        obj.insert(QString("InstancesHealth"), ::OpenAPI::toJsonValue(m_instances_health));
    }
    if (m_refreshed_at_isSet) {
        obj.insert(QString("RefreshedAt"), ::OpenAPI::toJsonValue(m_refreshed_at));
    }
    return obj;
}

QString OAIDescribeEnvironmentHealthResult::getEnvironmentName() const {
    return m_environment_name;
}
void OAIDescribeEnvironmentHealthResult::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAIDescribeEnvironmentHealthResult::getHealthStatus() const {
    return m_health_status;
}
void OAIDescribeEnvironmentHealthResult::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_health_status_Valid() const{
    return m_health_status_isValid;
}

OAIEnvironmentHealth OAIDescribeEnvironmentHealthResult::getStatus() const {
    return m_status;
}
void OAIDescribeEnvironmentHealthResult::setStatus(const OAIEnvironmentHealth &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeEnvironmentHealthResult::getColor() const {
    return m_color;
}
void OAIDescribeEnvironmentHealthResult::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_color_Set() const{
    return m_color_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_color_Valid() const{
    return m_color_isValid;
}

QList OAIDescribeEnvironmentHealthResult::getCauses() const {
    return m_causes;
}
void OAIDescribeEnvironmentHealthResult::setCauses(const QList &causes) {
    m_causes = causes;
    m_causes_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_causes_Set() const{
    return m_causes_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_causes_Valid() const{
    return m_causes_isValid;
}

OAIDescribeEnvironmentHealthResult_ApplicationMetrics OAIDescribeEnvironmentHealthResult::getApplicationMetrics() const {
    return m_application_metrics;
}
void OAIDescribeEnvironmentHealthResult::setApplicationMetrics(const OAIDescribeEnvironmentHealthResult_ApplicationMetrics &application_metrics) {
    m_application_metrics = application_metrics;
    m_application_metrics_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_application_metrics_Set() const{
    return m_application_metrics_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_application_metrics_Valid() const{
    return m_application_metrics_isValid;
}

OAIDescribeEnvironmentHealthResult_InstancesHealth OAIDescribeEnvironmentHealthResult::getInstancesHealth() const {
    return m_instances_health;
}
void OAIDescribeEnvironmentHealthResult::setInstancesHealth(const OAIDescribeEnvironmentHealthResult_InstancesHealth &instances_health) {
    m_instances_health = instances_health;
    m_instances_health_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_instances_health_Set() const{
    return m_instances_health_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_instances_health_Valid() const{
    return m_instances_health_isValid;
}

QDateTime OAIDescribeEnvironmentHealthResult::getRefreshedAt() const {
    return m_refreshed_at;
}
void OAIDescribeEnvironmentHealthResult::setRefreshedAt(const QDateTime &refreshed_at) {
    m_refreshed_at = refreshed_at;
    m_refreshed_at_isSet = true;
}

bool OAIDescribeEnvironmentHealthResult::is_refreshed_at_Set() const{
    return m_refreshed_at_isSet;
}

bool OAIDescribeEnvironmentHealthResult::is_refreshed_at_Valid() const{
    return m_refreshed_at_isValid;
}

bool OAIDescribeEnvironmentHealthResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_causes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refreshed_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEnvironmentHealthResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
