/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatency::OAILatency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatency::OAILatency() {
    this->initializeModel();
}

OAILatency::~OAILatency() {}

void OAILatency::initializeModel() {

    m_p999_isSet = false;
    m_p999_isValid = false;

    m_p99_isSet = false;
    m_p99_isValid = false;

    m_p95_isSet = false;
    m_p95_isValid = false;

    m_p90_isSet = false;
    m_p90_isValid = false;

    m_p85_isSet = false;
    m_p85_isValid = false;

    m_p75_isSet = false;
    m_p75_isValid = false;

    m_p50_isSet = false;
    m_p50_isValid = false;

    m_p10_isSet = false;
    m_p10_isValid = false;
}

void OAILatency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatency::fromJsonObject(QJsonObject json) {

    m_p999_isValid = ::OpenAPI::fromJsonValue(m_p999, json[QString("P999")]);
    m_p999_isSet = !json[QString("P999")].isNull() && m_p999_isValid;

    m_p99_isValid = ::OpenAPI::fromJsonValue(m_p99, json[QString("P99")]);
    m_p99_isSet = !json[QString("P99")].isNull() && m_p99_isValid;

    m_p95_isValid = ::OpenAPI::fromJsonValue(m_p95, json[QString("P95")]);
    m_p95_isSet = !json[QString("P95")].isNull() && m_p95_isValid;

    m_p90_isValid = ::OpenAPI::fromJsonValue(m_p90, json[QString("P90")]);
    m_p90_isSet = !json[QString("P90")].isNull() && m_p90_isValid;

    m_p85_isValid = ::OpenAPI::fromJsonValue(m_p85, json[QString("P85")]);
    m_p85_isSet = !json[QString("P85")].isNull() && m_p85_isValid;

    m_p75_isValid = ::OpenAPI::fromJsonValue(m_p75, json[QString("P75")]);
    m_p75_isSet = !json[QString("P75")].isNull() && m_p75_isValid;

    m_p50_isValid = ::OpenAPI::fromJsonValue(m_p50, json[QString("P50")]);
    m_p50_isSet = !json[QString("P50")].isNull() && m_p50_isValid;

    m_p10_isValid = ::OpenAPI::fromJsonValue(m_p10, json[QString("P10")]);
    m_p10_isSet = !json[QString("P10")].isNull() && m_p10_isValid;
}

QString OAILatency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatency::asJsonObject() const {
    QJsonObject obj;
    if (m_p999_isSet) {
        obj.insert(QString("P999"), ::OpenAPI::toJsonValue(m_p999));
    }
    if (m_p99_isSet) {
        obj.insert(QString("P99"), ::OpenAPI::toJsonValue(m_p99));
    }
    if (m_p95_isSet) {
        obj.insert(QString("P95"), ::OpenAPI::toJsonValue(m_p95));
    }
    if (m_p90_isSet) {
        obj.insert(QString("P90"), ::OpenAPI::toJsonValue(m_p90));
    }
    if (m_p85_isSet) {
        obj.insert(QString("P85"), ::OpenAPI::toJsonValue(m_p85));
    }
    if (m_p75_isSet) {
        obj.insert(QString("P75"), ::OpenAPI::toJsonValue(m_p75));
    }
    if (m_p50_isSet) {
        obj.insert(QString("P50"), ::OpenAPI::toJsonValue(m_p50));
    }
    if (m_p10_isSet) {
        obj.insert(QString("P10"), ::OpenAPI::toJsonValue(m_p10));
    }
    return obj;
}

double OAILatency::getP999() const {
    return m_p999;
}
void OAILatency::setP999(const double &p999) {
    m_p999 = p999;
    m_p999_isSet = true;
}

bool OAILatency::is_p999_Set() const{
    return m_p999_isSet;
}

bool OAILatency::is_p999_Valid() const{
    return m_p999_isValid;
}

double OAILatency::getP99() const {
    return m_p99;
}
void OAILatency::setP99(const double &p99) {
    m_p99 = p99;
    m_p99_isSet = true;
}

bool OAILatency::is_p99_Set() const{
    return m_p99_isSet;
}

bool OAILatency::is_p99_Valid() const{
    return m_p99_isValid;
}

double OAILatency::getP95() const {
    return m_p95;
}
void OAILatency::setP95(const double &p95) {
    m_p95 = p95;
    m_p95_isSet = true;
}

bool OAILatency::is_p95_Set() const{
    return m_p95_isSet;
}

bool OAILatency::is_p95_Valid() const{
    return m_p95_isValid;
}

double OAILatency::getP90() const {
    return m_p90;
}
void OAILatency::setP90(const double &p90) {
    m_p90 = p90;
    m_p90_isSet = true;
}

bool OAILatency::is_p90_Set() const{
    return m_p90_isSet;
}

bool OAILatency::is_p90_Valid() const{
    return m_p90_isValid;
}

double OAILatency::getP85() const {
    return m_p85;
}
void OAILatency::setP85(const double &p85) {
    m_p85 = p85;
    m_p85_isSet = true;
}

bool OAILatency::is_p85_Set() const{
    return m_p85_isSet;
}

bool OAILatency::is_p85_Valid() const{
    return m_p85_isValid;
}

double OAILatency::getP75() const {
    return m_p75;
}
void OAILatency::setP75(const double &p75) {
    m_p75 = p75;
    m_p75_isSet = true;
}

bool OAILatency::is_p75_Set() const{
    return m_p75_isSet;
}

bool OAILatency::is_p75_Valid() const{
    return m_p75_isValid;
}

double OAILatency::getP50() const {
    return m_p50;
}
void OAILatency::setP50(const double &p50) {
    m_p50 = p50;
    m_p50_isSet = true;
}

bool OAILatency::is_p50_Set() const{
    return m_p50_isSet;
}

bool OAILatency::is_p50_Valid() const{
    return m_p50_isValid;
}

double OAILatency::getP10() const {
    return m_p10;
}
void OAILatency::setP10(const double &p10) {
    m_p10 = p10;
    m_p10_isSet = true;
}

bool OAILatency::is_p10_Set() const{
    return m_p10_isSet;
}

bool OAILatency::is_p10_Valid() const{
    return m_p10_isValid;
}

bool OAILatency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_p999_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p99_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p95_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p85_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p75_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p10_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
