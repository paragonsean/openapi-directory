/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationOptionDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationOptionDescription::OAIConfigurationOptionDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationOptionDescription::OAIConfigurationOptionDescription() {
    this->initializeModel();
}

OAIConfigurationOptionDescription::~OAIConfigurationOptionDescription() {}

void OAIConfigurationOptionDescription::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_change_severity_isSet = false;
    m_change_severity_isValid = false;

    m_user_defined_isSet = false;
    m_user_defined_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;

    m_value_options_isSet = false;
    m_value_options_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;
}

void OAIConfigurationOptionDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationOptionDescription::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_change_severity_isValid = ::OpenAPI::fromJsonValue(m_change_severity, json[QString("ChangeSeverity")]);
    m_change_severity_isSet = !json[QString("ChangeSeverity")].isNull() && m_change_severity_isValid;

    m_user_defined_isValid = ::OpenAPI::fromJsonValue(m_user_defined, json[QString("UserDefined")]);
    m_user_defined_isSet = !json[QString("UserDefined")].isNull() && m_user_defined_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("ValueType")]);
    m_value_type_isSet = !json[QString("ValueType")].isNull() && m_value_type_isValid;

    m_value_options_isValid = ::OpenAPI::fromJsonValue(m_value_options, json[QString("ValueOptions")]);
    m_value_options_isSet = !json[QString("ValueOptions")].isNull() && m_value_options_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("MinValue")]);
    m_min_value_isSet = !json[QString("MinValue")].isNull() && m_min_value_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("MaxLength")]);
    m_max_length_isSet = !json[QString("MaxLength")].isNull() && m_max_length_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("Regex")]);
    m_regex_isSet = !json[QString("Regex")].isNull() && m_regex_isValid;
}

QString OAIConfigurationOptionDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationOptionDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_change_severity_isSet) {
        obj.insert(QString("ChangeSeverity"), ::OpenAPI::toJsonValue(m_change_severity));
    }
    if (m_user_defined_isSet) {
        obj.insert(QString("UserDefined"), ::OpenAPI::toJsonValue(m_user_defined));
    }
    if (m_value_type.isSet()) {
        obj.insert(QString("ValueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    if (m_value_options.isSet()) {
        obj.insert(QString("ValueOptions"), ::OpenAPI::toJsonValue(m_value_options));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("MinValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("MaxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_regex.isSet()) {
        obj.insert(QString("Regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    return obj;
}

QString OAIConfigurationOptionDescription::getRNamespace() const {
    return m_r_namespace;
}
void OAIConfigurationOptionDescription::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIConfigurationOptionDescription::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIConfigurationOptionDescription::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIConfigurationOptionDescription::getName() const {
    return m_name;
}
void OAIConfigurationOptionDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfigurationOptionDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfigurationOptionDescription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConfigurationOptionDescription::getDefaultValue() const {
    return m_default_value;
}
void OAIConfigurationOptionDescription::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIConfigurationOptionDescription::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIConfigurationOptionDescription::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIConfigurationOptionDescription::getChangeSeverity() const {
    return m_change_severity;
}
void OAIConfigurationOptionDescription::setChangeSeverity(const QString &change_severity) {
    m_change_severity = change_severity;
    m_change_severity_isSet = true;
}

bool OAIConfigurationOptionDescription::is_change_severity_Set() const{
    return m_change_severity_isSet;
}

bool OAIConfigurationOptionDescription::is_change_severity_Valid() const{
    return m_change_severity_isValid;
}

bool OAIConfigurationOptionDescription::getUserDefined() const {
    return m_user_defined;
}
void OAIConfigurationOptionDescription::setUserDefined(const bool &user_defined) {
    m_user_defined = user_defined;
    m_user_defined_isSet = true;
}

bool OAIConfigurationOptionDescription::is_user_defined_Set() const{
    return m_user_defined_isSet;
}

bool OAIConfigurationOptionDescription::is_user_defined_Valid() const{
    return m_user_defined_isValid;
}

OAIConfigurationOptionValueType OAIConfigurationOptionDescription::getValueType() const {
    return m_value_type;
}
void OAIConfigurationOptionDescription::setValueType(const OAIConfigurationOptionValueType &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIConfigurationOptionDescription::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIConfigurationOptionDescription::is_value_type_Valid() const{
    return m_value_type_isValid;
}

QList OAIConfigurationOptionDescription::getValueOptions() const {
    return m_value_options;
}
void OAIConfigurationOptionDescription::setValueOptions(const QList &value_options) {
    m_value_options = value_options;
    m_value_options_isSet = true;
}

bool OAIConfigurationOptionDescription::is_value_options_Set() const{
    return m_value_options_isSet;
}

bool OAIConfigurationOptionDescription::is_value_options_Valid() const{
    return m_value_options_isValid;
}

qint32 OAIConfigurationOptionDescription::getMinValue() const {
    return m_min_value;
}
void OAIConfigurationOptionDescription::setMinValue(const qint32 &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIConfigurationOptionDescription::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIConfigurationOptionDescription::is_min_value_Valid() const{
    return m_min_value_isValid;
}

qint32 OAIConfigurationOptionDescription::getMaxValue() const {
    return m_max_value;
}
void OAIConfigurationOptionDescription::setMaxValue(const qint32 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIConfigurationOptionDescription::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIConfigurationOptionDescription::is_max_value_Valid() const{
    return m_max_value_isValid;
}

qint32 OAIConfigurationOptionDescription::getMaxLength() const {
    return m_max_length;
}
void OAIConfigurationOptionDescription::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIConfigurationOptionDescription::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIConfigurationOptionDescription::is_max_length_Valid() const{
    return m_max_length_isValid;
}

OAIConfigurationOptionDescription_Regex OAIConfigurationOptionDescription::getRegex() const {
    return m_regex;
}
void OAIConfigurationOptionDescription::setRegex(const OAIConfigurationOptionDescription_Regex &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIConfigurationOptionDescription::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIConfigurationOptionDescription::is_regex_Valid() const{
    return m_regex_isValid;
}

bool OAIConfigurationOptionDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationOptionDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
