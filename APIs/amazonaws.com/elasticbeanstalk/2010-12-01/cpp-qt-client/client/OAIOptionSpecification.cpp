/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptionSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptionSpecification::OAIOptionSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptionSpecification::OAIOptionSpecification() {
    this->initializeModel();
}

OAIOptionSpecification::~OAIOptionSpecification() {}

void OAIOptionSpecification::initializeModel() {

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_option_name_isSet = false;
    m_option_name_isValid = false;
}

void OAIOptionSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptionSpecification::fromJsonObject(QJsonObject json) {

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_option_name_isValid = ::OpenAPI::fromJsonValue(m_option_name, json[QString("OptionName")]);
    m_option_name_isSet = !json[QString("OptionName")].isNull() && m_option_name_isValid;
}

QString OAIOptionSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptionSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_option_name_isSet) {
        obj.insert(QString("OptionName"), ::OpenAPI::toJsonValue(m_option_name));
    }
    return obj;
}

QString OAIOptionSpecification::getResourceName() const {
    return m_resource_name;
}
void OAIOptionSpecification::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIOptionSpecification::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIOptionSpecification::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIOptionSpecification::getRNamespace() const {
    return m_r_namespace;
}
void OAIOptionSpecification::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIOptionSpecification::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIOptionSpecification::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIOptionSpecification::getOptionName() const {
    return m_option_name;
}
void OAIOptionSpecification::setOptionName(const QString &option_name) {
    m_option_name = option_name;
    m_option_name_isSet = true;
}

bool OAIOptionSpecification::is_option_name_Set() const{
    return m_option_name_isSet;
}

bool OAIOptionSpecification::is_option_name_Valid() const{
    return m_option_name_isValid;
}

bool OAIOptionSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptionSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
