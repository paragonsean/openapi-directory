/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailureType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailureType::OAIFailureType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailureType::OAIFailureType() {
    this->initializeModel();
}

OAIFailureType::~OAIFailureType() {}

void OAIFailureType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFailureType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFailureType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UpdateCancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::UPDATECANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CancellationFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::CANCELLATIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollbackFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::ROLLBACKFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollbackSuccessful", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::ROLLBACKSUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InternalFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::INTERNALFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidEnvironmentState", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::INVALIDENVIRONMENTSTATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PermissionsError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureType::PERMISSIONSERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFailureType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFailureType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFailureType::UPDATECANCELLED:
            val = "UpdateCancelled";
            break;
        case eOAIFailureType::CANCELLATIONFAILED:
            val = "CancellationFailed";
            break;
        case eOAIFailureType::ROLLBACKFAILED:
            val = "RollbackFailed";
            break;
        case eOAIFailureType::ROLLBACKSUCCESSFUL:
            val = "RollbackSuccessful";
            break;
        case eOAIFailureType::INTERNALFAILURE:
            val = "InternalFailure";
            break;
        case eOAIFailureType::INVALIDENVIRONMENTSTATE:
            val = "InvalidEnvironmentState";
            break;
        case eOAIFailureType::PERMISSIONSERROR:
            val = "PermissionsError";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFailureType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFailureType::eOAIFailureType OAIFailureType::getValue() const {
    return m_value;
}

void OAIFailureType::setValue(const OAIFailureType::eOAIFailureType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFailureType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFailureType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
