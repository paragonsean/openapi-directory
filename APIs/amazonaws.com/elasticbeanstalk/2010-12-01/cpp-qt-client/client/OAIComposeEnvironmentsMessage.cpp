/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComposeEnvironmentsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComposeEnvironmentsMessage::OAIComposeEnvironmentsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComposeEnvironmentsMessage::OAIComposeEnvironmentsMessage() {
    this->initializeModel();
}

OAIComposeEnvironmentsMessage::~OAIComposeEnvironmentsMessage() {}

void OAIComposeEnvironmentsMessage::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_version_labels_isSet = false;
    m_version_labels_isValid = false;
}

void OAIComposeEnvironmentsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComposeEnvironmentsMessage::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_version_labels_isValid = ::OpenAPI::fromJsonValue(m_version_labels, json[QString("VersionLabels")]);
    m_version_labels_isSet = !json[QString("VersionLabels")].isNull() && m_version_labels_isValid;
}

QString OAIComposeEnvironmentsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComposeEnvironmentsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_version_labels.isSet()) {
        obj.insert(QString("VersionLabels"), ::OpenAPI::toJsonValue(m_version_labels));
    }
    return obj;
}

QString OAIComposeEnvironmentsMessage::getApplicationName() const {
    return m_application_name;
}
void OAIComposeEnvironmentsMessage::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIComposeEnvironmentsMessage::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIComposeEnvironmentsMessage::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIComposeEnvironmentsMessage::getGroupName() const {
    return m_group_name;
}
void OAIComposeEnvironmentsMessage::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIComposeEnvironmentsMessage::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIComposeEnvironmentsMessage::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QList OAIComposeEnvironmentsMessage::getVersionLabels() const {
    return m_version_labels;
}
void OAIComposeEnvironmentsMessage::setVersionLabels(const QList &version_labels) {
    m_version_labels = version_labels;
    m_version_labels_isSet = true;
}

bool OAIComposeEnvironmentsMessage::is_version_labels_Set() const{
    return m_version_labels_isSet;
}

bool OAIComposeEnvironmentsMessage::is_version_labels_Valid() const{
    return m_version_labels_isValid;
}

bool OAIComposeEnvironmentsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComposeEnvironmentsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
