/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentInfoDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentInfoDescription::OAIEnvironmentInfoDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentInfoDescription::OAIEnvironmentInfoDescription() {
    this->initializeModel();
}

OAIEnvironmentInfoDescription::~OAIEnvironmentInfoDescription() {}

void OAIEnvironmentInfoDescription::initializeModel() {

    m_info_type_isSet = false;
    m_info_type_isValid = false;

    m_ec2_instance_id_isSet = false;
    m_ec2_instance_id_isValid = false;

    m_sample_timestamp_isSet = false;
    m_sample_timestamp_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIEnvironmentInfoDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentInfoDescription::fromJsonObject(QJsonObject json) {

    m_info_type_isValid = ::OpenAPI::fromJsonValue(m_info_type, json[QString("InfoType")]);
    m_info_type_isSet = !json[QString("InfoType")].isNull() && m_info_type_isValid;

    m_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_id, json[QString("Ec2InstanceId")]);
    m_ec2_instance_id_isSet = !json[QString("Ec2InstanceId")].isNull() && m_ec2_instance_id_isValid;

    m_sample_timestamp_isValid = ::OpenAPI::fromJsonValue(m_sample_timestamp, json[QString("SampleTimestamp")]);
    m_sample_timestamp_isSet = !json[QString("SampleTimestamp")].isNull() && m_sample_timestamp_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIEnvironmentInfoDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentInfoDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_info_type.isSet()) {
        obj.insert(QString("InfoType"), ::OpenAPI::toJsonValue(m_info_type));
    }
    if (m_ec2_instance_id_isSet) {
        obj.insert(QString("Ec2InstanceId"), ::OpenAPI::toJsonValue(m_ec2_instance_id));
    }
    if (m_sample_timestamp_isSet) {
        obj.insert(QString("SampleTimestamp"), ::OpenAPI::toJsonValue(m_sample_timestamp));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIEnvironmentInfoType OAIEnvironmentInfoDescription::getInfoType() const {
    return m_info_type;
}
void OAIEnvironmentInfoDescription::setInfoType(const OAIEnvironmentInfoType &info_type) {
    m_info_type = info_type;
    m_info_type_isSet = true;
}

bool OAIEnvironmentInfoDescription::is_info_type_Set() const{
    return m_info_type_isSet;
}

bool OAIEnvironmentInfoDescription::is_info_type_Valid() const{
    return m_info_type_isValid;
}

QString OAIEnvironmentInfoDescription::getEc2InstanceId() const {
    return m_ec2_instance_id;
}
void OAIEnvironmentInfoDescription::setEc2InstanceId(const QString &ec2_instance_id) {
    m_ec2_instance_id = ec2_instance_id;
    m_ec2_instance_id_isSet = true;
}

bool OAIEnvironmentInfoDescription::is_ec2_instance_id_Set() const{
    return m_ec2_instance_id_isSet;
}

bool OAIEnvironmentInfoDescription::is_ec2_instance_id_Valid() const{
    return m_ec2_instance_id_isValid;
}

QDateTime OAIEnvironmentInfoDescription::getSampleTimestamp() const {
    return m_sample_timestamp;
}
void OAIEnvironmentInfoDescription::setSampleTimestamp(const QDateTime &sample_timestamp) {
    m_sample_timestamp = sample_timestamp;
    m_sample_timestamp_isSet = true;
}

bool OAIEnvironmentInfoDescription::is_sample_timestamp_Set() const{
    return m_sample_timestamp_isSet;
}

bool OAIEnvironmentInfoDescription::is_sample_timestamp_Valid() const{
    return m_sample_timestamp_isValid;
}

QString OAIEnvironmentInfoDescription::getMessage() const {
    return m_message;
}
void OAIEnvironmentInfoDescription::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEnvironmentInfoDescription::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEnvironmentInfoDescription::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIEnvironmentInfoDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentInfoDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
