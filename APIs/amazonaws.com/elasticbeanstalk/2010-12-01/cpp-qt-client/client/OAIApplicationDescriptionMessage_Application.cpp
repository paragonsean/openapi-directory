/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationDescriptionMessage_Application.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationDescriptionMessage_Application::OAIApplicationDescriptionMessage_Application(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationDescriptionMessage_Application::OAIApplicationDescriptionMessage_Application() {
    this->initializeModel();
}

OAIApplicationDescriptionMessage_Application::~OAIApplicationDescriptionMessage_Application() {}

void OAIApplicationDescriptionMessage_Application::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;

    m_configuration_templates_isSet = false;
    m_configuration_templates_isValid = false;

    m_resource_lifecycle_config_isSet = false;
    m_resource_lifecycle_config_isValid = false;
}

void OAIApplicationDescriptionMessage_Application::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationDescriptionMessage_Application::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationArn")]);
    m_application_arn_isSet = !json[QString("ApplicationArn")].isNull() && m_application_arn_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("Versions")]);
    m_versions_isSet = !json[QString("Versions")].isNull() && m_versions_isValid;

    m_configuration_templates_isValid = ::OpenAPI::fromJsonValue(m_configuration_templates, json[QString("ConfigurationTemplates")]);
    m_configuration_templates_isSet = !json[QString("ConfigurationTemplates")].isNull() && m_configuration_templates_isValid;

    m_resource_lifecycle_config_isValid = ::OpenAPI::fromJsonValue(m_resource_lifecycle_config, json[QString("ResourceLifecycleConfig")]);
    m_resource_lifecycle_config_isSet = !json[QString("ResourceLifecycleConfig")].isNull() && m_resource_lifecycle_config_isValid;
}

QString OAIApplicationDescriptionMessage_Application::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationDescriptionMessage_Application::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationArn"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_versions.isSet()) {
        obj.insert(QString("Versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    if (m_configuration_templates.isSet()) {
        obj.insert(QString("ConfigurationTemplates"), ::OpenAPI::toJsonValue(m_configuration_templates));
    }
    if (m_resource_lifecycle_config.isSet()) {
        obj.insert(QString("ResourceLifecycleConfig"), ::OpenAPI::toJsonValue(m_resource_lifecycle_config));
    }
    return obj;
}

QString OAIApplicationDescriptionMessage_Application::getApplicationArn() const {
    return m_application_arn;
}
void OAIApplicationDescriptionMessage_Application::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

QString OAIApplicationDescriptionMessage_Application::getApplicationName() const {
    return m_application_name;
}
void OAIApplicationDescriptionMessage_Application::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIApplicationDescriptionMessage_Application::getDescription() const {
    return m_description;
}
void OAIApplicationDescriptionMessage_Application::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIApplicationDescriptionMessage_Application::getDateCreated() const {
    return m_date_created;
}
void OAIApplicationDescriptionMessage_Application::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIApplicationDescriptionMessage_Application::getDateUpdated() const {
    return m_date_updated;
}
void OAIApplicationDescriptionMessage_Application::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QList OAIApplicationDescriptionMessage_Application::getVersions() const {
    return m_versions;
}
void OAIApplicationDescriptionMessage_Application::setVersions(const QList &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_versions_Valid() const{
    return m_versions_isValid;
}

QList OAIApplicationDescriptionMessage_Application::getConfigurationTemplates() const {
    return m_configuration_templates;
}
void OAIApplicationDescriptionMessage_Application::setConfigurationTemplates(const QList &configuration_templates) {
    m_configuration_templates = configuration_templates;
    m_configuration_templates_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_configuration_templates_Set() const{
    return m_configuration_templates_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_configuration_templates_Valid() const{
    return m_configuration_templates_isValid;
}

OAIApplicationDescription_ResourceLifecycleConfig OAIApplicationDescriptionMessage_Application::getResourceLifecycleConfig() const {
    return m_resource_lifecycle_config;
}
void OAIApplicationDescriptionMessage_Application::setResourceLifecycleConfig(const OAIApplicationDescription_ResourceLifecycleConfig &resource_lifecycle_config) {
    m_resource_lifecycle_config = resource_lifecycle_config;
    m_resource_lifecycle_config_isSet = true;
}

bool OAIApplicationDescriptionMessage_Application::is_resource_lifecycle_config_Set() const{
    return m_resource_lifecycle_config_isSet;
}

bool OAIApplicationDescriptionMessage_Application::is_resource_lifecycle_config_Valid() const{
    return m_resource_lifecycle_config_isValid;
}

bool OAIApplicationDescriptionMessage_Application::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_lifecycle_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationDescriptionMessage_Application::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
