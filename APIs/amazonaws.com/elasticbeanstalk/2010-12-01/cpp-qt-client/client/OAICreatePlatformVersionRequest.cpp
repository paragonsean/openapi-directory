/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePlatformVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePlatformVersionRequest::OAICreatePlatformVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePlatformVersionRequest::OAICreatePlatformVersionRequest() {
    this->initializeModel();
}

OAICreatePlatformVersionRequest::~OAICreatePlatformVersionRequest() {}

void OAICreatePlatformVersionRequest::initializeModel() {

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_platform_definition_bundle_isSet = false;
    m_platform_definition_bundle_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_option_settings_isSet = false;
    m_option_settings_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreatePlatformVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePlatformVersionRequest::fromJsonObject(QJsonObject json) {

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("PlatformName")]);
    m_platform_name_isSet = !json[QString("PlatformName")].isNull() && m_platform_name_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("PlatformVersion")]);
    m_platform_version_isSet = !json[QString("PlatformVersion")].isNull() && m_platform_version_isValid;

    m_platform_definition_bundle_isValid = ::OpenAPI::fromJsonValue(m_platform_definition_bundle, json[QString("PlatformDefinitionBundle")]);
    m_platform_definition_bundle_isSet = !json[QString("PlatformDefinitionBundle")].isNull() && m_platform_definition_bundle_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_option_settings_isValid = ::OpenAPI::fromJsonValue(m_option_settings, json[QString("OptionSettings")]);
    m_option_settings_isSet = !json[QString("OptionSettings")].isNull() && m_option_settings_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreatePlatformVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePlatformVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_name_isSet) {
        obj.insert(QString("PlatformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("PlatformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_platform_definition_bundle.isSet()) {
        obj.insert(QString("PlatformDefinitionBundle"), ::OpenAPI::toJsonValue(m_platform_definition_bundle));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_option_settings.isSet()) {
        obj.insert(QString("OptionSettings"), ::OpenAPI::toJsonValue(m_option_settings));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreatePlatformVersionRequest::getPlatformName() const {
    return m_platform_name;
}
void OAICreatePlatformVersionRequest::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAICreatePlatformVersionRequest::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAICreatePlatformVersionRequest::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAICreatePlatformVersionRequest::getPlatformVersion() const {
    return m_platform_version;
}
void OAICreatePlatformVersionRequest::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAICreatePlatformVersionRequest::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAICreatePlatformVersionRequest::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

OAICreatePlatformVersionRequest_PlatformDefinitionBundle OAICreatePlatformVersionRequest::getPlatformDefinitionBundle() const {
    return m_platform_definition_bundle;
}
void OAICreatePlatformVersionRequest::setPlatformDefinitionBundle(const OAICreatePlatformVersionRequest_PlatformDefinitionBundle &platform_definition_bundle) {
    m_platform_definition_bundle = platform_definition_bundle;
    m_platform_definition_bundle_isSet = true;
}

bool OAICreatePlatformVersionRequest::is_platform_definition_bundle_Set() const{
    return m_platform_definition_bundle_isSet;
}

bool OAICreatePlatformVersionRequest::is_platform_definition_bundle_Valid() const{
    return m_platform_definition_bundle_isValid;
}

QString OAICreatePlatformVersionRequest::getEnvironmentName() const {
    return m_environment_name;
}
void OAICreatePlatformVersionRequest::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAICreatePlatformVersionRequest::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAICreatePlatformVersionRequest::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QList OAICreatePlatformVersionRequest::getOptionSettings() const {
    return m_option_settings;
}
void OAICreatePlatformVersionRequest::setOptionSettings(const QList &option_settings) {
    m_option_settings = option_settings;
    m_option_settings_isSet = true;
}

bool OAICreatePlatformVersionRequest::is_option_settings_Set() const{
    return m_option_settings_isSet;
}

bool OAICreatePlatformVersionRequest::is_option_settings_Valid() const{
    return m_option_settings_isValid;
}

QList OAICreatePlatformVersionRequest::getTags() const {
    return m_tags;
}
void OAICreatePlatformVersionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePlatformVersionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePlatformVersionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreatePlatformVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_definition_bundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePlatformVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_name_isValid && m_platform_version_isValid && m_platform_definition_bundle_isValid && true;
}

} // namespace OpenAPI
