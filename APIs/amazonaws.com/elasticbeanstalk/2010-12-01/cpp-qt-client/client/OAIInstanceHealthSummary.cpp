/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceHealthSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceHealthSummary::OAIInstanceHealthSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceHealthSummary::OAIInstanceHealthSummary() {
    this->initializeModel();
}

OAIInstanceHealthSummary::~OAIInstanceHealthSummary() {}

void OAIInstanceHealthSummary::initializeModel() {

    m_no_data_isSet = false;
    m_no_data_isValid = false;

    m_unknown_isSet = false;
    m_unknown_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;

    m_degraded_isSet = false;
    m_degraded_isValid = false;

    m_severe_isSet = false;
    m_severe_isValid = false;
}

void OAIInstanceHealthSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceHealthSummary::fromJsonObject(QJsonObject json) {

    m_no_data_isValid = ::OpenAPI::fromJsonValue(m_no_data, json[QString("NoData")]);
    m_no_data_isSet = !json[QString("NoData")].isNull() && m_no_data_isValid;

    m_unknown_isValid = ::OpenAPI::fromJsonValue(m_unknown, json[QString("Unknown")]);
    m_unknown_isSet = !json[QString("Unknown")].isNull() && m_unknown_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("Pending")]);
    m_pending_isSet = !json[QString("Pending")].isNull() && m_pending_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("Ok")]);
    m_ok_isSet = !json[QString("Ok")].isNull() && m_ok_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("Info")]);
    m_info_isSet = !json[QString("Info")].isNull() && m_info_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("Warning")]);
    m_warning_isSet = !json[QString("Warning")].isNull() && m_warning_isValid;

    m_degraded_isValid = ::OpenAPI::fromJsonValue(m_degraded, json[QString("Degraded")]);
    m_degraded_isSet = !json[QString("Degraded")].isNull() && m_degraded_isValid;

    m_severe_isValid = ::OpenAPI::fromJsonValue(m_severe, json[QString("Severe")]);
    m_severe_isSet = !json[QString("Severe")].isNull() && m_severe_isValid;
}

QString OAIInstanceHealthSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceHealthSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_no_data_isSet) {
        obj.insert(QString("NoData"), ::OpenAPI::toJsonValue(m_no_data));
    }
    if (m_unknown_isSet) {
        obj.insert(QString("Unknown"), ::OpenAPI::toJsonValue(m_unknown));
    }
    if (m_pending_isSet) {
        obj.insert(QString("Pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_ok_isSet) {
        obj.insert(QString("Ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_info_isSet) {
        obj.insert(QString("Info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_warning_isSet) {
        obj.insert(QString("Warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    if (m_degraded_isSet) {
        obj.insert(QString("Degraded"), ::OpenAPI::toJsonValue(m_degraded));
    }
    if (m_severe_isSet) {
        obj.insert(QString("Severe"), ::OpenAPI::toJsonValue(m_severe));
    }
    return obj;
}

qint32 OAIInstanceHealthSummary::getNoData() const {
    return m_no_data;
}
void OAIInstanceHealthSummary::setNoData(const qint32 &no_data) {
    m_no_data = no_data;
    m_no_data_isSet = true;
}

bool OAIInstanceHealthSummary::is_no_data_Set() const{
    return m_no_data_isSet;
}

bool OAIInstanceHealthSummary::is_no_data_Valid() const{
    return m_no_data_isValid;
}

qint32 OAIInstanceHealthSummary::getUnknown() const {
    return m_unknown;
}
void OAIInstanceHealthSummary::setUnknown(const qint32 &unknown) {
    m_unknown = unknown;
    m_unknown_isSet = true;
}

bool OAIInstanceHealthSummary::is_unknown_Set() const{
    return m_unknown_isSet;
}

bool OAIInstanceHealthSummary::is_unknown_Valid() const{
    return m_unknown_isValid;
}

qint32 OAIInstanceHealthSummary::getPending() const {
    return m_pending;
}
void OAIInstanceHealthSummary::setPending(const qint32 &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIInstanceHealthSummary::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIInstanceHealthSummary::is_pending_Valid() const{
    return m_pending_isValid;
}

qint32 OAIInstanceHealthSummary::getOk() const {
    return m_ok;
}
void OAIInstanceHealthSummary::setOk(const qint32 &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIInstanceHealthSummary::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIInstanceHealthSummary::is_ok_Valid() const{
    return m_ok_isValid;
}

qint32 OAIInstanceHealthSummary::getInfo() const {
    return m_info;
}
void OAIInstanceHealthSummary::setInfo(const qint32 &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIInstanceHealthSummary::is_info_Set() const{
    return m_info_isSet;
}

bool OAIInstanceHealthSummary::is_info_Valid() const{
    return m_info_isValid;
}

qint32 OAIInstanceHealthSummary::getWarning() const {
    return m_warning;
}
void OAIInstanceHealthSummary::setWarning(const qint32 &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAIInstanceHealthSummary::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAIInstanceHealthSummary::is_warning_Valid() const{
    return m_warning_isValid;
}

qint32 OAIInstanceHealthSummary::getDegraded() const {
    return m_degraded;
}
void OAIInstanceHealthSummary::setDegraded(const qint32 &degraded) {
    m_degraded = degraded;
    m_degraded_isSet = true;
}

bool OAIInstanceHealthSummary::is_degraded_Set() const{
    return m_degraded_isSet;
}

bool OAIInstanceHealthSummary::is_degraded_Valid() const{
    return m_degraded_isValid;
}

qint32 OAIInstanceHealthSummary::getSevere() const {
    return m_severe;
}
void OAIInstanceHealthSummary::setSevere(const qint32 &severe) {
    m_severe = severe;
    m_severe_isSet = true;
}

bool OAIInstanceHealthSummary::is_severe_Set() const{
    return m_severe_isSet;
}

bool OAIInstanceHealthSummary::is_severe_Valid() const{
    return m_severe_isValid;
}

bool OAIInstanceHealthSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_no_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_degraded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceHealthSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
