/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildConfiguration::OAIBuildConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildConfiguration::OAIBuildConfiguration() {
    this->initializeModel();
}

OAIBuildConfiguration::~OAIBuildConfiguration() {}

void OAIBuildConfiguration::initializeModel() {

    m_artifact_name_isSet = false;
    m_artifact_name_isValid = false;

    m_code_build_service_role_isSet = false;
    m_code_build_service_role_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_timeout_in_minutes_isSet = false;
    m_timeout_in_minutes_isValid = false;
}

void OAIBuildConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildConfiguration::fromJsonObject(QJsonObject json) {

    m_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_artifact_name, json[QString("ArtifactName")]);
    m_artifact_name_isSet = !json[QString("ArtifactName")].isNull() && m_artifact_name_isValid;

    m_code_build_service_role_isValid = ::OpenAPI::fromJsonValue(m_code_build_service_role, json[QString("CodeBuildServiceRole")]);
    m_code_build_service_role_isSet = !json[QString("CodeBuildServiceRole")].isNull() && m_code_build_service_role_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("ComputeType")]);
    m_compute_type_isSet = !json[QString("ComputeType")].isNull() && m_compute_type_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_minutes, json[QString("TimeoutInMinutes")]);
    m_timeout_in_minutes_isSet = !json[QString("TimeoutInMinutes")].isNull() && m_timeout_in_minutes_isValid;
}

QString OAIBuildConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_name_isSet) {
        obj.insert(QString("ArtifactName"), ::OpenAPI::toJsonValue(m_artifact_name));
    }
    if (m_code_build_service_role_isSet) {
        obj.insert(QString("CodeBuildServiceRole"), ::OpenAPI::toJsonValue(m_code_build_service_role));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("ComputeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_image_isSet) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_timeout_in_minutes_isSet) {
        obj.insert(QString("TimeoutInMinutes"), ::OpenAPI::toJsonValue(m_timeout_in_minutes));
    }
    return obj;
}

QString OAIBuildConfiguration::getArtifactName() const {
    return m_artifact_name;
}
void OAIBuildConfiguration::setArtifactName(const QString &artifact_name) {
    m_artifact_name = artifact_name;
    m_artifact_name_isSet = true;
}

bool OAIBuildConfiguration::is_artifact_name_Set() const{
    return m_artifact_name_isSet;
}

bool OAIBuildConfiguration::is_artifact_name_Valid() const{
    return m_artifact_name_isValid;
}

QString OAIBuildConfiguration::getCodeBuildServiceRole() const {
    return m_code_build_service_role;
}
void OAIBuildConfiguration::setCodeBuildServiceRole(const QString &code_build_service_role) {
    m_code_build_service_role = code_build_service_role;
    m_code_build_service_role_isSet = true;
}

bool OAIBuildConfiguration::is_code_build_service_role_Set() const{
    return m_code_build_service_role_isSet;
}

bool OAIBuildConfiguration::is_code_build_service_role_Valid() const{
    return m_code_build_service_role_isValid;
}

OAIComputeType OAIBuildConfiguration::getComputeType() const {
    return m_compute_type;
}
void OAIBuildConfiguration::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIBuildConfiguration::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIBuildConfiguration::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QString OAIBuildConfiguration::getImage() const {
    return m_image;
}
void OAIBuildConfiguration::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIBuildConfiguration::is_image_Set() const{
    return m_image_isSet;
}

bool OAIBuildConfiguration::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIBuildConfiguration::getTimeoutInMinutes() const {
    return m_timeout_in_minutes;
}
void OAIBuildConfiguration::setTimeoutInMinutes(const qint32 &timeout_in_minutes) {
    m_timeout_in_minutes = timeout_in_minutes;
    m_timeout_in_minutes_isSet = true;
}

bool OAIBuildConfiguration::is_timeout_in_minutes_Set() const{
    return m_timeout_in_minutes_isSet;
}

bool OAIBuildConfiguration::is_timeout_in_minutes_Valid() const{
    return m_timeout_in_minutes_isValid;
}

bool OAIBuildConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_build_service_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_build_service_role_isValid && m_image_isValid && true;
}

} // namespace OpenAPI
