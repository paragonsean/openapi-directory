/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAbortEnvironmentUpdateMessage.h"
#include "OAIApplicationDescriptionMessage.h"
#include "OAIApplicationDescriptionsMessage.h"
#include "OAIApplicationResourceLifecycleDescriptionMessage.h"
#include "OAIApplicationVersionDescriptionMessage.h"
#include "OAIApplicationVersionDescriptionsMessage.h"
#include "OAIApplyEnvironmentManagedActionRequest.h"
#include "OAIApplyEnvironmentManagedActionResult.h"
#include "OAIAssociateEnvironmentOperationsRoleMessage.h"
#include "OAICheckDNSAvailabilityMessage.h"
#include "OAICheckDNSAvailabilityResultMessage.h"
#include "OAIComposeEnvironmentsMessage.h"
#include "OAIConfigurationOptionSetting.h"
#include "OAIConfigurationOptionsDescription.h"
#include "OAIConfigurationSettingsDescription.h"
#include "OAIConfigurationSettingsDescriptions.h"
#include "OAIConfigurationSettingsValidationMessages.h"
#include "OAICreateApplicationMessage.h"
#include "OAICreateApplicationVersionMessage.h"
#include "OAICreateConfigurationTemplateMessage.h"
#include "OAICreateEnvironmentMessage.h"
#include "OAICreatePlatformVersionRequest.h"
#include "OAICreatePlatformVersionResult.h"
#include "OAICreateStorageLocationResultMessage.h"
#include "OAIDeleteApplicationMessage.h"
#include "OAIDeleteApplicationVersionMessage.h"
#include "OAIDeleteConfigurationTemplateMessage.h"
#include "OAIDeleteEnvironmentConfigurationMessage.h"
#include "OAIDeletePlatformVersionRequest.h"
#include "OAIDeletePlatformVersionResult.h"
#include "OAIDescribeAccountAttributesResult.h"
#include "OAIDescribeApplicationVersionsMessage.h"
#include "OAIDescribeApplicationsMessage.h"
#include "OAIDescribeConfigurationOptionsMessage.h"
#include "OAIDescribeConfigurationSettingsMessage.h"
#include "OAIDescribeEnvironmentHealthRequest.h"
#include "OAIDescribeEnvironmentHealthResult.h"
#include "OAIDescribeEnvironmentManagedActionHistoryRequest.h"
#include "OAIDescribeEnvironmentManagedActionHistoryResult.h"
#include "OAIDescribeEnvironmentManagedActionsRequest.h"
#include "OAIDescribeEnvironmentManagedActionsResult.h"
#include "OAIDescribeEnvironmentResourcesMessage.h"
#include "OAIDescribeEnvironmentsMessage.h"
#include "OAIDescribeEventsMessage.h"
#include "OAIDescribeInstancesHealthRequest.h"
#include "OAIDescribeInstancesHealthResult.h"
#include "OAIDescribePlatformVersionRequest.h"
#include "OAIDescribePlatformVersionResult.h"
#include "OAIDisassociateEnvironmentOperationsRoleMessage.h"
#include "OAIEnvironmentDescription.h"
#include "OAIEnvironmentDescriptionsMessage.h"
#include "OAIEnvironmentHealthAttribute.h"
#include "OAIEnvironmentResourceDescriptionsMessage.h"
#include "OAIEventDescriptionsMessage.h"
#include "OAIGET_CreateApplicationVersion_BuildConfiguration_parameter.h"
#include "OAIGET_CreateApplicationVersion_SourceBuildInformation_parameter.h"
#include "OAIGET_CreateApplicationVersion_SourceBundle_parameter.h"
#include "OAIGET_CreateApplication_ResourceLifecycleConfig_parameter.h"
#include "OAIGET_CreateConfigurationTemplate_SourceConfiguration_parameter.h"
#include "OAIGET_CreateEnvironment_Tier_parameter.h"
#include "OAIInstancesHealthAttribute.h"
#include "OAIListAvailableSolutionStacksResultMessage.h"
#include "OAIListPlatformBranchesRequest.h"
#include "OAIListPlatformBranchesResult.h"
#include "OAIListPlatformVersionsRequest.h"
#include "OAIListPlatformVersionsResult.h"
#include "OAIListTagsForResourceMessage.h"
#include "OAIOptionSpecification.h"
#include "OAIPlatformFilter.h"
#include "OAIRebuildEnvironmentMessage.h"
#include "OAIRequestEnvironmentInfoMessage.h"
#include "OAIResourceTagsDescriptionMessage.h"
#include "OAIRestartAppServerMessage.h"
#include "OAIRetrieveEnvironmentInfoMessage.h"
#include "OAIRetrieveEnvironmentInfoResultMessage.h"
#include "OAISearchFilter.h"
#include "OAISwapEnvironmentCNAMEsMessage.h"
#include "OAITag.h"
#include "OAITerminateEnvironmentMessage.h"
#include "OAIUpdateApplicationMessage.h"
#include "OAIUpdateApplicationResourceLifecycleMessage.h"
#include "OAIUpdateApplicationVersionMessage.h"
#include "OAIUpdateConfigurationTemplateMessage.h"
#include "OAIUpdateEnvironmentMessage.h"
#include "OAIUpdateTagsForResourceMessage.h"
#include "OAIValidateConfigurationSettingsMessage.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETAbortEnvironmentUpdate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  environment_id QString [optional]
    */
    virtual void gETApplyEnvironmentManagedAction(const QString &action_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  environment_name QString [required]
    * @param[in]  operations_role QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAssociateEnvironmentOperationsRole(const QString &environment_name, const QString &operations_role, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cname_prefix QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCheckDNSAvailability(const QString &cname_prefix, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_name QString [optional]
    * @param[in]  group_name QString [optional]
    * @param[in]  version_labels QList<QString> [optional]
    */
    virtual void gETComposeEnvironments(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &version_labels = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  resource_lifecycle_config OAIGET_CreateApplication_ResourceLifecycleConfig_parameter [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreateApplication(const QString &application_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateApplication_ResourceLifecycleConfig_parameter> &resource_lifecycle_config = ::OpenAPI::OptionalParam<OAIGET_CreateApplication_ResourceLifecycleConfig_parameter>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  version_label QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  source_build_information OAIGET_CreateApplicationVersion_SourceBuildInformation_parameter [optional]
    * @param[in]  source_bundle OAIGET_CreateApplicationVersion_SourceBundle_parameter [optional]
    * @param[in]  build_configuration OAIGET_CreateApplicationVersion_BuildConfiguration_parameter [optional]
    * @param[in]  auto_create_application bool [optional]
    * @param[in]  process bool [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreateApplicationVersion(const QString &application_name, const QString &version_label, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateApplicationVersion_SourceBuildInformation_parameter> &source_build_information = ::OpenAPI::OptionalParam<OAIGET_CreateApplicationVersion_SourceBuildInformation_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_CreateApplicationVersion_SourceBundle_parameter> &source_bundle = ::OpenAPI::OptionalParam<OAIGET_CreateApplicationVersion_SourceBundle_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_CreateApplicationVersion_BuildConfiguration_parameter> &build_configuration = ::OpenAPI::OptionalParam<OAIGET_CreateApplicationVersion_BuildConfiguration_parameter>(), const ::OpenAPI::OptionalParam<bool> &auto_create_application = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &process = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  solution_stack_name QString [optional]
    * @param[in]  platform_arn QString [optional]
    * @param[in]  source_configuration OAIGET_CreateConfigurationTemplate_SourceConfiguration_parameter [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  option_settings QList<OAIConfigurationOptionSetting> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreateConfigurationTemplate(const QString &application_name, const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &solution_stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateConfigurationTemplate_SourceConfiguration_parameter> &source_configuration = ::OpenAPI::OptionalParam<OAIGET_CreateConfigurationTemplate_SourceConfiguration_parameter>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>> &option_settings = ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  group_name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cname_prefix QString [optional]
    * @param[in]  tier OAIGET_CreateEnvironment_Tier_parameter [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  version_label QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  solution_stack_name QString [optional]
    * @param[in]  platform_arn QString [optional]
    * @param[in]  option_settings QList<OAIConfigurationOptionSetting> [optional]
    * @param[in]  options_to_remove QList<OAIOptionSpecification> [optional]
    * @param[in]  operations_role QString [optional]
    */
    virtual void gETCreateEnvironment(const QString &application_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cname_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateEnvironment_Tier_parameter> &tier = ::OpenAPI::OptionalParam<OAIGET_CreateEnvironment_Tier_parameter>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &version_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &solution_stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>> &option_settings = ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>>(), const ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>> &options_to_remove = ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>>(), const ::OpenAPI::OptionalParam<QString> &operations_role = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform_name QString [required]
    * @param[in]  platform_version QString [required]
    * @param[in]  platform_definition_bundle OAIGET_CreateApplicationVersion_SourceBundle_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  option_settings QList<OAIConfigurationOptionSetting> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    */
    virtual void gETCreatePlatformVersion(const QString &platform_name, const QString &platform_version, const OAIGET_CreateApplicationVersion_SourceBundle_parameter &platform_definition_bundle, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>> &option_settings = ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateStorageLocation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  terminate_env_by_force bool [optional]
    */
    virtual void gETDeleteApplication(const QString &application_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &terminate_env_by_force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  version_label QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  delete_source_bundle bool [optional]
    */
    virtual void gETDeleteApplicationVersion(const QString &application_name, const QString &version_label, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &delete_source_bundle = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteConfigurationTemplate(const QString &application_name, const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteEnvironmentConfiguration(const QString &application_name, const QString &environment_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  platform_arn QString [optional]
    */
    virtual void gETDeletePlatformVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeAccountAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_name QString [optional]
    * @param[in]  version_labels QList<QString> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeApplicationVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &version_labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_names QList<QString> [optional]
    */
    virtual void gETDescribeApplications(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &application_names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_name QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  solution_stack_name QString [optional]
    * @param[in]  platform_arn QString [optional]
    * @param[in]  options QList<OAIOptionSpecification> [optional]
    */
    virtual void gETDescribeConfigurationOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &solution_stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>> &options = ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETDescribeConfigurationSettings(const QString &application_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  attribute_names QList<OAIEnvironmentHealthAttribute> [optional]
    */
    virtual void gETDescribeEnvironmentHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIEnvironmentHealthAttribute>> &attribute_names = ::OpenAPI::OptionalParam<QList<OAIEnvironmentHealthAttribute>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_items qint32 [optional]
    */
    virtual void gETDescribeEnvironmentManagedActionHistory(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_items = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  status QString [optional]
    */
    virtual void gETDescribeEnvironmentManagedActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETDescribeEnvironmentResources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_name QString [optional]
    * @param[in]  version_label QString [optional]
    * @param[in]  environment_ids QList<QString> [optional]
    * @param[in]  environment_names QList<QString> [optional]
    * @param[in]  include_deleted bool [optional]
    * @param[in]  included_deleted_back_to QDateTime [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeEnvironments(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &environment_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &environment_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &included_deleted_back_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_name QString [optional]
    * @param[in]  version_label QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  platform_arn QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  attribute_names QList<OAIInstancesHealthAttribute> [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeInstancesHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIInstancesHealthAttribute>> &attribute_names = ::OpenAPI::OptionalParam<QList<OAIInstancesHealthAttribute>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  platform_arn QString [optional]
    */
    virtual void gETDescribePlatformVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  environment_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDisassociateEnvironmentOperationsRole(const QString &environment_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListAvailableSolutionStacks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  filters QList<OAISearchFilter> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListPlatformBranches(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAISearchFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAISearchFilter>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  filters QList<OAIPlatformFilter> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListPlatformVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIPlatformFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIPlatformFilter>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListTagsForResource(const QString &resource_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETRebuildEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  info_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETRequestEnvironmentInfo(const QString &info_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETRestartAppServer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  info_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETRetrieveEnvironmentInfo(const QString &info_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_environment_id QString [optional]
    * @param[in]  source_environment_name QString [optional]
    * @param[in]  destination_environment_id QString [optional]
    * @param[in]  destination_environment_name QString [optional]
    */
    virtual void gETSwapEnvironmentCNAMEs(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  terminate_resources bool [optional]
    * @param[in]  force_terminate bool [optional]
    */
    virtual void gETTerminateEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &terminate_resources = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &force_terminate = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void gETUpdateApplication(const QString &application_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  resource_lifecycle_config OAIGET_CreateApplication_ResourceLifecycleConfig_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateApplicationResourceLifecycle(const QString &application_name, const OAIGET_CreateApplication_ResourceLifecycleConfig_parameter &resource_lifecycle_config, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  version_label QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void gETUpdateApplicationVersion(const QString &application_name, const QString &version_label, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  option_settings QList<OAIConfigurationOptionSetting> [optional]
    * @param[in]  options_to_remove QList<OAIOptionSpecification> [optional]
    */
    virtual void gETUpdateConfigurationTemplate(const QString &application_name, const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>> &option_settings = ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>>(), const ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>> &options_to_remove = ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  application_name QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  environment_name QString [optional]
    * @param[in]  group_name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  tier OAIGET_CreateEnvironment_Tier_parameter [optional]
    * @param[in]  version_label QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  solution_stack_name QString [optional]
    * @param[in]  platform_arn QString [optional]
    * @param[in]  option_settings QList<OAIConfigurationOptionSetting> [optional]
    * @param[in]  options_to_remove QList<OAIOptionSpecification> [optional]
    */
    virtual void gETUpdateEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateEnvironment_Tier_parameter> &tier = ::OpenAPI::OptionalParam<OAIGET_CreateEnvironment_Tier_parameter>(), const ::OpenAPI::OptionalParam<QString> &version_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &solution_stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>> &option_settings = ::OpenAPI::OptionalParam<QList<OAIConfigurationOptionSetting>>(), const ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>> &options_to_remove = ::OpenAPI::OptionalParam<QList<OAIOptionSpecification>>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags_to_add QList<OAITag> [optional]
    * @param[in]  tags_to_remove QList<QString> [optional]
    */
    virtual void gETUpdateTagsForResource(const QString &resource_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags_to_add = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags_to_remove = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  option_settings QList<OAIConfigurationOptionSetting> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  environment_name QString [optional]
    */
    virtual void gETValidateConfigurationSettings(const QString &application_name, const QList<OAIConfigurationOptionSetting> &option_settings, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_abort_environment_update_message OAIAbortEnvironmentUpdateMessage [optional]
    */
    virtual void pOSTAbortEnvironmentUpdate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAbortEnvironmentUpdateMessage> &oai_abort_environment_update_message = ::OpenAPI::OptionalParam<OAIAbortEnvironmentUpdateMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_apply_environment_managed_action_request OAIApplyEnvironmentManagedActionRequest [optional]
    */
    virtual void pOSTApplyEnvironmentManagedAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApplyEnvironmentManagedActionRequest> &oai_apply_environment_managed_action_request = ::OpenAPI::OptionalParam<OAIApplyEnvironmentManagedActionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_associate_environment_operations_role_message OAIAssociateEnvironmentOperationsRoleMessage [optional]
    */
    virtual void pOSTAssociateEnvironmentOperationsRole(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssociateEnvironmentOperationsRoleMessage> &oai_associate_environment_operations_role_message = ::OpenAPI::OptionalParam<OAIAssociateEnvironmentOperationsRoleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_check_dns_availability_message OAICheckDNSAvailabilityMessage [optional]
    */
    virtual void pOSTCheckDNSAvailability(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICheckDNSAvailabilityMessage> &oai_check_dns_availability_message = ::OpenAPI::OptionalParam<OAICheckDNSAvailabilityMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_compose_environments_message OAIComposeEnvironmentsMessage [optional]
    */
    virtual void pOSTComposeEnvironments(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIComposeEnvironmentsMessage> &oai_compose_environments_message = ::OpenAPI::OptionalParam<OAIComposeEnvironmentsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_application_message OAICreateApplicationMessage [optional]
    */
    virtual void pOSTCreateApplication(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateApplicationMessage> &oai_create_application_message = ::OpenAPI::OptionalParam<OAICreateApplicationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_application_version_message OAICreateApplicationVersionMessage [optional]
    */
    virtual void pOSTCreateApplicationVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateApplicationVersionMessage> &oai_create_application_version_message = ::OpenAPI::OptionalParam<OAICreateApplicationVersionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_configuration_template_message OAICreateConfigurationTemplateMessage [optional]
    */
    virtual void pOSTCreateConfigurationTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateConfigurationTemplateMessage> &oai_create_configuration_template_message = ::OpenAPI::OptionalParam<OAICreateConfigurationTemplateMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_environment_message OAICreateEnvironmentMessage [optional]
    */
    virtual void pOSTCreateEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateEnvironmentMessage> &oai_create_environment_message = ::OpenAPI::OptionalParam<OAICreateEnvironmentMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_platform_version_request OAICreatePlatformVersionRequest [optional]
    */
    virtual void pOSTCreatePlatformVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreatePlatformVersionRequest> &oai_create_platform_version_request = ::OpenAPI::OptionalParam<OAICreatePlatformVersionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTCreateStorageLocation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_application_message OAIDeleteApplicationMessage [optional]
    */
    virtual void pOSTDeleteApplication(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteApplicationMessage> &oai_delete_application_message = ::OpenAPI::OptionalParam<OAIDeleteApplicationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_application_version_message OAIDeleteApplicationVersionMessage [optional]
    */
    virtual void pOSTDeleteApplicationVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteApplicationVersionMessage> &oai_delete_application_version_message = ::OpenAPI::OptionalParam<OAIDeleteApplicationVersionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_configuration_template_message OAIDeleteConfigurationTemplateMessage [optional]
    */
    virtual void pOSTDeleteConfigurationTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteConfigurationTemplateMessage> &oai_delete_configuration_template_message = ::OpenAPI::OptionalParam<OAIDeleteConfigurationTemplateMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_environment_configuration_message OAIDeleteEnvironmentConfigurationMessage [optional]
    */
    virtual void pOSTDeleteEnvironmentConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteEnvironmentConfigurationMessage> &oai_delete_environment_configuration_message = ::OpenAPI::OptionalParam<OAIDeleteEnvironmentConfigurationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_platform_version_request OAIDeletePlatformVersionRequest [optional]
    */
    virtual void pOSTDeletePlatformVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeletePlatformVersionRequest> &oai_delete_platform_version_request = ::OpenAPI::OptionalParam<OAIDeletePlatformVersionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTDescribeAccountAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_application_versions_message OAIDescribeApplicationVersionsMessage [optional]
    */
    virtual void pOSTDescribeApplicationVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeApplicationVersionsMessage> &oai_describe_application_versions_message = ::OpenAPI::OptionalParam<OAIDescribeApplicationVersionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_applications_message OAIDescribeApplicationsMessage [optional]
    */
    virtual void pOSTDescribeApplications(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeApplicationsMessage> &oai_describe_applications_message = ::OpenAPI::OptionalParam<OAIDescribeApplicationsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_configuration_options_message OAIDescribeConfigurationOptionsMessage [optional]
    */
    virtual void pOSTDescribeConfigurationOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeConfigurationOptionsMessage> &oai_describe_configuration_options_message = ::OpenAPI::OptionalParam<OAIDescribeConfigurationOptionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_configuration_settings_message OAIDescribeConfigurationSettingsMessage [optional]
    */
    virtual void pOSTDescribeConfigurationSettings(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeConfigurationSettingsMessage> &oai_describe_configuration_settings_message = ::OpenAPI::OptionalParam<OAIDescribeConfigurationSettingsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_environment_health_request OAIDescribeEnvironmentHealthRequest [optional]
    */
    virtual void pOSTDescribeEnvironmentHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEnvironmentHealthRequest> &oai_describe_environment_health_request = ::OpenAPI::OptionalParam<OAIDescribeEnvironmentHealthRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_environment_managed_action_history_request OAIDescribeEnvironmentManagedActionHistoryRequest [optional]
    */
    virtual void pOSTDescribeEnvironmentManagedActionHistory(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEnvironmentManagedActionHistoryRequest> &oai_describe_environment_managed_action_history_request = ::OpenAPI::OptionalParam<OAIDescribeEnvironmentManagedActionHistoryRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_environment_managed_actions_request OAIDescribeEnvironmentManagedActionsRequest [optional]
    */
    virtual void pOSTDescribeEnvironmentManagedActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEnvironmentManagedActionsRequest> &oai_describe_environment_managed_actions_request = ::OpenAPI::OptionalParam<OAIDescribeEnvironmentManagedActionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_environment_resources_message OAIDescribeEnvironmentResourcesMessage [optional]
    */
    virtual void pOSTDescribeEnvironmentResources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEnvironmentResourcesMessage> &oai_describe_environment_resources_message = ::OpenAPI::OptionalParam<OAIDescribeEnvironmentResourcesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_environments_message OAIDescribeEnvironmentsMessage [optional]
    */
    virtual void pOSTDescribeEnvironments(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEnvironmentsMessage> &oai_describe_environments_message = ::OpenAPI::OptionalParam<OAIDescribeEnvironmentsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_events_message OAIDescribeEventsMessage [optional]
    */
    virtual void pOSTDescribeEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventsMessage> &oai_describe_events_message = ::OpenAPI::OptionalParam<OAIDescribeEventsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_instances_health_request OAIDescribeInstancesHealthRequest [optional]
    */
    virtual void pOSTDescribeInstancesHealth(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeInstancesHealthRequest> &oai_describe_instances_health_request = ::OpenAPI::OptionalParam<OAIDescribeInstancesHealthRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_platform_version_request OAIDescribePlatformVersionRequest [optional]
    */
    virtual void pOSTDescribePlatformVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribePlatformVersionRequest> &oai_describe_platform_version_request = ::OpenAPI::OptionalParam<OAIDescribePlatformVersionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_disassociate_environment_operations_role_message OAIDisassociateEnvironmentOperationsRoleMessage [optional]
    */
    virtual void pOSTDisassociateEnvironmentOperationsRole(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDisassociateEnvironmentOperationsRoleMessage> &oai_disassociate_environment_operations_role_message = ::OpenAPI::OptionalParam<OAIDisassociateEnvironmentOperationsRoleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTListAvailableSolutionStacks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_platform_branches_request OAIListPlatformBranchesRequest [optional]
    */
    virtual void pOSTListPlatformBranches(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListPlatformBranchesRequest> &oai_list_platform_branches_request = ::OpenAPI::OptionalParam<OAIListPlatformBranchesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_platform_versions_request OAIListPlatformVersionsRequest [optional]
    */
    virtual void pOSTListPlatformVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListPlatformVersionsRequest> &oai_list_platform_versions_request = ::OpenAPI::OptionalParam<OAIListPlatformVersionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_tags_for_resource_message OAIListTagsForResourceMessage [optional]
    */
    virtual void pOSTListTagsForResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTagsForResourceMessage> &oai_list_tags_for_resource_message = ::OpenAPI::OptionalParam<OAIListTagsForResourceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_rebuild_environment_message OAIRebuildEnvironmentMessage [optional]
    */
    virtual void pOSTRebuildEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRebuildEnvironmentMessage> &oai_rebuild_environment_message = ::OpenAPI::OptionalParam<OAIRebuildEnvironmentMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_request_environment_info_message OAIRequestEnvironmentInfoMessage [optional]
    */
    virtual void pOSTRequestEnvironmentInfo(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRequestEnvironmentInfoMessage> &oai_request_environment_info_message = ::OpenAPI::OptionalParam<OAIRequestEnvironmentInfoMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_restart_app_server_message OAIRestartAppServerMessage [optional]
    */
    virtual void pOSTRestartAppServer(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRestartAppServerMessage> &oai_restart_app_server_message = ::OpenAPI::OptionalParam<OAIRestartAppServerMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_retrieve_environment_info_message OAIRetrieveEnvironmentInfoMessage [optional]
    */
    virtual void pOSTRetrieveEnvironmentInfo(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRetrieveEnvironmentInfoMessage> &oai_retrieve_environment_info_message = ::OpenAPI::OptionalParam<OAIRetrieveEnvironmentInfoMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_swap_environment_cnames_message OAISwapEnvironmentCNAMEsMessage [optional]
    */
    virtual void pOSTSwapEnvironmentCNAMEs(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISwapEnvironmentCNAMEsMessage> &oai_swap_environment_cnames_message = ::OpenAPI::OptionalParam<OAISwapEnvironmentCNAMEsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_terminate_environment_message OAITerminateEnvironmentMessage [optional]
    */
    virtual void pOSTTerminateEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITerminateEnvironmentMessage> &oai_terminate_environment_message = ::OpenAPI::OptionalParam<OAITerminateEnvironmentMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_application_message OAIUpdateApplicationMessage [optional]
    */
    virtual void pOSTUpdateApplication(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateApplicationMessage> &oai_update_application_message = ::OpenAPI::OptionalParam<OAIUpdateApplicationMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_application_resource_lifecycle_message OAIUpdateApplicationResourceLifecycleMessage [optional]
    */
    virtual void pOSTUpdateApplicationResourceLifecycle(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateApplicationResourceLifecycleMessage> &oai_update_application_resource_lifecycle_message = ::OpenAPI::OptionalParam<OAIUpdateApplicationResourceLifecycleMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_application_version_message OAIUpdateApplicationVersionMessage [optional]
    */
    virtual void pOSTUpdateApplicationVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateApplicationVersionMessage> &oai_update_application_version_message = ::OpenAPI::OptionalParam<OAIUpdateApplicationVersionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_configuration_template_message OAIUpdateConfigurationTemplateMessage [optional]
    */
    virtual void pOSTUpdateConfigurationTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConfigurationTemplateMessage> &oai_update_configuration_template_message = ::OpenAPI::OptionalParam<OAIUpdateConfigurationTemplateMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_environment_message OAIUpdateEnvironmentMessage [optional]
    */
    virtual void pOSTUpdateEnvironment(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateEnvironmentMessage> &oai_update_environment_message = ::OpenAPI::OptionalParam<OAIUpdateEnvironmentMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_tags_for_resource_message OAIUpdateTagsForResourceMessage [optional]
    */
    virtual void pOSTUpdateTagsForResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateTagsForResourceMessage> &oai_update_tags_for_resource_message = ::OpenAPI::OptionalParam<OAIUpdateTagsForResourceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_validate_configuration_settings_message OAIValidateConfigurationSettingsMessage [optional]
    */
    virtual void pOSTValidateConfigurationSettings(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIValidateConfigurationSettingsMessage> &oai_validate_configuration_settings_message = ::OpenAPI::OptionalParam<OAIValidateConfigurationSettingsMessage>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAbortEnvironmentUpdateCallback(OAIHttpRequestWorker *worker);
    void gETApplyEnvironmentManagedActionCallback(OAIHttpRequestWorker *worker);
    void gETAssociateEnvironmentOperationsRoleCallback(OAIHttpRequestWorker *worker);
    void gETCheckDNSAvailabilityCallback(OAIHttpRequestWorker *worker);
    void gETComposeEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void gETCreateApplicationCallback(OAIHttpRequestWorker *worker);
    void gETCreateApplicationVersionCallback(OAIHttpRequestWorker *worker);
    void gETCreateConfigurationTemplateCallback(OAIHttpRequestWorker *worker);
    void gETCreateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void gETCreatePlatformVersionCallback(OAIHttpRequestWorker *worker);
    void gETCreateStorageLocationCallback(OAIHttpRequestWorker *worker);
    void gETDeleteApplicationCallback(OAIHttpRequestWorker *worker);
    void gETDeleteApplicationVersionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteConfigurationTemplateCallback(OAIHttpRequestWorker *worker);
    void gETDeleteEnvironmentConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETDeletePlatformVersionCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAccountAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeApplicationVersionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeApplicationsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeConfigurationOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeConfigurationSettingsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEnvironmentHealthCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEnvironmentManagedActionHistoryCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEnvironmentManagedActionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEnvironmentResourcesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeInstancesHealthCallback(OAIHttpRequestWorker *worker);
    void gETDescribePlatformVersionCallback(OAIHttpRequestWorker *worker);
    void gETDisassociateEnvironmentOperationsRoleCallback(OAIHttpRequestWorker *worker);
    void gETListAvailableSolutionStacksCallback(OAIHttpRequestWorker *worker);
    void gETListPlatformBranchesCallback(OAIHttpRequestWorker *worker);
    void gETListPlatformVersionsCallback(OAIHttpRequestWorker *worker);
    void gETListTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void gETRebuildEnvironmentCallback(OAIHttpRequestWorker *worker);
    void gETRequestEnvironmentInfoCallback(OAIHttpRequestWorker *worker);
    void gETRestartAppServerCallback(OAIHttpRequestWorker *worker);
    void gETRetrieveEnvironmentInfoCallback(OAIHttpRequestWorker *worker);
    void gETSwapEnvironmentCNAMEsCallback(OAIHttpRequestWorker *worker);
    void gETTerminateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void gETUpdateApplicationCallback(OAIHttpRequestWorker *worker);
    void gETUpdateApplicationResourceLifecycleCallback(OAIHttpRequestWorker *worker);
    void gETUpdateApplicationVersionCallback(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationTemplateCallback(OAIHttpRequestWorker *worker);
    void gETUpdateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void gETUpdateTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void gETValidateConfigurationSettingsCallback(OAIHttpRequestWorker *worker);
    void pOSTAbortEnvironmentUpdateCallback(OAIHttpRequestWorker *worker);
    void pOSTApplyEnvironmentManagedActionCallback(OAIHttpRequestWorker *worker);
    void pOSTAssociateEnvironmentOperationsRoleCallback(OAIHttpRequestWorker *worker);
    void pOSTCheckDNSAvailabilityCallback(OAIHttpRequestWorker *worker);
    void pOSTComposeEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateApplicationCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateApplicationVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateConfigurationTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void pOSTCreatePlatformVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateStorageLocationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteApplicationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteApplicationVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteConfigurationTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteEnvironmentConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeletePlatformVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeApplicationVersionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeApplicationsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeConfigurationOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeConfigurationSettingsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEnvironmentHealthCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEnvironmentManagedActionHistoryCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEnvironmentManagedActionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEnvironmentResourcesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeInstancesHealthCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribePlatformVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTDisassociateEnvironmentOperationsRoleCallback(OAIHttpRequestWorker *worker);
    void pOSTListAvailableSolutionStacksCallback(OAIHttpRequestWorker *worker);
    void pOSTListPlatformBranchesCallback(OAIHttpRequestWorker *worker);
    void pOSTListPlatformVersionsCallback(OAIHttpRequestWorker *worker);
    void pOSTListTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTRebuildEnvironmentCallback(OAIHttpRequestWorker *worker);
    void pOSTRequestEnvironmentInfoCallback(OAIHttpRequestWorker *worker);
    void pOSTRestartAppServerCallback(OAIHttpRequestWorker *worker);
    void pOSTRetrieveEnvironmentInfoCallback(OAIHttpRequestWorker *worker);
    void pOSTSwapEnvironmentCNAMEsCallback(OAIHttpRequestWorker *worker);
    void pOSTTerminateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateApplicationCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateApplicationResourceLifecycleCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateApplicationVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateEnvironmentCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTValidateConfigurationSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAbortEnvironmentUpdateSignal();
    void gETApplyEnvironmentManagedActionSignal(OAIApplyEnvironmentManagedActionResult summary);
    void gETAssociateEnvironmentOperationsRoleSignal();
    void gETCheckDNSAvailabilitySignal(OAICheckDNSAvailabilityResultMessage summary);
    void gETComposeEnvironmentsSignal(OAIEnvironmentDescriptionsMessage summary);
    void gETCreateApplicationSignal(OAIApplicationDescriptionMessage summary);
    void gETCreateApplicationVersionSignal(OAIApplicationVersionDescriptionMessage summary);
    void gETCreateConfigurationTemplateSignal(OAIConfigurationSettingsDescription summary);
    void gETCreateEnvironmentSignal(OAIEnvironmentDescription summary);
    void gETCreatePlatformVersionSignal(OAICreatePlatformVersionResult summary);
    void gETCreateStorageLocationSignal(OAICreateStorageLocationResultMessage summary);
    void gETDeleteApplicationSignal();
    void gETDeleteApplicationVersionSignal();
    void gETDeleteConfigurationTemplateSignal();
    void gETDeleteEnvironmentConfigurationSignal();
    void gETDeletePlatformVersionSignal(OAIDeletePlatformVersionResult summary);
    void gETDescribeAccountAttributesSignal(OAIDescribeAccountAttributesResult summary);
    void gETDescribeApplicationVersionsSignal(OAIApplicationVersionDescriptionsMessage summary);
    void gETDescribeApplicationsSignal(OAIApplicationDescriptionsMessage summary);
    void gETDescribeConfigurationOptionsSignal(OAIConfigurationOptionsDescription summary);
    void gETDescribeConfigurationSettingsSignal(OAIConfigurationSettingsDescriptions summary);
    void gETDescribeEnvironmentHealthSignal(OAIDescribeEnvironmentHealthResult summary);
    void gETDescribeEnvironmentManagedActionHistorySignal(OAIDescribeEnvironmentManagedActionHistoryResult summary);
    void gETDescribeEnvironmentManagedActionsSignal(OAIDescribeEnvironmentManagedActionsResult summary);
    void gETDescribeEnvironmentResourcesSignal(OAIEnvironmentResourceDescriptionsMessage summary);
    void gETDescribeEnvironmentsSignal(OAIEnvironmentDescriptionsMessage summary);
    void gETDescribeEventsSignal(OAIEventDescriptionsMessage summary);
    void gETDescribeInstancesHealthSignal(OAIDescribeInstancesHealthResult summary);
    void gETDescribePlatformVersionSignal(OAIDescribePlatformVersionResult summary);
    void gETDisassociateEnvironmentOperationsRoleSignal();
    void gETListAvailableSolutionStacksSignal(OAIListAvailableSolutionStacksResultMessage summary);
    void gETListPlatformBranchesSignal(OAIListPlatformBranchesResult summary);
    void gETListPlatformVersionsSignal(OAIListPlatformVersionsResult summary);
    void gETListTagsForResourceSignal(OAIResourceTagsDescriptionMessage summary);
    void gETRebuildEnvironmentSignal();
    void gETRequestEnvironmentInfoSignal();
    void gETRestartAppServerSignal();
    void gETRetrieveEnvironmentInfoSignal(OAIRetrieveEnvironmentInfoResultMessage summary);
    void gETSwapEnvironmentCNAMEsSignal();
    void gETTerminateEnvironmentSignal(OAIEnvironmentDescription summary);
    void gETUpdateApplicationSignal(OAIApplicationDescriptionMessage summary);
    void gETUpdateApplicationResourceLifecycleSignal(OAIApplicationResourceLifecycleDescriptionMessage summary);
    void gETUpdateApplicationVersionSignal(OAIApplicationVersionDescriptionMessage summary);
    void gETUpdateConfigurationTemplateSignal(OAIConfigurationSettingsDescription summary);
    void gETUpdateEnvironmentSignal(OAIEnvironmentDescription summary);
    void gETUpdateTagsForResourceSignal();
    void gETValidateConfigurationSettingsSignal(OAIConfigurationSettingsValidationMessages summary);
    void pOSTAbortEnvironmentUpdateSignal();
    void pOSTApplyEnvironmentManagedActionSignal(OAIApplyEnvironmentManagedActionResult summary);
    void pOSTAssociateEnvironmentOperationsRoleSignal();
    void pOSTCheckDNSAvailabilitySignal(OAICheckDNSAvailabilityResultMessage summary);
    void pOSTComposeEnvironmentsSignal(OAIEnvironmentDescriptionsMessage summary);
    void pOSTCreateApplicationSignal(OAIApplicationDescriptionMessage summary);
    void pOSTCreateApplicationVersionSignal(OAIApplicationVersionDescriptionMessage summary);
    void pOSTCreateConfigurationTemplateSignal(OAIConfigurationSettingsDescription summary);
    void pOSTCreateEnvironmentSignal(OAIEnvironmentDescription summary);
    void pOSTCreatePlatformVersionSignal(OAICreatePlatformVersionResult summary);
    void pOSTCreateStorageLocationSignal(OAICreateStorageLocationResultMessage summary);
    void pOSTDeleteApplicationSignal();
    void pOSTDeleteApplicationVersionSignal();
    void pOSTDeleteConfigurationTemplateSignal();
    void pOSTDeleteEnvironmentConfigurationSignal();
    void pOSTDeletePlatformVersionSignal(OAIDeletePlatformVersionResult summary);
    void pOSTDescribeAccountAttributesSignal(OAIDescribeAccountAttributesResult summary);
    void pOSTDescribeApplicationVersionsSignal(OAIApplicationVersionDescriptionsMessage summary);
    void pOSTDescribeApplicationsSignal(OAIApplicationDescriptionsMessage summary);
    void pOSTDescribeConfigurationOptionsSignal(OAIConfigurationOptionsDescription summary);
    void pOSTDescribeConfigurationSettingsSignal(OAIConfigurationSettingsDescriptions summary);
    void pOSTDescribeEnvironmentHealthSignal(OAIDescribeEnvironmentHealthResult summary);
    void pOSTDescribeEnvironmentManagedActionHistorySignal(OAIDescribeEnvironmentManagedActionHistoryResult summary);
    void pOSTDescribeEnvironmentManagedActionsSignal(OAIDescribeEnvironmentManagedActionsResult summary);
    void pOSTDescribeEnvironmentResourcesSignal(OAIEnvironmentResourceDescriptionsMessage summary);
    void pOSTDescribeEnvironmentsSignal(OAIEnvironmentDescriptionsMessage summary);
    void pOSTDescribeEventsSignal(OAIEventDescriptionsMessage summary);
    void pOSTDescribeInstancesHealthSignal(OAIDescribeInstancesHealthResult summary);
    void pOSTDescribePlatformVersionSignal(OAIDescribePlatformVersionResult summary);
    void pOSTDisassociateEnvironmentOperationsRoleSignal();
    void pOSTListAvailableSolutionStacksSignal(OAIListAvailableSolutionStacksResultMessage summary);
    void pOSTListPlatformBranchesSignal(OAIListPlatformBranchesResult summary);
    void pOSTListPlatformVersionsSignal(OAIListPlatformVersionsResult summary);
    void pOSTListTagsForResourceSignal(OAIResourceTagsDescriptionMessage summary);
    void pOSTRebuildEnvironmentSignal();
    void pOSTRequestEnvironmentInfoSignal();
    void pOSTRestartAppServerSignal();
    void pOSTRetrieveEnvironmentInfoSignal(OAIRetrieveEnvironmentInfoResultMessage summary);
    void pOSTSwapEnvironmentCNAMEsSignal();
    void pOSTTerminateEnvironmentSignal(OAIEnvironmentDescription summary);
    void pOSTUpdateApplicationSignal(OAIApplicationDescriptionMessage summary);
    void pOSTUpdateApplicationResourceLifecycleSignal(OAIApplicationResourceLifecycleDescriptionMessage summary);
    void pOSTUpdateApplicationVersionSignal(OAIApplicationVersionDescriptionMessage summary);
    void pOSTUpdateConfigurationTemplateSignal(OAIConfigurationSettingsDescription summary);
    void pOSTUpdateEnvironmentSignal(OAIEnvironmentDescription summary);
    void pOSTUpdateTagsForResourceSignal();
    void pOSTValidateConfigurationSettingsSignal(OAIConfigurationSettingsValidationMessages summary);


    void gETAbortEnvironmentUpdateSignalFull(OAIHttpRequestWorker *worker);
    void gETApplyEnvironmentManagedActionSignalFull(OAIHttpRequestWorker *worker, OAIApplyEnvironmentManagedActionResult summary);
    void gETAssociateEnvironmentOperationsRoleSignalFull(OAIHttpRequestWorker *worker);
    void gETCheckDNSAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckDNSAvailabilityResultMessage summary);
    void gETComposeEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescriptionsMessage summary);
    void gETCreateApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplicationDescriptionMessage summary);
    void gETCreateApplicationVersionSignalFull(OAIHttpRequestWorker *worker, OAIApplicationVersionDescriptionMessage summary);
    void gETCreateConfigurationTemplateSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsDescription summary);
    void gETCreateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescription summary);
    void gETCreatePlatformVersionSignalFull(OAIHttpRequestWorker *worker, OAICreatePlatformVersionResult summary);
    void gETCreateStorageLocationSignalFull(OAIHttpRequestWorker *worker, OAICreateStorageLocationResultMessage summary);
    void gETDeleteApplicationSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteApplicationVersionSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteConfigurationTemplateSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteEnvironmentConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void gETDeletePlatformVersionSignalFull(OAIHttpRequestWorker *worker, OAIDeletePlatformVersionResult summary);
    void gETDescribeAccountAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountAttributesResult summary);
    void gETDescribeApplicationVersionsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationVersionDescriptionsMessage summary);
    void gETDescribeApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationDescriptionsMessage summary);
    void gETDescribeConfigurationOptionsSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationOptionsDescription summary);
    void gETDescribeConfigurationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsDescriptions summary);
    void gETDescribeEnvironmentHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEnvironmentHealthResult summary);
    void gETDescribeEnvironmentManagedActionHistorySignalFull(OAIHttpRequestWorker *worker, OAIDescribeEnvironmentManagedActionHistoryResult summary);
    void gETDescribeEnvironmentManagedActionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEnvironmentManagedActionsResult summary);
    void gETDescribeEnvironmentResourcesSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentResourceDescriptionsMessage summary);
    void gETDescribeEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescriptionsMessage summary);
    void gETDescribeEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventDescriptionsMessage summary);
    void gETDescribeInstancesHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInstancesHealthResult summary);
    void gETDescribePlatformVersionSignalFull(OAIHttpRequestWorker *worker, OAIDescribePlatformVersionResult summary);
    void gETDisassociateEnvironmentOperationsRoleSignalFull(OAIHttpRequestWorker *worker);
    void gETListAvailableSolutionStacksSignalFull(OAIHttpRequestWorker *worker, OAIListAvailableSolutionStacksResultMessage summary);
    void gETListPlatformBranchesSignalFull(OAIHttpRequestWorker *worker, OAIListPlatformBranchesResult summary);
    void gETListPlatformVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListPlatformVersionsResult summary);
    void gETListTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIResourceTagsDescriptionMessage summary);
    void gETRebuildEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void gETRequestEnvironmentInfoSignalFull(OAIHttpRequestWorker *worker);
    void gETRestartAppServerSignalFull(OAIHttpRequestWorker *worker);
    void gETRetrieveEnvironmentInfoSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveEnvironmentInfoResultMessage summary);
    void gETSwapEnvironmentCNAMEsSignalFull(OAIHttpRequestWorker *worker);
    void gETTerminateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescription summary);
    void gETUpdateApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplicationDescriptionMessage summary);
    void gETUpdateApplicationResourceLifecycleSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceLifecycleDescriptionMessage summary);
    void gETUpdateApplicationVersionSignalFull(OAIHttpRequestWorker *worker, OAIApplicationVersionDescriptionMessage summary);
    void gETUpdateConfigurationTemplateSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsDescription summary);
    void gETUpdateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescription summary);
    void gETUpdateTagsForResourceSignalFull(OAIHttpRequestWorker *worker);
    void gETValidateConfigurationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsValidationMessages summary);
    void pOSTAbortEnvironmentUpdateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTApplyEnvironmentManagedActionSignalFull(OAIHttpRequestWorker *worker, OAIApplyEnvironmentManagedActionResult summary);
    void pOSTAssociateEnvironmentOperationsRoleSignalFull(OAIHttpRequestWorker *worker);
    void pOSTCheckDNSAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckDNSAvailabilityResultMessage summary);
    void pOSTComposeEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescriptionsMessage summary);
    void pOSTCreateApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplicationDescriptionMessage summary);
    void pOSTCreateApplicationVersionSignalFull(OAIHttpRequestWorker *worker, OAIApplicationVersionDescriptionMessage summary);
    void pOSTCreateConfigurationTemplateSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsDescription summary);
    void pOSTCreateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescription summary);
    void pOSTCreatePlatformVersionSignalFull(OAIHttpRequestWorker *worker, OAICreatePlatformVersionResult summary);
    void pOSTCreateStorageLocationSignalFull(OAIHttpRequestWorker *worker, OAICreateStorageLocationResultMessage summary);
    void pOSTDeleteApplicationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteApplicationVersionSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteConfigurationTemplateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteEnvironmentConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeletePlatformVersionSignalFull(OAIHttpRequestWorker *worker, OAIDeletePlatformVersionResult summary);
    void pOSTDescribeAccountAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountAttributesResult summary);
    void pOSTDescribeApplicationVersionsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationVersionDescriptionsMessage summary);
    void pOSTDescribeApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationDescriptionsMessage summary);
    void pOSTDescribeConfigurationOptionsSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationOptionsDescription summary);
    void pOSTDescribeConfigurationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsDescriptions summary);
    void pOSTDescribeEnvironmentHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEnvironmentHealthResult summary);
    void pOSTDescribeEnvironmentManagedActionHistorySignalFull(OAIHttpRequestWorker *worker, OAIDescribeEnvironmentManagedActionHistoryResult summary);
    void pOSTDescribeEnvironmentManagedActionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEnvironmentManagedActionsResult summary);
    void pOSTDescribeEnvironmentResourcesSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentResourceDescriptionsMessage summary);
    void pOSTDescribeEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescriptionsMessage summary);
    void pOSTDescribeEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventDescriptionsMessage summary);
    void pOSTDescribeInstancesHealthSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInstancesHealthResult summary);
    void pOSTDescribePlatformVersionSignalFull(OAIHttpRequestWorker *worker, OAIDescribePlatformVersionResult summary);
    void pOSTDisassociateEnvironmentOperationsRoleSignalFull(OAIHttpRequestWorker *worker);
    void pOSTListAvailableSolutionStacksSignalFull(OAIHttpRequestWorker *worker, OAIListAvailableSolutionStacksResultMessage summary);
    void pOSTListPlatformBranchesSignalFull(OAIHttpRequestWorker *worker, OAIListPlatformBranchesResult summary);
    void pOSTListPlatformVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListPlatformVersionsResult summary);
    void pOSTListTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIResourceTagsDescriptionMessage summary);
    void pOSTRebuildEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void pOSTRequestEnvironmentInfoSignalFull(OAIHttpRequestWorker *worker);
    void pOSTRestartAppServerSignalFull(OAIHttpRequestWorker *worker);
    void pOSTRetrieveEnvironmentInfoSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveEnvironmentInfoResultMessage summary);
    void pOSTSwapEnvironmentCNAMEsSignalFull(OAIHttpRequestWorker *worker);
    void pOSTTerminateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescription summary);
    void pOSTUpdateApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplicationDescriptionMessage summary);
    void pOSTUpdateApplicationResourceLifecycleSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceLifecycleDescriptionMessage summary);
    void pOSTUpdateApplicationVersionSignalFull(OAIHttpRequestWorker *worker, OAIApplicationVersionDescriptionMessage summary);
    void pOSTUpdateConfigurationTemplateSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsDescription summary);
    void pOSTUpdateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentDescription summary);
    void pOSTUpdateTagsForResourceSignalFull(OAIHttpRequestWorker *worker);
    void pOSTValidateConfigurationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationSettingsValidationMessages summary);

    Q_DECL_DEPRECATED_X("Use gETAbortEnvironmentUpdateSignalError() instead")
    void gETAbortEnvironmentUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETAbortEnvironmentUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETApplyEnvironmentManagedActionSignalError() instead")
    void gETApplyEnvironmentManagedActionSignalE(OAIApplyEnvironmentManagedActionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETApplyEnvironmentManagedActionSignalError(OAIApplyEnvironmentManagedActionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAssociateEnvironmentOperationsRoleSignalError() instead")
    void gETAssociateEnvironmentOperationsRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETAssociateEnvironmentOperationsRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCheckDNSAvailabilitySignalError() instead")
    void gETCheckDNSAvailabilitySignalE(OAICheckDNSAvailabilityResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCheckDNSAvailabilitySignalError(OAICheckDNSAvailabilityResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETComposeEnvironmentsSignalError() instead")
    void gETComposeEnvironmentsSignalE(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETComposeEnvironmentsSignalError(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateApplicationSignalError() instead")
    void gETCreateApplicationSignalE(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateApplicationSignalError(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateApplicationVersionSignalError() instead")
    void gETCreateApplicationVersionSignalE(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateApplicationVersionSignalError(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationTemplateSignalError() instead")
    void gETCreateConfigurationTemplateSignalE(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationTemplateSignalError(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEnvironmentSignalError() instead")
    void gETCreateEnvironmentSignalE(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEnvironmentSignalError(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreatePlatformVersionSignalError() instead")
    void gETCreatePlatformVersionSignalE(OAICreatePlatformVersionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreatePlatformVersionSignalError(OAICreatePlatformVersionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStorageLocationSignalError() instead")
    void gETCreateStorageLocationSignalE(OAICreateStorageLocationResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStorageLocationSignalError(OAICreateStorageLocationResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteApplicationSignalError() instead")
    void gETDeleteApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteApplicationVersionSignalError() instead")
    void gETDeleteApplicationVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteApplicationVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationTemplateSignalError() instead")
    void gETDeleteConfigurationTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEnvironmentConfigurationSignalError() instead")
    void gETDeleteEnvironmentConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEnvironmentConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeletePlatformVersionSignalError() instead")
    void gETDeletePlatformVersionSignalE(OAIDeletePlatformVersionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeletePlatformVersionSignalError(OAIDeletePlatformVersionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountAttributesSignalError() instead")
    void gETDescribeAccountAttributesSignalE(OAIDescribeAccountAttributesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountAttributesSignalError(OAIDescribeAccountAttributesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeApplicationVersionsSignalError() instead")
    void gETDescribeApplicationVersionsSignalE(OAIApplicationVersionDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeApplicationVersionsSignalError(OAIApplicationVersionDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeApplicationsSignalError() instead")
    void gETDescribeApplicationsSignalE(OAIApplicationDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeApplicationsSignalError(OAIApplicationDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeConfigurationOptionsSignalError() instead")
    void gETDescribeConfigurationOptionsSignalE(OAIConfigurationOptionsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeConfigurationOptionsSignalError(OAIConfigurationOptionsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeConfigurationSettingsSignalError() instead")
    void gETDescribeConfigurationSettingsSignalE(OAIConfigurationSettingsDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeConfigurationSettingsSignalError(OAIConfigurationSettingsDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentHealthSignalError() instead")
    void gETDescribeEnvironmentHealthSignalE(OAIDescribeEnvironmentHealthResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentHealthSignalError(OAIDescribeEnvironmentHealthResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentManagedActionHistorySignalError() instead")
    void gETDescribeEnvironmentManagedActionHistorySignalE(OAIDescribeEnvironmentManagedActionHistoryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentManagedActionHistorySignalError(OAIDescribeEnvironmentManagedActionHistoryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentManagedActionsSignalError() instead")
    void gETDescribeEnvironmentManagedActionsSignalE(OAIDescribeEnvironmentManagedActionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentManagedActionsSignalError(OAIDescribeEnvironmentManagedActionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentResourcesSignalError() instead")
    void gETDescribeEnvironmentResourcesSignalE(OAIEnvironmentResourceDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentResourcesSignalError(OAIEnvironmentResourceDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentsSignalError() instead")
    void gETDescribeEnvironmentsSignalE(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentsSignalError(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventsSignalError() instead")
    void gETDescribeEventsSignalE(OAIEventDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventsSignalError(OAIEventDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInstancesHealthSignalError() instead")
    void gETDescribeInstancesHealthSignalE(OAIDescribeInstancesHealthResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInstancesHealthSignalError(OAIDescribeInstancesHealthResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePlatformVersionSignalError() instead")
    void gETDescribePlatformVersionSignalE(OAIDescribePlatformVersionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePlatformVersionSignalError(OAIDescribePlatformVersionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisassociateEnvironmentOperationsRoleSignalError() instead")
    void gETDisassociateEnvironmentOperationsRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisassociateEnvironmentOperationsRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListAvailableSolutionStacksSignalError() instead")
    void gETListAvailableSolutionStacksSignalE(OAIListAvailableSolutionStacksResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListAvailableSolutionStacksSignalError(OAIListAvailableSolutionStacksResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListPlatformBranchesSignalError() instead")
    void gETListPlatformBranchesSignalE(OAIListPlatformBranchesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListPlatformBranchesSignalError(OAIListPlatformBranchesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListPlatformVersionsSignalError() instead")
    void gETListPlatformVersionsSignalE(OAIListPlatformVersionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListPlatformVersionsSignalError(OAIListPlatformVersionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTagsForResourceSignalError() instead")
    void gETListTagsForResourceSignalE(OAIResourceTagsDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTagsForResourceSignalError(OAIResourceTagsDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRebuildEnvironmentSignalError() instead")
    void gETRebuildEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETRebuildEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRequestEnvironmentInfoSignalError() instead")
    void gETRequestEnvironmentInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETRequestEnvironmentInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestartAppServerSignalError() instead")
    void gETRestartAppServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestartAppServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRetrieveEnvironmentInfoSignalError() instead")
    void gETRetrieveEnvironmentInfoSignalE(OAIRetrieveEnvironmentInfoResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRetrieveEnvironmentInfoSignalError(OAIRetrieveEnvironmentInfoResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSwapEnvironmentCNAMEsSignalError() instead")
    void gETSwapEnvironmentCNAMEsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSwapEnvironmentCNAMEsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTerminateEnvironmentSignalError() instead")
    void gETTerminateEnvironmentSignalE(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTerminateEnvironmentSignalError(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateApplicationSignalError() instead")
    void gETUpdateApplicationSignalE(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateApplicationSignalError(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateApplicationResourceLifecycleSignalError() instead")
    void gETUpdateApplicationResourceLifecycleSignalE(OAIApplicationResourceLifecycleDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateApplicationResourceLifecycleSignalError(OAIApplicationResourceLifecycleDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateApplicationVersionSignalError() instead")
    void gETUpdateApplicationVersionSignalE(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateApplicationVersionSignalError(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationTemplateSignalError() instead")
    void gETUpdateConfigurationTemplateSignalE(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationTemplateSignalError(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateEnvironmentSignalError() instead")
    void gETUpdateEnvironmentSignalE(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateEnvironmentSignalError(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateTagsForResourceSignalError() instead")
    void gETUpdateTagsForResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateTagsForResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETValidateConfigurationSettingsSignalError() instead")
    void gETValidateConfigurationSettingsSignalE(OAIConfigurationSettingsValidationMessages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETValidateConfigurationSettingsSignalError(OAIConfigurationSettingsValidationMessages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAbortEnvironmentUpdateSignalError() instead")
    void pOSTAbortEnvironmentUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAbortEnvironmentUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTApplyEnvironmentManagedActionSignalError() instead")
    void pOSTApplyEnvironmentManagedActionSignalE(OAIApplyEnvironmentManagedActionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTApplyEnvironmentManagedActionSignalError(OAIApplyEnvironmentManagedActionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAssociateEnvironmentOperationsRoleSignalError() instead")
    void pOSTAssociateEnvironmentOperationsRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAssociateEnvironmentOperationsRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCheckDNSAvailabilitySignalError() instead")
    void pOSTCheckDNSAvailabilitySignalE(OAICheckDNSAvailabilityResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCheckDNSAvailabilitySignalError(OAICheckDNSAvailabilityResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTComposeEnvironmentsSignalError() instead")
    void pOSTComposeEnvironmentsSignalE(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTComposeEnvironmentsSignalError(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateApplicationSignalError() instead")
    void pOSTCreateApplicationSignalE(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateApplicationSignalError(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateApplicationVersionSignalError() instead")
    void pOSTCreateApplicationVersionSignalE(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateApplicationVersionSignalError(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationTemplateSignalError() instead")
    void pOSTCreateConfigurationTemplateSignalE(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationTemplateSignalError(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEnvironmentSignalError() instead")
    void pOSTCreateEnvironmentSignalE(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEnvironmentSignalError(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreatePlatformVersionSignalError() instead")
    void pOSTCreatePlatformVersionSignalE(OAICreatePlatformVersionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreatePlatformVersionSignalError(OAICreatePlatformVersionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStorageLocationSignalError() instead")
    void pOSTCreateStorageLocationSignalE(OAICreateStorageLocationResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStorageLocationSignalError(OAICreateStorageLocationResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteApplicationSignalError() instead")
    void pOSTDeleteApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteApplicationVersionSignalError() instead")
    void pOSTDeleteApplicationVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteApplicationVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationTemplateSignalError() instead")
    void pOSTDeleteConfigurationTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEnvironmentConfigurationSignalError() instead")
    void pOSTDeleteEnvironmentConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEnvironmentConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeletePlatformVersionSignalError() instead")
    void pOSTDeletePlatformVersionSignalE(OAIDeletePlatformVersionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeletePlatformVersionSignalError(OAIDeletePlatformVersionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountAttributesSignalError() instead")
    void pOSTDescribeAccountAttributesSignalE(OAIDescribeAccountAttributesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountAttributesSignalError(OAIDescribeAccountAttributesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeApplicationVersionsSignalError() instead")
    void pOSTDescribeApplicationVersionsSignalE(OAIApplicationVersionDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeApplicationVersionsSignalError(OAIApplicationVersionDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeApplicationsSignalError() instead")
    void pOSTDescribeApplicationsSignalE(OAIApplicationDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeApplicationsSignalError(OAIApplicationDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeConfigurationOptionsSignalError() instead")
    void pOSTDescribeConfigurationOptionsSignalE(OAIConfigurationOptionsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeConfigurationOptionsSignalError(OAIConfigurationOptionsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeConfigurationSettingsSignalError() instead")
    void pOSTDescribeConfigurationSettingsSignalE(OAIConfigurationSettingsDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeConfigurationSettingsSignalError(OAIConfigurationSettingsDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentHealthSignalError() instead")
    void pOSTDescribeEnvironmentHealthSignalE(OAIDescribeEnvironmentHealthResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentHealthSignalError(OAIDescribeEnvironmentHealthResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentManagedActionHistorySignalError() instead")
    void pOSTDescribeEnvironmentManagedActionHistorySignalE(OAIDescribeEnvironmentManagedActionHistoryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentManagedActionHistorySignalError(OAIDescribeEnvironmentManagedActionHistoryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentManagedActionsSignalError() instead")
    void pOSTDescribeEnvironmentManagedActionsSignalE(OAIDescribeEnvironmentManagedActionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentManagedActionsSignalError(OAIDescribeEnvironmentManagedActionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentResourcesSignalError() instead")
    void pOSTDescribeEnvironmentResourcesSignalE(OAIEnvironmentResourceDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentResourcesSignalError(OAIEnvironmentResourceDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentsSignalError() instead")
    void pOSTDescribeEnvironmentsSignalE(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentsSignalError(OAIEnvironmentDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventsSignalError() instead")
    void pOSTDescribeEventsSignalE(OAIEventDescriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventsSignalError(OAIEventDescriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInstancesHealthSignalError() instead")
    void pOSTDescribeInstancesHealthSignalE(OAIDescribeInstancesHealthResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInstancesHealthSignalError(OAIDescribeInstancesHealthResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePlatformVersionSignalError() instead")
    void pOSTDescribePlatformVersionSignalE(OAIDescribePlatformVersionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePlatformVersionSignalError(OAIDescribePlatformVersionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisassociateEnvironmentOperationsRoleSignalError() instead")
    void pOSTDisassociateEnvironmentOperationsRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisassociateEnvironmentOperationsRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListAvailableSolutionStacksSignalError() instead")
    void pOSTListAvailableSolutionStacksSignalE(OAIListAvailableSolutionStacksResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListAvailableSolutionStacksSignalError(OAIListAvailableSolutionStacksResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListPlatformBranchesSignalError() instead")
    void pOSTListPlatformBranchesSignalE(OAIListPlatformBranchesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListPlatformBranchesSignalError(OAIListPlatformBranchesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListPlatformVersionsSignalError() instead")
    void pOSTListPlatformVersionsSignalE(OAIListPlatformVersionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListPlatformVersionsSignalError(OAIListPlatformVersionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTagsForResourceSignalError() instead")
    void pOSTListTagsForResourceSignalE(OAIResourceTagsDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTagsForResourceSignalError(OAIResourceTagsDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRebuildEnvironmentSignalError() instead")
    void pOSTRebuildEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRebuildEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRequestEnvironmentInfoSignalError() instead")
    void pOSTRequestEnvironmentInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRequestEnvironmentInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestartAppServerSignalError() instead")
    void pOSTRestartAppServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestartAppServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRetrieveEnvironmentInfoSignalError() instead")
    void pOSTRetrieveEnvironmentInfoSignalE(OAIRetrieveEnvironmentInfoResultMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRetrieveEnvironmentInfoSignalError(OAIRetrieveEnvironmentInfoResultMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSwapEnvironmentCNAMEsSignalError() instead")
    void pOSTSwapEnvironmentCNAMEsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSwapEnvironmentCNAMEsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTerminateEnvironmentSignalError() instead")
    void pOSTTerminateEnvironmentSignalE(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTerminateEnvironmentSignalError(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateApplicationSignalError() instead")
    void pOSTUpdateApplicationSignalE(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateApplicationSignalError(OAIApplicationDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateApplicationResourceLifecycleSignalError() instead")
    void pOSTUpdateApplicationResourceLifecycleSignalE(OAIApplicationResourceLifecycleDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateApplicationResourceLifecycleSignalError(OAIApplicationResourceLifecycleDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateApplicationVersionSignalError() instead")
    void pOSTUpdateApplicationVersionSignalE(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateApplicationVersionSignalError(OAIApplicationVersionDescriptionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationTemplateSignalError() instead")
    void pOSTUpdateConfigurationTemplateSignalE(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationTemplateSignalError(OAIConfigurationSettingsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateEnvironmentSignalError() instead")
    void pOSTUpdateEnvironmentSignalE(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateEnvironmentSignalError(OAIEnvironmentDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateTagsForResourceSignalError() instead")
    void pOSTUpdateTagsForResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateTagsForResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTValidateConfigurationSettingsSignalError() instead")
    void pOSTValidateConfigurationSettingsSignalE(OAIConfigurationSettingsValidationMessages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTValidateConfigurationSettingsSignalError(OAIConfigurationSettingsValidationMessages summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAbortEnvironmentUpdateSignalErrorFull() instead")
    void gETAbortEnvironmentUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAbortEnvironmentUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETApplyEnvironmentManagedActionSignalErrorFull() instead")
    void gETApplyEnvironmentManagedActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETApplyEnvironmentManagedActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAssociateEnvironmentOperationsRoleSignalErrorFull() instead")
    void gETAssociateEnvironmentOperationsRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAssociateEnvironmentOperationsRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCheckDNSAvailabilitySignalErrorFull() instead")
    void gETCheckDNSAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCheckDNSAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETComposeEnvironmentsSignalErrorFull() instead")
    void gETComposeEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETComposeEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateApplicationSignalErrorFull() instead")
    void gETCreateApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateApplicationVersionSignalErrorFull() instead")
    void gETCreateApplicationVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateApplicationVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationTemplateSignalErrorFull() instead")
    void gETCreateConfigurationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEnvironmentSignalErrorFull() instead")
    void gETCreateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreatePlatformVersionSignalErrorFull() instead")
    void gETCreatePlatformVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreatePlatformVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStorageLocationSignalErrorFull() instead")
    void gETCreateStorageLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStorageLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteApplicationSignalErrorFull() instead")
    void gETDeleteApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteApplicationVersionSignalErrorFull() instead")
    void gETDeleteApplicationVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteApplicationVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationTemplateSignalErrorFull() instead")
    void gETDeleteConfigurationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEnvironmentConfigurationSignalErrorFull() instead")
    void gETDeleteEnvironmentConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEnvironmentConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeletePlatformVersionSignalErrorFull() instead")
    void gETDeletePlatformVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeletePlatformVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountAttributesSignalErrorFull() instead")
    void gETDescribeAccountAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeApplicationVersionsSignalErrorFull() instead")
    void gETDescribeApplicationVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeApplicationVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeApplicationsSignalErrorFull() instead")
    void gETDescribeApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeConfigurationOptionsSignalErrorFull() instead")
    void gETDescribeConfigurationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeConfigurationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeConfigurationSettingsSignalErrorFull() instead")
    void gETDescribeConfigurationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeConfigurationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentHealthSignalErrorFull() instead")
    void gETDescribeEnvironmentHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentManagedActionHistorySignalErrorFull() instead")
    void gETDescribeEnvironmentManagedActionHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentManagedActionHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentManagedActionsSignalErrorFull() instead")
    void gETDescribeEnvironmentManagedActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentManagedActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentResourcesSignalErrorFull() instead")
    void gETDescribeEnvironmentResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEnvironmentsSignalErrorFull() instead")
    void gETDescribeEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventsSignalErrorFull() instead")
    void gETDescribeEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeInstancesHealthSignalErrorFull() instead")
    void gETDescribeInstancesHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeInstancesHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePlatformVersionSignalErrorFull() instead")
    void gETDescribePlatformVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePlatformVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDisassociateEnvironmentOperationsRoleSignalErrorFull() instead")
    void gETDisassociateEnvironmentOperationsRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDisassociateEnvironmentOperationsRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListAvailableSolutionStacksSignalErrorFull() instead")
    void gETListAvailableSolutionStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListAvailableSolutionStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListPlatformBranchesSignalErrorFull() instead")
    void gETListPlatformBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListPlatformBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListPlatformVersionsSignalErrorFull() instead")
    void gETListPlatformVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListPlatformVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTagsForResourceSignalErrorFull() instead")
    void gETListTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRebuildEnvironmentSignalErrorFull() instead")
    void gETRebuildEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRebuildEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRequestEnvironmentInfoSignalErrorFull() instead")
    void gETRequestEnvironmentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRequestEnvironmentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestartAppServerSignalErrorFull() instead")
    void gETRestartAppServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestartAppServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRetrieveEnvironmentInfoSignalErrorFull() instead")
    void gETRetrieveEnvironmentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRetrieveEnvironmentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSwapEnvironmentCNAMEsSignalErrorFull() instead")
    void gETSwapEnvironmentCNAMEsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSwapEnvironmentCNAMEsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTerminateEnvironmentSignalErrorFull() instead")
    void gETTerminateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTerminateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateApplicationSignalErrorFull() instead")
    void gETUpdateApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateApplicationResourceLifecycleSignalErrorFull() instead")
    void gETUpdateApplicationResourceLifecycleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateApplicationResourceLifecycleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateApplicationVersionSignalErrorFull() instead")
    void gETUpdateApplicationVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateApplicationVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationTemplateSignalErrorFull() instead")
    void gETUpdateConfigurationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateEnvironmentSignalErrorFull() instead")
    void gETUpdateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateTagsForResourceSignalErrorFull() instead")
    void gETUpdateTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETValidateConfigurationSettingsSignalErrorFull() instead")
    void gETValidateConfigurationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETValidateConfigurationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAbortEnvironmentUpdateSignalErrorFull() instead")
    void pOSTAbortEnvironmentUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAbortEnvironmentUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTApplyEnvironmentManagedActionSignalErrorFull() instead")
    void pOSTApplyEnvironmentManagedActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTApplyEnvironmentManagedActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAssociateEnvironmentOperationsRoleSignalErrorFull() instead")
    void pOSTAssociateEnvironmentOperationsRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAssociateEnvironmentOperationsRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCheckDNSAvailabilitySignalErrorFull() instead")
    void pOSTCheckDNSAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCheckDNSAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTComposeEnvironmentsSignalErrorFull() instead")
    void pOSTComposeEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTComposeEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateApplicationSignalErrorFull() instead")
    void pOSTCreateApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateApplicationVersionSignalErrorFull() instead")
    void pOSTCreateApplicationVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateApplicationVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationTemplateSignalErrorFull() instead")
    void pOSTCreateConfigurationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEnvironmentSignalErrorFull() instead")
    void pOSTCreateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreatePlatformVersionSignalErrorFull() instead")
    void pOSTCreatePlatformVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreatePlatformVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStorageLocationSignalErrorFull() instead")
    void pOSTCreateStorageLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStorageLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteApplicationSignalErrorFull() instead")
    void pOSTDeleteApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteApplicationVersionSignalErrorFull() instead")
    void pOSTDeleteApplicationVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteApplicationVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationTemplateSignalErrorFull() instead")
    void pOSTDeleteConfigurationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEnvironmentConfigurationSignalErrorFull() instead")
    void pOSTDeleteEnvironmentConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEnvironmentConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeletePlatformVersionSignalErrorFull() instead")
    void pOSTDeletePlatformVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeletePlatformVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountAttributesSignalErrorFull() instead")
    void pOSTDescribeAccountAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeApplicationVersionsSignalErrorFull() instead")
    void pOSTDescribeApplicationVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeApplicationVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeApplicationsSignalErrorFull() instead")
    void pOSTDescribeApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeConfigurationOptionsSignalErrorFull() instead")
    void pOSTDescribeConfigurationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeConfigurationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeConfigurationSettingsSignalErrorFull() instead")
    void pOSTDescribeConfigurationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeConfigurationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentHealthSignalErrorFull() instead")
    void pOSTDescribeEnvironmentHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentManagedActionHistorySignalErrorFull() instead")
    void pOSTDescribeEnvironmentManagedActionHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentManagedActionHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentManagedActionsSignalErrorFull() instead")
    void pOSTDescribeEnvironmentManagedActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentManagedActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentResourcesSignalErrorFull() instead")
    void pOSTDescribeEnvironmentResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEnvironmentsSignalErrorFull() instead")
    void pOSTDescribeEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventsSignalErrorFull() instead")
    void pOSTDescribeEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeInstancesHealthSignalErrorFull() instead")
    void pOSTDescribeInstancesHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeInstancesHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePlatformVersionSignalErrorFull() instead")
    void pOSTDescribePlatformVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePlatformVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDisassociateEnvironmentOperationsRoleSignalErrorFull() instead")
    void pOSTDisassociateEnvironmentOperationsRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDisassociateEnvironmentOperationsRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListAvailableSolutionStacksSignalErrorFull() instead")
    void pOSTListAvailableSolutionStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListAvailableSolutionStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListPlatformBranchesSignalErrorFull() instead")
    void pOSTListPlatformBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListPlatformBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListPlatformVersionsSignalErrorFull() instead")
    void pOSTListPlatformVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListPlatformVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTagsForResourceSignalErrorFull() instead")
    void pOSTListTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRebuildEnvironmentSignalErrorFull() instead")
    void pOSTRebuildEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRebuildEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRequestEnvironmentInfoSignalErrorFull() instead")
    void pOSTRequestEnvironmentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRequestEnvironmentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestartAppServerSignalErrorFull() instead")
    void pOSTRestartAppServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestartAppServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRetrieveEnvironmentInfoSignalErrorFull() instead")
    void pOSTRetrieveEnvironmentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRetrieveEnvironmentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSwapEnvironmentCNAMEsSignalErrorFull() instead")
    void pOSTSwapEnvironmentCNAMEsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSwapEnvironmentCNAMEsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTerminateEnvironmentSignalErrorFull() instead")
    void pOSTTerminateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTerminateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateApplicationSignalErrorFull() instead")
    void pOSTUpdateApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateApplicationResourceLifecycleSignalErrorFull() instead")
    void pOSTUpdateApplicationResourceLifecycleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateApplicationResourceLifecycleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateApplicationVersionSignalErrorFull() instead")
    void pOSTUpdateApplicationVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateApplicationVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationTemplateSignalErrorFull() instead")
    void pOSTUpdateConfigurationTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateEnvironmentSignalErrorFull() instead")
    void pOSTUpdateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateTagsForResourceSignalErrorFull() instead")
    void pOSTUpdateTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTValidateConfigurationSettingsSignalErrorFull() instead")
    void pOSTValidateConfigurationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTValidateConfigurationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
