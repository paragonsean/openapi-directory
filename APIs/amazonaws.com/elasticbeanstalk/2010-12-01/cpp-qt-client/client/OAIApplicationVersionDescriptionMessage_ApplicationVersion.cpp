/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationVersionDescriptionMessage_ApplicationVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationVersionDescriptionMessage_ApplicationVersion::OAIApplicationVersionDescriptionMessage_ApplicationVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationVersionDescriptionMessage_ApplicationVersion::OAIApplicationVersionDescriptionMessage_ApplicationVersion() {
    this->initializeModel();
}

OAIApplicationVersionDescriptionMessage_ApplicationVersion::~OAIApplicationVersionDescriptionMessage_ApplicationVersion() {}

void OAIApplicationVersionDescriptionMessage_ApplicationVersion::initializeModel() {

    m_application_version_arn_isSet = false;
    m_application_version_arn_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_version_label_isSet = false;
    m_version_label_isValid = false;

    m_source_build_information_isSet = false;
    m_source_build_information_isValid = false;

    m_build_arn_isSet = false;
    m_build_arn_isValid = false;

    m_source_bundle_isSet = false;
    m_source_bundle_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIApplicationVersionDescriptionMessage_ApplicationVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationVersionDescriptionMessage_ApplicationVersion::fromJsonObject(QJsonObject json) {

    m_application_version_arn_isValid = ::OpenAPI::fromJsonValue(m_application_version_arn, json[QString("ApplicationVersionArn")]);
    m_application_version_arn_isSet = !json[QString("ApplicationVersionArn")].isNull() && m_application_version_arn_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_version_label_isValid = ::OpenAPI::fromJsonValue(m_version_label, json[QString("VersionLabel")]);
    m_version_label_isSet = !json[QString("VersionLabel")].isNull() && m_version_label_isValid;

    m_source_build_information_isValid = ::OpenAPI::fromJsonValue(m_source_build_information, json[QString("SourceBuildInformation")]);
    m_source_build_information_isSet = !json[QString("SourceBuildInformation")].isNull() && m_source_build_information_isValid;

    m_build_arn_isValid = ::OpenAPI::fromJsonValue(m_build_arn, json[QString("BuildArn")]);
    m_build_arn_isSet = !json[QString("BuildArn")].isNull() && m_build_arn_isValid;

    m_source_bundle_isValid = ::OpenAPI::fromJsonValue(m_source_bundle, json[QString("SourceBundle")]);
    m_source_bundle_isSet = !json[QString("SourceBundle")].isNull() && m_source_bundle_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIApplicationVersionDescriptionMessage_ApplicationVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationVersionDescriptionMessage_ApplicationVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_arn_isSet) {
        obj.insert(QString("ApplicationVersionArn"), ::OpenAPI::toJsonValue(m_application_version_arn));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_version_label_isSet) {
        obj.insert(QString("VersionLabel"), ::OpenAPI::toJsonValue(m_version_label));
    }
    if (m_source_build_information.isSet()) {
        obj.insert(QString("SourceBuildInformation"), ::OpenAPI::toJsonValue(m_source_build_information));
    }
    if (m_build_arn_isSet) {
        obj.insert(QString("BuildArn"), ::OpenAPI::toJsonValue(m_build_arn));
    }
    if (m_source_bundle.isSet()) {
        obj.insert(QString("SourceBundle"), ::OpenAPI::toJsonValue(m_source_bundle));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIApplicationVersionDescriptionMessage_ApplicationVersion::getApplicationVersionArn() const {
    return m_application_version_arn;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setApplicationVersionArn(const QString &application_version_arn) {
    m_application_version_arn = application_version_arn;
    m_application_version_arn_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_application_version_arn_Set() const{
    return m_application_version_arn_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_application_version_arn_Valid() const{
    return m_application_version_arn_isValid;
}

QString OAIApplicationVersionDescriptionMessage_ApplicationVersion::getApplicationName() const {
    return m_application_name;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIApplicationVersionDescriptionMessage_ApplicationVersion::getDescription() const {
    return m_description;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationVersionDescriptionMessage_ApplicationVersion::getVersionLabel() const {
    return m_version_label;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setVersionLabel(const QString &version_label) {
    m_version_label = version_label;
    m_version_label_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_version_label_Set() const{
    return m_version_label_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_version_label_Valid() const{
    return m_version_label_isValid;
}

OAIApplicationVersionDescription_SourceBuildInformation OAIApplicationVersionDescriptionMessage_ApplicationVersion::getSourceBuildInformation() const {
    return m_source_build_information;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setSourceBuildInformation(const OAIApplicationVersionDescription_SourceBuildInformation &source_build_information) {
    m_source_build_information = source_build_information;
    m_source_build_information_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_source_build_information_Set() const{
    return m_source_build_information_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_source_build_information_Valid() const{
    return m_source_build_information_isValid;
}

QString OAIApplicationVersionDescriptionMessage_ApplicationVersion::getBuildArn() const {
    return m_build_arn;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setBuildArn(const QString &build_arn) {
    m_build_arn = build_arn;
    m_build_arn_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_build_arn_Set() const{
    return m_build_arn_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_build_arn_Valid() const{
    return m_build_arn_isValid;
}

OAIApplicationVersionDescription_SourceBundle OAIApplicationVersionDescriptionMessage_ApplicationVersion::getSourceBundle() const {
    return m_source_bundle;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setSourceBundle(const OAIApplicationVersionDescription_SourceBundle &source_bundle) {
    m_source_bundle = source_bundle;
    m_source_bundle_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_source_bundle_Set() const{
    return m_source_bundle_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_source_bundle_Valid() const{
    return m_source_bundle_isValid;
}

QDateTime OAIApplicationVersionDescriptionMessage_ApplicationVersion::getDateCreated() const {
    return m_date_created;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIApplicationVersionDescriptionMessage_ApplicationVersion::getDateUpdated() const {
    return m_date_updated;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

OAIApplicationVersionStatus OAIApplicationVersionDescriptionMessage_ApplicationVersion::getStatus() const {
    return m_status;
}
void OAIApplicationVersionDescriptionMessage_ApplicationVersion::setStatus(const OAIApplicationVersionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_build_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_bundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationVersionDescriptionMessage_ApplicationVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
