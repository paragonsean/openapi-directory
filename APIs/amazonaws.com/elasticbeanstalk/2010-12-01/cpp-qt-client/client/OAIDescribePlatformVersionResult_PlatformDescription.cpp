/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePlatformVersionResult_PlatformDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePlatformVersionResult_PlatformDescription::OAIDescribePlatformVersionResult_PlatformDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePlatformVersionResult_PlatformDescription::OAIDescribePlatformVersionResult_PlatformDescription() {
    this->initializeModel();
}

OAIDescribePlatformVersionResult_PlatformDescription::~OAIDescribePlatformVersionResult_PlatformDescription() {}

void OAIDescribePlatformVersionResult_PlatformDescription::initializeModel() {

    m_platform_arn_isSet = false;
    m_platform_arn_isValid = false;

    m_platform_owner_isSet = false;
    m_platform_owner_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_solution_stack_name_isSet = false;
    m_solution_stack_name_isValid = false;

    m_platform_status_isSet = false;
    m_platform_status_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_platform_category_isSet = false;
    m_platform_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_maintainer_isSet = false;
    m_maintainer_isValid = false;

    m_operating_system_name_isSet = false;
    m_operating_system_name_isValid = false;

    m_operating_system_version_isSet = false;
    m_operating_system_version_isValid = false;

    m_programming_languages_isSet = false;
    m_programming_languages_isValid = false;

    m_frameworks_isSet = false;
    m_frameworks_isValid = false;

    m_custom_ami_list_isSet = false;
    m_custom_ami_list_isValid = false;

    m_supported_tier_list_isSet = false;
    m_supported_tier_list_isValid = false;

    m_supported_addon_list_isSet = false;
    m_supported_addon_list_isValid = false;

    m_platform_lifecycle_state_isSet = false;
    m_platform_lifecycle_state_isValid = false;

    m_platform_branch_name_isSet = false;
    m_platform_branch_name_isValid = false;

    m_platform_branch_lifecycle_state_isSet = false;
    m_platform_branch_lifecycle_state_isValid = false;
}

void OAIDescribePlatformVersionResult_PlatformDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePlatformVersionResult_PlatformDescription::fromJsonObject(QJsonObject json) {

    m_platform_arn_isValid = ::OpenAPI::fromJsonValue(m_platform_arn, json[QString("PlatformArn")]);
    m_platform_arn_isSet = !json[QString("PlatformArn")].isNull() && m_platform_arn_isValid;

    m_platform_owner_isValid = ::OpenAPI::fromJsonValue(m_platform_owner, json[QString("PlatformOwner")]);
    m_platform_owner_isSet = !json[QString("PlatformOwner")].isNull() && m_platform_owner_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("PlatformName")]);
    m_platform_name_isSet = !json[QString("PlatformName")].isNull() && m_platform_name_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("PlatformVersion")]);
    m_platform_version_isSet = !json[QString("PlatformVersion")].isNull() && m_platform_version_isValid;

    m_solution_stack_name_isValid = ::OpenAPI::fromJsonValue(m_solution_stack_name, json[QString("SolutionStackName")]);
    m_solution_stack_name_isSet = !json[QString("SolutionStackName")].isNull() && m_solution_stack_name_isValid;

    m_platform_status_isValid = ::OpenAPI::fromJsonValue(m_platform_status, json[QString("PlatformStatus")]);
    m_platform_status_isSet = !json[QString("PlatformStatus")].isNull() && m_platform_status_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_platform_category_isValid = ::OpenAPI::fromJsonValue(m_platform_category, json[QString("PlatformCategory")]);
    m_platform_category_isSet = !json[QString("PlatformCategory")].isNull() && m_platform_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_maintainer_isValid = ::OpenAPI::fromJsonValue(m_maintainer, json[QString("Maintainer")]);
    m_maintainer_isSet = !json[QString("Maintainer")].isNull() && m_maintainer_isValid;

    m_operating_system_name_isValid = ::OpenAPI::fromJsonValue(m_operating_system_name, json[QString("OperatingSystemName")]);
    m_operating_system_name_isSet = !json[QString("OperatingSystemName")].isNull() && m_operating_system_name_isValid;

    m_operating_system_version_isValid = ::OpenAPI::fromJsonValue(m_operating_system_version, json[QString("OperatingSystemVersion")]);
    m_operating_system_version_isSet = !json[QString("OperatingSystemVersion")].isNull() && m_operating_system_version_isValid;

    m_programming_languages_isValid = ::OpenAPI::fromJsonValue(m_programming_languages, json[QString("ProgrammingLanguages")]);
    m_programming_languages_isSet = !json[QString("ProgrammingLanguages")].isNull() && m_programming_languages_isValid;

    m_frameworks_isValid = ::OpenAPI::fromJsonValue(m_frameworks, json[QString("Frameworks")]);
    m_frameworks_isSet = !json[QString("Frameworks")].isNull() && m_frameworks_isValid;

    m_custom_ami_list_isValid = ::OpenAPI::fromJsonValue(m_custom_ami_list, json[QString("CustomAmiList")]);
    m_custom_ami_list_isSet = !json[QString("CustomAmiList")].isNull() && m_custom_ami_list_isValid;

    m_supported_tier_list_isValid = ::OpenAPI::fromJsonValue(m_supported_tier_list, json[QString("SupportedTierList")]);
    m_supported_tier_list_isSet = !json[QString("SupportedTierList")].isNull() && m_supported_tier_list_isValid;

    m_supported_addon_list_isValid = ::OpenAPI::fromJsonValue(m_supported_addon_list, json[QString("SupportedAddonList")]);
    m_supported_addon_list_isSet = !json[QString("SupportedAddonList")].isNull() && m_supported_addon_list_isValid;

    m_platform_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_platform_lifecycle_state, json[QString("PlatformLifecycleState")]);
    m_platform_lifecycle_state_isSet = !json[QString("PlatformLifecycleState")].isNull() && m_platform_lifecycle_state_isValid;

    m_platform_branch_name_isValid = ::OpenAPI::fromJsonValue(m_platform_branch_name, json[QString("PlatformBranchName")]);
    m_platform_branch_name_isSet = !json[QString("PlatformBranchName")].isNull() && m_platform_branch_name_isValid;

    m_platform_branch_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_platform_branch_lifecycle_state, json[QString("PlatformBranchLifecycleState")]);
    m_platform_branch_lifecycle_state_isSet = !json[QString("PlatformBranchLifecycleState")].isNull() && m_platform_branch_lifecycle_state_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePlatformVersionResult_PlatformDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_arn_isSet) {
        obj.insert(QString("PlatformArn"), ::OpenAPI::toJsonValue(m_platform_arn));
    }
    if (m_platform_owner_isSet) {
        obj.insert(QString("PlatformOwner"), ::OpenAPI::toJsonValue(m_platform_owner));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("PlatformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("PlatformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_solution_stack_name_isSet) {
        obj.insert(QString("SolutionStackName"), ::OpenAPI::toJsonValue(m_solution_stack_name));
    }
    if (m_platform_status.isSet()) {
        obj.insert(QString("PlatformStatus"), ::OpenAPI::toJsonValue(m_platform_status));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_platform_category_isSet) {
        obj.insert(QString("PlatformCategory"), ::OpenAPI::toJsonValue(m_platform_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_maintainer_isSet) {
        obj.insert(QString("Maintainer"), ::OpenAPI::toJsonValue(m_maintainer));
    }
    if (m_operating_system_name_isSet) {
        obj.insert(QString("OperatingSystemName"), ::OpenAPI::toJsonValue(m_operating_system_name));
    }
    if (m_operating_system_version_isSet) {
        obj.insert(QString("OperatingSystemVersion"), ::OpenAPI::toJsonValue(m_operating_system_version));
    }
    if (m_programming_languages.isSet()) {
        obj.insert(QString("ProgrammingLanguages"), ::OpenAPI::toJsonValue(m_programming_languages));
    }
    if (m_frameworks.isSet()) {
        obj.insert(QString("Frameworks"), ::OpenAPI::toJsonValue(m_frameworks));
    }
    if (m_custom_ami_list.isSet()) {
        obj.insert(QString("CustomAmiList"), ::OpenAPI::toJsonValue(m_custom_ami_list));
    }
    if (m_supported_tier_list.isSet()) {
        obj.insert(QString("SupportedTierList"), ::OpenAPI::toJsonValue(m_supported_tier_list));
    }
    if (m_supported_addon_list.isSet()) {
        obj.insert(QString("SupportedAddonList"), ::OpenAPI::toJsonValue(m_supported_addon_list));
    }
    if (m_platform_lifecycle_state_isSet) {
        obj.insert(QString("PlatformLifecycleState"), ::OpenAPI::toJsonValue(m_platform_lifecycle_state));
    }
    if (m_platform_branch_name_isSet) {
        obj.insert(QString("PlatformBranchName"), ::OpenAPI::toJsonValue(m_platform_branch_name));
    }
    if (m_platform_branch_lifecycle_state_isSet) {
        obj.insert(QString("PlatformBranchLifecycleState"), ::OpenAPI::toJsonValue(m_platform_branch_lifecycle_state));
    }
    return obj;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformArn() const {
    return m_platform_arn;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformArn(const QString &platform_arn) {
    m_platform_arn = platform_arn;
    m_platform_arn_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_arn_Set() const{
    return m_platform_arn_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_arn_Valid() const{
    return m_platform_arn_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformOwner() const {
    return m_platform_owner;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformOwner(const QString &platform_owner) {
    m_platform_owner = platform_owner;
    m_platform_owner_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_owner_Set() const{
    return m_platform_owner_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_owner_Valid() const{
    return m_platform_owner_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformName() const {
    return m_platform_name;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformVersion() const {
    return m_platform_version;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getSolutionStackName() const {
    return m_solution_stack_name;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setSolutionStackName(const QString &solution_stack_name) {
    m_solution_stack_name = solution_stack_name;
    m_solution_stack_name_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_solution_stack_name_Set() const{
    return m_solution_stack_name_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_solution_stack_name_Valid() const{
    return m_solution_stack_name_isValid;
}

OAIPlatformStatus OAIDescribePlatformVersionResult_PlatformDescription::getPlatformStatus() const {
    return m_platform_status;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformStatus(const OAIPlatformStatus &platform_status) {
    m_platform_status = platform_status;
    m_platform_status_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_status_Set() const{
    return m_platform_status_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_status_Valid() const{
    return m_platform_status_isValid;
}

QDateTime OAIDescribePlatformVersionResult_PlatformDescription::getDateCreated() const {
    return m_date_created;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIDescribePlatformVersionResult_PlatformDescription::getDateUpdated() const {
    return m_date_updated;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformCategory() const {
    return m_platform_category;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformCategory(const QString &platform_category) {
    m_platform_category = platform_category;
    m_platform_category_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_category_Set() const{
    return m_platform_category_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_category_Valid() const{
    return m_platform_category_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getDescription() const {
    return m_description;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getMaintainer() const {
    return m_maintainer;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setMaintainer(const QString &maintainer) {
    m_maintainer = maintainer;
    m_maintainer_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_maintainer_Set() const{
    return m_maintainer_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_maintainer_Valid() const{
    return m_maintainer_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getOperatingSystemName() const {
    return m_operating_system_name;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setOperatingSystemName(const QString &operating_system_name) {
    m_operating_system_name = operating_system_name;
    m_operating_system_name_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_operating_system_name_Set() const{
    return m_operating_system_name_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_operating_system_name_Valid() const{
    return m_operating_system_name_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getOperatingSystemVersion() const {
    return m_operating_system_version;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setOperatingSystemVersion(const QString &operating_system_version) {
    m_operating_system_version = operating_system_version;
    m_operating_system_version_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_operating_system_version_Set() const{
    return m_operating_system_version_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_operating_system_version_Valid() const{
    return m_operating_system_version_isValid;
}

QList OAIDescribePlatformVersionResult_PlatformDescription::getProgrammingLanguages() const {
    return m_programming_languages;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setProgrammingLanguages(const QList &programming_languages) {
    m_programming_languages = programming_languages;
    m_programming_languages_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_programming_languages_Set() const{
    return m_programming_languages_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_programming_languages_Valid() const{
    return m_programming_languages_isValid;
}

QList OAIDescribePlatformVersionResult_PlatformDescription::getFrameworks() const {
    return m_frameworks;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setFrameworks(const QList &frameworks) {
    m_frameworks = frameworks;
    m_frameworks_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_frameworks_Set() const{
    return m_frameworks_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_frameworks_Valid() const{
    return m_frameworks_isValid;
}

QList OAIDescribePlatformVersionResult_PlatformDescription::getCustomAmiList() const {
    return m_custom_ami_list;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setCustomAmiList(const QList &custom_ami_list) {
    m_custom_ami_list = custom_ami_list;
    m_custom_ami_list_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_custom_ami_list_Set() const{
    return m_custom_ami_list_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_custom_ami_list_Valid() const{
    return m_custom_ami_list_isValid;
}

QList OAIDescribePlatformVersionResult_PlatformDescription::getSupportedTierList() const {
    return m_supported_tier_list;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setSupportedTierList(const QList &supported_tier_list) {
    m_supported_tier_list = supported_tier_list;
    m_supported_tier_list_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_supported_tier_list_Set() const{
    return m_supported_tier_list_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_supported_tier_list_Valid() const{
    return m_supported_tier_list_isValid;
}

QList OAIDescribePlatformVersionResult_PlatformDescription::getSupportedAddonList() const {
    return m_supported_addon_list;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setSupportedAddonList(const QList &supported_addon_list) {
    m_supported_addon_list = supported_addon_list;
    m_supported_addon_list_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_supported_addon_list_Set() const{
    return m_supported_addon_list_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_supported_addon_list_Valid() const{
    return m_supported_addon_list_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformLifecycleState() const {
    return m_platform_lifecycle_state;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformLifecycleState(const QString &platform_lifecycle_state) {
    m_platform_lifecycle_state = platform_lifecycle_state;
    m_platform_lifecycle_state_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_lifecycle_state_Set() const{
    return m_platform_lifecycle_state_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_lifecycle_state_Valid() const{
    return m_platform_lifecycle_state_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformBranchName() const {
    return m_platform_branch_name;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformBranchName(const QString &platform_branch_name) {
    m_platform_branch_name = platform_branch_name;
    m_platform_branch_name_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_branch_name_Set() const{
    return m_platform_branch_name_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_branch_name_Valid() const{
    return m_platform_branch_name_isValid;
}

QString OAIDescribePlatformVersionResult_PlatformDescription::getPlatformBranchLifecycleState() const {
    return m_platform_branch_lifecycle_state;
}
void OAIDescribePlatformVersionResult_PlatformDescription::setPlatformBranchLifecycleState(const QString &platform_branch_lifecycle_state) {
    m_platform_branch_lifecycle_state = platform_branch_lifecycle_state;
    m_platform_branch_lifecycle_state_isSet = true;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_branch_lifecycle_state_Set() const{
    return m_platform_branch_lifecycle_state_isSet;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::is_platform_branch_lifecycle_state_Valid() const{
    return m_platform_branch_lifecycle_state_isValid;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintainer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programming_languages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frameworks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_ami_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_tier_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_addon_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_branch_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePlatformVersionResult_PlatformDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
