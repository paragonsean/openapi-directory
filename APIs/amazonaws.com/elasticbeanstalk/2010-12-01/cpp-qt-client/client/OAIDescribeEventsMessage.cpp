/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEventsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEventsMessage::OAIDescribeEventsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEventsMessage::OAIDescribeEventsMessage() {
    this->initializeModel();
}

OAIDescribeEventsMessage::~OAIDescribeEventsMessage() {}

void OAIDescribeEventsMessage::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_version_label_isSet = false;
    m_version_label_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_platform_arn_isSet = false;
    m_platform_arn_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeEventsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEventsMessage::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_version_label_isValid = ::OpenAPI::fromJsonValue(m_version_label, json[QString("VersionLabel")]);
    m_version_label_isSet = !json[QString("VersionLabel")].isNull() && m_version_label_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_platform_arn_isValid = ::OpenAPI::fromJsonValue(m_platform_arn, json[QString("PlatformArn")]);
    m_platform_arn_isSet = !json[QString("PlatformArn")].isNull() && m_platform_arn_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeEventsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEventsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_version_label_isSet) {
        obj.insert(QString("VersionLabel"), ::OpenAPI::toJsonValue(m_version_label));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_platform_arn_isSet) {
        obj.insert(QString("PlatformArn"), ::OpenAPI::toJsonValue(m_platform_arn));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeEventsMessage::getApplicationName() const {
    return m_application_name;
}
void OAIDescribeEventsMessage::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIDescribeEventsMessage::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIDescribeEventsMessage::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIDescribeEventsMessage::getVersionLabel() const {
    return m_version_label;
}
void OAIDescribeEventsMessage::setVersionLabel(const QString &version_label) {
    m_version_label = version_label;
    m_version_label_isSet = true;
}

bool OAIDescribeEventsMessage::is_version_label_Set() const{
    return m_version_label_isSet;
}

bool OAIDescribeEventsMessage::is_version_label_Valid() const{
    return m_version_label_isValid;
}

QString OAIDescribeEventsMessage::getTemplateName() const {
    return m_template_name;
}
void OAIDescribeEventsMessage::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIDescribeEventsMessage::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIDescribeEventsMessage::is_template_name_Valid() const{
    return m_template_name_isValid;
}

QString OAIDescribeEventsMessage::getEnvironmentId() const {
    return m_environment_id;
}
void OAIDescribeEventsMessage::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIDescribeEventsMessage::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIDescribeEventsMessage::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIDescribeEventsMessage::getEnvironmentName() const {
    return m_environment_name;
}
void OAIDescribeEventsMessage::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIDescribeEventsMessage::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIDescribeEventsMessage::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAIDescribeEventsMessage::getPlatformArn() const {
    return m_platform_arn;
}
void OAIDescribeEventsMessage::setPlatformArn(const QString &platform_arn) {
    m_platform_arn = platform_arn;
    m_platform_arn_isSet = true;
}

bool OAIDescribeEventsMessage::is_platform_arn_Set() const{
    return m_platform_arn_isSet;
}

bool OAIDescribeEventsMessage::is_platform_arn_Valid() const{
    return m_platform_arn_isValid;
}

QString OAIDescribeEventsMessage::getRequestId() const {
    return m_request_id;
}
void OAIDescribeEventsMessage::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeEventsMessage::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeEventsMessage::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIEventSeverity OAIDescribeEventsMessage::getSeverity() const {
    return m_severity;
}
void OAIDescribeEventsMessage::setSeverity(const OAIEventSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIDescribeEventsMessage::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIDescribeEventsMessage::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAIDescribeEventsMessage::getStartTime() const {
    return m_start_time;
}
void OAIDescribeEventsMessage::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeEventsMessage::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeEventsMessage::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeEventsMessage::getEndTime() const {
    return m_end_time;
}
void OAIDescribeEventsMessage::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeEventsMessage::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeEventsMessage::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDescribeEventsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeEventsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeEventsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeEventsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeEventsMessage::getNextToken() const {
    return m_next_token;
}
void OAIDescribeEventsMessage::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeEventsMessage::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeEventsMessage::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeEventsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEventsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
