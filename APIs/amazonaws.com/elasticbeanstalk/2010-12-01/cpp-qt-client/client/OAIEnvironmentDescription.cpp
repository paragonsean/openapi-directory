/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentDescription::OAIEnvironmentDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentDescription::OAIEnvironmentDescription() {
    this->initializeModel();
}

OAIEnvironmentDescription::~OAIEnvironmentDescription() {}

void OAIEnvironmentDescription::initializeModel() {

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_version_label_isSet = false;
    m_version_label_isValid = false;

    m_solution_stack_name_isSet = false;
    m_solution_stack_name_isValid = false;

    m_platform_arn_isSet = false;
    m_platform_arn_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_abortable_operation_in_progress_isSet = false;
    m_abortable_operation_in_progress_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_environment_links_isSet = false;
    m_environment_links_isValid = false;

    m_environment_arn_isSet = false;
    m_environment_arn_isValid = false;

    m_operations_role_isSet = false;
    m_operations_role_isValid = false;
}

void OAIEnvironmentDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentDescription::fromJsonObject(QJsonObject json) {

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_version_label_isValid = ::OpenAPI::fromJsonValue(m_version_label, json[QString("VersionLabel")]);
    m_version_label_isSet = !json[QString("VersionLabel")].isNull() && m_version_label_isValid;

    m_solution_stack_name_isValid = ::OpenAPI::fromJsonValue(m_solution_stack_name, json[QString("SolutionStackName")]);
    m_solution_stack_name_isSet = !json[QString("SolutionStackName")].isNull() && m_solution_stack_name_isValid;

    m_platform_arn_isValid = ::OpenAPI::fromJsonValue(m_platform_arn, json[QString("PlatformArn")]);
    m_platform_arn_isSet = !json[QString("PlatformArn")].isNull() && m_platform_arn_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("EndpointURL")]);
    m_endpoint_url_isSet = !json[QString("EndpointURL")].isNull() && m_endpoint_url_isValid;

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("CNAME")]);
    m_cname_isSet = !json[QString("CNAME")].isNull() && m_cname_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_abortable_operation_in_progress_isValid = ::OpenAPI::fromJsonValue(m_abortable_operation_in_progress, json[QString("AbortableOperationInProgress")]);
    m_abortable_operation_in_progress_isSet = !json[QString("AbortableOperationInProgress")].isNull() && m_abortable_operation_in_progress_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("Health")]);
    m_health_isSet = !json[QString("Health")].isNull() && m_health_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("Tier")]);
    m_tier_isSet = !json[QString("Tier")].isNull() && m_tier_isValid;

    m_environment_links_isValid = ::OpenAPI::fromJsonValue(m_environment_links, json[QString("EnvironmentLinks")]);
    m_environment_links_isSet = !json[QString("EnvironmentLinks")].isNull() && m_environment_links_isValid;

    m_environment_arn_isValid = ::OpenAPI::fromJsonValue(m_environment_arn, json[QString("EnvironmentArn")]);
    m_environment_arn_isSet = !json[QString("EnvironmentArn")].isNull() && m_environment_arn_isValid;

    m_operations_role_isValid = ::OpenAPI::fromJsonValue(m_operations_role, json[QString("OperationsRole")]);
    m_operations_role_isSet = !json[QString("OperationsRole")].isNull() && m_operations_role_isValid;
}

QString OAIEnvironmentDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_version_label_isSet) {
        obj.insert(QString("VersionLabel"), ::OpenAPI::toJsonValue(m_version_label));
    }
    if (m_solution_stack_name_isSet) {
        obj.insert(QString("SolutionStackName"), ::OpenAPI::toJsonValue(m_solution_stack_name));
    }
    if (m_platform_arn_isSet) {
        obj.insert(QString("PlatformArn"), ::OpenAPI::toJsonValue(m_platform_arn));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("EndpointURL"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_cname_isSet) {
        obj.insert(QString("CNAME"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_abortable_operation_in_progress_isSet) {
        obj.insert(QString("AbortableOperationInProgress"), ::OpenAPI::toJsonValue(m_abortable_operation_in_progress));
    }
    if (m_health.isSet()) {
        obj.insert(QString("Health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_tier.isSet()) {
        obj.insert(QString("Tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_environment_links.isSet()) {
        obj.insert(QString("EnvironmentLinks"), ::OpenAPI::toJsonValue(m_environment_links));
    }
    if (m_environment_arn_isSet) {
        obj.insert(QString("EnvironmentArn"), ::OpenAPI::toJsonValue(m_environment_arn));
    }
    if (m_operations_role_isSet) {
        obj.insert(QString("OperationsRole"), ::OpenAPI::toJsonValue(m_operations_role));
    }
    return obj;
}

QString OAIEnvironmentDescription::getEnvironmentName() const {
    return m_environment_name;
}
void OAIEnvironmentDescription::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIEnvironmentDescription::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIEnvironmentDescription::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAIEnvironmentDescription::getEnvironmentId() const {
    return m_environment_id;
}
void OAIEnvironmentDescription::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIEnvironmentDescription::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIEnvironmentDescription::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIEnvironmentDescription::getApplicationName() const {
    return m_application_name;
}
void OAIEnvironmentDescription::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIEnvironmentDescription::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIEnvironmentDescription::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIEnvironmentDescription::getVersionLabel() const {
    return m_version_label;
}
void OAIEnvironmentDescription::setVersionLabel(const QString &version_label) {
    m_version_label = version_label;
    m_version_label_isSet = true;
}

bool OAIEnvironmentDescription::is_version_label_Set() const{
    return m_version_label_isSet;
}

bool OAIEnvironmentDescription::is_version_label_Valid() const{
    return m_version_label_isValid;
}

QString OAIEnvironmentDescription::getSolutionStackName() const {
    return m_solution_stack_name;
}
void OAIEnvironmentDescription::setSolutionStackName(const QString &solution_stack_name) {
    m_solution_stack_name = solution_stack_name;
    m_solution_stack_name_isSet = true;
}

bool OAIEnvironmentDescription::is_solution_stack_name_Set() const{
    return m_solution_stack_name_isSet;
}

bool OAIEnvironmentDescription::is_solution_stack_name_Valid() const{
    return m_solution_stack_name_isValid;
}

QString OAIEnvironmentDescription::getPlatformArn() const {
    return m_platform_arn;
}
void OAIEnvironmentDescription::setPlatformArn(const QString &platform_arn) {
    m_platform_arn = platform_arn;
    m_platform_arn_isSet = true;
}

bool OAIEnvironmentDescription::is_platform_arn_Set() const{
    return m_platform_arn_isSet;
}

bool OAIEnvironmentDescription::is_platform_arn_Valid() const{
    return m_platform_arn_isValid;
}

QString OAIEnvironmentDescription::getTemplateName() const {
    return m_template_name;
}
void OAIEnvironmentDescription::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIEnvironmentDescription::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIEnvironmentDescription::is_template_name_Valid() const{
    return m_template_name_isValid;
}

QString OAIEnvironmentDescription::getDescription() const {
    return m_description;
}
void OAIEnvironmentDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnvironmentDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnvironmentDescription::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEnvironmentDescription::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIEnvironmentDescription::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIEnvironmentDescription::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIEnvironmentDescription::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIEnvironmentDescription::getCname() const {
    return m_cname;
}
void OAIEnvironmentDescription::setCname(const QString &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAIEnvironmentDescription::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAIEnvironmentDescription::is_cname_Valid() const{
    return m_cname_isValid;
}

QDateTime OAIEnvironmentDescription::getDateCreated() const {
    return m_date_created;
}
void OAIEnvironmentDescription::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIEnvironmentDescription::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIEnvironmentDescription::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIEnvironmentDescription::getDateUpdated() const {
    return m_date_updated;
}
void OAIEnvironmentDescription::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIEnvironmentDescription::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIEnvironmentDescription::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

OAIEnvironmentStatus OAIEnvironmentDescription::getStatus() const {
    return m_status;
}
void OAIEnvironmentDescription::setStatus(const OAIEnvironmentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEnvironmentDescription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEnvironmentDescription::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEnvironmentDescription::getAbortableOperationInProgress() const {
    return m_abortable_operation_in_progress;
}
void OAIEnvironmentDescription::setAbortableOperationInProgress(const bool &abortable_operation_in_progress) {
    m_abortable_operation_in_progress = abortable_operation_in_progress;
    m_abortable_operation_in_progress_isSet = true;
}

bool OAIEnvironmentDescription::is_abortable_operation_in_progress_Set() const{
    return m_abortable_operation_in_progress_isSet;
}

bool OAIEnvironmentDescription::is_abortable_operation_in_progress_Valid() const{
    return m_abortable_operation_in_progress_isValid;
}

OAIEnvironmentHealth OAIEnvironmentDescription::getHealth() const {
    return m_health;
}
void OAIEnvironmentDescription::setHealth(const OAIEnvironmentHealth &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIEnvironmentDescription::is_health_Set() const{
    return m_health_isSet;
}

bool OAIEnvironmentDescription::is_health_Valid() const{
    return m_health_isValid;
}

OAIEnvironmentHealthStatus OAIEnvironmentDescription::getHealthStatus() const {
    return m_health_status;
}
void OAIEnvironmentDescription::setHealthStatus(const OAIEnvironmentHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIEnvironmentDescription::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIEnvironmentDescription::is_health_status_Valid() const{
    return m_health_status_isValid;
}

OAIEnvironmentDescription_Resources OAIEnvironmentDescription::getResources() const {
    return m_resources;
}
void OAIEnvironmentDescription::setResources(const OAIEnvironmentDescription_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIEnvironmentDescription::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIEnvironmentDescription::is_resources_Valid() const{
    return m_resources_isValid;
}

OAIEnvironmentDescription_Tier OAIEnvironmentDescription::getTier() const {
    return m_tier;
}
void OAIEnvironmentDescription::setTier(const OAIEnvironmentDescription_Tier &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIEnvironmentDescription::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIEnvironmentDescription::is_tier_Valid() const{
    return m_tier_isValid;
}

QList OAIEnvironmentDescription::getEnvironmentLinks() const {
    return m_environment_links;
}
void OAIEnvironmentDescription::setEnvironmentLinks(const QList &environment_links) {
    m_environment_links = environment_links;
    m_environment_links_isSet = true;
}

bool OAIEnvironmentDescription::is_environment_links_Set() const{
    return m_environment_links_isSet;
}

bool OAIEnvironmentDescription::is_environment_links_Valid() const{
    return m_environment_links_isValid;
}

QString OAIEnvironmentDescription::getEnvironmentArn() const {
    return m_environment_arn;
}
void OAIEnvironmentDescription::setEnvironmentArn(const QString &environment_arn) {
    m_environment_arn = environment_arn;
    m_environment_arn_isSet = true;
}

bool OAIEnvironmentDescription::is_environment_arn_Set() const{
    return m_environment_arn_isSet;
}

bool OAIEnvironmentDescription::is_environment_arn_Valid() const{
    return m_environment_arn_isValid;
}

QString OAIEnvironmentDescription::getOperationsRole() const {
    return m_operations_role;
}
void OAIEnvironmentDescription::setOperationsRole(const QString &operations_role) {
    m_operations_role = operations_role;
    m_operations_role_isSet = true;
}

bool OAIEnvironmentDescription::is_operations_role_Set() const{
    return m_operations_role_isSet;
}

bool OAIEnvironmentDescription::is_operations_role_Valid() const{
    return m_operations_role_isValid;
}

bool OAIEnvironmentDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abortable_operation_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
