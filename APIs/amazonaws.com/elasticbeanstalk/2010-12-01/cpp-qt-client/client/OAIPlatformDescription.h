/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlatformDescription.h
 *
 * Detailed information about a platform version.
 */

#ifndef OAIPlatformDescription_H
#define OAIPlatformDescription_H

#include <QJsonObject>

#include "OAIPlatformStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlatformDescription : public OAIObject {
public:
    OAIPlatformDescription();
    OAIPlatformDescription(QString json);
    ~OAIPlatformDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPlatformArn() const;
    void setPlatformArn(const QString &platform_arn);
    bool is_platform_arn_Set() const;
    bool is_platform_arn_Valid() const;

    QString getPlatformOwner() const;
    void setPlatformOwner(const QString &platform_owner);
    bool is_platform_owner_Set() const;
    bool is_platform_owner_Valid() const;

    QString getPlatformName() const;
    void setPlatformName(const QString &platform_name);
    bool is_platform_name_Set() const;
    bool is_platform_name_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    QString getSolutionStackName() const;
    void setSolutionStackName(const QString &solution_stack_name);
    bool is_solution_stack_name_Set() const;
    bool is_solution_stack_name_Valid() const;

    OAIPlatformStatus getPlatformStatus() const;
    void setPlatformStatus(const OAIPlatformStatus &platform_status);
    bool is_platform_status_Set() const;
    bool is_platform_status_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getPlatformCategory() const;
    void setPlatformCategory(const QString &platform_category);
    bool is_platform_category_Set() const;
    bool is_platform_category_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getMaintainer() const;
    void setMaintainer(const QString &maintainer);
    bool is_maintainer_Set() const;
    bool is_maintainer_Valid() const;

    QString getOperatingSystemName() const;
    void setOperatingSystemName(const QString &operating_system_name);
    bool is_operating_system_name_Set() const;
    bool is_operating_system_name_Valid() const;

    QString getOperatingSystemVersion() const;
    void setOperatingSystemVersion(const QString &operating_system_version);
    bool is_operating_system_version_Set() const;
    bool is_operating_system_version_Valid() const;

    QList getProgrammingLanguages() const;
    void setProgrammingLanguages(const QList &programming_languages);
    bool is_programming_languages_Set() const;
    bool is_programming_languages_Valid() const;

    QList getFrameworks() const;
    void setFrameworks(const QList &frameworks);
    bool is_frameworks_Set() const;
    bool is_frameworks_Valid() const;

    QList getCustomAmiList() const;
    void setCustomAmiList(const QList &custom_ami_list);
    bool is_custom_ami_list_Set() const;
    bool is_custom_ami_list_Valid() const;

    QList getSupportedTierList() const;
    void setSupportedTierList(const QList &supported_tier_list);
    bool is_supported_tier_list_Set() const;
    bool is_supported_tier_list_Valid() const;

    QList getSupportedAddonList() const;
    void setSupportedAddonList(const QList &supported_addon_list);
    bool is_supported_addon_list_Set() const;
    bool is_supported_addon_list_Valid() const;

    QString getPlatformLifecycleState() const;
    void setPlatformLifecycleState(const QString &platform_lifecycle_state);
    bool is_platform_lifecycle_state_Set() const;
    bool is_platform_lifecycle_state_Valid() const;

    QString getPlatformBranchName() const;
    void setPlatformBranchName(const QString &platform_branch_name);
    bool is_platform_branch_name_Set() const;
    bool is_platform_branch_name_Valid() const;

    QString getPlatformBranchLifecycleState() const;
    void setPlatformBranchLifecycleState(const QString &platform_branch_lifecycle_state);
    bool is_platform_branch_lifecycle_state_Set() const;
    bool is_platform_branch_lifecycle_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_platform_arn;
    bool m_platform_arn_isSet;
    bool m_platform_arn_isValid;

    QString m_platform_owner;
    bool m_platform_owner_isSet;
    bool m_platform_owner_isValid;

    QString m_platform_name;
    bool m_platform_name_isSet;
    bool m_platform_name_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    QString m_solution_stack_name;
    bool m_solution_stack_name_isSet;
    bool m_solution_stack_name_isValid;

    OAIPlatformStatus m_platform_status;
    bool m_platform_status_isSet;
    bool m_platform_status_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_platform_category;
    bool m_platform_category_isSet;
    bool m_platform_category_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_maintainer;
    bool m_maintainer_isSet;
    bool m_maintainer_isValid;

    QString m_operating_system_name;
    bool m_operating_system_name_isSet;
    bool m_operating_system_name_isValid;

    QString m_operating_system_version;
    bool m_operating_system_version_isSet;
    bool m_operating_system_version_isValid;

    QList m_programming_languages;
    bool m_programming_languages_isSet;
    bool m_programming_languages_isValid;

    QList m_frameworks;
    bool m_frameworks_isSet;
    bool m_frameworks_isValid;

    QList m_custom_ami_list;
    bool m_custom_ami_list_isSet;
    bool m_custom_ami_list_isValid;

    QList m_supported_tier_list;
    bool m_supported_tier_list_isSet;
    bool m_supported_tier_list_isValid;

    QList m_supported_addon_list;
    bool m_supported_addon_list_isSet;
    bool m_supported_addon_list_isValid;

    QString m_platform_lifecycle_state;
    bool m_platform_lifecycle_state_isSet;
    bool m_platform_lifecycle_state_isValid;

    QString m_platform_branch_name;
    bool m_platform_branch_name_isSet;
    bool m_platform_branch_name_isValid;

    QString m_platform_branch_lifecycle_state;
    bool m_platform_branch_lifecycle_state_isSet;
    bool m_platform_branch_lifecycle_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlatformDescription)

#endif // OAIPlatformDescription_H
