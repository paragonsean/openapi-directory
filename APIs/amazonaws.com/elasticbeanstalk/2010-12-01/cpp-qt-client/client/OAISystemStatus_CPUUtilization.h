/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISystemStatus_CPUUtilization.h
 *
 * 
 */

#ifndef OAISystemStatus_CPUUtilization_H
#define OAISystemStatus_CPUUtilization_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISystemStatus_CPUUtilization : public OAIObject {
public:
    OAISystemStatus_CPUUtilization();
    OAISystemStatus_CPUUtilization(QString json);
    ~OAISystemStatus_CPUUtilization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getUser() const;
    void setUser(const double &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    double getNice() const;
    void setNice(const double &nice);
    bool is_nice_Set() const;
    bool is_nice_Valid() const;

    double getSystem() const;
    void setSystem(const double &system);
    bool is_system_Set() const;
    bool is_system_Valid() const;

    double getIdle() const;
    void setIdle(const double &idle);
    bool is_idle_Set() const;
    bool is_idle_Valid() const;

    double getIoWait() const;
    void setIoWait(const double &io_wait);
    bool is_io_wait_Set() const;
    bool is_io_wait_Valid() const;

    double getIrq() const;
    void setIrq(const double &irq);
    bool is_irq_Set() const;
    bool is_irq_Valid() const;

    double getSoftIrq() const;
    void setSoftIrq(const double &soft_irq);
    bool is_soft_irq_Set() const;
    bool is_soft_irq_Valid() const;

    double getPrivileged() const;
    void setPrivileged(const double &privileged);
    bool is_privileged_Set() const;
    bool is_privileged_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    double m_nice;
    bool m_nice_isSet;
    bool m_nice_isValid;

    double m_system;
    bool m_system_isSet;
    bool m_system_isValid;

    double m_idle;
    bool m_idle_isSet;
    bool m_idle_isValid;

    double m_io_wait;
    bool m_io_wait_isSet;
    bool m_io_wait_isValid;

    double m_irq;
    bool m_irq_isSet;
    bool m_irq_isValid;

    double m_soft_irq;
    bool m_soft_irq_isSet;
    bool m_soft_irq_isValid;

    double m_privileged;
    bool m_privileged_isSet;
    bool m_privileged_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISystemStatus_CPUUtilization)

#endif // OAISystemStatus_CPUUtilization_H
