/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources() {
    this->initializeModel();
}

OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::~OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources() {}

void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::initializeModel() {

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_auto_scaling_groups_isSet = false;
    m_auto_scaling_groups_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_launch_configurations_isSet = false;
    m_launch_configurations_isValid = false;

    m_launch_templates_isSet = false;
    m_launch_templates_isValid = false;

    m_load_balancers_isSet = false;
    m_load_balancers_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;

    m_queues_isSet = false;
    m_queues_isValid = false;
}

void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::fromJsonObject(QJsonObject json) {

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("EnvironmentName")]);
    m_environment_name_isSet = !json[QString("EnvironmentName")].isNull() && m_environment_name_isValid;

    m_auto_scaling_groups_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_groups, json[QString("AutoScalingGroups")]);
    m_auto_scaling_groups_isSet = !json[QString("AutoScalingGroups")].isNull() && m_auto_scaling_groups_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("Instances")]);
    m_instances_isSet = !json[QString("Instances")].isNull() && m_instances_isValid;

    m_launch_configurations_isValid = ::OpenAPI::fromJsonValue(m_launch_configurations, json[QString("LaunchConfigurations")]);
    m_launch_configurations_isSet = !json[QString("LaunchConfigurations")].isNull() && m_launch_configurations_isValid;

    m_launch_templates_isValid = ::OpenAPI::fromJsonValue(m_launch_templates, json[QString("LaunchTemplates")]);
    m_launch_templates_isSet = !json[QString("LaunchTemplates")].isNull() && m_launch_templates_isValid;

    m_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_load_balancers, json[QString("LoadBalancers")]);
    m_load_balancers_isSet = !json[QString("LoadBalancers")].isNull() && m_load_balancers_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("Triggers")]);
    m_triggers_isSet = !json[QString("Triggers")].isNull() && m_triggers_isValid;

    m_queues_isValid = ::OpenAPI::fromJsonValue(m_queues, json[QString("Queues")]);
    m_queues_isSet = !json[QString("Queues")].isNull() && m_queues_isValid;
}

QString OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_name_isSet) {
        obj.insert(QString("EnvironmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_auto_scaling_groups.isSet()) {
        obj.insert(QString("AutoScalingGroups"), ::OpenAPI::toJsonValue(m_auto_scaling_groups));
    }
    if (m_instances.isSet()) {
        obj.insert(QString("Instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_launch_configurations.isSet()) {
        obj.insert(QString("LaunchConfigurations"), ::OpenAPI::toJsonValue(m_launch_configurations));
    }
    if (m_launch_templates.isSet()) {
        obj.insert(QString("LaunchTemplates"), ::OpenAPI::toJsonValue(m_launch_templates));
    }
    if (m_load_balancers.isSet()) {
        obj.insert(QString("LoadBalancers"), ::OpenAPI::toJsonValue(m_load_balancers));
    }
    if (m_triggers.isSet()) {
        obj.insert(QString("Triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    if (m_queues.isSet()) {
        obj.insert(QString("Queues"), ::OpenAPI::toJsonValue(m_queues));
    }
    return obj;
}

QString OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getEnvironmentName() const {
    return m_environment_name;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getAutoScalingGroups() const {
    return m_auto_scaling_groups;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setAutoScalingGroups(const QList &auto_scaling_groups) {
    m_auto_scaling_groups = auto_scaling_groups;
    m_auto_scaling_groups_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_auto_scaling_groups_Set() const{
    return m_auto_scaling_groups_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_auto_scaling_groups_Valid() const{
    return m_auto_scaling_groups_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getInstances() const {
    return m_instances;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_instances_Valid() const{
    return m_instances_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getLaunchConfigurations() const {
    return m_launch_configurations;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setLaunchConfigurations(const QList &launch_configurations) {
    m_launch_configurations = launch_configurations;
    m_launch_configurations_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_launch_configurations_Set() const{
    return m_launch_configurations_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_launch_configurations_Valid() const{
    return m_launch_configurations_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getLaunchTemplates() const {
    return m_launch_templates;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setLaunchTemplates(const QList &launch_templates) {
    m_launch_templates = launch_templates;
    m_launch_templates_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_launch_templates_Set() const{
    return m_launch_templates_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_launch_templates_Valid() const{
    return m_launch_templates_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getLoadBalancers() const {
    return m_load_balancers;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setLoadBalancers(const QList &load_balancers) {
    m_load_balancers = load_balancers;
    m_load_balancers_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_load_balancers_Set() const{
    return m_load_balancers_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_load_balancers_Valid() const{
    return m_load_balancers_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getTriggers() const {
    return m_triggers;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setTriggers(const QList &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_triggers_Valid() const{
    return m_triggers_isValid;
}

QList OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::getQueues() const {
    return m_queues;
}
void OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::setQueues(const QList &queues) {
    m_queues = queues;
    m_queues_isSet = true;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_queues_Set() const{
    return m_queues_isSet;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::is_queues_Valid() const{
    return m_queues_isValid;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queues.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentResourceDescriptionsMessage_EnvironmentResources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
