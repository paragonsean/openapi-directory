/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformSummary::OAIPlatformSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformSummary::OAIPlatformSummary() {
    this->initializeModel();
}

OAIPlatformSummary::~OAIPlatformSummary() {}

void OAIPlatformSummary::initializeModel() {

    m_platform_arn_isSet = false;
    m_platform_arn_isValid = false;

    m_platform_owner_isSet = false;
    m_platform_owner_isValid = false;

    m_platform_status_isSet = false;
    m_platform_status_isValid = false;

    m_platform_category_isSet = false;
    m_platform_category_isValid = false;

    m_operating_system_name_isSet = false;
    m_operating_system_name_isValid = false;

    m_operating_system_version_isSet = false;
    m_operating_system_version_isValid = false;

    m_supported_tier_list_isSet = false;
    m_supported_tier_list_isValid = false;

    m_supported_addon_list_isSet = false;
    m_supported_addon_list_isValid = false;

    m_platform_lifecycle_state_isSet = false;
    m_platform_lifecycle_state_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_platform_branch_name_isSet = false;
    m_platform_branch_name_isValid = false;

    m_platform_branch_lifecycle_state_isSet = false;
    m_platform_branch_lifecycle_state_isValid = false;
}

void OAIPlatformSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformSummary::fromJsonObject(QJsonObject json) {

    m_platform_arn_isValid = ::OpenAPI::fromJsonValue(m_platform_arn, json[QString("PlatformArn")]);
    m_platform_arn_isSet = !json[QString("PlatformArn")].isNull() && m_platform_arn_isValid;

    m_platform_owner_isValid = ::OpenAPI::fromJsonValue(m_platform_owner, json[QString("PlatformOwner")]);
    m_platform_owner_isSet = !json[QString("PlatformOwner")].isNull() && m_platform_owner_isValid;

    m_platform_status_isValid = ::OpenAPI::fromJsonValue(m_platform_status, json[QString("PlatformStatus")]);
    m_platform_status_isSet = !json[QString("PlatformStatus")].isNull() && m_platform_status_isValid;

    m_platform_category_isValid = ::OpenAPI::fromJsonValue(m_platform_category, json[QString("PlatformCategory")]);
    m_platform_category_isSet = !json[QString("PlatformCategory")].isNull() && m_platform_category_isValid;

    m_operating_system_name_isValid = ::OpenAPI::fromJsonValue(m_operating_system_name, json[QString("OperatingSystemName")]);
    m_operating_system_name_isSet = !json[QString("OperatingSystemName")].isNull() && m_operating_system_name_isValid;

    m_operating_system_version_isValid = ::OpenAPI::fromJsonValue(m_operating_system_version, json[QString("OperatingSystemVersion")]);
    m_operating_system_version_isSet = !json[QString("OperatingSystemVersion")].isNull() && m_operating_system_version_isValid;

    m_supported_tier_list_isValid = ::OpenAPI::fromJsonValue(m_supported_tier_list, json[QString("SupportedTierList")]);
    m_supported_tier_list_isSet = !json[QString("SupportedTierList")].isNull() && m_supported_tier_list_isValid;

    m_supported_addon_list_isValid = ::OpenAPI::fromJsonValue(m_supported_addon_list, json[QString("SupportedAddonList")]);
    m_supported_addon_list_isSet = !json[QString("SupportedAddonList")].isNull() && m_supported_addon_list_isValid;

    m_platform_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_platform_lifecycle_state, json[QString("PlatformLifecycleState")]);
    m_platform_lifecycle_state_isSet = !json[QString("PlatformLifecycleState")].isNull() && m_platform_lifecycle_state_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("PlatformVersion")]);
    m_platform_version_isSet = !json[QString("PlatformVersion")].isNull() && m_platform_version_isValid;

    m_platform_branch_name_isValid = ::OpenAPI::fromJsonValue(m_platform_branch_name, json[QString("PlatformBranchName")]);
    m_platform_branch_name_isSet = !json[QString("PlatformBranchName")].isNull() && m_platform_branch_name_isValid;

    m_platform_branch_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_platform_branch_lifecycle_state, json[QString("PlatformBranchLifecycleState")]);
    m_platform_branch_lifecycle_state_isSet = !json[QString("PlatformBranchLifecycleState")].isNull() && m_platform_branch_lifecycle_state_isValid;
}

QString OAIPlatformSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_arn_isSet) {
        obj.insert(QString("PlatformArn"), ::OpenAPI::toJsonValue(m_platform_arn));
    }
    if (m_platform_owner_isSet) {
        obj.insert(QString("PlatformOwner"), ::OpenAPI::toJsonValue(m_platform_owner));
    }
    if (m_platform_status.isSet()) {
        obj.insert(QString("PlatformStatus"), ::OpenAPI::toJsonValue(m_platform_status));
    }
    if (m_platform_category_isSet) {
        obj.insert(QString("PlatformCategory"), ::OpenAPI::toJsonValue(m_platform_category));
    }
    if (m_operating_system_name_isSet) {
        obj.insert(QString("OperatingSystemName"), ::OpenAPI::toJsonValue(m_operating_system_name));
    }
    if (m_operating_system_version_isSet) {
        obj.insert(QString("OperatingSystemVersion"), ::OpenAPI::toJsonValue(m_operating_system_version));
    }
    if (m_supported_tier_list.isSet()) {
        obj.insert(QString("SupportedTierList"), ::OpenAPI::toJsonValue(m_supported_tier_list));
    }
    if (m_supported_addon_list.isSet()) {
        obj.insert(QString("SupportedAddonList"), ::OpenAPI::toJsonValue(m_supported_addon_list));
    }
    if (m_platform_lifecycle_state_isSet) {
        obj.insert(QString("PlatformLifecycleState"), ::OpenAPI::toJsonValue(m_platform_lifecycle_state));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("PlatformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_platform_branch_name_isSet) {
        obj.insert(QString("PlatformBranchName"), ::OpenAPI::toJsonValue(m_platform_branch_name));
    }
    if (m_platform_branch_lifecycle_state_isSet) {
        obj.insert(QString("PlatformBranchLifecycleState"), ::OpenAPI::toJsonValue(m_platform_branch_lifecycle_state));
    }
    return obj;
}

QString OAIPlatformSummary::getPlatformArn() const {
    return m_platform_arn;
}
void OAIPlatformSummary::setPlatformArn(const QString &platform_arn) {
    m_platform_arn = platform_arn;
    m_platform_arn_isSet = true;
}

bool OAIPlatformSummary::is_platform_arn_Set() const{
    return m_platform_arn_isSet;
}

bool OAIPlatformSummary::is_platform_arn_Valid() const{
    return m_platform_arn_isValid;
}

QString OAIPlatformSummary::getPlatformOwner() const {
    return m_platform_owner;
}
void OAIPlatformSummary::setPlatformOwner(const QString &platform_owner) {
    m_platform_owner = platform_owner;
    m_platform_owner_isSet = true;
}

bool OAIPlatformSummary::is_platform_owner_Set() const{
    return m_platform_owner_isSet;
}

bool OAIPlatformSummary::is_platform_owner_Valid() const{
    return m_platform_owner_isValid;
}

OAIPlatformStatus OAIPlatformSummary::getPlatformStatus() const {
    return m_platform_status;
}
void OAIPlatformSummary::setPlatformStatus(const OAIPlatformStatus &platform_status) {
    m_platform_status = platform_status;
    m_platform_status_isSet = true;
}

bool OAIPlatformSummary::is_platform_status_Set() const{
    return m_platform_status_isSet;
}

bool OAIPlatformSummary::is_platform_status_Valid() const{
    return m_platform_status_isValid;
}

QString OAIPlatformSummary::getPlatformCategory() const {
    return m_platform_category;
}
void OAIPlatformSummary::setPlatformCategory(const QString &platform_category) {
    m_platform_category = platform_category;
    m_platform_category_isSet = true;
}

bool OAIPlatformSummary::is_platform_category_Set() const{
    return m_platform_category_isSet;
}

bool OAIPlatformSummary::is_platform_category_Valid() const{
    return m_platform_category_isValid;
}

QString OAIPlatformSummary::getOperatingSystemName() const {
    return m_operating_system_name;
}
void OAIPlatformSummary::setOperatingSystemName(const QString &operating_system_name) {
    m_operating_system_name = operating_system_name;
    m_operating_system_name_isSet = true;
}

bool OAIPlatformSummary::is_operating_system_name_Set() const{
    return m_operating_system_name_isSet;
}

bool OAIPlatformSummary::is_operating_system_name_Valid() const{
    return m_operating_system_name_isValid;
}

QString OAIPlatformSummary::getOperatingSystemVersion() const {
    return m_operating_system_version;
}
void OAIPlatformSummary::setOperatingSystemVersion(const QString &operating_system_version) {
    m_operating_system_version = operating_system_version;
    m_operating_system_version_isSet = true;
}

bool OAIPlatformSummary::is_operating_system_version_Set() const{
    return m_operating_system_version_isSet;
}

bool OAIPlatformSummary::is_operating_system_version_Valid() const{
    return m_operating_system_version_isValid;
}

QList OAIPlatformSummary::getSupportedTierList() const {
    return m_supported_tier_list;
}
void OAIPlatformSummary::setSupportedTierList(const QList &supported_tier_list) {
    m_supported_tier_list = supported_tier_list;
    m_supported_tier_list_isSet = true;
}

bool OAIPlatformSummary::is_supported_tier_list_Set() const{
    return m_supported_tier_list_isSet;
}

bool OAIPlatformSummary::is_supported_tier_list_Valid() const{
    return m_supported_tier_list_isValid;
}

QList OAIPlatformSummary::getSupportedAddonList() const {
    return m_supported_addon_list;
}
void OAIPlatformSummary::setSupportedAddonList(const QList &supported_addon_list) {
    m_supported_addon_list = supported_addon_list;
    m_supported_addon_list_isSet = true;
}

bool OAIPlatformSummary::is_supported_addon_list_Set() const{
    return m_supported_addon_list_isSet;
}

bool OAIPlatformSummary::is_supported_addon_list_Valid() const{
    return m_supported_addon_list_isValid;
}

QString OAIPlatformSummary::getPlatformLifecycleState() const {
    return m_platform_lifecycle_state;
}
void OAIPlatformSummary::setPlatformLifecycleState(const QString &platform_lifecycle_state) {
    m_platform_lifecycle_state = platform_lifecycle_state;
    m_platform_lifecycle_state_isSet = true;
}

bool OAIPlatformSummary::is_platform_lifecycle_state_Set() const{
    return m_platform_lifecycle_state_isSet;
}

bool OAIPlatformSummary::is_platform_lifecycle_state_Valid() const{
    return m_platform_lifecycle_state_isValid;
}

QString OAIPlatformSummary::getPlatformVersion() const {
    return m_platform_version;
}
void OAIPlatformSummary::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIPlatformSummary::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIPlatformSummary::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIPlatformSummary::getPlatformBranchName() const {
    return m_platform_branch_name;
}
void OAIPlatformSummary::setPlatformBranchName(const QString &platform_branch_name) {
    m_platform_branch_name = platform_branch_name;
    m_platform_branch_name_isSet = true;
}

bool OAIPlatformSummary::is_platform_branch_name_Set() const{
    return m_platform_branch_name_isSet;
}

bool OAIPlatformSummary::is_platform_branch_name_Valid() const{
    return m_platform_branch_name_isValid;
}

QString OAIPlatformSummary::getPlatformBranchLifecycleState() const {
    return m_platform_branch_lifecycle_state;
}
void OAIPlatformSummary::setPlatformBranchLifecycleState(const QString &platform_branch_lifecycle_state) {
    m_platform_branch_lifecycle_state = platform_branch_lifecycle_state;
    m_platform_branch_lifecycle_state_isSet = true;
}

bool OAIPlatformSummary::is_platform_branch_lifecycle_state_Set() const{
    return m_platform_branch_lifecycle_state_isSet;
}

bool OAIPlatformSummary::is_platform_branch_lifecycle_state_Valid() const{
    return m_platform_branch_lifecycle_state_isValid;
}

bool OAIPlatformSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_tier_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_addon_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_branch_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
