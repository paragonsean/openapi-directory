/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchFilter.h
 *
 * &lt;p&gt;Describes criteria to restrict a list of results.&lt;/p&gt; &lt;p&gt;For operators that apply a single value to the attribute, the filter is evaluated as follows: &lt;code&gt;Attribute Operator Values[1]&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some operators, e.g. &lt;code&gt;in&lt;/code&gt;, can apply multiple values. In this case, the filter is evaluated as a logical union (OR) of applications of the operator to the attribute with each one of the values: &lt;code&gt;(Attribute Operator Values[1]) OR (Attribute Operator Values[2]) OR ...&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The valid values for attributes of &lt;code&gt;SearchFilter&lt;/code&gt; depend on the API action. For valid values, see the reference page for the API action you&#39;re calling that takes a &lt;code&gt;SearchFilter&lt;/code&gt; parameter.&lt;/p&gt;
 */

#ifndef OAISearchFilter_H
#define OAISearchFilter_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISearchFilter : public OAIObject {
public:
    OAISearchFilter();
    OAISearchFilter(QString json);
    ~OAISearchFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttribute() const;
    void setAttribute(const QString &attribute);
    bool is_attribute_Set() const;
    bool is_attribute_Valid() const;

    QString getROperator() const;
    void setROperator(const QString &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attribute;
    bool m_attribute_isSet;
    bool m_attribute_isValid;

    QString m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchFilter)

#endif // OAISearchFilter_H
