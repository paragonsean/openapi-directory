/**
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISingleInstanceHealth.h
 *
 * Detailed health information about an Amazon EC2 instance in your Elastic Beanstalk environment.
 */

#ifndef OAISingleInstanceHealth_H
#define OAISingleInstanceHealth_H

#include <QJsonObject>

#include "OAISingleInstanceHealth_ApplicationMetrics.h"
#include "OAISingleInstanceHealth_Deployment.h"
#include "OAISingleInstanceHealth_System.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISingleInstanceHealth_ApplicationMetrics;
class OAISingleInstanceHealth_System;
class OAISingleInstanceHealth_Deployment;

class OAISingleInstanceHealth : public OAIObject {
public:
    OAISingleInstanceHealth();
    OAISingleInstanceHealth(QString json);
    ~OAISingleInstanceHealth() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QString getHealthStatus() const;
    void setHealthStatus(const QString &health_status);
    bool is_health_status_Set() const;
    bool is_health_status_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    QList getCauses() const;
    void setCauses(const QList &causes);
    bool is_causes_Set() const;
    bool is_causes_Valid() const;

    QDateTime getLaunchedAt() const;
    void setLaunchedAt(const QDateTime &launched_at);
    bool is_launched_at_Set() const;
    bool is_launched_at_Valid() const;

    OAISingleInstanceHealth_ApplicationMetrics getApplicationMetrics() const;
    void setApplicationMetrics(const OAISingleInstanceHealth_ApplicationMetrics &application_metrics);
    bool is_application_metrics_Set() const;
    bool is_application_metrics_Valid() const;

    OAISingleInstanceHealth_System getSystem() const;
    void setSystem(const OAISingleInstanceHealth_System &system);
    bool is_system_Set() const;
    bool is_system_Valid() const;

    OAISingleInstanceHealth_Deployment getDeployment() const;
    void setDeployment(const OAISingleInstanceHealth_Deployment &deployment);
    bool is_deployment_Set() const;
    bool is_deployment_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QString m_health_status;
    bool m_health_status_isSet;
    bool m_health_status_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    QList m_causes;
    bool m_causes_isSet;
    bool m_causes_isValid;

    QDateTime m_launched_at;
    bool m_launched_at_isSet;
    bool m_launched_at_isValid;

    OAISingleInstanceHealth_ApplicationMetrics m_application_metrics;
    bool m_application_metrics_isSet;
    bool m_application_metrics_isValid;

    OAISingleInstanceHealth_System m_system;
    bool m_system_isSet;
    bool m_system_isValid;

    OAISingleInstanceHealth_Deployment m_deployment;
    bool m_deployment_isSet;
    bool m_deployment_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISingleInstanceHealth)

#endif // OAISingleInstanceHealth_H
