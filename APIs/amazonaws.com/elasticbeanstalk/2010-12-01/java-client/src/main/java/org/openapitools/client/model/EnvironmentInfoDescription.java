/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EnvironmentInfoType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information retrieved from the Amazon EC2 instances.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentInfoDescription {
  public static final String SERIALIZED_NAME_INFO_TYPE = "InfoType";
  @SerializedName(SERIALIZED_NAME_INFO_TYPE)
  private EnvironmentInfoType infoType;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_ID = "Ec2InstanceId";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_ID)
  private String ec2InstanceId;

  public static final String SERIALIZED_NAME_SAMPLE_TIMESTAMP = "SampleTimestamp";
  @SerializedName(SERIALIZED_NAME_SAMPLE_TIMESTAMP)
  private OffsetDateTime sampleTimestamp;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public EnvironmentInfoDescription() {
  }

  public EnvironmentInfoDescription infoType(EnvironmentInfoType infoType) {
    this.infoType = infoType;
    return this;
  }

  /**
   * Get infoType
   * @return infoType
   */
  @javax.annotation.Nullable
  public EnvironmentInfoType getInfoType() {
    return infoType;
  }

  public void setInfoType(EnvironmentInfoType infoType) {
    this.infoType = infoType;
  }


  public EnvironmentInfoDescription ec2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
    return this;
  }

  /**
   * Get ec2InstanceId
   * @return ec2InstanceId
   */
  @javax.annotation.Nullable
  public String getEc2InstanceId() {
    return ec2InstanceId;
  }

  public void setEc2InstanceId(String ec2InstanceId) {
    this.ec2InstanceId = ec2InstanceId;
  }


  public EnvironmentInfoDescription sampleTimestamp(OffsetDateTime sampleTimestamp) {
    this.sampleTimestamp = sampleTimestamp;
    return this;
  }

  /**
   * Get sampleTimestamp
   * @return sampleTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSampleTimestamp() {
    return sampleTimestamp;
  }

  public void setSampleTimestamp(OffsetDateTime sampleTimestamp) {
    this.sampleTimestamp = sampleTimestamp;
  }


  public EnvironmentInfoDescription message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentInfoDescription environmentInfoDescription = (EnvironmentInfoDescription) o;
    return Objects.equals(this.infoType, environmentInfoDescription.infoType) &&
        Objects.equals(this.ec2InstanceId, environmentInfoDescription.ec2InstanceId) &&
        Objects.equals(this.sampleTimestamp, environmentInfoDescription.sampleTimestamp) &&
        Objects.equals(this.message, environmentInfoDescription.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(infoType, ec2InstanceId, sampleTimestamp, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentInfoDescription {\n");
    sb.append("    infoType: ").append(toIndentedString(infoType)).append("\n");
    sb.append("    ec2InstanceId: ").append(toIndentedString(ec2InstanceId)).append("\n");
    sb.append("    sampleTimestamp: ").append(toIndentedString(sampleTimestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InfoType");
    openapiFields.add("Ec2InstanceId");
    openapiFields.add("SampleTimestamp");
    openapiFields.add("Message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentInfoDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentInfoDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentInfoDescription is not found in the empty JSON string", EnvironmentInfoDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentInfoDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentInfoDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InfoType`
      if (jsonObj.get("InfoType") != null && !jsonObj.get("InfoType").isJsonNull()) {
        EnvironmentInfoType.validateJsonElement(jsonObj.get("InfoType"));
      }
      // validate the optional field `Ec2InstanceId`
      if (jsonObj.get("Ec2InstanceId") != null && !jsonObj.get("Ec2InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Ec2InstanceId"));
      }
      // validate the optional field `SampleTimestamp`
      if (jsonObj.get("SampleTimestamp") != null && !jsonObj.get("SampleTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SampleTimestamp"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentInfoDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentInfoDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentInfoDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentInfoDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentInfoDescription>() {
           @Override
           public void write(JsonWriter out, EnvironmentInfoDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentInfoDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentInfoDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentInfoDescription
   * @throws IOException if the JSON string is invalid with respect to EnvironmentInfoDescription
   */
  public static EnvironmentInfoDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentInfoDescription.class);
  }

  /**
   * Convert an instance of EnvironmentInfoDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

