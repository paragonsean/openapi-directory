/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationMetricsStatusCodes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationMetricsStatusCodes {
  public static final String SERIALIZED_NAME_STATUS2XX = "Status2xx";
  @SerializedName(SERIALIZED_NAME_STATUS2XX)
  private Integer status2xx;

  public static final String SERIALIZED_NAME_STATUS3XX = "Status3xx";
  @SerializedName(SERIALIZED_NAME_STATUS3XX)
  private Integer status3xx;

  public static final String SERIALIZED_NAME_STATUS4XX = "Status4xx";
  @SerializedName(SERIALIZED_NAME_STATUS4XX)
  private Integer status4xx;

  public static final String SERIALIZED_NAME_STATUS5XX = "Status5xx";
  @SerializedName(SERIALIZED_NAME_STATUS5XX)
  private Integer status5xx;

  public ApplicationMetricsStatusCodes() {
  }

  public ApplicationMetricsStatusCodes status2xx(Integer status2xx) {
    this.status2xx = status2xx;
    return this;
  }

  /**
   * Get status2xx
   * @return status2xx
   */
  @javax.annotation.Nullable
  public Integer getStatus2xx() {
    return status2xx;
  }

  public void setStatus2xx(Integer status2xx) {
    this.status2xx = status2xx;
  }


  public ApplicationMetricsStatusCodes status3xx(Integer status3xx) {
    this.status3xx = status3xx;
    return this;
  }

  /**
   * Get status3xx
   * @return status3xx
   */
  @javax.annotation.Nullable
  public Integer getStatus3xx() {
    return status3xx;
  }

  public void setStatus3xx(Integer status3xx) {
    this.status3xx = status3xx;
  }


  public ApplicationMetricsStatusCodes status4xx(Integer status4xx) {
    this.status4xx = status4xx;
    return this;
  }

  /**
   * Get status4xx
   * @return status4xx
   */
  @javax.annotation.Nullable
  public Integer getStatus4xx() {
    return status4xx;
  }

  public void setStatus4xx(Integer status4xx) {
    this.status4xx = status4xx;
  }


  public ApplicationMetricsStatusCodes status5xx(Integer status5xx) {
    this.status5xx = status5xx;
    return this;
  }

  /**
   * Get status5xx
   * @return status5xx
   */
  @javax.annotation.Nullable
  public Integer getStatus5xx() {
    return status5xx;
  }

  public void setStatus5xx(Integer status5xx) {
    this.status5xx = status5xx;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationMetricsStatusCodes applicationMetricsStatusCodes = (ApplicationMetricsStatusCodes) o;
    return Objects.equals(this.status2xx, applicationMetricsStatusCodes.status2xx) &&
        Objects.equals(this.status3xx, applicationMetricsStatusCodes.status3xx) &&
        Objects.equals(this.status4xx, applicationMetricsStatusCodes.status4xx) &&
        Objects.equals(this.status5xx, applicationMetricsStatusCodes.status5xx);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status2xx, status3xx, status4xx, status5xx);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationMetricsStatusCodes {\n");
    sb.append("    status2xx: ").append(toIndentedString(status2xx)).append("\n");
    sb.append("    status3xx: ").append(toIndentedString(status3xx)).append("\n");
    sb.append("    status4xx: ").append(toIndentedString(status4xx)).append("\n");
    sb.append("    status5xx: ").append(toIndentedString(status5xx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Status2xx");
    openapiFields.add("Status3xx");
    openapiFields.add("Status4xx");
    openapiFields.add("Status5xx");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationMetricsStatusCodes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationMetricsStatusCodes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationMetricsStatusCodes is not found in the empty JSON string", ApplicationMetricsStatusCodes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationMetricsStatusCodes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationMetricsStatusCodes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Status2xx`
      if (jsonObj.get("Status2xx") != null && !jsonObj.get("Status2xx").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Status2xx"));
      }
      // validate the optional field `Status3xx`
      if (jsonObj.get("Status3xx") != null && !jsonObj.get("Status3xx").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Status3xx"));
      }
      // validate the optional field `Status4xx`
      if (jsonObj.get("Status4xx") != null && !jsonObj.get("Status4xx").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Status4xx"));
      }
      // validate the optional field `Status5xx`
      if (jsonObj.get("Status5xx") != null && !jsonObj.get("Status5xx").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Status5xx"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationMetricsStatusCodes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationMetricsStatusCodes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationMetricsStatusCodes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationMetricsStatusCodes.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationMetricsStatusCodes>() {
           @Override
           public void write(JsonWriter out, ApplicationMetricsStatusCodes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationMetricsStatusCodes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationMetricsStatusCodes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationMetricsStatusCodes
   * @throws IOException if the JSON string is invalid with respect to ApplicationMetricsStatusCodes
   */
  public static ApplicationMetricsStatusCodes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationMetricsStatusCodes.class);
  }

  /**
   * Convert an instance of ApplicationMetricsStatusCodes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

