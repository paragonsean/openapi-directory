/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeEnvironmentHealthResultApplicationMetrics;
import org.openapitools.client.model.DescribeEnvironmentHealthResultInstancesHealth;
import org.openapitools.client.model.EnvironmentHealth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Health details for an AWS Elastic Beanstalk environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeEnvironmentHealthResult {
  public static final String SERIALIZED_NAME_ENVIRONMENT_NAME = "EnvironmentName";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_NAME)
  private String environmentName;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "HealthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private String healthStatus;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EnvironmentHealth status;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CAUSES = "Causes";
  @SerializedName(SERIALIZED_NAME_CAUSES)
  private List causes;

  public static final String SERIALIZED_NAME_APPLICATION_METRICS = "ApplicationMetrics";
  @SerializedName(SERIALIZED_NAME_APPLICATION_METRICS)
  private DescribeEnvironmentHealthResultApplicationMetrics applicationMetrics;

  public static final String SERIALIZED_NAME_INSTANCES_HEALTH = "InstancesHealth";
  @SerializedName(SERIALIZED_NAME_INSTANCES_HEALTH)
  private DescribeEnvironmentHealthResultInstancesHealth instancesHealth;

  public static final String SERIALIZED_NAME_REFRESHED_AT = "RefreshedAt";
  @SerializedName(SERIALIZED_NAME_REFRESHED_AT)
  private OffsetDateTime refreshedAt;

  public DescribeEnvironmentHealthResult() {
  }

  public DescribeEnvironmentHealthResult environmentName(String environmentName) {
    this.environmentName = environmentName;
    return this;
  }

  /**
   * Get environmentName
   * @return environmentName
   */
  @javax.annotation.Nullable
  public String getEnvironmentName() {
    return environmentName;
  }

  public void setEnvironmentName(String environmentName) {
    this.environmentName = environmentName;
  }


  public DescribeEnvironmentHealthResult healthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Get healthStatus
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public String getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
  }


  public DescribeEnvironmentHealthResult status(EnvironmentHealth status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EnvironmentHealth getStatus() {
    return status;
  }

  public void setStatus(EnvironmentHealth status) {
    this.status = status;
  }


  public DescribeEnvironmentHealthResult color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public DescribeEnvironmentHealthResult causes(List causes) {
    this.causes = causes;
    return this;
  }

  /**
   * Get causes
   * @return causes
   */
  @javax.annotation.Nullable
  public List getCauses() {
    return causes;
  }

  public void setCauses(List causes) {
    this.causes = causes;
  }


  public DescribeEnvironmentHealthResult applicationMetrics(DescribeEnvironmentHealthResultApplicationMetrics applicationMetrics) {
    this.applicationMetrics = applicationMetrics;
    return this;
  }

  /**
   * Get applicationMetrics
   * @return applicationMetrics
   */
  @javax.annotation.Nullable
  public DescribeEnvironmentHealthResultApplicationMetrics getApplicationMetrics() {
    return applicationMetrics;
  }

  public void setApplicationMetrics(DescribeEnvironmentHealthResultApplicationMetrics applicationMetrics) {
    this.applicationMetrics = applicationMetrics;
  }


  public DescribeEnvironmentHealthResult instancesHealth(DescribeEnvironmentHealthResultInstancesHealth instancesHealth) {
    this.instancesHealth = instancesHealth;
    return this;
  }

  /**
   * Get instancesHealth
   * @return instancesHealth
   */
  @javax.annotation.Nullable
  public DescribeEnvironmentHealthResultInstancesHealth getInstancesHealth() {
    return instancesHealth;
  }

  public void setInstancesHealth(DescribeEnvironmentHealthResultInstancesHealth instancesHealth) {
    this.instancesHealth = instancesHealth;
  }


  public DescribeEnvironmentHealthResult refreshedAt(OffsetDateTime refreshedAt) {
    this.refreshedAt = refreshedAt;
    return this;
  }

  /**
   * Get refreshedAt
   * @return refreshedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRefreshedAt() {
    return refreshedAt;
  }

  public void setRefreshedAt(OffsetDateTime refreshedAt) {
    this.refreshedAt = refreshedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeEnvironmentHealthResult describeEnvironmentHealthResult = (DescribeEnvironmentHealthResult) o;
    return Objects.equals(this.environmentName, describeEnvironmentHealthResult.environmentName) &&
        Objects.equals(this.healthStatus, describeEnvironmentHealthResult.healthStatus) &&
        Objects.equals(this.status, describeEnvironmentHealthResult.status) &&
        Objects.equals(this.color, describeEnvironmentHealthResult.color) &&
        Objects.equals(this.causes, describeEnvironmentHealthResult.causes) &&
        Objects.equals(this.applicationMetrics, describeEnvironmentHealthResult.applicationMetrics) &&
        Objects.equals(this.instancesHealth, describeEnvironmentHealthResult.instancesHealth) &&
        Objects.equals(this.refreshedAt, describeEnvironmentHealthResult.refreshedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environmentName, healthStatus, status, color, causes, applicationMetrics, instancesHealth, refreshedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeEnvironmentHealthResult {\n");
    sb.append("    environmentName: ").append(toIndentedString(environmentName)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    causes: ").append(toIndentedString(causes)).append("\n");
    sb.append("    applicationMetrics: ").append(toIndentedString(applicationMetrics)).append("\n");
    sb.append("    instancesHealth: ").append(toIndentedString(instancesHealth)).append("\n");
    sb.append("    refreshedAt: ").append(toIndentedString(refreshedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EnvironmentName");
    openapiFields.add("HealthStatus");
    openapiFields.add("Status");
    openapiFields.add("Color");
    openapiFields.add("Causes");
    openapiFields.add("ApplicationMetrics");
    openapiFields.add("InstancesHealth");
    openapiFields.add("RefreshedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeEnvironmentHealthResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeEnvironmentHealthResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeEnvironmentHealthResult is not found in the empty JSON string", DescribeEnvironmentHealthResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeEnvironmentHealthResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeEnvironmentHealthResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EnvironmentName`
      if (jsonObj.get("EnvironmentName") != null && !jsonObj.get("EnvironmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EnvironmentName"));
      }
      // validate the optional field `HealthStatus`
      if (jsonObj.get("HealthStatus") != null && !jsonObj.get("HealthStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HealthStatus"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        EnvironmentHealth.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Color`
      if (jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Color"));
      }
      // validate the optional field `Causes`
      if (jsonObj.get("Causes") != null && !jsonObj.get("Causes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Causes"));
      }
      // validate the optional field `ApplicationMetrics`
      if (jsonObj.get("ApplicationMetrics") != null && !jsonObj.get("ApplicationMetrics").isJsonNull()) {
        DescribeEnvironmentHealthResultApplicationMetrics.validateJsonElement(jsonObj.get("ApplicationMetrics"));
      }
      // validate the optional field `InstancesHealth`
      if (jsonObj.get("InstancesHealth") != null && !jsonObj.get("InstancesHealth").isJsonNull()) {
        DescribeEnvironmentHealthResultInstancesHealth.validateJsonElement(jsonObj.get("InstancesHealth"));
      }
      // validate the optional field `RefreshedAt`
      if (jsonObj.get("RefreshedAt") != null && !jsonObj.get("RefreshedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RefreshedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeEnvironmentHealthResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeEnvironmentHealthResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeEnvironmentHealthResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeEnvironmentHealthResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeEnvironmentHealthResult>() {
           @Override
           public void write(JsonWriter out, DescribeEnvironmentHealthResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeEnvironmentHealthResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeEnvironmentHealthResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeEnvironmentHealthResult
   * @throws IOException if the JSON string is invalid with respect to DescribeEnvironmentHealthResult
   */
  public static DescribeEnvironmentHealthResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeEnvironmentHealthResult.class);
  }

  /**
   * Convert an instance of DescribeEnvironmentHealthResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

