/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents summary information about the health of an instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html\&quot;&gt;Health Colors and Statuses&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceHealthSummary {
  public static final String SERIALIZED_NAME_NO_DATA = "NoData";
  @SerializedName(SERIALIZED_NAME_NO_DATA)
  private Integer noData;

  public static final String SERIALIZED_NAME_UNKNOWN = "Unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private Integer unknown;

  public static final String SERIALIZED_NAME_PENDING = "Pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_OK = "Ok";
  @SerializedName(SERIALIZED_NAME_OK)
  private Integer ok;

  public static final String SERIALIZED_NAME_INFO = "Info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private Integer info;

  public static final String SERIALIZED_NAME_WARNING = "Warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private Integer warning;

  public static final String SERIALIZED_NAME_DEGRADED = "Degraded";
  @SerializedName(SERIALIZED_NAME_DEGRADED)
  private Integer degraded;

  public static final String SERIALIZED_NAME_SEVERE = "Severe";
  @SerializedName(SERIALIZED_NAME_SEVERE)
  private Integer severe;

  public InstanceHealthSummary() {
  }

  public InstanceHealthSummary noData(Integer noData) {
    this.noData = noData;
    return this;
  }

  /**
   * Get noData
   * @return noData
   */
  @javax.annotation.Nullable
  public Integer getNoData() {
    return noData;
  }

  public void setNoData(Integer noData) {
    this.noData = noData;
  }


  public InstanceHealthSummary unknown(Integer unknown) {
    this.unknown = unknown;
    return this;
  }

  /**
   * Get unknown
   * @return unknown
   */
  @javax.annotation.Nullable
  public Integer getUnknown() {
    return unknown;
  }

  public void setUnknown(Integer unknown) {
    this.unknown = unknown;
  }


  public InstanceHealthSummary pending(Integer pending) {
    this.pending = pending;
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nullable
  public Integer getPending() {
    return pending;
  }

  public void setPending(Integer pending) {
    this.pending = pending;
  }


  public InstanceHealthSummary ok(Integer ok) {
    this.ok = ok;
    return this;
  }

  /**
   * Get ok
   * @return ok
   */
  @javax.annotation.Nullable
  public Integer getOk() {
    return ok;
  }

  public void setOk(Integer ok) {
    this.ok = ok;
  }


  public InstanceHealthSummary info(Integer info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public Integer getInfo() {
    return info;
  }

  public void setInfo(Integer info) {
    this.info = info;
  }


  public InstanceHealthSummary warning(Integer warning) {
    this.warning = warning;
    return this;
  }

  /**
   * Get warning
   * @return warning
   */
  @javax.annotation.Nullable
  public Integer getWarning() {
    return warning;
  }

  public void setWarning(Integer warning) {
    this.warning = warning;
  }


  public InstanceHealthSummary degraded(Integer degraded) {
    this.degraded = degraded;
    return this;
  }

  /**
   * Get degraded
   * @return degraded
   */
  @javax.annotation.Nullable
  public Integer getDegraded() {
    return degraded;
  }

  public void setDegraded(Integer degraded) {
    this.degraded = degraded;
  }


  public InstanceHealthSummary severe(Integer severe) {
    this.severe = severe;
    return this;
  }

  /**
   * Get severe
   * @return severe
   */
  @javax.annotation.Nullable
  public Integer getSevere() {
    return severe;
  }

  public void setSevere(Integer severe) {
    this.severe = severe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceHealthSummary instanceHealthSummary = (InstanceHealthSummary) o;
    return Objects.equals(this.noData, instanceHealthSummary.noData) &&
        Objects.equals(this.unknown, instanceHealthSummary.unknown) &&
        Objects.equals(this.pending, instanceHealthSummary.pending) &&
        Objects.equals(this.ok, instanceHealthSummary.ok) &&
        Objects.equals(this.info, instanceHealthSummary.info) &&
        Objects.equals(this.warning, instanceHealthSummary.warning) &&
        Objects.equals(this.degraded, instanceHealthSummary.degraded) &&
        Objects.equals(this.severe, instanceHealthSummary.severe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(noData, unknown, pending, ok, info, warning, degraded, severe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceHealthSummary {\n");
    sb.append("    noData: ").append(toIndentedString(noData)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    ok: ").append(toIndentedString(ok)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("    degraded: ").append(toIndentedString(degraded)).append("\n");
    sb.append("    severe: ").append(toIndentedString(severe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NoData");
    openapiFields.add("Unknown");
    openapiFields.add("Pending");
    openapiFields.add("Ok");
    openapiFields.add("Info");
    openapiFields.add("Warning");
    openapiFields.add("Degraded");
    openapiFields.add("Severe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceHealthSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceHealthSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceHealthSummary is not found in the empty JSON string", InstanceHealthSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceHealthSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceHealthSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NoData`
      if (jsonObj.get("NoData") != null && !jsonObj.get("NoData").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NoData"));
      }
      // validate the optional field `Unknown`
      if (jsonObj.get("Unknown") != null && !jsonObj.get("Unknown").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Unknown"));
      }
      // validate the optional field `Pending`
      if (jsonObj.get("Pending") != null && !jsonObj.get("Pending").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Pending"));
      }
      // validate the optional field `Ok`
      if (jsonObj.get("Ok") != null && !jsonObj.get("Ok").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Ok"));
      }
      // validate the optional field `Info`
      if (jsonObj.get("Info") != null && !jsonObj.get("Info").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Info"));
      }
      // validate the optional field `Warning`
      if (jsonObj.get("Warning") != null && !jsonObj.get("Warning").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Warning"));
      }
      // validate the optional field `Degraded`
      if (jsonObj.get("Degraded") != null && !jsonObj.get("Degraded").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Degraded"));
      }
      // validate the optional field `Severe`
      if (jsonObj.get("Severe") != null && !jsonObj.get("Severe").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Severe"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceHealthSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceHealthSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceHealthSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceHealthSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceHealthSummary>() {
           @Override
           public void write(JsonWriter out, InstanceHealthSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceHealthSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceHealthSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceHealthSummary
   * @throws IOException if the JSON string is invalid with respect to InstanceHealthSummary
   */
  public static InstanceHealthSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceHealthSummary.class);
  }

  /**
   * Convert an instance of InstanceHealthSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

