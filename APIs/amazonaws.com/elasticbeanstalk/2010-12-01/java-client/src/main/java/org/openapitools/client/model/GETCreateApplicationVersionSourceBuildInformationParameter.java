/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceRepository;
import org.openapitools.client.model.SourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Location of the source code for an application version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETCreateApplicationVersionSourceBuildInformationParameter {
  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceType sourceType;

  public static final String SERIALIZED_NAME_SOURCE_REPOSITORY = "SourceRepository";
  @SerializedName(SERIALIZED_NAME_SOURCE_REPOSITORY)
  private SourceRepository sourceRepository;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION = "SourceLocation";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION)
  private String sourceLocation;

  public GETCreateApplicationVersionSourceBuildInformationParameter() {
  }

  public GETCreateApplicationVersionSourceBuildInformationParameter sourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nonnull
  public SourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
  }


  public GETCreateApplicationVersionSourceBuildInformationParameter sourceRepository(SourceRepository sourceRepository) {
    this.sourceRepository = sourceRepository;
    return this;
  }

  /**
   * Get sourceRepository
   * @return sourceRepository
   */
  @javax.annotation.Nonnull
  public SourceRepository getSourceRepository() {
    return sourceRepository;
  }

  public void setSourceRepository(SourceRepository sourceRepository) {
    this.sourceRepository = sourceRepository;
  }


  public GETCreateApplicationVersionSourceBuildInformationParameter sourceLocation(String sourceLocation) {
    this.sourceLocation = sourceLocation;
    return this;
  }

  /**
   * Get sourceLocation
   * @return sourceLocation
   */
  @javax.annotation.Nonnull
  public String getSourceLocation() {
    return sourceLocation;
  }

  public void setSourceLocation(String sourceLocation) {
    this.sourceLocation = sourceLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETCreateApplicationVersionSourceBuildInformationParameter geTCreateApplicationVersionSourceBuildInformationParameter = (GETCreateApplicationVersionSourceBuildInformationParameter) o;
    return Objects.equals(this.sourceType, geTCreateApplicationVersionSourceBuildInformationParameter.sourceType) &&
        Objects.equals(this.sourceRepository, geTCreateApplicationVersionSourceBuildInformationParameter.sourceRepository) &&
        Objects.equals(this.sourceLocation, geTCreateApplicationVersionSourceBuildInformationParameter.sourceLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceType, sourceRepository, sourceLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETCreateApplicationVersionSourceBuildInformationParameter {\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceRepository: ").append(toIndentedString(sourceRepository)).append("\n");
    sb.append("    sourceLocation: ").append(toIndentedString(sourceLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceType");
    openapiFields.add("SourceRepository");
    openapiFields.add("SourceLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceType");
    openapiRequiredFields.add("SourceRepository");
    openapiRequiredFields.add("SourceLocation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETCreateApplicationVersionSourceBuildInformationParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETCreateApplicationVersionSourceBuildInformationParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETCreateApplicationVersionSourceBuildInformationParameter is not found in the empty JSON string", GETCreateApplicationVersionSourceBuildInformationParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETCreateApplicationVersionSourceBuildInformationParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETCreateApplicationVersionSourceBuildInformationParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GETCreateApplicationVersionSourceBuildInformationParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceType`
      SourceType.validateJsonElement(jsonObj.get("SourceType"));
      // validate the required field `SourceRepository`
      SourceRepository.validateJsonElement(jsonObj.get("SourceRepository"));
      // validate the required field `SourceLocation`
      String.validateJsonElement(jsonObj.get("SourceLocation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETCreateApplicationVersionSourceBuildInformationParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETCreateApplicationVersionSourceBuildInformationParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETCreateApplicationVersionSourceBuildInformationParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETCreateApplicationVersionSourceBuildInformationParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<GETCreateApplicationVersionSourceBuildInformationParameter>() {
           @Override
           public void write(JsonWriter out, GETCreateApplicationVersionSourceBuildInformationParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETCreateApplicationVersionSourceBuildInformationParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETCreateApplicationVersionSourceBuildInformationParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETCreateApplicationVersionSourceBuildInformationParameter
   * @throws IOException if the JSON string is invalid with respect to GETCreateApplicationVersionSourceBuildInformationParameter
   */
  public static GETCreateApplicationVersionSourceBuildInformationParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETCreateApplicationVersionSourceBuildInformationParameter.class);
  }

  /**
   * Convert an instance of GETCreateApplicationVersionSourceBuildInformationParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

