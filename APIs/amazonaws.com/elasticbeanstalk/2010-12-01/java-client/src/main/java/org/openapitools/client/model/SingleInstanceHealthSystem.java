/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SystemStatusCPUUtilization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SingleInstanceHealthSystem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SingleInstanceHealthSystem {
  public static final String SERIALIZED_NAME_CP_U_UTILIZATION = "CPUUtilization";
  @SerializedName(SERIALIZED_NAME_CP_U_UTILIZATION)
  private SystemStatusCPUUtilization cpUUtilization;

  public static final String SERIALIZED_NAME_LOAD_AVERAGE = "LoadAverage";
  @SerializedName(SERIALIZED_NAME_LOAD_AVERAGE)
  private List loadAverage;

  public SingleInstanceHealthSystem() {
  }

  public SingleInstanceHealthSystem cpUUtilization(SystemStatusCPUUtilization cpUUtilization) {
    this.cpUUtilization = cpUUtilization;
    return this;
  }

  /**
   * Get cpUUtilization
   * @return cpUUtilization
   */
  @javax.annotation.Nullable
  public SystemStatusCPUUtilization getCpUUtilization() {
    return cpUUtilization;
  }

  public void setCpUUtilization(SystemStatusCPUUtilization cpUUtilization) {
    this.cpUUtilization = cpUUtilization;
  }


  public SingleInstanceHealthSystem loadAverage(List loadAverage) {
    this.loadAverage = loadAverage;
    return this;
  }

  /**
   * Get loadAverage
   * @return loadAverage
   */
  @javax.annotation.Nullable
  public List getLoadAverage() {
    return loadAverage;
  }

  public void setLoadAverage(List loadAverage) {
    this.loadAverage = loadAverage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleInstanceHealthSystem singleInstanceHealthSystem = (SingleInstanceHealthSystem) o;
    return Objects.equals(this.cpUUtilization, singleInstanceHealthSystem.cpUUtilization) &&
        Objects.equals(this.loadAverage, singleInstanceHealthSystem.loadAverage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpUUtilization, loadAverage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleInstanceHealthSystem {\n");
    sb.append("    cpUUtilization: ").append(toIndentedString(cpUUtilization)).append("\n");
    sb.append("    loadAverage: ").append(toIndentedString(loadAverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CPUUtilization");
    openapiFields.add("LoadAverage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleInstanceHealthSystem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleInstanceHealthSystem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleInstanceHealthSystem is not found in the empty JSON string", SingleInstanceHealthSystem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleInstanceHealthSystem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleInstanceHealthSystem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CPUUtilization`
      if (jsonObj.get("CPUUtilization") != null && !jsonObj.get("CPUUtilization").isJsonNull()) {
        SystemStatusCPUUtilization.validateJsonElement(jsonObj.get("CPUUtilization"));
      }
      // validate the optional field `LoadAverage`
      if (jsonObj.get("LoadAverage") != null && !jsonObj.get("LoadAverage").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LoadAverage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleInstanceHealthSystem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleInstanceHealthSystem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleInstanceHealthSystem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleInstanceHealthSystem.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleInstanceHealthSystem>() {
           @Override
           public void write(JsonWriter out, SingleInstanceHealthSystem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleInstanceHealthSystem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleInstanceHealthSystem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleInstanceHealthSystem
   * @throws IOException if the JSON string is invalid with respect to SingleInstanceHealthSystem
   */
  public static SingleInstanceHealthSystem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleInstanceHealthSystem.class);
  }

  /**
   * Convert an instance of SingleInstanceHealthSystem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

