/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SingleInstanceHealthApplicationMetrics;
import org.openapitools.client.model.SingleInstanceHealthDeployment;
import org.openapitools.client.model.SingleInstanceHealthSystem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed health information about an Amazon EC2 instance in your Elastic Beanstalk environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SingleInstanceHealth {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "HealthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private String healthStatus;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CAUSES = "Causes";
  @SerializedName(SERIALIZED_NAME_CAUSES)
  private List causes;

  public static final String SERIALIZED_NAME_LAUNCHED_AT = "LaunchedAt";
  @SerializedName(SERIALIZED_NAME_LAUNCHED_AT)
  private OffsetDateTime launchedAt;

  public static final String SERIALIZED_NAME_APPLICATION_METRICS = "ApplicationMetrics";
  @SerializedName(SERIALIZED_NAME_APPLICATION_METRICS)
  private SingleInstanceHealthApplicationMetrics applicationMetrics;

  public static final String SERIALIZED_NAME_SYSTEM = "System";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private SingleInstanceHealthSystem system;

  public static final String SERIALIZED_NAME_DEPLOYMENT = "Deployment";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT)
  private SingleInstanceHealthDeployment deployment;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public SingleInstanceHealth() {
  }

  public SingleInstanceHealth instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public SingleInstanceHealth healthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Get healthStatus
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public String getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
  }


  public SingleInstanceHealth color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public SingleInstanceHealth causes(List causes) {
    this.causes = causes;
    return this;
  }

  /**
   * Get causes
   * @return causes
   */
  @javax.annotation.Nullable
  public List getCauses() {
    return causes;
  }

  public void setCauses(List causes) {
    this.causes = causes;
  }


  public SingleInstanceHealth launchedAt(OffsetDateTime launchedAt) {
    this.launchedAt = launchedAt;
    return this;
  }

  /**
   * Get launchedAt
   * @return launchedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLaunchedAt() {
    return launchedAt;
  }

  public void setLaunchedAt(OffsetDateTime launchedAt) {
    this.launchedAt = launchedAt;
  }


  public SingleInstanceHealth applicationMetrics(SingleInstanceHealthApplicationMetrics applicationMetrics) {
    this.applicationMetrics = applicationMetrics;
    return this;
  }

  /**
   * Get applicationMetrics
   * @return applicationMetrics
   */
  @javax.annotation.Nullable
  public SingleInstanceHealthApplicationMetrics getApplicationMetrics() {
    return applicationMetrics;
  }

  public void setApplicationMetrics(SingleInstanceHealthApplicationMetrics applicationMetrics) {
    this.applicationMetrics = applicationMetrics;
  }


  public SingleInstanceHealth system(SingleInstanceHealthSystem system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public SingleInstanceHealthSystem getSystem() {
    return system;
  }

  public void setSystem(SingleInstanceHealthSystem system) {
    this.system = system;
  }


  public SingleInstanceHealth deployment(SingleInstanceHealthDeployment deployment) {
    this.deployment = deployment;
    return this;
  }

  /**
   * Get deployment
   * @return deployment
   */
  @javax.annotation.Nullable
  public SingleInstanceHealthDeployment getDeployment() {
    return deployment;
  }

  public void setDeployment(SingleInstanceHealthDeployment deployment) {
    this.deployment = deployment;
  }


  public SingleInstanceHealth availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public SingleInstanceHealth instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleInstanceHealth singleInstanceHealth = (SingleInstanceHealth) o;
    return Objects.equals(this.instanceId, singleInstanceHealth.instanceId) &&
        Objects.equals(this.healthStatus, singleInstanceHealth.healthStatus) &&
        Objects.equals(this.color, singleInstanceHealth.color) &&
        Objects.equals(this.causes, singleInstanceHealth.causes) &&
        Objects.equals(this.launchedAt, singleInstanceHealth.launchedAt) &&
        Objects.equals(this.applicationMetrics, singleInstanceHealth.applicationMetrics) &&
        Objects.equals(this.system, singleInstanceHealth.system) &&
        Objects.equals(this.deployment, singleInstanceHealth.deployment) &&
        Objects.equals(this.availabilityZone, singleInstanceHealth.availabilityZone) &&
        Objects.equals(this.instanceType, singleInstanceHealth.instanceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, healthStatus, color, causes, launchedAt, applicationMetrics, system, deployment, availabilityZone, instanceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleInstanceHealth {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    causes: ").append(toIndentedString(causes)).append("\n");
    sb.append("    launchedAt: ").append(toIndentedString(launchedAt)).append("\n");
    sb.append("    applicationMetrics: ").append(toIndentedString(applicationMetrics)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    deployment: ").append(toIndentedString(deployment)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceId");
    openapiFields.add("HealthStatus");
    openapiFields.add("Color");
    openapiFields.add("Causes");
    openapiFields.add("LaunchedAt");
    openapiFields.add("ApplicationMetrics");
    openapiFields.add("System");
    openapiFields.add("Deployment");
    openapiFields.add("AvailabilityZone");
    openapiFields.add("InstanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleInstanceHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleInstanceHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleInstanceHealth is not found in the empty JSON string", SingleInstanceHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleInstanceHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleInstanceHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `HealthStatus`
      if (jsonObj.get("HealthStatus") != null && !jsonObj.get("HealthStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HealthStatus"));
      }
      // validate the optional field `Color`
      if (jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Color"));
      }
      // validate the optional field `Causes`
      if (jsonObj.get("Causes") != null && !jsonObj.get("Causes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Causes"));
      }
      // validate the optional field `LaunchedAt`
      if (jsonObj.get("LaunchedAt") != null && !jsonObj.get("LaunchedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LaunchedAt"));
      }
      // validate the optional field `ApplicationMetrics`
      if (jsonObj.get("ApplicationMetrics") != null && !jsonObj.get("ApplicationMetrics").isJsonNull()) {
        SingleInstanceHealthApplicationMetrics.validateJsonElement(jsonObj.get("ApplicationMetrics"));
      }
      // validate the optional field `System`
      if (jsonObj.get("System") != null && !jsonObj.get("System").isJsonNull()) {
        SingleInstanceHealthSystem.validateJsonElement(jsonObj.get("System"));
      }
      // validate the optional field `Deployment`
      if (jsonObj.get("Deployment") != null && !jsonObj.get("Deployment").isJsonNull()) {
        SingleInstanceHealthDeployment.validateJsonElement(jsonObj.get("Deployment"));
      }
      // validate the optional field `AvailabilityZone`
      if (jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleInstanceHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleInstanceHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleInstanceHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleInstanceHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleInstanceHealth>() {
           @Override
           public void write(JsonWriter out, SingleInstanceHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleInstanceHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleInstanceHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleInstanceHealth
   * @throws IOException if the JSON string is invalid with respect to SingleInstanceHealth
   */
  public static SingleInstanceHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleInstanceHealth.class);
  }

  /**
   * Convert an instance of SingleInstanceHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

