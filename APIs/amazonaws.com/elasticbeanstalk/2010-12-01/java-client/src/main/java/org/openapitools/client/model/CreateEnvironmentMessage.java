/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateEnvironmentMessageTier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEnvironmentMessage {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_ENVIRONMENT_NAME = "EnvironmentName";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_NAME)
  private String environmentName;

  public static final String SERIALIZED_NAME_GROUP_NAME = "GroupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CN_A_M_E_PREFIX = "CNAMEPrefix";
  @SerializedName(SERIALIZED_NAME_CN_A_M_E_PREFIX)
  private String cnAMEPrefix;

  public static final String SERIALIZED_NAME_TIER = "Tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private CreateEnvironmentMessageTier tier;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_VERSION_LABEL = "VersionLabel";
  @SerializedName(SERIALIZED_NAME_VERSION_LABEL)
  private String versionLabel;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "TemplateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_SOLUTION_STACK_NAME = "SolutionStackName";
  @SerializedName(SERIALIZED_NAME_SOLUTION_STACK_NAME)
  private String solutionStackName;

  public static final String SERIALIZED_NAME_PLATFORM_ARN = "PlatformArn";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ARN)
  private String platformArn;

  public static final String SERIALIZED_NAME_OPTION_SETTINGS = "OptionSettings";
  @SerializedName(SERIALIZED_NAME_OPTION_SETTINGS)
  private List optionSettings;

  public static final String SERIALIZED_NAME_OPTIONS_TO_REMOVE = "OptionsToRemove";
  @SerializedName(SERIALIZED_NAME_OPTIONS_TO_REMOVE)
  private List optionsToRemove;

  public static final String SERIALIZED_NAME_OPERATIONS_ROLE = "OperationsRole";
  @SerializedName(SERIALIZED_NAME_OPERATIONS_ROLE)
  private String operationsRole;

  public CreateEnvironmentMessage() {
  }

  public CreateEnvironmentMessage applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public CreateEnvironmentMessage environmentName(String environmentName) {
    this.environmentName = environmentName;
    return this;
  }

  /**
   * Get environmentName
   * @return environmentName
   */
  @javax.annotation.Nullable
  public String getEnvironmentName() {
    return environmentName;
  }

  public void setEnvironmentName(String environmentName) {
    this.environmentName = environmentName;
  }


  public CreateEnvironmentMessage groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public CreateEnvironmentMessage description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateEnvironmentMessage cnAMEPrefix(String cnAMEPrefix) {
    this.cnAMEPrefix = cnAMEPrefix;
    return this;
  }

  /**
   * Get cnAMEPrefix
   * @return cnAMEPrefix
   */
  @javax.annotation.Nullable
  public String getCnAMEPrefix() {
    return cnAMEPrefix;
  }

  public void setCnAMEPrefix(String cnAMEPrefix) {
    this.cnAMEPrefix = cnAMEPrefix;
  }


  public CreateEnvironmentMessage tier(CreateEnvironmentMessageTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public CreateEnvironmentMessageTier getTier() {
    return tier;
  }

  public void setTier(CreateEnvironmentMessageTier tier) {
    this.tier = tier;
  }


  public CreateEnvironmentMessage tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateEnvironmentMessage versionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
    return this;
  }

  /**
   * Get versionLabel
   * @return versionLabel
   */
  @javax.annotation.Nullable
  public String getVersionLabel() {
    return versionLabel;
  }

  public void setVersionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
  }


  public CreateEnvironmentMessage templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Get templateName
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public CreateEnvironmentMessage solutionStackName(String solutionStackName) {
    this.solutionStackName = solutionStackName;
    return this;
  }

  /**
   * Get solutionStackName
   * @return solutionStackName
   */
  @javax.annotation.Nullable
  public String getSolutionStackName() {
    return solutionStackName;
  }

  public void setSolutionStackName(String solutionStackName) {
    this.solutionStackName = solutionStackName;
  }


  public CreateEnvironmentMessage platformArn(String platformArn) {
    this.platformArn = platformArn;
    return this;
  }

  /**
   * Get platformArn
   * @return platformArn
   */
  @javax.annotation.Nullable
  public String getPlatformArn() {
    return platformArn;
  }

  public void setPlatformArn(String platformArn) {
    this.platformArn = platformArn;
  }


  public CreateEnvironmentMessage optionSettings(List optionSettings) {
    this.optionSettings = optionSettings;
    return this;
  }

  /**
   * Get optionSettings
   * @return optionSettings
   */
  @javax.annotation.Nullable
  public List getOptionSettings() {
    return optionSettings;
  }

  public void setOptionSettings(List optionSettings) {
    this.optionSettings = optionSettings;
  }


  public CreateEnvironmentMessage optionsToRemove(List optionsToRemove) {
    this.optionsToRemove = optionsToRemove;
    return this;
  }

  /**
   * Get optionsToRemove
   * @return optionsToRemove
   */
  @javax.annotation.Nullable
  public List getOptionsToRemove() {
    return optionsToRemove;
  }

  public void setOptionsToRemove(List optionsToRemove) {
    this.optionsToRemove = optionsToRemove;
  }


  public CreateEnvironmentMessage operationsRole(String operationsRole) {
    this.operationsRole = operationsRole;
    return this;
  }

  /**
   * Get operationsRole
   * @return operationsRole
   */
  @javax.annotation.Nullable
  public String getOperationsRole() {
    return operationsRole;
  }

  public void setOperationsRole(String operationsRole) {
    this.operationsRole = operationsRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEnvironmentMessage createEnvironmentMessage = (CreateEnvironmentMessage) o;
    return Objects.equals(this.applicationName, createEnvironmentMessage.applicationName) &&
        Objects.equals(this.environmentName, createEnvironmentMessage.environmentName) &&
        Objects.equals(this.groupName, createEnvironmentMessage.groupName) &&
        Objects.equals(this.description, createEnvironmentMessage.description) &&
        Objects.equals(this.cnAMEPrefix, createEnvironmentMessage.cnAMEPrefix) &&
        Objects.equals(this.tier, createEnvironmentMessage.tier) &&
        Objects.equals(this.tags, createEnvironmentMessage.tags) &&
        Objects.equals(this.versionLabel, createEnvironmentMessage.versionLabel) &&
        Objects.equals(this.templateName, createEnvironmentMessage.templateName) &&
        Objects.equals(this.solutionStackName, createEnvironmentMessage.solutionStackName) &&
        Objects.equals(this.platformArn, createEnvironmentMessage.platformArn) &&
        Objects.equals(this.optionSettings, createEnvironmentMessage.optionSettings) &&
        Objects.equals(this.optionsToRemove, createEnvironmentMessage.optionsToRemove) &&
        Objects.equals(this.operationsRole, createEnvironmentMessage.operationsRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, environmentName, groupName, description, cnAMEPrefix, tier, tags, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, operationsRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEnvironmentMessage {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    environmentName: ").append(toIndentedString(environmentName)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cnAMEPrefix: ").append(toIndentedString(cnAMEPrefix)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    versionLabel: ").append(toIndentedString(versionLabel)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    solutionStackName: ").append(toIndentedString(solutionStackName)).append("\n");
    sb.append("    platformArn: ").append(toIndentedString(platformArn)).append("\n");
    sb.append("    optionSettings: ").append(toIndentedString(optionSettings)).append("\n");
    sb.append("    optionsToRemove: ").append(toIndentedString(optionsToRemove)).append("\n");
    sb.append("    operationsRole: ").append(toIndentedString(operationsRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("EnvironmentName");
    openapiFields.add("GroupName");
    openapiFields.add("Description");
    openapiFields.add("CNAMEPrefix");
    openapiFields.add("Tier");
    openapiFields.add("Tags");
    openapiFields.add("VersionLabel");
    openapiFields.add("TemplateName");
    openapiFields.add("SolutionStackName");
    openapiFields.add("PlatformArn");
    openapiFields.add("OptionSettings");
    openapiFields.add("OptionsToRemove");
    openapiFields.add("OperationsRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEnvironmentMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEnvironmentMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEnvironmentMessage is not found in the empty JSON string", CreateEnvironmentMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEnvironmentMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEnvironmentMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEnvironmentMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the optional field `EnvironmentName`
      if (jsonObj.get("EnvironmentName") != null && !jsonObj.get("EnvironmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EnvironmentName"));
      }
      // validate the optional field `GroupName`
      if (jsonObj.get("GroupName") != null && !jsonObj.get("GroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GroupName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `CNAMEPrefix`
      if (jsonObj.get("CNAMEPrefix") != null && !jsonObj.get("CNAMEPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CNAMEPrefix"));
      }
      // validate the optional field `Tier`
      if (jsonObj.get("Tier") != null && !jsonObj.get("Tier").isJsonNull()) {
        CreateEnvironmentMessageTier.validateJsonElement(jsonObj.get("Tier"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `VersionLabel`
      if (jsonObj.get("VersionLabel") != null && !jsonObj.get("VersionLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionLabel"));
      }
      // validate the optional field `TemplateName`
      if (jsonObj.get("TemplateName") != null && !jsonObj.get("TemplateName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateName"));
      }
      // validate the optional field `SolutionStackName`
      if (jsonObj.get("SolutionStackName") != null && !jsonObj.get("SolutionStackName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SolutionStackName"));
      }
      // validate the optional field `PlatformArn`
      if (jsonObj.get("PlatformArn") != null && !jsonObj.get("PlatformArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformArn"));
      }
      // validate the optional field `OptionSettings`
      if (jsonObj.get("OptionSettings") != null && !jsonObj.get("OptionSettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OptionSettings"));
      }
      // validate the optional field `OptionsToRemove`
      if (jsonObj.get("OptionsToRemove") != null && !jsonObj.get("OptionsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OptionsToRemove"));
      }
      // validate the optional field `OperationsRole`
      if (jsonObj.get("OperationsRole") != null && !jsonObj.get("OperationsRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperationsRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEnvironmentMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEnvironmentMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEnvironmentMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEnvironmentMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEnvironmentMessage>() {
           @Override
           public void write(JsonWriter out, CreateEnvironmentMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEnvironmentMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEnvironmentMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEnvironmentMessage
   * @throws IOException if the JSON string is invalid with respect to CreateEnvironmentMessage
   */
  public static CreateEnvironmentMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEnvironmentMessage.class);
  }

  /**
   * Convert an instance of CreateEnvironmentMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

