/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationDescriptionResourceLifecycleConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of an application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationDescription {
  public static final String SERIALIZED_NAME_APPLICATION_ARN = "ApplicationArn";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ARN)
  private String applicationArn;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "DateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_VERSIONS = "Versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List versions;

  public static final String SERIALIZED_NAME_CONFIGURATION_TEMPLATES = "ConfigurationTemplates";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_TEMPLATES)
  private List configurationTemplates;

  public static final String SERIALIZED_NAME_RESOURCE_LIFECYCLE_CONFIG = "ResourceLifecycleConfig";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LIFECYCLE_CONFIG)
  private ApplicationDescriptionResourceLifecycleConfig resourceLifecycleConfig;

  public ApplicationDescription() {
  }

  public ApplicationDescription applicationArn(String applicationArn) {
    this.applicationArn = applicationArn;
    return this;
  }

  /**
   * Get applicationArn
   * @return applicationArn
   */
  @javax.annotation.Nullable
  public String getApplicationArn() {
    return applicationArn;
  }

  public void setApplicationArn(String applicationArn) {
    this.applicationArn = applicationArn;
  }


  public ApplicationDescription applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ApplicationDescription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationDescription dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ApplicationDescription dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ApplicationDescription versions(List versions) {
    this.versions = versions;
    return this;
  }

  /**
   * Get versions
   * @return versions
   */
  @javax.annotation.Nullable
  public List getVersions() {
    return versions;
  }

  public void setVersions(List versions) {
    this.versions = versions;
  }


  public ApplicationDescription configurationTemplates(List configurationTemplates) {
    this.configurationTemplates = configurationTemplates;
    return this;
  }

  /**
   * Get configurationTemplates
   * @return configurationTemplates
   */
  @javax.annotation.Nullable
  public List getConfigurationTemplates() {
    return configurationTemplates;
  }

  public void setConfigurationTemplates(List configurationTemplates) {
    this.configurationTemplates = configurationTemplates;
  }


  public ApplicationDescription resourceLifecycleConfig(ApplicationDescriptionResourceLifecycleConfig resourceLifecycleConfig) {
    this.resourceLifecycleConfig = resourceLifecycleConfig;
    return this;
  }

  /**
   * Get resourceLifecycleConfig
   * @return resourceLifecycleConfig
   */
  @javax.annotation.Nullable
  public ApplicationDescriptionResourceLifecycleConfig getResourceLifecycleConfig() {
    return resourceLifecycleConfig;
  }

  public void setResourceLifecycleConfig(ApplicationDescriptionResourceLifecycleConfig resourceLifecycleConfig) {
    this.resourceLifecycleConfig = resourceLifecycleConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDescription applicationDescription = (ApplicationDescription) o;
    return Objects.equals(this.applicationArn, applicationDescription.applicationArn) &&
        Objects.equals(this.applicationName, applicationDescription.applicationName) &&
        Objects.equals(this.description, applicationDescription.description) &&
        Objects.equals(this.dateCreated, applicationDescription.dateCreated) &&
        Objects.equals(this.dateUpdated, applicationDescription.dateUpdated) &&
        Objects.equals(this.versions, applicationDescription.versions) &&
        Objects.equals(this.configurationTemplates, applicationDescription.configurationTemplates) &&
        Objects.equals(this.resourceLifecycleConfig, applicationDescription.resourceLifecycleConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationArn, applicationName, description, dateCreated, dateUpdated, versions, configurationTemplates, resourceLifecycleConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDescription {\n");
    sb.append("    applicationArn: ").append(toIndentedString(applicationArn)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    configurationTemplates: ").append(toIndentedString(configurationTemplates)).append("\n");
    sb.append("    resourceLifecycleConfig: ").append(toIndentedString(resourceLifecycleConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationArn");
    openapiFields.add("ApplicationName");
    openapiFields.add("Description");
    openapiFields.add("DateCreated");
    openapiFields.add("DateUpdated");
    openapiFields.add("Versions");
    openapiFields.add("ConfigurationTemplates");
    openapiFields.add("ResourceLifecycleConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDescription is not found in the empty JSON string", ApplicationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationArn`
      if (jsonObj.get("ApplicationArn") != null && !jsonObj.get("ApplicationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationArn"));
      }
      // validate the optional field `ApplicationName`
      if (jsonObj.get("ApplicationName") != null && !jsonObj.get("ApplicationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DateCreated`
      if (jsonObj.get("DateCreated") != null && !jsonObj.get("DateCreated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateCreated"));
      }
      // validate the optional field `DateUpdated`
      if (jsonObj.get("DateUpdated") != null && !jsonObj.get("DateUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateUpdated"));
      }
      // validate the optional field `Versions`
      if (jsonObj.get("Versions") != null && !jsonObj.get("Versions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Versions"));
      }
      // validate the optional field `ConfigurationTemplates`
      if (jsonObj.get("ConfigurationTemplates") != null && !jsonObj.get("ConfigurationTemplates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ConfigurationTemplates"));
      }
      // validate the optional field `ResourceLifecycleConfig`
      if (jsonObj.get("ResourceLifecycleConfig") != null && !jsonObj.get("ResourceLifecycleConfig").isJsonNull()) {
        ApplicationDescriptionResourceLifecycleConfig.validateJsonElement(jsonObj.get("ResourceLifecycleConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationDescription
   */
  public static ApplicationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDescription.class);
  }

  /**
   * Convert an instance of ApplicationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

