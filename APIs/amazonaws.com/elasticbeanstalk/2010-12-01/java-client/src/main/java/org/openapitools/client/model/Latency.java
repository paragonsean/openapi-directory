/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the average latency for the slowest X percent of requests over the last 10 seconds.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Latency {
  public static final String SERIALIZED_NAME_P999 = "P999";
  @SerializedName(SERIALIZED_NAME_P999)
  private Double P999;

  public static final String SERIALIZED_NAME_P99 = "P99";
  @SerializedName(SERIALIZED_NAME_P99)
  private Double P99;

  public static final String SERIALIZED_NAME_P95 = "P95";
  @SerializedName(SERIALIZED_NAME_P95)
  private Double P95;

  public static final String SERIALIZED_NAME_P90 = "P90";
  @SerializedName(SERIALIZED_NAME_P90)
  private Double P90;

  public static final String SERIALIZED_NAME_P85 = "P85";
  @SerializedName(SERIALIZED_NAME_P85)
  private Double P85;

  public static final String SERIALIZED_NAME_P75 = "P75";
  @SerializedName(SERIALIZED_NAME_P75)
  private Double P75;

  public static final String SERIALIZED_NAME_P50 = "P50";
  @SerializedName(SERIALIZED_NAME_P50)
  private Double P50;

  public static final String SERIALIZED_NAME_P10 = "P10";
  @SerializedName(SERIALIZED_NAME_P10)
  private Double P10;

  public Latency() {
  }

  public Latency P999(Double P999) {
    this.P999 = P999;
    return this;
  }

  /**
   * Get P999
   * @return P999
   */
  @javax.annotation.Nullable
  public Double getP999() {
    return P999;
  }

  public void setP999(Double P999) {
    this.P999 = P999;
  }


  public Latency P99(Double P99) {
    this.P99 = P99;
    return this;
  }

  /**
   * Get P99
   * @return P99
   */
  @javax.annotation.Nullable
  public Double getP99() {
    return P99;
  }

  public void setP99(Double P99) {
    this.P99 = P99;
  }


  public Latency P95(Double P95) {
    this.P95 = P95;
    return this;
  }

  /**
   * Get P95
   * @return P95
   */
  @javax.annotation.Nullable
  public Double getP95() {
    return P95;
  }

  public void setP95(Double P95) {
    this.P95 = P95;
  }


  public Latency P90(Double P90) {
    this.P90 = P90;
    return this;
  }

  /**
   * Get P90
   * @return P90
   */
  @javax.annotation.Nullable
  public Double getP90() {
    return P90;
  }

  public void setP90(Double P90) {
    this.P90 = P90;
  }


  public Latency P85(Double P85) {
    this.P85 = P85;
    return this;
  }

  /**
   * Get P85
   * @return P85
   */
  @javax.annotation.Nullable
  public Double getP85() {
    return P85;
  }

  public void setP85(Double P85) {
    this.P85 = P85;
  }


  public Latency P75(Double P75) {
    this.P75 = P75;
    return this;
  }

  /**
   * Get P75
   * @return P75
   */
  @javax.annotation.Nullable
  public Double getP75() {
    return P75;
  }

  public void setP75(Double P75) {
    this.P75 = P75;
  }


  public Latency P50(Double P50) {
    this.P50 = P50;
    return this;
  }

  /**
   * Get P50
   * @return P50
   */
  @javax.annotation.Nullable
  public Double getP50() {
    return P50;
  }

  public void setP50(Double P50) {
    this.P50 = P50;
  }


  public Latency P10(Double P10) {
    this.P10 = P10;
    return this;
  }

  /**
   * Get P10
   * @return P10
   */
  @javax.annotation.Nullable
  public Double getP10() {
    return P10;
  }

  public void setP10(Double P10) {
    this.P10 = P10;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Latency latency = (Latency) o;
    return Objects.equals(this.P999, latency.P999) &&
        Objects.equals(this.P99, latency.P99) &&
        Objects.equals(this.P95, latency.P95) &&
        Objects.equals(this.P90, latency.P90) &&
        Objects.equals(this.P85, latency.P85) &&
        Objects.equals(this.P75, latency.P75) &&
        Objects.equals(this.P50, latency.P50) &&
        Objects.equals(this.P10, latency.P10);
  }

  @Override
  public int hashCode() {
    return Objects.hash(P999, P99, P95, P90, P85, P75, P50, P10);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Latency {\n");
    sb.append("    P999: ").append(toIndentedString(P999)).append("\n");
    sb.append("    P99: ").append(toIndentedString(P99)).append("\n");
    sb.append("    P95: ").append(toIndentedString(P95)).append("\n");
    sb.append("    P90: ").append(toIndentedString(P90)).append("\n");
    sb.append("    P85: ").append(toIndentedString(P85)).append("\n");
    sb.append("    P75: ").append(toIndentedString(P75)).append("\n");
    sb.append("    P50: ").append(toIndentedString(P50)).append("\n");
    sb.append("    P10: ").append(toIndentedString(P10)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("P999");
    openapiFields.add("P99");
    openapiFields.add("P95");
    openapiFields.add("P90");
    openapiFields.add("P85");
    openapiFields.add("P75");
    openapiFields.add("P50");
    openapiFields.add("P10");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Latency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Latency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Latency is not found in the empty JSON string", Latency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Latency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Latency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `P999`
      if (jsonObj.get("P999") != null && !jsonObj.get("P999").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P999"));
      }
      // validate the optional field `P99`
      if (jsonObj.get("P99") != null && !jsonObj.get("P99").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P99"));
      }
      // validate the optional field `P95`
      if (jsonObj.get("P95") != null && !jsonObj.get("P95").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P95"));
      }
      // validate the optional field `P90`
      if (jsonObj.get("P90") != null && !jsonObj.get("P90").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P90"));
      }
      // validate the optional field `P85`
      if (jsonObj.get("P85") != null && !jsonObj.get("P85").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P85"));
      }
      // validate the optional field `P75`
      if (jsonObj.get("P75") != null && !jsonObj.get("P75").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P75"));
      }
      // validate the optional field `P50`
      if (jsonObj.get("P50") != null && !jsonObj.get("P50").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P50"));
      }
      // validate the optional field `P10`
      if (jsonObj.get("P10") != null && !jsonObj.get("P10").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("P10"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Latency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Latency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Latency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Latency.class));

       return (TypeAdapter<T>) new TypeAdapter<Latency>() {
           @Override
           public void write(JsonWriter out, Latency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Latency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Latency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Latency
   * @throws IOException if the JSON string is invalid with respect to Latency
   */
  public static Latency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Latency.class);
  }

  /**
   * Convert an instance of Latency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

