/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigurationOptionDescriptionRegex;
import org.openapitools.client.model.ConfigurationOptionValueType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the possible values for a configuration option.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationOptionDescription {
  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_CHANGE_SEVERITY = "ChangeSeverity";
  @SerializedName(SERIALIZED_NAME_CHANGE_SEVERITY)
  private String changeSeverity;

  public static final String SERIALIZED_NAME_USER_DEFINED = "UserDefined";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED)
  private Boolean userDefined;

  public static final String SERIALIZED_NAME_VALUE_TYPE = "ValueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ConfigurationOptionValueType valueType;

  public static final String SERIALIZED_NAME_VALUE_OPTIONS = "ValueOptions";
  @SerializedName(SERIALIZED_NAME_VALUE_OPTIONS)
  private List valueOptions;

  public static final String SERIALIZED_NAME_MIN_VALUE = "MinValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Integer minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "MaxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Integer maxValue;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "MaxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_REGEX = "Regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private ConfigurationOptionDescriptionRegex regex;

  public ConfigurationOptionDescription() {
  }

  public ConfigurationOptionDescription namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public ConfigurationOptionDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConfigurationOptionDescription defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public ConfigurationOptionDescription changeSeverity(String changeSeverity) {
    this.changeSeverity = changeSeverity;
    return this;
  }

  /**
   * Get changeSeverity
   * @return changeSeverity
   */
  @javax.annotation.Nullable
  public String getChangeSeverity() {
    return changeSeverity;
  }

  public void setChangeSeverity(String changeSeverity) {
    this.changeSeverity = changeSeverity;
  }


  public ConfigurationOptionDescription userDefined(Boolean userDefined) {
    this.userDefined = userDefined;
    return this;
  }

  /**
   * Get userDefined
   * @return userDefined
   */
  @javax.annotation.Nullable
  public Boolean getUserDefined() {
    return userDefined;
  }

  public void setUserDefined(Boolean userDefined) {
    this.userDefined = userDefined;
  }


  public ConfigurationOptionDescription valueType(ConfigurationOptionValueType valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Get valueType
   * @return valueType
   */
  @javax.annotation.Nullable
  public ConfigurationOptionValueType getValueType() {
    return valueType;
  }

  public void setValueType(ConfigurationOptionValueType valueType) {
    this.valueType = valueType;
  }


  public ConfigurationOptionDescription valueOptions(List valueOptions) {
    this.valueOptions = valueOptions;
    return this;
  }

  /**
   * Get valueOptions
   * @return valueOptions
   */
  @javax.annotation.Nullable
  public List getValueOptions() {
    return valueOptions;
  }

  public void setValueOptions(List valueOptions) {
    this.valueOptions = valueOptions;
  }


  public ConfigurationOptionDescription minValue(Integer minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Get minValue
   * @return minValue
   */
  @javax.annotation.Nullable
  public Integer getMinValue() {
    return minValue;
  }

  public void setMinValue(Integer minValue) {
    this.minValue = minValue;
  }


  public ConfigurationOptionDescription maxValue(Integer maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Get maxValue
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Integer getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Integer maxValue) {
    this.maxValue = maxValue;
  }


  public ConfigurationOptionDescription maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Get maxLength
   * @return maxLength
   */
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public ConfigurationOptionDescription regex(ConfigurationOptionDescriptionRegex regex) {
    this.regex = regex;
    return this;
  }

  /**
   * Get regex
   * @return regex
   */
  @javax.annotation.Nullable
  public ConfigurationOptionDescriptionRegex getRegex() {
    return regex;
  }

  public void setRegex(ConfigurationOptionDescriptionRegex regex) {
    this.regex = regex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationOptionDescription configurationOptionDescription = (ConfigurationOptionDescription) o;
    return Objects.equals(this.namespace, configurationOptionDescription.namespace) &&
        Objects.equals(this.name, configurationOptionDescription.name) &&
        Objects.equals(this.defaultValue, configurationOptionDescription.defaultValue) &&
        Objects.equals(this.changeSeverity, configurationOptionDescription.changeSeverity) &&
        Objects.equals(this.userDefined, configurationOptionDescription.userDefined) &&
        Objects.equals(this.valueType, configurationOptionDescription.valueType) &&
        Objects.equals(this.valueOptions, configurationOptionDescription.valueOptions) &&
        Objects.equals(this.minValue, configurationOptionDescription.minValue) &&
        Objects.equals(this.maxValue, configurationOptionDescription.maxValue) &&
        Objects.equals(this.maxLength, configurationOptionDescription.maxLength) &&
        Objects.equals(this.regex, configurationOptionDescription.regex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, name, defaultValue, changeSeverity, userDefined, valueType, valueOptions, minValue, maxValue, maxLength, regex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationOptionDescription {\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    changeSeverity: ").append(toIndentedString(changeSeverity)).append("\n");
    sb.append("    userDefined: ").append(toIndentedString(userDefined)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    valueOptions: ").append(toIndentedString(valueOptions)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Namespace");
    openapiFields.add("Name");
    openapiFields.add("DefaultValue");
    openapiFields.add("ChangeSeverity");
    openapiFields.add("UserDefined");
    openapiFields.add("ValueType");
    openapiFields.add("ValueOptions");
    openapiFields.add("MinValue");
    openapiFields.add("MaxValue");
    openapiFields.add("MaxLength");
    openapiFields.add("Regex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationOptionDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationOptionDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationOptionDescription is not found in the empty JSON string", ConfigurationOptionDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationOptionDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationOptionDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Namespace`
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Namespace"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultValue"));
      }
      // validate the optional field `ChangeSeverity`
      if (jsonObj.get("ChangeSeverity") != null && !jsonObj.get("ChangeSeverity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSeverity"));
      }
      // validate the optional field `UserDefined`
      if (jsonObj.get("UserDefined") != null && !jsonObj.get("UserDefined").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UserDefined"));
      }
      // validate the optional field `ValueType`
      if (jsonObj.get("ValueType") != null && !jsonObj.get("ValueType").isJsonNull()) {
        ConfigurationOptionValueType.validateJsonElement(jsonObj.get("ValueType"));
      }
      // validate the optional field `ValueOptions`
      if (jsonObj.get("ValueOptions") != null && !jsonObj.get("ValueOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ValueOptions"));
      }
      // validate the optional field `MinValue`
      if (jsonObj.get("MinValue") != null && !jsonObj.get("MinValue").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinValue"));
      }
      // validate the optional field `MaxValue`
      if (jsonObj.get("MaxValue") != null && !jsonObj.get("MaxValue").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxValue"));
      }
      // validate the optional field `MaxLength`
      if (jsonObj.get("MaxLength") != null && !jsonObj.get("MaxLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxLength"));
      }
      // validate the optional field `Regex`
      if (jsonObj.get("Regex") != null && !jsonObj.get("Regex").isJsonNull()) {
        ConfigurationOptionDescriptionRegex.validateJsonElement(jsonObj.get("Regex"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationOptionDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationOptionDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationOptionDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationOptionDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationOptionDescription>() {
           @Override
           public void write(JsonWriter out, ConfigurationOptionDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationOptionDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationOptionDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationOptionDescription
   * @throws IOException if the JSON string is invalid with respect to ConfigurationOptionDescription
   */
  public static ConfigurationOptionDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationOptionDescription.class);
  }

  /**
   * Convert an instance of ConfigurationOptionDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

