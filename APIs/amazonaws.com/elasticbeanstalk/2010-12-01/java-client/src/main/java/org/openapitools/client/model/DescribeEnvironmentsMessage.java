/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to describe one or more environments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeEnvironmentsMessage {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_VERSION_LABEL = "VersionLabel";
  @SerializedName(SERIALIZED_NAME_VERSION_LABEL)
  private String versionLabel;

  public static final String SERIALIZED_NAME_ENVIRONMENT_IDS = "EnvironmentIds";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_IDS)
  private List environmentIds;

  public static final String SERIALIZED_NAME_ENVIRONMENT_NAMES = "EnvironmentNames";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_NAMES)
  private List environmentNames;

  public static final String SERIALIZED_NAME_INCLUDE_DELETED = "IncludeDeleted";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DELETED)
  private Boolean includeDeleted;

  public static final String SERIALIZED_NAME_INCLUDED_DELETED_BACK_TO = "IncludedDeletedBackTo";
  @SerializedName(SERIALIZED_NAME_INCLUDED_DELETED_BACK_TO)
  private OffsetDateTime includedDeletedBackTo;

  public static final String SERIALIZED_NAME_MAX_RECORDS = "MaxRecords";
  @SerializedName(SERIALIZED_NAME_MAX_RECORDS)
  private Integer maxRecords;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public DescribeEnvironmentsMessage() {
  }

  public DescribeEnvironmentsMessage applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public DescribeEnvironmentsMessage versionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
    return this;
  }

  /**
   * Get versionLabel
   * @return versionLabel
   */
  @javax.annotation.Nullable
  public String getVersionLabel() {
    return versionLabel;
  }

  public void setVersionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
  }


  public DescribeEnvironmentsMessage environmentIds(List environmentIds) {
    this.environmentIds = environmentIds;
    return this;
  }

  /**
   * Get environmentIds
   * @return environmentIds
   */
  @javax.annotation.Nullable
  public List getEnvironmentIds() {
    return environmentIds;
  }

  public void setEnvironmentIds(List environmentIds) {
    this.environmentIds = environmentIds;
  }


  public DescribeEnvironmentsMessage environmentNames(List environmentNames) {
    this.environmentNames = environmentNames;
    return this;
  }

  /**
   * Get environmentNames
   * @return environmentNames
   */
  @javax.annotation.Nullable
  public List getEnvironmentNames() {
    return environmentNames;
  }

  public void setEnvironmentNames(List environmentNames) {
    this.environmentNames = environmentNames;
  }


  public DescribeEnvironmentsMessage includeDeleted(Boolean includeDeleted) {
    this.includeDeleted = includeDeleted;
    return this;
  }

  /**
   * Get includeDeleted
   * @return includeDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIncludeDeleted() {
    return includeDeleted;
  }

  public void setIncludeDeleted(Boolean includeDeleted) {
    this.includeDeleted = includeDeleted;
  }


  public DescribeEnvironmentsMessage includedDeletedBackTo(OffsetDateTime includedDeletedBackTo) {
    this.includedDeletedBackTo = includedDeletedBackTo;
    return this;
  }

  /**
   * Get includedDeletedBackTo
   * @return includedDeletedBackTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIncludedDeletedBackTo() {
    return includedDeletedBackTo;
  }

  public void setIncludedDeletedBackTo(OffsetDateTime includedDeletedBackTo) {
    this.includedDeletedBackTo = includedDeletedBackTo;
  }


  public DescribeEnvironmentsMessage maxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
    return this;
  }

  /**
   * Get maxRecords
   * @return maxRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxRecords() {
    return maxRecords;
  }

  public void setMaxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
  }


  public DescribeEnvironmentsMessage nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeEnvironmentsMessage describeEnvironmentsMessage = (DescribeEnvironmentsMessage) o;
    return Objects.equals(this.applicationName, describeEnvironmentsMessage.applicationName) &&
        Objects.equals(this.versionLabel, describeEnvironmentsMessage.versionLabel) &&
        Objects.equals(this.environmentIds, describeEnvironmentsMessage.environmentIds) &&
        Objects.equals(this.environmentNames, describeEnvironmentsMessage.environmentNames) &&
        Objects.equals(this.includeDeleted, describeEnvironmentsMessage.includeDeleted) &&
        Objects.equals(this.includedDeletedBackTo, describeEnvironmentsMessage.includedDeletedBackTo) &&
        Objects.equals(this.maxRecords, describeEnvironmentsMessage.maxRecords) &&
        Objects.equals(this.nextToken, describeEnvironmentsMessage.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, versionLabel, environmentIds, environmentNames, includeDeleted, includedDeletedBackTo, maxRecords, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeEnvironmentsMessage {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    versionLabel: ").append(toIndentedString(versionLabel)).append("\n");
    sb.append("    environmentIds: ").append(toIndentedString(environmentIds)).append("\n");
    sb.append("    environmentNames: ").append(toIndentedString(environmentNames)).append("\n");
    sb.append("    includeDeleted: ").append(toIndentedString(includeDeleted)).append("\n");
    sb.append("    includedDeletedBackTo: ").append(toIndentedString(includedDeletedBackTo)).append("\n");
    sb.append("    maxRecords: ").append(toIndentedString(maxRecords)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("VersionLabel");
    openapiFields.add("EnvironmentIds");
    openapiFields.add("EnvironmentNames");
    openapiFields.add("IncludeDeleted");
    openapiFields.add("IncludedDeletedBackTo");
    openapiFields.add("MaxRecords");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeEnvironmentsMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeEnvironmentsMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeEnvironmentsMessage is not found in the empty JSON string", DescribeEnvironmentsMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeEnvironmentsMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeEnvironmentsMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationName`
      if (jsonObj.get("ApplicationName") != null && !jsonObj.get("ApplicationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationName"));
      }
      // validate the optional field `VersionLabel`
      if (jsonObj.get("VersionLabel") != null && !jsonObj.get("VersionLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionLabel"));
      }
      // validate the optional field `EnvironmentIds`
      if (jsonObj.get("EnvironmentIds") != null && !jsonObj.get("EnvironmentIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnvironmentIds"));
      }
      // validate the optional field `EnvironmentNames`
      if (jsonObj.get("EnvironmentNames") != null && !jsonObj.get("EnvironmentNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnvironmentNames"));
      }
      // validate the optional field `IncludeDeleted`
      if (jsonObj.get("IncludeDeleted") != null && !jsonObj.get("IncludeDeleted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeDeleted"));
      }
      // validate the optional field `IncludedDeletedBackTo`
      if (jsonObj.get("IncludedDeletedBackTo") != null && !jsonObj.get("IncludedDeletedBackTo").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("IncludedDeletedBackTo"));
      }
      // validate the optional field `MaxRecords`
      if (jsonObj.get("MaxRecords") != null && !jsonObj.get("MaxRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecords"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeEnvironmentsMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeEnvironmentsMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeEnvironmentsMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeEnvironmentsMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeEnvironmentsMessage>() {
           @Override
           public void write(JsonWriter out, DescribeEnvironmentsMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeEnvironmentsMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeEnvironmentsMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeEnvironmentsMessage
   * @throws IOException if the JSON string is invalid with respect to DescribeEnvironmentsMessage
   */
  public static DescribeEnvironmentsMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeEnvironmentsMessage.class);
  }

  /**
   * Convert an instance of DescribeEnvironmentsMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

